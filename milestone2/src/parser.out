Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    OPERATOR

Grammar

Rule 0     S' -> program
Rule 1     control_line -> control_line control_line_stmt
Rule 2     control_line -> control_line_stmt
Rule 3     include_control -> HASHTAG INCLUDE
Rule 4     control_line_stmt -> include_control LTCOMP STRING_L GTCOMP
Rule 5     control_line_stmt -> include_control STRING_L
Rule 6     program -> control_line translation_unit
Rule 7     program -> translation_unit
Rule 8     translation_unit -> declaration_seq
Rule 9     declaration_seq -> declaration_seq declaration
Rule 10    declaration_seq -> declaration
Rule 11    empty -> <empty>
Rule 12    constant_expression -> conditional_expression
Rule 13    conditional_expression -> logical_OR_expression
Rule 14    conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression
Rule 15    logical_OR_expression -> logical_AND_expression
Rule 16    logical_OR_expression -> logical_OR_expression OROP logical_AND_expression
Rule 17    logical_AND_expression -> inclusive_OR_expression
Rule 18    logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression
Rule 19    inclusive_OR_expression -> exclusive_OR_expression
Rule 20    inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression
Rule 21    exclusive_OR_expression -> AND_expression
Rule 22    exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression
Rule 23    AND_expression -> equality_expression
Rule 24    AND_expression -> AND_expression BANDOP equality_expression
Rule 25    equality_expression -> relational_expression
Rule 26    equality_expression -> equality_expression EQCOMP relational_expression
Rule 27    equality_expression -> equality_expression NEQCOMP relational_expression
Rule 28    relational_expression -> shift_expression
Rule 29    relational_expression -> relational_expression LTCOMP shift_expression
Rule 30    relational_expression -> relational_expression GTCOMP shift_expression
Rule 31    relational_expression -> relational_expression LTECOMP shift_expression
Rule 32    relational_expression -> relational_expression GTECOMP shift_expression
Rule 33    shift_expression -> additive_expression
Rule 34    shift_expression -> shift_expression LSHIFT additive_expression
Rule 35    shift_expression -> shift_expression RSHIFT additive_expression
Rule 36    additive_expression -> multiplicative_expression
Rule 37    additive_expression -> additive_expression PLUSOP multiplicative_expression
Rule 38    additive_expression -> additive_expression MINUSOP multiplicative_expression
Rule 39    multiplicative_expression -> pm_expression
Rule 40    multiplicative_expression -> multiplicative_expression MULTOP pm_expression
Rule 41    multiplicative_expression -> multiplicative_expression DIVOP pm_expression
Rule 42    multiplicative_expression -> multiplicative_expression MODOP pm_expression
Rule 43    pm_expression -> cast_expression
Rule 44    pm_expression -> pm_expression DOTSTAR cast_expression
Rule 45    pm_expression -> pm_expression ARROWSTAR cast_expression
Rule 46    expression -> assignment_expression
Rule 47    expression -> throw_expression
Rule 48    expression -> expression COMMA assignment_expression
Rule 49    throw_expression -> THROW expression
Rule 50    throw_expression -> THROW
Rule 51    assignment_expression -> conditional_expression
Rule 52    assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 53    assignment_operator -> EQUAL
Rule 54    assignment_operator -> MULTEQOP
Rule 55    assignment_operator -> DIVEQOP
Rule 56    assignment_operator -> MODEQOP
Rule 57    assignment_operator -> PLUSEQOP
Rule 58    assignment_operator -> MINUSEQOP
Rule 59    assignment_operator -> LSHIFTEQOP
Rule 60    assignment_operator -> RSHIFTEQOP
Rule 61    assignment_operator -> BANDEQOP
Rule 62    assignment_operator -> BOREQOP
Rule 63    unary_expression -> postfix_expression
Rule 64    unary_expression -> DPLUSOP unary_expression
Rule 65    unary_expression -> DMINUSOP unary_expression
Rule 66    unary_expression -> unary1_operator cast_expression
Rule 67    unary_expression -> unary2_operator cast_expression
Rule 68    unary_expression -> SIZEOF unary_expression
Rule 69    unary_expression -> SIZEOF LPAREN type_name RPAREN
Rule 70    unary_expression -> allocation_expression
Rule 71    unary_expression -> deallocation_expression
Rule 72    deallocation_expression -> DELETE cast_expression
Rule 73    allocation_expression -> NEW new_type_name new_initializer
Rule 74    allocation_expression -> NEW new_type_name
Rule 75    allocation_expression -> NEW LPAREN type_name RPAREN new_initializer
Rule 76    allocation_expression -> NEW LPAREN type_name RPAREN
Rule 77    new_type_name -> type_specifier_ new_declarator
Rule 78    new_type_name -> type_specifier_
Rule 79    new_declarator -> new_declarator MULTOP
Rule 80    new_declarator -> MULTOP
Rule 81    new_declarator -> new_declarator LSPAREN expression RSPAREN
Rule 82    new_declarator -> LSPAREN expression RSPAREN
Rule 83    new_initializer -> LPAREN initializer_list RPAREN
Rule 84    new_initializer -> LPAREN RPAREN
Rule 85    unary1_operator -> PLUSOP
Rule 86    unary1_operator -> MINUSOP
Rule 87    unary1_operator -> NOTSYM
Rule 88    unary1_operator -> BNOP
Rule 89    unary2_operator -> MULTOP
Rule 90    unary2_operator -> BANDOP
Rule 91    postfix_expression -> primary_expression
Rule 92    postfix_expression -> postfix_expression LSPAREN expression RSPAREN
Rule 93    postfix_expression -> postfix_expression LPAREN expression_list RPAREN
Rule 94    postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN
Rule 95    postfix_expression -> postfix_expression LPAREN RPAREN
Rule 96    postfix_expression -> postfix_expression DOT name
Rule 97    postfix_expression -> postfix_expression ARROW name
Rule 98    postfix_expression -> postfix_expression DPLUSOP
Rule 99    postfix_expression -> postfix_expression DMINUSOP
Rule 100   primary_expression -> name
Rule 101   primary_expression -> literal
Rule 102   primary_expression -> THIS
Rule 103   primary_expression -> LPAREN expression RPAREN
Rule 104   literal -> STRING_L
Rule 105   literal -> NUMBER
Rule 106   literal -> SCHAR
Rule 107   cast_expression -> unary_expression
Rule 108   cast_expression -> LPAREN type_name RPAREN cast_expression
Rule 109   abstract_declarator -> unary2_operator
Rule 110   abstract_declarator -> unary2_operator abstract_declarator
Rule 111   abstract_declarator -> LSPAREN constant_expression RSPAREN
Rule 112   abstract_declarator -> abstract_declarator LSPAREN constant_expression RSPAREN
Rule 113   abstract_declarator -> LSPAREN RSPAREN
Rule 114   abstract_declarator -> abstract_declarator LSPAREN RSPAREN
Rule 115   declarator -> name
Rule 116   declarator -> unary2_operator declarator
Rule 117   declarator -> declarator LSPAREN constant_expression RSPAREN
Rule 118   declarator -> declarator LSPAREN RSPAREN
Rule 119   arg_list -> argument_declaration_list
Rule 120   arg_list -> empty
Rule 121   argument_declaration_list -> argument_declaration
Rule 122   argument_declaration_list -> argument_declaration COMMA argument_declaration_list
Rule 123   argument_declaration -> type_specifier_ declarator
Rule 124   argument_declaration -> type_specifier_ declarator EQUAL expression
Rule 125   argument_declaration -> type_specifier_ abstract_declarator
Rule 126   argument_declaration -> type_specifier_
Rule 127   name -> IDENTIFIER
Rule 128   name -> DOUBLEBNOP IDENTIFIER
Rule 129   operator_name -> NEW
Rule 130   operator_name -> DELETE
Rule 131   operator_name -> PLUSOP
Rule 132   operator_name -> MINUSOP
Rule 133   operator_name -> MULTOP
Rule 134   operator_name -> DIVOP
Rule 135   operator_name -> MODOP
Rule 136   operator_name -> XOROP
Rule 137   operator_name -> BANDOP
Rule 138   operator_name -> BNOP
Rule 139   operator_name -> NOTSYM
Rule 140   operator_name -> EQUAL
Rule 141   operator_name -> LTCOMP
Rule 142   operator_name -> GTCOMP
Rule 143   operator_name -> PLUSEQOP
Rule 144   operator_name -> MINUSEQOP
Rule 145   operator_name -> MULTEQOP
Rule 146   operator_name -> DIVEQOP
Rule 147   operator_name -> MODEQOP
Rule 148   operator_name -> XOREQOP
Rule 149   operator_name -> BANDEQOP
Rule 150   operator_name -> LSHIFT
Rule 151   operator_name -> RSHIFT
Rule 152   operator_name -> RSHIFTEQOP
Rule 153   operator_name -> LSHIFTEQOP
Rule 154   operator_name -> EQCOMP
Rule 155   operator_name -> NEQCOMP
Rule 156   operator_name -> LTECOMP
Rule 157   operator_name -> GTECOMP
Rule 158   operator_name -> ANDOP
Rule 159   operator_name -> OROP
Rule 160   operator_name -> DPLUSOP
Rule 161   operator_name -> DMINUSOP
Rule 162   operator_name -> COMMA
Rule 163   operator_name -> ARROWSTAR
Rule 164   operator_name -> ARROW
Rule 165   template_class_name -> LTEMPLATE template_arg_list RTEMPLATE
Rule 166   template_arg_list -> type_name
Rule 167   template_arg_list -> template_arg_list COMMA type_name
Rule 168   type_name -> type_specifier_ abstract_declarator
Rule 169   type_name -> type_specifier_
Rule 170   type_specifier_ -> CONST type_specifier
Rule 171   type_specifier_ -> type_specifier
Rule 172   typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON
Rule 173   typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON
Rule 174   type_specifier -> simple_type_name
Rule 175   type_specifier -> complex_type_specifier
Rule 176   simple_type_name -> CHAR
Rule 177   simple_type_name -> SHORT
Rule 178   simple_type_name -> INT
Rule 179   simple_type_name -> LONG
Rule 180   simple_type_name -> SIGNED
Rule 181   simple_type_name -> UNSIGNED
Rule 182   simple_type_name -> FLOAT
Rule 183   simple_type_name -> DOUBLE
Rule 184   simple_type_name -> VOID
Rule 185   simple_type_name -> STRING
Rule 186   simple_type_name -> AUTO
Rule 187   complex_type_specifier -> class_key IDENTIFIER
Rule 188   complex_type_specifier -> class_key IDENTIFIER template_class_name
Rule 189   complex_type_specifier -> TYPE IDENTIFIER
Rule 190   complex_type_specifier -> TYPE IDENTIFIER template_class_name
Rule 191   pure_specifier -> EQUAL NUMBER
Rule 192   class_head -> class_key IDENTIFIER base_spec
Rule 193   class_head -> class_key IDENTIFIER
Rule 194   base_spec -> COLON base_list
Rule 195   base_list -> base_specifier
Rule 196   base_list -> base_list COMMA base_specifier
Rule 197   base_specifier -> class_key IDENTIFIER
Rule 198   base_specifier -> class_key IDENTIFIER template_class_name
Rule 199   base_specifier -> IDENTIFIER
Rule 200   base_specifier -> IDENTIFIER template_class_name
Rule 201   base_specifier -> access_specifier class_key IDENTIFIER
Rule 202   base_specifier -> access_specifier class_key IDENTIFIER template_class_name
Rule 203   class_key -> CLASS
Rule 204   class_key -> STRUCT
Rule 205   class_define_specifier -> class_head LCPAREN member_list RCPAREN
Rule 206   class_define_specifier -> class_head LCPAREN RCPAREN
Rule 207   member_list -> member_access_list
Rule 208   member_list -> access_list
Rule 209   member_list -> member_list access_list
Rule 210   access_specifier -> PRIVATE
Rule 211   access_specifier -> PROTECTED
Rule 212   access_specifier -> PUBLIC
Rule 213   access_list -> access_specifier COLON member_access_list
Rule 214   access_list -> access_specifier COLON
Rule 215   member_access_list -> member_declaration member_access_list
Rule 216   member_access_list -> member_declaration
Rule 217   member_declaration -> type_specifier_ member_declarator_list SEMICOLON
Rule 218   member_declaration -> member_declarator_list SEMICOLON
Rule 219   member_declaration -> type_specifier_ SEMICOLON
Rule 220   member_declaration -> SEMICOLON
Rule 221   member_declaration -> function_definition
Rule 222   member_declaration -> class_define_specifier SEMICOLON
Rule 223   member_declarator_list -> member_declarator
Rule 224   member_declarator_list -> member_declarator_list COMMA member_declarator
Rule 225   member_declarator -> declarator pure_specifier
Rule 226   member_declarator -> declarator
Rule 227   function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope
Rule 228   function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope
Rule 229   func_push_scope -> LPAREN
Rule 230   fct_body -> compound_statement
Rule 231   compound_statement -> LCPAREN statement_list RCPAREN
Rule 232   compound_statement -> LCPAREN RCPAREN
Rule 233   statement_list -> statement
Rule 234   statement_list -> statement_list statement
Rule 235   statement -> labeled_statement
Rule 236   statement -> expression_statement
Rule 237   statement -> compound_statement
Rule 238   statement -> selection_statement
Rule 239   statement -> iteration_statement
Rule 240   statement -> jump_statement
Rule 241   statement -> declaration_statement
Rule 242   statement -> try_block
Rule 243   jump_statement -> BREAK SEMICOLON
Rule 244   jump_statement -> CONTINUE SEMICOLON
Rule 245   jump_statement -> RETURN expression SEMICOLON
Rule 246   jump_statement -> RETURN SEMICOLON
Rule 247   jump_statement -> GOTO IDENTIFIER SEMICOLON
Rule 248   selection_statement -> IF LPAREN expression RPAREN statement
Rule 249   selection_statement -> IF LPAREN expression RPAREN statement ELSE statement
Rule 250   selection_statement -> SWITCH LPAREN expression RPAREN statement
Rule 251   try_block -> TRY compound_statement CATCH compound_statement
Rule 252   labeled_statement -> IDENTIFIER COLON statement
Rule 253   labeled_statement -> CASE constant_expression COLON statement
Rule 254   labeled_statement -> DEFAULT COLON statement
Rule 255   iteration_statement -> WHILE LPAREN expression RPAREN statement
Rule 256   iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON
Rule 257   iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement
Rule 258   iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement
Rule 259   iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement
Rule 260   iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement
Rule 261   for_init_statement -> expression_statement
Rule 262   for_init_statement -> declaration_statement
Rule 263   expression_statement -> expression SEMICOLON
Rule 264   expression_statement -> SEMICOLON
Rule 265   declaration_statement -> declaration
Rule 266   declaration -> type_specifier_ declarator_list SEMICOLON
Rule 267   declaration -> asm_declaration
Rule 268   declaration -> function_definition
Rule 269   declaration -> function_decl
Rule 270   declaration -> class_define_specifier SEMICOLON
Rule 271   declaration -> template_declaration
Rule 272   declaration -> typedef_declarator
Rule 273   template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
Rule 274   template_argument_list -> argument_declaration
Rule 275   template_argument_list -> template_argument_list COMMA argument_declaration
Rule 276   declarator_list -> init_declarator
Rule 277   declarator_list -> declarator_list COMMA init_declarator
Rule 278   init_declarator -> declarator initializer
Rule 279   init_declarator -> declarator
Rule 280   initializer -> EQUAL assignment_expression
Rule 281   initializer -> EQUAL LCPAREN initializer_list RCPAREN
Rule 282   initializer -> EQUAL LCPAREN initializer_list COMMA RCPAREN
Rule 283   initializer -> LPAREN expression_list RPAREN
Rule 284   initializer_list -> assignment_expression
Rule 285   initializer_list -> initializer_list COMMA assignment_expression
Rule 286   initializer_list -> LCPAREN initializer_list RCPAREN
Rule 287   initializer_list -> LCPAREN initializer_list COMMA RCPAREN
Rule 288   asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON
Rule 289   expression_list -> assignment_expression
Rule 290   expression_list -> expression_list COMMA assignment_expression
Rule 291   push_scope -> <empty>
Rule 292   pop_scope -> <empty>

Terminals, with rules where they appear

ANDOP                : 18 158
ARROW                : 97 164
ARROWSTAR            : 45 163
ASM                  : 288
AUTO                 : 186
BANDEQOP             : 61 149
BANDOP               : 24 90 137
BNOP                 : 88 138
BOREQOP              : 62
BREAK                : 243
CASE                 : 253
CATCH                : 251
CHAR                 : 176
CLASS                : 203
COLON                : 14 194 213 214 252 253 254
COMMA                : 48 122 162 167 196 224 275 277 282 285 287 290
CONST                : 170
CONTINUE             : 244
DEFAULT              : 254
DELETE               : 72 130
DIVEQOP              : 55 146
DIVOP                : 41 134
DMINUSOP             : 65 99 161
DO                   : 256
DOT                  : 96
DOTSTAR              : 44
DOUBLE               : 183
DOUBLEBNOP           : 128
DPLUSOP              : 64 98 160
ELSE                 : 249
EQCOMP               : 26 154
EQUAL                : 53 124 140 191 280 281 282
FLOAT                : 182
FOR                  : 257 258 259 260
GOTO                 : 247
GTCOMP               : 4 30 142
GTECOMP              : 32 157
HASHTAG              : 3
IDENTIFIER           : 127 128 172 173 187 188 189 190 192 193 197 198 199 200 201 202 247 252
IF                   : 248 249
INCLUDE              : 3
INT                  : 178
LCPAREN              : 205 206 231 232 281 282 286 287
LONG                 : 179
LPAREN               : 69 75 76 83 84 93 94 95 103 108 229 248 249 250 255 256 257 258 259 260 283 288
LSHIFT               : 34 150
LSHIFTEQOP           : 59 153
LSPAREN              : 81 82 92 111 112 113 114 117 118
LTCOMP               : 4 29 141
LTECOMP              : 31 156
LTEMPLATE            : 165 273
MINUSEQOP            : 58 144
MINUSOP              : 38 86 132
MODEQOP              : 56 147
MODOP                : 42 135
MULTEQOP             : 54 145
MULTOP               : 40 79 80 89 133
NEQCOMP              : 27 155
NEW                  : 73 74 75 76 129
NOTSYM               : 87 139
NUMBER               : 105 191
OPERATOR             : 
OROP                 : 16 20 159
PLUSEQOP             : 57 143
PLUSOP               : 37 85 131
PRIVATE              : 210
PROTECTED            : 211
PUBLIC               : 212
QUESMARK             : 14
RCPAREN              : 205 206 231 232 281 282 286 287
RETURN               : 245 246
RPAREN               : 69 75 76 83 84 93 94 95 103 108 227 228 248 249 250 255 256 257 258 259 260 283 288
RSHIFT               : 35 151
RSHIFTEQOP           : 60 152
RSPAREN              : 81 82 92 111 112 113 114 117 118
RTEMPLATE            : 165 273
SCHAR                : 106
SEMICOLON            : 172 173 217 218 219 220 222 228 243 244 245 246 247 256 257 258 259 260 263 264 266 270 288
SHORT                : 177
SIGNED               : 180
SIZEOF               : 68 69
STRING               : 185
STRING_L             : 4 5 104 288
STRUCT               : 204
SWITCH               : 250
TEMPLATE             : 273
THIS                 : 102
THROW                : 49 50
TRY                  : 251
TYPE                 : 189 190
TYPEDEF              : 172 173
UNSIGNED             : 181
VOID                 : 184
WHILE                : 255 256
XOREQOP              : 148
XOROP                : 22 136
error                : 

Nonterminals, with rules where they appear

AND_expression       : 21 22 24
abstract_declarator  : 110 112 114 125 168 172
access_list          : 208 209
access_specifier     : 201 202 213 214
additive_expression  : 33 34 35 37 38
allocation_expression : 70
arg_list             : 227 228
argument_declaration : 121 122 274 275
argument_declaration_list : 119 122
asm_declaration      : 267
assignment_expression : 46 48 52 280 284 285 289 290
assignment_operator  : 52
base_list            : 194 196
base_spec            : 192
base_specifier       : 195 196
cast_expression      : 43 44 45 66 67 72 108
class_define_specifier : 222 270
class_head           : 205 206
class_key            : 187 188 192 193 197 198 201 202
complex_type_specifier : 175
compound_statement   : 230 237 251 251 257 258 259
conditional_expression : 12 14 51
constant_expression  : 111 112 117 253
control_line         : 1 6
control_line_stmt    : 1 2
deallocation_expression : 71
declaration          : 9 10 265 273
declaration_seq      : 8 9
declaration_statement : 241 262
declarator           : 116 117 118 123 124 225 226 227 228 278 279
declarator_list      : 266 277
empty                : 120
equality_expression  : 23 24 26 27
exclusive_OR_expression : 19 20 22
expression           : 14 48 49 81 82 92 103 124 245 248 249 250 255 256 257 257 258 259 263
expression_list      : 93 94 283 290
expression_statement : 236 261
fct_body             : 227
for_init_statement   : 257 258 259 260
func_push_scope      : 227 228
function_decl        : 269
function_definition  : 221 268
include_control      : 4 5
inclusive_OR_expression : 17 18 20
init_declarator      : 276 277
initializer          : 278
initializer_list     : 83 281 282 285 286 287
iteration_statement  : 239
jump_statement       : 240
labeled_statement    : 235
literal              : 101
logical_AND_expression : 15 16 18
logical_OR_expression : 13 14 16
member_access_list   : 207 213 215
member_declaration   : 215 216
member_declarator    : 223 224
member_declarator_list : 217 218 224
member_list          : 205 209
multiplicative_expression : 36 37 38 40 41 42
name                 : 96 97 100 115
new_declarator       : 77 79 81
new_initializer      : 73 75
new_type_name        : 73 74
operator_name        : 
pm_expression        : 39 40 41 42 44 45
pop_scope            : 227 228
postfix_expression   : 63 92 93 94 95 96 97 98 99
primary_expression   : 91
program              : 0
pure_specifier       : 225
push_scope           : 
relational_expression : 25 26 27 29 30 31 32
selection_statement  : 238
shift_expression     : 28 29 30 31 32 34 35
simple_type_name     : 174
statement            : 233 234 248 249 249 250 252 253 254 255 256 260
statement_list       : 231 234
template_arg_list    : 165 167
template_argument_list : 273 275
template_class_name  : 94 188 190 198 200 202
template_declaration : 271
throw_expression     : 47
translation_unit     : 6 7
try_block            : 242
type_name            : 69 75 76 108 166 167
type_specifier       : 170 171
type_specifier_      : 77 78 123 124 125 126 168 169 172 173 217 219 227 228 266
typedef_declarator   : 272
unary1_operator      : 66
unary2_operator      : 67 109 110 116
unary_expression     : 52 64 65 68 107

Parsing method: LALR

state 0

    (0) S' -> . program
    (6) program -> . control_line translation_unit
    (7) program -> . translation_unit
    (1) control_line -> . control_line control_line_stmt
    (2) control_line -> . control_line_stmt
    (8) translation_unit -> . declaration_seq
    (4) control_line_stmt -> . include_control LTCOMP STRING_L GTCOMP
    (5) control_line_stmt -> . include_control STRING_L
    (9) declaration_seq -> . declaration_seq declaration
    (10) declaration_seq -> . declaration
    (3) include_control -> . HASHTAG INCLUDE
    (266) declaration -> . type_specifier_ declarator_list SEMICOLON
    (267) declaration -> . asm_declaration
    (268) declaration -> . function_definition
    (269) declaration -> . function_decl
    (270) declaration -> . class_define_specifier SEMICOLON
    (271) declaration -> . template_declaration
    (272) declaration -> . typedef_declarator
    (170) type_specifier_ -> . CONST type_specifier
    (171) type_specifier_ -> . type_specifier
    (288) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (227) function_definition -> . type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope
    (228) function_decl -> . type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope
    (205) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (206) class_define_specifier -> . class_head LCPAREN RCPAREN
    (273) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (172) typedef_declarator -> . TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON
    (173) typedef_declarator -> . TYPEDEF type_specifier_ IDENTIFIER SEMICOLON
    (174) type_specifier -> . simple_type_name
    (175) type_specifier -> . complex_type_specifier
    (192) class_head -> . class_key IDENTIFIER base_spec
    (193) class_head -> . class_key IDENTIFIER
    (176) simple_type_name -> . CHAR
    (177) simple_type_name -> . SHORT
    (178) simple_type_name -> . INT
    (179) simple_type_name -> . LONG
    (180) simple_type_name -> . SIGNED
    (181) simple_type_name -> . UNSIGNED
    (182) simple_type_name -> . FLOAT
    (183) simple_type_name -> . DOUBLE
    (184) simple_type_name -> . VOID
    (185) simple_type_name -> . STRING
    (186) simple_type_name -> . AUTO
    (187) complex_type_specifier -> . class_key IDENTIFIER
    (188) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (189) complex_type_specifier -> . TYPE IDENTIFIER
    (190) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (203) class_key -> . CLASS
    (204) class_key -> . STRUCT

    HASHTAG         shift and go to state 8
    CONST           shift and go to state 16
    ASM             shift and go to state 18
    TEMPLATE        shift and go to state 20
    TYPEDEF         shift and go to state 21
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38

    program                        shift and go to state 1
    control_line                   shift and go to state 2
    translation_unit               shift and go to state 3
    control_line_stmt              shift and go to state 4
    declaration_seq                shift and go to state 5
    include_control                shift and go to state 6
    declaration                    shift and go to state 7
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    function_decl                  shift and go to state 12
    class_define_specifier         shift and go to state 13
    template_declaration           shift and go to state 14
    typedef_declarator             shift and go to state 15
    type_specifier                 shift and go to state 17
    class_head                     shift and go to state 19
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 24

state 1

    (0) S' -> program .



state 2

    (6) program -> control_line . translation_unit
    (1) control_line -> control_line . control_line_stmt
    (8) translation_unit -> . declaration_seq
    (4) control_line_stmt -> . include_control LTCOMP STRING_L GTCOMP
    (5) control_line_stmt -> . include_control STRING_L
    (9) declaration_seq -> . declaration_seq declaration
    (10) declaration_seq -> . declaration
    (3) include_control -> . HASHTAG INCLUDE
    (266) declaration -> . type_specifier_ declarator_list SEMICOLON
    (267) declaration -> . asm_declaration
    (268) declaration -> . function_definition
    (269) declaration -> . function_decl
    (270) declaration -> . class_define_specifier SEMICOLON
    (271) declaration -> . template_declaration
    (272) declaration -> . typedef_declarator
    (170) type_specifier_ -> . CONST type_specifier
    (171) type_specifier_ -> . type_specifier
    (288) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (227) function_definition -> . type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope
    (228) function_decl -> . type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope
    (205) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (206) class_define_specifier -> . class_head LCPAREN RCPAREN
    (273) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (172) typedef_declarator -> . TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON
    (173) typedef_declarator -> . TYPEDEF type_specifier_ IDENTIFIER SEMICOLON
    (174) type_specifier -> . simple_type_name
    (175) type_specifier -> . complex_type_specifier
    (192) class_head -> . class_key IDENTIFIER base_spec
    (193) class_head -> . class_key IDENTIFIER
    (176) simple_type_name -> . CHAR
    (177) simple_type_name -> . SHORT
    (178) simple_type_name -> . INT
    (179) simple_type_name -> . LONG
    (180) simple_type_name -> . SIGNED
    (181) simple_type_name -> . UNSIGNED
    (182) simple_type_name -> . FLOAT
    (183) simple_type_name -> . DOUBLE
    (184) simple_type_name -> . VOID
    (185) simple_type_name -> . STRING
    (186) simple_type_name -> . AUTO
    (187) complex_type_specifier -> . class_key IDENTIFIER
    (188) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (189) complex_type_specifier -> . TYPE IDENTIFIER
    (190) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (203) class_key -> . CLASS
    (204) class_key -> . STRUCT

    HASHTAG         shift and go to state 8
    CONST           shift and go to state 16
    ASM             shift and go to state 18
    TEMPLATE        shift and go to state 20
    TYPEDEF         shift and go to state 21
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38

    translation_unit               shift and go to state 39
    control_line_stmt              shift and go to state 40
    declaration_seq                shift and go to state 5
    include_control                shift and go to state 6
    declaration                    shift and go to state 7
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    function_decl                  shift and go to state 12
    class_define_specifier         shift and go to state 13
    template_declaration           shift and go to state 14
    typedef_declarator             shift and go to state 15
    type_specifier                 shift and go to state 17
    class_head                     shift and go to state 19
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 24

state 3

    (7) program -> translation_unit .

    $end            reduce using rule 7 (program -> translation_unit .)


state 4

    (2) control_line -> control_line_stmt .

    HASHTAG         reduce using rule 2 (control_line -> control_line_stmt .)
    CONST           reduce using rule 2 (control_line -> control_line_stmt .)
    ASM             reduce using rule 2 (control_line -> control_line_stmt .)
    TEMPLATE        reduce using rule 2 (control_line -> control_line_stmt .)
    TYPEDEF         reduce using rule 2 (control_line -> control_line_stmt .)
    CHAR            reduce using rule 2 (control_line -> control_line_stmt .)
    SHORT           reduce using rule 2 (control_line -> control_line_stmt .)
    INT             reduce using rule 2 (control_line -> control_line_stmt .)
    LONG            reduce using rule 2 (control_line -> control_line_stmt .)
    SIGNED          reduce using rule 2 (control_line -> control_line_stmt .)
    UNSIGNED        reduce using rule 2 (control_line -> control_line_stmt .)
    FLOAT           reduce using rule 2 (control_line -> control_line_stmt .)
    DOUBLE          reduce using rule 2 (control_line -> control_line_stmt .)
    VOID            reduce using rule 2 (control_line -> control_line_stmt .)
    STRING          reduce using rule 2 (control_line -> control_line_stmt .)
    AUTO            reduce using rule 2 (control_line -> control_line_stmt .)
    TYPE            reduce using rule 2 (control_line -> control_line_stmt .)
    CLASS           reduce using rule 2 (control_line -> control_line_stmt .)
    STRUCT          reduce using rule 2 (control_line -> control_line_stmt .)


state 5

    (8) translation_unit -> declaration_seq .
    (9) declaration_seq -> declaration_seq . declaration
    (266) declaration -> . type_specifier_ declarator_list SEMICOLON
    (267) declaration -> . asm_declaration
    (268) declaration -> . function_definition
    (269) declaration -> . function_decl
    (270) declaration -> . class_define_specifier SEMICOLON
    (271) declaration -> . template_declaration
    (272) declaration -> . typedef_declarator
    (170) type_specifier_ -> . CONST type_specifier
    (171) type_specifier_ -> . type_specifier
    (288) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (227) function_definition -> . type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope
    (228) function_decl -> . type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope
    (205) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (206) class_define_specifier -> . class_head LCPAREN RCPAREN
    (273) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (172) typedef_declarator -> . TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON
    (173) typedef_declarator -> . TYPEDEF type_specifier_ IDENTIFIER SEMICOLON
    (174) type_specifier -> . simple_type_name
    (175) type_specifier -> . complex_type_specifier
    (192) class_head -> . class_key IDENTIFIER base_spec
    (193) class_head -> . class_key IDENTIFIER
    (176) simple_type_name -> . CHAR
    (177) simple_type_name -> . SHORT
    (178) simple_type_name -> . INT
    (179) simple_type_name -> . LONG
    (180) simple_type_name -> . SIGNED
    (181) simple_type_name -> . UNSIGNED
    (182) simple_type_name -> . FLOAT
    (183) simple_type_name -> . DOUBLE
    (184) simple_type_name -> . VOID
    (185) simple_type_name -> . STRING
    (186) simple_type_name -> . AUTO
    (187) complex_type_specifier -> . class_key IDENTIFIER
    (188) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (189) complex_type_specifier -> . TYPE IDENTIFIER
    (190) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (203) class_key -> . CLASS
    (204) class_key -> . STRUCT

    $end            reduce using rule 8 (translation_unit -> declaration_seq .)
    CONST           shift and go to state 16
    ASM             shift and go to state 18
    TEMPLATE        shift and go to state 20
    TYPEDEF         shift and go to state 21
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38

    declaration                    shift and go to state 41
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    function_decl                  shift and go to state 12
    class_define_specifier         shift and go to state 13
    template_declaration           shift and go to state 14
    typedef_declarator             shift and go to state 15
    type_specifier                 shift and go to state 17
    class_head                     shift and go to state 19
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 24

state 6

    (4) control_line_stmt -> include_control . LTCOMP STRING_L GTCOMP
    (5) control_line_stmt -> include_control . STRING_L

    LTCOMP          shift and go to state 42
    STRING_L        shift and go to state 43


state 7

    (10) declaration_seq -> declaration .

    CONST           reduce using rule 10 (declaration_seq -> declaration .)
    ASM             reduce using rule 10 (declaration_seq -> declaration .)
    TEMPLATE        reduce using rule 10 (declaration_seq -> declaration .)
    TYPEDEF         reduce using rule 10 (declaration_seq -> declaration .)
    CHAR            reduce using rule 10 (declaration_seq -> declaration .)
    SHORT           reduce using rule 10 (declaration_seq -> declaration .)
    INT             reduce using rule 10 (declaration_seq -> declaration .)
    LONG            reduce using rule 10 (declaration_seq -> declaration .)
    SIGNED          reduce using rule 10 (declaration_seq -> declaration .)
    UNSIGNED        reduce using rule 10 (declaration_seq -> declaration .)
    FLOAT           reduce using rule 10 (declaration_seq -> declaration .)
    DOUBLE          reduce using rule 10 (declaration_seq -> declaration .)
    VOID            reduce using rule 10 (declaration_seq -> declaration .)
    STRING          reduce using rule 10 (declaration_seq -> declaration .)
    AUTO            reduce using rule 10 (declaration_seq -> declaration .)
    TYPE            reduce using rule 10 (declaration_seq -> declaration .)
    CLASS           reduce using rule 10 (declaration_seq -> declaration .)
    STRUCT          reduce using rule 10 (declaration_seq -> declaration .)
    $end            reduce using rule 10 (declaration_seq -> declaration .)


state 8

    (3) include_control -> HASHTAG . INCLUDE

    INCLUDE         shift and go to state 44


state 9

    (266) declaration -> type_specifier_ . declarator_list SEMICOLON
    (227) function_definition -> type_specifier_ . declarator func_push_scope arg_list RPAREN fct_body pop_scope
    (228) function_decl -> type_specifier_ . declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope
    (276) declarator_list -> . init_declarator
    (277) declarator_list -> . declarator_list COMMA init_declarator
    (115) declarator -> . name
    (116) declarator -> . unary2_operator declarator
    (117) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (118) declarator -> . declarator LSPAREN RSPAREN
    (278) init_declarator -> . declarator initializer
    (279) init_declarator -> . declarator
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP

    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53

    declarator_list                shift and go to state 45
    declarator                     shift and go to state 46
    init_declarator                shift and go to state 47
    name                           shift and go to state 48
    unary2_operator                shift and go to state 49

state 10

    (267) declaration -> asm_declaration .

    CONST           reduce using rule 267 (declaration -> asm_declaration .)
    ASM             reduce using rule 267 (declaration -> asm_declaration .)
    TEMPLATE        reduce using rule 267 (declaration -> asm_declaration .)
    TYPEDEF         reduce using rule 267 (declaration -> asm_declaration .)
    CHAR            reduce using rule 267 (declaration -> asm_declaration .)
    SHORT           reduce using rule 267 (declaration -> asm_declaration .)
    INT             reduce using rule 267 (declaration -> asm_declaration .)
    LONG            reduce using rule 267 (declaration -> asm_declaration .)
    SIGNED          reduce using rule 267 (declaration -> asm_declaration .)
    UNSIGNED        reduce using rule 267 (declaration -> asm_declaration .)
    FLOAT           reduce using rule 267 (declaration -> asm_declaration .)
    DOUBLE          reduce using rule 267 (declaration -> asm_declaration .)
    VOID            reduce using rule 267 (declaration -> asm_declaration .)
    STRING          reduce using rule 267 (declaration -> asm_declaration .)
    AUTO            reduce using rule 267 (declaration -> asm_declaration .)
    TYPE            reduce using rule 267 (declaration -> asm_declaration .)
    CLASS           reduce using rule 267 (declaration -> asm_declaration .)
    STRUCT          reduce using rule 267 (declaration -> asm_declaration .)
    $end            reduce using rule 267 (declaration -> asm_declaration .)
    RCPAREN         reduce using rule 267 (declaration -> asm_declaration .)
    IDENTIFIER      reduce using rule 267 (declaration -> asm_declaration .)
    CASE            reduce using rule 267 (declaration -> asm_declaration .)
    DEFAULT         reduce using rule 267 (declaration -> asm_declaration .)
    SEMICOLON       reduce using rule 267 (declaration -> asm_declaration .)
    LCPAREN         reduce using rule 267 (declaration -> asm_declaration .)
    IF              reduce using rule 267 (declaration -> asm_declaration .)
    SWITCH          reduce using rule 267 (declaration -> asm_declaration .)
    WHILE           reduce using rule 267 (declaration -> asm_declaration .)
    DO              reduce using rule 267 (declaration -> asm_declaration .)
    FOR             reduce using rule 267 (declaration -> asm_declaration .)
    BREAK           reduce using rule 267 (declaration -> asm_declaration .)
    CONTINUE        reduce using rule 267 (declaration -> asm_declaration .)
    RETURN          reduce using rule 267 (declaration -> asm_declaration .)
    GOTO            reduce using rule 267 (declaration -> asm_declaration .)
    TRY             reduce using rule 267 (declaration -> asm_declaration .)
    THROW           reduce using rule 267 (declaration -> asm_declaration .)
    DPLUSOP         reduce using rule 267 (declaration -> asm_declaration .)
    DMINUSOP        reduce using rule 267 (declaration -> asm_declaration .)
    SIZEOF          reduce using rule 267 (declaration -> asm_declaration .)
    PLUSOP          reduce using rule 267 (declaration -> asm_declaration .)
    MINUSOP         reduce using rule 267 (declaration -> asm_declaration .)
    NOTSYM          reduce using rule 267 (declaration -> asm_declaration .)
    BNOP            reduce using rule 267 (declaration -> asm_declaration .)
    MULTOP          reduce using rule 267 (declaration -> asm_declaration .)
    BANDOP          reduce using rule 267 (declaration -> asm_declaration .)
    NEW             reduce using rule 267 (declaration -> asm_declaration .)
    DELETE          reduce using rule 267 (declaration -> asm_declaration .)
    THIS            reduce using rule 267 (declaration -> asm_declaration .)
    LPAREN          reduce using rule 267 (declaration -> asm_declaration .)
    DOUBLEBNOP      reduce using rule 267 (declaration -> asm_declaration .)
    STRING_L        reduce using rule 267 (declaration -> asm_declaration .)
    NUMBER          reduce using rule 267 (declaration -> asm_declaration .)
    SCHAR           reduce using rule 267 (declaration -> asm_declaration .)
    ELSE            reduce using rule 267 (declaration -> asm_declaration .)


state 11

    (268) declaration -> function_definition .

    CONST           reduce using rule 268 (declaration -> function_definition .)
    ASM             reduce using rule 268 (declaration -> function_definition .)
    TEMPLATE        reduce using rule 268 (declaration -> function_definition .)
    TYPEDEF         reduce using rule 268 (declaration -> function_definition .)
    CHAR            reduce using rule 268 (declaration -> function_definition .)
    SHORT           reduce using rule 268 (declaration -> function_definition .)
    INT             reduce using rule 268 (declaration -> function_definition .)
    LONG            reduce using rule 268 (declaration -> function_definition .)
    SIGNED          reduce using rule 268 (declaration -> function_definition .)
    UNSIGNED        reduce using rule 268 (declaration -> function_definition .)
    FLOAT           reduce using rule 268 (declaration -> function_definition .)
    DOUBLE          reduce using rule 268 (declaration -> function_definition .)
    VOID            reduce using rule 268 (declaration -> function_definition .)
    STRING          reduce using rule 268 (declaration -> function_definition .)
    AUTO            reduce using rule 268 (declaration -> function_definition .)
    TYPE            reduce using rule 268 (declaration -> function_definition .)
    CLASS           reduce using rule 268 (declaration -> function_definition .)
    STRUCT          reduce using rule 268 (declaration -> function_definition .)
    $end            reduce using rule 268 (declaration -> function_definition .)
    RCPAREN         reduce using rule 268 (declaration -> function_definition .)
    IDENTIFIER      reduce using rule 268 (declaration -> function_definition .)
    CASE            reduce using rule 268 (declaration -> function_definition .)
    DEFAULT         reduce using rule 268 (declaration -> function_definition .)
    SEMICOLON       reduce using rule 268 (declaration -> function_definition .)
    LCPAREN         reduce using rule 268 (declaration -> function_definition .)
    IF              reduce using rule 268 (declaration -> function_definition .)
    SWITCH          reduce using rule 268 (declaration -> function_definition .)
    WHILE           reduce using rule 268 (declaration -> function_definition .)
    DO              reduce using rule 268 (declaration -> function_definition .)
    FOR             reduce using rule 268 (declaration -> function_definition .)
    BREAK           reduce using rule 268 (declaration -> function_definition .)
    CONTINUE        reduce using rule 268 (declaration -> function_definition .)
    RETURN          reduce using rule 268 (declaration -> function_definition .)
    GOTO            reduce using rule 268 (declaration -> function_definition .)
    TRY             reduce using rule 268 (declaration -> function_definition .)
    THROW           reduce using rule 268 (declaration -> function_definition .)
    DPLUSOP         reduce using rule 268 (declaration -> function_definition .)
    DMINUSOP        reduce using rule 268 (declaration -> function_definition .)
    SIZEOF          reduce using rule 268 (declaration -> function_definition .)
    PLUSOP          reduce using rule 268 (declaration -> function_definition .)
    MINUSOP         reduce using rule 268 (declaration -> function_definition .)
    NOTSYM          reduce using rule 268 (declaration -> function_definition .)
    BNOP            reduce using rule 268 (declaration -> function_definition .)
    MULTOP          reduce using rule 268 (declaration -> function_definition .)
    BANDOP          reduce using rule 268 (declaration -> function_definition .)
    NEW             reduce using rule 268 (declaration -> function_definition .)
    DELETE          reduce using rule 268 (declaration -> function_definition .)
    THIS            reduce using rule 268 (declaration -> function_definition .)
    LPAREN          reduce using rule 268 (declaration -> function_definition .)
    DOUBLEBNOP      reduce using rule 268 (declaration -> function_definition .)
    STRING_L        reduce using rule 268 (declaration -> function_definition .)
    NUMBER          reduce using rule 268 (declaration -> function_definition .)
    SCHAR           reduce using rule 268 (declaration -> function_definition .)
    ELSE            reduce using rule 268 (declaration -> function_definition .)


state 12

    (269) declaration -> function_decl .

    CONST           reduce using rule 269 (declaration -> function_decl .)
    ASM             reduce using rule 269 (declaration -> function_decl .)
    TEMPLATE        reduce using rule 269 (declaration -> function_decl .)
    TYPEDEF         reduce using rule 269 (declaration -> function_decl .)
    CHAR            reduce using rule 269 (declaration -> function_decl .)
    SHORT           reduce using rule 269 (declaration -> function_decl .)
    INT             reduce using rule 269 (declaration -> function_decl .)
    LONG            reduce using rule 269 (declaration -> function_decl .)
    SIGNED          reduce using rule 269 (declaration -> function_decl .)
    UNSIGNED        reduce using rule 269 (declaration -> function_decl .)
    FLOAT           reduce using rule 269 (declaration -> function_decl .)
    DOUBLE          reduce using rule 269 (declaration -> function_decl .)
    VOID            reduce using rule 269 (declaration -> function_decl .)
    STRING          reduce using rule 269 (declaration -> function_decl .)
    AUTO            reduce using rule 269 (declaration -> function_decl .)
    TYPE            reduce using rule 269 (declaration -> function_decl .)
    CLASS           reduce using rule 269 (declaration -> function_decl .)
    STRUCT          reduce using rule 269 (declaration -> function_decl .)
    $end            reduce using rule 269 (declaration -> function_decl .)
    RCPAREN         reduce using rule 269 (declaration -> function_decl .)
    IDENTIFIER      reduce using rule 269 (declaration -> function_decl .)
    CASE            reduce using rule 269 (declaration -> function_decl .)
    DEFAULT         reduce using rule 269 (declaration -> function_decl .)
    SEMICOLON       reduce using rule 269 (declaration -> function_decl .)
    LCPAREN         reduce using rule 269 (declaration -> function_decl .)
    IF              reduce using rule 269 (declaration -> function_decl .)
    SWITCH          reduce using rule 269 (declaration -> function_decl .)
    WHILE           reduce using rule 269 (declaration -> function_decl .)
    DO              reduce using rule 269 (declaration -> function_decl .)
    FOR             reduce using rule 269 (declaration -> function_decl .)
    BREAK           reduce using rule 269 (declaration -> function_decl .)
    CONTINUE        reduce using rule 269 (declaration -> function_decl .)
    RETURN          reduce using rule 269 (declaration -> function_decl .)
    GOTO            reduce using rule 269 (declaration -> function_decl .)
    TRY             reduce using rule 269 (declaration -> function_decl .)
    THROW           reduce using rule 269 (declaration -> function_decl .)
    DPLUSOP         reduce using rule 269 (declaration -> function_decl .)
    DMINUSOP        reduce using rule 269 (declaration -> function_decl .)
    SIZEOF          reduce using rule 269 (declaration -> function_decl .)
    PLUSOP          reduce using rule 269 (declaration -> function_decl .)
    MINUSOP         reduce using rule 269 (declaration -> function_decl .)
    NOTSYM          reduce using rule 269 (declaration -> function_decl .)
    BNOP            reduce using rule 269 (declaration -> function_decl .)
    MULTOP          reduce using rule 269 (declaration -> function_decl .)
    BANDOP          reduce using rule 269 (declaration -> function_decl .)
    NEW             reduce using rule 269 (declaration -> function_decl .)
    DELETE          reduce using rule 269 (declaration -> function_decl .)
    THIS            reduce using rule 269 (declaration -> function_decl .)
    LPAREN          reduce using rule 269 (declaration -> function_decl .)
    DOUBLEBNOP      reduce using rule 269 (declaration -> function_decl .)
    STRING_L        reduce using rule 269 (declaration -> function_decl .)
    NUMBER          reduce using rule 269 (declaration -> function_decl .)
    SCHAR           reduce using rule 269 (declaration -> function_decl .)
    ELSE            reduce using rule 269 (declaration -> function_decl .)


state 13

    (270) declaration -> class_define_specifier . SEMICOLON

    SEMICOLON       shift and go to state 54


state 14

    (271) declaration -> template_declaration .

    CONST           reduce using rule 271 (declaration -> template_declaration .)
    ASM             reduce using rule 271 (declaration -> template_declaration .)
    TEMPLATE        reduce using rule 271 (declaration -> template_declaration .)
    TYPEDEF         reduce using rule 271 (declaration -> template_declaration .)
    CHAR            reduce using rule 271 (declaration -> template_declaration .)
    SHORT           reduce using rule 271 (declaration -> template_declaration .)
    INT             reduce using rule 271 (declaration -> template_declaration .)
    LONG            reduce using rule 271 (declaration -> template_declaration .)
    SIGNED          reduce using rule 271 (declaration -> template_declaration .)
    UNSIGNED        reduce using rule 271 (declaration -> template_declaration .)
    FLOAT           reduce using rule 271 (declaration -> template_declaration .)
    DOUBLE          reduce using rule 271 (declaration -> template_declaration .)
    VOID            reduce using rule 271 (declaration -> template_declaration .)
    STRING          reduce using rule 271 (declaration -> template_declaration .)
    AUTO            reduce using rule 271 (declaration -> template_declaration .)
    TYPE            reduce using rule 271 (declaration -> template_declaration .)
    CLASS           reduce using rule 271 (declaration -> template_declaration .)
    STRUCT          reduce using rule 271 (declaration -> template_declaration .)
    $end            reduce using rule 271 (declaration -> template_declaration .)
    RCPAREN         reduce using rule 271 (declaration -> template_declaration .)
    IDENTIFIER      reduce using rule 271 (declaration -> template_declaration .)
    CASE            reduce using rule 271 (declaration -> template_declaration .)
    DEFAULT         reduce using rule 271 (declaration -> template_declaration .)
    SEMICOLON       reduce using rule 271 (declaration -> template_declaration .)
    LCPAREN         reduce using rule 271 (declaration -> template_declaration .)
    IF              reduce using rule 271 (declaration -> template_declaration .)
    SWITCH          reduce using rule 271 (declaration -> template_declaration .)
    WHILE           reduce using rule 271 (declaration -> template_declaration .)
    DO              reduce using rule 271 (declaration -> template_declaration .)
    FOR             reduce using rule 271 (declaration -> template_declaration .)
    BREAK           reduce using rule 271 (declaration -> template_declaration .)
    CONTINUE        reduce using rule 271 (declaration -> template_declaration .)
    RETURN          reduce using rule 271 (declaration -> template_declaration .)
    GOTO            reduce using rule 271 (declaration -> template_declaration .)
    TRY             reduce using rule 271 (declaration -> template_declaration .)
    THROW           reduce using rule 271 (declaration -> template_declaration .)
    DPLUSOP         reduce using rule 271 (declaration -> template_declaration .)
    DMINUSOP        reduce using rule 271 (declaration -> template_declaration .)
    SIZEOF          reduce using rule 271 (declaration -> template_declaration .)
    PLUSOP          reduce using rule 271 (declaration -> template_declaration .)
    MINUSOP         reduce using rule 271 (declaration -> template_declaration .)
    NOTSYM          reduce using rule 271 (declaration -> template_declaration .)
    BNOP            reduce using rule 271 (declaration -> template_declaration .)
    MULTOP          reduce using rule 271 (declaration -> template_declaration .)
    BANDOP          reduce using rule 271 (declaration -> template_declaration .)
    NEW             reduce using rule 271 (declaration -> template_declaration .)
    DELETE          reduce using rule 271 (declaration -> template_declaration .)
    THIS            reduce using rule 271 (declaration -> template_declaration .)
    LPAREN          reduce using rule 271 (declaration -> template_declaration .)
    DOUBLEBNOP      reduce using rule 271 (declaration -> template_declaration .)
    STRING_L        reduce using rule 271 (declaration -> template_declaration .)
    NUMBER          reduce using rule 271 (declaration -> template_declaration .)
    SCHAR           reduce using rule 271 (declaration -> template_declaration .)
    ELSE            reduce using rule 271 (declaration -> template_declaration .)


state 15

    (272) declaration -> typedef_declarator .

    CONST           reduce using rule 272 (declaration -> typedef_declarator .)
    ASM             reduce using rule 272 (declaration -> typedef_declarator .)
    TEMPLATE        reduce using rule 272 (declaration -> typedef_declarator .)
    TYPEDEF         reduce using rule 272 (declaration -> typedef_declarator .)
    CHAR            reduce using rule 272 (declaration -> typedef_declarator .)
    SHORT           reduce using rule 272 (declaration -> typedef_declarator .)
    INT             reduce using rule 272 (declaration -> typedef_declarator .)
    LONG            reduce using rule 272 (declaration -> typedef_declarator .)
    SIGNED          reduce using rule 272 (declaration -> typedef_declarator .)
    UNSIGNED        reduce using rule 272 (declaration -> typedef_declarator .)
    FLOAT           reduce using rule 272 (declaration -> typedef_declarator .)
    DOUBLE          reduce using rule 272 (declaration -> typedef_declarator .)
    VOID            reduce using rule 272 (declaration -> typedef_declarator .)
    STRING          reduce using rule 272 (declaration -> typedef_declarator .)
    AUTO            reduce using rule 272 (declaration -> typedef_declarator .)
    TYPE            reduce using rule 272 (declaration -> typedef_declarator .)
    CLASS           reduce using rule 272 (declaration -> typedef_declarator .)
    STRUCT          reduce using rule 272 (declaration -> typedef_declarator .)
    $end            reduce using rule 272 (declaration -> typedef_declarator .)
    RCPAREN         reduce using rule 272 (declaration -> typedef_declarator .)
    IDENTIFIER      reduce using rule 272 (declaration -> typedef_declarator .)
    CASE            reduce using rule 272 (declaration -> typedef_declarator .)
    DEFAULT         reduce using rule 272 (declaration -> typedef_declarator .)
    SEMICOLON       reduce using rule 272 (declaration -> typedef_declarator .)
    LCPAREN         reduce using rule 272 (declaration -> typedef_declarator .)
    IF              reduce using rule 272 (declaration -> typedef_declarator .)
    SWITCH          reduce using rule 272 (declaration -> typedef_declarator .)
    WHILE           reduce using rule 272 (declaration -> typedef_declarator .)
    DO              reduce using rule 272 (declaration -> typedef_declarator .)
    FOR             reduce using rule 272 (declaration -> typedef_declarator .)
    BREAK           reduce using rule 272 (declaration -> typedef_declarator .)
    CONTINUE        reduce using rule 272 (declaration -> typedef_declarator .)
    RETURN          reduce using rule 272 (declaration -> typedef_declarator .)
    GOTO            reduce using rule 272 (declaration -> typedef_declarator .)
    TRY             reduce using rule 272 (declaration -> typedef_declarator .)
    THROW           reduce using rule 272 (declaration -> typedef_declarator .)
    DPLUSOP         reduce using rule 272 (declaration -> typedef_declarator .)
    DMINUSOP        reduce using rule 272 (declaration -> typedef_declarator .)
    SIZEOF          reduce using rule 272 (declaration -> typedef_declarator .)
    PLUSOP          reduce using rule 272 (declaration -> typedef_declarator .)
    MINUSOP         reduce using rule 272 (declaration -> typedef_declarator .)
    NOTSYM          reduce using rule 272 (declaration -> typedef_declarator .)
    BNOP            reduce using rule 272 (declaration -> typedef_declarator .)
    MULTOP          reduce using rule 272 (declaration -> typedef_declarator .)
    BANDOP          reduce using rule 272 (declaration -> typedef_declarator .)
    NEW             reduce using rule 272 (declaration -> typedef_declarator .)
    DELETE          reduce using rule 272 (declaration -> typedef_declarator .)
    THIS            reduce using rule 272 (declaration -> typedef_declarator .)
    LPAREN          reduce using rule 272 (declaration -> typedef_declarator .)
    DOUBLEBNOP      reduce using rule 272 (declaration -> typedef_declarator .)
    STRING_L        reduce using rule 272 (declaration -> typedef_declarator .)
    NUMBER          reduce using rule 272 (declaration -> typedef_declarator .)
    SCHAR           reduce using rule 272 (declaration -> typedef_declarator .)
    ELSE            reduce using rule 272 (declaration -> typedef_declarator .)


state 16

    (170) type_specifier_ -> CONST . type_specifier
    (174) type_specifier -> . simple_type_name
    (175) type_specifier -> . complex_type_specifier
    (176) simple_type_name -> . CHAR
    (177) simple_type_name -> . SHORT
    (178) simple_type_name -> . INT
    (179) simple_type_name -> . LONG
    (180) simple_type_name -> . SIGNED
    (181) simple_type_name -> . UNSIGNED
    (182) simple_type_name -> . FLOAT
    (183) simple_type_name -> . DOUBLE
    (184) simple_type_name -> . VOID
    (185) simple_type_name -> . STRING
    (186) simple_type_name -> . AUTO
    (187) complex_type_specifier -> . class_key IDENTIFIER
    (188) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (189) complex_type_specifier -> . TYPE IDENTIFIER
    (190) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (203) class_key -> . CLASS
    (204) class_key -> . STRUCT

    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38

    type_specifier                 shift and go to state 55
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 56

state 17

    (171) type_specifier_ -> type_specifier .

    IDENTIFIER      reduce using rule 171 (type_specifier_ -> type_specifier .)
    DOUBLEBNOP      reduce using rule 171 (type_specifier_ -> type_specifier .)
    MULTOP          reduce using rule 171 (type_specifier_ -> type_specifier .)
    BANDOP          reduce using rule 171 (type_specifier_ -> type_specifier .)
    LSPAREN         reduce using rule 171 (type_specifier_ -> type_specifier .)
    SEMICOLON       reduce using rule 171 (type_specifier_ -> type_specifier .)
    RTEMPLATE       reduce using rule 171 (type_specifier_ -> type_specifier .)
    COMMA           reduce using rule 171 (type_specifier_ -> type_specifier .)
    RPAREN          reduce using rule 171 (type_specifier_ -> type_specifier .)
    LPAREN          reduce using rule 171 (type_specifier_ -> type_specifier .)
    DOTSTAR         reduce using rule 171 (type_specifier_ -> type_specifier .)
    ARROWSTAR       reduce using rule 171 (type_specifier_ -> type_specifier .)
    DIVOP           reduce using rule 171 (type_specifier_ -> type_specifier .)
    MODOP           reduce using rule 171 (type_specifier_ -> type_specifier .)
    PLUSOP          reduce using rule 171 (type_specifier_ -> type_specifier .)
    MINUSOP         reduce using rule 171 (type_specifier_ -> type_specifier .)
    LSHIFT          reduce using rule 171 (type_specifier_ -> type_specifier .)
    RSHIFT          reduce using rule 171 (type_specifier_ -> type_specifier .)
    LTCOMP          reduce using rule 171 (type_specifier_ -> type_specifier .)
    GTCOMP          reduce using rule 171 (type_specifier_ -> type_specifier .)
    LTECOMP         reduce using rule 171 (type_specifier_ -> type_specifier .)
    GTECOMP         reduce using rule 171 (type_specifier_ -> type_specifier .)
    EQCOMP          reduce using rule 171 (type_specifier_ -> type_specifier .)
    NEQCOMP         reduce using rule 171 (type_specifier_ -> type_specifier .)
    XOROP           reduce using rule 171 (type_specifier_ -> type_specifier .)
    OROP            reduce using rule 171 (type_specifier_ -> type_specifier .)
    ANDOP           reduce using rule 171 (type_specifier_ -> type_specifier .)
    QUESMARK        reduce using rule 171 (type_specifier_ -> type_specifier .)
    RSPAREN         reduce using rule 171 (type_specifier_ -> type_specifier .)
    EQUAL           reduce using rule 171 (type_specifier_ -> type_specifier .)
    MULTEQOP        reduce using rule 171 (type_specifier_ -> type_specifier .)
    DIVEQOP         reduce using rule 171 (type_specifier_ -> type_specifier .)
    MODEQOP         reduce using rule 171 (type_specifier_ -> type_specifier .)
    PLUSEQOP        reduce using rule 171 (type_specifier_ -> type_specifier .)
    MINUSEQOP       reduce using rule 171 (type_specifier_ -> type_specifier .)
    LSHIFTEQOP      reduce using rule 171 (type_specifier_ -> type_specifier .)
    RSHIFTEQOP      reduce using rule 171 (type_specifier_ -> type_specifier .)
    BANDEQOP        reduce using rule 171 (type_specifier_ -> type_specifier .)
    BOREQOP         reduce using rule 171 (type_specifier_ -> type_specifier .)
    RCPAREN         reduce using rule 171 (type_specifier_ -> type_specifier .)
    COLON           reduce using rule 171 (type_specifier_ -> type_specifier .)


state 18

    (288) asm_declaration -> ASM . LPAREN STRING_L RPAREN SEMICOLON

    LPAREN          shift and go to state 57


state 19

    (205) class_define_specifier -> class_head . LCPAREN member_list RCPAREN
    (206) class_define_specifier -> class_head . LCPAREN RCPAREN

    LCPAREN         shift and go to state 58


state 20

    (273) template_declaration -> TEMPLATE . LTEMPLATE template_argument_list RTEMPLATE declaration

    LTEMPLATE       shift and go to state 59


state 21

    (172) typedef_declarator -> TYPEDEF . type_specifier_ abstract_declarator IDENTIFIER SEMICOLON
    (173) typedef_declarator -> TYPEDEF . type_specifier_ IDENTIFIER SEMICOLON
    (170) type_specifier_ -> . CONST type_specifier
    (171) type_specifier_ -> . type_specifier
    (174) type_specifier -> . simple_type_name
    (175) type_specifier -> . complex_type_specifier
    (176) simple_type_name -> . CHAR
    (177) simple_type_name -> . SHORT
    (178) simple_type_name -> . INT
    (179) simple_type_name -> . LONG
    (180) simple_type_name -> . SIGNED
    (181) simple_type_name -> . UNSIGNED
    (182) simple_type_name -> . FLOAT
    (183) simple_type_name -> . DOUBLE
    (184) simple_type_name -> . VOID
    (185) simple_type_name -> . STRING
    (186) simple_type_name -> . AUTO
    (187) complex_type_specifier -> . class_key IDENTIFIER
    (188) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (189) complex_type_specifier -> . TYPE IDENTIFIER
    (190) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (203) class_key -> . CLASS
    (204) class_key -> . STRUCT

    CONST           shift and go to state 16
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38

    type_specifier_                shift and go to state 60
    type_specifier                 shift and go to state 17
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 56

state 22

    (174) type_specifier -> simple_type_name .

    IDENTIFIER      reduce using rule 174 (type_specifier -> simple_type_name .)
    DOUBLEBNOP      reduce using rule 174 (type_specifier -> simple_type_name .)
    MULTOP          reduce using rule 174 (type_specifier -> simple_type_name .)
    BANDOP          reduce using rule 174 (type_specifier -> simple_type_name .)
    LSPAREN         reduce using rule 174 (type_specifier -> simple_type_name .)
    SEMICOLON       reduce using rule 174 (type_specifier -> simple_type_name .)
    RTEMPLATE       reduce using rule 174 (type_specifier -> simple_type_name .)
    COMMA           reduce using rule 174 (type_specifier -> simple_type_name .)
    RPAREN          reduce using rule 174 (type_specifier -> simple_type_name .)
    LPAREN          reduce using rule 174 (type_specifier -> simple_type_name .)
    DOTSTAR         reduce using rule 174 (type_specifier -> simple_type_name .)
    ARROWSTAR       reduce using rule 174 (type_specifier -> simple_type_name .)
    DIVOP           reduce using rule 174 (type_specifier -> simple_type_name .)
    MODOP           reduce using rule 174 (type_specifier -> simple_type_name .)
    PLUSOP          reduce using rule 174 (type_specifier -> simple_type_name .)
    MINUSOP         reduce using rule 174 (type_specifier -> simple_type_name .)
    LSHIFT          reduce using rule 174 (type_specifier -> simple_type_name .)
    RSHIFT          reduce using rule 174 (type_specifier -> simple_type_name .)
    LTCOMP          reduce using rule 174 (type_specifier -> simple_type_name .)
    GTCOMP          reduce using rule 174 (type_specifier -> simple_type_name .)
    LTECOMP         reduce using rule 174 (type_specifier -> simple_type_name .)
    GTECOMP         reduce using rule 174 (type_specifier -> simple_type_name .)
    EQCOMP          reduce using rule 174 (type_specifier -> simple_type_name .)
    NEQCOMP         reduce using rule 174 (type_specifier -> simple_type_name .)
    XOROP           reduce using rule 174 (type_specifier -> simple_type_name .)
    OROP            reduce using rule 174 (type_specifier -> simple_type_name .)
    ANDOP           reduce using rule 174 (type_specifier -> simple_type_name .)
    QUESMARK        reduce using rule 174 (type_specifier -> simple_type_name .)
    RSPAREN         reduce using rule 174 (type_specifier -> simple_type_name .)
    EQUAL           reduce using rule 174 (type_specifier -> simple_type_name .)
    MULTEQOP        reduce using rule 174 (type_specifier -> simple_type_name .)
    DIVEQOP         reduce using rule 174 (type_specifier -> simple_type_name .)
    MODEQOP         reduce using rule 174 (type_specifier -> simple_type_name .)
    PLUSEQOP        reduce using rule 174 (type_specifier -> simple_type_name .)
    MINUSEQOP       reduce using rule 174 (type_specifier -> simple_type_name .)
    LSHIFTEQOP      reduce using rule 174 (type_specifier -> simple_type_name .)
    RSHIFTEQOP      reduce using rule 174 (type_specifier -> simple_type_name .)
    BANDEQOP        reduce using rule 174 (type_specifier -> simple_type_name .)
    BOREQOP         reduce using rule 174 (type_specifier -> simple_type_name .)
    RCPAREN         reduce using rule 174 (type_specifier -> simple_type_name .)
    COLON           reduce using rule 174 (type_specifier -> simple_type_name .)


state 23

    (175) type_specifier -> complex_type_specifier .

    IDENTIFIER      reduce using rule 175 (type_specifier -> complex_type_specifier .)
    DOUBLEBNOP      reduce using rule 175 (type_specifier -> complex_type_specifier .)
    MULTOP          reduce using rule 175 (type_specifier -> complex_type_specifier .)
    BANDOP          reduce using rule 175 (type_specifier -> complex_type_specifier .)
    LSPAREN         reduce using rule 175 (type_specifier -> complex_type_specifier .)
    SEMICOLON       reduce using rule 175 (type_specifier -> complex_type_specifier .)
    RTEMPLATE       reduce using rule 175 (type_specifier -> complex_type_specifier .)
    COMMA           reduce using rule 175 (type_specifier -> complex_type_specifier .)
    RPAREN          reduce using rule 175 (type_specifier -> complex_type_specifier .)
    LPAREN          reduce using rule 175 (type_specifier -> complex_type_specifier .)
    DOTSTAR         reduce using rule 175 (type_specifier -> complex_type_specifier .)
    ARROWSTAR       reduce using rule 175 (type_specifier -> complex_type_specifier .)
    DIVOP           reduce using rule 175 (type_specifier -> complex_type_specifier .)
    MODOP           reduce using rule 175 (type_specifier -> complex_type_specifier .)
    PLUSOP          reduce using rule 175 (type_specifier -> complex_type_specifier .)
    MINUSOP         reduce using rule 175 (type_specifier -> complex_type_specifier .)
    LSHIFT          reduce using rule 175 (type_specifier -> complex_type_specifier .)
    RSHIFT          reduce using rule 175 (type_specifier -> complex_type_specifier .)
    LTCOMP          reduce using rule 175 (type_specifier -> complex_type_specifier .)
    GTCOMP          reduce using rule 175 (type_specifier -> complex_type_specifier .)
    LTECOMP         reduce using rule 175 (type_specifier -> complex_type_specifier .)
    GTECOMP         reduce using rule 175 (type_specifier -> complex_type_specifier .)
    EQCOMP          reduce using rule 175 (type_specifier -> complex_type_specifier .)
    NEQCOMP         reduce using rule 175 (type_specifier -> complex_type_specifier .)
    XOROP           reduce using rule 175 (type_specifier -> complex_type_specifier .)
    OROP            reduce using rule 175 (type_specifier -> complex_type_specifier .)
    ANDOP           reduce using rule 175 (type_specifier -> complex_type_specifier .)
    QUESMARK        reduce using rule 175 (type_specifier -> complex_type_specifier .)
    RSPAREN         reduce using rule 175 (type_specifier -> complex_type_specifier .)
    EQUAL           reduce using rule 175 (type_specifier -> complex_type_specifier .)
    MULTEQOP        reduce using rule 175 (type_specifier -> complex_type_specifier .)
    DIVEQOP         reduce using rule 175 (type_specifier -> complex_type_specifier .)
    MODEQOP         reduce using rule 175 (type_specifier -> complex_type_specifier .)
    PLUSEQOP        reduce using rule 175 (type_specifier -> complex_type_specifier .)
    MINUSEQOP       reduce using rule 175 (type_specifier -> complex_type_specifier .)
    LSHIFTEQOP      reduce using rule 175 (type_specifier -> complex_type_specifier .)
    RSHIFTEQOP      reduce using rule 175 (type_specifier -> complex_type_specifier .)
    BANDEQOP        reduce using rule 175 (type_specifier -> complex_type_specifier .)
    BOREQOP         reduce using rule 175 (type_specifier -> complex_type_specifier .)
    RCPAREN         reduce using rule 175 (type_specifier -> complex_type_specifier .)
    COLON           reduce using rule 175 (type_specifier -> complex_type_specifier .)


state 24

    (192) class_head -> class_key . IDENTIFIER base_spec
    (193) class_head -> class_key . IDENTIFIER
    (187) complex_type_specifier -> class_key . IDENTIFIER
    (188) complex_type_specifier -> class_key . IDENTIFIER template_class_name

    IDENTIFIER      shift and go to state 61


state 25

    (176) simple_type_name -> CHAR .

    IDENTIFIER      reduce using rule 176 (simple_type_name -> CHAR .)
    DOUBLEBNOP      reduce using rule 176 (simple_type_name -> CHAR .)
    MULTOP          reduce using rule 176 (simple_type_name -> CHAR .)
    BANDOP          reduce using rule 176 (simple_type_name -> CHAR .)
    LSPAREN         reduce using rule 176 (simple_type_name -> CHAR .)
    SEMICOLON       reduce using rule 176 (simple_type_name -> CHAR .)
    RTEMPLATE       reduce using rule 176 (simple_type_name -> CHAR .)
    COMMA           reduce using rule 176 (simple_type_name -> CHAR .)
    RPAREN          reduce using rule 176 (simple_type_name -> CHAR .)
    LPAREN          reduce using rule 176 (simple_type_name -> CHAR .)
    DOTSTAR         reduce using rule 176 (simple_type_name -> CHAR .)
    ARROWSTAR       reduce using rule 176 (simple_type_name -> CHAR .)
    DIVOP           reduce using rule 176 (simple_type_name -> CHAR .)
    MODOP           reduce using rule 176 (simple_type_name -> CHAR .)
    PLUSOP          reduce using rule 176 (simple_type_name -> CHAR .)
    MINUSOP         reduce using rule 176 (simple_type_name -> CHAR .)
    LSHIFT          reduce using rule 176 (simple_type_name -> CHAR .)
    RSHIFT          reduce using rule 176 (simple_type_name -> CHAR .)
    LTCOMP          reduce using rule 176 (simple_type_name -> CHAR .)
    GTCOMP          reduce using rule 176 (simple_type_name -> CHAR .)
    LTECOMP         reduce using rule 176 (simple_type_name -> CHAR .)
    GTECOMP         reduce using rule 176 (simple_type_name -> CHAR .)
    EQCOMP          reduce using rule 176 (simple_type_name -> CHAR .)
    NEQCOMP         reduce using rule 176 (simple_type_name -> CHAR .)
    XOROP           reduce using rule 176 (simple_type_name -> CHAR .)
    OROP            reduce using rule 176 (simple_type_name -> CHAR .)
    ANDOP           reduce using rule 176 (simple_type_name -> CHAR .)
    QUESMARK        reduce using rule 176 (simple_type_name -> CHAR .)
    RSPAREN         reduce using rule 176 (simple_type_name -> CHAR .)
    EQUAL           reduce using rule 176 (simple_type_name -> CHAR .)
    MULTEQOP        reduce using rule 176 (simple_type_name -> CHAR .)
    DIVEQOP         reduce using rule 176 (simple_type_name -> CHAR .)
    MODEQOP         reduce using rule 176 (simple_type_name -> CHAR .)
    PLUSEQOP        reduce using rule 176 (simple_type_name -> CHAR .)
    MINUSEQOP       reduce using rule 176 (simple_type_name -> CHAR .)
    LSHIFTEQOP      reduce using rule 176 (simple_type_name -> CHAR .)
    RSHIFTEQOP      reduce using rule 176 (simple_type_name -> CHAR .)
    BANDEQOP        reduce using rule 176 (simple_type_name -> CHAR .)
    BOREQOP         reduce using rule 176 (simple_type_name -> CHAR .)
    RCPAREN         reduce using rule 176 (simple_type_name -> CHAR .)
    COLON           reduce using rule 176 (simple_type_name -> CHAR .)


state 26

    (177) simple_type_name -> SHORT .

    IDENTIFIER      reduce using rule 177 (simple_type_name -> SHORT .)
    DOUBLEBNOP      reduce using rule 177 (simple_type_name -> SHORT .)
    MULTOP          reduce using rule 177 (simple_type_name -> SHORT .)
    BANDOP          reduce using rule 177 (simple_type_name -> SHORT .)
    LSPAREN         reduce using rule 177 (simple_type_name -> SHORT .)
    SEMICOLON       reduce using rule 177 (simple_type_name -> SHORT .)
    RTEMPLATE       reduce using rule 177 (simple_type_name -> SHORT .)
    COMMA           reduce using rule 177 (simple_type_name -> SHORT .)
    RPAREN          reduce using rule 177 (simple_type_name -> SHORT .)
    LPAREN          reduce using rule 177 (simple_type_name -> SHORT .)
    DOTSTAR         reduce using rule 177 (simple_type_name -> SHORT .)
    ARROWSTAR       reduce using rule 177 (simple_type_name -> SHORT .)
    DIVOP           reduce using rule 177 (simple_type_name -> SHORT .)
    MODOP           reduce using rule 177 (simple_type_name -> SHORT .)
    PLUSOP          reduce using rule 177 (simple_type_name -> SHORT .)
    MINUSOP         reduce using rule 177 (simple_type_name -> SHORT .)
    LSHIFT          reduce using rule 177 (simple_type_name -> SHORT .)
    RSHIFT          reduce using rule 177 (simple_type_name -> SHORT .)
    LTCOMP          reduce using rule 177 (simple_type_name -> SHORT .)
    GTCOMP          reduce using rule 177 (simple_type_name -> SHORT .)
    LTECOMP         reduce using rule 177 (simple_type_name -> SHORT .)
    GTECOMP         reduce using rule 177 (simple_type_name -> SHORT .)
    EQCOMP          reduce using rule 177 (simple_type_name -> SHORT .)
    NEQCOMP         reduce using rule 177 (simple_type_name -> SHORT .)
    XOROP           reduce using rule 177 (simple_type_name -> SHORT .)
    OROP            reduce using rule 177 (simple_type_name -> SHORT .)
    ANDOP           reduce using rule 177 (simple_type_name -> SHORT .)
    QUESMARK        reduce using rule 177 (simple_type_name -> SHORT .)
    RSPAREN         reduce using rule 177 (simple_type_name -> SHORT .)
    EQUAL           reduce using rule 177 (simple_type_name -> SHORT .)
    MULTEQOP        reduce using rule 177 (simple_type_name -> SHORT .)
    DIVEQOP         reduce using rule 177 (simple_type_name -> SHORT .)
    MODEQOP         reduce using rule 177 (simple_type_name -> SHORT .)
    PLUSEQOP        reduce using rule 177 (simple_type_name -> SHORT .)
    MINUSEQOP       reduce using rule 177 (simple_type_name -> SHORT .)
    LSHIFTEQOP      reduce using rule 177 (simple_type_name -> SHORT .)
    RSHIFTEQOP      reduce using rule 177 (simple_type_name -> SHORT .)
    BANDEQOP        reduce using rule 177 (simple_type_name -> SHORT .)
    BOREQOP         reduce using rule 177 (simple_type_name -> SHORT .)
    RCPAREN         reduce using rule 177 (simple_type_name -> SHORT .)
    COLON           reduce using rule 177 (simple_type_name -> SHORT .)


state 27

    (178) simple_type_name -> INT .

    IDENTIFIER      reduce using rule 178 (simple_type_name -> INT .)
    DOUBLEBNOP      reduce using rule 178 (simple_type_name -> INT .)
    MULTOP          reduce using rule 178 (simple_type_name -> INT .)
    BANDOP          reduce using rule 178 (simple_type_name -> INT .)
    LSPAREN         reduce using rule 178 (simple_type_name -> INT .)
    SEMICOLON       reduce using rule 178 (simple_type_name -> INT .)
    RTEMPLATE       reduce using rule 178 (simple_type_name -> INT .)
    COMMA           reduce using rule 178 (simple_type_name -> INT .)
    RPAREN          reduce using rule 178 (simple_type_name -> INT .)
    LPAREN          reduce using rule 178 (simple_type_name -> INT .)
    DOTSTAR         reduce using rule 178 (simple_type_name -> INT .)
    ARROWSTAR       reduce using rule 178 (simple_type_name -> INT .)
    DIVOP           reduce using rule 178 (simple_type_name -> INT .)
    MODOP           reduce using rule 178 (simple_type_name -> INT .)
    PLUSOP          reduce using rule 178 (simple_type_name -> INT .)
    MINUSOP         reduce using rule 178 (simple_type_name -> INT .)
    LSHIFT          reduce using rule 178 (simple_type_name -> INT .)
    RSHIFT          reduce using rule 178 (simple_type_name -> INT .)
    LTCOMP          reduce using rule 178 (simple_type_name -> INT .)
    GTCOMP          reduce using rule 178 (simple_type_name -> INT .)
    LTECOMP         reduce using rule 178 (simple_type_name -> INT .)
    GTECOMP         reduce using rule 178 (simple_type_name -> INT .)
    EQCOMP          reduce using rule 178 (simple_type_name -> INT .)
    NEQCOMP         reduce using rule 178 (simple_type_name -> INT .)
    XOROP           reduce using rule 178 (simple_type_name -> INT .)
    OROP            reduce using rule 178 (simple_type_name -> INT .)
    ANDOP           reduce using rule 178 (simple_type_name -> INT .)
    QUESMARK        reduce using rule 178 (simple_type_name -> INT .)
    RSPAREN         reduce using rule 178 (simple_type_name -> INT .)
    EQUAL           reduce using rule 178 (simple_type_name -> INT .)
    MULTEQOP        reduce using rule 178 (simple_type_name -> INT .)
    DIVEQOP         reduce using rule 178 (simple_type_name -> INT .)
    MODEQOP         reduce using rule 178 (simple_type_name -> INT .)
    PLUSEQOP        reduce using rule 178 (simple_type_name -> INT .)
    MINUSEQOP       reduce using rule 178 (simple_type_name -> INT .)
    LSHIFTEQOP      reduce using rule 178 (simple_type_name -> INT .)
    RSHIFTEQOP      reduce using rule 178 (simple_type_name -> INT .)
    BANDEQOP        reduce using rule 178 (simple_type_name -> INT .)
    BOREQOP         reduce using rule 178 (simple_type_name -> INT .)
    RCPAREN         reduce using rule 178 (simple_type_name -> INT .)
    COLON           reduce using rule 178 (simple_type_name -> INT .)


state 28

    (179) simple_type_name -> LONG .

    IDENTIFIER      reduce using rule 179 (simple_type_name -> LONG .)
    DOUBLEBNOP      reduce using rule 179 (simple_type_name -> LONG .)
    MULTOP          reduce using rule 179 (simple_type_name -> LONG .)
    BANDOP          reduce using rule 179 (simple_type_name -> LONG .)
    LSPAREN         reduce using rule 179 (simple_type_name -> LONG .)
    SEMICOLON       reduce using rule 179 (simple_type_name -> LONG .)
    RTEMPLATE       reduce using rule 179 (simple_type_name -> LONG .)
    COMMA           reduce using rule 179 (simple_type_name -> LONG .)
    RPAREN          reduce using rule 179 (simple_type_name -> LONG .)
    LPAREN          reduce using rule 179 (simple_type_name -> LONG .)
    DOTSTAR         reduce using rule 179 (simple_type_name -> LONG .)
    ARROWSTAR       reduce using rule 179 (simple_type_name -> LONG .)
    DIVOP           reduce using rule 179 (simple_type_name -> LONG .)
    MODOP           reduce using rule 179 (simple_type_name -> LONG .)
    PLUSOP          reduce using rule 179 (simple_type_name -> LONG .)
    MINUSOP         reduce using rule 179 (simple_type_name -> LONG .)
    LSHIFT          reduce using rule 179 (simple_type_name -> LONG .)
    RSHIFT          reduce using rule 179 (simple_type_name -> LONG .)
    LTCOMP          reduce using rule 179 (simple_type_name -> LONG .)
    GTCOMP          reduce using rule 179 (simple_type_name -> LONG .)
    LTECOMP         reduce using rule 179 (simple_type_name -> LONG .)
    GTECOMP         reduce using rule 179 (simple_type_name -> LONG .)
    EQCOMP          reduce using rule 179 (simple_type_name -> LONG .)
    NEQCOMP         reduce using rule 179 (simple_type_name -> LONG .)
    XOROP           reduce using rule 179 (simple_type_name -> LONG .)
    OROP            reduce using rule 179 (simple_type_name -> LONG .)
    ANDOP           reduce using rule 179 (simple_type_name -> LONG .)
    QUESMARK        reduce using rule 179 (simple_type_name -> LONG .)
    RSPAREN         reduce using rule 179 (simple_type_name -> LONG .)
    EQUAL           reduce using rule 179 (simple_type_name -> LONG .)
    MULTEQOP        reduce using rule 179 (simple_type_name -> LONG .)
    DIVEQOP         reduce using rule 179 (simple_type_name -> LONG .)
    MODEQOP         reduce using rule 179 (simple_type_name -> LONG .)
    PLUSEQOP        reduce using rule 179 (simple_type_name -> LONG .)
    MINUSEQOP       reduce using rule 179 (simple_type_name -> LONG .)
    LSHIFTEQOP      reduce using rule 179 (simple_type_name -> LONG .)
    RSHIFTEQOP      reduce using rule 179 (simple_type_name -> LONG .)
    BANDEQOP        reduce using rule 179 (simple_type_name -> LONG .)
    BOREQOP         reduce using rule 179 (simple_type_name -> LONG .)
    RCPAREN         reduce using rule 179 (simple_type_name -> LONG .)
    COLON           reduce using rule 179 (simple_type_name -> LONG .)


state 29

    (180) simple_type_name -> SIGNED .

    IDENTIFIER      reduce using rule 180 (simple_type_name -> SIGNED .)
    DOUBLEBNOP      reduce using rule 180 (simple_type_name -> SIGNED .)
    MULTOP          reduce using rule 180 (simple_type_name -> SIGNED .)
    BANDOP          reduce using rule 180 (simple_type_name -> SIGNED .)
    LSPAREN         reduce using rule 180 (simple_type_name -> SIGNED .)
    SEMICOLON       reduce using rule 180 (simple_type_name -> SIGNED .)
    RTEMPLATE       reduce using rule 180 (simple_type_name -> SIGNED .)
    COMMA           reduce using rule 180 (simple_type_name -> SIGNED .)
    RPAREN          reduce using rule 180 (simple_type_name -> SIGNED .)
    LPAREN          reduce using rule 180 (simple_type_name -> SIGNED .)
    DOTSTAR         reduce using rule 180 (simple_type_name -> SIGNED .)
    ARROWSTAR       reduce using rule 180 (simple_type_name -> SIGNED .)
    DIVOP           reduce using rule 180 (simple_type_name -> SIGNED .)
    MODOP           reduce using rule 180 (simple_type_name -> SIGNED .)
    PLUSOP          reduce using rule 180 (simple_type_name -> SIGNED .)
    MINUSOP         reduce using rule 180 (simple_type_name -> SIGNED .)
    LSHIFT          reduce using rule 180 (simple_type_name -> SIGNED .)
    RSHIFT          reduce using rule 180 (simple_type_name -> SIGNED .)
    LTCOMP          reduce using rule 180 (simple_type_name -> SIGNED .)
    GTCOMP          reduce using rule 180 (simple_type_name -> SIGNED .)
    LTECOMP         reduce using rule 180 (simple_type_name -> SIGNED .)
    GTECOMP         reduce using rule 180 (simple_type_name -> SIGNED .)
    EQCOMP          reduce using rule 180 (simple_type_name -> SIGNED .)
    NEQCOMP         reduce using rule 180 (simple_type_name -> SIGNED .)
    XOROP           reduce using rule 180 (simple_type_name -> SIGNED .)
    OROP            reduce using rule 180 (simple_type_name -> SIGNED .)
    ANDOP           reduce using rule 180 (simple_type_name -> SIGNED .)
    QUESMARK        reduce using rule 180 (simple_type_name -> SIGNED .)
    RSPAREN         reduce using rule 180 (simple_type_name -> SIGNED .)
    EQUAL           reduce using rule 180 (simple_type_name -> SIGNED .)
    MULTEQOP        reduce using rule 180 (simple_type_name -> SIGNED .)
    DIVEQOP         reduce using rule 180 (simple_type_name -> SIGNED .)
    MODEQOP         reduce using rule 180 (simple_type_name -> SIGNED .)
    PLUSEQOP        reduce using rule 180 (simple_type_name -> SIGNED .)
    MINUSEQOP       reduce using rule 180 (simple_type_name -> SIGNED .)
    LSHIFTEQOP      reduce using rule 180 (simple_type_name -> SIGNED .)
    RSHIFTEQOP      reduce using rule 180 (simple_type_name -> SIGNED .)
    BANDEQOP        reduce using rule 180 (simple_type_name -> SIGNED .)
    BOREQOP         reduce using rule 180 (simple_type_name -> SIGNED .)
    RCPAREN         reduce using rule 180 (simple_type_name -> SIGNED .)
    COLON           reduce using rule 180 (simple_type_name -> SIGNED .)


state 30

    (181) simple_type_name -> UNSIGNED .

    IDENTIFIER      reduce using rule 181 (simple_type_name -> UNSIGNED .)
    DOUBLEBNOP      reduce using rule 181 (simple_type_name -> UNSIGNED .)
    MULTOP          reduce using rule 181 (simple_type_name -> UNSIGNED .)
    BANDOP          reduce using rule 181 (simple_type_name -> UNSIGNED .)
    LSPAREN         reduce using rule 181 (simple_type_name -> UNSIGNED .)
    SEMICOLON       reduce using rule 181 (simple_type_name -> UNSIGNED .)
    RTEMPLATE       reduce using rule 181 (simple_type_name -> UNSIGNED .)
    COMMA           reduce using rule 181 (simple_type_name -> UNSIGNED .)
    RPAREN          reduce using rule 181 (simple_type_name -> UNSIGNED .)
    LPAREN          reduce using rule 181 (simple_type_name -> UNSIGNED .)
    DOTSTAR         reduce using rule 181 (simple_type_name -> UNSIGNED .)
    ARROWSTAR       reduce using rule 181 (simple_type_name -> UNSIGNED .)
    DIVOP           reduce using rule 181 (simple_type_name -> UNSIGNED .)
    MODOP           reduce using rule 181 (simple_type_name -> UNSIGNED .)
    PLUSOP          reduce using rule 181 (simple_type_name -> UNSIGNED .)
    MINUSOP         reduce using rule 181 (simple_type_name -> UNSIGNED .)
    LSHIFT          reduce using rule 181 (simple_type_name -> UNSIGNED .)
    RSHIFT          reduce using rule 181 (simple_type_name -> UNSIGNED .)
    LTCOMP          reduce using rule 181 (simple_type_name -> UNSIGNED .)
    GTCOMP          reduce using rule 181 (simple_type_name -> UNSIGNED .)
    LTECOMP         reduce using rule 181 (simple_type_name -> UNSIGNED .)
    GTECOMP         reduce using rule 181 (simple_type_name -> UNSIGNED .)
    EQCOMP          reduce using rule 181 (simple_type_name -> UNSIGNED .)
    NEQCOMP         reduce using rule 181 (simple_type_name -> UNSIGNED .)
    XOROP           reduce using rule 181 (simple_type_name -> UNSIGNED .)
    OROP            reduce using rule 181 (simple_type_name -> UNSIGNED .)
    ANDOP           reduce using rule 181 (simple_type_name -> UNSIGNED .)
    QUESMARK        reduce using rule 181 (simple_type_name -> UNSIGNED .)
    RSPAREN         reduce using rule 181 (simple_type_name -> UNSIGNED .)
    EQUAL           reduce using rule 181 (simple_type_name -> UNSIGNED .)
    MULTEQOP        reduce using rule 181 (simple_type_name -> UNSIGNED .)
    DIVEQOP         reduce using rule 181 (simple_type_name -> UNSIGNED .)
    MODEQOP         reduce using rule 181 (simple_type_name -> UNSIGNED .)
    PLUSEQOP        reduce using rule 181 (simple_type_name -> UNSIGNED .)
    MINUSEQOP       reduce using rule 181 (simple_type_name -> UNSIGNED .)
    LSHIFTEQOP      reduce using rule 181 (simple_type_name -> UNSIGNED .)
    RSHIFTEQOP      reduce using rule 181 (simple_type_name -> UNSIGNED .)
    BANDEQOP        reduce using rule 181 (simple_type_name -> UNSIGNED .)
    BOREQOP         reduce using rule 181 (simple_type_name -> UNSIGNED .)
    RCPAREN         reduce using rule 181 (simple_type_name -> UNSIGNED .)
    COLON           reduce using rule 181 (simple_type_name -> UNSIGNED .)


state 31

    (182) simple_type_name -> FLOAT .

    IDENTIFIER      reduce using rule 182 (simple_type_name -> FLOAT .)
    DOUBLEBNOP      reduce using rule 182 (simple_type_name -> FLOAT .)
    MULTOP          reduce using rule 182 (simple_type_name -> FLOAT .)
    BANDOP          reduce using rule 182 (simple_type_name -> FLOAT .)
    LSPAREN         reduce using rule 182 (simple_type_name -> FLOAT .)
    SEMICOLON       reduce using rule 182 (simple_type_name -> FLOAT .)
    RTEMPLATE       reduce using rule 182 (simple_type_name -> FLOAT .)
    COMMA           reduce using rule 182 (simple_type_name -> FLOAT .)
    RPAREN          reduce using rule 182 (simple_type_name -> FLOAT .)
    LPAREN          reduce using rule 182 (simple_type_name -> FLOAT .)
    DOTSTAR         reduce using rule 182 (simple_type_name -> FLOAT .)
    ARROWSTAR       reduce using rule 182 (simple_type_name -> FLOAT .)
    DIVOP           reduce using rule 182 (simple_type_name -> FLOAT .)
    MODOP           reduce using rule 182 (simple_type_name -> FLOAT .)
    PLUSOP          reduce using rule 182 (simple_type_name -> FLOAT .)
    MINUSOP         reduce using rule 182 (simple_type_name -> FLOAT .)
    LSHIFT          reduce using rule 182 (simple_type_name -> FLOAT .)
    RSHIFT          reduce using rule 182 (simple_type_name -> FLOAT .)
    LTCOMP          reduce using rule 182 (simple_type_name -> FLOAT .)
    GTCOMP          reduce using rule 182 (simple_type_name -> FLOAT .)
    LTECOMP         reduce using rule 182 (simple_type_name -> FLOAT .)
    GTECOMP         reduce using rule 182 (simple_type_name -> FLOAT .)
    EQCOMP          reduce using rule 182 (simple_type_name -> FLOAT .)
    NEQCOMP         reduce using rule 182 (simple_type_name -> FLOAT .)
    XOROP           reduce using rule 182 (simple_type_name -> FLOAT .)
    OROP            reduce using rule 182 (simple_type_name -> FLOAT .)
    ANDOP           reduce using rule 182 (simple_type_name -> FLOAT .)
    QUESMARK        reduce using rule 182 (simple_type_name -> FLOAT .)
    RSPAREN         reduce using rule 182 (simple_type_name -> FLOAT .)
    EQUAL           reduce using rule 182 (simple_type_name -> FLOAT .)
    MULTEQOP        reduce using rule 182 (simple_type_name -> FLOAT .)
    DIVEQOP         reduce using rule 182 (simple_type_name -> FLOAT .)
    MODEQOP         reduce using rule 182 (simple_type_name -> FLOAT .)
    PLUSEQOP        reduce using rule 182 (simple_type_name -> FLOAT .)
    MINUSEQOP       reduce using rule 182 (simple_type_name -> FLOAT .)
    LSHIFTEQOP      reduce using rule 182 (simple_type_name -> FLOAT .)
    RSHIFTEQOP      reduce using rule 182 (simple_type_name -> FLOAT .)
    BANDEQOP        reduce using rule 182 (simple_type_name -> FLOAT .)
    BOREQOP         reduce using rule 182 (simple_type_name -> FLOAT .)
    RCPAREN         reduce using rule 182 (simple_type_name -> FLOAT .)
    COLON           reduce using rule 182 (simple_type_name -> FLOAT .)


state 32

    (183) simple_type_name -> DOUBLE .

    IDENTIFIER      reduce using rule 183 (simple_type_name -> DOUBLE .)
    DOUBLEBNOP      reduce using rule 183 (simple_type_name -> DOUBLE .)
    MULTOP          reduce using rule 183 (simple_type_name -> DOUBLE .)
    BANDOP          reduce using rule 183 (simple_type_name -> DOUBLE .)
    LSPAREN         reduce using rule 183 (simple_type_name -> DOUBLE .)
    SEMICOLON       reduce using rule 183 (simple_type_name -> DOUBLE .)
    RTEMPLATE       reduce using rule 183 (simple_type_name -> DOUBLE .)
    COMMA           reduce using rule 183 (simple_type_name -> DOUBLE .)
    RPAREN          reduce using rule 183 (simple_type_name -> DOUBLE .)
    LPAREN          reduce using rule 183 (simple_type_name -> DOUBLE .)
    DOTSTAR         reduce using rule 183 (simple_type_name -> DOUBLE .)
    ARROWSTAR       reduce using rule 183 (simple_type_name -> DOUBLE .)
    DIVOP           reduce using rule 183 (simple_type_name -> DOUBLE .)
    MODOP           reduce using rule 183 (simple_type_name -> DOUBLE .)
    PLUSOP          reduce using rule 183 (simple_type_name -> DOUBLE .)
    MINUSOP         reduce using rule 183 (simple_type_name -> DOUBLE .)
    LSHIFT          reduce using rule 183 (simple_type_name -> DOUBLE .)
    RSHIFT          reduce using rule 183 (simple_type_name -> DOUBLE .)
    LTCOMP          reduce using rule 183 (simple_type_name -> DOUBLE .)
    GTCOMP          reduce using rule 183 (simple_type_name -> DOUBLE .)
    LTECOMP         reduce using rule 183 (simple_type_name -> DOUBLE .)
    GTECOMP         reduce using rule 183 (simple_type_name -> DOUBLE .)
    EQCOMP          reduce using rule 183 (simple_type_name -> DOUBLE .)
    NEQCOMP         reduce using rule 183 (simple_type_name -> DOUBLE .)
    XOROP           reduce using rule 183 (simple_type_name -> DOUBLE .)
    OROP            reduce using rule 183 (simple_type_name -> DOUBLE .)
    ANDOP           reduce using rule 183 (simple_type_name -> DOUBLE .)
    QUESMARK        reduce using rule 183 (simple_type_name -> DOUBLE .)
    RSPAREN         reduce using rule 183 (simple_type_name -> DOUBLE .)
    EQUAL           reduce using rule 183 (simple_type_name -> DOUBLE .)
    MULTEQOP        reduce using rule 183 (simple_type_name -> DOUBLE .)
    DIVEQOP         reduce using rule 183 (simple_type_name -> DOUBLE .)
    MODEQOP         reduce using rule 183 (simple_type_name -> DOUBLE .)
    PLUSEQOP        reduce using rule 183 (simple_type_name -> DOUBLE .)
    MINUSEQOP       reduce using rule 183 (simple_type_name -> DOUBLE .)
    LSHIFTEQOP      reduce using rule 183 (simple_type_name -> DOUBLE .)
    RSHIFTEQOP      reduce using rule 183 (simple_type_name -> DOUBLE .)
    BANDEQOP        reduce using rule 183 (simple_type_name -> DOUBLE .)
    BOREQOP         reduce using rule 183 (simple_type_name -> DOUBLE .)
    RCPAREN         reduce using rule 183 (simple_type_name -> DOUBLE .)
    COLON           reduce using rule 183 (simple_type_name -> DOUBLE .)


state 33

    (184) simple_type_name -> VOID .

    IDENTIFIER      reduce using rule 184 (simple_type_name -> VOID .)
    DOUBLEBNOP      reduce using rule 184 (simple_type_name -> VOID .)
    MULTOP          reduce using rule 184 (simple_type_name -> VOID .)
    BANDOP          reduce using rule 184 (simple_type_name -> VOID .)
    LSPAREN         reduce using rule 184 (simple_type_name -> VOID .)
    SEMICOLON       reduce using rule 184 (simple_type_name -> VOID .)
    RTEMPLATE       reduce using rule 184 (simple_type_name -> VOID .)
    COMMA           reduce using rule 184 (simple_type_name -> VOID .)
    RPAREN          reduce using rule 184 (simple_type_name -> VOID .)
    LPAREN          reduce using rule 184 (simple_type_name -> VOID .)
    DOTSTAR         reduce using rule 184 (simple_type_name -> VOID .)
    ARROWSTAR       reduce using rule 184 (simple_type_name -> VOID .)
    DIVOP           reduce using rule 184 (simple_type_name -> VOID .)
    MODOP           reduce using rule 184 (simple_type_name -> VOID .)
    PLUSOP          reduce using rule 184 (simple_type_name -> VOID .)
    MINUSOP         reduce using rule 184 (simple_type_name -> VOID .)
    LSHIFT          reduce using rule 184 (simple_type_name -> VOID .)
    RSHIFT          reduce using rule 184 (simple_type_name -> VOID .)
    LTCOMP          reduce using rule 184 (simple_type_name -> VOID .)
    GTCOMP          reduce using rule 184 (simple_type_name -> VOID .)
    LTECOMP         reduce using rule 184 (simple_type_name -> VOID .)
    GTECOMP         reduce using rule 184 (simple_type_name -> VOID .)
    EQCOMP          reduce using rule 184 (simple_type_name -> VOID .)
    NEQCOMP         reduce using rule 184 (simple_type_name -> VOID .)
    XOROP           reduce using rule 184 (simple_type_name -> VOID .)
    OROP            reduce using rule 184 (simple_type_name -> VOID .)
    ANDOP           reduce using rule 184 (simple_type_name -> VOID .)
    QUESMARK        reduce using rule 184 (simple_type_name -> VOID .)
    RSPAREN         reduce using rule 184 (simple_type_name -> VOID .)
    EQUAL           reduce using rule 184 (simple_type_name -> VOID .)
    MULTEQOP        reduce using rule 184 (simple_type_name -> VOID .)
    DIVEQOP         reduce using rule 184 (simple_type_name -> VOID .)
    MODEQOP         reduce using rule 184 (simple_type_name -> VOID .)
    PLUSEQOP        reduce using rule 184 (simple_type_name -> VOID .)
    MINUSEQOP       reduce using rule 184 (simple_type_name -> VOID .)
    LSHIFTEQOP      reduce using rule 184 (simple_type_name -> VOID .)
    RSHIFTEQOP      reduce using rule 184 (simple_type_name -> VOID .)
    BANDEQOP        reduce using rule 184 (simple_type_name -> VOID .)
    BOREQOP         reduce using rule 184 (simple_type_name -> VOID .)
    RCPAREN         reduce using rule 184 (simple_type_name -> VOID .)
    COLON           reduce using rule 184 (simple_type_name -> VOID .)


state 34

    (185) simple_type_name -> STRING .

    IDENTIFIER      reduce using rule 185 (simple_type_name -> STRING .)
    DOUBLEBNOP      reduce using rule 185 (simple_type_name -> STRING .)
    MULTOP          reduce using rule 185 (simple_type_name -> STRING .)
    BANDOP          reduce using rule 185 (simple_type_name -> STRING .)
    LSPAREN         reduce using rule 185 (simple_type_name -> STRING .)
    SEMICOLON       reduce using rule 185 (simple_type_name -> STRING .)
    RTEMPLATE       reduce using rule 185 (simple_type_name -> STRING .)
    COMMA           reduce using rule 185 (simple_type_name -> STRING .)
    RPAREN          reduce using rule 185 (simple_type_name -> STRING .)
    LPAREN          reduce using rule 185 (simple_type_name -> STRING .)
    DOTSTAR         reduce using rule 185 (simple_type_name -> STRING .)
    ARROWSTAR       reduce using rule 185 (simple_type_name -> STRING .)
    DIVOP           reduce using rule 185 (simple_type_name -> STRING .)
    MODOP           reduce using rule 185 (simple_type_name -> STRING .)
    PLUSOP          reduce using rule 185 (simple_type_name -> STRING .)
    MINUSOP         reduce using rule 185 (simple_type_name -> STRING .)
    LSHIFT          reduce using rule 185 (simple_type_name -> STRING .)
    RSHIFT          reduce using rule 185 (simple_type_name -> STRING .)
    LTCOMP          reduce using rule 185 (simple_type_name -> STRING .)
    GTCOMP          reduce using rule 185 (simple_type_name -> STRING .)
    LTECOMP         reduce using rule 185 (simple_type_name -> STRING .)
    GTECOMP         reduce using rule 185 (simple_type_name -> STRING .)
    EQCOMP          reduce using rule 185 (simple_type_name -> STRING .)
    NEQCOMP         reduce using rule 185 (simple_type_name -> STRING .)
    XOROP           reduce using rule 185 (simple_type_name -> STRING .)
    OROP            reduce using rule 185 (simple_type_name -> STRING .)
    ANDOP           reduce using rule 185 (simple_type_name -> STRING .)
    QUESMARK        reduce using rule 185 (simple_type_name -> STRING .)
    RSPAREN         reduce using rule 185 (simple_type_name -> STRING .)
    EQUAL           reduce using rule 185 (simple_type_name -> STRING .)
    MULTEQOP        reduce using rule 185 (simple_type_name -> STRING .)
    DIVEQOP         reduce using rule 185 (simple_type_name -> STRING .)
    MODEQOP         reduce using rule 185 (simple_type_name -> STRING .)
    PLUSEQOP        reduce using rule 185 (simple_type_name -> STRING .)
    MINUSEQOP       reduce using rule 185 (simple_type_name -> STRING .)
    LSHIFTEQOP      reduce using rule 185 (simple_type_name -> STRING .)
    RSHIFTEQOP      reduce using rule 185 (simple_type_name -> STRING .)
    BANDEQOP        reduce using rule 185 (simple_type_name -> STRING .)
    BOREQOP         reduce using rule 185 (simple_type_name -> STRING .)
    RCPAREN         reduce using rule 185 (simple_type_name -> STRING .)
    COLON           reduce using rule 185 (simple_type_name -> STRING .)


state 35

    (186) simple_type_name -> AUTO .

    IDENTIFIER      reduce using rule 186 (simple_type_name -> AUTO .)
    DOUBLEBNOP      reduce using rule 186 (simple_type_name -> AUTO .)
    MULTOP          reduce using rule 186 (simple_type_name -> AUTO .)
    BANDOP          reduce using rule 186 (simple_type_name -> AUTO .)
    LSPAREN         reduce using rule 186 (simple_type_name -> AUTO .)
    SEMICOLON       reduce using rule 186 (simple_type_name -> AUTO .)
    RTEMPLATE       reduce using rule 186 (simple_type_name -> AUTO .)
    COMMA           reduce using rule 186 (simple_type_name -> AUTO .)
    RPAREN          reduce using rule 186 (simple_type_name -> AUTO .)
    LPAREN          reduce using rule 186 (simple_type_name -> AUTO .)
    DOTSTAR         reduce using rule 186 (simple_type_name -> AUTO .)
    ARROWSTAR       reduce using rule 186 (simple_type_name -> AUTO .)
    DIVOP           reduce using rule 186 (simple_type_name -> AUTO .)
    MODOP           reduce using rule 186 (simple_type_name -> AUTO .)
    PLUSOP          reduce using rule 186 (simple_type_name -> AUTO .)
    MINUSOP         reduce using rule 186 (simple_type_name -> AUTO .)
    LSHIFT          reduce using rule 186 (simple_type_name -> AUTO .)
    RSHIFT          reduce using rule 186 (simple_type_name -> AUTO .)
    LTCOMP          reduce using rule 186 (simple_type_name -> AUTO .)
    GTCOMP          reduce using rule 186 (simple_type_name -> AUTO .)
    LTECOMP         reduce using rule 186 (simple_type_name -> AUTO .)
    GTECOMP         reduce using rule 186 (simple_type_name -> AUTO .)
    EQCOMP          reduce using rule 186 (simple_type_name -> AUTO .)
    NEQCOMP         reduce using rule 186 (simple_type_name -> AUTO .)
    XOROP           reduce using rule 186 (simple_type_name -> AUTO .)
    OROP            reduce using rule 186 (simple_type_name -> AUTO .)
    ANDOP           reduce using rule 186 (simple_type_name -> AUTO .)
    QUESMARK        reduce using rule 186 (simple_type_name -> AUTO .)
    RSPAREN         reduce using rule 186 (simple_type_name -> AUTO .)
    EQUAL           reduce using rule 186 (simple_type_name -> AUTO .)
    MULTEQOP        reduce using rule 186 (simple_type_name -> AUTO .)
    DIVEQOP         reduce using rule 186 (simple_type_name -> AUTO .)
    MODEQOP         reduce using rule 186 (simple_type_name -> AUTO .)
    PLUSEQOP        reduce using rule 186 (simple_type_name -> AUTO .)
    MINUSEQOP       reduce using rule 186 (simple_type_name -> AUTO .)
    LSHIFTEQOP      reduce using rule 186 (simple_type_name -> AUTO .)
    RSHIFTEQOP      reduce using rule 186 (simple_type_name -> AUTO .)
    BANDEQOP        reduce using rule 186 (simple_type_name -> AUTO .)
    BOREQOP         reduce using rule 186 (simple_type_name -> AUTO .)
    RCPAREN         reduce using rule 186 (simple_type_name -> AUTO .)
    COLON           reduce using rule 186 (simple_type_name -> AUTO .)


state 36

    (189) complex_type_specifier -> TYPE . IDENTIFIER
    (190) complex_type_specifier -> TYPE . IDENTIFIER template_class_name

    IDENTIFIER      shift and go to state 62


state 37

    (203) class_key -> CLASS .

    IDENTIFIER      reduce using rule 203 (class_key -> CLASS .)


state 38

    (204) class_key -> STRUCT .

    IDENTIFIER      reduce using rule 204 (class_key -> STRUCT .)


state 39

    (6) program -> control_line translation_unit .

    $end            reduce using rule 6 (program -> control_line translation_unit .)


state 40

    (1) control_line -> control_line control_line_stmt .

    HASHTAG         reduce using rule 1 (control_line -> control_line control_line_stmt .)
    CONST           reduce using rule 1 (control_line -> control_line control_line_stmt .)
    ASM             reduce using rule 1 (control_line -> control_line control_line_stmt .)
    TEMPLATE        reduce using rule 1 (control_line -> control_line control_line_stmt .)
    TYPEDEF         reduce using rule 1 (control_line -> control_line control_line_stmt .)
    CHAR            reduce using rule 1 (control_line -> control_line control_line_stmt .)
    SHORT           reduce using rule 1 (control_line -> control_line control_line_stmt .)
    INT             reduce using rule 1 (control_line -> control_line control_line_stmt .)
    LONG            reduce using rule 1 (control_line -> control_line control_line_stmt .)
    SIGNED          reduce using rule 1 (control_line -> control_line control_line_stmt .)
    UNSIGNED        reduce using rule 1 (control_line -> control_line control_line_stmt .)
    FLOAT           reduce using rule 1 (control_line -> control_line control_line_stmt .)
    DOUBLE          reduce using rule 1 (control_line -> control_line control_line_stmt .)
    VOID            reduce using rule 1 (control_line -> control_line control_line_stmt .)
    STRING          reduce using rule 1 (control_line -> control_line control_line_stmt .)
    AUTO            reduce using rule 1 (control_line -> control_line control_line_stmt .)
    TYPE            reduce using rule 1 (control_line -> control_line control_line_stmt .)
    CLASS           reduce using rule 1 (control_line -> control_line control_line_stmt .)
    STRUCT          reduce using rule 1 (control_line -> control_line control_line_stmt .)


state 41

    (9) declaration_seq -> declaration_seq declaration .

    CONST           reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    ASM             reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    TEMPLATE        reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    TYPEDEF         reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    CHAR            reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    SHORT           reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    INT             reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    LONG            reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    SIGNED          reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    UNSIGNED        reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    FLOAT           reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    DOUBLE          reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    VOID            reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    STRING          reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    AUTO            reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    TYPE            reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    CLASS           reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    STRUCT          reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    $end            reduce using rule 9 (declaration_seq -> declaration_seq declaration .)


state 42

    (4) control_line_stmt -> include_control LTCOMP . STRING_L GTCOMP

    STRING_L        shift and go to state 63


state 43

    (5) control_line_stmt -> include_control STRING_L .

    HASHTAG         reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    CONST           reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    ASM             reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    TEMPLATE        reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    TYPEDEF         reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    CHAR            reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    SHORT           reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    INT             reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    LONG            reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    SIGNED          reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    UNSIGNED        reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    FLOAT           reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    DOUBLE          reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    VOID            reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    STRING          reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    AUTO            reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    TYPE            reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    CLASS           reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    STRUCT          reduce using rule 5 (control_line_stmt -> include_control STRING_L .)


state 44

    (3) include_control -> HASHTAG INCLUDE .

    LTCOMP          reduce using rule 3 (include_control -> HASHTAG INCLUDE .)
    STRING_L        reduce using rule 3 (include_control -> HASHTAG INCLUDE .)


state 45

    (266) declaration -> type_specifier_ declarator_list . SEMICOLON
    (277) declarator_list -> declarator_list . COMMA init_declarator

    SEMICOLON       shift and go to state 64
    COMMA           shift and go to state 65


state 46

    (227) function_definition -> type_specifier_ declarator . func_push_scope arg_list RPAREN fct_body pop_scope
    (228) function_decl -> type_specifier_ declarator . func_push_scope arg_list RPAREN SEMICOLON pop_scope
    (117) declarator -> declarator . LSPAREN constant_expression RSPAREN
    (118) declarator -> declarator . LSPAREN RSPAREN
    (278) init_declarator -> declarator . initializer
    (279) init_declarator -> declarator .
    (229) func_push_scope -> . LPAREN
    (280) initializer -> . EQUAL assignment_expression
    (281) initializer -> . EQUAL LCPAREN initializer_list RCPAREN
    (282) initializer -> . EQUAL LCPAREN initializer_list COMMA RCPAREN
    (283) initializer -> . LPAREN expression_list RPAREN

    LSPAREN         shift and go to state 67
    SEMICOLON       reduce using rule 279 (init_declarator -> declarator .)
    COMMA           reduce using rule 279 (init_declarator -> declarator .)
    LPAREN          shift and go to state 69
    EQUAL           shift and go to state 70

    func_push_scope                shift and go to state 66
    initializer                    shift and go to state 68

state 47

    (276) declarator_list -> init_declarator .

    SEMICOLON       reduce using rule 276 (declarator_list -> init_declarator .)
    COMMA           reduce using rule 276 (declarator_list -> init_declarator .)


state 48

    (115) declarator -> name .

    LSPAREN         reduce using rule 115 (declarator -> name .)
    LPAREN          reduce using rule 115 (declarator -> name .)
    EQUAL           reduce using rule 115 (declarator -> name .)
    SEMICOLON       reduce using rule 115 (declarator -> name .)
    COMMA           reduce using rule 115 (declarator -> name .)
    RTEMPLATE       reduce using rule 115 (declarator -> name .)
    RPAREN          reduce using rule 115 (declarator -> name .)


state 49

    (116) declarator -> unary2_operator . declarator
    (115) declarator -> . name
    (116) declarator -> . unary2_operator declarator
    (117) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (118) declarator -> . declarator LSPAREN RSPAREN
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP

    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53

    unary2_operator                shift and go to state 49
    declarator                     shift and go to state 71
    name                           shift and go to state 48

state 50

    (127) name -> IDENTIFIER .

    LSPAREN         reduce using rule 127 (name -> IDENTIFIER .)
    LPAREN          reduce using rule 127 (name -> IDENTIFIER .)
    EQUAL           reduce using rule 127 (name -> IDENTIFIER .)
    SEMICOLON       reduce using rule 127 (name -> IDENTIFIER .)
    COMMA           reduce using rule 127 (name -> IDENTIFIER .)
    DOT             reduce using rule 127 (name -> IDENTIFIER .)
    ARROW           reduce using rule 127 (name -> IDENTIFIER .)
    DPLUSOP         reduce using rule 127 (name -> IDENTIFIER .)
    DMINUSOP        reduce using rule 127 (name -> IDENTIFIER .)
    LTEMPLATE       reduce using rule 127 (name -> IDENTIFIER .)
    DOTSTAR         reduce using rule 127 (name -> IDENTIFIER .)
    ARROWSTAR       reduce using rule 127 (name -> IDENTIFIER .)
    MULTOP          reduce using rule 127 (name -> IDENTIFIER .)
    DIVOP           reduce using rule 127 (name -> IDENTIFIER .)
    MODOP           reduce using rule 127 (name -> IDENTIFIER .)
    PLUSOP          reduce using rule 127 (name -> IDENTIFIER .)
    MINUSOP         reduce using rule 127 (name -> IDENTIFIER .)
    LSHIFT          reduce using rule 127 (name -> IDENTIFIER .)
    RSHIFT          reduce using rule 127 (name -> IDENTIFIER .)
    LTCOMP          reduce using rule 127 (name -> IDENTIFIER .)
    GTCOMP          reduce using rule 127 (name -> IDENTIFIER .)
    LTECOMP         reduce using rule 127 (name -> IDENTIFIER .)
    GTECOMP         reduce using rule 127 (name -> IDENTIFIER .)
    EQCOMP          reduce using rule 127 (name -> IDENTIFIER .)
    NEQCOMP         reduce using rule 127 (name -> IDENTIFIER .)
    BANDOP          reduce using rule 127 (name -> IDENTIFIER .)
    XOROP           reduce using rule 127 (name -> IDENTIFIER .)
    OROP            reduce using rule 127 (name -> IDENTIFIER .)
    ANDOP           reduce using rule 127 (name -> IDENTIFIER .)
    QUESMARK        reduce using rule 127 (name -> IDENTIFIER .)
    RSPAREN         reduce using rule 127 (name -> IDENTIFIER .)
    MULTEQOP        reduce using rule 127 (name -> IDENTIFIER .)
    DIVEQOP         reduce using rule 127 (name -> IDENTIFIER .)
    MODEQOP         reduce using rule 127 (name -> IDENTIFIER .)
    PLUSEQOP        reduce using rule 127 (name -> IDENTIFIER .)
    MINUSEQOP       reduce using rule 127 (name -> IDENTIFIER .)
    LSHIFTEQOP      reduce using rule 127 (name -> IDENTIFIER .)
    RSHIFTEQOP      reduce using rule 127 (name -> IDENTIFIER .)
    BANDEQOP        reduce using rule 127 (name -> IDENTIFIER .)
    BOREQOP         reduce using rule 127 (name -> IDENTIFIER .)
    RPAREN          reduce using rule 127 (name -> IDENTIFIER .)
    RTEMPLATE       reduce using rule 127 (name -> IDENTIFIER .)
    RCPAREN         reduce using rule 127 (name -> IDENTIFIER .)
    COLON           reduce using rule 127 (name -> IDENTIFIER .)


state 51

    (128) name -> DOUBLEBNOP . IDENTIFIER

    IDENTIFIER      shift and go to state 72


state 52

    (89) unary2_operator -> MULTOP .

    IDENTIFIER      reduce using rule 89 (unary2_operator -> MULTOP .)
    DOUBLEBNOP      reduce using rule 89 (unary2_operator -> MULTOP .)
    MULTOP          reduce using rule 89 (unary2_operator -> MULTOP .)
    BANDOP          reduce using rule 89 (unary2_operator -> MULTOP .)
    LSPAREN         reduce using rule 89 (unary2_operator -> MULTOP .)
    LPAREN          reduce using rule 89 (unary2_operator -> MULTOP .)
    DPLUSOP         reduce using rule 89 (unary2_operator -> MULTOP .)
    DMINUSOP        reduce using rule 89 (unary2_operator -> MULTOP .)
    SIZEOF          reduce using rule 89 (unary2_operator -> MULTOP .)
    PLUSOP          reduce using rule 89 (unary2_operator -> MULTOP .)
    MINUSOP         reduce using rule 89 (unary2_operator -> MULTOP .)
    NOTSYM          reduce using rule 89 (unary2_operator -> MULTOP .)
    BNOP            reduce using rule 89 (unary2_operator -> MULTOP .)
    NEW             reduce using rule 89 (unary2_operator -> MULTOP .)
    DELETE          reduce using rule 89 (unary2_operator -> MULTOP .)
    THIS            reduce using rule 89 (unary2_operator -> MULTOP .)
    STRING_L        reduce using rule 89 (unary2_operator -> MULTOP .)
    NUMBER          reduce using rule 89 (unary2_operator -> MULTOP .)
    SCHAR           reduce using rule 89 (unary2_operator -> MULTOP .)
    RTEMPLATE       reduce using rule 89 (unary2_operator -> MULTOP .)
    COMMA           reduce using rule 89 (unary2_operator -> MULTOP .)
    RPAREN          reduce using rule 89 (unary2_operator -> MULTOP .)


state 53

    (90) unary2_operator -> BANDOP .

    IDENTIFIER      reduce using rule 90 (unary2_operator -> BANDOP .)
    DOUBLEBNOP      reduce using rule 90 (unary2_operator -> BANDOP .)
    MULTOP          reduce using rule 90 (unary2_operator -> BANDOP .)
    BANDOP          reduce using rule 90 (unary2_operator -> BANDOP .)
    LSPAREN         reduce using rule 90 (unary2_operator -> BANDOP .)
    LPAREN          reduce using rule 90 (unary2_operator -> BANDOP .)
    DPLUSOP         reduce using rule 90 (unary2_operator -> BANDOP .)
    DMINUSOP        reduce using rule 90 (unary2_operator -> BANDOP .)
    SIZEOF          reduce using rule 90 (unary2_operator -> BANDOP .)
    PLUSOP          reduce using rule 90 (unary2_operator -> BANDOP .)
    MINUSOP         reduce using rule 90 (unary2_operator -> BANDOP .)
    NOTSYM          reduce using rule 90 (unary2_operator -> BANDOP .)
    BNOP            reduce using rule 90 (unary2_operator -> BANDOP .)
    NEW             reduce using rule 90 (unary2_operator -> BANDOP .)
    DELETE          reduce using rule 90 (unary2_operator -> BANDOP .)
    THIS            reduce using rule 90 (unary2_operator -> BANDOP .)
    STRING_L        reduce using rule 90 (unary2_operator -> BANDOP .)
    NUMBER          reduce using rule 90 (unary2_operator -> BANDOP .)
    SCHAR           reduce using rule 90 (unary2_operator -> BANDOP .)
    RTEMPLATE       reduce using rule 90 (unary2_operator -> BANDOP .)
    COMMA           reduce using rule 90 (unary2_operator -> BANDOP .)
    RPAREN          reduce using rule 90 (unary2_operator -> BANDOP .)


state 54

    (270) declaration -> class_define_specifier SEMICOLON .

    CONST           reduce using rule 270 (declaration -> class_define_specifier SEMICOLON .)
    ASM             reduce using rule 270 (declaration -> class_define_specifier SEMICOLON .)
    TEMPLATE        reduce using rule 270 (declaration -> class_define_specifier SEMICOLON .)
    TYPEDEF         reduce using rule 270 (declaration -> class_define_specifier SEMICOLON .)
    CHAR            reduce using rule 270 (declaration -> class_define_specifier SEMICOLON .)
    SHORT           reduce using rule 270 (declaration -> class_define_specifier SEMICOLON .)
    INT             reduce using rule 270 (declaration -> class_define_specifier SEMICOLON .)
    LONG            reduce using rule 270 (declaration -> class_define_specifier SEMICOLON .)
    SIGNED          reduce using rule 270 (declaration -> class_define_specifier SEMICOLON .)
    UNSIGNED        reduce using rule 270 (declaration -> class_define_specifier SEMICOLON .)
    FLOAT           reduce using rule 270 (declaration -> class_define_specifier SEMICOLON .)
    DOUBLE          reduce using rule 270 (declaration -> class_define_specifier SEMICOLON .)
    VOID            reduce using rule 270 (declaration -> class_define_specifier SEMICOLON .)
    STRING          reduce using rule 270 (declaration -> class_define_specifier SEMICOLON .)
    AUTO            reduce using rule 270 (declaration -> class_define_specifier SEMICOLON .)
    TYPE            reduce using rule 270 (declaration -> class_define_specifier SEMICOLON .)
    CLASS           reduce using rule 270 (declaration -> class_define_specifier SEMICOLON .)
    STRUCT          reduce using rule 270 (declaration -> class_define_specifier SEMICOLON .)
    $end            reduce using rule 270 (declaration -> class_define_specifier SEMICOLON .)
    RCPAREN         reduce using rule 270 (declaration -> class_define_specifier SEMICOLON .)
    IDENTIFIER      reduce using rule 270 (declaration -> class_define_specifier SEMICOLON .)
    CASE            reduce using rule 270 (declaration -> class_define_specifier SEMICOLON .)
    DEFAULT         reduce using rule 270 (declaration -> class_define_specifier SEMICOLON .)
    SEMICOLON       reduce using rule 270 (declaration -> class_define_specifier SEMICOLON .)
    LCPAREN         reduce using rule 270 (declaration -> class_define_specifier SEMICOLON .)
    IF              reduce using rule 270 (declaration -> class_define_specifier SEMICOLON .)
    SWITCH          reduce using rule 270 (declaration -> class_define_specifier SEMICOLON .)
    WHILE           reduce using rule 270 (declaration -> class_define_specifier SEMICOLON .)
    DO              reduce using rule 270 (declaration -> class_define_specifier SEMICOLON .)
    FOR             reduce using rule 270 (declaration -> class_define_specifier SEMICOLON .)
    BREAK           reduce using rule 270 (declaration -> class_define_specifier SEMICOLON .)
    CONTINUE        reduce using rule 270 (declaration -> class_define_specifier SEMICOLON .)
    RETURN          reduce using rule 270 (declaration -> class_define_specifier SEMICOLON .)
    GOTO            reduce using rule 270 (declaration -> class_define_specifier SEMICOLON .)
    TRY             reduce using rule 270 (declaration -> class_define_specifier SEMICOLON .)
    THROW           reduce using rule 270 (declaration -> class_define_specifier SEMICOLON .)
    DPLUSOP         reduce using rule 270 (declaration -> class_define_specifier SEMICOLON .)
    DMINUSOP        reduce using rule 270 (declaration -> class_define_specifier SEMICOLON .)
    SIZEOF          reduce using rule 270 (declaration -> class_define_specifier SEMICOLON .)
    PLUSOP          reduce using rule 270 (declaration -> class_define_specifier SEMICOLON .)
    MINUSOP         reduce using rule 270 (declaration -> class_define_specifier SEMICOLON .)
    NOTSYM          reduce using rule 270 (declaration -> class_define_specifier SEMICOLON .)
    BNOP            reduce using rule 270 (declaration -> class_define_specifier SEMICOLON .)
    MULTOP          reduce using rule 270 (declaration -> class_define_specifier SEMICOLON .)
    BANDOP          reduce using rule 270 (declaration -> class_define_specifier SEMICOLON .)
    NEW             reduce using rule 270 (declaration -> class_define_specifier SEMICOLON .)
    DELETE          reduce using rule 270 (declaration -> class_define_specifier SEMICOLON .)
    THIS            reduce using rule 270 (declaration -> class_define_specifier SEMICOLON .)
    LPAREN          reduce using rule 270 (declaration -> class_define_specifier SEMICOLON .)
    DOUBLEBNOP      reduce using rule 270 (declaration -> class_define_specifier SEMICOLON .)
    STRING_L        reduce using rule 270 (declaration -> class_define_specifier SEMICOLON .)
    NUMBER          reduce using rule 270 (declaration -> class_define_specifier SEMICOLON .)
    SCHAR           reduce using rule 270 (declaration -> class_define_specifier SEMICOLON .)
    ELSE            reduce using rule 270 (declaration -> class_define_specifier SEMICOLON .)


state 55

    (170) type_specifier_ -> CONST type_specifier .

    IDENTIFIER      reduce using rule 170 (type_specifier_ -> CONST type_specifier .)
    DOUBLEBNOP      reduce using rule 170 (type_specifier_ -> CONST type_specifier .)
    MULTOP          reduce using rule 170 (type_specifier_ -> CONST type_specifier .)
    BANDOP          reduce using rule 170 (type_specifier_ -> CONST type_specifier .)
    LSPAREN         reduce using rule 170 (type_specifier_ -> CONST type_specifier .)
    SEMICOLON       reduce using rule 170 (type_specifier_ -> CONST type_specifier .)
    RTEMPLATE       reduce using rule 170 (type_specifier_ -> CONST type_specifier .)
    COMMA           reduce using rule 170 (type_specifier_ -> CONST type_specifier .)
    RPAREN          reduce using rule 170 (type_specifier_ -> CONST type_specifier .)
    LPAREN          reduce using rule 170 (type_specifier_ -> CONST type_specifier .)
    DOTSTAR         reduce using rule 170 (type_specifier_ -> CONST type_specifier .)
    ARROWSTAR       reduce using rule 170 (type_specifier_ -> CONST type_specifier .)
    DIVOP           reduce using rule 170 (type_specifier_ -> CONST type_specifier .)
    MODOP           reduce using rule 170 (type_specifier_ -> CONST type_specifier .)
    PLUSOP          reduce using rule 170 (type_specifier_ -> CONST type_specifier .)
    MINUSOP         reduce using rule 170 (type_specifier_ -> CONST type_specifier .)
    LSHIFT          reduce using rule 170 (type_specifier_ -> CONST type_specifier .)
    RSHIFT          reduce using rule 170 (type_specifier_ -> CONST type_specifier .)
    LTCOMP          reduce using rule 170 (type_specifier_ -> CONST type_specifier .)
    GTCOMP          reduce using rule 170 (type_specifier_ -> CONST type_specifier .)
    LTECOMP         reduce using rule 170 (type_specifier_ -> CONST type_specifier .)
    GTECOMP         reduce using rule 170 (type_specifier_ -> CONST type_specifier .)
    EQCOMP          reduce using rule 170 (type_specifier_ -> CONST type_specifier .)
    NEQCOMP         reduce using rule 170 (type_specifier_ -> CONST type_specifier .)
    XOROP           reduce using rule 170 (type_specifier_ -> CONST type_specifier .)
    OROP            reduce using rule 170 (type_specifier_ -> CONST type_specifier .)
    ANDOP           reduce using rule 170 (type_specifier_ -> CONST type_specifier .)
    QUESMARK        reduce using rule 170 (type_specifier_ -> CONST type_specifier .)
    RSPAREN         reduce using rule 170 (type_specifier_ -> CONST type_specifier .)
    EQUAL           reduce using rule 170 (type_specifier_ -> CONST type_specifier .)
    MULTEQOP        reduce using rule 170 (type_specifier_ -> CONST type_specifier .)
    DIVEQOP         reduce using rule 170 (type_specifier_ -> CONST type_specifier .)
    MODEQOP         reduce using rule 170 (type_specifier_ -> CONST type_specifier .)
    PLUSEQOP        reduce using rule 170 (type_specifier_ -> CONST type_specifier .)
    MINUSEQOP       reduce using rule 170 (type_specifier_ -> CONST type_specifier .)
    LSHIFTEQOP      reduce using rule 170 (type_specifier_ -> CONST type_specifier .)
    RSHIFTEQOP      reduce using rule 170 (type_specifier_ -> CONST type_specifier .)
    BANDEQOP        reduce using rule 170 (type_specifier_ -> CONST type_specifier .)
    BOREQOP         reduce using rule 170 (type_specifier_ -> CONST type_specifier .)
    RCPAREN         reduce using rule 170 (type_specifier_ -> CONST type_specifier .)
    COLON           reduce using rule 170 (type_specifier_ -> CONST type_specifier .)


state 56

    (187) complex_type_specifier -> class_key . IDENTIFIER
    (188) complex_type_specifier -> class_key . IDENTIFIER template_class_name

    IDENTIFIER      shift and go to state 73


state 57

    (288) asm_declaration -> ASM LPAREN . STRING_L RPAREN SEMICOLON

    STRING_L        shift and go to state 74


state 58

    (205) class_define_specifier -> class_head LCPAREN . member_list RCPAREN
    (206) class_define_specifier -> class_head LCPAREN . RCPAREN
    (207) member_list -> . member_access_list
    (208) member_list -> . access_list
    (209) member_list -> . member_list access_list
    (215) member_access_list -> . member_declaration member_access_list
    (216) member_access_list -> . member_declaration
    (213) access_list -> . access_specifier COLON member_access_list
    (214) access_list -> . access_specifier COLON
    (217) member_declaration -> . type_specifier_ member_declarator_list SEMICOLON
    (218) member_declaration -> . member_declarator_list SEMICOLON
    (219) member_declaration -> . type_specifier_ SEMICOLON
    (220) member_declaration -> . SEMICOLON
    (221) member_declaration -> . function_definition
    (222) member_declaration -> . class_define_specifier SEMICOLON
    (210) access_specifier -> . PRIVATE
    (211) access_specifier -> . PROTECTED
    (212) access_specifier -> . PUBLIC
    (170) type_specifier_ -> . CONST type_specifier
    (171) type_specifier_ -> . type_specifier
    (223) member_declarator_list -> . member_declarator
    (224) member_declarator_list -> . member_declarator_list COMMA member_declarator
    (227) function_definition -> . type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope
    (205) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (206) class_define_specifier -> . class_head LCPAREN RCPAREN
    (174) type_specifier -> . simple_type_name
    (175) type_specifier -> . complex_type_specifier
    (225) member_declarator -> . declarator pure_specifier
    (226) member_declarator -> . declarator
    (192) class_head -> . class_key IDENTIFIER base_spec
    (193) class_head -> . class_key IDENTIFIER
    (176) simple_type_name -> . CHAR
    (177) simple_type_name -> . SHORT
    (178) simple_type_name -> . INT
    (179) simple_type_name -> . LONG
    (180) simple_type_name -> . SIGNED
    (181) simple_type_name -> . UNSIGNED
    (182) simple_type_name -> . FLOAT
    (183) simple_type_name -> . DOUBLE
    (184) simple_type_name -> . VOID
    (185) simple_type_name -> . STRING
    (186) simple_type_name -> . AUTO
    (187) complex_type_specifier -> . class_key IDENTIFIER
    (188) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (189) complex_type_specifier -> . TYPE IDENTIFIER
    (190) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (115) declarator -> . name
    (116) declarator -> . unary2_operator declarator
    (117) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (118) declarator -> . declarator LSPAREN RSPAREN
    (203) class_key -> . CLASS
    (204) class_key -> . STRUCT
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP

    RCPAREN         shift and go to state 76
    SEMICOLON       shift and go to state 83
    PRIVATE         shift and go to state 86
    PROTECTED       shift and go to state 87
    PUBLIC          shift and go to state 88
    CONST           shift and go to state 16
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53

    class_head                     shift and go to state 19
    member_list                    shift and go to state 75
    member_access_list             shift and go to state 77
    access_list                    shift and go to state 78
    member_declaration             shift and go to state 79
    access_specifier               shift and go to state 80
    type_specifier_                shift and go to state 81
    member_declarator_list         shift and go to state 82
    function_definition            shift and go to state 84
    class_define_specifier         shift and go to state 85
    type_specifier                 shift and go to state 17
    member_declarator              shift and go to state 89
    declarator                     shift and go to state 90
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 24
    name                           shift and go to state 48
    unary2_operator                shift and go to state 49

state 59

    (273) template_declaration -> TEMPLATE LTEMPLATE . template_argument_list RTEMPLATE declaration
    (274) template_argument_list -> . argument_declaration
    (275) template_argument_list -> . template_argument_list COMMA argument_declaration
    (123) argument_declaration -> . type_specifier_ declarator
    (124) argument_declaration -> . type_specifier_ declarator EQUAL expression
    (125) argument_declaration -> . type_specifier_ abstract_declarator
    (126) argument_declaration -> . type_specifier_
    (170) type_specifier_ -> . CONST type_specifier
    (171) type_specifier_ -> . type_specifier
    (174) type_specifier -> . simple_type_name
    (175) type_specifier -> . complex_type_specifier
    (176) simple_type_name -> . CHAR
    (177) simple_type_name -> . SHORT
    (178) simple_type_name -> . INT
    (179) simple_type_name -> . LONG
    (180) simple_type_name -> . SIGNED
    (181) simple_type_name -> . UNSIGNED
    (182) simple_type_name -> . FLOAT
    (183) simple_type_name -> . DOUBLE
    (184) simple_type_name -> . VOID
    (185) simple_type_name -> . STRING
    (186) simple_type_name -> . AUTO
    (187) complex_type_specifier -> . class_key IDENTIFIER
    (188) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (189) complex_type_specifier -> . TYPE IDENTIFIER
    (190) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (203) class_key -> . CLASS
    (204) class_key -> . STRUCT

    CONST           shift and go to state 16
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38

    template_argument_list         shift and go to state 91
    argument_declaration           shift and go to state 92
    type_specifier_                shift and go to state 93
    type_specifier                 shift and go to state 17
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 56

state 60

    (172) typedef_declarator -> TYPEDEF type_specifier_ . abstract_declarator IDENTIFIER SEMICOLON
    (173) typedef_declarator -> TYPEDEF type_specifier_ . IDENTIFIER SEMICOLON
    (109) abstract_declarator -> . unary2_operator
    (110) abstract_declarator -> . unary2_operator abstract_declarator
    (111) abstract_declarator -> . LSPAREN constant_expression RSPAREN
    (112) abstract_declarator -> . abstract_declarator LSPAREN constant_expression RSPAREN
    (113) abstract_declarator -> . LSPAREN RSPAREN
    (114) abstract_declarator -> . abstract_declarator LSPAREN RSPAREN
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP

    IDENTIFIER      shift and go to state 95
    LSPAREN         shift and go to state 97
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53

    abstract_declarator            shift and go to state 94
    unary2_operator                shift and go to state 96

state 61

    (192) class_head -> class_key IDENTIFIER . base_spec
    (193) class_head -> class_key IDENTIFIER .
    (187) complex_type_specifier -> class_key IDENTIFIER .
    (188) complex_type_specifier -> class_key IDENTIFIER . template_class_name
    (194) base_spec -> . COLON base_list
    (165) template_class_name -> . LTEMPLATE template_arg_list RTEMPLATE

    LCPAREN         reduce using rule 193 (class_head -> class_key IDENTIFIER .)
    IDENTIFIER      reduce using rule 187 (complex_type_specifier -> class_key IDENTIFIER .)
    DOUBLEBNOP      reduce using rule 187 (complex_type_specifier -> class_key IDENTIFIER .)
    MULTOP          reduce using rule 187 (complex_type_specifier -> class_key IDENTIFIER .)
    BANDOP          reduce using rule 187 (complex_type_specifier -> class_key IDENTIFIER .)
    SEMICOLON       reduce using rule 187 (complex_type_specifier -> class_key IDENTIFIER .)
    COLON           shift and go to state 100
    LTEMPLATE       shift and go to state 101

    base_spec                      shift and go to state 98
    template_class_name            shift and go to state 99

state 62

    (189) complex_type_specifier -> TYPE IDENTIFIER .
    (190) complex_type_specifier -> TYPE IDENTIFIER . template_class_name
    (165) template_class_name -> . LTEMPLATE template_arg_list RTEMPLATE

    IDENTIFIER      reduce using rule 189 (complex_type_specifier -> TYPE IDENTIFIER .)
    DOUBLEBNOP      reduce using rule 189 (complex_type_specifier -> TYPE IDENTIFIER .)
    MULTOP          reduce using rule 189 (complex_type_specifier -> TYPE IDENTIFIER .)
    BANDOP          reduce using rule 189 (complex_type_specifier -> TYPE IDENTIFIER .)
    LSPAREN         reduce using rule 189 (complex_type_specifier -> TYPE IDENTIFIER .)
    SEMICOLON       reduce using rule 189 (complex_type_specifier -> TYPE IDENTIFIER .)
    RTEMPLATE       reduce using rule 189 (complex_type_specifier -> TYPE IDENTIFIER .)
    COMMA           reduce using rule 189 (complex_type_specifier -> TYPE IDENTIFIER .)
    RPAREN          reduce using rule 189 (complex_type_specifier -> TYPE IDENTIFIER .)
    LPAREN          reduce using rule 189 (complex_type_specifier -> TYPE IDENTIFIER .)
    DOTSTAR         reduce using rule 189 (complex_type_specifier -> TYPE IDENTIFIER .)
    ARROWSTAR       reduce using rule 189 (complex_type_specifier -> TYPE IDENTIFIER .)
    DIVOP           reduce using rule 189 (complex_type_specifier -> TYPE IDENTIFIER .)
    MODOP           reduce using rule 189 (complex_type_specifier -> TYPE IDENTIFIER .)
    PLUSOP          reduce using rule 189 (complex_type_specifier -> TYPE IDENTIFIER .)
    MINUSOP         reduce using rule 189 (complex_type_specifier -> TYPE IDENTIFIER .)
    LSHIFT          reduce using rule 189 (complex_type_specifier -> TYPE IDENTIFIER .)
    RSHIFT          reduce using rule 189 (complex_type_specifier -> TYPE IDENTIFIER .)
    LTCOMP          reduce using rule 189 (complex_type_specifier -> TYPE IDENTIFIER .)
    GTCOMP          reduce using rule 189 (complex_type_specifier -> TYPE IDENTIFIER .)
    LTECOMP         reduce using rule 189 (complex_type_specifier -> TYPE IDENTIFIER .)
    GTECOMP         reduce using rule 189 (complex_type_specifier -> TYPE IDENTIFIER .)
    EQCOMP          reduce using rule 189 (complex_type_specifier -> TYPE IDENTIFIER .)
    NEQCOMP         reduce using rule 189 (complex_type_specifier -> TYPE IDENTIFIER .)
    XOROP           reduce using rule 189 (complex_type_specifier -> TYPE IDENTIFIER .)
    OROP            reduce using rule 189 (complex_type_specifier -> TYPE IDENTIFIER .)
    ANDOP           reduce using rule 189 (complex_type_specifier -> TYPE IDENTIFIER .)
    QUESMARK        reduce using rule 189 (complex_type_specifier -> TYPE IDENTIFIER .)
    RSPAREN         reduce using rule 189 (complex_type_specifier -> TYPE IDENTIFIER .)
    EQUAL           reduce using rule 189 (complex_type_specifier -> TYPE IDENTIFIER .)
    MULTEQOP        reduce using rule 189 (complex_type_specifier -> TYPE IDENTIFIER .)
    DIVEQOP         reduce using rule 189 (complex_type_specifier -> TYPE IDENTIFIER .)
    MODEQOP         reduce using rule 189 (complex_type_specifier -> TYPE IDENTIFIER .)
    PLUSEQOP        reduce using rule 189 (complex_type_specifier -> TYPE IDENTIFIER .)
    MINUSEQOP       reduce using rule 189 (complex_type_specifier -> TYPE IDENTIFIER .)
    LSHIFTEQOP      reduce using rule 189 (complex_type_specifier -> TYPE IDENTIFIER .)
    RSHIFTEQOP      reduce using rule 189 (complex_type_specifier -> TYPE IDENTIFIER .)
    BANDEQOP        reduce using rule 189 (complex_type_specifier -> TYPE IDENTIFIER .)
    BOREQOP         reduce using rule 189 (complex_type_specifier -> TYPE IDENTIFIER .)
    RCPAREN         reduce using rule 189 (complex_type_specifier -> TYPE IDENTIFIER .)
    COLON           reduce using rule 189 (complex_type_specifier -> TYPE IDENTIFIER .)
    LTEMPLATE       shift and go to state 101

    template_class_name            shift and go to state 102

state 63

    (4) control_line_stmt -> include_control LTCOMP STRING_L . GTCOMP

    GTCOMP          shift and go to state 103


state 64

    (266) declaration -> type_specifier_ declarator_list SEMICOLON .

    CONST           reduce using rule 266 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    ASM             reduce using rule 266 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    TEMPLATE        reduce using rule 266 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    TYPEDEF         reduce using rule 266 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    CHAR            reduce using rule 266 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    SHORT           reduce using rule 266 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    INT             reduce using rule 266 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    LONG            reduce using rule 266 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    SIGNED          reduce using rule 266 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    UNSIGNED        reduce using rule 266 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    FLOAT           reduce using rule 266 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    DOUBLE          reduce using rule 266 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    VOID            reduce using rule 266 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    STRING          reduce using rule 266 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    AUTO            reduce using rule 266 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    TYPE            reduce using rule 266 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    CLASS           reduce using rule 266 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    STRUCT          reduce using rule 266 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    $end            reduce using rule 266 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    RCPAREN         reduce using rule 266 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    IDENTIFIER      reduce using rule 266 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    CASE            reduce using rule 266 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    DEFAULT         reduce using rule 266 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    SEMICOLON       reduce using rule 266 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    LCPAREN         reduce using rule 266 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    IF              reduce using rule 266 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    SWITCH          reduce using rule 266 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    WHILE           reduce using rule 266 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    DO              reduce using rule 266 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    FOR             reduce using rule 266 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    BREAK           reduce using rule 266 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    CONTINUE        reduce using rule 266 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    RETURN          reduce using rule 266 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    GOTO            reduce using rule 266 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    TRY             reduce using rule 266 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    THROW           reduce using rule 266 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    DPLUSOP         reduce using rule 266 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    DMINUSOP        reduce using rule 266 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    SIZEOF          reduce using rule 266 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    PLUSOP          reduce using rule 266 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    MINUSOP         reduce using rule 266 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    NOTSYM          reduce using rule 266 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    BNOP            reduce using rule 266 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    MULTOP          reduce using rule 266 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    BANDOP          reduce using rule 266 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    NEW             reduce using rule 266 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    DELETE          reduce using rule 266 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    THIS            reduce using rule 266 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    LPAREN          reduce using rule 266 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    DOUBLEBNOP      reduce using rule 266 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    STRING_L        reduce using rule 266 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    NUMBER          reduce using rule 266 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    SCHAR           reduce using rule 266 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    ELSE            reduce using rule 266 (declaration -> type_specifier_ declarator_list SEMICOLON .)


state 65

    (277) declarator_list -> declarator_list COMMA . init_declarator
    (278) init_declarator -> . declarator initializer
    (279) init_declarator -> . declarator
    (115) declarator -> . name
    (116) declarator -> . unary2_operator declarator
    (117) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (118) declarator -> . declarator LSPAREN RSPAREN
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP

    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53

    init_declarator                shift and go to state 104
    declarator                     shift and go to state 105
    name                           shift and go to state 48
    unary2_operator                shift and go to state 49

state 66

    (227) function_definition -> type_specifier_ declarator func_push_scope . arg_list RPAREN fct_body pop_scope
    (228) function_decl -> type_specifier_ declarator func_push_scope . arg_list RPAREN SEMICOLON pop_scope
    (119) arg_list -> . argument_declaration_list
    (120) arg_list -> . empty
    (121) argument_declaration_list -> . argument_declaration
    (122) argument_declaration_list -> . argument_declaration COMMA argument_declaration_list
    (11) empty -> .
    (123) argument_declaration -> . type_specifier_ declarator
    (124) argument_declaration -> . type_specifier_ declarator EQUAL expression
    (125) argument_declaration -> . type_specifier_ abstract_declarator
    (126) argument_declaration -> . type_specifier_
    (170) type_specifier_ -> . CONST type_specifier
    (171) type_specifier_ -> . type_specifier
    (174) type_specifier -> . simple_type_name
    (175) type_specifier -> . complex_type_specifier
    (176) simple_type_name -> . CHAR
    (177) simple_type_name -> . SHORT
    (178) simple_type_name -> . INT
    (179) simple_type_name -> . LONG
    (180) simple_type_name -> . SIGNED
    (181) simple_type_name -> . UNSIGNED
    (182) simple_type_name -> . FLOAT
    (183) simple_type_name -> . DOUBLE
    (184) simple_type_name -> . VOID
    (185) simple_type_name -> . STRING
    (186) simple_type_name -> . AUTO
    (187) complex_type_specifier -> . class_key IDENTIFIER
    (188) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (189) complex_type_specifier -> . TYPE IDENTIFIER
    (190) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (203) class_key -> . CLASS
    (204) class_key -> . STRUCT

    RPAREN          reduce using rule 11 (empty -> .)
    CONST           shift and go to state 16
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38

    type_specifier_                shift and go to state 93
    arg_list                       shift and go to state 106
    argument_declaration_list      shift and go to state 107
    empty                          shift and go to state 108
    argument_declaration           shift and go to state 109
    type_specifier                 shift and go to state 17
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 56

state 67

    (117) declarator -> declarator LSPAREN . constant_expression RSPAREN
    (118) declarator -> declarator LSPAREN . RSPAREN
    (12) constant_expression -> . conditional_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR

    RSPAREN         shift and go to state 111
    LPAREN          shift and go to state 128
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    THIS            shift and go to state 144
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    constant_expression            shift and go to state 110
    conditional_expression         shift and go to state 112
    logical_OR_expression          shift and go to state 113
    logical_AND_expression         shift and go to state 114
    inclusive_OR_expression        shift and go to state 115
    exclusive_OR_expression        shift and go to state 116
    AND_expression                 shift and go to state 117
    equality_expression            shift and go to state 118
    relational_expression          shift and go to state 119
    shift_expression               shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 122
    pm_expression                  shift and go to state 125
    cast_expression                shift and go to state 126
    unary_expression               shift and go to state 127
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    literal                        shift and go to state 143

state 68

    (278) init_declarator -> declarator initializer .

    SEMICOLON       reduce using rule 278 (init_declarator -> declarator initializer .)
    COMMA           reduce using rule 278 (init_declarator -> declarator initializer .)


state 69

    (229) func_push_scope -> LPAREN .
    (283) initializer -> LPAREN . expression_list RPAREN
    (289) expression_list -> . assignment_expression
    (290) expression_list -> . expression_list COMMA assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    CONST           reduce using rule 229 (func_push_scope -> LPAREN .)
    CHAR            reduce using rule 229 (func_push_scope -> LPAREN .)
    SHORT           reduce using rule 229 (func_push_scope -> LPAREN .)
    INT             reduce using rule 229 (func_push_scope -> LPAREN .)
    LONG            reduce using rule 229 (func_push_scope -> LPAREN .)
    SIGNED          reduce using rule 229 (func_push_scope -> LPAREN .)
    UNSIGNED        reduce using rule 229 (func_push_scope -> LPAREN .)
    FLOAT           reduce using rule 229 (func_push_scope -> LPAREN .)
    DOUBLE          reduce using rule 229 (func_push_scope -> LPAREN .)
    VOID            reduce using rule 229 (func_push_scope -> LPAREN .)
    STRING          reduce using rule 229 (func_push_scope -> LPAREN .)
    AUTO            reduce using rule 229 (func_push_scope -> LPAREN .)
    TYPE            reduce using rule 229 (func_push_scope -> LPAREN .)
    CLASS           reduce using rule 229 (func_push_scope -> LPAREN .)
    STRUCT          reduce using rule 229 (func_push_scope -> LPAREN .)
    RPAREN          reduce using rule 229 (func_push_scope -> LPAREN .)
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    THIS            shift and go to state 144
    LPAREN          shift and go to state 148
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    expression_list                shift and go to state 149
    assignment_expression          shift and go to state 150
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    cast_expression                shift and go to state 126
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    logical_AND_expression         shift and go to state 114
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    inclusive_OR_expression        shift and go to state 115
    literal                        shift and go to state 143
    exclusive_OR_expression        shift and go to state 116
    AND_expression                 shift and go to state 117
    equality_expression            shift and go to state 118
    relational_expression          shift and go to state 119
    shift_expression               shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 122
    pm_expression                  shift and go to state 125

state 70

    (280) initializer -> EQUAL . assignment_expression
    (281) initializer -> EQUAL . LCPAREN initializer_list RCPAREN
    (282) initializer -> EQUAL . LCPAREN initializer_list COMMA RCPAREN
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LCPAREN         shift and go to state 154
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    THIS            shift and go to state 144
    LPAREN          shift and go to state 148
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    assignment_expression          shift and go to state 153
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    cast_expression                shift and go to state 126
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    logical_AND_expression         shift and go to state 114
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    inclusive_OR_expression        shift and go to state 115
    literal                        shift and go to state 143
    exclusive_OR_expression        shift and go to state 116
    AND_expression                 shift and go to state 117
    equality_expression            shift and go to state 118
    relational_expression          shift and go to state 119
    shift_expression               shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 122
    pm_expression                  shift and go to state 125

state 71

    (116) declarator -> unary2_operator declarator .
    (117) declarator -> declarator . LSPAREN constant_expression RSPAREN
    (118) declarator -> declarator . LSPAREN RSPAREN

    LSPAREN         reduce using rule 116 (declarator -> unary2_operator declarator .)
    LPAREN          reduce using rule 116 (declarator -> unary2_operator declarator .)
    EQUAL           reduce using rule 116 (declarator -> unary2_operator declarator .)
    SEMICOLON       reduce using rule 116 (declarator -> unary2_operator declarator .)
    COMMA           reduce using rule 116 (declarator -> unary2_operator declarator .)
    RTEMPLATE       reduce using rule 116 (declarator -> unary2_operator declarator .)
    RPAREN          reduce using rule 116 (declarator -> unary2_operator declarator .)

  ! LSPAREN         [ shift and go to state 67 ]


state 72

    (128) name -> DOUBLEBNOP IDENTIFIER .

    LSPAREN         reduce using rule 128 (name -> DOUBLEBNOP IDENTIFIER .)
    LPAREN          reduce using rule 128 (name -> DOUBLEBNOP IDENTIFIER .)
    EQUAL           reduce using rule 128 (name -> DOUBLEBNOP IDENTIFIER .)
    SEMICOLON       reduce using rule 128 (name -> DOUBLEBNOP IDENTIFIER .)
    COMMA           reduce using rule 128 (name -> DOUBLEBNOP IDENTIFIER .)
    DOT             reduce using rule 128 (name -> DOUBLEBNOP IDENTIFIER .)
    ARROW           reduce using rule 128 (name -> DOUBLEBNOP IDENTIFIER .)
    DPLUSOP         reduce using rule 128 (name -> DOUBLEBNOP IDENTIFIER .)
    DMINUSOP        reduce using rule 128 (name -> DOUBLEBNOP IDENTIFIER .)
    LTEMPLATE       reduce using rule 128 (name -> DOUBLEBNOP IDENTIFIER .)
    DOTSTAR         reduce using rule 128 (name -> DOUBLEBNOP IDENTIFIER .)
    ARROWSTAR       reduce using rule 128 (name -> DOUBLEBNOP IDENTIFIER .)
    MULTOP          reduce using rule 128 (name -> DOUBLEBNOP IDENTIFIER .)
    DIVOP           reduce using rule 128 (name -> DOUBLEBNOP IDENTIFIER .)
    MODOP           reduce using rule 128 (name -> DOUBLEBNOP IDENTIFIER .)
    PLUSOP          reduce using rule 128 (name -> DOUBLEBNOP IDENTIFIER .)
    MINUSOP         reduce using rule 128 (name -> DOUBLEBNOP IDENTIFIER .)
    LSHIFT          reduce using rule 128 (name -> DOUBLEBNOP IDENTIFIER .)
    RSHIFT          reduce using rule 128 (name -> DOUBLEBNOP IDENTIFIER .)
    LTCOMP          reduce using rule 128 (name -> DOUBLEBNOP IDENTIFIER .)
    GTCOMP          reduce using rule 128 (name -> DOUBLEBNOP IDENTIFIER .)
    LTECOMP         reduce using rule 128 (name -> DOUBLEBNOP IDENTIFIER .)
    GTECOMP         reduce using rule 128 (name -> DOUBLEBNOP IDENTIFIER .)
    EQCOMP          reduce using rule 128 (name -> DOUBLEBNOP IDENTIFIER .)
    NEQCOMP         reduce using rule 128 (name -> DOUBLEBNOP IDENTIFIER .)
    BANDOP          reduce using rule 128 (name -> DOUBLEBNOP IDENTIFIER .)
    XOROP           reduce using rule 128 (name -> DOUBLEBNOP IDENTIFIER .)
    OROP            reduce using rule 128 (name -> DOUBLEBNOP IDENTIFIER .)
    ANDOP           reduce using rule 128 (name -> DOUBLEBNOP IDENTIFIER .)
    QUESMARK        reduce using rule 128 (name -> DOUBLEBNOP IDENTIFIER .)
    RSPAREN         reduce using rule 128 (name -> DOUBLEBNOP IDENTIFIER .)
    MULTEQOP        reduce using rule 128 (name -> DOUBLEBNOP IDENTIFIER .)
    DIVEQOP         reduce using rule 128 (name -> DOUBLEBNOP IDENTIFIER .)
    MODEQOP         reduce using rule 128 (name -> DOUBLEBNOP IDENTIFIER .)
    PLUSEQOP        reduce using rule 128 (name -> DOUBLEBNOP IDENTIFIER .)
    MINUSEQOP       reduce using rule 128 (name -> DOUBLEBNOP IDENTIFIER .)
    LSHIFTEQOP      reduce using rule 128 (name -> DOUBLEBNOP IDENTIFIER .)
    RSHIFTEQOP      reduce using rule 128 (name -> DOUBLEBNOP IDENTIFIER .)
    BANDEQOP        reduce using rule 128 (name -> DOUBLEBNOP IDENTIFIER .)
    BOREQOP         reduce using rule 128 (name -> DOUBLEBNOP IDENTIFIER .)
    RPAREN          reduce using rule 128 (name -> DOUBLEBNOP IDENTIFIER .)
    RTEMPLATE       reduce using rule 128 (name -> DOUBLEBNOP IDENTIFIER .)
    RCPAREN         reduce using rule 128 (name -> DOUBLEBNOP IDENTIFIER .)
    COLON           reduce using rule 128 (name -> DOUBLEBNOP IDENTIFIER .)


state 73

    (187) complex_type_specifier -> class_key IDENTIFIER .
    (188) complex_type_specifier -> class_key IDENTIFIER . template_class_name
    (165) template_class_name -> . LTEMPLATE template_arg_list RTEMPLATE

    IDENTIFIER      reduce using rule 187 (complex_type_specifier -> class_key IDENTIFIER .)
    DOUBLEBNOP      reduce using rule 187 (complex_type_specifier -> class_key IDENTIFIER .)
    MULTOP          reduce using rule 187 (complex_type_specifier -> class_key IDENTIFIER .)
    BANDOP          reduce using rule 187 (complex_type_specifier -> class_key IDENTIFIER .)
    LSPAREN         reduce using rule 187 (complex_type_specifier -> class_key IDENTIFIER .)
    SEMICOLON       reduce using rule 187 (complex_type_specifier -> class_key IDENTIFIER .)
    RTEMPLATE       reduce using rule 187 (complex_type_specifier -> class_key IDENTIFIER .)
    COMMA           reduce using rule 187 (complex_type_specifier -> class_key IDENTIFIER .)
    RPAREN          reduce using rule 187 (complex_type_specifier -> class_key IDENTIFIER .)
    LPAREN          reduce using rule 187 (complex_type_specifier -> class_key IDENTIFIER .)
    DOTSTAR         reduce using rule 187 (complex_type_specifier -> class_key IDENTIFIER .)
    ARROWSTAR       reduce using rule 187 (complex_type_specifier -> class_key IDENTIFIER .)
    DIVOP           reduce using rule 187 (complex_type_specifier -> class_key IDENTIFIER .)
    MODOP           reduce using rule 187 (complex_type_specifier -> class_key IDENTIFIER .)
    PLUSOP          reduce using rule 187 (complex_type_specifier -> class_key IDENTIFIER .)
    MINUSOP         reduce using rule 187 (complex_type_specifier -> class_key IDENTIFIER .)
    LSHIFT          reduce using rule 187 (complex_type_specifier -> class_key IDENTIFIER .)
    RSHIFT          reduce using rule 187 (complex_type_specifier -> class_key IDENTIFIER .)
    LTCOMP          reduce using rule 187 (complex_type_specifier -> class_key IDENTIFIER .)
    GTCOMP          reduce using rule 187 (complex_type_specifier -> class_key IDENTIFIER .)
    LTECOMP         reduce using rule 187 (complex_type_specifier -> class_key IDENTIFIER .)
    GTECOMP         reduce using rule 187 (complex_type_specifier -> class_key IDENTIFIER .)
    EQCOMP          reduce using rule 187 (complex_type_specifier -> class_key IDENTIFIER .)
    NEQCOMP         reduce using rule 187 (complex_type_specifier -> class_key IDENTIFIER .)
    XOROP           reduce using rule 187 (complex_type_specifier -> class_key IDENTIFIER .)
    OROP            reduce using rule 187 (complex_type_specifier -> class_key IDENTIFIER .)
    ANDOP           reduce using rule 187 (complex_type_specifier -> class_key IDENTIFIER .)
    QUESMARK        reduce using rule 187 (complex_type_specifier -> class_key IDENTIFIER .)
    RSPAREN         reduce using rule 187 (complex_type_specifier -> class_key IDENTIFIER .)
    EQUAL           reduce using rule 187 (complex_type_specifier -> class_key IDENTIFIER .)
    MULTEQOP        reduce using rule 187 (complex_type_specifier -> class_key IDENTIFIER .)
    DIVEQOP         reduce using rule 187 (complex_type_specifier -> class_key IDENTIFIER .)
    MODEQOP         reduce using rule 187 (complex_type_specifier -> class_key IDENTIFIER .)
    PLUSEQOP        reduce using rule 187 (complex_type_specifier -> class_key IDENTIFIER .)
    MINUSEQOP       reduce using rule 187 (complex_type_specifier -> class_key IDENTIFIER .)
    LSHIFTEQOP      reduce using rule 187 (complex_type_specifier -> class_key IDENTIFIER .)
    RSHIFTEQOP      reduce using rule 187 (complex_type_specifier -> class_key IDENTIFIER .)
    BANDEQOP        reduce using rule 187 (complex_type_specifier -> class_key IDENTIFIER .)
    BOREQOP         reduce using rule 187 (complex_type_specifier -> class_key IDENTIFIER .)
    RCPAREN         reduce using rule 187 (complex_type_specifier -> class_key IDENTIFIER .)
    COLON           reduce using rule 187 (complex_type_specifier -> class_key IDENTIFIER .)
    LTEMPLATE       shift and go to state 101

    template_class_name            shift and go to state 99

state 74

    (288) asm_declaration -> ASM LPAREN STRING_L . RPAREN SEMICOLON

    RPAREN          shift and go to state 155


state 75

    (205) class_define_specifier -> class_head LCPAREN member_list . RCPAREN
    (209) member_list -> member_list . access_list
    (213) access_list -> . access_specifier COLON member_access_list
    (214) access_list -> . access_specifier COLON
    (210) access_specifier -> . PRIVATE
    (211) access_specifier -> . PROTECTED
    (212) access_specifier -> . PUBLIC

    RCPAREN         shift and go to state 156
    PRIVATE         shift and go to state 86
    PROTECTED       shift and go to state 87
    PUBLIC          shift and go to state 88

    access_list                    shift and go to state 157
    access_specifier               shift and go to state 80

state 76

    (206) class_define_specifier -> class_head LCPAREN RCPAREN .

    SEMICOLON       reduce using rule 206 (class_define_specifier -> class_head LCPAREN RCPAREN .)


state 77

    (207) member_list -> member_access_list .

    RCPAREN         reduce using rule 207 (member_list -> member_access_list .)
    PRIVATE         reduce using rule 207 (member_list -> member_access_list .)
    PROTECTED       reduce using rule 207 (member_list -> member_access_list .)
    PUBLIC          reduce using rule 207 (member_list -> member_access_list .)


state 78

    (208) member_list -> access_list .

    RCPAREN         reduce using rule 208 (member_list -> access_list .)
    PRIVATE         reduce using rule 208 (member_list -> access_list .)
    PROTECTED       reduce using rule 208 (member_list -> access_list .)
    PUBLIC          reduce using rule 208 (member_list -> access_list .)


state 79

    (215) member_access_list -> member_declaration . member_access_list
    (216) member_access_list -> member_declaration .
    (215) member_access_list -> . member_declaration member_access_list
    (216) member_access_list -> . member_declaration
    (217) member_declaration -> . type_specifier_ member_declarator_list SEMICOLON
    (218) member_declaration -> . member_declarator_list SEMICOLON
    (219) member_declaration -> . type_specifier_ SEMICOLON
    (220) member_declaration -> . SEMICOLON
    (221) member_declaration -> . function_definition
    (222) member_declaration -> . class_define_specifier SEMICOLON
    (170) type_specifier_ -> . CONST type_specifier
    (171) type_specifier_ -> . type_specifier
    (223) member_declarator_list -> . member_declarator
    (224) member_declarator_list -> . member_declarator_list COMMA member_declarator
    (227) function_definition -> . type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope
    (205) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (206) class_define_specifier -> . class_head LCPAREN RCPAREN
    (174) type_specifier -> . simple_type_name
    (175) type_specifier -> . complex_type_specifier
    (225) member_declarator -> . declarator pure_specifier
    (226) member_declarator -> . declarator
    (192) class_head -> . class_key IDENTIFIER base_spec
    (193) class_head -> . class_key IDENTIFIER
    (176) simple_type_name -> . CHAR
    (177) simple_type_name -> . SHORT
    (178) simple_type_name -> . INT
    (179) simple_type_name -> . LONG
    (180) simple_type_name -> . SIGNED
    (181) simple_type_name -> . UNSIGNED
    (182) simple_type_name -> . FLOAT
    (183) simple_type_name -> . DOUBLE
    (184) simple_type_name -> . VOID
    (185) simple_type_name -> . STRING
    (186) simple_type_name -> . AUTO
    (187) complex_type_specifier -> . class_key IDENTIFIER
    (188) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (189) complex_type_specifier -> . TYPE IDENTIFIER
    (190) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (115) declarator -> . name
    (116) declarator -> . unary2_operator declarator
    (117) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (118) declarator -> . declarator LSPAREN RSPAREN
    (203) class_key -> . CLASS
    (204) class_key -> . STRUCT
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP

    RCPAREN         reduce using rule 216 (member_access_list -> member_declaration .)
    PRIVATE         reduce using rule 216 (member_access_list -> member_declaration .)
    PROTECTED       reduce using rule 216 (member_access_list -> member_declaration .)
    PUBLIC          reduce using rule 216 (member_access_list -> member_declaration .)
    SEMICOLON       shift and go to state 83
    CONST           shift and go to state 16
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53

    member_declaration             shift and go to state 79
    member_access_list             shift and go to state 158
    type_specifier_                shift and go to state 81
    member_declarator_list         shift and go to state 82
    function_definition            shift and go to state 84
    class_define_specifier         shift and go to state 85
    type_specifier                 shift and go to state 17
    member_declarator              shift and go to state 89
    declarator                     shift and go to state 90
    class_head                     shift and go to state 19
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 24
    name                           shift and go to state 48
    unary2_operator                shift and go to state 49

state 80

    (213) access_list -> access_specifier . COLON member_access_list
    (214) access_list -> access_specifier . COLON

    COLON           shift and go to state 159


state 81

    (217) member_declaration -> type_specifier_ . member_declarator_list SEMICOLON
    (219) member_declaration -> type_specifier_ . SEMICOLON
    (227) function_definition -> type_specifier_ . declarator func_push_scope arg_list RPAREN fct_body pop_scope
    (223) member_declarator_list -> . member_declarator
    (224) member_declarator_list -> . member_declarator_list COMMA member_declarator
    (115) declarator -> . name
    (116) declarator -> . unary2_operator declarator
    (117) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (118) declarator -> . declarator LSPAREN RSPAREN
    (225) member_declarator -> . declarator pure_specifier
    (226) member_declarator -> . declarator
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP

    SEMICOLON       shift and go to state 161
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53

    member_declarator_list         shift and go to state 160
    declarator                     shift and go to state 162
    member_declarator              shift and go to state 89
    name                           shift and go to state 48
    unary2_operator                shift and go to state 49

state 82

    (218) member_declaration -> member_declarator_list . SEMICOLON
    (224) member_declarator_list -> member_declarator_list . COMMA member_declarator

    SEMICOLON       shift and go to state 163
    COMMA           shift and go to state 164


state 83

    (220) member_declaration -> SEMICOLON .

    SEMICOLON       reduce using rule 220 (member_declaration -> SEMICOLON .)
    CONST           reduce using rule 220 (member_declaration -> SEMICOLON .)
    CHAR            reduce using rule 220 (member_declaration -> SEMICOLON .)
    SHORT           reduce using rule 220 (member_declaration -> SEMICOLON .)
    INT             reduce using rule 220 (member_declaration -> SEMICOLON .)
    LONG            reduce using rule 220 (member_declaration -> SEMICOLON .)
    SIGNED          reduce using rule 220 (member_declaration -> SEMICOLON .)
    UNSIGNED        reduce using rule 220 (member_declaration -> SEMICOLON .)
    FLOAT           reduce using rule 220 (member_declaration -> SEMICOLON .)
    DOUBLE          reduce using rule 220 (member_declaration -> SEMICOLON .)
    VOID            reduce using rule 220 (member_declaration -> SEMICOLON .)
    STRING          reduce using rule 220 (member_declaration -> SEMICOLON .)
    AUTO            reduce using rule 220 (member_declaration -> SEMICOLON .)
    TYPE            reduce using rule 220 (member_declaration -> SEMICOLON .)
    CLASS           reduce using rule 220 (member_declaration -> SEMICOLON .)
    STRUCT          reduce using rule 220 (member_declaration -> SEMICOLON .)
    IDENTIFIER      reduce using rule 220 (member_declaration -> SEMICOLON .)
    DOUBLEBNOP      reduce using rule 220 (member_declaration -> SEMICOLON .)
    MULTOP          reduce using rule 220 (member_declaration -> SEMICOLON .)
    BANDOP          reduce using rule 220 (member_declaration -> SEMICOLON .)
    RCPAREN         reduce using rule 220 (member_declaration -> SEMICOLON .)
    PRIVATE         reduce using rule 220 (member_declaration -> SEMICOLON .)
    PROTECTED       reduce using rule 220 (member_declaration -> SEMICOLON .)
    PUBLIC          reduce using rule 220 (member_declaration -> SEMICOLON .)


state 84

    (221) member_declaration -> function_definition .

    SEMICOLON       reduce using rule 221 (member_declaration -> function_definition .)
    CONST           reduce using rule 221 (member_declaration -> function_definition .)
    CHAR            reduce using rule 221 (member_declaration -> function_definition .)
    SHORT           reduce using rule 221 (member_declaration -> function_definition .)
    INT             reduce using rule 221 (member_declaration -> function_definition .)
    LONG            reduce using rule 221 (member_declaration -> function_definition .)
    SIGNED          reduce using rule 221 (member_declaration -> function_definition .)
    UNSIGNED        reduce using rule 221 (member_declaration -> function_definition .)
    FLOAT           reduce using rule 221 (member_declaration -> function_definition .)
    DOUBLE          reduce using rule 221 (member_declaration -> function_definition .)
    VOID            reduce using rule 221 (member_declaration -> function_definition .)
    STRING          reduce using rule 221 (member_declaration -> function_definition .)
    AUTO            reduce using rule 221 (member_declaration -> function_definition .)
    TYPE            reduce using rule 221 (member_declaration -> function_definition .)
    CLASS           reduce using rule 221 (member_declaration -> function_definition .)
    STRUCT          reduce using rule 221 (member_declaration -> function_definition .)
    IDENTIFIER      reduce using rule 221 (member_declaration -> function_definition .)
    DOUBLEBNOP      reduce using rule 221 (member_declaration -> function_definition .)
    MULTOP          reduce using rule 221 (member_declaration -> function_definition .)
    BANDOP          reduce using rule 221 (member_declaration -> function_definition .)
    RCPAREN         reduce using rule 221 (member_declaration -> function_definition .)
    PRIVATE         reduce using rule 221 (member_declaration -> function_definition .)
    PROTECTED       reduce using rule 221 (member_declaration -> function_definition .)
    PUBLIC          reduce using rule 221 (member_declaration -> function_definition .)


state 85

    (222) member_declaration -> class_define_specifier . SEMICOLON

    SEMICOLON       shift and go to state 165


state 86

    (210) access_specifier -> PRIVATE .

    COLON           reduce using rule 210 (access_specifier -> PRIVATE .)
    CLASS           reduce using rule 210 (access_specifier -> PRIVATE .)
    STRUCT          reduce using rule 210 (access_specifier -> PRIVATE .)


state 87

    (211) access_specifier -> PROTECTED .

    COLON           reduce using rule 211 (access_specifier -> PROTECTED .)
    CLASS           reduce using rule 211 (access_specifier -> PROTECTED .)
    STRUCT          reduce using rule 211 (access_specifier -> PROTECTED .)


state 88

    (212) access_specifier -> PUBLIC .

    COLON           reduce using rule 212 (access_specifier -> PUBLIC .)
    CLASS           reduce using rule 212 (access_specifier -> PUBLIC .)
    STRUCT          reduce using rule 212 (access_specifier -> PUBLIC .)


state 89

    (223) member_declarator_list -> member_declarator .

    SEMICOLON       reduce using rule 223 (member_declarator_list -> member_declarator .)
    COMMA           reduce using rule 223 (member_declarator_list -> member_declarator .)


state 90

    (225) member_declarator -> declarator . pure_specifier
    (226) member_declarator -> declarator .
    (117) declarator -> declarator . LSPAREN constant_expression RSPAREN
    (118) declarator -> declarator . LSPAREN RSPAREN
    (191) pure_specifier -> . EQUAL NUMBER

    SEMICOLON       reduce using rule 226 (member_declarator -> declarator .)
    COMMA           reduce using rule 226 (member_declarator -> declarator .)
    LSPAREN         shift and go to state 67
    EQUAL           shift and go to state 167

    pure_specifier                 shift and go to state 166

state 91

    (273) template_declaration -> TEMPLATE LTEMPLATE template_argument_list . RTEMPLATE declaration
    (275) template_argument_list -> template_argument_list . COMMA argument_declaration

    RTEMPLATE       shift and go to state 168
    COMMA           shift and go to state 169


state 92

    (274) template_argument_list -> argument_declaration .

    RTEMPLATE       reduce using rule 274 (template_argument_list -> argument_declaration .)
    COMMA           reduce using rule 274 (template_argument_list -> argument_declaration .)


state 93

    (123) argument_declaration -> type_specifier_ . declarator
    (124) argument_declaration -> type_specifier_ . declarator EQUAL expression
    (125) argument_declaration -> type_specifier_ . abstract_declarator
    (126) argument_declaration -> type_specifier_ .
    (115) declarator -> . name
    (116) declarator -> . unary2_operator declarator
    (117) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (118) declarator -> . declarator LSPAREN RSPAREN
    (109) abstract_declarator -> . unary2_operator
    (110) abstract_declarator -> . unary2_operator abstract_declarator
    (111) abstract_declarator -> . LSPAREN constant_expression RSPAREN
    (112) abstract_declarator -> . abstract_declarator LSPAREN constant_expression RSPAREN
    (113) abstract_declarator -> . LSPAREN RSPAREN
    (114) abstract_declarator -> . abstract_declarator LSPAREN RSPAREN
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP

    RTEMPLATE       reduce using rule 126 (argument_declaration -> type_specifier_ .)
    COMMA           reduce using rule 126 (argument_declaration -> type_specifier_ .)
    RPAREN          reduce using rule 126 (argument_declaration -> type_specifier_ .)
    LSPAREN         shift and go to state 97
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53

    declarator                     shift and go to state 170
    abstract_declarator            shift and go to state 171
    name                           shift and go to state 48
    unary2_operator                shift and go to state 172

state 94

    (172) typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator . IDENTIFIER SEMICOLON
    (112) abstract_declarator -> abstract_declarator . LSPAREN constant_expression RSPAREN
    (114) abstract_declarator -> abstract_declarator . LSPAREN RSPAREN

    IDENTIFIER      shift and go to state 173
    LSPAREN         shift and go to state 174


state 95

    (173) typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 175


state 96

    (109) abstract_declarator -> unary2_operator .
    (110) abstract_declarator -> unary2_operator . abstract_declarator
    (109) abstract_declarator -> . unary2_operator
    (110) abstract_declarator -> . unary2_operator abstract_declarator
    (111) abstract_declarator -> . LSPAREN constant_expression RSPAREN
    (112) abstract_declarator -> . abstract_declarator LSPAREN constant_expression RSPAREN
    (113) abstract_declarator -> . LSPAREN RSPAREN
    (114) abstract_declarator -> . abstract_declarator LSPAREN RSPAREN
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP

    IDENTIFIER      reduce using rule 109 (abstract_declarator -> unary2_operator .)
    LSPAREN         reduce using rule 109 (abstract_declarator -> unary2_operator .)
    RTEMPLATE       reduce using rule 109 (abstract_declarator -> unary2_operator .)
    COMMA           reduce using rule 109 (abstract_declarator -> unary2_operator .)
    RPAREN          reduce using rule 109 (abstract_declarator -> unary2_operator .)
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53

  ! LSPAREN         [ shift and go to state 97 ]

    unary2_operator                shift and go to state 96
    abstract_declarator            shift and go to state 176

state 97

    (111) abstract_declarator -> LSPAREN . constant_expression RSPAREN
    (113) abstract_declarator -> LSPAREN . RSPAREN
    (12) constant_expression -> . conditional_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR

    RSPAREN         shift and go to state 178
    LPAREN          shift and go to state 128
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    THIS            shift and go to state 144
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    constant_expression            shift and go to state 177
    conditional_expression         shift and go to state 112
    logical_OR_expression          shift and go to state 113
    logical_AND_expression         shift and go to state 114
    inclusive_OR_expression        shift and go to state 115
    exclusive_OR_expression        shift and go to state 116
    AND_expression                 shift and go to state 117
    equality_expression            shift and go to state 118
    relational_expression          shift and go to state 119
    shift_expression               shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 122
    pm_expression                  shift and go to state 125
    cast_expression                shift and go to state 126
    unary_expression               shift and go to state 127
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    literal                        shift and go to state 143

state 98

    (192) class_head -> class_key IDENTIFIER base_spec .

    LCPAREN         reduce using rule 192 (class_head -> class_key IDENTIFIER base_spec .)


state 99

    (188) complex_type_specifier -> class_key IDENTIFIER template_class_name .

    IDENTIFIER      reduce using rule 188 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    DOUBLEBNOP      reduce using rule 188 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    MULTOP          reduce using rule 188 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    BANDOP          reduce using rule 188 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    LSPAREN         reduce using rule 188 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    SEMICOLON       reduce using rule 188 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    RTEMPLATE       reduce using rule 188 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    COMMA           reduce using rule 188 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    RPAREN          reduce using rule 188 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    LPAREN          reduce using rule 188 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    DOTSTAR         reduce using rule 188 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    ARROWSTAR       reduce using rule 188 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    DIVOP           reduce using rule 188 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    MODOP           reduce using rule 188 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    PLUSOP          reduce using rule 188 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    MINUSOP         reduce using rule 188 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    LSHIFT          reduce using rule 188 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    RSHIFT          reduce using rule 188 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    LTCOMP          reduce using rule 188 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    GTCOMP          reduce using rule 188 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    LTECOMP         reduce using rule 188 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    GTECOMP         reduce using rule 188 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    EQCOMP          reduce using rule 188 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    NEQCOMP         reduce using rule 188 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    XOROP           reduce using rule 188 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    OROP            reduce using rule 188 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    ANDOP           reduce using rule 188 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    QUESMARK        reduce using rule 188 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    RSPAREN         reduce using rule 188 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    EQUAL           reduce using rule 188 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    MULTEQOP        reduce using rule 188 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    DIVEQOP         reduce using rule 188 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    MODEQOP         reduce using rule 188 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    PLUSEQOP        reduce using rule 188 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    MINUSEQOP       reduce using rule 188 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    LSHIFTEQOP      reduce using rule 188 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    RSHIFTEQOP      reduce using rule 188 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    BANDEQOP        reduce using rule 188 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    BOREQOP         reduce using rule 188 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    RCPAREN         reduce using rule 188 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    COLON           reduce using rule 188 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)


state 100

    (194) base_spec -> COLON . base_list
    (195) base_list -> . base_specifier
    (196) base_list -> . base_list COMMA base_specifier
    (197) base_specifier -> . class_key IDENTIFIER
    (198) base_specifier -> . class_key IDENTIFIER template_class_name
    (199) base_specifier -> . IDENTIFIER
    (200) base_specifier -> . IDENTIFIER template_class_name
    (201) base_specifier -> . access_specifier class_key IDENTIFIER
    (202) base_specifier -> . access_specifier class_key IDENTIFIER template_class_name
    (203) class_key -> . CLASS
    (204) class_key -> . STRUCT
    (210) access_specifier -> . PRIVATE
    (211) access_specifier -> . PROTECTED
    (212) access_specifier -> . PUBLIC

    IDENTIFIER      shift and go to state 182
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38
    PRIVATE         shift and go to state 86
    PROTECTED       shift and go to state 87
    PUBLIC          shift and go to state 88

    base_list                      shift and go to state 179
    base_specifier                 shift and go to state 180
    class_key                      shift and go to state 181
    access_specifier               shift and go to state 183

state 101

    (165) template_class_name -> LTEMPLATE . template_arg_list RTEMPLATE
    (166) template_arg_list -> . type_name
    (167) template_arg_list -> . template_arg_list COMMA type_name
    (168) type_name -> . type_specifier_ abstract_declarator
    (169) type_name -> . type_specifier_
    (170) type_specifier_ -> . CONST type_specifier
    (171) type_specifier_ -> . type_specifier
    (174) type_specifier -> . simple_type_name
    (175) type_specifier -> . complex_type_specifier
    (176) simple_type_name -> . CHAR
    (177) simple_type_name -> . SHORT
    (178) simple_type_name -> . INT
    (179) simple_type_name -> . LONG
    (180) simple_type_name -> . SIGNED
    (181) simple_type_name -> . UNSIGNED
    (182) simple_type_name -> . FLOAT
    (183) simple_type_name -> . DOUBLE
    (184) simple_type_name -> . VOID
    (185) simple_type_name -> . STRING
    (186) simple_type_name -> . AUTO
    (187) complex_type_specifier -> . class_key IDENTIFIER
    (188) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (189) complex_type_specifier -> . TYPE IDENTIFIER
    (190) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (203) class_key -> . CLASS
    (204) class_key -> . STRUCT

    CONST           shift and go to state 16
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38

    template_arg_list              shift and go to state 184
    type_name                      shift and go to state 185
    type_specifier_                shift and go to state 186
    type_specifier                 shift and go to state 17
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 56

state 102

    (190) complex_type_specifier -> TYPE IDENTIFIER template_class_name .

    IDENTIFIER      reduce using rule 190 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    DOUBLEBNOP      reduce using rule 190 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    MULTOP          reduce using rule 190 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    BANDOP          reduce using rule 190 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    LSPAREN         reduce using rule 190 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    SEMICOLON       reduce using rule 190 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    RTEMPLATE       reduce using rule 190 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    COMMA           reduce using rule 190 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    RPAREN          reduce using rule 190 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    LPAREN          reduce using rule 190 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    DOTSTAR         reduce using rule 190 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    ARROWSTAR       reduce using rule 190 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    DIVOP           reduce using rule 190 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    MODOP           reduce using rule 190 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    PLUSOP          reduce using rule 190 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    MINUSOP         reduce using rule 190 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    LSHIFT          reduce using rule 190 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    RSHIFT          reduce using rule 190 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    LTCOMP          reduce using rule 190 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    GTCOMP          reduce using rule 190 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    LTECOMP         reduce using rule 190 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    GTECOMP         reduce using rule 190 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    EQCOMP          reduce using rule 190 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    NEQCOMP         reduce using rule 190 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    XOROP           reduce using rule 190 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    OROP            reduce using rule 190 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    ANDOP           reduce using rule 190 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    QUESMARK        reduce using rule 190 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    RSPAREN         reduce using rule 190 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    EQUAL           reduce using rule 190 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    MULTEQOP        reduce using rule 190 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    DIVEQOP         reduce using rule 190 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    MODEQOP         reduce using rule 190 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    PLUSEQOP        reduce using rule 190 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    MINUSEQOP       reduce using rule 190 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    LSHIFTEQOP      reduce using rule 190 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    RSHIFTEQOP      reduce using rule 190 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    BANDEQOP        reduce using rule 190 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    BOREQOP         reduce using rule 190 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    RCPAREN         reduce using rule 190 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    COLON           reduce using rule 190 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)


state 103

    (4) control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .

    HASHTAG         reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    CONST           reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    ASM             reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    TEMPLATE        reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    TYPEDEF         reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    CHAR            reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    SHORT           reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    INT             reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    LONG            reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    SIGNED          reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    UNSIGNED        reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    FLOAT           reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    DOUBLE          reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    VOID            reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    STRING          reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    AUTO            reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    TYPE            reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    CLASS           reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    STRUCT          reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)


state 104

    (277) declarator_list -> declarator_list COMMA init_declarator .

    SEMICOLON       reduce using rule 277 (declarator_list -> declarator_list COMMA init_declarator .)
    COMMA           reduce using rule 277 (declarator_list -> declarator_list COMMA init_declarator .)


state 105

    (278) init_declarator -> declarator . initializer
    (279) init_declarator -> declarator .
    (117) declarator -> declarator . LSPAREN constant_expression RSPAREN
    (118) declarator -> declarator . LSPAREN RSPAREN
    (280) initializer -> . EQUAL assignment_expression
    (281) initializer -> . EQUAL LCPAREN initializer_list RCPAREN
    (282) initializer -> . EQUAL LCPAREN initializer_list COMMA RCPAREN
    (283) initializer -> . LPAREN expression_list RPAREN

    SEMICOLON       reduce using rule 279 (init_declarator -> declarator .)
    COMMA           reduce using rule 279 (init_declarator -> declarator .)
    LSPAREN         shift and go to state 67
    EQUAL           shift and go to state 70
    LPAREN          shift and go to state 187

    initializer                    shift and go to state 68

state 106

    (227) function_definition -> type_specifier_ declarator func_push_scope arg_list . RPAREN fct_body pop_scope
    (228) function_decl -> type_specifier_ declarator func_push_scope arg_list . RPAREN SEMICOLON pop_scope

    RPAREN          shift and go to state 188


state 107

    (119) arg_list -> argument_declaration_list .

    RPAREN          reduce using rule 119 (arg_list -> argument_declaration_list .)


state 108

    (120) arg_list -> empty .

    RPAREN          reduce using rule 120 (arg_list -> empty .)


state 109

    (121) argument_declaration_list -> argument_declaration .
    (122) argument_declaration_list -> argument_declaration . COMMA argument_declaration_list

    RPAREN          reduce using rule 121 (argument_declaration_list -> argument_declaration .)
    COMMA           shift and go to state 189


state 110

    (117) declarator -> declarator LSPAREN constant_expression . RSPAREN

    RSPAREN         shift and go to state 190


state 111

    (118) declarator -> declarator LSPAREN RSPAREN .

    LSPAREN         reduce using rule 118 (declarator -> declarator LSPAREN RSPAREN .)
    LPAREN          reduce using rule 118 (declarator -> declarator LSPAREN RSPAREN .)
    EQUAL           reduce using rule 118 (declarator -> declarator LSPAREN RSPAREN .)
    SEMICOLON       reduce using rule 118 (declarator -> declarator LSPAREN RSPAREN .)
    COMMA           reduce using rule 118 (declarator -> declarator LSPAREN RSPAREN .)
    RTEMPLATE       reduce using rule 118 (declarator -> declarator LSPAREN RSPAREN .)
    RPAREN          reduce using rule 118 (declarator -> declarator LSPAREN RSPAREN .)


state 112

    (12) constant_expression -> conditional_expression .

    RSPAREN         reduce using rule 12 (constant_expression -> conditional_expression .)
    COLON           reduce using rule 12 (constant_expression -> conditional_expression .)


state 113

    (13) conditional_expression -> logical_OR_expression .
    (14) conditional_expression -> logical_OR_expression . QUESMARK expression COLON conditional_expression
    (16) logical_OR_expression -> logical_OR_expression . OROP logical_AND_expression

    RSPAREN         reduce using rule 13 (conditional_expression -> logical_OR_expression .)
    RPAREN          reduce using rule 13 (conditional_expression -> logical_OR_expression .)
    COMMA           reduce using rule 13 (conditional_expression -> logical_OR_expression .)
    SEMICOLON       reduce using rule 13 (conditional_expression -> logical_OR_expression .)
    RCPAREN         reduce using rule 13 (conditional_expression -> logical_OR_expression .)
    COLON           reduce using rule 13 (conditional_expression -> logical_OR_expression .)
    RTEMPLATE       reduce using rule 13 (conditional_expression -> logical_OR_expression .)
    QUESMARK        shift and go to state 191
    OROP            shift and go to state 192


state 114

    (15) logical_OR_expression -> logical_AND_expression .
    (18) logical_AND_expression -> logical_AND_expression . ANDOP inclusive_OR_expression

    QUESMARK        reduce using rule 15 (logical_OR_expression -> logical_AND_expression .)
    OROP            reduce using rule 15 (logical_OR_expression -> logical_AND_expression .)
    RSPAREN         reduce using rule 15 (logical_OR_expression -> logical_AND_expression .)
    RPAREN          reduce using rule 15 (logical_OR_expression -> logical_AND_expression .)
    COMMA           reduce using rule 15 (logical_OR_expression -> logical_AND_expression .)
    SEMICOLON       reduce using rule 15 (logical_OR_expression -> logical_AND_expression .)
    RCPAREN         reduce using rule 15 (logical_OR_expression -> logical_AND_expression .)
    COLON           reduce using rule 15 (logical_OR_expression -> logical_AND_expression .)
    RTEMPLATE       reduce using rule 15 (logical_OR_expression -> logical_AND_expression .)
    ANDOP           shift and go to state 193


state 115

    (17) logical_AND_expression -> inclusive_OR_expression .
    (20) inclusive_OR_expression -> inclusive_OR_expression . OROP exclusive_OR_expression

    ANDOP           reduce using rule 17 (logical_AND_expression -> inclusive_OR_expression .)
    QUESMARK        reduce using rule 17 (logical_AND_expression -> inclusive_OR_expression .)
    OROP            reduce using rule 17 (logical_AND_expression -> inclusive_OR_expression .)
    RSPAREN         reduce using rule 17 (logical_AND_expression -> inclusive_OR_expression .)
    RPAREN          reduce using rule 17 (logical_AND_expression -> inclusive_OR_expression .)
    COMMA           reduce using rule 17 (logical_AND_expression -> inclusive_OR_expression .)
    SEMICOLON       reduce using rule 17 (logical_AND_expression -> inclusive_OR_expression .)
    RCPAREN         reduce using rule 17 (logical_AND_expression -> inclusive_OR_expression .)
    COLON           reduce using rule 17 (logical_AND_expression -> inclusive_OR_expression .)
    RTEMPLATE       reduce using rule 17 (logical_AND_expression -> inclusive_OR_expression .)

  ! OROP            [ shift and go to state 194 ]


state 116

    (19) inclusive_OR_expression -> exclusive_OR_expression .
    (22) exclusive_OR_expression -> exclusive_OR_expression . XOROP AND_expression

    OROP            reduce using rule 19 (inclusive_OR_expression -> exclusive_OR_expression .)
    ANDOP           reduce using rule 19 (inclusive_OR_expression -> exclusive_OR_expression .)
    QUESMARK        reduce using rule 19 (inclusive_OR_expression -> exclusive_OR_expression .)
    RSPAREN         reduce using rule 19 (inclusive_OR_expression -> exclusive_OR_expression .)
    RPAREN          reduce using rule 19 (inclusive_OR_expression -> exclusive_OR_expression .)
    COMMA           reduce using rule 19 (inclusive_OR_expression -> exclusive_OR_expression .)
    SEMICOLON       reduce using rule 19 (inclusive_OR_expression -> exclusive_OR_expression .)
    RCPAREN         reduce using rule 19 (inclusive_OR_expression -> exclusive_OR_expression .)
    COLON           reduce using rule 19 (inclusive_OR_expression -> exclusive_OR_expression .)
    RTEMPLATE       reduce using rule 19 (inclusive_OR_expression -> exclusive_OR_expression .)
    XOROP           shift and go to state 195


state 117

    (21) exclusive_OR_expression -> AND_expression .
    (24) AND_expression -> AND_expression . BANDOP equality_expression

    XOROP           reduce using rule 21 (exclusive_OR_expression -> AND_expression .)
    OROP            reduce using rule 21 (exclusive_OR_expression -> AND_expression .)
    ANDOP           reduce using rule 21 (exclusive_OR_expression -> AND_expression .)
    QUESMARK        reduce using rule 21 (exclusive_OR_expression -> AND_expression .)
    RSPAREN         reduce using rule 21 (exclusive_OR_expression -> AND_expression .)
    RPAREN          reduce using rule 21 (exclusive_OR_expression -> AND_expression .)
    COMMA           reduce using rule 21 (exclusive_OR_expression -> AND_expression .)
    SEMICOLON       reduce using rule 21 (exclusive_OR_expression -> AND_expression .)
    RCPAREN         reduce using rule 21 (exclusive_OR_expression -> AND_expression .)
    COLON           reduce using rule 21 (exclusive_OR_expression -> AND_expression .)
    RTEMPLATE       reduce using rule 21 (exclusive_OR_expression -> AND_expression .)
    BANDOP          shift and go to state 196


state 118

    (23) AND_expression -> equality_expression .
    (26) equality_expression -> equality_expression . EQCOMP relational_expression
    (27) equality_expression -> equality_expression . NEQCOMP relational_expression

    BANDOP          reduce using rule 23 (AND_expression -> equality_expression .)
    XOROP           reduce using rule 23 (AND_expression -> equality_expression .)
    OROP            reduce using rule 23 (AND_expression -> equality_expression .)
    ANDOP           reduce using rule 23 (AND_expression -> equality_expression .)
    QUESMARK        reduce using rule 23 (AND_expression -> equality_expression .)
    RSPAREN         reduce using rule 23 (AND_expression -> equality_expression .)
    RPAREN          reduce using rule 23 (AND_expression -> equality_expression .)
    COMMA           reduce using rule 23 (AND_expression -> equality_expression .)
    SEMICOLON       reduce using rule 23 (AND_expression -> equality_expression .)
    RCPAREN         reduce using rule 23 (AND_expression -> equality_expression .)
    COLON           reduce using rule 23 (AND_expression -> equality_expression .)
    RTEMPLATE       reduce using rule 23 (AND_expression -> equality_expression .)
    EQCOMP          shift and go to state 197
    NEQCOMP         shift and go to state 198


state 119

    (25) equality_expression -> relational_expression .
    (29) relational_expression -> relational_expression . LTCOMP shift_expression
    (30) relational_expression -> relational_expression . GTCOMP shift_expression
    (31) relational_expression -> relational_expression . LTECOMP shift_expression
    (32) relational_expression -> relational_expression . GTECOMP shift_expression

    EQCOMP          reduce using rule 25 (equality_expression -> relational_expression .)
    NEQCOMP         reduce using rule 25 (equality_expression -> relational_expression .)
    BANDOP          reduce using rule 25 (equality_expression -> relational_expression .)
    XOROP           reduce using rule 25 (equality_expression -> relational_expression .)
    OROP            reduce using rule 25 (equality_expression -> relational_expression .)
    ANDOP           reduce using rule 25 (equality_expression -> relational_expression .)
    QUESMARK        reduce using rule 25 (equality_expression -> relational_expression .)
    RSPAREN         reduce using rule 25 (equality_expression -> relational_expression .)
    RPAREN          reduce using rule 25 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 25 (equality_expression -> relational_expression .)
    SEMICOLON       reduce using rule 25 (equality_expression -> relational_expression .)
    RCPAREN         reduce using rule 25 (equality_expression -> relational_expression .)
    COLON           reduce using rule 25 (equality_expression -> relational_expression .)
    RTEMPLATE       reduce using rule 25 (equality_expression -> relational_expression .)
    LTCOMP          shift and go to state 199
    GTCOMP          shift and go to state 200
    LTECOMP         shift and go to state 201
    GTECOMP         shift and go to state 202


state 120

    (28) relational_expression -> shift_expression .
    (34) shift_expression -> shift_expression . LSHIFT additive_expression
    (35) shift_expression -> shift_expression . RSHIFT additive_expression

    LTCOMP          reduce using rule 28 (relational_expression -> shift_expression .)
    GTCOMP          reduce using rule 28 (relational_expression -> shift_expression .)
    LTECOMP         reduce using rule 28 (relational_expression -> shift_expression .)
    GTECOMP         reduce using rule 28 (relational_expression -> shift_expression .)
    EQCOMP          reduce using rule 28 (relational_expression -> shift_expression .)
    NEQCOMP         reduce using rule 28 (relational_expression -> shift_expression .)
    BANDOP          reduce using rule 28 (relational_expression -> shift_expression .)
    XOROP           reduce using rule 28 (relational_expression -> shift_expression .)
    OROP            reduce using rule 28 (relational_expression -> shift_expression .)
    ANDOP           reduce using rule 28 (relational_expression -> shift_expression .)
    QUESMARK        reduce using rule 28 (relational_expression -> shift_expression .)
    RSPAREN         reduce using rule 28 (relational_expression -> shift_expression .)
    RPAREN          reduce using rule 28 (relational_expression -> shift_expression .)
    COMMA           reduce using rule 28 (relational_expression -> shift_expression .)
    SEMICOLON       reduce using rule 28 (relational_expression -> shift_expression .)
    RCPAREN         reduce using rule 28 (relational_expression -> shift_expression .)
    COLON           reduce using rule 28 (relational_expression -> shift_expression .)
    RTEMPLATE       reduce using rule 28 (relational_expression -> shift_expression .)
    LSHIFT          shift and go to state 203
    RSHIFT          shift and go to state 204


state 121

    (33) shift_expression -> additive_expression .
    (37) additive_expression -> additive_expression . PLUSOP multiplicative_expression
    (38) additive_expression -> additive_expression . MINUSOP multiplicative_expression

    LSHIFT          reduce using rule 33 (shift_expression -> additive_expression .)
    RSHIFT          reduce using rule 33 (shift_expression -> additive_expression .)
    LTCOMP          reduce using rule 33 (shift_expression -> additive_expression .)
    GTCOMP          reduce using rule 33 (shift_expression -> additive_expression .)
    LTECOMP         reduce using rule 33 (shift_expression -> additive_expression .)
    GTECOMP         reduce using rule 33 (shift_expression -> additive_expression .)
    EQCOMP          reduce using rule 33 (shift_expression -> additive_expression .)
    NEQCOMP         reduce using rule 33 (shift_expression -> additive_expression .)
    BANDOP          reduce using rule 33 (shift_expression -> additive_expression .)
    XOROP           reduce using rule 33 (shift_expression -> additive_expression .)
    OROP            reduce using rule 33 (shift_expression -> additive_expression .)
    ANDOP           reduce using rule 33 (shift_expression -> additive_expression .)
    QUESMARK        reduce using rule 33 (shift_expression -> additive_expression .)
    RSPAREN         reduce using rule 33 (shift_expression -> additive_expression .)
    RPAREN          reduce using rule 33 (shift_expression -> additive_expression .)
    COMMA           reduce using rule 33 (shift_expression -> additive_expression .)
    SEMICOLON       reduce using rule 33 (shift_expression -> additive_expression .)
    RCPAREN         reduce using rule 33 (shift_expression -> additive_expression .)
    COLON           reduce using rule 33 (shift_expression -> additive_expression .)
    RTEMPLATE       reduce using rule 33 (shift_expression -> additive_expression .)
    PLUSOP          shift and go to state 205
    MINUSOP         shift and go to state 206


state 122

    (36) additive_expression -> multiplicative_expression .
    (40) multiplicative_expression -> multiplicative_expression . MULTOP pm_expression
    (41) multiplicative_expression -> multiplicative_expression . DIVOP pm_expression
    (42) multiplicative_expression -> multiplicative_expression . MODOP pm_expression

    PLUSOP          reduce using rule 36 (additive_expression -> multiplicative_expression .)
    MINUSOP         reduce using rule 36 (additive_expression -> multiplicative_expression .)
    LSHIFT          reduce using rule 36 (additive_expression -> multiplicative_expression .)
    RSHIFT          reduce using rule 36 (additive_expression -> multiplicative_expression .)
    LTCOMP          reduce using rule 36 (additive_expression -> multiplicative_expression .)
    GTCOMP          reduce using rule 36 (additive_expression -> multiplicative_expression .)
    LTECOMP         reduce using rule 36 (additive_expression -> multiplicative_expression .)
    GTECOMP         reduce using rule 36 (additive_expression -> multiplicative_expression .)
    EQCOMP          reduce using rule 36 (additive_expression -> multiplicative_expression .)
    NEQCOMP         reduce using rule 36 (additive_expression -> multiplicative_expression .)
    BANDOP          reduce using rule 36 (additive_expression -> multiplicative_expression .)
    XOROP           reduce using rule 36 (additive_expression -> multiplicative_expression .)
    OROP            reduce using rule 36 (additive_expression -> multiplicative_expression .)
    ANDOP           reduce using rule 36 (additive_expression -> multiplicative_expression .)
    QUESMARK        reduce using rule 36 (additive_expression -> multiplicative_expression .)
    RSPAREN         reduce using rule 36 (additive_expression -> multiplicative_expression .)
    RPAREN          reduce using rule 36 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 36 (additive_expression -> multiplicative_expression .)
    SEMICOLON       reduce using rule 36 (additive_expression -> multiplicative_expression .)
    RCPAREN         reduce using rule 36 (additive_expression -> multiplicative_expression .)
    COLON           reduce using rule 36 (additive_expression -> multiplicative_expression .)
    RTEMPLATE       reduce using rule 36 (additive_expression -> multiplicative_expression .)
    MULTOP          shift and go to state 207
    DIVOP           shift and go to state 208
    MODOP           shift and go to state 209


state 123

    (85) unary1_operator -> PLUSOP .

    LPAREN          reduce using rule 85 (unary1_operator -> PLUSOP .)
    DPLUSOP         reduce using rule 85 (unary1_operator -> PLUSOP .)
    DMINUSOP        reduce using rule 85 (unary1_operator -> PLUSOP .)
    SIZEOF          reduce using rule 85 (unary1_operator -> PLUSOP .)
    PLUSOP          reduce using rule 85 (unary1_operator -> PLUSOP .)
    MINUSOP         reduce using rule 85 (unary1_operator -> PLUSOP .)
    NOTSYM          reduce using rule 85 (unary1_operator -> PLUSOP .)
    BNOP            reduce using rule 85 (unary1_operator -> PLUSOP .)
    MULTOP          reduce using rule 85 (unary1_operator -> PLUSOP .)
    BANDOP          reduce using rule 85 (unary1_operator -> PLUSOP .)
    NEW             reduce using rule 85 (unary1_operator -> PLUSOP .)
    DELETE          reduce using rule 85 (unary1_operator -> PLUSOP .)
    THIS            reduce using rule 85 (unary1_operator -> PLUSOP .)
    IDENTIFIER      reduce using rule 85 (unary1_operator -> PLUSOP .)
    DOUBLEBNOP      reduce using rule 85 (unary1_operator -> PLUSOP .)
    STRING_L        reduce using rule 85 (unary1_operator -> PLUSOP .)
    NUMBER          reduce using rule 85 (unary1_operator -> PLUSOP .)
    SCHAR           reduce using rule 85 (unary1_operator -> PLUSOP .)


state 124

    (86) unary1_operator -> MINUSOP .

    LPAREN          reduce using rule 86 (unary1_operator -> MINUSOP .)
    DPLUSOP         reduce using rule 86 (unary1_operator -> MINUSOP .)
    DMINUSOP        reduce using rule 86 (unary1_operator -> MINUSOP .)
    SIZEOF          reduce using rule 86 (unary1_operator -> MINUSOP .)
    PLUSOP          reduce using rule 86 (unary1_operator -> MINUSOP .)
    MINUSOP         reduce using rule 86 (unary1_operator -> MINUSOP .)
    NOTSYM          reduce using rule 86 (unary1_operator -> MINUSOP .)
    BNOP            reduce using rule 86 (unary1_operator -> MINUSOP .)
    MULTOP          reduce using rule 86 (unary1_operator -> MINUSOP .)
    BANDOP          reduce using rule 86 (unary1_operator -> MINUSOP .)
    NEW             reduce using rule 86 (unary1_operator -> MINUSOP .)
    DELETE          reduce using rule 86 (unary1_operator -> MINUSOP .)
    THIS            reduce using rule 86 (unary1_operator -> MINUSOP .)
    IDENTIFIER      reduce using rule 86 (unary1_operator -> MINUSOP .)
    DOUBLEBNOP      reduce using rule 86 (unary1_operator -> MINUSOP .)
    STRING_L        reduce using rule 86 (unary1_operator -> MINUSOP .)
    NUMBER          reduce using rule 86 (unary1_operator -> MINUSOP .)
    SCHAR           reduce using rule 86 (unary1_operator -> MINUSOP .)


state 125

    (39) multiplicative_expression -> pm_expression .
    (44) pm_expression -> pm_expression . DOTSTAR cast_expression
    (45) pm_expression -> pm_expression . ARROWSTAR cast_expression

    MULTOP          reduce using rule 39 (multiplicative_expression -> pm_expression .)
    DIVOP           reduce using rule 39 (multiplicative_expression -> pm_expression .)
    MODOP           reduce using rule 39 (multiplicative_expression -> pm_expression .)
    PLUSOP          reduce using rule 39 (multiplicative_expression -> pm_expression .)
    MINUSOP         reduce using rule 39 (multiplicative_expression -> pm_expression .)
    LSHIFT          reduce using rule 39 (multiplicative_expression -> pm_expression .)
    RSHIFT          reduce using rule 39 (multiplicative_expression -> pm_expression .)
    LTCOMP          reduce using rule 39 (multiplicative_expression -> pm_expression .)
    GTCOMP          reduce using rule 39 (multiplicative_expression -> pm_expression .)
    LTECOMP         reduce using rule 39 (multiplicative_expression -> pm_expression .)
    GTECOMP         reduce using rule 39 (multiplicative_expression -> pm_expression .)
    EQCOMP          reduce using rule 39 (multiplicative_expression -> pm_expression .)
    NEQCOMP         reduce using rule 39 (multiplicative_expression -> pm_expression .)
    BANDOP          reduce using rule 39 (multiplicative_expression -> pm_expression .)
    XOROP           reduce using rule 39 (multiplicative_expression -> pm_expression .)
    OROP            reduce using rule 39 (multiplicative_expression -> pm_expression .)
    ANDOP           reduce using rule 39 (multiplicative_expression -> pm_expression .)
    QUESMARK        reduce using rule 39 (multiplicative_expression -> pm_expression .)
    RSPAREN         reduce using rule 39 (multiplicative_expression -> pm_expression .)
    RPAREN          reduce using rule 39 (multiplicative_expression -> pm_expression .)
    COMMA           reduce using rule 39 (multiplicative_expression -> pm_expression .)
    SEMICOLON       reduce using rule 39 (multiplicative_expression -> pm_expression .)
    RCPAREN         reduce using rule 39 (multiplicative_expression -> pm_expression .)
    COLON           reduce using rule 39 (multiplicative_expression -> pm_expression .)
    RTEMPLATE       reduce using rule 39 (multiplicative_expression -> pm_expression .)
    DOTSTAR         shift and go to state 210
    ARROWSTAR       shift and go to state 211


state 126

    (43) pm_expression -> cast_expression .

    DOTSTAR         reduce using rule 43 (pm_expression -> cast_expression .)
    ARROWSTAR       reduce using rule 43 (pm_expression -> cast_expression .)
    MULTOP          reduce using rule 43 (pm_expression -> cast_expression .)
    DIVOP           reduce using rule 43 (pm_expression -> cast_expression .)
    MODOP           reduce using rule 43 (pm_expression -> cast_expression .)
    PLUSOP          reduce using rule 43 (pm_expression -> cast_expression .)
    MINUSOP         reduce using rule 43 (pm_expression -> cast_expression .)
    LSHIFT          reduce using rule 43 (pm_expression -> cast_expression .)
    RSHIFT          reduce using rule 43 (pm_expression -> cast_expression .)
    LTCOMP          reduce using rule 43 (pm_expression -> cast_expression .)
    GTCOMP          reduce using rule 43 (pm_expression -> cast_expression .)
    LTECOMP         reduce using rule 43 (pm_expression -> cast_expression .)
    GTECOMP         reduce using rule 43 (pm_expression -> cast_expression .)
    EQCOMP          reduce using rule 43 (pm_expression -> cast_expression .)
    NEQCOMP         reduce using rule 43 (pm_expression -> cast_expression .)
    BANDOP          reduce using rule 43 (pm_expression -> cast_expression .)
    XOROP           reduce using rule 43 (pm_expression -> cast_expression .)
    OROP            reduce using rule 43 (pm_expression -> cast_expression .)
    ANDOP           reduce using rule 43 (pm_expression -> cast_expression .)
    QUESMARK        reduce using rule 43 (pm_expression -> cast_expression .)
    RSPAREN         reduce using rule 43 (pm_expression -> cast_expression .)
    RPAREN          reduce using rule 43 (pm_expression -> cast_expression .)
    COMMA           reduce using rule 43 (pm_expression -> cast_expression .)
    SEMICOLON       reduce using rule 43 (pm_expression -> cast_expression .)
    RCPAREN         reduce using rule 43 (pm_expression -> cast_expression .)
    COLON           reduce using rule 43 (pm_expression -> cast_expression .)
    RTEMPLATE       reduce using rule 43 (pm_expression -> cast_expression .)


state 127

    (107) cast_expression -> unary_expression .

    DOTSTAR         reduce using rule 107 (cast_expression -> unary_expression .)
    ARROWSTAR       reduce using rule 107 (cast_expression -> unary_expression .)
    MULTOP          reduce using rule 107 (cast_expression -> unary_expression .)
    DIVOP           reduce using rule 107 (cast_expression -> unary_expression .)
    MODOP           reduce using rule 107 (cast_expression -> unary_expression .)
    PLUSOP          reduce using rule 107 (cast_expression -> unary_expression .)
    MINUSOP         reduce using rule 107 (cast_expression -> unary_expression .)
    LSHIFT          reduce using rule 107 (cast_expression -> unary_expression .)
    RSHIFT          reduce using rule 107 (cast_expression -> unary_expression .)
    LTCOMP          reduce using rule 107 (cast_expression -> unary_expression .)
    GTCOMP          reduce using rule 107 (cast_expression -> unary_expression .)
    LTECOMP         reduce using rule 107 (cast_expression -> unary_expression .)
    GTECOMP         reduce using rule 107 (cast_expression -> unary_expression .)
    EQCOMP          reduce using rule 107 (cast_expression -> unary_expression .)
    NEQCOMP         reduce using rule 107 (cast_expression -> unary_expression .)
    BANDOP          reduce using rule 107 (cast_expression -> unary_expression .)
    XOROP           reduce using rule 107 (cast_expression -> unary_expression .)
    OROP            reduce using rule 107 (cast_expression -> unary_expression .)
    ANDOP           reduce using rule 107 (cast_expression -> unary_expression .)
    QUESMARK        reduce using rule 107 (cast_expression -> unary_expression .)
    RSPAREN         reduce using rule 107 (cast_expression -> unary_expression .)
    EQUAL           reduce using rule 107 (cast_expression -> unary_expression .)
    MULTEQOP        reduce using rule 107 (cast_expression -> unary_expression .)
    DIVEQOP         reduce using rule 107 (cast_expression -> unary_expression .)
    MODEQOP         reduce using rule 107 (cast_expression -> unary_expression .)
    PLUSEQOP        reduce using rule 107 (cast_expression -> unary_expression .)
    MINUSEQOP       reduce using rule 107 (cast_expression -> unary_expression .)
    LSHIFTEQOP      reduce using rule 107 (cast_expression -> unary_expression .)
    RSHIFTEQOP      reduce using rule 107 (cast_expression -> unary_expression .)
    BANDEQOP        reduce using rule 107 (cast_expression -> unary_expression .)
    BOREQOP         reduce using rule 107 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 107 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 107 (cast_expression -> unary_expression .)
    SEMICOLON       reduce using rule 107 (cast_expression -> unary_expression .)
    RCPAREN         reduce using rule 107 (cast_expression -> unary_expression .)
    COLON           reduce using rule 107 (cast_expression -> unary_expression .)
    RTEMPLATE       reduce using rule 107 (cast_expression -> unary_expression .)


state 128

    (108) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (103) primary_expression -> LPAREN . expression RPAREN
    (168) type_name -> . type_specifier_ abstract_declarator
    (169) type_name -> . type_specifier_
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (170) type_specifier_ -> . CONST type_specifier
    (171) type_specifier_ -> . type_specifier
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (174) type_specifier -> . simple_type_name
    (175) type_specifier -> . complex_type_specifier
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (176) simple_type_name -> . CHAR
    (177) simple_type_name -> . SHORT
    (178) simple_type_name -> . INT
    (179) simple_type_name -> . LONG
    (180) simple_type_name -> . SIGNED
    (181) simple_type_name -> . UNSIGNED
    (182) simple_type_name -> . FLOAT
    (183) simple_type_name -> . DOUBLE
    (184) simple_type_name -> . VOID
    (185) simple_type_name -> . STRING
    (186) simple_type_name -> . AUTO
    (187) complex_type_specifier -> . class_key IDENTIFIER
    (188) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (189) complex_type_specifier -> . TYPE IDENTIFIER
    (190) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (203) class_key -> . CLASS
    (204) class_key -> . STRUCT
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    CONST           shift and go to state 16
    THROW           shift and go to state 216
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38
    THIS            shift and go to state 144
    LPAREN          shift and go to state 148
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    type_name                      shift and go to state 212
    cast_expression                shift and go to state 126
    expression                     shift and go to state 213
    type_specifier_                shift and go to state 186
    assignment_expression          shift and go to state 214
    throw_expression               shift and go to state 215
    type_specifier                 shift and go to state 17
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    class_key                      shift and go to state 56
    logical_AND_expression         shift and go to state 114
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    inclusive_OR_expression        shift and go to state 115
    literal                        shift and go to state 143
    exclusive_OR_expression        shift and go to state 116
    AND_expression                 shift and go to state 117
    equality_expression            shift and go to state 118
    relational_expression          shift and go to state 119
    shift_expression               shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 122
    pm_expression                  shift and go to state 125

state 129

    (63) unary_expression -> postfix_expression .
    (92) postfix_expression -> postfix_expression . LSPAREN expression RSPAREN
    (93) postfix_expression -> postfix_expression . LPAREN expression_list RPAREN
    (94) postfix_expression -> postfix_expression . template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> postfix_expression . LPAREN RPAREN
    (96) postfix_expression -> postfix_expression . DOT name
    (97) postfix_expression -> postfix_expression . ARROW name
    (98) postfix_expression -> postfix_expression . DPLUSOP
    (99) postfix_expression -> postfix_expression . DMINUSOP
    (165) template_class_name -> . LTEMPLATE template_arg_list RTEMPLATE

    DOTSTAR         reduce using rule 63 (unary_expression -> postfix_expression .)
    ARROWSTAR       reduce using rule 63 (unary_expression -> postfix_expression .)
    MULTOP          reduce using rule 63 (unary_expression -> postfix_expression .)
    DIVOP           reduce using rule 63 (unary_expression -> postfix_expression .)
    MODOP           reduce using rule 63 (unary_expression -> postfix_expression .)
    PLUSOP          reduce using rule 63 (unary_expression -> postfix_expression .)
    MINUSOP         reduce using rule 63 (unary_expression -> postfix_expression .)
    LSHIFT          reduce using rule 63 (unary_expression -> postfix_expression .)
    RSHIFT          reduce using rule 63 (unary_expression -> postfix_expression .)
    LTCOMP          reduce using rule 63 (unary_expression -> postfix_expression .)
    GTCOMP          reduce using rule 63 (unary_expression -> postfix_expression .)
    LTECOMP         reduce using rule 63 (unary_expression -> postfix_expression .)
    GTECOMP         reduce using rule 63 (unary_expression -> postfix_expression .)
    EQCOMP          reduce using rule 63 (unary_expression -> postfix_expression .)
    NEQCOMP         reduce using rule 63 (unary_expression -> postfix_expression .)
    BANDOP          reduce using rule 63 (unary_expression -> postfix_expression .)
    XOROP           reduce using rule 63 (unary_expression -> postfix_expression .)
    OROP            reduce using rule 63 (unary_expression -> postfix_expression .)
    ANDOP           reduce using rule 63 (unary_expression -> postfix_expression .)
    QUESMARK        reduce using rule 63 (unary_expression -> postfix_expression .)
    RSPAREN         reduce using rule 63 (unary_expression -> postfix_expression .)
    EQUAL           reduce using rule 63 (unary_expression -> postfix_expression .)
    MULTEQOP        reduce using rule 63 (unary_expression -> postfix_expression .)
    DIVEQOP         reduce using rule 63 (unary_expression -> postfix_expression .)
    MODEQOP         reduce using rule 63 (unary_expression -> postfix_expression .)
    PLUSEQOP        reduce using rule 63 (unary_expression -> postfix_expression .)
    MINUSEQOP       reduce using rule 63 (unary_expression -> postfix_expression .)
    LSHIFTEQOP      reduce using rule 63 (unary_expression -> postfix_expression .)
    RSHIFTEQOP      reduce using rule 63 (unary_expression -> postfix_expression .)
    BANDEQOP        reduce using rule 63 (unary_expression -> postfix_expression .)
    BOREQOP         reduce using rule 63 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 63 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 63 (unary_expression -> postfix_expression .)
    SEMICOLON       reduce using rule 63 (unary_expression -> postfix_expression .)
    RCPAREN         reduce using rule 63 (unary_expression -> postfix_expression .)
    COLON           reduce using rule 63 (unary_expression -> postfix_expression .)
    RTEMPLATE       reduce using rule 63 (unary_expression -> postfix_expression .)
    LSPAREN         shift and go to state 217
    LPAREN          shift and go to state 218
    DOT             shift and go to state 220
    ARROW           shift and go to state 221
    DPLUSOP         shift and go to state 222
    DMINUSOP        shift and go to state 223
    LTEMPLATE       shift and go to state 101

    template_class_name            shift and go to state 219

state 130

    (64) unary_expression -> DPLUSOP . unary_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR

    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    THIS            shift and go to state 144
    LPAREN          shift and go to state 225
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    unary_expression               shift and go to state 224
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    literal                        shift and go to state 143

state 131

    (65) unary_expression -> DMINUSOP . unary_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR

    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    THIS            shift and go to state 144
    LPAREN          shift and go to state 225
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    unary_expression               shift and go to state 226
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    literal                        shift and go to state 143

state 132

    (66) unary_expression -> unary1_operator . cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR

    LPAREN          shift and go to state 128
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    THIS            shift and go to state 144
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    unary1_operator                shift and go to state 132
    cast_expression                shift and go to state 227
    unary_expression               shift and go to state 127
    postfix_expression             shift and go to state 129
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    literal                        shift and go to state 143

state 133

    (67) unary_expression -> unary2_operator . cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR

    LPAREN          shift and go to state 128
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    THIS            shift and go to state 144
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    unary2_operator                shift and go to state 133
    cast_expression                shift and go to state 228
    unary_expression               shift and go to state 127
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    literal                        shift and go to state 143

state 134

    (68) unary_expression -> SIZEOF . unary_expression
    (69) unary_expression -> SIZEOF . LPAREN type_name RPAREN
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR

    LPAREN          shift and go to state 230
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    THIS            shift and go to state 144
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    unary_expression               shift and go to state 229
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    literal                        shift and go to state 143

state 135

    (70) unary_expression -> allocation_expression .

    DOTSTAR         reduce using rule 70 (unary_expression -> allocation_expression .)
    ARROWSTAR       reduce using rule 70 (unary_expression -> allocation_expression .)
    MULTOP          reduce using rule 70 (unary_expression -> allocation_expression .)
    DIVOP           reduce using rule 70 (unary_expression -> allocation_expression .)
    MODOP           reduce using rule 70 (unary_expression -> allocation_expression .)
    PLUSOP          reduce using rule 70 (unary_expression -> allocation_expression .)
    MINUSOP         reduce using rule 70 (unary_expression -> allocation_expression .)
    LSHIFT          reduce using rule 70 (unary_expression -> allocation_expression .)
    RSHIFT          reduce using rule 70 (unary_expression -> allocation_expression .)
    LTCOMP          reduce using rule 70 (unary_expression -> allocation_expression .)
    GTCOMP          reduce using rule 70 (unary_expression -> allocation_expression .)
    LTECOMP         reduce using rule 70 (unary_expression -> allocation_expression .)
    GTECOMP         reduce using rule 70 (unary_expression -> allocation_expression .)
    EQCOMP          reduce using rule 70 (unary_expression -> allocation_expression .)
    NEQCOMP         reduce using rule 70 (unary_expression -> allocation_expression .)
    BANDOP          reduce using rule 70 (unary_expression -> allocation_expression .)
    XOROP           reduce using rule 70 (unary_expression -> allocation_expression .)
    OROP            reduce using rule 70 (unary_expression -> allocation_expression .)
    ANDOP           reduce using rule 70 (unary_expression -> allocation_expression .)
    QUESMARK        reduce using rule 70 (unary_expression -> allocation_expression .)
    RSPAREN         reduce using rule 70 (unary_expression -> allocation_expression .)
    EQUAL           reduce using rule 70 (unary_expression -> allocation_expression .)
    MULTEQOP        reduce using rule 70 (unary_expression -> allocation_expression .)
    DIVEQOP         reduce using rule 70 (unary_expression -> allocation_expression .)
    MODEQOP         reduce using rule 70 (unary_expression -> allocation_expression .)
    PLUSEQOP        reduce using rule 70 (unary_expression -> allocation_expression .)
    MINUSEQOP       reduce using rule 70 (unary_expression -> allocation_expression .)
    LSHIFTEQOP      reduce using rule 70 (unary_expression -> allocation_expression .)
    RSHIFTEQOP      reduce using rule 70 (unary_expression -> allocation_expression .)
    BANDEQOP        reduce using rule 70 (unary_expression -> allocation_expression .)
    BOREQOP         reduce using rule 70 (unary_expression -> allocation_expression .)
    RPAREN          reduce using rule 70 (unary_expression -> allocation_expression .)
    COMMA           reduce using rule 70 (unary_expression -> allocation_expression .)
    SEMICOLON       reduce using rule 70 (unary_expression -> allocation_expression .)
    RCPAREN         reduce using rule 70 (unary_expression -> allocation_expression .)
    COLON           reduce using rule 70 (unary_expression -> allocation_expression .)
    RTEMPLATE       reduce using rule 70 (unary_expression -> allocation_expression .)


state 136

    (71) unary_expression -> deallocation_expression .

    DOTSTAR         reduce using rule 71 (unary_expression -> deallocation_expression .)
    ARROWSTAR       reduce using rule 71 (unary_expression -> deallocation_expression .)
    MULTOP          reduce using rule 71 (unary_expression -> deallocation_expression .)
    DIVOP           reduce using rule 71 (unary_expression -> deallocation_expression .)
    MODOP           reduce using rule 71 (unary_expression -> deallocation_expression .)
    PLUSOP          reduce using rule 71 (unary_expression -> deallocation_expression .)
    MINUSOP         reduce using rule 71 (unary_expression -> deallocation_expression .)
    LSHIFT          reduce using rule 71 (unary_expression -> deallocation_expression .)
    RSHIFT          reduce using rule 71 (unary_expression -> deallocation_expression .)
    LTCOMP          reduce using rule 71 (unary_expression -> deallocation_expression .)
    GTCOMP          reduce using rule 71 (unary_expression -> deallocation_expression .)
    LTECOMP         reduce using rule 71 (unary_expression -> deallocation_expression .)
    GTECOMP         reduce using rule 71 (unary_expression -> deallocation_expression .)
    EQCOMP          reduce using rule 71 (unary_expression -> deallocation_expression .)
    NEQCOMP         reduce using rule 71 (unary_expression -> deallocation_expression .)
    BANDOP          reduce using rule 71 (unary_expression -> deallocation_expression .)
    XOROP           reduce using rule 71 (unary_expression -> deallocation_expression .)
    OROP            reduce using rule 71 (unary_expression -> deallocation_expression .)
    ANDOP           reduce using rule 71 (unary_expression -> deallocation_expression .)
    QUESMARK        reduce using rule 71 (unary_expression -> deallocation_expression .)
    RSPAREN         reduce using rule 71 (unary_expression -> deallocation_expression .)
    EQUAL           reduce using rule 71 (unary_expression -> deallocation_expression .)
    MULTEQOP        reduce using rule 71 (unary_expression -> deallocation_expression .)
    DIVEQOP         reduce using rule 71 (unary_expression -> deallocation_expression .)
    MODEQOP         reduce using rule 71 (unary_expression -> deallocation_expression .)
    PLUSEQOP        reduce using rule 71 (unary_expression -> deallocation_expression .)
    MINUSEQOP       reduce using rule 71 (unary_expression -> deallocation_expression .)
    LSHIFTEQOP      reduce using rule 71 (unary_expression -> deallocation_expression .)
    RSHIFTEQOP      reduce using rule 71 (unary_expression -> deallocation_expression .)
    BANDEQOP        reduce using rule 71 (unary_expression -> deallocation_expression .)
    BOREQOP         reduce using rule 71 (unary_expression -> deallocation_expression .)
    RPAREN          reduce using rule 71 (unary_expression -> deallocation_expression .)
    COMMA           reduce using rule 71 (unary_expression -> deallocation_expression .)
    SEMICOLON       reduce using rule 71 (unary_expression -> deallocation_expression .)
    RCPAREN         reduce using rule 71 (unary_expression -> deallocation_expression .)
    COLON           reduce using rule 71 (unary_expression -> deallocation_expression .)
    RTEMPLATE       reduce using rule 71 (unary_expression -> deallocation_expression .)


state 137

    (91) postfix_expression -> primary_expression .

    LSPAREN         reduce using rule 91 (postfix_expression -> primary_expression .)
    LPAREN          reduce using rule 91 (postfix_expression -> primary_expression .)
    DOT             reduce using rule 91 (postfix_expression -> primary_expression .)
    ARROW           reduce using rule 91 (postfix_expression -> primary_expression .)
    DPLUSOP         reduce using rule 91 (postfix_expression -> primary_expression .)
    DMINUSOP        reduce using rule 91 (postfix_expression -> primary_expression .)
    LTEMPLATE       reduce using rule 91 (postfix_expression -> primary_expression .)
    DOTSTAR         reduce using rule 91 (postfix_expression -> primary_expression .)
    ARROWSTAR       reduce using rule 91 (postfix_expression -> primary_expression .)
    MULTOP          reduce using rule 91 (postfix_expression -> primary_expression .)
    DIVOP           reduce using rule 91 (postfix_expression -> primary_expression .)
    MODOP           reduce using rule 91 (postfix_expression -> primary_expression .)
    PLUSOP          reduce using rule 91 (postfix_expression -> primary_expression .)
    MINUSOP         reduce using rule 91 (postfix_expression -> primary_expression .)
    LSHIFT          reduce using rule 91 (postfix_expression -> primary_expression .)
    RSHIFT          reduce using rule 91 (postfix_expression -> primary_expression .)
    LTCOMP          reduce using rule 91 (postfix_expression -> primary_expression .)
    GTCOMP          reduce using rule 91 (postfix_expression -> primary_expression .)
    LTECOMP         reduce using rule 91 (postfix_expression -> primary_expression .)
    GTECOMP         reduce using rule 91 (postfix_expression -> primary_expression .)
    EQCOMP          reduce using rule 91 (postfix_expression -> primary_expression .)
    NEQCOMP         reduce using rule 91 (postfix_expression -> primary_expression .)
    BANDOP          reduce using rule 91 (postfix_expression -> primary_expression .)
    XOROP           reduce using rule 91 (postfix_expression -> primary_expression .)
    OROP            reduce using rule 91 (postfix_expression -> primary_expression .)
    ANDOP           reduce using rule 91 (postfix_expression -> primary_expression .)
    QUESMARK        reduce using rule 91 (postfix_expression -> primary_expression .)
    RSPAREN         reduce using rule 91 (postfix_expression -> primary_expression .)
    EQUAL           reduce using rule 91 (postfix_expression -> primary_expression .)
    MULTEQOP        reduce using rule 91 (postfix_expression -> primary_expression .)
    DIVEQOP         reduce using rule 91 (postfix_expression -> primary_expression .)
    MODEQOP         reduce using rule 91 (postfix_expression -> primary_expression .)
    PLUSEQOP        reduce using rule 91 (postfix_expression -> primary_expression .)
    MINUSEQOP       reduce using rule 91 (postfix_expression -> primary_expression .)
    LSHIFTEQOP      reduce using rule 91 (postfix_expression -> primary_expression .)
    RSHIFTEQOP      reduce using rule 91 (postfix_expression -> primary_expression .)
    BANDEQOP        reduce using rule 91 (postfix_expression -> primary_expression .)
    BOREQOP         reduce using rule 91 (postfix_expression -> primary_expression .)
    RPAREN          reduce using rule 91 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 91 (postfix_expression -> primary_expression .)
    SEMICOLON       reduce using rule 91 (postfix_expression -> primary_expression .)
    RCPAREN         reduce using rule 91 (postfix_expression -> primary_expression .)
    COLON           reduce using rule 91 (postfix_expression -> primary_expression .)
    RTEMPLATE       reduce using rule 91 (postfix_expression -> primary_expression .)


state 138

    (100) primary_expression -> name .

    LSPAREN         reduce using rule 100 (primary_expression -> name .)
    LPAREN          reduce using rule 100 (primary_expression -> name .)
    DOT             reduce using rule 100 (primary_expression -> name .)
    ARROW           reduce using rule 100 (primary_expression -> name .)
    DPLUSOP         reduce using rule 100 (primary_expression -> name .)
    DMINUSOP        reduce using rule 100 (primary_expression -> name .)
    LTEMPLATE       reduce using rule 100 (primary_expression -> name .)
    DOTSTAR         reduce using rule 100 (primary_expression -> name .)
    ARROWSTAR       reduce using rule 100 (primary_expression -> name .)
    MULTOP          reduce using rule 100 (primary_expression -> name .)
    DIVOP           reduce using rule 100 (primary_expression -> name .)
    MODOP           reduce using rule 100 (primary_expression -> name .)
    PLUSOP          reduce using rule 100 (primary_expression -> name .)
    MINUSOP         reduce using rule 100 (primary_expression -> name .)
    LSHIFT          reduce using rule 100 (primary_expression -> name .)
    RSHIFT          reduce using rule 100 (primary_expression -> name .)
    LTCOMP          reduce using rule 100 (primary_expression -> name .)
    GTCOMP          reduce using rule 100 (primary_expression -> name .)
    LTECOMP         reduce using rule 100 (primary_expression -> name .)
    GTECOMP         reduce using rule 100 (primary_expression -> name .)
    EQCOMP          reduce using rule 100 (primary_expression -> name .)
    NEQCOMP         reduce using rule 100 (primary_expression -> name .)
    BANDOP          reduce using rule 100 (primary_expression -> name .)
    XOROP           reduce using rule 100 (primary_expression -> name .)
    OROP            reduce using rule 100 (primary_expression -> name .)
    ANDOP           reduce using rule 100 (primary_expression -> name .)
    QUESMARK        reduce using rule 100 (primary_expression -> name .)
    RSPAREN         reduce using rule 100 (primary_expression -> name .)
    EQUAL           reduce using rule 100 (primary_expression -> name .)
    MULTEQOP        reduce using rule 100 (primary_expression -> name .)
    DIVEQOP         reduce using rule 100 (primary_expression -> name .)
    MODEQOP         reduce using rule 100 (primary_expression -> name .)
    PLUSEQOP        reduce using rule 100 (primary_expression -> name .)
    MINUSEQOP       reduce using rule 100 (primary_expression -> name .)
    LSHIFTEQOP      reduce using rule 100 (primary_expression -> name .)
    RSHIFTEQOP      reduce using rule 100 (primary_expression -> name .)
    BANDEQOP        reduce using rule 100 (primary_expression -> name .)
    BOREQOP         reduce using rule 100 (primary_expression -> name .)
    RPAREN          reduce using rule 100 (primary_expression -> name .)
    COMMA           reduce using rule 100 (primary_expression -> name .)
    SEMICOLON       reduce using rule 100 (primary_expression -> name .)
    RCPAREN         reduce using rule 100 (primary_expression -> name .)
    COLON           reduce using rule 100 (primary_expression -> name .)
    RTEMPLATE       reduce using rule 100 (primary_expression -> name .)


state 139

    (87) unary1_operator -> NOTSYM .

    LPAREN          reduce using rule 87 (unary1_operator -> NOTSYM .)
    DPLUSOP         reduce using rule 87 (unary1_operator -> NOTSYM .)
    DMINUSOP        reduce using rule 87 (unary1_operator -> NOTSYM .)
    SIZEOF          reduce using rule 87 (unary1_operator -> NOTSYM .)
    PLUSOP          reduce using rule 87 (unary1_operator -> NOTSYM .)
    MINUSOP         reduce using rule 87 (unary1_operator -> NOTSYM .)
    NOTSYM          reduce using rule 87 (unary1_operator -> NOTSYM .)
    BNOP            reduce using rule 87 (unary1_operator -> NOTSYM .)
    MULTOP          reduce using rule 87 (unary1_operator -> NOTSYM .)
    BANDOP          reduce using rule 87 (unary1_operator -> NOTSYM .)
    NEW             reduce using rule 87 (unary1_operator -> NOTSYM .)
    DELETE          reduce using rule 87 (unary1_operator -> NOTSYM .)
    THIS            reduce using rule 87 (unary1_operator -> NOTSYM .)
    IDENTIFIER      reduce using rule 87 (unary1_operator -> NOTSYM .)
    DOUBLEBNOP      reduce using rule 87 (unary1_operator -> NOTSYM .)
    STRING_L        reduce using rule 87 (unary1_operator -> NOTSYM .)
    NUMBER          reduce using rule 87 (unary1_operator -> NOTSYM .)
    SCHAR           reduce using rule 87 (unary1_operator -> NOTSYM .)


state 140

    (88) unary1_operator -> BNOP .

    LPAREN          reduce using rule 88 (unary1_operator -> BNOP .)
    DPLUSOP         reduce using rule 88 (unary1_operator -> BNOP .)
    DMINUSOP        reduce using rule 88 (unary1_operator -> BNOP .)
    SIZEOF          reduce using rule 88 (unary1_operator -> BNOP .)
    PLUSOP          reduce using rule 88 (unary1_operator -> BNOP .)
    MINUSOP         reduce using rule 88 (unary1_operator -> BNOP .)
    NOTSYM          reduce using rule 88 (unary1_operator -> BNOP .)
    BNOP            reduce using rule 88 (unary1_operator -> BNOP .)
    MULTOP          reduce using rule 88 (unary1_operator -> BNOP .)
    BANDOP          reduce using rule 88 (unary1_operator -> BNOP .)
    NEW             reduce using rule 88 (unary1_operator -> BNOP .)
    DELETE          reduce using rule 88 (unary1_operator -> BNOP .)
    THIS            reduce using rule 88 (unary1_operator -> BNOP .)
    IDENTIFIER      reduce using rule 88 (unary1_operator -> BNOP .)
    DOUBLEBNOP      reduce using rule 88 (unary1_operator -> BNOP .)
    STRING_L        reduce using rule 88 (unary1_operator -> BNOP .)
    NUMBER          reduce using rule 88 (unary1_operator -> BNOP .)
    SCHAR           reduce using rule 88 (unary1_operator -> BNOP .)


state 141

    (73) allocation_expression -> NEW . new_type_name new_initializer
    (74) allocation_expression -> NEW . new_type_name
    (75) allocation_expression -> NEW . LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> NEW . LPAREN type_name RPAREN
    (77) new_type_name -> . type_specifier_ new_declarator
    (78) new_type_name -> . type_specifier_
    (170) type_specifier_ -> . CONST type_specifier
    (171) type_specifier_ -> . type_specifier
    (174) type_specifier -> . simple_type_name
    (175) type_specifier -> . complex_type_specifier
    (176) simple_type_name -> . CHAR
    (177) simple_type_name -> . SHORT
    (178) simple_type_name -> . INT
    (179) simple_type_name -> . LONG
    (180) simple_type_name -> . SIGNED
    (181) simple_type_name -> . UNSIGNED
    (182) simple_type_name -> . FLOAT
    (183) simple_type_name -> . DOUBLE
    (184) simple_type_name -> . VOID
    (185) simple_type_name -> . STRING
    (186) simple_type_name -> . AUTO
    (187) complex_type_specifier -> . class_key IDENTIFIER
    (188) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (189) complex_type_specifier -> . TYPE IDENTIFIER
    (190) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (203) class_key -> . CLASS
    (204) class_key -> . STRUCT

    LPAREN          shift and go to state 232
    CONST           shift and go to state 16
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38

    new_type_name                  shift and go to state 231
    type_specifier_                shift and go to state 233
    type_specifier                 shift and go to state 17
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 56

state 142

    (72) deallocation_expression -> DELETE . cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR

    LPAREN          shift and go to state 128
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    THIS            shift and go to state 144
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    cast_expression                shift and go to state 234
    unary_expression               shift and go to state 127
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    literal                        shift and go to state 143

state 143

    (101) primary_expression -> literal .

    LSPAREN         reduce using rule 101 (primary_expression -> literal .)
    LPAREN          reduce using rule 101 (primary_expression -> literal .)
    DOT             reduce using rule 101 (primary_expression -> literal .)
    ARROW           reduce using rule 101 (primary_expression -> literal .)
    DPLUSOP         reduce using rule 101 (primary_expression -> literal .)
    DMINUSOP        reduce using rule 101 (primary_expression -> literal .)
    LTEMPLATE       reduce using rule 101 (primary_expression -> literal .)
    DOTSTAR         reduce using rule 101 (primary_expression -> literal .)
    ARROWSTAR       reduce using rule 101 (primary_expression -> literal .)
    MULTOP          reduce using rule 101 (primary_expression -> literal .)
    DIVOP           reduce using rule 101 (primary_expression -> literal .)
    MODOP           reduce using rule 101 (primary_expression -> literal .)
    PLUSOP          reduce using rule 101 (primary_expression -> literal .)
    MINUSOP         reduce using rule 101 (primary_expression -> literal .)
    LSHIFT          reduce using rule 101 (primary_expression -> literal .)
    RSHIFT          reduce using rule 101 (primary_expression -> literal .)
    LTCOMP          reduce using rule 101 (primary_expression -> literal .)
    GTCOMP          reduce using rule 101 (primary_expression -> literal .)
    LTECOMP         reduce using rule 101 (primary_expression -> literal .)
    GTECOMP         reduce using rule 101 (primary_expression -> literal .)
    EQCOMP          reduce using rule 101 (primary_expression -> literal .)
    NEQCOMP         reduce using rule 101 (primary_expression -> literal .)
    BANDOP          reduce using rule 101 (primary_expression -> literal .)
    XOROP           reduce using rule 101 (primary_expression -> literal .)
    OROP            reduce using rule 101 (primary_expression -> literal .)
    ANDOP           reduce using rule 101 (primary_expression -> literal .)
    QUESMARK        reduce using rule 101 (primary_expression -> literal .)
    RSPAREN         reduce using rule 101 (primary_expression -> literal .)
    EQUAL           reduce using rule 101 (primary_expression -> literal .)
    MULTEQOP        reduce using rule 101 (primary_expression -> literal .)
    DIVEQOP         reduce using rule 101 (primary_expression -> literal .)
    MODEQOP         reduce using rule 101 (primary_expression -> literal .)
    PLUSEQOP        reduce using rule 101 (primary_expression -> literal .)
    MINUSEQOP       reduce using rule 101 (primary_expression -> literal .)
    LSHIFTEQOP      reduce using rule 101 (primary_expression -> literal .)
    RSHIFTEQOP      reduce using rule 101 (primary_expression -> literal .)
    BANDEQOP        reduce using rule 101 (primary_expression -> literal .)
    BOREQOP         reduce using rule 101 (primary_expression -> literal .)
    RPAREN          reduce using rule 101 (primary_expression -> literal .)
    COMMA           reduce using rule 101 (primary_expression -> literal .)
    SEMICOLON       reduce using rule 101 (primary_expression -> literal .)
    RCPAREN         reduce using rule 101 (primary_expression -> literal .)
    COLON           reduce using rule 101 (primary_expression -> literal .)
    RTEMPLATE       reduce using rule 101 (primary_expression -> literal .)


state 144

    (102) primary_expression -> THIS .

    LSPAREN         reduce using rule 102 (primary_expression -> THIS .)
    LPAREN          reduce using rule 102 (primary_expression -> THIS .)
    DOT             reduce using rule 102 (primary_expression -> THIS .)
    ARROW           reduce using rule 102 (primary_expression -> THIS .)
    DPLUSOP         reduce using rule 102 (primary_expression -> THIS .)
    DMINUSOP        reduce using rule 102 (primary_expression -> THIS .)
    LTEMPLATE       reduce using rule 102 (primary_expression -> THIS .)
    DOTSTAR         reduce using rule 102 (primary_expression -> THIS .)
    ARROWSTAR       reduce using rule 102 (primary_expression -> THIS .)
    MULTOP          reduce using rule 102 (primary_expression -> THIS .)
    DIVOP           reduce using rule 102 (primary_expression -> THIS .)
    MODOP           reduce using rule 102 (primary_expression -> THIS .)
    PLUSOP          reduce using rule 102 (primary_expression -> THIS .)
    MINUSOP         reduce using rule 102 (primary_expression -> THIS .)
    LSHIFT          reduce using rule 102 (primary_expression -> THIS .)
    RSHIFT          reduce using rule 102 (primary_expression -> THIS .)
    LTCOMP          reduce using rule 102 (primary_expression -> THIS .)
    GTCOMP          reduce using rule 102 (primary_expression -> THIS .)
    LTECOMP         reduce using rule 102 (primary_expression -> THIS .)
    GTECOMP         reduce using rule 102 (primary_expression -> THIS .)
    EQCOMP          reduce using rule 102 (primary_expression -> THIS .)
    NEQCOMP         reduce using rule 102 (primary_expression -> THIS .)
    BANDOP          reduce using rule 102 (primary_expression -> THIS .)
    XOROP           reduce using rule 102 (primary_expression -> THIS .)
    OROP            reduce using rule 102 (primary_expression -> THIS .)
    ANDOP           reduce using rule 102 (primary_expression -> THIS .)
    QUESMARK        reduce using rule 102 (primary_expression -> THIS .)
    RSPAREN         reduce using rule 102 (primary_expression -> THIS .)
    EQUAL           reduce using rule 102 (primary_expression -> THIS .)
    MULTEQOP        reduce using rule 102 (primary_expression -> THIS .)
    DIVEQOP         reduce using rule 102 (primary_expression -> THIS .)
    MODEQOP         reduce using rule 102 (primary_expression -> THIS .)
    PLUSEQOP        reduce using rule 102 (primary_expression -> THIS .)
    MINUSEQOP       reduce using rule 102 (primary_expression -> THIS .)
    LSHIFTEQOP      reduce using rule 102 (primary_expression -> THIS .)
    RSHIFTEQOP      reduce using rule 102 (primary_expression -> THIS .)
    BANDEQOP        reduce using rule 102 (primary_expression -> THIS .)
    BOREQOP         reduce using rule 102 (primary_expression -> THIS .)
    RPAREN          reduce using rule 102 (primary_expression -> THIS .)
    COMMA           reduce using rule 102 (primary_expression -> THIS .)
    SEMICOLON       reduce using rule 102 (primary_expression -> THIS .)
    RCPAREN         reduce using rule 102 (primary_expression -> THIS .)
    COLON           reduce using rule 102 (primary_expression -> THIS .)
    RTEMPLATE       reduce using rule 102 (primary_expression -> THIS .)


state 145

    (104) literal -> STRING_L .

    LSPAREN         reduce using rule 104 (literal -> STRING_L .)
    LPAREN          reduce using rule 104 (literal -> STRING_L .)
    DOT             reduce using rule 104 (literal -> STRING_L .)
    ARROW           reduce using rule 104 (literal -> STRING_L .)
    DPLUSOP         reduce using rule 104 (literal -> STRING_L .)
    DMINUSOP        reduce using rule 104 (literal -> STRING_L .)
    LTEMPLATE       reduce using rule 104 (literal -> STRING_L .)
    DOTSTAR         reduce using rule 104 (literal -> STRING_L .)
    ARROWSTAR       reduce using rule 104 (literal -> STRING_L .)
    MULTOP          reduce using rule 104 (literal -> STRING_L .)
    DIVOP           reduce using rule 104 (literal -> STRING_L .)
    MODOP           reduce using rule 104 (literal -> STRING_L .)
    PLUSOP          reduce using rule 104 (literal -> STRING_L .)
    MINUSOP         reduce using rule 104 (literal -> STRING_L .)
    LSHIFT          reduce using rule 104 (literal -> STRING_L .)
    RSHIFT          reduce using rule 104 (literal -> STRING_L .)
    LTCOMP          reduce using rule 104 (literal -> STRING_L .)
    GTCOMP          reduce using rule 104 (literal -> STRING_L .)
    LTECOMP         reduce using rule 104 (literal -> STRING_L .)
    GTECOMP         reduce using rule 104 (literal -> STRING_L .)
    EQCOMP          reduce using rule 104 (literal -> STRING_L .)
    NEQCOMP         reduce using rule 104 (literal -> STRING_L .)
    BANDOP          reduce using rule 104 (literal -> STRING_L .)
    XOROP           reduce using rule 104 (literal -> STRING_L .)
    OROP            reduce using rule 104 (literal -> STRING_L .)
    ANDOP           reduce using rule 104 (literal -> STRING_L .)
    QUESMARK        reduce using rule 104 (literal -> STRING_L .)
    RSPAREN         reduce using rule 104 (literal -> STRING_L .)
    EQUAL           reduce using rule 104 (literal -> STRING_L .)
    MULTEQOP        reduce using rule 104 (literal -> STRING_L .)
    DIVEQOP         reduce using rule 104 (literal -> STRING_L .)
    MODEQOP         reduce using rule 104 (literal -> STRING_L .)
    PLUSEQOP        reduce using rule 104 (literal -> STRING_L .)
    MINUSEQOP       reduce using rule 104 (literal -> STRING_L .)
    LSHIFTEQOP      reduce using rule 104 (literal -> STRING_L .)
    RSHIFTEQOP      reduce using rule 104 (literal -> STRING_L .)
    BANDEQOP        reduce using rule 104 (literal -> STRING_L .)
    BOREQOP         reduce using rule 104 (literal -> STRING_L .)
    RPAREN          reduce using rule 104 (literal -> STRING_L .)
    COMMA           reduce using rule 104 (literal -> STRING_L .)
    SEMICOLON       reduce using rule 104 (literal -> STRING_L .)
    RCPAREN         reduce using rule 104 (literal -> STRING_L .)
    COLON           reduce using rule 104 (literal -> STRING_L .)
    RTEMPLATE       reduce using rule 104 (literal -> STRING_L .)


state 146

    (105) literal -> NUMBER .

    LSPAREN         reduce using rule 105 (literal -> NUMBER .)
    LPAREN          reduce using rule 105 (literal -> NUMBER .)
    DOT             reduce using rule 105 (literal -> NUMBER .)
    ARROW           reduce using rule 105 (literal -> NUMBER .)
    DPLUSOP         reduce using rule 105 (literal -> NUMBER .)
    DMINUSOP        reduce using rule 105 (literal -> NUMBER .)
    LTEMPLATE       reduce using rule 105 (literal -> NUMBER .)
    DOTSTAR         reduce using rule 105 (literal -> NUMBER .)
    ARROWSTAR       reduce using rule 105 (literal -> NUMBER .)
    MULTOP          reduce using rule 105 (literal -> NUMBER .)
    DIVOP           reduce using rule 105 (literal -> NUMBER .)
    MODOP           reduce using rule 105 (literal -> NUMBER .)
    PLUSOP          reduce using rule 105 (literal -> NUMBER .)
    MINUSOP         reduce using rule 105 (literal -> NUMBER .)
    LSHIFT          reduce using rule 105 (literal -> NUMBER .)
    RSHIFT          reduce using rule 105 (literal -> NUMBER .)
    LTCOMP          reduce using rule 105 (literal -> NUMBER .)
    GTCOMP          reduce using rule 105 (literal -> NUMBER .)
    LTECOMP         reduce using rule 105 (literal -> NUMBER .)
    GTECOMP         reduce using rule 105 (literal -> NUMBER .)
    EQCOMP          reduce using rule 105 (literal -> NUMBER .)
    NEQCOMP         reduce using rule 105 (literal -> NUMBER .)
    BANDOP          reduce using rule 105 (literal -> NUMBER .)
    XOROP           reduce using rule 105 (literal -> NUMBER .)
    OROP            reduce using rule 105 (literal -> NUMBER .)
    ANDOP           reduce using rule 105 (literal -> NUMBER .)
    QUESMARK        reduce using rule 105 (literal -> NUMBER .)
    RSPAREN         reduce using rule 105 (literal -> NUMBER .)
    EQUAL           reduce using rule 105 (literal -> NUMBER .)
    MULTEQOP        reduce using rule 105 (literal -> NUMBER .)
    DIVEQOP         reduce using rule 105 (literal -> NUMBER .)
    MODEQOP         reduce using rule 105 (literal -> NUMBER .)
    PLUSEQOP        reduce using rule 105 (literal -> NUMBER .)
    MINUSEQOP       reduce using rule 105 (literal -> NUMBER .)
    LSHIFTEQOP      reduce using rule 105 (literal -> NUMBER .)
    RSHIFTEQOP      reduce using rule 105 (literal -> NUMBER .)
    BANDEQOP        reduce using rule 105 (literal -> NUMBER .)
    BOREQOP         reduce using rule 105 (literal -> NUMBER .)
    RPAREN          reduce using rule 105 (literal -> NUMBER .)
    COMMA           reduce using rule 105 (literal -> NUMBER .)
    SEMICOLON       reduce using rule 105 (literal -> NUMBER .)
    RCPAREN         reduce using rule 105 (literal -> NUMBER .)
    COLON           reduce using rule 105 (literal -> NUMBER .)
    RTEMPLATE       reduce using rule 105 (literal -> NUMBER .)


state 147

    (106) literal -> SCHAR .

    LSPAREN         reduce using rule 106 (literal -> SCHAR .)
    LPAREN          reduce using rule 106 (literal -> SCHAR .)
    DOT             reduce using rule 106 (literal -> SCHAR .)
    ARROW           reduce using rule 106 (literal -> SCHAR .)
    DPLUSOP         reduce using rule 106 (literal -> SCHAR .)
    DMINUSOP        reduce using rule 106 (literal -> SCHAR .)
    LTEMPLATE       reduce using rule 106 (literal -> SCHAR .)
    DOTSTAR         reduce using rule 106 (literal -> SCHAR .)
    ARROWSTAR       reduce using rule 106 (literal -> SCHAR .)
    MULTOP          reduce using rule 106 (literal -> SCHAR .)
    DIVOP           reduce using rule 106 (literal -> SCHAR .)
    MODOP           reduce using rule 106 (literal -> SCHAR .)
    PLUSOP          reduce using rule 106 (literal -> SCHAR .)
    MINUSOP         reduce using rule 106 (literal -> SCHAR .)
    LSHIFT          reduce using rule 106 (literal -> SCHAR .)
    RSHIFT          reduce using rule 106 (literal -> SCHAR .)
    LTCOMP          reduce using rule 106 (literal -> SCHAR .)
    GTCOMP          reduce using rule 106 (literal -> SCHAR .)
    LTECOMP         reduce using rule 106 (literal -> SCHAR .)
    GTECOMP         reduce using rule 106 (literal -> SCHAR .)
    EQCOMP          reduce using rule 106 (literal -> SCHAR .)
    NEQCOMP         reduce using rule 106 (literal -> SCHAR .)
    BANDOP          reduce using rule 106 (literal -> SCHAR .)
    XOROP           reduce using rule 106 (literal -> SCHAR .)
    OROP            reduce using rule 106 (literal -> SCHAR .)
    ANDOP           reduce using rule 106 (literal -> SCHAR .)
    QUESMARK        reduce using rule 106 (literal -> SCHAR .)
    RSPAREN         reduce using rule 106 (literal -> SCHAR .)
    EQUAL           reduce using rule 106 (literal -> SCHAR .)
    MULTEQOP        reduce using rule 106 (literal -> SCHAR .)
    DIVEQOP         reduce using rule 106 (literal -> SCHAR .)
    MODEQOP         reduce using rule 106 (literal -> SCHAR .)
    PLUSEQOP        reduce using rule 106 (literal -> SCHAR .)
    MINUSEQOP       reduce using rule 106 (literal -> SCHAR .)
    LSHIFTEQOP      reduce using rule 106 (literal -> SCHAR .)
    RSHIFTEQOP      reduce using rule 106 (literal -> SCHAR .)
    BANDEQOP        reduce using rule 106 (literal -> SCHAR .)
    BOREQOP         reduce using rule 106 (literal -> SCHAR .)
    RPAREN          reduce using rule 106 (literal -> SCHAR .)
    COMMA           reduce using rule 106 (literal -> SCHAR .)
    SEMICOLON       reduce using rule 106 (literal -> SCHAR .)
    RCPAREN         reduce using rule 106 (literal -> SCHAR .)
    COLON           reduce using rule 106 (literal -> SCHAR .)
    RTEMPLATE       reduce using rule 106 (literal -> SCHAR .)


state 148

    (103) primary_expression -> LPAREN . expression RPAREN
    (108) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (168) type_name -> . type_specifier_ abstract_declarator
    (169) type_name -> . type_specifier_
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (170) type_specifier_ -> . CONST type_specifier
    (171) type_specifier_ -> . type_specifier
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (174) type_specifier -> . simple_type_name
    (175) type_specifier -> . complex_type_specifier
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (176) simple_type_name -> . CHAR
    (177) simple_type_name -> . SHORT
    (178) simple_type_name -> . INT
    (179) simple_type_name -> . LONG
    (180) simple_type_name -> . SIGNED
    (181) simple_type_name -> . UNSIGNED
    (182) simple_type_name -> . FLOAT
    (183) simple_type_name -> . DOUBLE
    (184) simple_type_name -> . VOID
    (185) simple_type_name -> . STRING
    (186) simple_type_name -> . AUTO
    (187) complex_type_specifier -> . class_key IDENTIFIER
    (188) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (189) complex_type_specifier -> . TYPE IDENTIFIER
    (190) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (203) class_key -> . CLASS
    (204) class_key -> . STRUCT
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    THROW           shift and go to state 216
    CONST           shift and go to state 16
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    THIS            shift and go to state 144
    LPAREN          shift and go to state 148
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    expression                     shift and go to state 213
    type_name                      shift and go to state 212
    cast_expression                shift and go to state 126
    assignment_expression          shift and go to state 214
    throw_expression               shift and go to state 215
    type_specifier_                shift and go to state 186
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    type_specifier                 shift and go to state 17
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    logical_AND_expression         shift and go to state 114
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    class_key                      shift and go to state 56
    inclusive_OR_expression        shift and go to state 115
    literal                        shift and go to state 143
    exclusive_OR_expression        shift and go to state 116
    AND_expression                 shift and go to state 117
    equality_expression            shift and go to state 118
    relational_expression          shift and go to state 119
    shift_expression               shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 122
    pm_expression                  shift and go to state 125

state 149

    (283) initializer -> LPAREN expression_list . RPAREN
    (290) expression_list -> expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 235
    COMMA           shift and go to state 236


state 150

    (289) expression_list -> assignment_expression .

    RPAREN          reduce using rule 289 (expression_list -> assignment_expression .)
    COMMA           reduce using rule 289 (expression_list -> assignment_expression .)


state 151

    (51) assignment_expression -> conditional_expression .

    RPAREN          reduce using rule 51 (assignment_expression -> conditional_expression .)
    COMMA           reduce using rule 51 (assignment_expression -> conditional_expression .)
    SEMICOLON       reduce using rule 51 (assignment_expression -> conditional_expression .)
    RCPAREN         reduce using rule 51 (assignment_expression -> conditional_expression .)
    COLON           reduce using rule 51 (assignment_expression -> conditional_expression .)
    RSPAREN         reduce using rule 51 (assignment_expression -> conditional_expression .)
    RTEMPLATE       reduce using rule 51 (assignment_expression -> conditional_expression .)


state 152

    (52) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (107) cast_expression -> unary_expression .
    (53) assignment_operator -> . EQUAL
    (54) assignment_operator -> . MULTEQOP
    (55) assignment_operator -> . DIVEQOP
    (56) assignment_operator -> . MODEQOP
    (57) assignment_operator -> . PLUSEQOP
    (58) assignment_operator -> . MINUSEQOP
    (59) assignment_operator -> . LSHIFTEQOP
    (60) assignment_operator -> . RSHIFTEQOP
    (61) assignment_operator -> . BANDEQOP
    (62) assignment_operator -> . BOREQOP

    DOTSTAR         reduce using rule 107 (cast_expression -> unary_expression .)
    ARROWSTAR       reduce using rule 107 (cast_expression -> unary_expression .)
    MULTOP          reduce using rule 107 (cast_expression -> unary_expression .)
    DIVOP           reduce using rule 107 (cast_expression -> unary_expression .)
    MODOP           reduce using rule 107 (cast_expression -> unary_expression .)
    PLUSOP          reduce using rule 107 (cast_expression -> unary_expression .)
    MINUSOP         reduce using rule 107 (cast_expression -> unary_expression .)
    LSHIFT          reduce using rule 107 (cast_expression -> unary_expression .)
    RSHIFT          reduce using rule 107 (cast_expression -> unary_expression .)
    LTCOMP          reduce using rule 107 (cast_expression -> unary_expression .)
    GTCOMP          reduce using rule 107 (cast_expression -> unary_expression .)
    LTECOMP         reduce using rule 107 (cast_expression -> unary_expression .)
    GTECOMP         reduce using rule 107 (cast_expression -> unary_expression .)
    EQCOMP          reduce using rule 107 (cast_expression -> unary_expression .)
    NEQCOMP         reduce using rule 107 (cast_expression -> unary_expression .)
    BANDOP          reduce using rule 107 (cast_expression -> unary_expression .)
    XOROP           reduce using rule 107 (cast_expression -> unary_expression .)
    OROP            reduce using rule 107 (cast_expression -> unary_expression .)
    ANDOP           reduce using rule 107 (cast_expression -> unary_expression .)
    QUESMARK        reduce using rule 107 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 107 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 107 (cast_expression -> unary_expression .)
    SEMICOLON       reduce using rule 107 (cast_expression -> unary_expression .)
    RCPAREN         reduce using rule 107 (cast_expression -> unary_expression .)
    COLON           reduce using rule 107 (cast_expression -> unary_expression .)
    RSPAREN         reduce using rule 107 (cast_expression -> unary_expression .)
    RTEMPLATE       reduce using rule 107 (cast_expression -> unary_expression .)
    EQUAL           shift and go to state 238
    MULTEQOP        shift and go to state 239
    DIVEQOP         shift and go to state 240
    MODEQOP         shift and go to state 241
    PLUSEQOP        shift and go to state 242
    MINUSEQOP       shift and go to state 243
    LSHIFTEQOP      shift and go to state 244
    RSHIFTEQOP      shift and go to state 245
    BANDEQOP        shift and go to state 246
    BOREQOP         shift and go to state 247

    assignment_operator            shift and go to state 237

state 153

    (280) initializer -> EQUAL assignment_expression .

    SEMICOLON       reduce using rule 280 (initializer -> EQUAL assignment_expression .)
    COMMA           reduce using rule 280 (initializer -> EQUAL assignment_expression .)


state 154

    (281) initializer -> EQUAL LCPAREN . initializer_list RCPAREN
    (282) initializer -> EQUAL LCPAREN . initializer_list COMMA RCPAREN
    (284) initializer_list -> . assignment_expression
    (285) initializer_list -> . initializer_list COMMA assignment_expression
    (286) initializer_list -> . LCPAREN initializer_list RCPAREN
    (287) initializer_list -> . LCPAREN initializer_list COMMA RCPAREN
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LCPAREN         shift and go to state 248
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    THIS            shift and go to state 144
    LPAREN          shift and go to state 148
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    initializer_list               shift and go to state 249
    assignment_expression          shift and go to state 250
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    cast_expression                shift and go to state 126
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    logical_AND_expression         shift and go to state 114
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    inclusive_OR_expression        shift and go to state 115
    literal                        shift and go to state 143
    exclusive_OR_expression        shift and go to state 116
    AND_expression                 shift and go to state 117
    equality_expression            shift and go to state 118
    relational_expression          shift and go to state 119
    shift_expression               shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 122
    pm_expression                  shift and go to state 125

state 155

    (288) asm_declaration -> ASM LPAREN STRING_L RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 251


state 156

    (205) class_define_specifier -> class_head LCPAREN member_list RCPAREN .

    SEMICOLON       reduce using rule 205 (class_define_specifier -> class_head LCPAREN member_list RCPAREN .)


state 157

    (209) member_list -> member_list access_list .

    RCPAREN         reduce using rule 209 (member_list -> member_list access_list .)
    PRIVATE         reduce using rule 209 (member_list -> member_list access_list .)
    PROTECTED       reduce using rule 209 (member_list -> member_list access_list .)
    PUBLIC          reduce using rule 209 (member_list -> member_list access_list .)


state 158

    (215) member_access_list -> member_declaration member_access_list .

    RCPAREN         reduce using rule 215 (member_access_list -> member_declaration member_access_list .)
    PRIVATE         reduce using rule 215 (member_access_list -> member_declaration member_access_list .)
    PROTECTED       reduce using rule 215 (member_access_list -> member_declaration member_access_list .)
    PUBLIC          reduce using rule 215 (member_access_list -> member_declaration member_access_list .)


state 159

    (213) access_list -> access_specifier COLON . member_access_list
    (214) access_list -> access_specifier COLON .
    (215) member_access_list -> . member_declaration member_access_list
    (216) member_access_list -> . member_declaration
    (217) member_declaration -> . type_specifier_ member_declarator_list SEMICOLON
    (218) member_declaration -> . member_declarator_list SEMICOLON
    (219) member_declaration -> . type_specifier_ SEMICOLON
    (220) member_declaration -> . SEMICOLON
    (221) member_declaration -> . function_definition
    (222) member_declaration -> . class_define_specifier SEMICOLON
    (170) type_specifier_ -> . CONST type_specifier
    (171) type_specifier_ -> . type_specifier
    (223) member_declarator_list -> . member_declarator
    (224) member_declarator_list -> . member_declarator_list COMMA member_declarator
    (227) function_definition -> . type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope
    (205) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (206) class_define_specifier -> . class_head LCPAREN RCPAREN
    (174) type_specifier -> . simple_type_name
    (175) type_specifier -> . complex_type_specifier
    (225) member_declarator -> . declarator pure_specifier
    (226) member_declarator -> . declarator
    (192) class_head -> . class_key IDENTIFIER base_spec
    (193) class_head -> . class_key IDENTIFIER
    (176) simple_type_name -> . CHAR
    (177) simple_type_name -> . SHORT
    (178) simple_type_name -> . INT
    (179) simple_type_name -> . LONG
    (180) simple_type_name -> . SIGNED
    (181) simple_type_name -> . UNSIGNED
    (182) simple_type_name -> . FLOAT
    (183) simple_type_name -> . DOUBLE
    (184) simple_type_name -> . VOID
    (185) simple_type_name -> . STRING
    (186) simple_type_name -> . AUTO
    (187) complex_type_specifier -> . class_key IDENTIFIER
    (188) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (189) complex_type_specifier -> . TYPE IDENTIFIER
    (190) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (115) declarator -> . name
    (116) declarator -> . unary2_operator declarator
    (117) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (118) declarator -> . declarator LSPAREN RSPAREN
    (203) class_key -> . CLASS
    (204) class_key -> . STRUCT
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP

    RCPAREN         reduce using rule 214 (access_list -> access_specifier COLON .)
    PRIVATE         reduce using rule 214 (access_list -> access_specifier COLON .)
    PROTECTED       reduce using rule 214 (access_list -> access_specifier COLON .)
    PUBLIC          reduce using rule 214 (access_list -> access_specifier COLON .)
    SEMICOLON       shift and go to state 83
    CONST           shift and go to state 16
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53

    member_access_list             shift and go to state 252
    member_declaration             shift and go to state 79
    type_specifier_                shift and go to state 81
    member_declarator_list         shift and go to state 82
    function_definition            shift and go to state 84
    class_define_specifier         shift and go to state 85
    type_specifier                 shift and go to state 17
    member_declarator              shift and go to state 89
    declarator                     shift and go to state 90
    class_head                     shift and go to state 19
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 24
    name                           shift and go to state 48
    unary2_operator                shift and go to state 49

state 160

    (217) member_declaration -> type_specifier_ member_declarator_list . SEMICOLON
    (224) member_declarator_list -> member_declarator_list . COMMA member_declarator

    SEMICOLON       shift and go to state 253
    COMMA           shift and go to state 164


state 161

    (219) member_declaration -> type_specifier_ SEMICOLON .

    SEMICOLON       reduce using rule 219 (member_declaration -> type_specifier_ SEMICOLON .)
    CONST           reduce using rule 219 (member_declaration -> type_specifier_ SEMICOLON .)
    CHAR            reduce using rule 219 (member_declaration -> type_specifier_ SEMICOLON .)
    SHORT           reduce using rule 219 (member_declaration -> type_specifier_ SEMICOLON .)
    INT             reduce using rule 219 (member_declaration -> type_specifier_ SEMICOLON .)
    LONG            reduce using rule 219 (member_declaration -> type_specifier_ SEMICOLON .)
    SIGNED          reduce using rule 219 (member_declaration -> type_specifier_ SEMICOLON .)
    UNSIGNED        reduce using rule 219 (member_declaration -> type_specifier_ SEMICOLON .)
    FLOAT           reduce using rule 219 (member_declaration -> type_specifier_ SEMICOLON .)
    DOUBLE          reduce using rule 219 (member_declaration -> type_specifier_ SEMICOLON .)
    VOID            reduce using rule 219 (member_declaration -> type_specifier_ SEMICOLON .)
    STRING          reduce using rule 219 (member_declaration -> type_specifier_ SEMICOLON .)
    AUTO            reduce using rule 219 (member_declaration -> type_specifier_ SEMICOLON .)
    TYPE            reduce using rule 219 (member_declaration -> type_specifier_ SEMICOLON .)
    CLASS           reduce using rule 219 (member_declaration -> type_specifier_ SEMICOLON .)
    STRUCT          reduce using rule 219 (member_declaration -> type_specifier_ SEMICOLON .)
    IDENTIFIER      reduce using rule 219 (member_declaration -> type_specifier_ SEMICOLON .)
    DOUBLEBNOP      reduce using rule 219 (member_declaration -> type_specifier_ SEMICOLON .)
    MULTOP          reduce using rule 219 (member_declaration -> type_specifier_ SEMICOLON .)
    BANDOP          reduce using rule 219 (member_declaration -> type_specifier_ SEMICOLON .)
    RCPAREN         reduce using rule 219 (member_declaration -> type_specifier_ SEMICOLON .)
    PRIVATE         reduce using rule 219 (member_declaration -> type_specifier_ SEMICOLON .)
    PROTECTED       reduce using rule 219 (member_declaration -> type_specifier_ SEMICOLON .)
    PUBLIC          reduce using rule 219 (member_declaration -> type_specifier_ SEMICOLON .)


state 162

    (227) function_definition -> type_specifier_ declarator . func_push_scope arg_list RPAREN fct_body pop_scope
    (117) declarator -> declarator . LSPAREN constant_expression RSPAREN
    (118) declarator -> declarator . LSPAREN RSPAREN
    (225) member_declarator -> declarator . pure_specifier
    (226) member_declarator -> declarator .
    (229) func_push_scope -> . LPAREN
    (191) pure_specifier -> . EQUAL NUMBER

    LSPAREN         shift and go to state 67
    SEMICOLON       reduce using rule 226 (member_declarator -> declarator .)
    COMMA           reduce using rule 226 (member_declarator -> declarator .)
    LPAREN          shift and go to state 255
    EQUAL           shift and go to state 167

    func_push_scope                shift and go to state 254
    pure_specifier                 shift and go to state 166

state 163

    (218) member_declaration -> member_declarator_list SEMICOLON .

    SEMICOLON       reduce using rule 218 (member_declaration -> member_declarator_list SEMICOLON .)
    CONST           reduce using rule 218 (member_declaration -> member_declarator_list SEMICOLON .)
    CHAR            reduce using rule 218 (member_declaration -> member_declarator_list SEMICOLON .)
    SHORT           reduce using rule 218 (member_declaration -> member_declarator_list SEMICOLON .)
    INT             reduce using rule 218 (member_declaration -> member_declarator_list SEMICOLON .)
    LONG            reduce using rule 218 (member_declaration -> member_declarator_list SEMICOLON .)
    SIGNED          reduce using rule 218 (member_declaration -> member_declarator_list SEMICOLON .)
    UNSIGNED        reduce using rule 218 (member_declaration -> member_declarator_list SEMICOLON .)
    FLOAT           reduce using rule 218 (member_declaration -> member_declarator_list SEMICOLON .)
    DOUBLE          reduce using rule 218 (member_declaration -> member_declarator_list SEMICOLON .)
    VOID            reduce using rule 218 (member_declaration -> member_declarator_list SEMICOLON .)
    STRING          reduce using rule 218 (member_declaration -> member_declarator_list SEMICOLON .)
    AUTO            reduce using rule 218 (member_declaration -> member_declarator_list SEMICOLON .)
    TYPE            reduce using rule 218 (member_declaration -> member_declarator_list SEMICOLON .)
    CLASS           reduce using rule 218 (member_declaration -> member_declarator_list SEMICOLON .)
    STRUCT          reduce using rule 218 (member_declaration -> member_declarator_list SEMICOLON .)
    IDENTIFIER      reduce using rule 218 (member_declaration -> member_declarator_list SEMICOLON .)
    DOUBLEBNOP      reduce using rule 218 (member_declaration -> member_declarator_list SEMICOLON .)
    MULTOP          reduce using rule 218 (member_declaration -> member_declarator_list SEMICOLON .)
    BANDOP          reduce using rule 218 (member_declaration -> member_declarator_list SEMICOLON .)
    RCPAREN         reduce using rule 218 (member_declaration -> member_declarator_list SEMICOLON .)
    PRIVATE         reduce using rule 218 (member_declaration -> member_declarator_list SEMICOLON .)
    PROTECTED       reduce using rule 218 (member_declaration -> member_declarator_list SEMICOLON .)
    PUBLIC          reduce using rule 218 (member_declaration -> member_declarator_list SEMICOLON .)


state 164

    (224) member_declarator_list -> member_declarator_list COMMA . member_declarator
    (225) member_declarator -> . declarator pure_specifier
    (226) member_declarator -> . declarator
    (115) declarator -> . name
    (116) declarator -> . unary2_operator declarator
    (117) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (118) declarator -> . declarator LSPAREN RSPAREN
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP

    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53

    member_declarator              shift and go to state 256
    declarator                     shift and go to state 90
    name                           shift and go to state 48
    unary2_operator                shift and go to state 49

state 165

    (222) member_declaration -> class_define_specifier SEMICOLON .

    SEMICOLON       reduce using rule 222 (member_declaration -> class_define_specifier SEMICOLON .)
    CONST           reduce using rule 222 (member_declaration -> class_define_specifier SEMICOLON .)
    CHAR            reduce using rule 222 (member_declaration -> class_define_specifier SEMICOLON .)
    SHORT           reduce using rule 222 (member_declaration -> class_define_specifier SEMICOLON .)
    INT             reduce using rule 222 (member_declaration -> class_define_specifier SEMICOLON .)
    LONG            reduce using rule 222 (member_declaration -> class_define_specifier SEMICOLON .)
    SIGNED          reduce using rule 222 (member_declaration -> class_define_specifier SEMICOLON .)
    UNSIGNED        reduce using rule 222 (member_declaration -> class_define_specifier SEMICOLON .)
    FLOAT           reduce using rule 222 (member_declaration -> class_define_specifier SEMICOLON .)
    DOUBLE          reduce using rule 222 (member_declaration -> class_define_specifier SEMICOLON .)
    VOID            reduce using rule 222 (member_declaration -> class_define_specifier SEMICOLON .)
    STRING          reduce using rule 222 (member_declaration -> class_define_specifier SEMICOLON .)
    AUTO            reduce using rule 222 (member_declaration -> class_define_specifier SEMICOLON .)
    TYPE            reduce using rule 222 (member_declaration -> class_define_specifier SEMICOLON .)
    CLASS           reduce using rule 222 (member_declaration -> class_define_specifier SEMICOLON .)
    STRUCT          reduce using rule 222 (member_declaration -> class_define_specifier SEMICOLON .)
    IDENTIFIER      reduce using rule 222 (member_declaration -> class_define_specifier SEMICOLON .)
    DOUBLEBNOP      reduce using rule 222 (member_declaration -> class_define_specifier SEMICOLON .)
    MULTOP          reduce using rule 222 (member_declaration -> class_define_specifier SEMICOLON .)
    BANDOP          reduce using rule 222 (member_declaration -> class_define_specifier SEMICOLON .)
    RCPAREN         reduce using rule 222 (member_declaration -> class_define_specifier SEMICOLON .)
    PRIVATE         reduce using rule 222 (member_declaration -> class_define_specifier SEMICOLON .)
    PROTECTED       reduce using rule 222 (member_declaration -> class_define_specifier SEMICOLON .)
    PUBLIC          reduce using rule 222 (member_declaration -> class_define_specifier SEMICOLON .)


state 166

    (225) member_declarator -> declarator pure_specifier .

    SEMICOLON       reduce using rule 225 (member_declarator -> declarator pure_specifier .)
    COMMA           reduce using rule 225 (member_declarator -> declarator pure_specifier .)


state 167

    (191) pure_specifier -> EQUAL . NUMBER

    NUMBER          shift and go to state 257


state 168

    (273) template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE . declaration
    (266) declaration -> . type_specifier_ declarator_list SEMICOLON
    (267) declaration -> . asm_declaration
    (268) declaration -> . function_definition
    (269) declaration -> . function_decl
    (270) declaration -> . class_define_specifier SEMICOLON
    (271) declaration -> . template_declaration
    (272) declaration -> . typedef_declarator
    (170) type_specifier_ -> . CONST type_specifier
    (171) type_specifier_ -> . type_specifier
    (288) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (227) function_definition -> . type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope
    (228) function_decl -> . type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope
    (205) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (206) class_define_specifier -> . class_head LCPAREN RCPAREN
    (273) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (172) typedef_declarator -> . TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON
    (173) typedef_declarator -> . TYPEDEF type_specifier_ IDENTIFIER SEMICOLON
    (174) type_specifier -> . simple_type_name
    (175) type_specifier -> . complex_type_specifier
    (192) class_head -> . class_key IDENTIFIER base_spec
    (193) class_head -> . class_key IDENTIFIER
    (176) simple_type_name -> . CHAR
    (177) simple_type_name -> . SHORT
    (178) simple_type_name -> . INT
    (179) simple_type_name -> . LONG
    (180) simple_type_name -> . SIGNED
    (181) simple_type_name -> . UNSIGNED
    (182) simple_type_name -> . FLOAT
    (183) simple_type_name -> . DOUBLE
    (184) simple_type_name -> . VOID
    (185) simple_type_name -> . STRING
    (186) simple_type_name -> . AUTO
    (187) complex_type_specifier -> . class_key IDENTIFIER
    (188) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (189) complex_type_specifier -> . TYPE IDENTIFIER
    (190) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (203) class_key -> . CLASS
    (204) class_key -> . STRUCT

    CONST           shift and go to state 16
    ASM             shift and go to state 18
    TEMPLATE        shift and go to state 20
    TYPEDEF         shift and go to state 21
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38

    declaration                    shift and go to state 258
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    function_decl                  shift and go to state 12
    class_define_specifier         shift and go to state 13
    template_declaration           shift and go to state 14
    typedef_declarator             shift and go to state 15
    type_specifier                 shift and go to state 17
    class_head                     shift and go to state 19
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 24

state 169

    (275) template_argument_list -> template_argument_list COMMA . argument_declaration
    (123) argument_declaration -> . type_specifier_ declarator
    (124) argument_declaration -> . type_specifier_ declarator EQUAL expression
    (125) argument_declaration -> . type_specifier_ abstract_declarator
    (126) argument_declaration -> . type_specifier_
    (170) type_specifier_ -> . CONST type_specifier
    (171) type_specifier_ -> . type_specifier
    (174) type_specifier -> . simple_type_name
    (175) type_specifier -> . complex_type_specifier
    (176) simple_type_name -> . CHAR
    (177) simple_type_name -> . SHORT
    (178) simple_type_name -> . INT
    (179) simple_type_name -> . LONG
    (180) simple_type_name -> . SIGNED
    (181) simple_type_name -> . UNSIGNED
    (182) simple_type_name -> . FLOAT
    (183) simple_type_name -> . DOUBLE
    (184) simple_type_name -> . VOID
    (185) simple_type_name -> . STRING
    (186) simple_type_name -> . AUTO
    (187) complex_type_specifier -> . class_key IDENTIFIER
    (188) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (189) complex_type_specifier -> . TYPE IDENTIFIER
    (190) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (203) class_key -> . CLASS
    (204) class_key -> . STRUCT

    CONST           shift and go to state 16
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38

    argument_declaration           shift and go to state 259
    type_specifier_                shift and go to state 93
    type_specifier                 shift and go to state 17
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 56

state 170

    (123) argument_declaration -> type_specifier_ declarator .
    (124) argument_declaration -> type_specifier_ declarator . EQUAL expression
    (117) declarator -> declarator . LSPAREN constant_expression RSPAREN
    (118) declarator -> declarator . LSPAREN RSPAREN

    RTEMPLATE       reduce using rule 123 (argument_declaration -> type_specifier_ declarator .)
    COMMA           reduce using rule 123 (argument_declaration -> type_specifier_ declarator .)
    RPAREN          reduce using rule 123 (argument_declaration -> type_specifier_ declarator .)
    EQUAL           shift and go to state 260
    LSPAREN         shift and go to state 67


state 171

    (125) argument_declaration -> type_specifier_ abstract_declarator .
    (112) abstract_declarator -> abstract_declarator . LSPAREN constant_expression RSPAREN
    (114) abstract_declarator -> abstract_declarator . LSPAREN RSPAREN

    RTEMPLATE       reduce using rule 125 (argument_declaration -> type_specifier_ abstract_declarator .)
    COMMA           reduce using rule 125 (argument_declaration -> type_specifier_ abstract_declarator .)
    RPAREN          reduce using rule 125 (argument_declaration -> type_specifier_ abstract_declarator .)
    LSPAREN         shift and go to state 174


state 172

    (116) declarator -> unary2_operator . declarator
    (109) abstract_declarator -> unary2_operator .
    (110) abstract_declarator -> unary2_operator . abstract_declarator
    (115) declarator -> . name
    (116) declarator -> . unary2_operator declarator
    (117) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (118) declarator -> . declarator LSPAREN RSPAREN
    (109) abstract_declarator -> . unary2_operator
    (110) abstract_declarator -> . unary2_operator abstract_declarator
    (111) abstract_declarator -> . LSPAREN constant_expression RSPAREN
    (112) abstract_declarator -> . abstract_declarator LSPAREN constant_expression RSPAREN
    (113) abstract_declarator -> . LSPAREN RSPAREN
    (114) abstract_declarator -> . abstract_declarator LSPAREN RSPAREN
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP

    LSPAREN         reduce using rule 109 (abstract_declarator -> unary2_operator .)
    RTEMPLATE       reduce using rule 109 (abstract_declarator -> unary2_operator .)
    COMMA           reduce using rule 109 (abstract_declarator -> unary2_operator .)
    RPAREN          reduce using rule 109 (abstract_declarator -> unary2_operator .)
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53

  ! LSPAREN         [ shift and go to state 97 ]

    unary2_operator                shift and go to state 172
    declarator                     shift and go to state 71
    abstract_declarator            shift and go to state 176
    name                           shift and go to state 48

state 173

    (172) typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 261


state 174

    (112) abstract_declarator -> abstract_declarator LSPAREN . constant_expression RSPAREN
    (114) abstract_declarator -> abstract_declarator LSPAREN . RSPAREN
    (12) constant_expression -> . conditional_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR

    RSPAREN         shift and go to state 263
    LPAREN          shift and go to state 128
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    THIS            shift and go to state 144
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    constant_expression            shift and go to state 262
    conditional_expression         shift and go to state 112
    logical_OR_expression          shift and go to state 113
    logical_AND_expression         shift and go to state 114
    inclusive_OR_expression        shift and go to state 115
    exclusive_OR_expression        shift and go to state 116
    AND_expression                 shift and go to state 117
    equality_expression            shift and go to state 118
    relational_expression          shift and go to state 119
    shift_expression               shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 122
    pm_expression                  shift and go to state 125
    cast_expression                shift and go to state 126
    unary_expression               shift and go to state 127
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    literal                        shift and go to state 143

state 175

    (173) typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .

    CONST           reduce using rule 173 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    ASM             reduce using rule 173 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    TEMPLATE        reduce using rule 173 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    TYPEDEF         reduce using rule 173 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    CHAR            reduce using rule 173 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    SHORT           reduce using rule 173 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    INT             reduce using rule 173 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    LONG            reduce using rule 173 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    SIGNED          reduce using rule 173 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    UNSIGNED        reduce using rule 173 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    FLOAT           reduce using rule 173 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    DOUBLE          reduce using rule 173 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    VOID            reduce using rule 173 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    STRING          reduce using rule 173 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    AUTO            reduce using rule 173 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    TYPE            reduce using rule 173 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    CLASS           reduce using rule 173 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    STRUCT          reduce using rule 173 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    $end            reduce using rule 173 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    RCPAREN         reduce using rule 173 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 173 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    CASE            reduce using rule 173 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    DEFAULT         reduce using rule 173 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    SEMICOLON       reduce using rule 173 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    LCPAREN         reduce using rule 173 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    IF              reduce using rule 173 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    SWITCH          reduce using rule 173 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 173 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    DO              reduce using rule 173 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    FOR             reduce using rule 173 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    BREAK           reduce using rule 173 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    CONTINUE        reduce using rule 173 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    RETURN          reduce using rule 173 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    GOTO            reduce using rule 173 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    TRY             reduce using rule 173 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    THROW           reduce using rule 173 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    DPLUSOP         reduce using rule 173 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    DMINUSOP        reduce using rule 173 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    SIZEOF          reduce using rule 173 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    PLUSOP          reduce using rule 173 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    MINUSOP         reduce using rule 173 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    NOTSYM          reduce using rule 173 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    BNOP            reduce using rule 173 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    MULTOP          reduce using rule 173 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    BANDOP          reduce using rule 173 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    NEW             reduce using rule 173 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    DELETE          reduce using rule 173 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    THIS            reduce using rule 173 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    LPAREN          reduce using rule 173 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    DOUBLEBNOP      reduce using rule 173 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    STRING_L        reduce using rule 173 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    NUMBER          reduce using rule 173 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    SCHAR           reduce using rule 173 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    ELSE            reduce using rule 173 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)


state 176

    (110) abstract_declarator -> unary2_operator abstract_declarator .
    (112) abstract_declarator -> abstract_declarator . LSPAREN constant_expression RSPAREN
    (114) abstract_declarator -> abstract_declarator . LSPAREN RSPAREN

    IDENTIFIER      reduce using rule 110 (abstract_declarator -> unary2_operator abstract_declarator .)
    LSPAREN         reduce using rule 110 (abstract_declarator -> unary2_operator abstract_declarator .)
    RTEMPLATE       reduce using rule 110 (abstract_declarator -> unary2_operator abstract_declarator .)
    COMMA           reduce using rule 110 (abstract_declarator -> unary2_operator abstract_declarator .)
    RPAREN          reduce using rule 110 (abstract_declarator -> unary2_operator abstract_declarator .)

  ! LSPAREN         [ shift and go to state 174 ]


state 177

    (111) abstract_declarator -> LSPAREN constant_expression . RSPAREN

    RSPAREN         shift and go to state 264


state 178

    (113) abstract_declarator -> LSPAREN RSPAREN .

    IDENTIFIER      reduce using rule 113 (abstract_declarator -> LSPAREN RSPAREN .)
    LSPAREN         reduce using rule 113 (abstract_declarator -> LSPAREN RSPAREN .)
    RTEMPLATE       reduce using rule 113 (abstract_declarator -> LSPAREN RSPAREN .)
    COMMA           reduce using rule 113 (abstract_declarator -> LSPAREN RSPAREN .)
    RPAREN          reduce using rule 113 (abstract_declarator -> LSPAREN RSPAREN .)


state 179

    (194) base_spec -> COLON base_list .
    (196) base_list -> base_list . COMMA base_specifier

    LCPAREN         reduce using rule 194 (base_spec -> COLON base_list .)
    COMMA           shift and go to state 265


state 180

    (195) base_list -> base_specifier .

    COMMA           reduce using rule 195 (base_list -> base_specifier .)
    LCPAREN         reduce using rule 195 (base_list -> base_specifier .)


state 181

    (197) base_specifier -> class_key . IDENTIFIER
    (198) base_specifier -> class_key . IDENTIFIER template_class_name

    IDENTIFIER      shift and go to state 266


state 182

    (199) base_specifier -> IDENTIFIER .
    (200) base_specifier -> IDENTIFIER . template_class_name
    (165) template_class_name -> . LTEMPLATE template_arg_list RTEMPLATE

    COMMA           reduce using rule 199 (base_specifier -> IDENTIFIER .)
    LCPAREN         reduce using rule 199 (base_specifier -> IDENTIFIER .)
    LTEMPLATE       shift and go to state 101

    template_class_name            shift and go to state 267

state 183

    (201) base_specifier -> access_specifier . class_key IDENTIFIER
    (202) base_specifier -> access_specifier . class_key IDENTIFIER template_class_name
    (203) class_key -> . CLASS
    (204) class_key -> . STRUCT

    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38

    class_key                      shift and go to state 268

state 184

    (165) template_class_name -> LTEMPLATE template_arg_list . RTEMPLATE
    (167) template_arg_list -> template_arg_list . COMMA type_name

    RTEMPLATE       shift and go to state 269
    COMMA           shift and go to state 270


state 185

    (166) template_arg_list -> type_name .

    RTEMPLATE       reduce using rule 166 (template_arg_list -> type_name .)
    COMMA           reduce using rule 166 (template_arg_list -> type_name .)


state 186

    (168) type_name -> type_specifier_ . abstract_declarator
    (169) type_name -> type_specifier_ .
    (109) abstract_declarator -> . unary2_operator
    (110) abstract_declarator -> . unary2_operator abstract_declarator
    (111) abstract_declarator -> . LSPAREN constant_expression RSPAREN
    (112) abstract_declarator -> . abstract_declarator LSPAREN constant_expression RSPAREN
    (113) abstract_declarator -> . LSPAREN RSPAREN
    (114) abstract_declarator -> . abstract_declarator LSPAREN RSPAREN
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP

    RTEMPLATE       reduce using rule 169 (type_name -> type_specifier_ .)
    COMMA           reduce using rule 169 (type_name -> type_specifier_ .)
    RPAREN          reduce using rule 169 (type_name -> type_specifier_ .)
    LSPAREN         shift and go to state 97
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53

    abstract_declarator            shift and go to state 271
    unary2_operator                shift and go to state 96

state 187

    (283) initializer -> LPAREN . expression_list RPAREN
    (289) expression_list -> . assignment_expression
    (290) expression_list -> . expression_list COMMA assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    THIS            shift and go to state 144
    LPAREN          shift and go to state 148
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    expression_list                shift and go to state 149
    assignment_expression          shift and go to state 150
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    cast_expression                shift and go to state 126
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    logical_AND_expression         shift and go to state 114
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    inclusive_OR_expression        shift and go to state 115
    literal                        shift and go to state 143
    exclusive_OR_expression        shift and go to state 116
    AND_expression                 shift and go to state 117
    equality_expression            shift and go to state 118
    relational_expression          shift and go to state 119
    shift_expression               shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 122
    pm_expression                  shift and go to state 125

state 188

    (227) function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN . fct_body pop_scope
    (228) function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN . SEMICOLON pop_scope
    (230) fct_body -> . compound_statement
    (231) compound_statement -> . LCPAREN statement_list RCPAREN
    (232) compound_statement -> . LCPAREN RCPAREN

    SEMICOLON       shift and go to state 273
    LCPAREN         shift and go to state 275

    fct_body                       shift and go to state 272
    compound_statement             shift and go to state 274

state 189

    (122) argument_declaration_list -> argument_declaration COMMA . argument_declaration_list
    (121) argument_declaration_list -> . argument_declaration
    (122) argument_declaration_list -> . argument_declaration COMMA argument_declaration_list
    (123) argument_declaration -> . type_specifier_ declarator
    (124) argument_declaration -> . type_specifier_ declarator EQUAL expression
    (125) argument_declaration -> . type_specifier_ abstract_declarator
    (126) argument_declaration -> . type_specifier_
    (170) type_specifier_ -> . CONST type_specifier
    (171) type_specifier_ -> . type_specifier
    (174) type_specifier -> . simple_type_name
    (175) type_specifier -> . complex_type_specifier
    (176) simple_type_name -> . CHAR
    (177) simple_type_name -> . SHORT
    (178) simple_type_name -> . INT
    (179) simple_type_name -> . LONG
    (180) simple_type_name -> . SIGNED
    (181) simple_type_name -> . UNSIGNED
    (182) simple_type_name -> . FLOAT
    (183) simple_type_name -> . DOUBLE
    (184) simple_type_name -> . VOID
    (185) simple_type_name -> . STRING
    (186) simple_type_name -> . AUTO
    (187) complex_type_specifier -> . class_key IDENTIFIER
    (188) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (189) complex_type_specifier -> . TYPE IDENTIFIER
    (190) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (203) class_key -> . CLASS
    (204) class_key -> . STRUCT

    CONST           shift and go to state 16
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38

    argument_declaration           shift and go to state 109
    argument_declaration_list      shift and go to state 276
    type_specifier_                shift and go to state 93
    type_specifier                 shift and go to state 17
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 56

state 190

    (117) declarator -> declarator LSPAREN constant_expression RSPAREN .

    LSPAREN         reduce using rule 117 (declarator -> declarator LSPAREN constant_expression RSPAREN .)
    LPAREN          reduce using rule 117 (declarator -> declarator LSPAREN constant_expression RSPAREN .)
    EQUAL           reduce using rule 117 (declarator -> declarator LSPAREN constant_expression RSPAREN .)
    SEMICOLON       reduce using rule 117 (declarator -> declarator LSPAREN constant_expression RSPAREN .)
    COMMA           reduce using rule 117 (declarator -> declarator LSPAREN constant_expression RSPAREN .)
    RTEMPLATE       reduce using rule 117 (declarator -> declarator LSPAREN constant_expression RSPAREN .)
    RPAREN          reduce using rule 117 (declarator -> declarator LSPAREN constant_expression RSPAREN .)


state 191

    (14) conditional_expression -> logical_OR_expression QUESMARK . expression COLON conditional_expression
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    THROW           shift and go to state 216
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    THIS            shift and go to state 144
    LPAREN          shift and go to state 148
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    logical_OR_expression          shift and go to state 113
    expression                     shift and go to state 277
    conditional_expression         shift and go to state 151
    assignment_expression          shift and go to state 214
    throw_expression               shift and go to state 215
    unary_expression               shift and go to state 152
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    cast_expression                shift and go to state 126
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    logical_AND_expression         shift and go to state 114
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    inclusive_OR_expression        shift and go to state 115
    literal                        shift and go to state 143
    exclusive_OR_expression        shift and go to state 116
    AND_expression                 shift and go to state 117
    equality_expression            shift and go to state 118
    relational_expression          shift and go to state 119
    shift_expression               shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 122
    pm_expression                  shift and go to state 125

state 192

    (16) logical_OR_expression -> logical_OR_expression OROP . logical_AND_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR

    LPAREN          shift and go to state 128
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    THIS            shift and go to state 144
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    logical_AND_expression         shift and go to state 278
    inclusive_OR_expression        shift and go to state 115
    exclusive_OR_expression        shift and go to state 116
    AND_expression                 shift and go to state 117
    equality_expression            shift and go to state 118
    relational_expression          shift and go to state 119
    shift_expression               shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 122
    pm_expression                  shift and go to state 125
    cast_expression                shift and go to state 126
    unary_expression               shift and go to state 127
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    literal                        shift and go to state 143

state 193

    (18) logical_AND_expression -> logical_AND_expression ANDOP . inclusive_OR_expression
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR

    LPAREN          shift and go to state 128
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    THIS            shift and go to state 144
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    inclusive_OR_expression        shift and go to state 279
    exclusive_OR_expression        shift and go to state 116
    AND_expression                 shift and go to state 117
    equality_expression            shift and go to state 118
    relational_expression          shift and go to state 119
    shift_expression               shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 122
    pm_expression                  shift and go to state 125
    cast_expression                shift and go to state 126
    unary_expression               shift and go to state 127
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    literal                        shift and go to state 143

state 194

    (20) inclusive_OR_expression -> inclusive_OR_expression OROP . exclusive_OR_expression
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR

    LPAREN          shift and go to state 128
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    THIS            shift and go to state 144
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    exclusive_OR_expression        shift and go to state 280
    AND_expression                 shift and go to state 117
    equality_expression            shift and go to state 118
    relational_expression          shift and go to state 119
    shift_expression               shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 122
    pm_expression                  shift and go to state 125
    cast_expression                shift and go to state 126
    unary_expression               shift and go to state 127
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    literal                        shift and go to state 143

state 195

    (22) exclusive_OR_expression -> exclusive_OR_expression XOROP . AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR

    LPAREN          shift and go to state 128
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    THIS            shift and go to state 144
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    AND_expression                 shift and go to state 281
    equality_expression            shift and go to state 118
    relational_expression          shift and go to state 119
    shift_expression               shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 122
    pm_expression                  shift and go to state 125
    cast_expression                shift and go to state 126
    unary_expression               shift and go to state 127
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    literal                        shift and go to state 143

state 196

    (24) AND_expression -> AND_expression BANDOP . equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR

    LPAREN          shift and go to state 128
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    THIS            shift and go to state 144
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    equality_expression            shift and go to state 282
    relational_expression          shift and go to state 119
    shift_expression               shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 122
    pm_expression                  shift and go to state 125
    cast_expression                shift and go to state 126
    unary_expression               shift and go to state 127
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    literal                        shift and go to state 143

state 197

    (26) equality_expression -> equality_expression EQCOMP . relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR

    LPAREN          shift and go to state 128
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    THIS            shift and go to state 144
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    relational_expression          shift and go to state 283
    shift_expression               shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 122
    pm_expression                  shift and go to state 125
    cast_expression                shift and go to state 126
    unary_expression               shift and go to state 127
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    literal                        shift and go to state 143

state 198

    (27) equality_expression -> equality_expression NEQCOMP . relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR

    LPAREN          shift and go to state 128
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    THIS            shift and go to state 144
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    relational_expression          shift and go to state 284
    shift_expression               shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 122
    pm_expression                  shift and go to state 125
    cast_expression                shift and go to state 126
    unary_expression               shift and go to state 127
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    literal                        shift and go to state 143

state 199

    (29) relational_expression -> relational_expression LTCOMP . shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR

    LPAREN          shift and go to state 128
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    THIS            shift and go to state 144
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    shift_expression               shift and go to state 285
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 122
    pm_expression                  shift and go to state 125
    cast_expression                shift and go to state 126
    unary_expression               shift and go to state 127
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    literal                        shift and go to state 143

state 200

    (30) relational_expression -> relational_expression GTCOMP . shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR

    LPAREN          shift and go to state 128
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    THIS            shift and go to state 144
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    shift_expression               shift and go to state 286
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 122
    pm_expression                  shift and go to state 125
    cast_expression                shift and go to state 126
    unary_expression               shift and go to state 127
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    literal                        shift and go to state 143

state 201

    (31) relational_expression -> relational_expression LTECOMP . shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR

    LPAREN          shift and go to state 128
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    THIS            shift and go to state 144
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    shift_expression               shift and go to state 287
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 122
    pm_expression                  shift and go to state 125
    cast_expression                shift and go to state 126
    unary_expression               shift and go to state 127
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    literal                        shift and go to state 143

state 202

    (32) relational_expression -> relational_expression GTECOMP . shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR

    LPAREN          shift and go to state 128
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    THIS            shift and go to state 144
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    shift_expression               shift and go to state 288
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 122
    pm_expression                  shift and go to state 125
    cast_expression                shift and go to state 126
    unary_expression               shift and go to state 127
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    literal                        shift and go to state 143

state 203

    (34) shift_expression -> shift_expression LSHIFT . additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR

    LPAREN          shift and go to state 128
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    THIS            shift and go to state 144
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    additive_expression            shift and go to state 289
    multiplicative_expression      shift and go to state 122
    pm_expression                  shift and go to state 125
    cast_expression                shift and go to state 126
    unary_expression               shift and go to state 127
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    literal                        shift and go to state 143

state 204

    (35) shift_expression -> shift_expression RSHIFT . additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR

    LPAREN          shift and go to state 128
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    THIS            shift and go to state 144
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    additive_expression            shift and go to state 290
    multiplicative_expression      shift and go to state 122
    pm_expression                  shift and go to state 125
    cast_expression                shift and go to state 126
    unary_expression               shift and go to state 127
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    literal                        shift and go to state 143

state 205

    (37) additive_expression -> additive_expression PLUSOP . multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR

    LPAREN          shift and go to state 128
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    THIS            shift and go to state 144
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    multiplicative_expression      shift and go to state 291
    pm_expression                  shift and go to state 125
    cast_expression                shift and go to state 126
    unary_expression               shift and go to state 127
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    literal                        shift and go to state 143

state 206

    (38) additive_expression -> additive_expression MINUSOP . multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR

    LPAREN          shift and go to state 128
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    THIS            shift and go to state 144
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    multiplicative_expression      shift and go to state 292
    pm_expression                  shift and go to state 125
    cast_expression                shift and go to state 126
    unary_expression               shift and go to state 127
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    literal                        shift and go to state 143

state 207

    (40) multiplicative_expression -> multiplicative_expression MULTOP . pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR

    LPAREN          shift and go to state 128
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    THIS            shift and go to state 144
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    pm_expression                  shift and go to state 293
    cast_expression                shift and go to state 126
    unary_expression               shift and go to state 127
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    literal                        shift and go to state 143

state 208

    (41) multiplicative_expression -> multiplicative_expression DIVOP . pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR

    LPAREN          shift and go to state 128
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    THIS            shift and go to state 144
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    pm_expression                  shift and go to state 294
    cast_expression                shift and go to state 126
    unary_expression               shift and go to state 127
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    literal                        shift and go to state 143

state 209

    (42) multiplicative_expression -> multiplicative_expression MODOP . pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR

    LPAREN          shift and go to state 128
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    THIS            shift and go to state 144
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    pm_expression                  shift and go to state 295
    cast_expression                shift and go to state 126
    unary_expression               shift and go to state 127
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    literal                        shift and go to state 143

state 210

    (44) pm_expression -> pm_expression DOTSTAR . cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR

    LPAREN          shift and go to state 128
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    THIS            shift and go to state 144
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    cast_expression                shift and go to state 296
    unary_expression               shift and go to state 127
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    literal                        shift and go to state 143

state 211

    (45) pm_expression -> pm_expression ARROWSTAR . cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR

    LPAREN          shift and go to state 128
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    THIS            shift and go to state 144
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    cast_expression                shift and go to state 297
    unary_expression               shift and go to state 127
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    literal                        shift and go to state 143

state 212

    (108) cast_expression -> LPAREN type_name . RPAREN cast_expression

    RPAREN          shift and go to state 298


state 213

    (103) primary_expression -> LPAREN expression . RPAREN
    (48) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 299
    COMMA           shift and go to state 300


state 214

    (46) expression -> assignment_expression .

    RPAREN          reduce using rule 46 (expression -> assignment_expression .)
    COMMA           reduce using rule 46 (expression -> assignment_expression .)
    COLON           reduce using rule 46 (expression -> assignment_expression .)
    RSPAREN         reduce using rule 46 (expression -> assignment_expression .)
    RTEMPLATE       reduce using rule 46 (expression -> assignment_expression .)
    SEMICOLON       reduce using rule 46 (expression -> assignment_expression .)


state 215

    (47) expression -> throw_expression .

    RPAREN          reduce using rule 47 (expression -> throw_expression .)
    COMMA           reduce using rule 47 (expression -> throw_expression .)
    COLON           reduce using rule 47 (expression -> throw_expression .)
    RSPAREN         reduce using rule 47 (expression -> throw_expression .)
    RTEMPLATE       reduce using rule 47 (expression -> throw_expression .)
    SEMICOLON       reduce using rule 47 (expression -> throw_expression .)


state 216

    (49) throw_expression -> THROW . expression
    (50) throw_expression -> THROW .
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          reduce using rule 50 (throw_expression -> THROW .)
    COMMA           reduce using rule 50 (throw_expression -> THROW .)
    COLON           reduce using rule 50 (throw_expression -> THROW .)
    RSPAREN         reduce using rule 50 (throw_expression -> THROW .)
    RTEMPLATE       reduce using rule 50 (throw_expression -> THROW .)
    SEMICOLON       reduce using rule 50 (throw_expression -> THROW .)
    THROW           shift and go to state 216
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    THIS            shift and go to state 144
    LPAREN          shift and go to state 148
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    expression                     shift and go to state 301
    assignment_expression          shift and go to state 214
    throw_expression               shift and go to state 215
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    cast_expression                shift and go to state 126
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    logical_AND_expression         shift and go to state 114
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    inclusive_OR_expression        shift and go to state 115
    literal                        shift and go to state 143
    exclusive_OR_expression        shift and go to state 116
    AND_expression                 shift and go to state 117
    equality_expression            shift and go to state 118
    relational_expression          shift and go to state 119
    shift_expression               shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 122
    pm_expression                  shift and go to state 125

state 217

    (92) postfix_expression -> postfix_expression LSPAREN . expression RSPAREN
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    THROW           shift and go to state 216
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    THIS            shift and go to state 144
    LPAREN          shift and go to state 148
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    postfix_expression             shift and go to state 129
    expression                     shift and go to state 302
    assignment_expression          shift and go to state 214
    throw_expression               shift and go to state 215
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    logical_OR_expression          shift and go to state 113
    unary1_operator                shift and go to state 132
    cast_expression                shift and go to state 126
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    logical_AND_expression         shift and go to state 114
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    inclusive_OR_expression        shift and go to state 115
    literal                        shift and go to state 143
    exclusive_OR_expression        shift and go to state 116
    AND_expression                 shift and go to state 117
    equality_expression            shift and go to state 118
    relational_expression          shift and go to state 119
    shift_expression               shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 122
    pm_expression                  shift and go to state 125

state 218

    (93) postfix_expression -> postfix_expression LPAREN . expression_list RPAREN
    (95) postfix_expression -> postfix_expression LPAREN . RPAREN
    (289) expression_list -> . assignment_expression
    (290) expression_list -> . expression_list COMMA assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 304
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    THIS            shift and go to state 144
    LPAREN          shift and go to state 148
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    postfix_expression             shift and go to state 129
    expression_list                shift and go to state 303
    assignment_expression          shift and go to state 150
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    logical_OR_expression          shift and go to state 113
    unary1_operator                shift and go to state 132
    cast_expression                shift and go to state 126
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    logical_AND_expression         shift and go to state 114
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    inclusive_OR_expression        shift and go to state 115
    literal                        shift and go to state 143
    exclusive_OR_expression        shift and go to state 116
    AND_expression                 shift and go to state 117
    equality_expression            shift and go to state 118
    relational_expression          shift and go to state 119
    shift_expression               shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 122
    pm_expression                  shift and go to state 125

state 219

    (94) postfix_expression -> postfix_expression template_class_name . LPAREN expression_list RPAREN

    LPAREN          shift and go to state 305


state 220

    (96) postfix_expression -> postfix_expression DOT . name
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER

    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51

    name                           shift and go to state 306

state 221

    (97) postfix_expression -> postfix_expression ARROW . name
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER

    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51

    name                           shift and go to state 307

state 222

    (98) postfix_expression -> postfix_expression DPLUSOP .

    LSPAREN         reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    LPAREN          reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    DOT             reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    ARROW           reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    DPLUSOP         reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    DMINUSOP        reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    LTEMPLATE       reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    DOTSTAR         reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    ARROWSTAR       reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    MULTOP          reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    DIVOP           reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    MODOP           reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    PLUSOP          reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    MINUSOP         reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    LSHIFT          reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    RSHIFT          reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    LTCOMP          reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    GTCOMP          reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    LTECOMP         reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    GTECOMP         reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    EQCOMP          reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    NEQCOMP         reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    BANDOP          reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    XOROP           reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    OROP            reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    ANDOP           reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    QUESMARK        reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    RSPAREN         reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    EQUAL           reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    MULTEQOP        reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    DIVEQOP         reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    MODEQOP         reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    PLUSEQOP        reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    MINUSEQOP       reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    LSHIFTEQOP      reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    RSHIFTEQOP      reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    BANDEQOP        reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    BOREQOP         reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    RPAREN          reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    COMMA           reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    SEMICOLON       reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    RCPAREN         reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    COLON           reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    RTEMPLATE       reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)


state 223

    (99) postfix_expression -> postfix_expression DMINUSOP .

    LSPAREN         reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    LPAREN          reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    DOT             reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    ARROW           reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    DPLUSOP         reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    DMINUSOP        reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    LTEMPLATE       reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    DOTSTAR         reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    ARROWSTAR       reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    MULTOP          reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    DIVOP           reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    MODOP           reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    PLUSOP          reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    MINUSOP         reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    LSHIFT          reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    RSHIFT          reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    LTCOMP          reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    GTCOMP          reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    LTECOMP         reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    GTECOMP         reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    EQCOMP          reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    NEQCOMP         reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    BANDOP          reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    XOROP           reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    OROP            reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    ANDOP           reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    QUESMARK        reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    RSPAREN         reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    EQUAL           reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    MULTEQOP        reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    DIVEQOP         reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    MODEQOP         reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    PLUSEQOP        reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    MINUSEQOP       reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    LSHIFTEQOP      reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    RSHIFTEQOP      reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    BANDEQOP        reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    BOREQOP         reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    RPAREN          reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    COMMA           reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    SEMICOLON       reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    RCPAREN         reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    COLON           reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    RTEMPLATE       reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)


state 224

    (64) unary_expression -> DPLUSOP unary_expression .

    DOTSTAR         reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    ARROWSTAR       reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    MULTOP          reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    DIVOP           reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    MODOP           reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    PLUSOP          reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    MINUSOP         reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    LSHIFT          reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    RSHIFT          reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    LTCOMP          reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    GTCOMP          reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    LTECOMP         reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    GTECOMP         reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    EQCOMP          reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    NEQCOMP         reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    BANDOP          reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    XOROP           reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    OROP            reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    ANDOP           reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    QUESMARK        reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    RSPAREN         reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    EQUAL           reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    MULTEQOP        reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    DIVEQOP         reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    MODEQOP         reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    PLUSEQOP        reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    MINUSEQOP       reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    LSHIFTEQOP      reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    RSHIFTEQOP      reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    BANDEQOP        reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    BOREQOP         reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    RPAREN          reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    COMMA           reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    SEMICOLON       reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    RCPAREN         reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    COLON           reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    RTEMPLATE       reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)


state 225

    (103) primary_expression -> LPAREN . expression RPAREN
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    THROW           shift and go to state 216
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    THIS            shift and go to state 144
    LPAREN          shift and go to state 148
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    expression                     shift and go to state 213
    assignment_expression          shift and go to state 214
    throw_expression               shift and go to state 215
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    cast_expression                shift and go to state 126
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    logical_AND_expression         shift and go to state 114
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    inclusive_OR_expression        shift and go to state 115
    literal                        shift and go to state 143
    exclusive_OR_expression        shift and go to state 116
    AND_expression                 shift and go to state 117
    equality_expression            shift and go to state 118
    relational_expression          shift and go to state 119
    shift_expression               shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 122
    pm_expression                  shift and go to state 125

state 226

    (65) unary_expression -> DMINUSOP unary_expression .

    DOTSTAR         reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    ARROWSTAR       reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    MULTOP          reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    DIVOP           reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    MODOP           reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    PLUSOP          reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    MINUSOP         reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    LSHIFT          reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    RSHIFT          reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    LTCOMP          reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    GTCOMP          reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    LTECOMP         reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    GTECOMP         reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    EQCOMP          reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    NEQCOMP         reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    BANDOP          reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    XOROP           reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    OROP            reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    ANDOP           reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    QUESMARK        reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    RSPAREN         reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    EQUAL           reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    MULTEQOP        reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    DIVEQOP         reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    MODEQOP         reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    PLUSEQOP        reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    MINUSEQOP       reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    LSHIFTEQOP      reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    RSHIFTEQOP      reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    BANDEQOP        reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    BOREQOP         reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    RPAREN          reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    COMMA           reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    SEMICOLON       reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    RCPAREN         reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    COLON           reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    RTEMPLATE       reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)


state 227

    (66) unary_expression -> unary1_operator cast_expression .

    DOTSTAR         reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    ARROWSTAR       reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    MULTOP          reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    DIVOP           reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    MODOP           reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    PLUSOP          reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    MINUSOP         reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    LSHIFT          reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    RSHIFT          reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    LTCOMP          reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    GTCOMP          reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    LTECOMP         reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    GTECOMP         reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    EQCOMP          reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    NEQCOMP         reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    BANDOP          reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    XOROP           reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    OROP            reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    ANDOP           reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    QUESMARK        reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    RSPAREN         reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    EQUAL           reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    MULTEQOP        reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    DIVEQOP         reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    MODEQOP         reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    PLUSEQOP        reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    MINUSEQOP       reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    LSHIFTEQOP      reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    RSHIFTEQOP      reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    BANDEQOP        reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    BOREQOP         reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    RPAREN          reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    COMMA           reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    SEMICOLON       reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    RCPAREN         reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    COLON           reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    RTEMPLATE       reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)


state 228

    (67) unary_expression -> unary2_operator cast_expression .

    DOTSTAR         reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    ARROWSTAR       reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    MULTOP          reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    DIVOP           reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    MODOP           reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    PLUSOP          reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    MINUSOP         reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    LSHIFT          reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    RSHIFT          reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    LTCOMP          reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    GTCOMP          reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    LTECOMP         reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    GTECOMP         reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    EQCOMP          reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    NEQCOMP         reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    BANDOP          reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    XOROP           reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    OROP            reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    ANDOP           reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    QUESMARK        reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    RSPAREN         reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    EQUAL           reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    MULTEQOP        reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    DIVEQOP         reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    MODEQOP         reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    PLUSEQOP        reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    MINUSEQOP       reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    LSHIFTEQOP      reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    RSHIFTEQOP      reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    BANDEQOP        reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    BOREQOP         reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    RPAREN          reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    COMMA           reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    SEMICOLON       reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    RCPAREN         reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    COLON           reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    RTEMPLATE       reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)


state 229

    (68) unary_expression -> SIZEOF unary_expression .

    DOTSTAR         reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    ARROWSTAR       reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    MULTOP          reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    DIVOP           reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    MODOP           reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    PLUSOP          reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    MINUSOP         reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    LSHIFT          reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    RSHIFT          reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    LTCOMP          reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    GTCOMP          reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    LTECOMP         reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    GTECOMP         reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    EQCOMP          reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    NEQCOMP         reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    BANDOP          reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    XOROP           reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    OROP            reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    ANDOP           reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    QUESMARK        reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    RSPAREN         reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    EQUAL           reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    MULTEQOP        reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    DIVEQOP         reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    MODEQOP         reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    PLUSEQOP        reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    MINUSEQOP       reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    LSHIFTEQOP      reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    RSHIFTEQOP      reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    BANDEQOP        reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    BOREQOP         reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    RPAREN          reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    COMMA           reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    SEMICOLON       reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    RCPAREN         reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    COLON           reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    RTEMPLATE       reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)


state 230

    (69) unary_expression -> SIZEOF LPAREN . type_name RPAREN
    (103) primary_expression -> LPAREN . expression RPAREN
    (168) type_name -> . type_specifier_ abstract_declarator
    (169) type_name -> . type_specifier_
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (170) type_specifier_ -> . CONST type_specifier
    (171) type_specifier_ -> . type_specifier
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (174) type_specifier -> . simple_type_name
    (175) type_specifier -> . complex_type_specifier
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (176) simple_type_name -> . CHAR
    (177) simple_type_name -> . SHORT
    (178) simple_type_name -> . INT
    (179) simple_type_name -> . LONG
    (180) simple_type_name -> . SIGNED
    (181) simple_type_name -> . UNSIGNED
    (182) simple_type_name -> . FLOAT
    (183) simple_type_name -> . DOUBLE
    (184) simple_type_name -> . VOID
    (185) simple_type_name -> . STRING
    (186) simple_type_name -> . AUTO
    (187) complex_type_specifier -> . class_key IDENTIFIER
    (188) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (189) complex_type_specifier -> . TYPE IDENTIFIER
    (190) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (203) class_key -> . CLASS
    (204) class_key -> . STRUCT
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    CONST           shift and go to state 16
    THROW           shift and go to state 216
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38
    THIS            shift and go to state 144
    LPAREN          shift and go to state 148
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    type_name                      shift and go to state 308
    expression                     shift and go to state 213
    type_specifier_                shift and go to state 186
    assignment_expression          shift and go to state 214
    throw_expression               shift and go to state 215
    type_specifier                 shift and go to state 17
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    cast_expression                shift and go to state 126
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    class_key                      shift and go to state 56
    logical_AND_expression         shift and go to state 114
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    inclusive_OR_expression        shift and go to state 115
    literal                        shift and go to state 143
    exclusive_OR_expression        shift and go to state 116
    AND_expression                 shift and go to state 117
    equality_expression            shift and go to state 118
    relational_expression          shift and go to state 119
    shift_expression               shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 122
    pm_expression                  shift and go to state 125

state 231

    (73) allocation_expression -> NEW new_type_name . new_initializer
    (74) allocation_expression -> NEW new_type_name .
    (83) new_initializer -> . LPAREN initializer_list RPAREN
    (84) new_initializer -> . LPAREN RPAREN

    DOTSTAR         reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    ARROWSTAR       reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    MULTOP          reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    DIVOP           reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    MODOP           reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    PLUSOP          reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    MINUSOP         reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    LSHIFT          reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    RSHIFT          reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    LTCOMP          reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    GTCOMP          reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    LTECOMP         reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    GTECOMP         reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    EQCOMP          reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    NEQCOMP         reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    BANDOP          reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    XOROP           reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    OROP            reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    ANDOP           reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    QUESMARK        reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    RSPAREN         reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    EQUAL           reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    MULTEQOP        reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    DIVEQOP         reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    MODEQOP         reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    PLUSEQOP        reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    MINUSEQOP       reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    LSHIFTEQOP      reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    RSHIFTEQOP      reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    BANDEQOP        reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    BOREQOP         reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    RPAREN          reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    COMMA           reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    SEMICOLON       reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    RCPAREN         reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    COLON           reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    RTEMPLATE       reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    LPAREN          shift and go to state 310

    new_initializer                shift and go to state 309

state 232

    (75) allocation_expression -> NEW LPAREN . type_name RPAREN new_initializer
    (76) allocation_expression -> NEW LPAREN . type_name RPAREN
    (168) type_name -> . type_specifier_ abstract_declarator
    (169) type_name -> . type_specifier_
    (170) type_specifier_ -> . CONST type_specifier
    (171) type_specifier_ -> . type_specifier
    (174) type_specifier -> . simple_type_name
    (175) type_specifier -> . complex_type_specifier
    (176) simple_type_name -> . CHAR
    (177) simple_type_name -> . SHORT
    (178) simple_type_name -> . INT
    (179) simple_type_name -> . LONG
    (180) simple_type_name -> . SIGNED
    (181) simple_type_name -> . UNSIGNED
    (182) simple_type_name -> . FLOAT
    (183) simple_type_name -> . DOUBLE
    (184) simple_type_name -> . VOID
    (185) simple_type_name -> . STRING
    (186) simple_type_name -> . AUTO
    (187) complex_type_specifier -> . class_key IDENTIFIER
    (188) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (189) complex_type_specifier -> . TYPE IDENTIFIER
    (190) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (203) class_key -> . CLASS
    (204) class_key -> . STRUCT

    CONST           shift and go to state 16
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38

    type_name                      shift and go to state 311
    type_specifier_                shift and go to state 186
    type_specifier                 shift and go to state 17
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 56

state 233

    (77) new_type_name -> type_specifier_ . new_declarator
    (78) new_type_name -> type_specifier_ .
    (79) new_declarator -> . new_declarator MULTOP
    (80) new_declarator -> . MULTOP
    (81) new_declarator -> . new_declarator LSPAREN expression RSPAREN
    (82) new_declarator -> . LSPAREN expression RSPAREN

  ! shift/reduce conflict for MULTOP resolved as shift
    LPAREN          reduce using rule 78 (new_type_name -> type_specifier_ .)
    DOTSTAR         reduce using rule 78 (new_type_name -> type_specifier_ .)
    ARROWSTAR       reduce using rule 78 (new_type_name -> type_specifier_ .)
    DIVOP           reduce using rule 78 (new_type_name -> type_specifier_ .)
    MODOP           reduce using rule 78 (new_type_name -> type_specifier_ .)
    PLUSOP          reduce using rule 78 (new_type_name -> type_specifier_ .)
    MINUSOP         reduce using rule 78 (new_type_name -> type_specifier_ .)
    LSHIFT          reduce using rule 78 (new_type_name -> type_specifier_ .)
    RSHIFT          reduce using rule 78 (new_type_name -> type_specifier_ .)
    LTCOMP          reduce using rule 78 (new_type_name -> type_specifier_ .)
    GTCOMP          reduce using rule 78 (new_type_name -> type_specifier_ .)
    LTECOMP         reduce using rule 78 (new_type_name -> type_specifier_ .)
    GTECOMP         reduce using rule 78 (new_type_name -> type_specifier_ .)
    EQCOMP          reduce using rule 78 (new_type_name -> type_specifier_ .)
    NEQCOMP         reduce using rule 78 (new_type_name -> type_specifier_ .)
    BANDOP          reduce using rule 78 (new_type_name -> type_specifier_ .)
    XOROP           reduce using rule 78 (new_type_name -> type_specifier_ .)
    OROP            reduce using rule 78 (new_type_name -> type_specifier_ .)
    ANDOP           reduce using rule 78 (new_type_name -> type_specifier_ .)
    QUESMARK        reduce using rule 78 (new_type_name -> type_specifier_ .)
    RSPAREN         reduce using rule 78 (new_type_name -> type_specifier_ .)
    EQUAL           reduce using rule 78 (new_type_name -> type_specifier_ .)
    MULTEQOP        reduce using rule 78 (new_type_name -> type_specifier_ .)
    DIVEQOP         reduce using rule 78 (new_type_name -> type_specifier_ .)
    MODEQOP         reduce using rule 78 (new_type_name -> type_specifier_ .)
    PLUSEQOP        reduce using rule 78 (new_type_name -> type_specifier_ .)
    MINUSEQOP       reduce using rule 78 (new_type_name -> type_specifier_ .)
    LSHIFTEQOP      reduce using rule 78 (new_type_name -> type_specifier_ .)
    RSHIFTEQOP      reduce using rule 78 (new_type_name -> type_specifier_ .)
    BANDEQOP        reduce using rule 78 (new_type_name -> type_specifier_ .)
    BOREQOP         reduce using rule 78 (new_type_name -> type_specifier_ .)
    RPAREN          reduce using rule 78 (new_type_name -> type_specifier_ .)
    COMMA           reduce using rule 78 (new_type_name -> type_specifier_ .)
    SEMICOLON       reduce using rule 78 (new_type_name -> type_specifier_ .)
    RCPAREN         reduce using rule 78 (new_type_name -> type_specifier_ .)
    COLON           reduce using rule 78 (new_type_name -> type_specifier_ .)
    RTEMPLATE       reduce using rule 78 (new_type_name -> type_specifier_ .)
    MULTOP          shift and go to state 313
    LSPAREN         shift and go to state 314

  ! MULTOP          [ reduce using rule 78 (new_type_name -> type_specifier_ .) ]

    new_declarator                 shift and go to state 312

state 234

    (72) deallocation_expression -> DELETE cast_expression .

    DOTSTAR         reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    ARROWSTAR       reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    MULTOP          reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    DIVOP           reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    MODOP           reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    PLUSOP          reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    MINUSOP         reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    LSHIFT          reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    RSHIFT          reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    LTCOMP          reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    GTCOMP          reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    LTECOMP         reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    GTECOMP         reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    EQCOMP          reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    NEQCOMP         reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    BANDOP          reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    XOROP           reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    OROP            reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    ANDOP           reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    QUESMARK        reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    RSPAREN         reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    EQUAL           reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    MULTEQOP        reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    DIVEQOP         reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    MODEQOP         reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    PLUSEQOP        reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    MINUSEQOP       reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    LSHIFTEQOP      reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    RSHIFTEQOP      reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    BANDEQOP        reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    BOREQOP         reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    RPAREN          reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    COMMA           reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    SEMICOLON       reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    RCPAREN         reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    COLON           reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    RTEMPLATE       reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)


state 235

    (283) initializer -> LPAREN expression_list RPAREN .

    SEMICOLON       reduce using rule 283 (initializer -> LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 283 (initializer -> LPAREN expression_list RPAREN .)


state 236

    (290) expression_list -> expression_list COMMA . assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    THIS            shift and go to state 144
    LPAREN          shift and go to state 148
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    assignment_expression          shift and go to state 315
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    cast_expression                shift and go to state 126
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    logical_AND_expression         shift and go to state 114
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    inclusive_OR_expression        shift and go to state 115
    literal                        shift and go to state 143
    exclusive_OR_expression        shift and go to state 116
    AND_expression                 shift and go to state 117
    equality_expression            shift and go to state 118
    relational_expression          shift and go to state 119
    shift_expression               shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 122
    pm_expression                  shift and go to state 125

state 237

    (52) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    THIS            shift and go to state 144
    LPAREN          shift and go to state 148
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    unary_expression               shift and go to state 152
    assignment_expression          shift and go to state 316
    conditional_expression         shift and go to state 151
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    cast_expression                shift and go to state 126
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    logical_AND_expression         shift and go to state 114
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    inclusive_OR_expression        shift and go to state 115
    literal                        shift and go to state 143
    exclusive_OR_expression        shift and go to state 116
    AND_expression                 shift and go to state 117
    equality_expression            shift and go to state 118
    relational_expression          shift and go to state 119
    shift_expression               shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 122
    pm_expression                  shift and go to state 125

state 238

    (53) assignment_operator -> EQUAL .

    DPLUSOP         reduce using rule 53 (assignment_operator -> EQUAL .)
    DMINUSOP        reduce using rule 53 (assignment_operator -> EQUAL .)
    SIZEOF          reduce using rule 53 (assignment_operator -> EQUAL .)
    PLUSOP          reduce using rule 53 (assignment_operator -> EQUAL .)
    MINUSOP         reduce using rule 53 (assignment_operator -> EQUAL .)
    NOTSYM          reduce using rule 53 (assignment_operator -> EQUAL .)
    BNOP            reduce using rule 53 (assignment_operator -> EQUAL .)
    MULTOP          reduce using rule 53 (assignment_operator -> EQUAL .)
    BANDOP          reduce using rule 53 (assignment_operator -> EQUAL .)
    NEW             reduce using rule 53 (assignment_operator -> EQUAL .)
    DELETE          reduce using rule 53 (assignment_operator -> EQUAL .)
    THIS            reduce using rule 53 (assignment_operator -> EQUAL .)
    LPAREN          reduce using rule 53 (assignment_operator -> EQUAL .)
    IDENTIFIER      reduce using rule 53 (assignment_operator -> EQUAL .)
    DOUBLEBNOP      reduce using rule 53 (assignment_operator -> EQUAL .)
    STRING_L        reduce using rule 53 (assignment_operator -> EQUAL .)
    NUMBER          reduce using rule 53 (assignment_operator -> EQUAL .)
    SCHAR           reduce using rule 53 (assignment_operator -> EQUAL .)


state 239

    (54) assignment_operator -> MULTEQOP .

    DPLUSOP         reduce using rule 54 (assignment_operator -> MULTEQOP .)
    DMINUSOP        reduce using rule 54 (assignment_operator -> MULTEQOP .)
    SIZEOF          reduce using rule 54 (assignment_operator -> MULTEQOP .)
    PLUSOP          reduce using rule 54 (assignment_operator -> MULTEQOP .)
    MINUSOP         reduce using rule 54 (assignment_operator -> MULTEQOP .)
    NOTSYM          reduce using rule 54 (assignment_operator -> MULTEQOP .)
    BNOP            reduce using rule 54 (assignment_operator -> MULTEQOP .)
    MULTOP          reduce using rule 54 (assignment_operator -> MULTEQOP .)
    BANDOP          reduce using rule 54 (assignment_operator -> MULTEQOP .)
    NEW             reduce using rule 54 (assignment_operator -> MULTEQOP .)
    DELETE          reduce using rule 54 (assignment_operator -> MULTEQOP .)
    THIS            reduce using rule 54 (assignment_operator -> MULTEQOP .)
    LPAREN          reduce using rule 54 (assignment_operator -> MULTEQOP .)
    IDENTIFIER      reduce using rule 54 (assignment_operator -> MULTEQOP .)
    DOUBLEBNOP      reduce using rule 54 (assignment_operator -> MULTEQOP .)
    STRING_L        reduce using rule 54 (assignment_operator -> MULTEQOP .)
    NUMBER          reduce using rule 54 (assignment_operator -> MULTEQOP .)
    SCHAR           reduce using rule 54 (assignment_operator -> MULTEQOP .)


state 240

    (55) assignment_operator -> DIVEQOP .

    DPLUSOP         reduce using rule 55 (assignment_operator -> DIVEQOP .)
    DMINUSOP        reduce using rule 55 (assignment_operator -> DIVEQOP .)
    SIZEOF          reduce using rule 55 (assignment_operator -> DIVEQOP .)
    PLUSOP          reduce using rule 55 (assignment_operator -> DIVEQOP .)
    MINUSOP         reduce using rule 55 (assignment_operator -> DIVEQOP .)
    NOTSYM          reduce using rule 55 (assignment_operator -> DIVEQOP .)
    BNOP            reduce using rule 55 (assignment_operator -> DIVEQOP .)
    MULTOP          reduce using rule 55 (assignment_operator -> DIVEQOP .)
    BANDOP          reduce using rule 55 (assignment_operator -> DIVEQOP .)
    NEW             reduce using rule 55 (assignment_operator -> DIVEQOP .)
    DELETE          reduce using rule 55 (assignment_operator -> DIVEQOP .)
    THIS            reduce using rule 55 (assignment_operator -> DIVEQOP .)
    LPAREN          reduce using rule 55 (assignment_operator -> DIVEQOP .)
    IDENTIFIER      reduce using rule 55 (assignment_operator -> DIVEQOP .)
    DOUBLEBNOP      reduce using rule 55 (assignment_operator -> DIVEQOP .)
    STRING_L        reduce using rule 55 (assignment_operator -> DIVEQOP .)
    NUMBER          reduce using rule 55 (assignment_operator -> DIVEQOP .)
    SCHAR           reduce using rule 55 (assignment_operator -> DIVEQOP .)


state 241

    (56) assignment_operator -> MODEQOP .

    DPLUSOP         reduce using rule 56 (assignment_operator -> MODEQOP .)
    DMINUSOP        reduce using rule 56 (assignment_operator -> MODEQOP .)
    SIZEOF          reduce using rule 56 (assignment_operator -> MODEQOP .)
    PLUSOP          reduce using rule 56 (assignment_operator -> MODEQOP .)
    MINUSOP         reduce using rule 56 (assignment_operator -> MODEQOP .)
    NOTSYM          reduce using rule 56 (assignment_operator -> MODEQOP .)
    BNOP            reduce using rule 56 (assignment_operator -> MODEQOP .)
    MULTOP          reduce using rule 56 (assignment_operator -> MODEQOP .)
    BANDOP          reduce using rule 56 (assignment_operator -> MODEQOP .)
    NEW             reduce using rule 56 (assignment_operator -> MODEQOP .)
    DELETE          reduce using rule 56 (assignment_operator -> MODEQOP .)
    THIS            reduce using rule 56 (assignment_operator -> MODEQOP .)
    LPAREN          reduce using rule 56 (assignment_operator -> MODEQOP .)
    IDENTIFIER      reduce using rule 56 (assignment_operator -> MODEQOP .)
    DOUBLEBNOP      reduce using rule 56 (assignment_operator -> MODEQOP .)
    STRING_L        reduce using rule 56 (assignment_operator -> MODEQOP .)
    NUMBER          reduce using rule 56 (assignment_operator -> MODEQOP .)
    SCHAR           reduce using rule 56 (assignment_operator -> MODEQOP .)


state 242

    (57) assignment_operator -> PLUSEQOP .

    DPLUSOP         reduce using rule 57 (assignment_operator -> PLUSEQOP .)
    DMINUSOP        reduce using rule 57 (assignment_operator -> PLUSEQOP .)
    SIZEOF          reduce using rule 57 (assignment_operator -> PLUSEQOP .)
    PLUSOP          reduce using rule 57 (assignment_operator -> PLUSEQOP .)
    MINUSOP         reduce using rule 57 (assignment_operator -> PLUSEQOP .)
    NOTSYM          reduce using rule 57 (assignment_operator -> PLUSEQOP .)
    BNOP            reduce using rule 57 (assignment_operator -> PLUSEQOP .)
    MULTOP          reduce using rule 57 (assignment_operator -> PLUSEQOP .)
    BANDOP          reduce using rule 57 (assignment_operator -> PLUSEQOP .)
    NEW             reduce using rule 57 (assignment_operator -> PLUSEQOP .)
    DELETE          reduce using rule 57 (assignment_operator -> PLUSEQOP .)
    THIS            reduce using rule 57 (assignment_operator -> PLUSEQOP .)
    LPAREN          reduce using rule 57 (assignment_operator -> PLUSEQOP .)
    IDENTIFIER      reduce using rule 57 (assignment_operator -> PLUSEQOP .)
    DOUBLEBNOP      reduce using rule 57 (assignment_operator -> PLUSEQOP .)
    STRING_L        reduce using rule 57 (assignment_operator -> PLUSEQOP .)
    NUMBER          reduce using rule 57 (assignment_operator -> PLUSEQOP .)
    SCHAR           reduce using rule 57 (assignment_operator -> PLUSEQOP .)


state 243

    (58) assignment_operator -> MINUSEQOP .

    DPLUSOP         reduce using rule 58 (assignment_operator -> MINUSEQOP .)
    DMINUSOP        reduce using rule 58 (assignment_operator -> MINUSEQOP .)
    SIZEOF          reduce using rule 58 (assignment_operator -> MINUSEQOP .)
    PLUSOP          reduce using rule 58 (assignment_operator -> MINUSEQOP .)
    MINUSOP         reduce using rule 58 (assignment_operator -> MINUSEQOP .)
    NOTSYM          reduce using rule 58 (assignment_operator -> MINUSEQOP .)
    BNOP            reduce using rule 58 (assignment_operator -> MINUSEQOP .)
    MULTOP          reduce using rule 58 (assignment_operator -> MINUSEQOP .)
    BANDOP          reduce using rule 58 (assignment_operator -> MINUSEQOP .)
    NEW             reduce using rule 58 (assignment_operator -> MINUSEQOP .)
    DELETE          reduce using rule 58 (assignment_operator -> MINUSEQOP .)
    THIS            reduce using rule 58 (assignment_operator -> MINUSEQOP .)
    LPAREN          reduce using rule 58 (assignment_operator -> MINUSEQOP .)
    IDENTIFIER      reduce using rule 58 (assignment_operator -> MINUSEQOP .)
    DOUBLEBNOP      reduce using rule 58 (assignment_operator -> MINUSEQOP .)
    STRING_L        reduce using rule 58 (assignment_operator -> MINUSEQOP .)
    NUMBER          reduce using rule 58 (assignment_operator -> MINUSEQOP .)
    SCHAR           reduce using rule 58 (assignment_operator -> MINUSEQOP .)


state 244

    (59) assignment_operator -> LSHIFTEQOP .

    DPLUSOP         reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)
    DMINUSOP        reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)
    SIZEOF          reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)
    PLUSOP          reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)
    MINUSOP         reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)
    NOTSYM          reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)
    BNOP            reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)
    MULTOP          reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)
    BANDOP          reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)
    NEW             reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)
    DELETE          reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)
    THIS            reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)
    LPAREN          reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)
    IDENTIFIER      reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)
    DOUBLEBNOP      reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)
    STRING_L        reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)
    NUMBER          reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)
    SCHAR           reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)


state 245

    (60) assignment_operator -> RSHIFTEQOP .

    DPLUSOP         reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)
    DMINUSOP        reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)
    SIZEOF          reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)
    PLUSOP          reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)
    MINUSOP         reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)
    NOTSYM          reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)
    BNOP            reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)
    MULTOP          reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)
    BANDOP          reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)
    NEW             reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)
    DELETE          reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)
    THIS            reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)
    LPAREN          reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)
    IDENTIFIER      reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)
    DOUBLEBNOP      reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)
    STRING_L        reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)
    NUMBER          reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)
    SCHAR           reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)


state 246

    (61) assignment_operator -> BANDEQOP .

    DPLUSOP         reduce using rule 61 (assignment_operator -> BANDEQOP .)
    DMINUSOP        reduce using rule 61 (assignment_operator -> BANDEQOP .)
    SIZEOF          reduce using rule 61 (assignment_operator -> BANDEQOP .)
    PLUSOP          reduce using rule 61 (assignment_operator -> BANDEQOP .)
    MINUSOP         reduce using rule 61 (assignment_operator -> BANDEQOP .)
    NOTSYM          reduce using rule 61 (assignment_operator -> BANDEQOP .)
    BNOP            reduce using rule 61 (assignment_operator -> BANDEQOP .)
    MULTOP          reduce using rule 61 (assignment_operator -> BANDEQOP .)
    BANDOP          reduce using rule 61 (assignment_operator -> BANDEQOP .)
    NEW             reduce using rule 61 (assignment_operator -> BANDEQOP .)
    DELETE          reduce using rule 61 (assignment_operator -> BANDEQOP .)
    THIS            reduce using rule 61 (assignment_operator -> BANDEQOP .)
    LPAREN          reduce using rule 61 (assignment_operator -> BANDEQOP .)
    IDENTIFIER      reduce using rule 61 (assignment_operator -> BANDEQOP .)
    DOUBLEBNOP      reduce using rule 61 (assignment_operator -> BANDEQOP .)
    STRING_L        reduce using rule 61 (assignment_operator -> BANDEQOP .)
    NUMBER          reduce using rule 61 (assignment_operator -> BANDEQOP .)
    SCHAR           reduce using rule 61 (assignment_operator -> BANDEQOP .)


state 247

    (62) assignment_operator -> BOREQOP .

    DPLUSOP         reduce using rule 62 (assignment_operator -> BOREQOP .)
    DMINUSOP        reduce using rule 62 (assignment_operator -> BOREQOP .)
    SIZEOF          reduce using rule 62 (assignment_operator -> BOREQOP .)
    PLUSOP          reduce using rule 62 (assignment_operator -> BOREQOP .)
    MINUSOP         reduce using rule 62 (assignment_operator -> BOREQOP .)
    NOTSYM          reduce using rule 62 (assignment_operator -> BOREQOP .)
    BNOP            reduce using rule 62 (assignment_operator -> BOREQOP .)
    MULTOP          reduce using rule 62 (assignment_operator -> BOREQOP .)
    BANDOP          reduce using rule 62 (assignment_operator -> BOREQOP .)
    NEW             reduce using rule 62 (assignment_operator -> BOREQOP .)
    DELETE          reduce using rule 62 (assignment_operator -> BOREQOP .)
    THIS            reduce using rule 62 (assignment_operator -> BOREQOP .)
    LPAREN          reduce using rule 62 (assignment_operator -> BOREQOP .)
    IDENTIFIER      reduce using rule 62 (assignment_operator -> BOREQOP .)
    DOUBLEBNOP      reduce using rule 62 (assignment_operator -> BOREQOP .)
    STRING_L        reduce using rule 62 (assignment_operator -> BOREQOP .)
    NUMBER          reduce using rule 62 (assignment_operator -> BOREQOP .)
    SCHAR           reduce using rule 62 (assignment_operator -> BOREQOP .)


state 248

    (286) initializer_list -> LCPAREN . initializer_list RCPAREN
    (287) initializer_list -> LCPAREN . initializer_list COMMA RCPAREN
    (284) initializer_list -> . assignment_expression
    (285) initializer_list -> . initializer_list COMMA assignment_expression
    (286) initializer_list -> . LCPAREN initializer_list RCPAREN
    (287) initializer_list -> . LCPAREN initializer_list COMMA RCPAREN
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LCPAREN         shift and go to state 248
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    THIS            shift and go to state 144
    LPAREN          shift and go to state 148
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    initializer_list               shift and go to state 317
    assignment_expression          shift and go to state 250
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    cast_expression                shift and go to state 126
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    logical_AND_expression         shift and go to state 114
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    inclusive_OR_expression        shift and go to state 115
    literal                        shift and go to state 143
    exclusive_OR_expression        shift and go to state 116
    AND_expression                 shift and go to state 117
    equality_expression            shift and go to state 118
    relational_expression          shift and go to state 119
    shift_expression               shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 122
    pm_expression                  shift and go to state 125

state 249

    (281) initializer -> EQUAL LCPAREN initializer_list . RCPAREN
    (282) initializer -> EQUAL LCPAREN initializer_list . COMMA RCPAREN
    (285) initializer_list -> initializer_list . COMMA assignment_expression

    RCPAREN         shift and go to state 318
    COMMA           shift and go to state 319


state 250

    (284) initializer_list -> assignment_expression .

    RCPAREN         reduce using rule 284 (initializer_list -> assignment_expression .)
    COMMA           reduce using rule 284 (initializer_list -> assignment_expression .)
    RPAREN          reduce using rule 284 (initializer_list -> assignment_expression .)


state 251

    (288) asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .

    CONST           reduce using rule 288 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    ASM             reduce using rule 288 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    TEMPLATE        reduce using rule 288 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    TYPEDEF         reduce using rule 288 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    CHAR            reduce using rule 288 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    SHORT           reduce using rule 288 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    INT             reduce using rule 288 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    LONG            reduce using rule 288 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    SIGNED          reduce using rule 288 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    UNSIGNED        reduce using rule 288 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    FLOAT           reduce using rule 288 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    DOUBLE          reduce using rule 288 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    VOID            reduce using rule 288 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    STRING          reduce using rule 288 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    AUTO            reduce using rule 288 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    TYPE            reduce using rule 288 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    CLASS           reduce using rule 288 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    STRUCT          reduce using rule 288 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    $end            reduce using rule 288 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    RCPAREN         reduce using rule 288 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 288 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    CASE            reduce using rule 288 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 288 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 288 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    LCPAREN         reduce using rule 288 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    IF              reduce using rule 288 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    SWITCH          reduce using rule 288 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    WHILE           reduce using rule 288 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    DO              reduce using rule 288 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    FOR             reduce using rule 288 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    BREAK           reduce using rule 288 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 288 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    RETURN          reduce using rule 288 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    GOTO            reduce using rule 288 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    TRY             reduce using rule 288 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    THROW           reduce using rule 288 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    DPLUSOP         reduce using rule 288 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    DMINUSOP        reduce using rule 288 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    SIZEOF          reduce using rule 288 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    PLUSOP          reduce using rule 288 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    MINUSOP         reduce using rule 288 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    NOTSYM          reduce using rule 288 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    BNOP            reduce using rule 288 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    MULTOP          reduce using rule 288 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    BANDOP          reduce using rule 288 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    NEW             reduce using rule 288 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    DELETE          reduce using rule 288 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    THIS            reduce using rule 288 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    LPAREN          reduce using rule 288 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    DOUBLEBNOP      reduce using rule 288 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    STRING_L        reduce using rule 288 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    NUMBER          reduce using rule 288 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    SCHAR           reduce using rule 288 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    ELSE            reduce using rule 288 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)


state 252

    (213) access_list -> access_specifier COLON member_access_list .

    RCPAREN         reduce using rule 213 (access_list -> access_specifier COLON member_access_list .)
    PRIVATE         reduce using rule 213 (access_list -> access_specifier COLON member_access_list .)
    PROTECTED       reduce using rule 213 (access_list -> access_specifier COLON member_access_list .)
    PUBLIC          reduce using rule 213 (access_list -> access_specifier COLON member_access_list .)


state 253

    (217) member_declaration -> type_specifier_ member_declarator_list SEMICOLON .

    SEMICOLON       reduce using rule 217 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    CONST           reduce using rule 217 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    CHAR            reduce using rule 217 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    SHORT           reduce using rule 217 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    INT             reduce using rule 217 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    LONG            reduce using rule 217 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    SIGNED          reduce using rule 217 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    UNSIGNED        reduce using rule 217 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    FLOAT           reduce using rule 217 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    DOUBLE          reduce using rule 217 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    VOID            reduce using rule 217 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    STRING          reduce using rule 217 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    AUTO            reduce using rule 217 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    TYPE            reduce using rule 217 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    CLASS           reduce using rule 217 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    STRUCT          reduce using rule 217 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    IDENTIFIER      reduce using rule 217 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    DOUBLEBNOP      reduce using rule 217 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    MULTOP          reduce using rule 217 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    BANDOP          reduce using rule 217 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    RCPAREN         reduce using rule 217 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    PRIVATE         reduce using rule 217 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    PROTECTED       reduce using rule 217 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    PUBLIC          reduce using rule 217 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)


state 254

    (227) function_definition -> type_specifier_ declarator func_push_scope . arg_list RPAREN fct_body pop_scope
    (119) arg_list -> . argument_declaration_list
    (120) arg_list -> . empty
    (121) argument_declaration_list -> . argument_declaration
    (122) argument_declaration_list -> . argument_declaration COMMA argument_declaration_list
    (11) empty -> .
    (123) argument_declaration -> . type_specifier_ declarator
    (124) argument_declaration -> . type_specifier_ declarator EQUAL expression
    (125) argument_declaration -> . type_specifier_ abstract_declarator
    (126) argument_declaration -> . type_specifier_
    (170) type_specifier_ -> . CONST type_specifier
    (171) type_specifier_ -> . type_specifier
    (174) type_specifier -> . simple_type_name
    (175) type_specifier -> . complex_type_specifier
    (176) simple_type_name -> . CHAR
    (177) simple_type_name -> . SHORT
    (178) simple_type_name -> . INT
    (179) simple_type_name -> . LONG
    (180) simple_type_name -> . SIGNED
    (181) simple_type_name -> . UNSIGNED
    (182) simple_type_name -> . FLOAT
    (183) simple_type_name -> . DOUBLE
    (184) simple_type_name -> . VOID
    (185) simple_type_name -> . STRING
    (186) simple_type_name -> . AUTO
    (187) complex_type_specifier -> . class_key IDENTIFIER
    (188) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (189) complex_type_specifier -> . TYPE IDENTIFIER
    (190) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (203) class_key -> . CLASS
    (204) class_key -> . STRUCT

    RPAREN          reduce using rule 11 (empty -> .)
    CONST           shift and go to state 16
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38

    type_specifier_                shift and go to state 93
    arg_list                       shift and go to state 320
    argument_declaration_list      shift and go to state 107
    empty                          shift and go to state 108
    argument_declaration           shift and go to state 109
    type_specifier                 shift and go to state 17
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 56

state 255

    (229) func_push_scope -> LPAREN .

    CONST           reduce using rule 229 (func_push_scope -> LPAREN .)
    CHAR            reduce using rule 229 (func_push_scope -> LPAREN .)
    SHORT           reduce using rule 229 (func_push_scope -> LPAREN .)
    INT             reduce using rule 229 (func_push_scope -> LPAREN .)
    LONG            reduce using rule 229 (func_push_scope -> LPAREN .)
    SIGNED          reduce using rule 229 (func_push_scope -> LPAREN .)
    UNSIGNED        reduce using rule 229 (func_push_scope -> LPAREN .)
    FLOAT           reduce using rule 229 (func_push_scope -> LPAREN .)
    DOUBLE          reduce using rule 229 (func_push_scope -> LPAREN .)
    VOID            reduce using rule 229 (func_push_scope -> LPAREN .)
    STRING          reduce using rule 229 (func_push_scope -> LPAREN .)
    AUTO            reduce using rule 229 (func_push_scope -> LPAREN .)
    TYPE            reduce using rule 229 (func_push_scope -> LPAREN .)
    CLASS           reduce using rule 229 (func_push_scope -> LPAREN .)
    STRUCT          reduce using rule 229 (func_push_scope -> LPAREN .)
    RPAREN          reduce using rule 229 (func_push_scope -> LPAREN .)


state 256

    (224) member_declarator_list -> member_declarator_list COMMA member_declarator .

    SEMICOLON       reduce using rule 224 (member_declarator_list -> member_declarator_list COMMA member_declarator .)
    COMMA           reduce using rule 224 (member_declarator_list -> member_declarator_list COMMA member_declarator .)


state 257

    (191) pure_specifier -> EQUAL NUMBER .

    SEMICOLON       reduce using rule 191 (pure_specifier -> EQUAL NUMBER .)
    COMMA           reduce using rule 191 (pure_specifier -> EQUAL NUMBER .)


state 258

    (273) template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .

    CONST           reduce using rule 273 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    ASM             reduce using rule 273 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    TEMPLATE        reduce using rule 273 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    TYPEDEF         reduce using rule 273 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    CHAR            reduce using rule 273 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    SHORT           reduce using rule 273 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    INT             reduce using rule 273 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    LONG            reduce using rule 273 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    SIGNED          reduce using rule 273 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    UNSIGNED        reduce using rule 273 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    FLOAT           reduce using rule 273 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    DOUBLE          reduce using rule 273 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    VOID            reduce using rule 273 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    STRING          reduce using rule 273 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    AUTO            reduce using rule 273 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    TYPE            reduce using rule 273 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    CLASS           reduce using rule 273 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    STRUCT          reduce using rule 273 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    $end            reduce using rule 273 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    RCPAREN         reduce using rule 273 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    IDENTIFIER      reduce using rule 273 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    CASE            reduce using rule 273 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    DEFAULT         reduce using rule 273 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    SEMICOLON       reduce using rule 273 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    LCPAREN         reduce using rule 273 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    IF              reduce using rule 273 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    SWITCH          reduce using rule 273 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    WHILE           reduce using rule 273 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    DO              reduce using rule 273 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    FOR             reduce using rule 273 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    BREAK           reduce using rule 273 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    CONTINUE        reduce using rule 273 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    RETURN          reduce using rule 273 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    GOTO            reduce using rule 273 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    TRY             reduce using rule 273 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    THROW           reduce using rule 273 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    DPLUSOP         reduce using rule 273 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    DMINUSOP        reduce using rule 273 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    SIZEOF          reduce using rule 273 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    PLUSOP          reduce using rule 273 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    MINUSOP         reduce using rule 273 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    NOTSYM          reduce using rule 273 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    BNOP            reduce using rule 273 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    MULTOP          reduce using rule 273 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    BANDOP          reduce using rule 273 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    NEW             reduce using rule 273 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    DELETE          reduce using rule 273 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    THIS            reduce using rule 273 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    LPAREN          reduce using rule 273 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    DOUBLEBNOP      reduce using rule 273 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    STRING_L        reduce using rule 273 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    NUMBER          reduce using rule 273 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    SCHAR           reduce using rule 273 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    ELSE            reduce using rule 273 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)


state 259

    (275) template_argument_list -> template_argument_list COMMA argument_declaration .

    RTEMPLATE       reduce using rule 275 (template_argument_list -> template_argument_list COMMA argument_declaration .)
    COMMA           reduce using rule 275 (template_argument_list -> template_argument_list COMMA argument_declaration .)


state 260

    (124) argument_declaration -> type_specifier_ declarator EQUAL . expression
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    THROW           shift and go to state 216
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    THIS            shift and go to state 144
    LPAREN          shift and go to state 148
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    expression                     shift and go to state 321
    assignment_expression          shift and go to state 214
    throw_expression               shift and go to state 215
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    cast_expression                shift and go to state 126
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    logical_AND_expression         shift and go to state 114
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    inclusive_OR_expression        shift and go to state 115
    literal                        shift and go to state 143
    exclusive_OR_expression        shift and go to state 116
    AND_expression                 shift and go to state 117
    equality_expression            shift and go to state 118
    relational_expression          shift and go to state 119
    shift_expression               shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 122
    pm_expression                  shift and go to state 125

state 261

    (172) typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .

    CONST           reduce using rule 172 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    ASM             reduce using rule 172 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    TEMPLATE        reduce using rule 172 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    TYPEDEF         reduce using rule 172 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    CHAR            reduce using rule 172 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    SHORT           reduce using rule 172 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    INT             reduce using rule 172 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    LONG            reduce using rule 172 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    SIGNED          reduce using rule 172 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    UNSIGNED        reduce using rule 172 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    FLOAT           reduce using rule 172 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    DOUBLE          reduce using rule 172 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    VOID            reduce using rule 172 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    STRING          reduce using rule 172 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    AUTO            reduce using rule 172 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    TYPE            reduce using rule 172 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    CLASS           reduce using rule 172 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    STRUCT          reduce using rule 172 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    $end            reduce using rule 172 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    RCPAREN         reduce using rule 172 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 172 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    CASE            reduce using rule 172 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    DEFAULT         reduce using rule 172 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    SEMICOLON       reduce using rule 172 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    LCPAREN         reduce using rule 172 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    IF              reduce using rule 172 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    SWITCH          reduce using rule 172 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 172 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    DO              reduce using rule 172 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    FOR             reduce using rule 172 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    BREAK           reduce using rule 172 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    CONTINUE        reduce using rule 172 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    RETURN          reduce using rule 172 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    GOTO            reduce using rule 172 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    TRY             reduce using rule 172 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    THROW           reduce using rule 172 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    DPLUSOP         reduce using rule 172 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    DMINUSOP        reduce using rule 172 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    SIZEOF          reduce using rule 172 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    PLUSOP          reduce using rule 172 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    MINUSOP         reduce using rule 172 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    NOTSYM          reduce using rule 172 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    BNOP            reduce using rule 172 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    MULTOP          reduce using rule 172 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    BANDOP          reduce using rule 172 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    NEW             reduce using rule 172 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    DELETE          reduce using rule 172 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    THIS            reduce using rule 172 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    LPAREN          reduce using rule 172 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    DOUBLEBNOP      reduce using rule 172 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    STRING_L        reduce using rule 172 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    NUMBER          reduce using rule 172 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    SCHAR           reduce using rule 172 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    ELSE            reduce using rule 172 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)


state 262

    (112) abstract_declarator -> abstract_declarator LSPAREN constant_expression . RSPAREN

    RSPAREN         shift and go to state 322


state 263

    (114) abstract_declarator -> abstract_declarator LSPAREN RSPAREN .

    IDENTIFIER      reduce using rule 114 (abstract_declarator -> abstract_declarator LSPAREN RSPAREN .)
    LSPAREN         reduce using rule 114 (abstract_declarator -> abstract_declarator LSPAREN RSPAREN .)
    RTEMPLATE       reduce using rule 114 (abstract_declarator -> abstract_declarator LSPAREN RSPAREN .)
    COMMA           reduce using rule 114 (abstract_declarator -> abstract_declarator LSPAREN RSPAREN .)
    RPAREN          reduce using rule 114 (abstract_declarator -> abstract_declarator LSPAREN RSPAREN .)


state 264

    (111) abstract_declarator -> LSPAREN constant_expression RSPAREN .

    IDENTIFIER      reduce using rule 111 (abstract_declarator -> LSPAREN constant_expression RSPAREN .)
    LSPAREN         reduce using rule 111 (abstract_declarator -> LSPAREN constant_expression RSPAREN .)
    RTEMPLATE       reduce using rule 111 (abstract_declarator -> LSPAREN constant_expression RSPAREN .)
    COMMA           reduce using rule 111 (abstract_declarator -> LSPAREN constant_expression RSPAREN .)
    RPAREN          reduce using rule 111 (abstract_declarator -> LSPAREN constant_expression RSPAREN .)


state 265

    (196) base_list -> base_list COMMA . base_specifier
    (197) base_specifier -> . class_key IDENTIFIER
    (198) base_specifier -> . class_key IDENTIFIER template_class_name
    (199) base_specifier -> . IDENTIFIER
    (200) base_specifier -> . IDENTIFIER template_class_name
    (201) base_specifier -> . access_specifier class_key IDENTIFIER
    (202) base_specifier -> . access_specifier class_key IDENTIFIER template_class_name
    (203) class_key -> . CLASS
    (204) class_key -> . STRUCT
    (210) access_specifier -> . PRIVATE
    (211) access_specifier -> . PROTECTED
    (212) access_specifier -> . PUBLIC

    IDENTIFIER      shift and go to state 182
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38
    PRIVATE         shift and go to state 86
    PROTECTED       shift and go to state 87
    PUBLIC          shift and go to state 88

    base_specifier                 shift and go to state 323
    class_key                      shift and go to state 181
    access_specifier               shift and go to state 183

state 266

    (197) base_specifier -> class_key IDENTIFIER .
    (198) base_specifier -> class_key IDENTIFIER . template_class_name
    (165) template_class_name -> . LTEMPLATE template_arg_list RTEMPLATE

    COMMA           reduce using rule 197 (base_specifier -> class_key IDENTIFIER .)
    LCPAREN         reduce using rule 197 (base_specifier -> class_key IDENTIFIER .)
    LTEMPLATE       shift and go to state 101

    template_class_name            shift and go to state 324

state 267

    (200) base_specifier -> IDENTIFIER template_class_name .

    COMMA           reduce using rule 200 (base_specifier -> IDENTIFIER template_class_name .)
    LCPAREN         reduce using rule 200 (base_specifier -> IDENTIFIER template_class_name .)


state 268

    (201) base_specifier -> access_specifier class_key . IDENTIFIER
    (202) base_specifier -> access_specifier class_key . IDENTIFIER template_class_name

    IDENTIFIER      shift and go to state 325


state 269

    (165) template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .

    IDENTIFIER      reduce using rule 165 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    DOUBLEBNOP      reduce using rule 165 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    MULTOP          reduce using rule 165 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    BANDOP          reduce using rule 165 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    SEMICOLON       reduce using rule 165 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    LSPAREN         reduce using rule 165 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    RTEMPLATE       reduce using rule 165 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    COMMA           reduce using rule 165 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    RPAREN          reduce using rule 165 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    LPAREN          reduce using rule 165 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    DOTSTAR         reduce using rule 165 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    ARROWSTAR       reduce using rule 165 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    DIVOP           reduce using rule 165 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    MODOP           reduce using rule 165 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    PLUSOP          reduce using rule 165 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    MINUSOP         reduce using rule 165 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    LSHIFT          reduce using rule 165 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    RSHIFT          reduce using rule 165 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    LTCOMP          reduce using rule 165 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    GTCOMP          reduce using rule 165 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    LTECOMP         reduce using rule 165 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    GTECOMP         reduce using rule 165 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    EQCOMP          reduce using rule 165 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    NEQCOMP         reduce using rule 165 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    XOROP           reduce using rule 165 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    OROP            reduce using rule 165 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    ANDOP           reduce using rule 165 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    QUESMARK        reduce using rule 165 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    RSPAREN         reduce using rule 165 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    EQUAL           reduce using rule 165 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    MULTEQOP        reduce using rule 165 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    DIVEQOP         reduce using rule 165 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    MODEQOP         reduce using rule 165 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    PLUSEQOP        reduce using rule 165 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    MINUSEQOP       reduce using rule 165 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    LSHIFTEQOP      reduce using rule 165 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    RSHIFTEQOP      reduce using rule 165 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    BANDEQOP        reduce using rule 165 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    BOREQOP         reduce using rule 165 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    RCPAREN         reduce using rule 165 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    COLON           reduce using rule 165 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    LCPAREN         reduce using rule 165 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)


state 270

    (167) template_arg_list -> template_arg_list COMMA . type_name
    (168) type_name -> . type_specifier_ abstract_declarator
    (169) type_name -> . type_specifier_
    (170) type_specifier_ -> . CONST type_specifier
    (171) type_specifier_ -> . type_specifier
    (174) type_specifier -> . simple_type_name
    (175) type_specifier -> . complex_type_specifier
    (176) simple_type_name -> . CHAR
    (177) simple_type_name -> . SHORT
    (178) simple_type_name -> . INT
    (179) simple_type_name -> . LONG
    (180) simple_type_name -> . SIGNED
    (181) simple_type_name -> . UNSIGNED
    (182) simple_type_name -> . FLOAT
    (183) simple_type_name -> . DOUBLE
    (184) simple_type_name -> . VOID
    (185) simple_type_name -> . STRING
    (186) simple_type_name -> . AUTO
    (187) complex_type_specifier -> . class_key IDENTIFIER
    (188) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (189) complex_type_specifier -> . TYPE IDENTIFIER
    (190) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (203) class_key -> . CLASS
    (204) class_key -> . STRUCT

    CONST           shift and go to state 16
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38

    type_name                      shift and go to state 326
    type_specifier_                shift and go to state 186
    type_specifier                 shift and go to state 17
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 56

state 271

    (168) type_name -> type_specifier_ abstract_declarator .
    (112) abstract_declarator -> abstract_declarator . LSPAREN constant_expression RSPAREN
    (114) abstract_declarator -> abstract_declarator . LSPAREN RSPAREN

    RTEMPLATE       reduce using rule 168 (type_name -> type_specifier_ abstract_declarator .)
    COMMA           reduce using rule 168 (type_name -> type_specifier_ abstract_declarator .)
    RPAREN          reduce using rule 168 (type_name -> type_specifier_ abstract_declarator .)
    LSPAREN         shift and go to state 174


state 272

    (227) function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body . pop_scope
    (292) pop_scope -> .

    CONST           reduce using rule 292 (pop_scope -> .)
    ASM             reduce using rule 292 (pop_scope -> .)
    TEMPLATE        reduce using rule 292 (pop_scope -> .)
    TYPEDEF         reduce using rule 292 (pop_scope -> .)
    CHAR            reduce using rule 292 (pop_scope -> .)
    SHORT           reduce using rule 292 (pop_scope -> .)
    INT             reduce using rule 292 (pop_scope -> .)
    LONG            reduce using rule 292 (pop_scope -> .)
    SIGNED          reduce using rule 292 (pop_scope -> .)
    UNSIGNED        reduce using rule 292 (pop_scope -> .)
    FLOAT           reduce using rule 292 (pop_scope -> .)
    DOUBLE          reduce using rule 292 (pop_scope -> .)
    VOID            reduce using rule 292 (pop_scope -> .)
    STRING          reduce using rule 292 (pop_scope -> .)
    AUTO            reduce using rule 292 (pop_scope -> .)
    TYPE            reduce using rule 292 (pop_scope -> .)
    CLASS           reduce using rule 292 (pop_scope -> .)
    STRUCT          reduce using rule 292 (pop_scope -> .)
    $end            reduce using rule 292 (pop_scope -> .)
    SEMICOLON       reduce using rule 292 (pop_scope -> .)
    IDENTIFIER      reduce using rule 292 (pop_scope -> .)
    DOUBLEBNOP      reduce using rule 292 (pop_scope -> .)
    MULTOP          reduce using rule 292 (pop_scope -> .)
    BANDOP          reduce using rule 292 (pop_scope -> .)
    RCPAREN         reduce using rule 292 (pop_scope -> .)
    PRIVATE         reduce using rule 292 (pop_scope -> .)
    PROTECTED       reduce using rule 292 (pop_scope -> .)
    PUBLIC          reduce using rule 292 (pop_scope -> .)
    CASE            reduce using rule 292 (pop_scope -> .)
    DEFAULT         reduce using rule 292 (pop_scope -> .)
    LCPAREN         reduce using rule 292 (pop_scope -> .)
    IF              reduce using rule 292 (pop_scope -> .)
    SWITCH          reduce using rule 292 (pop_scope -> .)
    WHILE           reduce using rule 292 (pop_scope -> .)
    DO              reduce using rule 292 (pop_scope -> .)
    FOR             reduce using rule 292 (pop_scope -> .)
    BREAK           reduce using rule 292 (pop_scope -> .)
    CONTINUE        reduce using rule 292 (pop_scope -> .)
    RETURN          reduce using rule 292 (pop_scope -> .)
    GOTO            reduce using rule 292 (pop_scope -> .)
    TRY             reduce using rule 292 (pop_scope -> .)
    THROW           reduce using rule 292 (pop_scope -> .)
    DPLUSOP         reduce using rule 292 (pop_scope -> .)
    DMINUSOP        reduce using rule 292 (pop_scope -> .)
    SIZEOF          reduce using rule 292 (pop_scope -> .)
    PLUSOP          reduce using rule 292 (pop_scope -> .)
    MINUSOP         reduce using rule 292 (pop_scope -> .)
    NOTSYM          reduce using rule 292 (pop_scope -> .)
    BNOP            reduce using rule 292 (pop_scope -> .)
    NEW             reduce using rule 292 (pop_scope -> .)
    DELETE          reduce using rule 292 (pop_scope -> .)
    THIS            reduce using rule 292 (pop_scope -> .)
    LPAREN          reduce using rule 292 (pop_scope -> .)
    STRING_L        reduce using rule 292 (pop_scope -> .)
    NUMBER          reduce using rule 292 (pop_scope -> .)
    SCHAR           reduce using rule 292 (pop_scope -> .)
    ELSE            reduce using rule 292 (pop_scope -> .)

    pop_scope                      shift and go to state 327

state 273

    (228) function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON . pop_scope
    (292) pop_scope -> .

    CONST           reduce using rule 292 (pop_scope -> .)
    ASM             reduce using rule 292 (pop_scope -> .)
    TEMPLATE        reduce using rule 292 (pop_scope -> .)
    TYPEDEF         reduce using rule 292 (pop_scope -> .)
    CHAR            reduce using rule 292 (pop_scope -> .)
    SHORT           reduce using rule 292 (pop_scope -> .)
    INT             reduce using rule 292 (pop_scope -> .)
    LONG            reduce using rule 292 (pop_scope -> .)
    SIGNED          reduce using rule 292 (pop_scope -> .)
    UNSIGNED        reduce using rule 292 (pop_scope -> .)
    FLOAT           reduce using rule 292 (pop_scope -> .)
    DOUBLE          reduce using rule 292 (pop_scope -> .)
    VOID            reduce using rule 292 (pop_scope -> .)
    STRING          reduce using rule 292 (pop_scope -> .)
    AUTO            reduce using rule 292 (pop_scope -> .)
    TYPE            reduce using rule 292 (pop_scope -> .)
    CLASS           reduce using rule 292 (pop_scope -> .)
    STRUCT          reduce using rule 292 (pop_scope -> .)
    $end            reduce using rule 292 (pop_scope -> .)
    RCPAREN         reduce using rule 292 (pop_scope -> .)
    IDENTIFIER      reduce using rule 292 (pop_scope -> .)
    CASE            reduce using rule 292 (pop_scope -> .)
    DEFAULT         reduce using rule 292 (pop_scope -> .)
    SEMICOLON       reduce using rule 292 (pop_scope -> .)
    LCPAREN         reduce using rule 292 (pop_scope -> .)
    IF              reduce using rule 292 (pop_scope -> .)
    SWITCH          reduce using rule 292 (pop_scope -> .)
    WHILE           reduce using rule 292 (pop_scope -> .)
    DO              reduce using rule 292 (pop_scope -> .)
    FOR             reduce using rule 292 (pop_scope -> .)
    BREAK           reduce using rule 292 (pop_scope -> .)
    CONTINUE        reduce using rule 292 (pop_scope -> .)
    RETURN          reduce using rule 292 (pop_scope -> .)
    GOTO            reduce using rule 292 (pop_scope -> .)
    TRY             reduce using rule 292 (pop_scope -> .)
    THROW           reduce using rule 292 (pop_scope -> .)
    DPLUSOP         reduce using rule 292 (pop_scope -> .)
    DMINUSOP        reduce using rule 292 (pop_scope -> .)
    SIZEOF          reduce using rule 292 (pop_scope -> .)
    PLUSOP          reduce using rule 292 (pop_scope -> .)
    MINUSOP         reduce using rule 292 (pop_scope -> .)
    NOTSYM          reduce using rule 292 (pop_scope -> .)
    BNOP            reduce using rule 292 (pop_scope -> .)
    MULTOP          reduce using rule 292 (pop_scope -> .)
    BANDOP          reduce using rule 292 (pop_scope -> .)
    NEW             reduce using rule 292 (pop_scope -> .)
    DELETE          reduce using rule 292 (pop_scope -> .)
    THIS            reduce using rule 292 (pop_scope -> .)
    LPAREN          reduce using rule 292 (pop_scope -> .)
    DOUBLEBNOP      reduce using rule 292 (pop_scope -> .)
    STRING_L        reduce using rule 292 (pop_scope -> .)
    NUMBER          reduce using rule 292 (pop_scope -> .)
    SCHAR           reduce using rule 292 (pop_scope -> .)
    ELSE            reduce using rule 292 (pop_scope -> .)

    pop_scope                      shift and go to state 328

state 274

    (230) fct_body -> compound_statement .

    CONST           reduce using rule 230 (fct_body -> compound_statement .)
    ASM             reduce using rule 230 (fct_body -> compound_statement .)
    TEMPLATE        reduce using rule 230 (fct_body -> compound_statement .)
    TYPEDEF         reduce using rule 230 (fct_body -> compound_statement .)
    CHAR            reduce using rule 230 (fct_body -> compound_statement .)
    SHORT           reduce using rule 230 (fct_body -> compound_statement .)
    INT             reduce using rule 230 (fct_body -> compound_statement .)
    LONG            reduce using rule 230 (fct_body -> compound_statement .)
    SIGNED          reduce using rule 230 (fct_body -> compound_statement .)
    UNSIGNED        reduce using rule 230 (fct_body -> compound_statement .)
    FLOAT           reduce using rule 230 (fct_body -> compound_statement .)
    DOUBLE          reduce using rule 230 (fct_body -> compound_statement .)
    VOID            reduce using rule 230 (fct_body -> compound_statement .)
    STRING          reduce using rule 230 (fct_body -> compound_statement .)
    AUTO            reduce using rule 230 (fct_body -> compound_statement .)
    TYPE            reduce using rule 230 (fct_body -> compound_statement .)
    CLASS           reduce using rule 230 (fct_body -> compound_statement .)
    STRUCT          reduce using rule 230 (fct_body -> compound_statement .)
    $end            reduce using rule 230 (fct_body -> compound_statement .)
    RCPAREN         reduce using rule 230 (fct_body -> compound_statement .)
    IDENTIFIER      reduce using rule 230 (fct_body -> compound_statement .)
    CASE            reduce using rule 230 (fct_body -> compound_statement .)
    DEFAULT         reduce using rule 230 (fct_body -> compound_statement .)
    SEMICOLON       reduce using rule 230 (fct_body -> compound_statement .)
    LCPAREN         reduce using rule 230 (fct_body -> compound_statement .)
    IF              reduce using rule 230 (fct_body -> compound_statement .)
    SWITCH          reduce using rule 230 (fct_body -> compound_statement .)
    WHILE           reduce using rule 230 (fct_body -> compound_statement .)
    DO              reduce using rule 230 (fct_body -> compound_statement .)
    FOR             reduce using rule 230 (fct_body -> compound_statement .)
    BREAK           reduce using rule 230 (fct_body -> compound_statement .)
    CONTINUE        reduce using rule 230 (fct_body -> compound_statement .)
    RETURN          reduce using rule 230 (fct_body -> compound_statement .)
    GOTO            reduce using rule 230 (fct_body -> compound_statement .)
    TRY             reduce using rule 230 (fct_body -> compound_statement .)
    THROW           reduce using rule 230 (fct_body -> compound_statement .)
    DPLUSOP         reduce using rule 230 (fct_body -> compound_statement .)
    DMINUSOP        reduce using rule 230 (fct_body -> compound_statement .)
    SIZEOF          reduce using rule 230 (fct_body -> compound_statement .)
    PLUSOP          reduce using rule 230 (fct_body -> compound_statement .)
    MINUSOP         reduce using rule 230 (fct_body -> compound_statement .)
    NOTSYM          reduce using rule 230 (fct_body -> compound_statement .)
    BNOP            reduce using rule 230 (fct_body -> compound_statement .)
    MULTOP          reduce using rule 230 (fct_body -> compound_statement .)
    BANDOP          reduce using rule 230 (fct_body -> compound_statement .)
    NEW             reduce using rule 230 (fct_body -> compound_statement .)
    DELETE          reduce using rule 230 (fct_body -> compound_statement .)
    THIS            reduce using rule 230 (fct_body -> compound_statement .)
    LPAREN          reduce using rule 230 (fct_body -> compound_statement .)
    DOUBLEBNOP      reduce using rule 230 (fct_body -> compound_statement .)
    STRING_L        reduce using rule 230 (fct_body -> compound_statement .)
    NUMBER          reduce using rule 230 (fct_body -> compound_statement .)
    SCHAR           reduce using rule 230 (fct_body -> compound_statement .)
    ELSE            reduce using rule 230 (fct_body -> compound_statement .)
    PRIVATE         reduce using rule 230 (fct_body -> compound_statement .)
    PROTECTED       reduce using rule 230 (fct_body -> compound_statement .)
    PUBLIC          reduce using rule 230 (fct_body -> compound_statement .)


state 275

    (231) compound_statement -> LCPAREN . statement_list RCPAREN
    (232) compound_statement -> LCPAREN . RCPAREN
    (233) statement_list -> . statement
    (234) statement_list -> . statement_list statement
    (235) statement -> . labeled_statement
    (236) statement -> . expression_statement
    (237) statement -> . compound_statement
    (238) statement -> . selection_statement
    (239) statement -> . iteration_statement
    (240) statement -> . jump_statement
    (241) statement -> . declaration_statement
    (242) statement -> . try_block
    (252) labeled_statement -> . IDENTIFIER COLON statement
    (253) labeled_statement -> . CASE constant_expression COLON statement
    (254) labeled_statement -> . DEFAULT COLON statement
    (263) expression_statement -> . expression SEMICOLON
    (264) expression_statement -> . SEMICOLON
    (231) compound_statement -> . LCPAREN statement_list RCPAREN
    (232) compound_statement -> . LCPAREN RCPAREN
    (248) selection_statement -> . IF LPAREN expression RPAREN statement
    (249) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (250) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (255) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (256) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (257) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement
    (258) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement
    (259) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement
    (260) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (243) jump_statement -> . BREAK SEMICOLON
    (244) jump_statement -> . CONTINUE SEMICOLON
    (245) jump_statement -> . RETURN expression SEMICOLON
    (246) jump_statement -> . RETURN SEMICOLON
    (247) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (265) declaration_statement -> . declaration
    (251) try_block -> . TRY compound_statement CATCH compound_statement
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (266) declaration -> . type_specifier_ declarator_list SEMICOLON
    (267) declaration -> . asm_declaration
    (268) declaration -> . function_definition
    (269) declaration -> . function_decl
    (270) declaration -> . class_define_specifier SEMICOLON
    (271) declaration -> . template_declaration
    (272) declaration -> . typedef_declarator
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (170) type_specifier_ -> . CONST type_specifier
    (171) type_specifier_ -> . type_specifier
    (288) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (227) function_definition -> . type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope
    (228) function_decl -> . type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope
    (205) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (206) class_define_specifier -> . class_head LCPAREN RCPAREN
    (273) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (172) typedef_declarator -> . TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON
    (173) typedef_declarator -> . TYPEDEF type_specifier_ IDENTIFIER SEMICOLON
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (174) type_specifier -> . simple_type_name
    (175) type_specifier -> . complex_type_specifier
    (192) class_head -> . class_key IDENTIFIER base_spec
    (193) class_head -> . class_key IDENTIFIER
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (176) simple_type_name -> . CHAR
    (177) simple_type_name -> . SHORT
    (178) simple_type_name -> . INT
    (179) simple_type_name -> . LONG
    (180) simple_type_name -> . SIGNED
    (181) simple_type_name -> . UNSIGNED
    (182) simple_type_name -> . FLOAT
    (183) simple_type_name -> . DOUBLE
    (184) simple_type_name -> . VOID
    (185) simple_type_name -> . STRING
    (186) simple_type_name -> . AUTO
    (187) complex_type_specifier -> . class_key IDENTIFIER
    (188) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (189) complex_type_specifier -> . TYPE IDENTIFIER
    (190) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (203) class_key -> . CLASS
    (204) class_key -> . STRUCT
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RCPAREN         shift and go to state 330
    IDENTIFIER      shift and go to state 340
    CASE            shift and go to state 341
    DEFAULT         shift and go to state 342
    SEMICOLON       shift and go to state 344
    LCPAREN         shift and go to state 275
    IF              shift and go to state 345
    SWITCH          shift and go to state 346
    WHILE           shift and go to state 347
    DO              shift and go to state 348
    FOR             shift and go to state 349
    BREAK           shift and go to state 350
    CONTINUE        shift and go to state 351
    RETURN          shift and go to state 352
    GOTO            shift and go to state 353
    TRY             shift and go to state 355
    THROW           shift and go to state 216
    CONST           shift and go to state 16
    ASM             shift and go to state 18
    TEMPLATE        shift and go to state 20
    TYPEDEF         shift and go to state 21
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38
    THIS            shift and go to state 144
    LPAREN          shift and go to state 148
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    statement_list                 shift and go to state 329
    statement                      shift and go to state 331
    labeled_statement              shift and go to state 332
    expression_statement           shift and go to state 333
    compound_statement             shift and go to state 334
    selection_statement            shift and go to state 335
    iteration_statement            shift and go to state 336
    jump_statement                 shift and go to state 337
    declaration_statement          shift and go to state 338
    try_block                      shift and go to state 339
    expression                     shift and go to state 343
    declaration                    shift and go to state 354
    assignment_expression          shift and go to state 214
    throw_expression               shift and go to state 215
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    function_decl                  shift and go to state 12
    class_define_specifier         shift and go to state 13
    template_declaration           shift and go to state 14
    typedef_declarator             shift and go to state 15
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    type_specifier                 shift and go to state 17
    class_head                     shift and go to state 19
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    cast_expression                shift and go to state 126
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 24
    logical_AND_expression         shift and go to state 114
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    inclusive_OR_expression        shift and go to state 115
    literal                        shift and go to state 143
    exclusive_OR_expression        shift and go to state 116
    AND_expression                 shift and go to state 117
    equality_expression            shift and go to state 118
    relational_expression          shift and go to state 119
    shift_expression               shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 122
    pm_expression                  shift and go to state 125

state 276

    (122) argument_declaration_list -> argument_declaration COMMA argument_declaration_list .

    RPAREN          reduce using rule 122 (argument_declaration_list -> argument_declaration COMMA argument_declaration_list .)


state 277

    (14) conditional_expression -> logical_OR_expression QUESMARK expression . COLON conditional_expression
    (48) expression -> expression . COMMA assignment_expression

    COLON           shift and go to state 356
    COMMA           shift and go to state 300


state 278

    (16) logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .
    (18) logical_AND_expression -> logical_AND_expression . ANDOP inclusive_OR_expression

    QUESMARK        reduce using rule 16 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    OROP            reduce using rule 16 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    RSPAREN         reduce using rule 16 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    RPAREN          reduce using rule 16 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    COMMA           reduce using rule 16 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    SEMICOLON       reduce using rule 16 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    RCPAREN         reduce using rule 16 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    COLON           reduce using rule 16 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    RTEMPLATE       reduce using rule 16 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    ANDOP           shift and go to state 193


state 279

    (18) logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .
    (20) inclusive_OR_expression -> inclusive_OR_expression . OROP exclusive_OR_expression

    ANDOP           reduce using rule 18 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    QUESMARK        reduce using rule 18 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    OROP            reduce using rule 18 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    RSPAREN         reduce using rule 18 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    RPAREN          reduce using rule 18 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    COMMA           reduce using rule 18 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    SEMICOLON       reduce using rule 18 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    RCPAREN         reduce using rule 18 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    COLON           reduce using rule 18 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    RTEMPLATE       reduce using rule 18 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)

  ! OROP            [ shift and go to state 194 ]


state 280

    (20) inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .
    (22) exclusive_OR_expression -> exclusive_OR_expression . XOROP AND_expression

    OROP            reduce using rule 20 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    ANDOP           reduce using rule 20 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    QUESMARK        reduce using rule 20 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    RSPAREN         reduce using rule 20 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    RPAREN          reduce using rule 20 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    COMMA           reduce using rule 20 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    SEMICOLON       reduce using rule 20 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    RCPAREN         reduce using rule 20 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    COLON           reduce using rule 20 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    RTEMPLATE       reduce using rule 20 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    XOROP           shift and go to state 195


state 281

    (22) exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .
    (24) AND_expression -> AND_expression . BANDOP equality_expression

    XOROP           reduce using rule 22 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    OROP            reduce using rule 22 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    ANDOP           reduce using rule 22 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    QUESMARK        reduce using rule 22 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    RSPAREN         reduce using rule 22 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    RPAREN          reduce using rule 22 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    COMMA           reduce using rule 22 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    SEMICOLON       reduce using rule 22 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    RCPAREN         reduce using rule 22 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    COLON           reduce using rule 22 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    RTEMPLATE       reduce using rule 22 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    BANDOP          shift and go to state 196


state 282

    (24) AND_expression -> AND_expression BANDOP equality_expression .
    (26) equality_expression -> equality_expression . EQCOMP relational_expression
    (27) equality_expression -> equality_expression . NEQCOMP relational_expression

    BANDOP          reduce using rule 24 (AND_expression -> AND_expression BANDOP equality_expression .)
    XOROP           reduce using rule 24 (AND_expression -> AND_expression BANDOP equality_expression .)
    OROP            reduce using rule 24 (AND_expression -> AND_expression BANDOP equality_expression .)
    ANDOP           reduce using rule 24 (AND_expression -> AND_expression BANDOP equality_expression .)
    QUESMARK        reduce using rule 24 (AND_expression -> AND_expression BANDOP equality_expression .)
    RSPAREN         reduce using rule 24 (AND_expression -> AND_expression BANDOP equality_expression .)
    RPAREN          reduce using rule 24 (AND_expression -> AND_expression BANDOP equality_expression .)
    COMMA           reduce using rule 24 (AND_expression -> AND_expression BANDOP equality_expression .)
    SEMICOLON       reduce using rule 24 (AND_expression -> AND_expression BANDOP equality_expression .)
    RCPAREN         reduce using rule 24 (AND_expression -> AND_expression BANDOP equality_expression .)
    COLON           reduce using rule 24 (AND_expression -> AND_expression BANDOP equality_expression .)
    RTEMPLATE       reduce using rule 24 (AND_expression -> AND_expression BANDOP equality_expression .)
    EQCOMP          shift and go to state 197
    NEQCOMP         shift and go to state 198


state 283

    (26) equality_expression -> equality_expression EQCOMP relational_expression .
    (29) relational_expression -> relational_expression . LTCOMP shift_expression
    (30) relational_expression -> relational_expression . GTCOMP shift_expression
    (31) relational_expression -> relational_expression . LTECOMP shift_expression
    (32) relational_expression -> relational_expression . GTECOMP shift_expression

    EQCOMP          reduce using rule 26 (equality_expression -> equality_expression EQCOMP relational_expression .)
    NEQCOMP         reduce using rule 26 (equality_expression -> equality_expression EQCOMP relational_expression .)
    BANDOP          reduce using rule 26 (equality_expression -> equality_expression EQCOMP relational_expression .)
    XOROP           reduce using rule 26 (equality_expression -> equality_expression EQCOMP relational_expression .)
    OROP            reduce using rule 26 (equality_expression -> equality_expression EQCOMP relational_expression .)
    ANDOP           reduce using rule 26 (equality_expression -> equality_expression EQCOMP relational_expression .)
    QUESMARK        reduce using rule 26 (equality_expression -> equality_expression EQCOMP relational_expression .)
    RSPAREN         reduce using rule 26 (equality_expression -> equality_expression EQCOMP relational_expression .)
    RPAREN          reduce using rule 26 (equality_expression -> equality_expression EQCOMP relational_expression .)
    COMMA           reduce using rule 26 (equality_expression -> equality_expression EQCOMP relational_expression .)
    SEMICOLON       reduce using rule 26 (equality_expression -> equality_expression EQCOMP relational_expression .)
    RCPAREN         reduce using rule 26 (equality_expression -> equality_expression EQCOMP relational_expression .)
    COLON           reduce using rule 26 (equality_expression -> equality_expression EQCOMP relational_expression .)
    RTEMPLATE       reduce using rule 26 (equality_expression -> equality_expression EQCOMP relational_expression .)
    LTCOMP          shift and go to state 199
    GTCOMP          shift and go to state 200
    LTECOMP         shift and go to state 201
    GTECOMP         shift and go to state 202


state 284

    (27) equality_expression -> equality_expression NEQCOMP relational_expression .
    (29) relational_expression -> relational_expression . LTCOMP shift_expression
    (30) relational_expression -> relational_expression . GTCOMP shift_expression
    (31) relational_expression -> relational_expression . LTECOMP shift_expression
    (32) relational_expression -> relational_expression . GTECOMP shift_expression

    EQCOMP          reduce using rule 27 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    NEQCOMP         reduce using rule 27 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    BANDOP          reduce using rule 27 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    XOROP           reduce using rule 27 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    OROP            reduce using rule 27 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    ANDOP           reduce using rule 27 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    QUESMARK        reduce using rule 27 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    RSPAREN         reduce using rule 27 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    RPAREN          reduce using rule 27 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    COMMA           reduce using rule 27 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    SEMICOLON       reduce using rule 27 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    RCPAREN         reduce using rule 27 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    COLON           reduce using rule 27 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    RTEMPLATE       reduce using rule 27 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    LTCOMP          shift and go to state 199
    GTCOMP          shift and go to state 200
    LTECOMP         shift and go to state 201
    GTECOMP         shift and go to state 202


state 285

    (29) relational_expression -> relational_expression LTCOMP shift_expression .
    (34) shift_expression -> shift_expression . LSHIFT additive_expression
    (35) shift_expression -> shift_expression . RSHIFT additive_expression

    LTCOMP          reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    GTCOMP          reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    LTECOMP         reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    GTECOMP         reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    EQCOMP          reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    NEQCOMP         reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    BANDOP          reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    XOROP           reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    OROP            reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    ANDOP           reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    QUESMARK        reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    RSPAREN         reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    RPAREN          reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    COMMA           reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    SEMICOLON       reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    RCPAREN         reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    COLON           reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    RTEMPLATE       reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    LSHIFT          shift and go to state 203
    RSHIFT          shift and go to state 204


state 286

    (30) relational_expression -> relational_expression GTCOMP shift_expression .
    (34) shift_expression -> shift_expression . LSHIFT additive_expression
    (35) shift_expression -> shift_expression . RSHIFT additive_expression

    LTCOMP          reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    GTCOMP          reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    LTECOMP         reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    GTECOMP         reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    EQCOMP          reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    NEQCOMP         reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    BANDOP          reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    XOROP           reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    OROP            reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    ANDOP           reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    QUESMARK        reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    RSPAREN         reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    RPAREN          reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    COMMA           reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    SEMICOLON       reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    RCPAREN         reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    COLON           reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    RTEMPLATE       reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    LSHIFT          shift and go to state 203
    RSHIFT          shift and go to state 204


state 287

    (31) relational_expression -> relational_expression LTECOMP shift_expression .
    (34) shift_expression -> shift_expression . LSHIFT additive_expression
    (35) shift_expression -> shift_expression . RSHIFT additive_expression

    LTCOMP          reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    GTCOMP          reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    LTECOMP         reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    GTECOMP         reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    EQCOMP          reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    NEQCOMP         reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    BANDOP          reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    XOROP           reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    OROP            reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    ANDOP           reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    QUESMARK        reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    RSPAREN         reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    RPAREN          reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    COMMA           reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    SEMICOLON       reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    RCPAREN         reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    COLON           reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    RTEMPLATE       reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    LSHIFT          shift and go to state 203
    RSHIFT          shift and go to state 204


state 288

    (32) relational_expression -> relational_expression GTECOMP shift_expression .
    (34) shift_expression -> shift_expression . LSHIFT additive_expression
    (35) shift_expression -> shift_expression . RSHIFT additive_expression

    LTCOMP          reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    GTCOMP          reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    LTECOMP         reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    GTECOMP         reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    EQCOMP          reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    NEQCOMP         reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    BANDOP          reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    XOROP           reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    OROP            reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    ANDOP           reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    QUESMARK        reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    RSPAREN         reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    RPAREN          reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    COMMA           reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    SEMICOLON       reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    RCPAREN         reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    COLON           reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    RTEMPLATE       reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    LSHIFT          shift and go to state 203
    RSHIFT          shift and go to state 204


state 289

    (34) shift_expression -> shift_expression LSHIFT additive_expression .
    (37) additive_expression -> additive_expression . PLUSOP multiplicative_expression
    (38) additive_expression -> additive_expression . MINUSOP multiplicative_expression

    LSHIFT          reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RSHIFT          reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LTCOMP          reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    GTCOMP          reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LTECOMP         reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    GTECOMP         reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    EQCOMP          reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    NEQCOMP         reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    BANDOP          reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    XOROP           reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    OROP            reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    ANDOP           reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    QUESMARK        reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RSPAREN         reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RPAREN          reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    COMMA           reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    SEMICOLON       reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RCPAREN         reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    COLON           reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RTEMPLATE       reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    PLUSOP          shift and go to state 205
    MINUSOP         shift and go to state 206


state 290

    (35) shift_expression -> shift_expression RSHIFT additive_expression .
    (37) additive_expression -> additive_expression . PLUSOP multiplicative_expression
    (38) additive_expression -> additive_expression . MINUSOP multiplicative_expression

    LSHIFT          reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RSHIFT          reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LTCOMP          reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    GTCOMP          reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LTECOMP         reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    GTECOMP         reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    EQCOMP          reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    NEQCOMP         reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    BANDOP          reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    XOROP           reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    OROP            reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    ANDOP           reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    QUESMARK        reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RSPAREN         reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RPAREN          reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    COMMA           reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    SEMICOLON       reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RCPAREN         reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    COLON           reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RTEMPLATE       reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    PLUSOP          shift and go to state 205
    MINUSOP         shift and go to state 206


state 291

    (37) additive_expression -> additive_expression PLUSOP multiplicative_expression .
    (40) multiplicative_expression -> multiplicative_expression . MULTOP pm_expression
    (41) multiplicative_expression -> multiplicative_expression . DIVOP pm_expression
    (42) multiplicative_expression -> multiplicative_expression . MODOP pm_expression

    PLUSOP          reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    MINUSOP         reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    LSHIFT          reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    RSHIFT          reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    LTCOMP          reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    GTCOMP          reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    LTECOMP         reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    GTECOMP         reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    EQCOMP          reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    NEQCOMP         reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    BANDOP          reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    XOROP           reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    OROP            reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    ANDOP           reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    QUESMARK        reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    RSPAREN         reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    RPAREN          reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    COMMA           reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    SEMICOLON       reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    RCPAREN         reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    COLON           reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    RTEMPLATE       reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    MULTOP          shift and go to state 207
    DIVOP           shift and go to state 208
    MODOP           shift and go to state 209


state 292

    (38) additive_expression -> additive_expression MINUSOP multiplicative_expression .
    (40) multiplicative_expression -> multiplicative_expression . MULTOP pm_expression
    (41) multiplicative_expression -> multiplicative_expression . DIVOP pm_expression
    (42) multiplicative_expression -> multiplicative_expression . MODOP pm_expression

    PLUSOP          reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    MINUSOP         reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    LSHIFT          reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    RSHIFT          reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    LTCOMP          reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    GTCOMP          reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    LTECOMP         reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    GTECOMP         reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    EQCOMP          reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    NEQCOMP         reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    BANDOP          reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    XOROP           reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    OROP            reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    ANDOP           reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    QUESMARK        reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    RSPAREN         reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    RPAREN          reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    COMMA           reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    SEMICOLON       reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    RCPAREN         reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    COLON           reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    RTEMPLATE       reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    MULTOP          shift and go to state 207
    DIVOP           shift and go to state 208
    MODOP           shift and go to state 209


state 293

    (40) multiplicative_expression -> multiplicative_expression MULTOP pm_expression .
    (44) pm_expression -> pm_expression . DOTSTAR cast_expression
    (45) pm_expression -> pm_expression . ARROWSTAR cast_expression

    MULTOP          reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    DIVOP           reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    MODOP           reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    PLUSOP          reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    MINUSOP         reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    LSHIFT          reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    RSHIFT          reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    LTCOMP          reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    GTCOMP          reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    LTECOMP         reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    GTECOMP         reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    EQCOMP          reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    NEQCOMP         reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    BANDOP          reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    XOROP           reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    OROP            reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    ANDOP           reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    QUESMARK        reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    RSPAREN         reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    RPAREN          reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    COMMA           reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    SEMICOLON       reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    RCPAREN         reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    COLON           reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    RTEMPLATE       reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    DOTSTAR         shift and go to state 210
    ARROWSTAR       shift and go to state 211


state 294

    (41) multiplicative_expression -> multiplicative_expression DIVOP pm_expression .
    (44) pm_expression -> pm_expression . DOTSTAR cast_expression
    (45) pm_expression -> pm_expression . ARROWSTAR cast_expression

    MULTOP          reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    DIVOP           reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    MODOP           reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    PLUSOP          reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    MINUSOP         reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    LSHIFT          reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    RSHIFT          reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    LTCOMP          reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    GTCOMP          reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    LTECOMP         reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    GTECOMP         reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    EQCOMP          reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    NEQCOMP         reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    BANDOP          reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    XOROP           reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    OROP            reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    ANDOP           reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    QUESMARK        reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    RSPAREN         reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    RPAREN          reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    COMMA           reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    SEMICOLON       reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    RCPAREN         reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    COLON           reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    RTEMPLATE       reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    DOTSTAR         shift and go to state 210
    ARROWSTAR       shift and go to state 211


state 295

    (42) multiplicative_expression -> multiplicative_expression MODOP pm_expression .
    (44) pm_expression -> pm_expression . DOTSTAR cast_expression
    (45) pm_expression -> pm_expression . ARROWSTAR cast_expression

    MULTOP          reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    DIVOP           reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    MODOP           reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    PLUSOP          reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    MINUSOP         reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    LSHIFT          reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    RSHIFT          reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    LTCOMP          reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    GTCOMP          reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    LTECOMP         reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    GTECOMP         reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    EQCOMP          reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    NEQCOMP         reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    BANDOP          reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    XOROP           reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    OROP            reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    ANDOP           reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    QUESMARK        reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    RSPAREN         reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    RPAREN          reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    COMMA           reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    SEMICOLON       reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    RCPAREN         reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    COLON           reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    RTEMPLATE       reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    DOTSTAR         shift and go to state 210
    ARROWSTAR       shift and go to state 211


state 296

    (44) pm_expression -> pm_expression DOTSTAR cast_expression .

    DOTSTAR         reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    ARROWSTAR       reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    MULTOP          reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    DIVOP           reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    MODOP           reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    PLUSOP          reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    MINUSOP         reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    LSHIFT          reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    RSHIFT          reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    LTCOMP          reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    GTCOMP          reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    LTECOMP         reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    GTECOMP         reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    EQCOMP          reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    NEQCOMP         reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    BANDOP          reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    XOROP           reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    OROP            reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    ANDOP           reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    QUESMARK        reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    RSPAREN         reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    RPAREN          reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    COMMA           reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    SEMICOLON       reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    RCPAREN         reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    COLON           reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    RTEMPLATE       reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)


state 297

    (45) pm_expression -> pm_expression ARROWSTAR cast_expression .

    DOTSTAR         reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    ARROWSTAR       reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    MULTOP          reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    DIVOP           reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    MODOP           reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    PLUSOP          reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    MINUSOP         reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    LSHIFT          reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    RSHIFT          reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    LTCOMP          reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    GTCOMP          reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    LTECOMP         reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    GTECOMP         reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    EQCOMP          reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    NEQCOMP         reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    BANDOP          reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    XOROP           reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    OROP            reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    ANDOP           reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    QUESMARK        reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    RSPAREN         reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    RPAREN          reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    COMMA           reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    SEMICOLON       reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    RCPAREN         reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    COLON           reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    RTEMPLATE       reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)


state 298

    (108) cast_expression -> LPAREN type_name RPAREN . cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR

    LPAREN          shift and go to state 128
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    THIS            shift and go to state 144
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    cast_expression                shift and go to state 357
    unary_expression               shift and go to state 127
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    literal                        shift and go to state 143

state 299

    (103) primary_expression -> LPAREN expression RPAREN .

    LSPAREN         reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    DOT             reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    ARROW           reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    DPLUSOP         reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    DMINUSOP        reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    LTEMPLATE       reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    DOTSTAR         reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    ARROWSTAR       reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    MULTOP          reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    DIVOP           reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    MODOP           reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    PLUSOP          reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    MINUSOP         reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    LSHIFT          reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    RSHIFT          reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    LTCOMP          reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    GTCOMP          reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    LTECOMP         reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    GTECOMP         reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    EQCOMP          reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    NEQCOMP         reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    BANDOP          reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    XOROP           reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    OROP            reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    ANDOP           reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    QUESMARK        reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    RSPAREN         reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    MULTEQOP        reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    DIVEQOP         reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    MODEQOP         reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    PLUSEQOP        reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    MINUSEQOP       reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    LSHIFTEQOP      reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    RSHIFTEQOP      reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    BANDEQOP        reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    BOREQOP         reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    RCPAREN         reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    RTEMPLATE       reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)


state 300

    (48) expression -> expression COMMA . assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    THIS            shift and go to state 144
    LPAREN          shift and go to state 148
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    assignment_expression          shift and go to state 358
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    cast_expression                shift and go to state 126
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    logical_AND_expression         shift and go to state 114
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    inclusive_OR_expression        shift and go to state 115
    literal                        shift and go to state 143
    exclusive_OR_expression        shift and go to state 116
    AND_expression                 shift and go to state 117
    equality_expression            shift and go to state 118
    relational_expression          shift and go to state 119
    shift_expression               shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 122
    pm_expression                  shift and go to state 125

state 301

    (49) throw_expression -> THROW expression .
    (48) expression -> expression . COMMA assignment_expression

  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 49 (throw_expression -> THROW expression .)
    COLON           reduce using rule 49 (throw_expression -> THROW expression .)
    RSPAREN         reduce using rule 49 (throw_expression -> THROW expression .)
    RTEMPLATE       reduce using rule 49 (throw_expression -> THROW expression .)
    SEMICOLON       reduce using rule 49 (throw_expression -> THROW expression .)
    COMMA           shift and go to state 300

  ! COMMA           [ reduce using rule 49 (throw_expression -> THROW expression .) ]


state 302

    (92) postfix_expression -> postfix_expression LSPAREN expression . RSPAREN
    (48) expression -> expression . COMMA assignment_expression

    RSPAREN         shift and go to state 359
    COMMA           shift and go to state 300


state 303

    (93) postfix_expression -> postfix_expression LPAREN expression_list . RPAREN
    (290) expression_list -> expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 360
    COMMA           shift and go to state 236


state 304

    (95) postfix_expression -> postfix_expression LPAREN RPAREN .

    LSPAREN         reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LPAREN          reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DOT             reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ARROW           reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DPLUSOP         reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DMINUSOP        reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LTEMPLATE       reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DOTSTAR         reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ARROWSTAR       reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MULTOP          reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIVOP           reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MODOP           reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUSOP          reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUSOP         reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LSHIFT          reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RSHIFT          reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LTCOMP          reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GTCOMP          reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LTECOMP         reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GTECOMP         reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQCOMP          reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    NEQCOMP         reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    BANDOP          reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    XOROP           reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    OROP            reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ANDOP           reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    QUESMARK        reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RSPAREN         reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQUAL           reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MULTEQOP        reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIVEQOP         reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MODEQOP         reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUSEQOP        reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUSEQOP       reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LSHIFTEQOP      reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RSHIFTEQOP      reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    BANDEQOP        reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    BOREQOP         reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RPAREN          reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COMMA           reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    SEMICOLON       reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RCPAREN         reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COLON           reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RTEMPLATE       reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)


state 305

    (94) postfix_expression -> postfix_expression template_class_name LPAREN . expression_list RPAREN
    (289) expression_list -> . assignment_expression
    (290) expression_list -> . expression_list COMMA assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    THIS            shift and go to state 144
    LPAREN          shift and go to state 148
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    postfix_expression             shift and go to state 129
    expression_list                shift and go to state 361
    assignment_expression          shift and go to state 150
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    logical_OR_expression          shift and go to state 113
    unary1_operator                shift and go to state 132
    cast_expression                shift and go to state 126
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    logical_AND_expression         shift and go to state 114
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    inclusive_OR_expression        shift and go to state 115
    literal                        shift and go to state 143
    exclusive_OR_expression        shift and go to state 116
    AND_expression                 shift and go to state 117
    equality_expression            shift and go to state 118
    relational_expression          shift and go to state 119
    shift_expression               shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 122
    pm_expression                  shift and go to state 125

state 306

    (96) postfix_expression -> postfix_expression DOT name .

    LSPAREN         reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    LPAREN          reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    DOT             reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    ARROW           reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    DPLUSOP         reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    DMINUSOP        reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    LTEMPLATE       reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    DOTSTAR         reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    ARROWSTAR       reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    MULTOP          reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    DIVOP           reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    MODOP           reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    PLUSOP          reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    MINUSOP         reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    LSHIFT          reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    RSHIFT          reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    LTCOMP          reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    GTCOMP          reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    LTECOMP         reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    GTECOMP         reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    EQCOMP          reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    NEQCOMP         reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    BANDOP          reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    XOROP           reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    OROP            reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    ANDOP           reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    QUESMARK        reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    RSPAREN         reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    EQUAL           reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    MULTEQOP        reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    DIVEQOP         reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    MODEQOP         reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    PLUSEQOP        reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    MINUSEQOP       reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    LSHIFTEQOP      reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    RSHIFTEQOP      reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    BANDEQOP        reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    BOREQOP         reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    RPAREN          reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    COMMA           reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    SEMICOLON       reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    RCPAREN         reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    COLON           reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    RTEMPLATE       reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)


state 307

    (97) postfix_expression -> postfix_expression ARROW name .

    LSPAREN         reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    LPAREN          reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    DOT             reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    ARROW           reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    DPLUSOP         reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    DMINUSOP        reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    LTEMPLATE       reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    DOTSTAR         reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    ARROWSTAR       reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    MULTOP          reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    DIVOP           reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    MODOP           reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    PLUSOP          reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    MINUSOP         reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    LSHIFT          reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    RSHIFT          reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    LTCOMP          reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    GTCOMP          reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    LTECOMP         reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    GTECOMP         reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    EQCOMP          reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    NEQCOMP         reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    BANDOP          reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    XOROP           reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    OROP            reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    ANDOP           reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    QUESMARK        reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    RSPAREN         reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    EQUAL           reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    MULTEQOP        reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    DIVEQOP         reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    MODEQOP         reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    PLUSEQOP        reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    MINUSEQOP       reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    LSHIFTEQOP      reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    RSHIFTEQOP      reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    BANDEQOP        reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    BOREQOP         reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    RPAREN          reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    COMMA           reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    SEMICOLON       reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    RCPAREN         reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    COLON           reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    RTEMPLATE       reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)


state 308

    (69) unary_expression -> SIZEOF LPAREN type_name . RPAREN

    RPAREN          shift and go to state 362


state 309

    (73) allocation_expression -> NEW new_type_name new_initializer .

    DOTSTAR         reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    ARROWSTAR       reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    MULTOP          reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    DIVOP           reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    MODOP           reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    PLUSOP          reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    MINUSOP         reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    LSHIFT          reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    RSHIFT          reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    LTCOMP          reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    GTCOMP          reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    LTECOMP         reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    GTECOMP         reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    EQCOMP          reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    NEQCOMP         reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    BANDOP          reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    XOROP           reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    OROP            reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    ANDOP           reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    QUESMARK        reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    RSPAREN         reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    EQUAL           reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    MULTEQOP        reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    DIVEQOP         reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    MODEQOP         reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    PLUSEQOP        reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    MINUSEQOP       reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    LSHIFTEQOP      reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    RSHIFTEQOP      reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    BANDEQOP        reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    BOREQOP         reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    RPAREN          reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    COMMA           reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    SEMICOLON       reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    RCPAREN         reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    COLON           reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    RTEMPLATE       reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)


state 310

    (83) new_initializer -> LPAREN . initializer_list RPAREN
    (84) new_initializer -> LPAREN . RPAREN
    (284) initializer_list -> . assignment_expression
    (285) initializer_list -> . initializer_list COMMA assignment_expression
    (286) initializer_list -> . LCPAREN initializer_list RCPAREN
    (287) initializer_list -> . LCPAREN initializer_list COMMA RCPAREN
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 364
    LCPAREN         shift and go to state 248
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    THIS            shift and go to state 144
    LPAREN          shift and go to state 148
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    initializer_list               shift and go to state 363
    assignment_expression          shift and go to state 250
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    cast_expression                shift and go to state 126
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    logical_AND_expression         shift and go to state 114
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    inclusive_OR_expression        shift and go to state 115
    literal                        shift and go to state 143
    exclusive_OR_expression        shift and go to state 116
    AND_expression                 shift and go to state 117
    equality_expression            shift and go to state 118
    relational_expression          shift and go to state 119
    shift_expression               shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 122
    pm_expression                  shift and go to state 125

state 311

    (75) allocation_expression -> NEW LPAREN type_name . RPAREN new_initializer
    (76) allocation_expression -> NEW LPAREN type_name . RPAREN

    RPAREN          shift and go to state 365


state 312

    (77) new_type_name -> type_specifier_ new_declarator .
    (79) new_declarator -> new_declarator . MULTOP
    (81) new_declarator -> new_declarator . LSPAREN expression RSPAREN

  ! shift/reduce conflict for MULTOP resolved as shift
    LPAREN          reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    DOTSTAR         reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    ARROWSTAR       reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    DIVOP           reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    MODOP           reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    PLUSOP          reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    MINUSOP         reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    LSHIFT          reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    RSHIFT          reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    LTCOMP          reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    GTCOMP          reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    LTECOMP         reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    GTECOMP         reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    EQCOMP          reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    NEQCOMP         reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    BANDOP          reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    XOROP           reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    OROP            reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    ANDOP           reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    QUESMARK        reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    RSPAREN         reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    EQUAL           reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    MULTEQOP        reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    DIVEQOP         reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    MODEQOP         reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    PLUSEQOP        reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    MINUSEQOP       reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    LSHIFTEQOP      reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    RSHIFTEQOP      reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    BANDEQOP        reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    BOREQOP         reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    RPAREN          reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    COMMA           reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    SEMICOLON       reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    RCPAREN         reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    COLON           reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    RTEMPLATE       reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    MULTOP          shift and go to state 366
    LSPAREN         shift and go to state 367

  ! MULTOP          [ reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .) ]


state 313

    (80) new_declarator -> MULTOP .

    MULTOP          reduce using rule 80 (new_declarator -> MULTOP .)
    LSPAREN         reduce using rule 80 (new_declarator -> MULTOP .)
    LPAREN          reduce using rule 80 (new_declarator -> MULTOP .)
    DOTSTAR         reduce using rule 80 (new_declarator -> MULTOP .)
    ARROWSTAR       reduce using rule 80 (new_declarator -> MULTOP .)
    DIVOP           reduce using rule 80 (new_declarator -> MULTOP .)
    MODOP           reduce using rule 80 (new_declarator -> MULTOP .)
    PLUSOP          reduce using rule 80 (new_declarator -> MULTOP .)
    MINUSOP         reduce using rule 80 (new_declarator -> MULTOP .)
    LSHIFT          reduce using rule 80 (new_declarator -> MULTOP .)
    RSHIFT          reduce using rule 80 (new_declarator -> MULTOP .)
    LTCOMP          reduce using rule 80 (new_declarator -> MULTOP .)
    GTCOMP          reduce using rule 80 (new_declarator -> MULTOP .)
    LTECOMP         reduce using rule 80 (new_declarator -> MULTOP .)
    GTECOMP         reduce using rule 80 (new_declarator -> MULTOP .)
    EQCOMP          reduce using rule 80 (new_declarator -> MULTOP .)
    NEQCOMP         reduce using rule 80 (new_declarator -> MULTOP .)
    BANDOP          reduce using rule 80 (new_declarator -> MULTOP .)
    XOROP           reduce using rule 80 (new_declarator -> MULTOP .)
    OROP            reduce using rule 80 (new_declarator -> MULTOP .)
    ANDOP           reduce using rule 80 (new_declarator -> MULTOP .)
    QUESMARK        reduce using rule 80 (new_declarator -> MULTOP .)
    RSPAREN         reduce using rule 80 (new_declarator -> MULTOP .)
    EQUAL           reduce using rule 80 (new_declarator -> MULTOP .)
    MULTEQOP        reduce using rule 80 (new_declarator -> MULTOP .)
    DIVEQOP         reduce using rule 80 (new_declarator -> MULTOP .)
    MODEQOP         reduce using rule 80 (new_declarator -> MULTOP .)
    PLUSEQOP        reduce using rule 80 (new_declarator -> MULTOP .)
    MINUSEQOP       reduce using rule 80 (new_declarator -> MULTOP .)
    LSHIFTEQOP      reduce using rule 80 (new_declarator -> MULTOP .)
    RSHIFTEQOP      reduce using rule 80 (new_declarator -> MULTOP .)
    BANDEQOP        reduce using rule 80 (new_declarator -> MULTOP .)
    BOREQOP         reduce using rule 80 (new_declarator -> MULTOP .)
    RPAREN          reduce using rule 80 (new_declarator -> MULTOP .)
    COMMA           reduce using rule 80 (new_declarator -> MULTOP .)
    SEMICOLON       reduce using rule 80 (new_declarator -> MULTOP .)
    RCPAREN         reduce using rule 80 (new_declarator -> MULTOP .)
    COLON           reduce using rule 80 (new_declarator -> MULTOP .)
    RTEMPLATE       reduce using rule 80 (new_declarator -> MULTOP .)


state 314

    (82) new_declarator -> LSPAREN . expression RSPAREN
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    THROW           shift and go to state 216
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    THIS            shift and go to state 144
    LPAREN          shift and go to state 148
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    expression                     shift and go to state 368
    assignment_expression          shift and go to state 214
    throw_expression               shift and go to state 215
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    cast_expression                shift and go to state 126
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    logical_AND_expression         shift and go to state 114
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    inclusive_OR_expression        shift and go to state 115
    literal                        shift and go to state 143
    exclusive_OR_expression        shift and go to state 116
    AND_expression                 shift and go to state 117
    equality_expression            shift and go to state 118
    relational_expression          shift and go to state 119
    shift_expression               shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 122
    pm_expression                  shift and go to state 125

state 315

    (290) expression_list -> expression_list COMMA assignment_expression .

    RPAREN          reduce using rule 290 (expression_list -> expression_list COMMA assignment_expression .)
    COMMA           reduce using rule 290 (expression_list -> expression_list COMMA assignment_expression .)


state 316

    (52) assignment_expression -> unary_expression assignment_operator assignment_expression .

    RPAREN          reduce using rule 52 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COMMA           reduce using rule 52 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    SEMICOLON       reduce using rule 52 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RCPAREN         reduce using rule 52 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COLON           reduce using rule 52 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RSPAREN         reduce using rule 52 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RTEMPLATE       reduce using rule 52 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 317

    (286) initializer_list -> LCPAREN initializer_list . RCPAREN
    (287) initializer_list -> LCPAREN initializer_list . COMMA RCPAREN
    (285) initializer_list -> initializer_list . COMMA assignment_expression

    RCPAREN         shift and go to state 369
    COMMA           shift and go to state 370


state 318

    (281) initializer -> EQUAL LCPAREN initializer_list RCPAREN .

    SEMICOLON       reduce using rule 281 (initializer -> EQUAL LCPAREN initializer_list RCPAREN .)
    COMMA           reduce using rule 281 (initializer -> EQUAL LCPAREN initializer_list RCPAREN .)


state 319

    (282) initializer -> EQUAL LCPAREN initializer_list COMMA . RCPAREN
    (285) initializer_list -> initializer_list COMMA . assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RCPAREN         shift and go to state 371
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    THIS            shift and go to state 144
    LPAREN          shift and go to state 148
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    assignment_expression          shift and go to state 372
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    cast_expression                shift and go to state 126
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    logical_AND_expression         shift and go to state 114
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    inclusive_OR_expression        shift and go to state 115
    literal                        shift and go to state 143
    exclusive_OR_expression        shift and go to state 116
    AND_expression                 shift and go to state 117
    equality_expression            shift and go to state 118
    relational_expression          shift and go to state 119
    shift_expression               shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 122
    pm_expression                  shift and go to state 125

state 320

    (227) function_definition -> type_specifier_ declarator func_push_scope arg_list . RPAREN fct_body pop_scope

    RPAREN          shift and go to state 373


state 321

    (124) argument_declaration -> type_specifier_ declarator EQUAL expression .
    (48) expression -> expression . COMMA assignment_expression

  ! shift/reduce conflict for COMMA resolved as shift
    RTEMPLATE       reduce using rule 124 (argument_declaration -> type_specifier_ declarator EQUAL expression .)
    RPAREN          reduce using rule 124 (argument_declaration -> type_specifier_ declarator EQUAL expression .)
    COMMA           shift and go to state 300

  ! COMMA           [ reduce using rule 124 (argument_declaration -> type_specifier_ declarator EQUAL expression .) ]


state 322

    (112) abstract_declarator -> abstract_declarator LSPAREN constant_expression RSPAREN .

    IDENTIFIER      reduce using rule 112 (abstract_declarator -> abstract_declarator LSPAREN constant_expression RSPAREN .)
    LSPAREN         reduce using rule 112 (abstract_declarator -> abstract_declarator LSPAREN constant_expression RSPAREN .)
    RTEMPLATE       reduce using rule 112 (abstract_declarator -> abstract_declarator LSPAREN constant_expression RSPAREN .)
    COMMA           reduce using rule 112 (abstract_declarator -> abstract_declarator LSPAREN constant_expression RSPAREN .)
    RPAREN          reduce using rule 112 (abstract_declarator -> abstract_declarator LSPAREN constant_expression RSPAREN .)


state 323

    (196) base_list -> base_list COMMA base_specifier .

    COMMA           reduce using rule 196 (base_list -> base_list COMMA base_specifier .)
    LCPAREN         reduce using rule 196 (base_list -> base_list COMMA base_specifier .)


state 324

    (198) base_specifier -> class_key IDENTIFIER template_class_name .

    COMMA           reduce using rule 198 (base_specifier -> class_key IDENTIFIER template_class_name .)
    LCPAREN         reduce using rule 198 (base_specifier -> class_key IDENTIFIER template_class_name .)


state 325

    (201) base_specifier -> access_specifier class_key IDENTIFIER .
    (202) base_specifier -> access_specifier class_key IDENTIFIER . template_class_name
    (165) template_class_name -> . LTEMPLATE template_arg_list RTEMPLATE

    COMMA           reduce using rule 201 (base_specifier -> access_specifier class_key IDENTIFIER .)
    LCPAREN         reduce using rule 201 (base_specifier -> access_specifier class_key IDENTIFIER .)
    LTEMPLATE       shift and go to state 101

    template_class_name            shift and go to state 374

state 326

    (167) template_arg_list -> template_arg_list COMMA type_name .

    RTEMPLATE       reduce using rule 167 (template_arg_list -> template_arg_list COMMA type_name .)
    COMMA           reduce using rule 167 (template_arg_list -> template_arg_list COMMA type_name .)


state 327

    (227) function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .

    CONST           reduce using rule 227 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    ASM             reduce using rule 227 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    TEMPLATE        reduce using rule 227 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    TYPEDEF         reduce using rule 227 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    CHAR            reduce using rule 227 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    SHORT           reduce using rule 227 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    INT             reduce using rule 227 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    LONG            reduce using rule 227 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    SIGNED          reduce using rule 227 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    UNSIGNED        reduce using rule 227 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    FLOAT           reduce using rule 227 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    DOUBLE          reduce using rule 227 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    VOID            reduce using rule 227 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    STRING          reduce using rule 227 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    AUTO            reduce using rule 227 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    TYPE            reduce using rule 227 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    CLASS           reduce using rule 227 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    STRUCT          reduce using rule 227 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    $end            reduce using rule 227 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    SEMICOLON       reduce using rule 227 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    IDENTIFIER      reduce using rule 227 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    DOUBLEBNOP      reduce using rule 227 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    MULTOP          reduce using rule 227 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    BANDOP          reduce using rule 227 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    RCPAREN         reduce using rule 227 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    PRIVATE         reduce using rule 227 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    PROTECTED       reduce using rule 227 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    PUBLIC          reduce using rule 227 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    CASE            reduce using rule 227 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    DEFAULT         reduce using rule 227 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    LCPAREN         reduce using rule 227 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    IF              reduce using rule 227 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    SWITCH          reduce using rule 227 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    WHILE           reduce using rule 227 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    DO              reduce using rule 227 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    FOR             reduce using rule 227 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    BREAK           reduce using rule 227 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    CONTINUE        reduce using rule 227 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    RETURN          reduce using rule 227 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    GOTO            reduce using rule 227 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    TRY             reduce using rule 227 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    THROW           reduce using rule 227 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    DPLUSOP         reduce using rule 227 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    DMINUSOP        reduce using rule 227 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    SIZEOF          reduce using rule 227 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    PLUSOP          reduce using rule 227 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    MINUSOP         reduce using rule 227 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    NOTSYM          reduce using rule 227 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    BNOP            reduce using rule 227 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    NEW             reduce using rule 227 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    DELETE          reduce using rule 227 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    THIS            reduce using rule 227 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    LPAREN          reduce using rule 227 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    STRING_L        reduce using rule 227 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    NUMBER          reduce using rule 227 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    SCHAR           reduce using rule 227 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    ELSE            reduce using rule 227 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)


state 328

    (228) function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .

    CONST           reduce using rule 228 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    ASM             reduce using rule 228 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    TEMPLATE        reduce using rule 228 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    TYPEDEF         reduce using rule 228 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    CHAR            reduce using rule 228 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    SHORT           reduce using rule 228 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    INT             reduce using rule 228 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    LONG            reduce using rule 228 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    SIGNED          reduce using rule 228 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    UNSIGNED        reduce using rule 228 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    FLOAT           reduce using rule 228 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    DOUBLE          reduce using rule 228 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    VOID            reduce using rule 228 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    STRING          reduce using rule 228 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    AUTO            reduce using rule 228 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    TYPE            reduce using rule 228 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    CLASS           reduce using rule 228 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    STRUCT          reduce using rule 228 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    $end            reduce using rule 228 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    RCPAREN         reduce using rule 228 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    IDENTIFIER      reduce using rule 228 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    CASE            reduce using rule 228 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    DEFAULT         reduce using rule 228 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    SEMICOLON       reduce using rule 228 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    LCPAREN         reduce using rule 228 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    IF              reduce using rule 228 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    SWITCH          reduce using rule 228 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    WHILE           reduce using rule 228 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    DO              reduce using rule 228 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    FOR             reduce using rule 228 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    BREAK           reduce using rule 228 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    CONTINUE        reduce using rule 228 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    RETURN          reduce using rule 228 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    GOTO            reduce using rule 228 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    TRY             reduce using rule 228 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    THROW           reduce using rule 228 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    DPLUSOP         reduce using rule 228 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    DMINUSOP        reduce using rule 228 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    SIZEOF          reduce using rule 228 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    PLUSOP          reduce using rule 228 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    MINUSOP         reduce using rule 228 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    NOTSYM          reduce using rule 228 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    BNOP            reduce using rule 228 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    MULTOP          reduce using rule 228 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    BANDOP          reduce using rule 228 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    NEW             reduce using rule 228 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    DELETE          reduce using rule 228 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    THIS            reduce using rule 228 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    LPAREN          reduce using rule 228 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    DOUBLEBNOP      reduce using rule 228 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    STRING_L        reduce using rule 228 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    NUMBER          reduce using rule 228 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    SCHAR           reduce using rule 228 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    ELSE            reduce using rule 228 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)


state 329

    (231) compound_statement -> LCPAREN statement_list . RCPAREN
    (234) statement_list -> statement_list . statement
    (235) statement -> . labeled_statement
    (236) statement -> . expression_statement
    (237) statement -> . compound_statement
    (238) statement -> . selection_statement
    (239) statement -> . iteration_statement
    (240) statement -> . jump_statement
    (241) statement -> . declaration_statement
    (242) statement -> . try_block
    (252) labeled_statement -> . IDENTIFIER COLON statement
    (253) labeled_statement -> . CASE constant_expression COLON statement
    (254) labeled_statement -> . DEFAULT COLON statement
    (263) expression_statement -> . expression SEMICOLON
    (264) expression_statement -> . SEMICOLON
    (231) compound_statement -> . LCPAREN statement_list RCPAREN
    (232) compound_statement -> . LCPAREN RCPAREN
    (248) selection_statement -> . IF LPAREN expression RPAREN statement
    (249) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (250) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (255) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (256) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (257) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement
    (258) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement
    (259) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement
    (260) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (243) jump_statement -> . BREAK SEMICOLON
    (244) jump_statement -> . CONTINUE SEMICOLON
    (245) jump_statement -> . RETURN expression SEMICOLON
    (246) jump_statement -> . RETURN SEMICOLON
    (247) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (265) declaration_statement -> . declaration
    (251) try_block -> . TRY compound_statement CATCH compound_statement
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (266) declaration -> . type_specifier_ declarator_list SEMICOLON
    (267) declaration -> . asm_declaration
    (268) declaration -> . function_definition
    (269) declaration -> . function_decl
    (270) declaration -> . class_define_specifier SEMICOLON
    (271) declaration -> . template_declaration
    (272) declaration -> . typedef_declarator
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (170) type_specifier_ -> . CONST type_specifier
    (171) type_specifier_ -> . type_specifier
    (288) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (227) function_definition -> . type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope
    (228) function_decl -> . type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope
    (205) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (206) class_define_specifier -> . class_head LCPAREN RCPAREN
    (273) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (172) typedef_declarator -> . TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON
    (173) typedef_declarator -> . TYPEDEF type_specifier_ IDENTIFIER SEMICOLON
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (174) type_specifier -> . simple_type_name
    (175) type_specifier -> . complex_type_specifier
    (192) class_head -> . class_key IDENTIFIER base_spec
    (193) class_head -> . class_key IDENTIFIER
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (176) simple_type_name -> . CHAR
    (177) simple_type_name -> . SHORT
    (178) simple_type_name -> . INT
    (179) simple_type_name -> . LONG
    (180) simple_type_name -> . SIGNED
    (181) simple_type_name -> . UNSIGNED
    (182) simple_type_name -> . FLOAT
    (183) simple_type_name -> . DOUBLE
    (184) simple_type_name -> . VOID
    (185) simple_type_name -> . STRING
    (186) simple_type_name -> . AUTO
    (187) complex_type_specifier -> . class_key IDENTIFIER
    (188) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (189) complex_type_specifier -> . TYPE IDENTIFIER
    (190) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (203) class_key -> . CLASS
    (204) class_key -> . STRUCT
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RCPAREN         shift and go to state 375
    IDENTIFIER      shift and go to state 340
    CASE            shift and go to state 341
    DEFAULT         shift and go to state 342
    SEMICOLON       shift and go to state 344
    LCPAREN         shift and go to state 275
    IF              shift and go to state 345
    SWITCH          shift and go to state 346
    WHILE           shift and go to state 347
    DO              shift and go to state 348
    FOR             shift and go to state 349
    BREAK           shift and go to state 350
    CONTINUE        shift and go to state 351
    RETURN          shift and go to state 352
    GOTO            shift and go to state 353
    TRY             shift and go to state 355
    THROW           shift and go to state 216
    CONST           shift and go to state 16
    ASM             shift and go to state 18
    TEMPLATE        shift and go to state 20
    TYPEDEF         shift and go to state 21
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38
    THIS            shift and go to state 144
    LPAREN          shift and go to state 148
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    statement                      shift and go to state 376
    labeled_statement              shift and go to state 332
    expression_statement           shift and go to state 333
    compound_statement             shift and go to state 334
    selection_statement            shift and go to state 335
    iteration_statement            shift and go to state 336
    jump_statement                 shift and go to state 337
    declaration_statement          shift and go to state 338
    try_block                      shift and go to state 339
    expression                     shift and go to state 343
    declaration                    shift and go to state 354
    assignment_expression          shift and go to state 214
    throw_expression               shift and go to state 215
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    function_decl                  shift and go to state 12
    class_define_specifier         shift and go to state 13
    template_declaration           shift and go to state 14
    typedef_declarator             shift and go to state 15
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    type_specifier                 shift and go to state 17
    class_head                     shift and go to state 19
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    cast_expression                shift and go to state 126
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 24
    logical_AND_expression         shift and go to state 114
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    inclusive_OR_expression        shift and go to state 115
    literal                        shift and go to state 143
    exclusive_OR_expression        shift and go to state 116
    AND_expression                 shift and go to state 117
    equality_expression            shift and go to state 118
    relational_expression          shift and go to state 119
    shift_expression               shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 122
    pm_expression                  shift and go to state 125

state 330

    (232) compound_statement -> LCPAREN RCPAREN .

    CONST           reduce using rule 232 (compound_statement -> LCPAREN RCPAREN .)
    ASM             reduce using rule 232 (compound_statement -> LCPAREN RCPAREN .)
    TEMPLATE        reduce using rule 232 (compound_statement -> LCPAREN RCPAREN .)
    TYPEDEF         reduce using rule 232 (compound_statement -> LCPAREN RCPAREN .)
    CHAR            reduce using rule 232 (compound_statement -> LCPAREN RCPAREN .)
    SHORT           reduce using rule 232 (compound_statement -> LCPAREN RCPAREN .)
    INT             reduce using rule 232 (compound_statement -> LCPAREN RCPAREN .)
    LONG            reduce using rule 232 (compound_statement -> LCPAREN RCPAREN .)
    SIGNED          reduce using rule 232 (compound_statement -> LCPAREN RCPAREN .)
    UNSIGNED        reduce using rule 232 (compound_statement -> LCPAREN RCPAREN .)
    FLOAT           reduce using rule 232 (compound_statement -> LCPAREN RCPAREN .)
    DOUBLE          reduce using rule 232 (compound_statement -> LCPAREN RCPAREN .)
    VOID            reduce using rule 232 (compound_statement -> LCPAREN RCPAREN .)
    STRING          reduce using rule 232 (compound_statement -> LCPAREN RCPAREN .)
    AUTO            reduce using rule 232 (compound_statement -> LCPAREN RCPAREN .)
    TYPE            reduce using rule 232 (compound_statement -> LCPAREN RCPAREN .)
    CLASS           reduce using rule 232 (compound_statement -> LCPAREN RCPAREN .)
    STRUCT          reduce using rule 232 (compound_statement -> LCPAREN RCPAREN .)
    $end            reduce using rule 232 (compound_statement -> LCPAREN RCPAREN .)
    RCPAREN         reduce using rule 232 (compound_statement -> LCPAREN RCPAREN .)
    IDENTIFIER      reduce using rule 232 (compound_statement -> LCPAREN RCPAREN .)
    CASE            reduce using rule 232 (compound_statement -> LCPAREN RCPAREN .)
    DEFAULT         reduce using rule 232 (compound_statement -> LCPAREN RCPAREN .)
    SEMICOLON       reduce using rule 232 (compound_statement -> LCPAREN RCPAREN .)
    LCPAREN         reduce using rule 232 (compound_statement -> LCPAREN RCPAREN .)
    IF              reduce using rule 232 (compound_statement -> LCPAREN RCPAREN .)
    SWITCH          reduce using rule 232 (compound_statement -> LCPAREN RCPAREN .)
    WHILE           reduce using rule 232 (compound_statement -> LCPAREN RCPAREN .)
    DO              reduce using rule 232 (compound_statement -> LCPAREN RCPAREN .)
    FOR             reduce using rule 232 (compound_statement -> LCPAREN RCPAREN .)
    BREAK           reduce using rule 232 (compound_statement -> LCPAREN RCPAREN .)
    CONTINUE        reduce using rule 232 (compound_statement -> LCPAREN RCPAREN .)
    RETURN          reduce using rule 232 (compound_statement -> LCPAREN RCPAREN .)
    GOTO            reduce using rule 232 (compound_statement -> LCPAREN RCPAREN .)
    TRY             reduce using rule 232 (compound_statement -> LCPAREN RCPAREN .)
    THROW           reduce using rule 232 (compound_statement -> LCPAREN RCPAREN .)
    DPLUSOP         reduce using rule 232 (compound_statement -> LCPAREN RCPAREN .)
    DMINUSOP        reduce using rule 232 (compound_statement -> LCPAREN RCPAREN .)
    SIZEOF          reduce using rule 232 (compound_statement -> LCPAREN RCPAREN .)
    PLUSOP          reduce using rule 232 (compound_statement -> LCPAREN RCPAREN .)
    MINUSOP         reduce using rule 232 (compound_statement -> LCPAREN RCPAREN .)
    NOTSYM          reduce using rule 232 (compound_statement -> LCPAREN RCPAREN .)
    BNOP            reduce using rule 232 (compound_statement -> LCPAREN RCPAREN .)
    MULTOP          reduce using rule 232 (compound_statement -> LCPAREN RCPAREN .)
    BANDOP          reduce using rule 232 (compound_statement -> LCPAREN RCPAREN .)
    NEW             reduce using rule 232 (compound_statement -> LCPAREN RCPAREN .)
    DELETE          reduce using rule 232 (compound_statement -> LCPAREN RCPAREN .)
    THIS            reduce using rule 232 (compound_statement -> LCPAREN RCPAREN .)
    LPAREN          reduce using rule 232 (compound_statement -> LCPAREN RCPAREN .)
    DOUBLEBNOP      reduce using rule 232 (compound_statement -> LCPAREN RCPAREN .)
    STRING_L        reduce using rule 232 (compound_statement -> LCPAREN RCPAREN .)
    NUMBER          reduce using rule 232 (compound_statement -> LCPAREN RCPAREN .)
    SCHAR           reduce using rule 232 (compound_statement -> LCPAREN RCPAREN .)
    ELSE            reduce using rule 232 (compound_statement -> LCPAREN RCPAREN .)
    CATCH           reduce using rule 232 (compound_statement -> LCPAREN RCPAREN .)
    PRIVATE         reduce using rule 232 (compound_statement -> LCPAREN RCPAREN .)
    PROTECTED       reduce using rule 232 (compound_statement -> LCPAREN RCPAREN .)
    PUBLIC          reduce using rule 232 (compound_statement -> LCPAREN RCPAREN .)


state 331

    (233) statement_list -> statement .

    RCPAREN         reduce using rule 233 (statement_list -> statement .)
    IDENTIFIER      reduce using rule 233 (statement_list -> statement .)
    CASE            reduce using rule 233 (statement_list -> statement .)
    DEFAULT         reduce using rule 233 (statement_list -> statement .)
    SEMICOLON       reduce using rule 233 (statement_list -> statement .)
    LCPAREN         reduce using rule 233 (statement_list -> statement .)
    IF              reduce using rule 233 (statement_list -> statement .)
    SWITCH          reduce using rule 233 (statement_list -> statement .)
    WHILE           reduce using rule 233 (statement_list -> statement .)
    DO              reduce using rule 233 (statement_list -> statement .)
    FOR             reduce using rule 233 (statement_list -> statement .)
    BREAK           reduce using rule 233 (statement_list -> statement .)
    CONTINUE        reduce using rule 233 (statement_list -> statement .)
    RETURN          reduce using rule 233 (statement_list -> statement .)
    GOTO            reduce using rule 233 (statement_list -> statement .)
    TRY             reduce using rule 233 (statement_list -> statement .)
    THROW           reduce using rule 233 (statement_list -> statement .)
    CONST           reduce using rule 233 (statement_list -> statement .)
    ASM             reduce using rule 233 (statement_list -> statement .)
    TEMPLATE        reduce using rule 233 (statement_list -> statement .)
    TYPEDEF         reduce using rule 233 (statement_list -> statement .)
    DPLUSOP         reduce using rule 233 (statement_list -> statement .)
    DMINUSOP        reduce using rule 233 (statement_list -> statement .)
    SIZEOF          reduce using rule 233 (statement_list -> statement .)
    PLUSOP          reduce using rule 233 (statement_list -> statement .)
    MINUSOP         reduce using rule 233 (statement_list -> statement .)
    NOTSYM          reduce using rule 233 (statement_list -> statement .)
    BNOP            reduce using rule 233 (statement_list -> statement .)
    MULTOP          reduce using rule 233 (statement_list -> statement .)
    BANDOP          reduce using rule 233 (statement_list -> statement .)
    NEW             reduce using rule 233 (statement_list -> statement .)
    DELETE          reduce using rule 233 (statement_list -> statement .)
    CHAR            reduce using rule 233 (statement_list -> statement .)
    SHORT           reduce using rule 233 (statement_list -> statement .)
    INT             reduce using rule 233 (statement_list -> statement .)
    LONG            reduce using rule 233 (statement_list -> statement .)
    SIGNED          reduce using rule 233 (statement_list -> statement .)
    UNSIGNED        reduce using rule 233 (statement_list -> statement .)
    FLOAT           reduce using rule 233 (statement_list -> statement .)
    DOUBLE          reduce using rule 233 (statement_list -> statement .)
    VOID            reduce using rule 233 (statement_list -> statement .)
    STRING          reduce using rule 233 (statement_list -> statement .)
    AUTO            reduce using rule 233 (statement_list -> statement .)
    TYPE            reduce using rule 233 (statement_list -> statement .)
    CLASS           reduce using rule 233 (statement_list -> statement .)
    STRUCT          reduce using rule 233 (statement_list -> statement .)
    THIS            reduce using rule 233 (statement_list -> statement .)
    LPAREN          reduce using rule 233 (statement_list -> statement .)
    DOUBLEBNOP      reduce using rule 233 (statement_list -> statement .)
    STRING_L        reduce using rule 233 (statement_list -> statement .)
    NUMBER          reduce using rule 233 (statement_list -> statement .)
    SCHAR           reduce using rule 233 (statement_list -> statement .)


state 332

    (235) statement -> labeled_statement .

    RCPAREN         reduce using rule 235 (statement -> labeled_statement .)
    IDENTIFIER      reduce using rule 235 (statement -> labeled_statement .)
    CASE            reduce using rule 235 (statement -> labeled_statement .)
    DEFAULT         reduce using rule 235 (statement -> labeled_statement .)
    SEMICOLON       reduce using rule 235 (statement -> labeled_statement .)
    LCPAREN         reduce using rule 235 (statement -> labeled_statement .)
    IF              reduce using rule 235 (statement -> labeled_statement .)
    SWITCH          reduce using rule 235 (statement -> labeled_statement .)
    WHILE           reduce using rule 235 (statement -> labeled_statement .)
    DO              reduce using rule 235 (statement -> labeled_statement .)
    FOR             reduce using rule 235 (statement -> labeled_statement .)
    BREAK           reduce using rule 235 (statement -> labeled_statement .)
    CONTINUE        reduce using rule 235 (statement -> labeled_statement .)
    RETURN          reduce using rule 235 (statement -> labeled_statement .)
    GOTO            reduce using rule 235 (statement -> labeled_statement .)
    TRY             reduce using rule 235 (statement -> labeled_statement .)
    THROW           reduce using rule 235 (statement -> labeled_statement .)
    CONST           reduce using rule 235 (statement -> labeled_statement .)
    ASM             reduce using rule 235 (statement -> labeled_statement .)
    TEMPLATE        reduce using rule 235 (statement -> labeled_statement .)
    TYPEDEF         reduce using rule 235 (statement -> labeled_statement .)
    DPLUSOP         reduce using rule 235 (statement -> labeled_statement .)
    DMINUSOP        reduce using rule 235 (statement -> labeled_statement .)
    SIZEOF          reduce using rule 235 (statement -> labeled_statement .)
    PLUSOP          reduce using rule 235 (statement -> labeled_statement .)
    MINUSOP         reduce using rule 235 (statement -> labeled_statement .)
    NOTSYM          reduce using rule 235 (statement -> labeled_statement .)
    BNOP            reduce using rule 235 (statement -> labeled_statement .)
    MULTOP          reduce using rule 235 (statement -> labeled_statement .)
    BANDOP          reduce using rule 235 (statement -> labeled_statement .)
    NEW             reduce using rule 235 (statement -> labeled_statement .)
    DELETE          reduce using rule 235 (statement -> labeled_statement .)
    CHAR            reduce using rule 235 (statement -> labeled_statement .)
    SHORT           reduce using rule 235 (statement -> labeled_statement .)
    INT             reduce using rule 235 (statement -> labeled_statement .)
    LONG            reduce using rule 235 (statement -> labeled_statement .)
    SIGNED          reduce using rule 235 (statement -> labeled_statement .)
    UNSIGNED        reduce using rule 235 (statement -> labeled_statement .)
    FLOAT           reduce using rule 235 (statement -> labeled_statement .)
    DOUBLE          reduce using rule 235 (statement -> labeled_statement .)
    VOID            reduce using rule 235 (statement -> labeled_statement .)
    STRING          reduce using rule 235 (statement -> labeled_statement .)
    AUTO            reduce using rule 235 (statement -> labeled_statement .)
    TYPE            reduce using rule 235 (statement -> labeled_statement .)
    CLASS           reduce using rule 235 (statement -> labeled_statement .)
    STRUCT          reduce using rule 235 (statement -> labeled_statement .)
    THIS            reduce using rule 235 (statement -> labeled_statement .)
    LPAREN          reduce using rule 235 (statement -> labeled_statement .)
    DOUBLEBNOP      reduce using rule 235 (statement -> labeled_statement .)
    STRING_L        reduce using rule 235 (statement -> labeled_statement .)
    NUMBER          reduce using rule 235 (statement -> labeled_statement .)
    SCHAR           reduce using rule 235 (statement -> labeled_statement .)
    ELSE            reduce using rule 235 (statement -> labeled_statement .)


state 333

    (236) statement -> expression_statement .

    RCPAREN         reduce using rule 236 (statement -> expression_statement .)
    IDENTIFIER      reduce using rule 236 (statement -> expression_statement .)
    CASE            reduce using rule 236 (statement -> expression_statement .)
    DEFAULT         reduce using rule 236 (statement -> expression_statement .)
    SEMICOLON       reduce using rule 236 (statement -> expression_statement .)
    LCPAREN         reduce using rule 236 (statement -> expression_statement .)
    IF              reduce using rule 236 (statement -> expression_statement .)
    SWITCH          reduce using rule 236 (statement -> expression_statement .)
    WHILE           reduce using rule 236 (statement -> expression_statement .)
    DO              reduce using rule 236 (statement -> expression_statement .)
    FOR             reduce using rule 236 (statement -> expression_statement .)
    BREAK           reduce using rule 236 (statement -> expression_statement .)
    CONTINUE        reduce using rule 236 (statement -> expression_statement .)
    RETURN          reduce using rule 236 (statement -> expression_statement .)
    GOTO            reduce using rule 236 (statement -> expression_statement .)
    TRY             reduce using rule 236 (statement -> expression_statement .)
    THROW           reduce using rule 236 (statement -> expression_statement .)
    CONST           reduce using rule 236 (statement -> expression_statement .)
    ASM             reduce using rule 236 (statement -> expression_statement .)
    TEMPLATE        reduce using rule 236 (statement -> expression_statement .)
    TYPEDEF         reduce using rule 236 (statement -> expression_statement .)
    DPLUSOP         reduce using rule 236 (statement -> expression_statement .)
    DMINUSOP        reduce using rule 236 (statement -> expression_statement .)
    SIZEOF          reduce using rule 236 (statement -> expression_statement .)
    PLUSOP          reduce using rule 236 (statement -> expression_statement .)
    MINUSOP         reduce using rule 236 (statement -> expression_statement .)
    NOTSYM          reduce using rule 236 (statement -> expression_statement .)
    BNOP            reduce using rule 236 (statement -> expression_statement .)
    MULTOP          reduce using rule 236 (statement -> expression_statement .)
    BANDOP          reduce using rule 236 (statement -> expression_statement .)
    NEW             reduce using rule 236 (statement -> expression_statement .)
    DELETE          reduce using rule 236 (statement -> expression_statement .)
    CHAR            reduce using rule 236 (statement -> expression_statement .)
    SHORT           reduce using rule 236 (statement -> expression_statement .)
    INT             reduce using rule 236 (statement -> expression_statement .)
    LONG            reduce using rule 236 (statement -> expression_statement .)
    SIGNED          reduce using rule 236 (statement -> expression_statement .)
    UNSIGNED        reduce using rule 236 (statement -> expression_statement .)
    FLOAT           reduce using rule 236 (statement -> expression_statement .)
    DOUBLE          reduce using rule 236 (statement -> expression_statement .)
    VOID            reduce using rule 236 (statement -> expression_statement .)
    STRING          reduce using rule 236 (statement -> expression_statement .)
    AUTO            reduce using rule 236 (statement -> expression_statement .)
    TYPE            reduce using rule 236 (statement -> expression_statement .)
    CLASS           reduce using rule 236 (statement -> expression_statement .)
    STRUCT          reduce using rule 236 (statement -> expression_statement .)
    THIS            reduce using rule 236 (statement -> expression_statement .)
    LPAREN          reduce using rule 236 (statement -> expression_statement .)
    DOUBLEBNOP      reduce using rule 236 (statement -> expression_statement .)
    STRING_L        reduce using rule 236 (statement -> expression_statement .)
    NUMBER          reduce using rule 236 (statement -> expression_statement .)
    SCHAR           reduce using rule 236 (statement -> expression_statement .)
    ELSE            reduce using rule 236 (statement -> expression_statement .)


state 334

    (237) statement -> compound_statement .

    RCPAREN         reduce using rule 237 (statement -> compound_statement .)
    IDENTIFIER      reduce using rule 237 (statement -> compound_statement .)
    CASE            reduce using rule 237 (statement -> compound_statement .)
    DEFAULT         reduce using rule 237 (statement -> compound_statement .)
    SEMICOLON       reduce using rule 237 (statement -> compound_statement .)
    LCPAREN         reduce using rule 237 (statement -> compound_statement .)
    IF              reduce using rule 237 (statement -> compound_statement .)
    SWITCH          reduce using rule 237 (statement -> compound_statement .)
    WHILE           reduce using rule 237 (statement -> compound_statement .)
    DO              reduce using rule 237 (statement -> compound_statement .)
    FOR             reduce using rule 237 (statement -> compound_statement .)
    BREAK           reduce using rule 237 (statement -> compound_statement .)
    CONTINUE        reduce using rule 237 (statement -> compound_statement .)
    RETURN          reduce using rule 237 (statement -> compound_statement .)
    GOTO            reduce using rule 237 (statement -> compound_statement .)
    TRY             reduce using rule 237 (statement -> compound_statement .)
    THROW           reduce using rule 237 (statement -> compound_statement .)
    CONST           reduce using rule 237 (statement -> compound_statement .)
    ASM             reduce using rule 237 (statement -> compound_statement .)
    TEMPLATE        reduce using rule 237 (statement -> compound_statement .)
    TYPEDEF         reduce using rule 237 (statement -> compound_statement .)
    DPLUSOP         reduce using rule 237 (statement -> compound_statement .)
    DMINUSOP        reduce using rule 237 (statement -> compound_statement .)
    SIZEOF          reduce using rule 237 (statement -> compound_statement .)
    PLUSOP          reduce using rule 237 (statement -> compound_statement .)
    MINUSOP         reduce using rule 237 (statement -> compound_statement .)
    NOTSYM          reduce using rule 237 (statement -> compound_statement .)
    BNOP            reduce using rule 237 (statement -> compound_statement .)
    MULTOP          reduce using rule 237 (statement -> compound_statement .)
    BANDOP          reduce using rule 237 (statement -> compound_statement .)
    NEW             reduce using rule 237 (statement -> compound_statement .)
    DELETE          reduce using rule 237 (statement -> compound_statement .)
    CHAR            reduce using rule 237 (statement -> compound_statement .)
    SHORT           reduce using rule 237 (statement -> compound_statement .)
    INT             reduce using rule 237 (statement -> compound_statement .)
    LONG            reduce using rule 237 (statement -> compound_statement .)
    SIGNED          reduce using rule 237 (statement -> compound_statement .)
    UNSIGNED        reduce using rule 237 (statement -> compound_statement .)
    FLOAT           reduce using rule 237 (statement -> compound_statement .)
    DOUBLE          reduce using rule 237 (statement -> compound_statement .)
    VOID            reduce using rule 237 (statement -> compound_statement .)
    STRING          reduce using rule 237 (statement -> compound_statement .)
    AUTO            reduce using rule 237 (statement -> compound_statement .)
    TYPE            reduce using rule 237 (statement -> compound_statement .)
    CLASS           reduce using rule 237 (statement -> compound_statement .)
    STRUCT          reduce using rule 237 (statement -> compound_statement .)
    THIS            reduce using rule 237 (statement -> compound_statement .)
    LPAREN          reduce using rule 237 (statement -> compound_statement .)
    DOUBLEBNOP      reduce using rule 237 (statement -> compound_statement .)
    STRING_L        reduce using rule 237 (statement -> compound_statement .)
    NUMBER          reduce using rule 237 (statement -> compound_statement .)
    SCHAR           reduce using rule 237 (statement -> compound_statement .)
    ELSE            reduce using rule 237 (statement -> compound_statement .)


state 335

    (238) statement -> selection_statement .

    RCPAREN         reduce using rule 238 (statement -> selection_statement .)
    IDENTIFIER      reduce using rule 238 (statement -> selection_statement .)
    CASE            reduce using rule 238 (statement -> selection_statement .)
    DEFAULT         reduce using rule 238 (statement -> selection_statement .)
    SEMICOLON       reduce using rule 238 (statement -> selection_statement .)
    LCPAREN         reduce using rule 238 (statement -> selection_statement .)
    IF              reduce using rule 238 (statement -> selection_statement .)
    SWITCH          reduce using rule 238 (statement -> selection_statement .)
    WHILE           reduce using rule 238 (statement -> selection_statement .)
    DO              reduce using rule 238 (statement -> selection_statement .)
    FOR             reduce using rule 238 (statement -> selection_statement .)
    BREAK           reduce using rule 238 (statement -> selection_statement .)
    CONTINUE        reduce using rule 238 (statement -> selection_statement .)
    RETURN          reduce using rule 238 (statement -> selection_statement .)
    GOTO            reduce using rule 238 (statement -> selection_statement .)
    TRY             reduce using rule 238 (statement -> selection_statement .)
    THROW           reduce using rule 238 (statement -> selection_statement .)
    CONST           reduce using rule 238 (statement -> selection_statement .)
    ASM             reduce using rule 238 (statement -> selection_statement .)
    TEMPLATE        reduce using rule 238 (statement -> selection_statement .)
    TYPEDEF         reduce using rule 238 (statement -> selection_statement .)
    DPLUSOP         reduce using rule 238 (statement -> selection_statement .)
    DMINUSOP        reduce using rule 238 (statement -> selection_statement .)
    SIZEOF          reduce using rule 238 (statement -> selection_statement .)
    PLUSOP          reduce using rule 238 (statement -> selection_statement .)
    MINUSOP         reduce using rule 238 (statement -> selection_statement .)
    NOTSYM          reduce using rule 238 (statement -> selection_statement .)
    BNOP            reduce using rule 238 (statement -> selection_statement .)
    MULTOP          reduce using rule 238 (statement -> selection_statement .)
    BANDOP          reduce using rule 238 (statement -> selection_statement .)
    NEW             reduce using rule 238 (statement -> selection_statement .)
    DELETE          reduce using rule 238 (statement -> selection_statement .)
    CHAR            reduce using rule 238 (statement -> selection_statement .)
    SHORT           reduce using rule 238 (statement -> selection_statement .)
    INT             reduce using rule 238 (statement -> selection_statement .)
    LONG            reduce using rule 238 (statement -> selection_statement .)
    SIGNED          reduce using rule 238 (statement -> selection_statement .)
    UNSIGNED        reduce using rule 238 (statement -> selection_statement .)
    FLOAT           reduce using rule 238 (statement -> selection_statement .)
    DOUBLE          reduce using rule 238 (statement -> selection_statement .)
    VOID            reduce using rule 238 (statement -> selection_statement .)
    STRING          reduce using rule 238 (statement -> selection_statement .)
    AUTO            reduce using rule 238 (statement -> selection_statement .)
    TYPE            reduce using rule 238 (statement -> selection_statement .)
    CLASS           reduce using rule 238 (statement -> selection_statement .)
    STRUCT          reduce using rule 238 (statement -> selection_statement .)
    THIS            reduce using rule 238 (statement -> selection_statement .)
    LPAREN          reduce using rule 238 (statement -> selection_statement .)
    DOUBLEBNOP      reduce using rule 238 (statement -> selection_statement .)
    STRING_L        reduce using rule 238 (statement -> selection_statement .)
    NUMBER          reduce using rule 238 (statement -> selection_statement .)
    SCHAR           reduce using rule 238 (statement -> selection_statement .)
    ELSE            reduce using rule 238 (statement -> selection_statement .)


state 336

    (239) statement -> iteration_statement .

    RCPAREN         reduce using rule 239 (statement -> iteration_statement .)
    IDENTIFIER      reduce using rule 239 (statement -> iteration_statement .)
    CASE            reduce using rule 239 (statement -> iteration_statement .)
    DEFAULT         reduce using rule 239 (statement -> iteration_statement .)
    SEMICOLON       reduce using rule 239 (statement -> iteration_statement .)
    LCPAREN         reduce using rule 239 (statement -> iteration_statement .)
    IF              reduce using rule 239 (statement -> iteration_statement .)
    SWITCH          reduce using rule 239 (statement -> iteration_statement .)
    WHILE           reduce using rule 239 (statement -> iteration_statement .)
    DO              reduce using rule 239 (statement -> iteration_statement .)
    FOR             reduce using rule 239 (statement -> iteration_statement .)
    BREAK           reduce using rule 239 (statement -> iteration_statement .)
    CONTINUE        reduce using rule 239 (statement -> iteration_statement .)
    RETURN          reduce using rule 239 (statement -> iteration_statement .)
    GOTO            reduce using rule 239 (statement -> iteration_statement .)
    TRY             reduce using rule 239 (statement -> iteration_statement .)
    THROW           reduce using rule 239 (statement -> iteration_statement .)
    CONST           reduce using rule 239 (statement -> iteration_statement .)
    ASM             reduce using rule 239 (statement -> iteration_statement .)
    TEMPLATE        reduce using rule 239 (statement -> iteration_statement .)
    TYPEDEF         reduce using rule 239 (statement -> iteration_statement .)
    DPLUSOP         reduce using rule 239 (statement -> iteration_statement .)
    DMINUSOP        reduce using rule 239 (statement -> iteration_statement .)
    SIZEOF          reduce using rule 239 (statement -> iteration_statement .)
    PLUSOP          reduce using rule 239 (statement -> iteration_statement .)
    MINUSOP         reduce using rule 239 (statement -> iteration_statement .)
    NOTSYM          reduce using rule 239 (statement -> iteration_statement .)
    BNOP            reduce using rule 239 (statement -> iteration_statement .)
    MULTOP          reduce using rule 239 (statement -> iteration_statement .)
    BANDOP          reduce using rule 239 (statement -> iteration_statement .)
    NEW             reduce using rule 239 (statement -> iteration_statement .)
    DELETE          reduce using rule 239 (statement -> iteration_statement .)
    CHAR            reduce using rule 239 (statement -> iteration_statement .)
    SHORT           reduce using rule 239 (statement -> iteration_statement .)
    INT             reduce using rule 239 (statement -> iteration_statement .)
    LONG            reduce using rule 239 (statement -> iteration_statement .)
    SIGNED          reduce using rule 239 (statement -> iteration_statement .)
    UNSIGNED        reduce using rule 239 (statement -> iteration_statement .)
    FLOAT           reduce using rule 239 (statement -> iteration_statement .)
    DOUBLE          reduce using rule 239 (statement -> iteration_statement .)
    VOID            reduce using rule 239 (statement -> iteration_statement .)
    STRING          reduce using rule 239 (statement -> iteration_statement .)
    AUTO            reduce using rule 239 (statement -> iteration_statement .)
    TYPE            reduce using rule 239 (statement -> iteration_statement .)
    CLASS           reduce using rule 239 (statement -> iteration_statement .)
    STRUCT          reduce using rule 239 (statement -> iteration_statement .)
    THIS            reduce using rule 239 (statement -> iteration_statement .)
    LPAREN          reduce using rule 239 (statement -> iteration_statement .)
    DOUBLEBNOP      reduce using rule 239 (statement -> iteration_statement .)
    STRING_L        reduce using rule 239 (statement -> iteration_statement .)
    NUMBER          reduce using rule 239 (statement -> iteration_statement .)
    SCHAR           reduce using rule 239 (statement -> iteration_statement .)
    ELSE            reduce using rule 239 (statement -> iteration_statement .)


state 337

    (240) statement -> jump_statement .

    RCPAREN         reduce using rule 240 (statement -> jump_statement .)
    IDENTIFIER      reduce using rule 240 (statement -> jump_statement .)
    CASE            reduce using rule 240 (statement -> jump_statement .)
    DEFAULT         reduce using rule 240 (statement -> jump_statement .)
    SEMICOLON       reduce using rule 240 (statement -> jump_statement .)
    LCPAREN         reduce using rule 240 (statement -> jump_statement .)
    IF              reduce using rule 240 (statement -> jump_statement .)
    SWITCH          reduce using rule 240 (statement -> jump_statement .)
    WHILE           reduce using rule 240 (statement -> jump_statement .)
    DO              reduce using rule 240 (statement -> jump_statement .)
    FOR             reduce using rule 240 (statement -> jump_statement .)
    BREAK           reduce using rule 240 (statement -> jump_statement .)
    CONTINUE        reduce using rule 240 (statement -> jump_statement .)
    RETURN          reduce using rule 240 (statement -> jump_statement .)
    GOTO            reduce using rule 240 (statement -> jump_statement .)
    TRY             reduce using rule 240 (statement -> jump_statement .)
    THROW           reduce using rule 240 (statement -> jump_statement .)
    CONST           reduce using rule 240 (statement -> jump_statement .)
    ASM             reduce using rule 240 (statement -> jump_statement .)
    TEMPLATE        reduce using rule 240 (statement -> jump_statement .)
    TYPEDEF         reduce using rule 240 (statement -> jump_statement .)
    DPLUSOP         reduce using rule 240 (statement -> jump_statement .)
    DMINUSOP        reduce using rule 240 (statement -> jump_statement .)
    SIZEOF          reduce using rule 240 (statement -> jump_statement .)
    PLUSOP          reduce using rule 240 (statement -> jump_statement .)
    MINUSOP         reduce using rule 240 (statement -> jump_statement .)
    NOTSYM          reduce using rule 240 (statement -> jump_statement .)
    BNOP            reduce using rule 240 (statement -> jump_statement .)
    MULTOP          reduce using rule 240 (statement -> jump_statement .)
    BANDOP          reduce using rule 240 (statement -> jump_statement .)
    NEW             reduce using rule 240 (statement -> jump_statement .)
    DELETE          reduce using rule 240 (statement -> jump_statement .)
    CHAR            reduce using rule 240 (statement -> jump_statement .)
    SHORT           reduce using rule 240 (statement -> jump_statement .)
    INT             reduce using rule 240 (statement -> jump_statement .)
    LONG            reduce using rule 240 (statement -> jump_statement .)
    SIGNED          reduce using rule 240 (statement -> jump_statement .)
    UNSIGNED        reduce using rule 240 (statement -> jump_statement .)
    FLOAT           reduce using rule 240 (statement -> jump_statement .)
    DOUBLE          reduce using rule 240 (statement -> jump_statement .)
    VOID            reduce using rule 240 (statement -> jump_statement .)
    STRING          reduce using rule 240 (statement -> jump_statement .)
    AUTO            reduce using rule 240 (statement -> jump_statement .)
    TYPE            reduce using rule 240 (statement -> jump_statement .)
    CLASS           reduce using rule 240 (statement -> jump_statement .)
    STRUCT          reduce using rule 240 (statement -> jump_statement .)
    THIS            reduce using rule 240 (statement -> jump_statement .)
    LPAREN          reduce using rule 240 (statement -> jump_statement .)
    DOUBLEBNOP      reduce using rule 240 (statement -> jump_statement .)
    STRING_L        reduce using rule 240 (statement -> jump_statement .)
    NUMBER          reduce using rule 240 (statement -> jump_statement .)
    SCHAR           reduce using rule 240 (statement -> jump_statement .)
    ELSE            reduce using rule 240 (statement -> jump_statement .)


state 338

    (241) statement -> declaration_statement .

    RCPAREN         reduce using rule 241 (statement -> declaration_statement .)
    IDENTIFIER      reduce using rule 241 (statement -> declaration_statement .)
    CASE            reduce using rule 241 (statement -> declaration_statement .)
    DEFAULT         reduce using rule 241 (statement -> declaration_statement .)
    SEMICOLON       reduce using rule 241 (statement -> declaration_statement .)
    LCPAREN         reduce using rule 241 (statement -> declaration_statement .)
    IF              reduce using rule 241 (statement -> declaration_statement .)
    SWITCH          reduce using rule 241 (statement -> declaration_statement .)
    WHILE           reduce using rule 241 (statement -> declaration_statement .)
    DO              reduce using rule 241 (statement -> declaration_statement .)
    FOR             reduce using rule 241 (statement -> declaration_statement .)
    BREAK           reduce using rule 241 (statement -> declaration_statement .)
    CONTINUE        reduce using rule 241 (statement -> declaration_statement .)
    RETURN          reduce using rule 241 (statement -> declaration_statement .)
    GOTO            reduce using rule 241 (statement -> declaration_statement .)
    TRY             reduce using rule 241 (statement -> declaration_statement .)
    THROW           reduce using rule 241 (statement -> declaration_statement .)
    CONST           reduce using rule 241 (statement -> declaration_statement .)
    ASM             reduce using rule 241 (statement -> declaration_statement .)
    TEMPLATE        reduce using rule 241 (statement -> declaration_statement .)
    TYPEDEF         reduce using rule 241 (statement -> declaration_statement .)
    DPLUSOP         reduce using rule 241 (statement -> declaration_statement .)
    DMINUSOP        reduce using rule 241 (statement -> declaration_statement .)
    SIZEOF          reduce using rule 241 (statement -> declaration_statement .)
    PLUSOP          reduce using rule 241 (statement -> declaration_statement .)
    MINUSOP         reduce using rule 241 (statement -> declaration_statement .)
    NOTSYM          reduce using rule 241 (statement -> declaration_statement .)
    BNOP            reduce using rule 241 (statement -> declaration_statement .)
    MULTOP          reduce using rule 241 (statement -> declaration_statement .)
    BANDOP          reduce using rule 241 (statement -> declaration_statement .)
    NEW             reduce using rule 241 (statement -> declaration_statement .)
    DELETE          reduce using rule 241 (statement -> declaration_statement .)
    CHAR            reduce using rule 241 (statement -> declaration_statement .)
    SHORT           reduce using rule 241 (statement -> declaration_statement .)
    INT             reduce using rule 241 (statement -> declaration_statement .)
    LONG            reduce using rule 241 (statement -> declaration_statement .)
    SIGNED          reduce using rule 241 (statement -> declaration_statement .)
    UNSIGNED        reduce using rule 241 (statement -> declaration_statement .)
    FLOAT           reduce using rule 241 (statement -> declaration_statement .)
    DOUBLE          reduce using rule 241 (statement -> declaration_statement .)
    VOID            reduce using rule 241 (statement -> declaration_statement .)
    STRING          reduce using rule 241 (statement -> declaration_statement .)
    AUTO            reduce using rule 241 (statement -> declaration_statement .)
    TYPE            reduce using rule 241 (statement -> declaration_statement .)
    CLASS           reduce using rule 241 (statement -> declaration_statement .)
    STRUCT          reduce using rule 241 (statement -> declaration_statement .)
    THIS            reduce using rule 241 (statement -> declaration_statement .)
    LPAREN          reduce using rule 241 (statement -> declaration_statement .)
    DOUBLEBNOP      reduce using rule 241 (statement -> declaration_statement .)
    STRING_L        reduce using rule 241 (statement -> declaration_statement .)
    NUMBER          reduce using rule 241 (statement -> declaration_statement .)
    SCHAR           reduce using rule 241 (statement -> declaration_statement .)
    ELSE            reduce using rule 241 (statement -> declaration_statement .)


state 339

    (242) statement -> try_block .

    RCPAREN         reduce using rule 242 (statement -> try_block .)
    IDENTIFIER      reduce using rule 242 (statement -> try_block .)
    CASE            reduce using rule 242 (statement -> try_block .)
    DEFAULT         reduce using rule 242 (statement -> try_block .)
    SEMICOLON       reduce using rule 242 (statement -> try_block .)
    LCPAREN         reduce using rule 242 (statement -> try_block .)
    IF              reduce using rule 242 (statement -> try_block .)
    SWITCH          reduce using rule 242 (statement -> try_block .)
    WHILE           reduce using rule 242 (statement -> try_block .)
    DO              reduce using rule 242 (statement -> try_block .)
    FOR             reduce using rule 242 (statement -> try_block .)
    BREAK           reduce using rule 242 (statement -> try_block .)
    CONTINUE        reduce using rule 242 (statement -> try_block .)
    RETURN          reduce using rule 242 (statement -> try_block .)
    GOTO            reduce using rule 242 (statement -> try_block .)
    TRY             reduce using rule 242 (statement -> try_block .)
    THROW           reduce using rule 242 (statement -> try_block .)
    CONST           reduce using rule 242 (statement -> try_block .)
    ASM             reduce using rule 242 (statement -> try_block .)
    TEMPLATE        reduce using rule 242 (statement -> try_block .)
    TYPEDEF         reduce using rule 242 (statement -> try_block .)
    DPLUSOP         reduce using rule 242 (statement -> try_block .)
    DMINUSOP        reduce using rule 242 (statement -> try_block .)
    SIZEOF          reduce using rule 242 (statement -> try_block .)
    PLUSOP          reduce using rule 242 (statement -> try_block .)
    MINUSOP         reduce using rule 242 (statement -> try_block .)
    NOTSYM          reduce using rule 242 (statement -> try_block .)
    BNOP            reduce using rule 242 (statement -> try_block .)
    MULTOP          reduce using rule 242 (statement -> try_block .)
    BANDOP          reduce using rule 242 (statement -> try_block .)
    NEW             reduce using rule 242 (statement -> try_block .)
    DELETE          reduce using rule 242 (statement -> try_block .)
    CHAR            reduce using rule 242 (statement -> try_block .)
    SHORT           reduce using rule 242 (statement -> try_block .)
    INT             reduce using rule 242 (statement -> try_block .)
    LONG            reduce using rule 242 (statement -> try_block .)
    SIGNED          reduce using rule 242 (statement -> try_block .)
    UNSIGNED        reduce using rule 242 (statement -> try_block .)
    FLOAT           reduce using rule 242 (statement -> try_block .)
    DOUBLE          reduce using rule 242 (statement -> try_block .)
    VOID            reduce using rule 242 (statement -> try_block .)
    STRING          reduce using rule 242 (statement -> try_block .)
    AUTO            reduce using rule 242 (statement -> try_block .)
    TYPE            reduce using rule 242 (statement -> try_block .)
    CLASS           reduce using rule 242 (statement -> try_block .)
    STRUCT          reduce using rule 242 (statement -> try_block .)
    THIS            reduce using rule 242 (statement -> try_block .)
    LPAREN          reduce using rule 242 (statement -> try_block .)
    DOUBLEBNOP      reduce using rule 242 (statement -> try_block .)
    STRING_L        reduce using rule 242 (statement -> try_block .)
    NUMBER          reduce using rule 242 (statement -> try_block .)
    SCHAR           reduce using rule 242 (statement -> try_block .)
    ELSE            reduce using rule 242 (statement -> try_block .)


state 340

    (252) labeled_statement -> IDENTIFIER . COLON statement
    (127) name -> IDENTIFIER .

    COLON           shift and go to state 377
    LSPAREN         reduce using rule 127 (name -> IDENTIFIER .)
    LPAREN          reduce using rule 127 (name -> IDENTIFIER .)
    DOT             reduce using rule 127 (name -> IDENTIFIER .)
    ARROW           reduce using rule 127 (name -> IDENTIFIER .)
    DPLUSOP         reduce using rule 127 (name -> IDENTIFIER .)
    DMINUSOP        reduce using rule 127 (name -> IDENTIFIER .)
    LTEMPLATE       reduce using rule 127 (name -> IDENTIFIER .)
    EQUAL           reduce using rule 127 (name -> IDENTIFIER .)
    MULTEQOP        reduce using rule 127 (name -> IDENTIFIER .)
    DIVEQOP         reduce using rule 127 (name -> IDENTIFIER .)
    MODEQOP         reduce using rule 127 (name -> IDENTIFIER .)
    PLUSEQOP        reduce using rule 127 (name -> IDENTIFIER .)
    MINUSEQOP       reduce using rule 127 (name -> IDENTIFIER .)
    LSHIFTEQOP      reduce using rule 127 (name -> IDENTIFIER .)
    RSHIFTEQOP      reduce using rule 127 (name -> IDENTIFIER .)
    BANDEQOP        reduce using rule 127 (name -> IDENTIFIER .)
    BOREQOP         reduce using rule 127 (name -> IDENTIFIER .)
    DOTSTAR         reduce using rule 127 (name -> IDENTIFIER .)
    ARROWSTAR       reduce using rule 127 (name -> IDENTIFIER .)
    MULTOP          reduce using rule 127 (name -> IDENTIFIER .)
    DIVOP           reduce using rule 127 (name -> IDENTIFIER .)
    MODOP           reduce using rule 127 (name -> IDENTIFIER .)
    PLUSOP          reduce using rule 127 (name -> IDENTIFIER .)
    MINUSOP         reduce using rule 127 (name -> IDENTIFIER .)
    LSHIFT          reduce using rule 127 (name -> IDENTIFIER .)
    RSHIFT          reduce using rule 127 (name -> IDENTIFIER .)
    LTCOMP          reduce using rule 127 (name -> IDENTIFIER .)
    GTCOMP          reduce using rule 127 (name -> IDENTIFIER .)
    LTECOMP         reduce using rule 127 (name -> IDENTIFIER .)
    GTECOMP         reduce using rule 127 (name -> IDENTIFIER .)
    EQCOMP          reduce using rule 127 (name -> IDENTIFIER .)
    NEQCOMP         reduce using rule 127 (name -> IDENTIFIER .)
    BANDOP          reduce using rule 127 (name -> IDENTIFIER .)
    XOROP           reduce using rule 127 (name -> IDENTIFIER .)
    OROP            reduce using rule 127 (name -> IDENTIFIER .)
    ANDOP           reduce using rule 127 (name -> IDENTIFIER .)
    QUESMARK        reduce using rule 127 (name -> IDENTIFIER .)
    SEMICOLON       reduce using rule 127 (name -> IDENTIFIER .)
    COMMA           reduce using rule 127 (name -> IDENTIFIER .)


state 341

    (253) labeled_statement -> CASE . constant_expression COLON statement
    (12) constant_expression -> . conditional_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR

    LPAREN          shift and go to state 128
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    THIS            shift and go to state 144
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    constant_expression            shift and go to state 378
    conditional_expression         shift and go to state 112
    logical_OR_expression          shift and go to state 113
    logical_AND_expression         shift and go to state 114
    inclusive_OR_expression        shift and go to state 115
    exclusive_OR_expression        shift and go to state 116
    AND_expression                 shift and go to state 117
    equality_expression            shift and go to state 118
    relational_expression          shift and go to state 119
    shift_expression               shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 122
    pm_expression                  shift and go to state 125
    cast_expression                shift and go to state 126
    unary_expression               shift and go to state 127
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    literal                        shift and go to state 143

state 342

    (254) labeled_statement -> DEFAULT . COLON statement

    COLON           shift and go to state 379


state 343

    (263) expression_statement -> expression . SEMICOLON
    (48) expression -> expression . COMMA assignment_expression

    SEMICOLON       shift and go to state 380
    COMMA           shift and go to state 300


state 344

    (264) expression_statement -> SEMICOLON .

    RCPAREN         reduce using rule 264 (expression_statement -> SEMICOLON .)
    IDENTIFIER      reduce using rule 264 (expression_statement -> SEMICOLON .)
    CASE            reduce using rule 264 (expression_statement -> SEMICOLON .)
    DEFAULT         reduce using rule 264 (expression_statement -> SEMICOLON .)
    SEMICOLON       reduce using rule 264 (expression_statement -> SEMICOLON .)
    LCPAREN         reduce using rule 264 (expression_statement -> SEMICOLON .)
    IF              reduce using rule 264 (expression_statement -> SEMICOLON .)
    SWITCH          reduce using rule 264 (expression_statement -> SEMICOLON .)
    WHILE           reduce using rule 264 (expression_statement -> SEMICOLON .)
    DO              reduce using rule 264 (expression_statement -> SEMICOLON .)
    FOR             reduce using rule 264 (expression_statement -> SEMICOLON .)
    BREAK           reduce using rule 264 (expression_statement -> SEMICOLON .)
    CONTINUE        reduce using rule 264 (expression_statement -> SEMICOLON .)
    RETURN          reduce using rule 264 (expression_statement -> SEMICOLON .)
    GOTO            reduce using rule 264 (expression_statement -> SEMICOLON .)
    TRY             reduce using rule 264 (expression_statement -> SEMICOLON .)
    THROW           reduce using rule 264 (expression_statement -> SEMICOLON .)
    CONST           reduce using rule 264 (expression_statement -> SEMICOLON .)
    ASM             reduce using rule 264 (expression_statement -> SEMICOLON .)
    TEMPLATE        reduce using rule 264 (expression_statement -> SEMICOLON .)
    TYPEDEF         reduce using rule 264 (expression_statement -> SEMICOLON .)
    DPLUSOP         reduce using rule 264 (expression_statement -> SEMICOLON .)
    DMINUSOP        reduce using rule 264 (expression_statement -> SEMICOLON .)
    SIZEOF          reduce using rule 264 (expression_statement -> SEMICOLON .)
    PLUSOP          reduce using rule 264 (expression_statement -> SEMICOLON .)
    MINUSOP         reduce using rule 264 (expression_statement -> SEMICOLON .)
    NOTSYM          reduce using rule 264 (expression_statement -> SEMICOLON .)
    BNOP            reduce using rule 264 (expression_statement -> SEMICOLON .)
    MULTOP          reduce using rule 264 (expression_statement -> SEMICOLON .)
    BANDOP          reduce using rule 264 (expression_statement -> SEMICOLON .)
    NEW             reduce using rule 264 (expression_statement -> SEMICOLON .)
    DELETE          reduce using rule 264 (expression_statement -> SEMICOLON .)
    CHAR            reduce using rule 264 (expression_statement -> SEMICOLON .)
    SHORT           reduce using rule 264 (expression_statement -> SEMICOLON .)
    INT             reduce using rule 264 (expression_statement -> SEMICOLON .)
    LONG            reduce using rule 264 (expression_statement -> SEMICOLON .)
    SIGNED          reduce using rule 264 (expression_statement -> SEMICOLON .)
    UNSIGNED        reduce using rule 264 (expression_statement -> SEMICOLON .)
    FLOAT           reduce using rule 264 (expression_statement -> SEMICOLON .)
    DOUBLE          reduce using rule 264 (expression_statement -> SEMICOLON .)
    VOID            reduce using rule 264 (expression_statement -> SEMICOLON .)
    STRING          reduce using rule 264 (expression_statement -> SEMICOLON .)
    AUTO            reduce using rule 264 (expression_statement -> SEMICOLON .)
    TYPE            reduce using rule 264 (expression_statement -> SEMICOLON .)
    CLASS           reduce using rule 264 (expression_statement -> SEMICOLON .)
    STRUCT          reduce using rule 264 (expression_statement -> SEMICOLON .)
    THIS            reduce using rule 264 (expression_statement -> SEMICOLON .)
    LPAREN          reduce using rule 264 (expression_statement -> SEMICOLON .)
    DOUBLEBNOP      reduce using rule 264 (expression_statement -> SEMICOLON .)
    STRING_L        reduce using rule 264 (expression_statement -> SEMICOLON .)
    NUMBER          reduce using rule 264 (expression_statement -> SEMICOLON .)
    SCHAR           reduce using rule 264 (expression_statement -> SEMICOLON .)
    ELSE            reduce using rule 264 (expression_statement -> SEMICOLON .)


state 345

    (248) selection_statement -> IF . LPAREN expression RPAREN statement
    (249) selection_statement -> IF . LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 381


state 346

    (250) selection_statement -> SWITCH . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 382


state 347

    (255) iteration_statement -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 383


state 348

    (256) iteration_statement -> DO . statement WHILE LPAREN expression RPAREN SEMICOLON
    (235) statement -> . labeled_statement
    (236) statement -> . expression_statement
    (237) statement -> . compound_statement
    (238) statement -> . selection_statement
    (239) statement -> . iteration_statement
    (240) statement -> . jump_statement
    (241) statement -> . declaration_statement
    (242) statement -> . try_block
    (252) labeled_statement -> . IDENTIFIER COLON statement
    (253) labeled_statement -> . CASE constant_expression COLON statement
    (254) labeled_statement -> . DEFAULT COLON statement
    (263) expression_statement -> . expression SEMICOLON
    (264) expression_statement -> . SEMICOLON
    (231) compound_statement -> . LCPAREN statement_list RCPAREN
    (232) compound_statement -> . LCPAREN RCPAREN
    (248) selection_statement -> . IF LPAREN expression RPAREN statement
    (249) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (250) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (255) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (256) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (257) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement
    (258) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement
    (259) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement
    (260) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (243) jump_statement -> . BREAK SEMICOLON
    (244) jump_statement -> . CONTINUE SEMICOLON
    (245) jump_statement -> . RETURN expression SEMICOLON
    (246) jump_statement -> . RETURN SEMICOLON
    (247) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (265) declaration_statement -> . declaration
    (251) try_block -> . TRY compound_statement CATCH compound_statement
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (266) declaration -> . type_specifier_ declarator_list SEMICOLON
    (267) declaration -> . asm_declaration
    (268) declaration -> . function_definition
    (269) declaration -> . function_decl
    (270) declaration -> . class_define_specifier SEMICOLON
    (271) declaration -> . template_declaration
    (272) declaration -> . typedef_declarator
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (170) type_specifier_ -> . CONST type_specifier
    (171) type_specifier_ -> . type_specifier
    (288) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (227) function_definition -> . type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope
    (228) function_decl -> . type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope
    (205) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (206) class_define_specifier -> . class_head LCPAREN RCPAREN
    (273) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (172) typedef_declarator -> . TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON
    (173) typedef_declarator -> . TYPEDEF type_specifier_ IDENTIFIER SEMICOLON
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (174) type_specifier -> . simple_type_name
    (175) type_specifier -> . complex_type_specifier
    (192) class_head -> . class_key IDENTIFIER base_spec
    (193) class_head -> . class_key IDENTIFIER
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (176) simple_type_name -> . CHAR
    (177) simple_type_name -> . SHORT
    (178) simple_type_name -> . INT
    (179) simple_type_name -> . LONG
    (180) simple_type_name -> . SIGNED
    (181) simple_type_name -> . UNSIGNED
    (182) simple_type_name -> . FLOAT
    (183) simple_type_name -> . DOUBLE
    (184) simple_type_name -> . VOID
    (185) simple_type_name -> . STRING
    (186) simple_type_name -> . AUTO
    (187) complex_type_specifier -> . class_key IDENTIFIER
    (188) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (189) complex_type_specifier -> . TYPE IDENTIFIER
    (190) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (203) class_key -> . CLASS
    (204) class_key -> . STRUCT
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 340
    CASE            shift and go to state 341
    DEFAULT         shift and go to state 342
    SEMICOLON       shift and go to state 344
    LCPAREN         shift and go to state 275
    IF              shift and go to state 345
    SWITCH          shift and go to state 346
    WHILE           shift and go to state 347
    DO              shift and go to state 348
    FOR             shift and go to state 349
    BREAK           shift and go to state 350
    CONTINUE        shift and go to state 351
    RETURN          shift and go to state 352
    GOTO            shift and go to state 353
    TRY             shift and go to state 355
    THROW           shift and go to state 216
    CONST           shift and go to state 16
    ASM             shift and go to state 18
    TEMPLATE        shift and go to state 20
    TYPEDEF         shift and go to state 21
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38
    THIS            shift and go to state 144
    LPAREN          shift and go to state 148
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    statement                      shift and go to state 384
    expression                     shift and go to state 343
    labeled_statement              shift and go to state 332
    expression_statement           shift and go to state 333
    compound_statement             shift and go to state 334
    selection_statement            shift and go to state 335
    iteration_statement            shift and go to state 336
    jump_statement                 shift and go to state 337
    declaration_statement          shift and go to state 338
    try_block                      shift and go to state 339
    declaration                    shift and go to state 354
    assignment_expression          shift and go to state 214
    throw_expression               shift and go to state 215
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    function_decl                  shift and go to state 12
    class_define_specifier         shift and go to state 13
    template_declaration           shift and go to state 14
    typedef_declarator             shift and go to state 15
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    type_specifier                 shift and go to state 17
    class_head                     shift and go to state 19
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    cast_expression                shift and go to state 126
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 24
    logical_AND_expression         shift and go to state 114
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    inclusive_OR_expression        shift and go to state 115
    literal                        shift and go to state 143
    exclusive_OR_expression        shift and go to state 116
    AND_expression                 shift and go to state 117
    equality_expression            shift and go to state 118
    relational_expression          shift and go to state 119
    shift_expression               shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 122
    pm_expression                  shift and go to state 125

state 349

    (257) iteration_statement -> FOR . LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement
    (258) iteration_statement -> FOR . LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement
    (259) iteration_statement -> FOR . LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement
    (260) iteration_statement -> FOR . LPAREN for_init_statement SEMICOLON RPAREN statement

    LPAREN          shift and go to state 385


state 350

    (243) jump_statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 386


state 351

    (244) jump_statement -> CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 387


state 352

    (245) jump_statement -> RETURN . expression SEMICOLON
    (246) jump_statement -> RETURN . SEMICOLON
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMICOLON       shift and go to state 389
    THROW           shift and go to state 216
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    THIS            shift and go to state 144
    LPAREN          shift and go to state 148
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    expression                     shift and go to state 388
    assignment_expression          shift and go to state 214
    throw_expression               shift and go to state 215
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    cast_expression                shift and go to state 126
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    logical_AND_expression         shift and go to state 114
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    inclusive_OR_expression        shift and go to state 115
    literal                        shift and go to state 143
    exclusive_OR_expression        shift and go to state 116
    AND_expression                 shift and go to state 117
    equality_expression            shift and go to state 118
    relational_expression          shift and go to state 119
    shift_expression               shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 122
    pm_expression                  shift and go to state 125

state 353

    (247) jump_statement -> GOTO . IDENTIFIER SEMICOLON

    IDENTIFIER      shift and go to state 390


state 354

    (265) declaration_statement -> declaration .

    RCPAREN         reduce using rule 265 (declaration_statement -> declaration .)
    IDENTIFIER      reduce using rule 265 (declaration_statement -> declaration .)
    CASE            reduce using rule 265 (declaration_statement -> declaration .)
    DEFAULT         reduce using rule 265 (declaration_statement -> declaration .)
    SEMICOLON       reduce using rule 265 (declaration_statement -> declaration .)
    LCPAREN         reduce using rule 265 (declaration_statement -> declaration .)
    IF              reduce using rule 265 (declaration_statement -> declaration .)
    SWITCH          reduce using rule 265 (declaration_statement -> declaration .)
    WHILE           reduce using rule 265 (declaration_statement -> declaration .)
    DO              reduce using rule 265 (declaration_statement -> declaration .)
    FOR             reduce using rule 265 (declaration_statement -> declaration .)
    BREAK           reduce using rule 265 (declaration_statement -> declaration .)
    CONTINUE        reduce using rule 265 (declaration_statement -> declaration .)
    RETURN          reduce using rule 265 (declaration_statement -> declaration .)
    GOTO            reduce using rule 265 (declaration_statement -> declaration .)
    TRY             reduce using rule 265 (declaration_statement -> declaration .)
    THROW           reduce using rule 265 (declaration_statement -> declaration .)
    CONST           reduce using rule 265 (declaration_statement -> declaration .)
    ASM             reduce using rule 265 (declaration_statement -> declaration .)
    TEMPLATE        reduce using rule 265 (declaration_statement -> declaration .)
    TYPEDEF         reduce using rule 265 (declaration_statement -> declaration .)
    DPLUSOP         reduce using rule 265 (declaration_statement -> declaration .)
    DMINUSOP        reduce using rule 265 (declaration_statement -> declaration .)
    SIZEOF          reduce using rule 265 (declaration_statement -> declaration .)
    PLUSOP          reduce using rule 265 (declaration_statement -> declaration .)
    MINUSOP         reduce using rule 265 (declaration_statement -> declaration .)
    NOTSYM          reduce using rule 265 (declaration_statement -> declaration .)
    BNOP            reduce using rule 265 (declaration_statement -> declaration .)
    MULTOP          reduce using rule 265 (declaration_statement -> declaration .)
    BANDOP          reduce using rule 265 (declaration_statement -> declaration .)
    NEW             reduce using rule 265 (declaration_statement -> declaration .)
    DELETE          reduce using rule 265 (declaration_statement -> declaration .)
    CHAR            reduce using rule 265 (declaration_statement -> declaration .)
    SHORT           reduce using rule 265 (declaration_statement -> declaration .)
    INT             reduce using rule 265 (declaration_statement -> declaration .)
    LONG            reduce using rule 265 (declaration_statement -> declaration .)
    SIGNED          reduce using rule 265 (declaration_statement -> declaration .)
    UNSIGNED        reduce using rule 265 (declaration_statement -> declaration .)
    FLOAT           reduce using rule 265 (declaration_statement -> declaration .)
    DOUBLE          reduce using rule 265 (declaration_statement -> declaration .)
    VOID            reduce using rule 265 (declaration_statement -> declaration .)
    STRING          reduce using rule 265 (declaration_statement -> declaration .)
    AUTO            reduce using rule 265 (declaration_statement -> declaration .)
    TYPE            reduce using rule 265 (declaration_statement -> declaration .)
    CLASS           reduce using rule 265 (declaration_statement -> declaration .)
    STRUCT          reduce using rule 265 (declaration_statement -> declaration .)
    THIS            reduce using rule 265 (declaration_statement -> declaration .)
    LPAREN          reduce using rule 265 (declaration_statement -> declaration .)
    DOUBLEBNOP      reduce using rule 265 (declaration_statement -> declaration .)
    STRING_L        reduce using rule 265 (declaration_statement -> declaration .)
    NUMBER          reduce using rule 265 (declaration_statement -> declaration .)
    SCHAR           reduce using rule 265 (declaration_statement -> declaration .)
    ELSE            reduce using rule 265 (declaration_statement -> declaration .)


state 355

    (251) try_block -> TRY . compound_statement CATCH compound_statement
    (231) compound_statement -> . LCPAREN statement_list RCPAREN
    (232) compound_statement -> . LCPAREN RCPAREN

    LCPAREN         shift and go to state 275

    compound_statement             shift and go to state 391

state 356

    (14) conditional_expression -> logical_OR_expression QUESMARK expression COLON . conditional_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR

    LPAREN          shift and go to state 128
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    THIS            shift and go to state 144
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    logical_OR_expression          shift and go to state 113
    conditional_expression         shift and go to state 392
    logical_AND_expression         shift and go to state 114
    inclusive_OR_expression        shift and go to state 115
    exclusive_OR_expression        shift and go to state 116
    AND_expression                 shift and go to state 117
    equality_expression            shift and go to state 118
    relational_expression          shift and go to state 119
    shift_expression               shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 122
    pm_expression                  shift and go to state 125
    cast_expression                shift and go to state 126
    unary_expression               shift and go to state 127
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    literal                        shift and go to state 143

state 357

    (108) cast_expression -> LPAREN type_name RPAREN cast_expression .

    DOTSTAR         reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    ARROWSTAR       reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MULTOP          reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    DIVOP           reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MODOP           reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    PLUSOP          reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MINUSOP         reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LSHIFT          reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RSHIFT          reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LTCOMP          reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    GTCOMP          reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LTECOMP         reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    GTECOMP         reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    EQCOMP          reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    NEQCOMP         reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    BANDOP          reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    XOROP           reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    OROP            reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    ANDOP           reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    QUESMARK        reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RSPAREN         reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RPAREN          reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    COMMA           reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    SEMICOLON       reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    EQUAL           reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MULTEQOP        reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    DIVEQOP         reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MODEQOP         reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    PLUSEQOP        reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MINUSEQOP       reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LSHIFTEQOP      reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RSHIFTEQOP      reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    BANDEQOP        reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    BOREQOP         reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RCPAREN         reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    COLON           reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RTEMPLATE       reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)


state 358

    (48) expression -> expression COMMA assignment_expression .

    RPAREN          reduce using rule 48 (expression -> expression COMMA assignment_expression .)
    COMMA           reduce using rule 48 (expression -> expression COMMA assignment_expression .)
    COLON           reduce using rule 48 (expression -> expression COMMA assignment_expression .)
    RSPAREN         reduce using rule 48 (expression -> expression COMMA assignment_expression .)
    RTEMPLATE       reduce using rule 48 (expression -> expression COMMA assignment_expression .)
    SEMICOLON       reduce using rule 48 (expression -> expression COMMA assignment_expression .)


state 359

    (92) postfix_expression -> postfix_expression LSPAREN expression RSPAREN .

    LSPAREN         reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    LPAREN          reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    DOT             reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    ARROW           reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    DPLUSOP         reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    DMINUSOP        reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    LTEMPLATE       reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    DOTSTAR         reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    ARROWSTAR       reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    MULTOP          reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    DIVOP           reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    MODOP           reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    PLUSOP          reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    MINUSOP         reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    LSHIFT          reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    RSHIFT          reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    LTCOMP          reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    GTCOMP          reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    LTECOMP         reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    GTECOMP         reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    EQCOMP          reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    NEQCOMP         reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    BANDOP          reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    XOROP           reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    OROP            reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    ANDOP           reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    QUESMARK        reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    RSPAREN         reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    EQUAL           reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    MULTEQOP        reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    DIVEQOP         reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    MODEQOP         reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    PLUSEQOP        reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    MINUSEQOP       reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    LSHIFTEQOP      reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    RSHIFTEQOP      reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    BANDEQOP        reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    BOREQOP         reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    RPAREN          reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    COMMA           reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    SEMICOLON       reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    RCPAREN         reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    COLON           reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    RTEMPLATE       reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)


state 360

    (93) postfix_expression -> postfix_expression LPAREN expression_list RPAREN .

    LSPAREN         reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    LPAREN          reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    DOT             reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    ARROW           reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    DPLUSOP         reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    DMINUSOP        reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    LTEMPLATE       reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    DOTSTAR         reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    ARROWSTAR       reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    MULTOP          reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    DIVOP           reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    MODOP           reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    PLUSOP          reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    MINUSOP         reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    LSHIFT          reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    RSHIFT          reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    LTCOMP          reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    GTCOMP          reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    LTECOMP         reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    GTECOMP         reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    EQCOMP          reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    NEQCOMP         reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    BANDOP          reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    XOROP           reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    OROP            reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    ANDOP           reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    QUESMARK        reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    RSPAREN         reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    EQUAL           reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    MULTEQOP        reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    DIVEQOP         reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    MODEQOP         reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    PLUSEQOP        reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    MINUSEQOP       reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    LSHIFTEQOP      reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    RSHIFTEQOP      reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    BANDEQOP        reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    BOREQOP         reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    RPAREN          reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    SEMICOLON       reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    RCPAREN         reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    COLON           reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    RTEMPLATE       reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)


state 361

    (94) postfix_expression -> postfix_expression template_class_name LPAREN expression_list . RPAREN
    (290) expression_list -> expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 393
    COMMA           shift and go to state 236


state 362

    (69) unary_expression -> SIZEOF LPAREN type_name RPAREN .

    DOTSTAR         reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    ARROWSTAR       reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MULTOP          reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    DIVOP           reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MODOP           reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    PLUSOP          reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MINUSOP         reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LSHIFT          reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RSHIFT          reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LTCOMP          reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    GTCOMP          reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LTECOMP         reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    GTECOMP         reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    EQCOMP          reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    NEQCOMP         reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    BANDOP          reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    XOROP           reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    OROP            reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    ANDOP           reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    QUESMARK        reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RSPAREN         reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    EQUAL           reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MULTEQOP        reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    DIVEQOP         reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MODEQOP         reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    PLUSEQOP        reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MINUSEQOP       reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LSHIFTEQOP      reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RSHIFTEQOP      reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    BANDEQOP        reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    BOREQOP         reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RPAREN          reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    COMMA           reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    SEMICOLON       reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RCPAREN         reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    COLON           reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RTEMPLATE       reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)


state 363

    (83) new_initializer -> LPAREN initializer_list . RPAREN
    (285) initializer_list -> initializer_list . COMMA assignment_expression

    RPAREN          shift and go to state 394
    COMMA           shift and go to state 395


state 364

    (84) new_initializer -> LPAREN RPAREN .

    DOTSTAR         reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    ARROWSTAR       reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    MULTOP          reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    DIVOP           reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    MODOP           reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    PLUSOP          reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    MINUSOP         reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    LSHIFT          reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    RSHIFT          reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    LTCOMP          reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    GTCOMP          reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    LTECOMP         reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    GTECOMP         reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    EQCOMP          reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    NEQCOMP         reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    BANDOP          reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    XOROP           reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    OROP            reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    ANDOP           reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    QUESMARK        reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    RSPAREN         reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    EQUAL           reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    MULTEQOP        reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    DIVEQOP         reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    MODEQOP         reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    PLUSEQOP        reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    MINUSEQOP       reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    LSHIFTEQOP      reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    RSHIFTEQOP      reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    BANDEQOP        reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    BOREQOP         reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    RPAREN          reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    COMMA           reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    SEMICOLON       reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    RCPAREN         reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    COLON           reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    RTEMPLATE       reduce using rule 84 (new_initializer -> LPAREN RPAREN .)


state 365

    (75) allocation_expression -> NEW LPAREN type_name RPAREN . new_initializer
    (76) allocation_expression -> NEW LPAREN type_name RPAREN .
    (83) new_initializer -> . LPAREN initializer_list RPAREN
    (84) new_initializer -> . LPAREN RPAREN

    DOTSTAR         reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    ARROWSTAR       reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    MULTOP          reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    DIVOP           reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    MODOP           reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    PLUSOP          reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    MINUSOP         reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    LSHIFT          reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    RSHIFT          reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    LTCOMP          reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    GTCOMP          reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    LTECOMP         reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    GTECOMP         reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    EQCOMP          reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    NEQCOMP         reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    BANDOP          reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    XOROP           reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    OROP            reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    ANDOP           reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    QUESMARK        reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    RSPAREN         reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    EQUAL           reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    MULTEQOP        reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    DIVEQOP         reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    MODEQOP         reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    PLUSEQOP        reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    MINUSEQOP       reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    LSHIFTEQOP      reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    RSHIFTEQOP      reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    BANDEQOP        reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    BOREQOP         reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    RPAREN          reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    COMMA           reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    SEMICOLON       reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    RCPAREN         reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    COLON           reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    RTEMPLATE       reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    LPAREN          shift and go to state 310

    new_initializer                shift and go to state 396

state 366

    (79) new_declarator -> new_declarator MULTOP .

    MULTOP          reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    LSPAREN         reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    LPAREN          reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    DOTSTAR         reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    ARROWSTAR       reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    DIVOP           reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    MODOP           reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    PLUSOP          reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    MINUSOP         reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    LSHIFT          reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    RSHIFT          reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    LTCOMP          reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    GTCOMP          reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    LTECOMP         reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    GTECOMP         reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    EQCOMP          reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    NEQCOMP         reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    BANDOP          reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    XOROP           reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    OROP            reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    ANDOP           reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    QUESMARK        reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    RSPAREN         reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    EQUAL           reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    MULTEQOP        reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    DIVEQOP         reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    MODEQOP         reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    PLUSEQOP        reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    MINUSEQOP       reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    LSHIFTEQOP      reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    RSHIFTEQOP      reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    BANDEQOP        reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    BOREQOP         reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    RPAREN          reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    COMMA           reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    SEMICOLON       reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    RCPAREN         reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    COLON           reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    RTEMPLATE       reduce using rule 79 (new_declarator -> new_declarator MULTOP .)


state 367

    (81) new_declarator -> new_declarator LSPAREN . expression RSPAREN
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    THROW           shift and go to state 216
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    THIS            shift and go to state 144
    LPAREN          shift and go to state 148
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    expression                     shift and go to state 397
    assignment_expression          shift and go to state 214
    throw_expression               shift and go to state 215
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    cast_expression                shift and go to state 126
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    logical_AND_expression         shift and go to state 114
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    inclusive_OR_expression        shift and go to state 115
    literal                        shift and go to state 143
    exclusive_OR_expression        shift and go to state 116
    AND_expression                 shift and go to state 117
    equality_expression            shift and go to state 118
    relational_expression          shift and go to state 119
    shift_expression               shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 122
    pm_expression                  shift and go to state 125

state 368

    (82) new_declarator -> LSPAREN expression . RSPAREN
    (48) expression -> expression . COMMA assignment_expression

    RSPAREN         shift and go to state 398
    COMMA           shift and go to state 300


state 369

    (286) initializer_list -> LCPAREN initializer_list RCPAREN .

    RCPAREN         reduce using rule 286 (initializer_list -> LCPAREN initializer_list RCPAREN .)
    COMMA           reduce using rule 286 (initializer_list -> LCPAREN initializer_list RCPAREN .)
    RPAREN          reduce using rule 286 (initializer_list -> LCPAREN initializer_list RCPAREN .)


state 370

    (287) initializer_list -> LCPAREN initializer_list COMMA . RCPAREN
    (285) initializer_list -> initializer_list COMMA . assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RCPAREN         shift and go to state 399
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    THIS            shift and go to state 144
    LPAREN          shift and go to state 148
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    assignment_expression          shift and go to state 372
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    cast_expression                shift and go to state 126
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    logical_AND_expression         shift and go to state 114
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    inclusive_OR_expression        shift and go to state 115
    literal                        shift and go to state 143
    exclusive_OR_expression        shift and go to state 116
    AND_expression                 shift and go to state 117
    equality_expression            shift and go to state 118
    relational_expression          shift and go to state 119
    shift_expression               shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 122
    pm_expression                  shift and go to state 125

state 371

    (282) initializer -> EQUAL LCPAREN initializer_list COMMA RCPAREN .

    SEMICOLON       reduce using rule 282 (initializer -> EQUAL LCPAREN initializer_list COMMA RCPAREN .)
    COMMA           reduce using rule 282 (initializer -> EQUAL LCPAREN initializer_list COMMA RCPAREN .)


state 372

    (285) initializer_list -> initializer_list COMMA assignment_expression .

    RCPAREN         reduce using rule 285 (initializer_list -> initializer_list COMMA assignment_expression .)
    COMMA           reduce using rule 285 (initializer_list -> initializer_list COMMA assignment_expression .)
    RPAREN          reduce using rule 285 (initializer_list -> initializer_list COMMA assignment_expression .)


state 373

    (227) function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN . fct_body pop_scope
    (230) fct_body -> . compound_statement
    (231) compound_statement -> . LCPAREN statement_list RCPAREN
    (232) compound_statement -> . LCPAREN RCPAREN

    LCPAREN         shift and go to state 275

    fct_body                       shift and go to state 272
    compound_statement             shift and go to state 274

state 374

    (202) base_specifier -> access_specifier class_key IDENTIFIER template_class_name .

    COMMA           reduce using rule 202 (base_specifier -> access_specifier class_key IDENTIFIER template_class_name .)
    LCPAREN         reduce using rule 202 (base_specifier -> access_specifier class_key IDENTIFIER template_class_name .)


state 375

    (231) compound_statement -> LCPAREN statement_list RCPAREN .

    CONST           reduce using rule 231 (compound_statement -> LCPAREN statement_list RCPAREN .)
    ASM             reduce using rule 231 (compound_statement -> LCPAREN statement_list RCPAREN .)
    TEMPLATE        reduce using rule 231 (compound_statement -> LCPAREN statement_list RCPAREN .)
    TYPEDEF         reduce using rule 231 (compound_statement -> LCPAREN statement_list RCPAREN .)
    CHAR            reduce using rule 231 (compound_statement -> LCPAREN statement_list RCPAREN .)
    SHORT           reduce using rule 231 (compound_statement -> LCPAREN statement_list RCPAREN .)
    INT             reduce using rule 231 (compound_statement -> LCPAREN statement_list RCPAREN .)
    LONG            reduce using rule 231 (compound_statement -> LCPAREN statement_list RCPAREN .)
    SIGNED          reduce using rule 231 (compound_statement -> LCPAREN statement_list RCPAREN .)
    UNSIGNED        reduce using rule 231 (compound_statement -> LCPAREN statement_list RCPAREN .)
    FLOAT           reduce using rule 231 (compound_statement -> LCPAREN statement_list RCPAREN .)
    DOUBLE          reduce using rule 231 (compound_statement -> LCPAREN statement_list RCPAREN .)
    VOID            reduce using rule 231 (compound_statement -> LCPAREN statement_list RCPAREN .)
    STRING          reduce using rule 231 (compound_statement -> LCPAREN statement_list RCPAREN .)
    AUTO            reduce using rule 231 (compound_statement -> LCPAREN statement_list RCPAREN .)
    TYPE            reduce using rule 231 (compound_statement -> LCPAREN statement_list RCPAREN .)
    CLASS           reduce using rule 231 (compound_statement -> LCPAREN statement_list RCPAREN .)
    STRUCT          reduce using rule 231 (compound_statement -> LCPAREN statement_list RCPAREN .)
    $end            reduce using rule 231 (compound_statement -> LCPAREN statement_list RCPAREN .)
    RCPAREN         reduce using rule 231 (compound_statement -> LCPAREN statement_list RCPAREN .)
    IDENTIFIER      reduce using rule 231 (compound_statement -> LCPAREN statement_list RCPAREN .)
    CASE            reduce using rule 231 (compound_statement -> LCPAREN statement_list RCPAREN .)
    DEFAULT         reduce using rule 231 (compound_statement -> LCPAREN statement_list RCPAREN .)
    SEMICOLON       reduce using rule 231 (compound_statement -> LCPAREN statement_list RCPAREN .)
    LCPAREN         reduce using rule 231 (compound_statement -> LCPAREN statement_list RCPAREN .)
    IF              reduce using rule 231 (compound_statement -> LCPAREN statement_list RCPAREN .)
    SWITCH          reduce using rule 231 (compound_statement -> LCPAREN statement_list RCPAREN .)
    WHILE           reduce using rule 231 (compound_statement -> LCPAREN statement_list RCPAREN .)
    DO              reduce using rule 231 (compound_statement -> LCPAREN statement_list RCPAREN .)
    FOR             reduce using rule 231 (compound_statement -> LCPAREN statement_list RCPAREN .)
    BREAK           reduce using rule 231 (compound_statement -> LCPAREN statement_list RCPAREN .)
    CONTINUE        reduce using rule 231 (compound_statement -> LCPAREN statement_list RCPAREN .)
    RETURN          reduce using rule 231 (compound_statement -> LCPAREN statement_list RCPAREN .)
    GOTO            reduce using rule 231 (compound_statement -> LCPAREN statement_list RCPAREN .)
    TRY             reduce using rule 231 (compound_statement -> LCPAREN statement_list RCPAREN .)
    THROW           reduce using rule 231 (compound_statement -> LCPAREN statement_list RCPAREN .)
    DPLUSOP         reduce using rule 231 (compound_statement -> LCPAREN statement_list RCPAREN .)
    DMINUSOP        reduce using rule 231 (compound_statement -> LCPAREN statement_list RCPAREN .)
    SIZEOF          reduce using rule 231 (compound_statement -> LCPAREN statement_list RCPAREN .)
    PLUSOP          reduce using rule 231 (compound_statement -> LCPAREN statement_list RCPAREN .)
    MINUSOP         reduce using rule 231 (compound_statement -> LCPAREN statement_list RCPAREN .)
    NOTSYM          reduce using rule 231 (compound_statement -> LCPAREN statement_list RCPAREN .)
    BNOP            reduce using rule 231 (compound_statement -> LCPAREN statement_list RCPAREN .)
    MULTOP          reduce using rule 231 (compound_statement -> LCPAREN statement_list RCPAREN .)
    BANDOP          reduce using rule 231 (compound_statement -> LCPAREN statement_list RCPAREN .)
    NEW             reduce using rule 231 (compound_statement -> LCPAREN statement_list RCPAREN .)
    DELETE          reduce using rule 231 (compound_statement -> LCPAREN statement_list RCPAREN .)
    THIS            reduce using rule 231 (compound_statement -> LCPAREN statement_list RCPAREN .)
    LPAREN          reduce using rule 231 (compound_statement -> LCPAREN statement_list RCPAREN .)
    DOUBLEBNOP      reduce using rule 231 (compound_statement -> LCPAREN statement_list RCPAREN .)
    STRING_L        reduce using rule 231 (compound_statement -> LCPAREN statement_list RCPAREN .)
    NUMBER          reduce using rule 231 (compound_statement -> LCPAREN statement_list RCPAREN .)
    SCHAR           reduce using rule 231 (compound_statement -> LCPAREN statement_list RCPAREN .)
    ELSE            reduce using rule 231 (compound_statement -> LCPAREN statement_list RCPAREN .)
    CATCH           reduce using rule 231 (compound_statement -> LCPAREN statement_list RCPAREN .)
    PRIVATE         reduce using rule 231 (compound_statement -> LCPAREN statement_list RCPAREN .)
    PROTECTED       reduce using rule 231 (compound_statement -> LCPAREN statement_list RCPAREN .)
    PUBLIC          reduce using rule 231 (compound_statement -> LCPAREN statement_list RCPAREN .)


state 376

    (234) statement_list -> statement_list statement .

    RCPAREN         reduce using rule 234 (statement_list -> statement_list statement .)
    IDENTIFIER      reduce using rule 234 (statement_list -> statement_list statement .)
    CASE            reduce using rule 234 (statement_list -> statement_list statement .)
    DEFAULT         reduce using rule 234 (statement_list -> statement_list statement .)
    SEMICOLON       reduce using rule 234 (statement_list -> statement_list statement .)
    LCPAREN         reduce using rule 234 (statement_list -> statement_list statement .)
    IF              reduce using rule 234 (statement_list -> statement_list statement .)
    SWITCH          reduce using rule 234 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 234 (statement_list -> statement_list statement .)
    DO              reduce using rule 234 (statement_list -> statement_list statement .)
    FOR             reduce using rule 234 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 234 (statement_list -> statement_list statement .)
    CONTINUE        reduce using rule 234 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 234 (statement_list -> statement_list statement .)
    GOTO            reduce using rule 234 (statement_list -> statement_list statement .)
    TRY             reduce using rule 234 (statement_list -> statement_list statement .)
    THROW           reduce using rule 234 (statement_list -> statement_list statement .)
    CONST           reduce using rule 234 (statement_list -> statement_list statement .)
    ASM             reduce using rule 234 (statement_list -> statement_list statement .)
    TEMPLATE        reduce using rule 234 (statement_list -> statement_list statement .)
    TYPEDEF         reduce using rule 234 (statement_list -> statement_list statement .)
    DPLUSOP         reduce using rule 234 (statement_list -> statement_list statement .)
    DMINUSOP        reduce using rule 234 (statement_list -> statement_list statement .)
    SIZEOF          reduce using rule 234 (statement_list -> statement_list statement .)
    PLUSOP          reduce using rule 234 (statement_list -> statement_list statement .)
    MINUSOP         reduce using rule 234 (statement_list -> statement_list statement .)
    NOTSYM          reduce using rule 234 (statement_list -> statement_list statement .)
    BNOP            reduce using rule 234 (statement_list -> statement_list statement .)
    MULTOP          reduce using rule 234 (statement_list -> statement_list statement .)
    BANDOP          reduce using rule 234 (statement_list -> statement_list statement .)
    NEW             reduce using rule 234 (statement_list -> statement_list statement .)
    DELETE          reduce using rule 234 (statement_list -> statement_list statement .)
    CHAR            reduce using rule 234 (statement_list -> statement_list statement .)
    SHORT           reduce using rule 234 (statement_list -> statement_list statement .)
    INT             reduce using rule 234 (statement_list -> statement_list statement .)
    LONG            reduce using rule 234 (statement_list -> statement_list statement .)
    SIGNED          reduce using rule 234 (statement_list -> statement_list statement .)
    UNSIGNED        reduce using rule 234 (statement_list -> statement_list statement .)
    FLOAT           reduce using rule 234 (statement_list -> statement_list statement .)
    DOUBLE          reduce using rule 234 (statement_list -> statement_list statement .)
    VOID            reduce using rule 234 (statement_list -> statement_list statement .)
    STRING          reduce using rule 234 (statement_list -> statement_list statement .)
    AUTO            reduce using rule 234 (statement_list -> statement_list statement .)
    TYPE            reduce using rule 234 (statement_list -> statement_list statement .)
    CLASS           reduce using rule 234 (statement_list -> statement_list statement .)
    STRUCT          reduce using rule 234 (statement_list -> statement_list statement .)
    THIS            reduce using rule 234 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 234 (statement_list -> statement_list statement .)
    DOUBLEBNOP      reduce using rule 234 (statement_list -> statement_list statement .)
    STRING_L        reduce using rule 234 (statement_list -> statement_list statement .)
    NUMBER          reduce using rule 234 (statement_list -> statement_list statement .)
    SCHAR           reduce using rule 234 (statement_list -> statement_list statement .)


state 377

    (252) labeled_statement -> IDENTIFIER COLON . statement
    (235) statement -> . labeled_statement
    (236) statement -> . expression_statement
    (237) statement -> . compound_statement
    (238) statement -> . selection_statement
    (239) statement -> . iteration_statement
    (240) statement -> . jump_statement
    (241) statement -> . declaration_statement
    (242) statement -> . try_block
    (252) labeled_statement -> . IDENTIFIER COLON statement
    (253) labeled_statement -> . CASE constant_expression COLON statement
    (254) labeled_statement -> . DEFAULT COLON statement
    (263) expression_statement -> . expression SEMICOLON
    (264) expression_statement -> . SEMICOLON
    (231) compound_statement -> . LCPAREN statement_list RCPAREN
    (232) compound_statement -> . LCPAREN RCPAREN
    (248) selection_statement -> . IF LPAREN expression RPAREN statement
    (249) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (250) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (255) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (256) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (257) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement
    (258) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement
    (259) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement
    (260) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (243) jump_statement -> . BREAK SEMICOLON
    (244) jump_statement -> . CONTINUE SEMICOLON
    (245) jump_statement -> . RETURN expression SEMICOLON
    (246) jump_statement -> . RETURN SEMICOLON
    (247) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (265) declaration_statement -> . declaration
    (251) try_block -> . TRY compound_statement CATCH compound_statement
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (266) declaration -> . type_specifier_ declarator_list SEMICOLON
    (267) declaration -> . asm_declaration
    (268) declaration -> . function_definition
    (269) declaration -> . function_decl
    (270) declaration -> . class_define_specifier SEMICOLON
    (271) declaration -> . template_declaration
    (272) declaration -> . typedef_declarator
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (170) type_specifier_ -> . CONST type_specifier
    (171) type_specifier_ -> . type_specifier
    (288) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (227) function_definition -> . type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope
    (228) function_decl -> . type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope
    (205) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (206) class_define_specifier -> . class_head LCPAREN RCPAREN
    (273) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (172) typedef_declarator -> . TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON
    (173) typedef_declarator -> . TYPEDEF type_specifier_ IDENTIFIER SEMICOLON
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (174) type_specifier -> . simple_type_name
    (175) type_specifier -> . complex_type_specifier
    (192) class_head -> . class_key IDENTIFIER base_spec
    (193) class_head -> . class_key IDENTIFIER
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (176) simple_type_name -> . CHAR
    (177) simple_type_name -> . SHORT
    (178) simple_type_name -> . INT
    (179) simple_type_name -> . LONG
    (180) simple_type_name -> . SIGNED
    (181) simple_type_name -> . UNSIGNED
    (182) simple_type_name -> . FLOAT
    (183) simple_type_name -> . DOUBLE
    (184) simple_type_name -> . VOID
    (185) simple_type_name -> . STRING
    (186) simple_type_name -> . AUTO
    (187) complex_type_specifier -> . class_key IDENTIFIER
    (188) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (189) complex_type_specifier -> . TYPE IDENTIFIER
    (190) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (203) class_key -> . CLASS
    (204) class_key -> . STRUCT
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 340
    CASE            shift and go to state 341
    DEFAULT         shift and go to state 342
    SEMICOLON       shift and go to state 344
    LCPAREN         shift and go to state 275
    IF              shift and go to state 345
    SWITCH          shift and go to state 346
    WHILE           shift and go to state 347
    DO              shift and go to state 348
    FOR             shift and go to state 349
    BREAK           shift and go to state 350
    CONTINUE        shift and go to state 351
    RETURN          shift and go to state 352
    GOTO            shift and go to state 353
    TRY             shift and go to state 355
    THROW           shift and go to state 216
    CONST           shift and go to state 16
    ASM             shift and go to state 18
    TEMPLATE        shift and go to state 20
    TYPEDEF         shift and go to state 21
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38
    THIS            shift and go to state 144
    LPAREN          shift and go to state 148
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    statement                      shift and go to state 400
    labeled_statement              shift and go to state 332
    expression_statement           shift and go to state 333
    compound_statement             shift and go to state 334
    selection_statement            shift and go to state 335
    iteration_statement            shift and go to state 336
    jump_statement                 shift and go to state 337
    declaration_statement          shift and go to state 338
    try_block                      shift and go to state 339
    expression                     shift and go to state 343
    declaration                    shift and go to state 354
    assignment_expression          shift and go to state 214
    throw_expression               shift and go to state 215
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    function_decl                  shift and go to state 12
    class_define_specifier         shift and go to state 13
    template_declaration           shift and go to state 14
    typedef_declarator             shift and go to state 15
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    type_specifier                 shift and go to state 17
    class_head                     shift and go to state 19
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    cast_expression                shift and go to state 126
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 24
    logical_AND_expression         shift and go to state 114
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    inclusive_OR_expression        shift and go to state 115
    literal                        shift and go to state 143
    exclusive_OR_expression        shift and go to state 116
    AND_expression                 shift and go to state 117
    equality_expression            shift and go to state 118
    relational_expression          shift and go to state 119
    shift_expression               shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 122
    pm_expression                  shift and go to state 125

state 378

    (253) labeled_statement -> CASE constant_expression . COLON statement

    COLON           shift and go to state 401


state 379

    (254) labeled_statement -> DEFAULT COLON . statement
    (235) statement -> . labeled_statement
    (236) statement -> . expression_statement
    (237) statement -> . compound_statement
    (238) statement -> . selection_statement
    (239) statement -> . iteration_statement
    (240) statement -> . jump_statement
    (241) statement -> . declaration_statement
    (242) statement -> . try_block
    (252) labeled_statement -> . IDENTIFIER COLON statement
    (253) labeled_statement -> . CASE constant_expression COLON statement
    (254) labeled_statement -> . DEFAULT COLON statement
    (263) expression_statement -> . expression SEMICOLON
    (264) expression_statement -> . SEMICOLON
    (231) compound_statement -> . LCPAREN statement_list RCPAREN
    (232) compound_statement -> . LCPAREN RCPAREN
    (248) selection_statement -> . IF LPAREN expression RPAREN statement
    (249) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (250) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (255) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (256) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (257) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement
    (258) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement
    (259) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement
    (260) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (243) jump_statement -> . BREAK SEMICOLON
    (244) jump_statement -> . CONTINUE SEMICOLON
    (245) jump_statement -> . RETURN expression SEMICOLON
    (246) jump_statement -> . RETURN SEMICOLON
    (247) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (265) declaration_statement -> . declaration
    (251) try_block -> . TRY compound_statement CATCH compound_statement
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (266) declaration -> . type_specifier_ declarator_list SEMICOLON
    (267) declaration -> . asm_declaration
    (268) declaration -> . function_definition
    (269) declaration -> . function_decl
    (270) declaration -> . class_define_specifier SEMICOLON
    (271) declaration -> . template_declaration
    (272) declaration -> . typedef_declarator
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (170) type_specifier_ -> . CONST type_specifier
    (171) type_specifier_ -> . type_specifier
    (288) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (227) function_definition -> . type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope
    (228) function_decl -> . type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope
    (205) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (206) class_define_specifier -> . class_head LCPAREN RCPAREN
    (273) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (172) typedef_declarator -> . TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON
    (173) typedef_declarator -> . TYPEDEF type_specifier_ IDENTIFIER SEMICOLON
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (174) type_specifier -> . simple_type_name
    (175) type_specifier -> . complex_type_specifier
    (192) class_head -> . class_key IDENTIFIER base_spec
    (193) class_head -> . class_key IDENTIFIER
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (176) simple_type_name -> . CHAR
    (177) simple_type_name -> . SHORT
    (178) simple_type_name -> . INT
    (179) simple_type_name -> . LONG
    (180) simple_type_name -> . SIGNED
    (181) simple_type_name -> . UNSIGNED
    (182) simple_type_name -> . FLOAT
    (183) simple_type_name -> . DOUBLE
    (184) simple_type_name -> . VOID
    (185) simple_type_name -> . STRING
    (186) simple_type_name -> . AUTO
    (187) complex_type_specifier -> . class_key IDENTIFIER
    (188) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (189) complex_type_specifier -> . TYPE IDENTIFIER
    (190) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (203) class_key -> . CLASS
    (204) class_key -> . STRUCT
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 340
    CASE            shift and go to state 341
    DEFAULT         shift and go to state 342
    SEMICOLON       shift and go to state 344
    LCPAREN         shift and go to state 275
    IF              shift and go to state 345
    SWITCH          shift and go to state 346
    WHILE           shift and go to state 347
    DO              shift and go to state 348
    FOR             shift and go to state 349
    BREAK           shift and go to state 350
    CONTINUE        shift and go to state 351
    RETURN          shift and go to state 352
    GOTO            shift and go to state 353
    TRY             shift and go to state 355
    THROW           shift and go to state 216
    CONST           shift and go to state 16
    ASM             shift and go to state 18
    TEMPLATE        shift and go to state 20
    TYPEDEF         shift and go to state 21
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38
    THIS            shift and go to state 144
    LPAREN          shift and go to state 148
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    statement                      shift and go to state 402
    labeled_statement              shift and go to state 332
    expression_statement           shift and go to state 333
    compound_statement             shift and go to state 334
    selection_statement            shift and go to state 335
    iteration_statement            shift and go to state 336
    jump_statement                 shift and go to state 337
    declaration_statement          shift and go to state 338
    try_block                      shift and go to state 339
    expression                     shift and go to state 343
    declaration                    shift and go to state 354
    assignment_expression          shift and go to state 214
    throw_expression               shift and go to state 215
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    function_decl                  shift and go to state 12
    class_define_specifier         shift and go to state 13
    template_declaration           shift and go to state 14
    typedef_declarator             shift and go to state 15
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    type_specifier                 shift and go to state 17
    class_head                     shift and go to state 19
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    cast_expression                shift and go to state 126
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 24
    logical_AND_expression         shift and go to state 114
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    inclusive_OR_expression        shift and go to state 115
    literal                        shift and go to state 143
    exclusive_OR_expression        shift and go to state 116
    AND_expression                 shift and go to state 117
    equality_expression            shift and go to state 118
    relational_expression          shift and go to state 119
    shift_expression               shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 122
    pm_expression                  shift and go to state 125

state 380

    (263) expression_statement -> expression SEMICOLON .

    RCPAREN         reduce using rule 263 (expression_statement -> expression SEMICOLON .)
    IDENTIFIER      reduce using rule 263 (expression_statement -> expression SEMICOLON .)
    CASE            reduce using rule 263 (expression_statement -> expression SEMICOLON .)
    DEFAULT         reduce using rule 263 (expression_statement -> expression SEMICOLON .)
    SEMICOLON       reduce using rule 263 (expression_statement -> expression SEMICOLON .)
    LCPAREN         reduce using rule 263 (expression_statement -> expression SEMICOLON .)
    IF              reduce using rule 263 (expression_statement -> expression SEMICOLON .)
    SWITCH          reduce using rule 263 (expression_statement -> expression SEMICOLON .)
    WHILE           reduce using rule 263 (expression_statement -> expression SEMICOLON .)
    DO              reduce using rule 263 (expression_statement -> expression SEMICOLON .)
    FOR             reduce using rule 263 (expression_statement -> expression SEMICOLON .)
    BREAK           reduce using rule 263 (expression_statement -> expression SEMICOLON .)
    CONTINUE        reduce using rule 263 (expression_statement -> expression SEMICOLON .)
    RETURN          reduce using rule 263 (expression_statement -> expression SEMICOLON .)
    GOTO            reduce using rule 263 (expression_statement -> expression SEMICOLON .)
    TRY             reduce using rule 263 (expression_statement -> expression SEMICOLON .)
    THROW           reduce using rule 263 (expression_statement -> expression SEMICOLON .)
    CONST           reduce using rule 263 (expression_statement -> expression SEMICOLON .)
    ASM             reduce using rule 263 (expression_statement -> expression SEMICOLON .)
    TEMPLATE        reduce using rule 263 (expression_statement -> expression SEMICOLON .)
    TYPEDEF         reduce using rule 263 (expression_statement -> expression SEMICOLON .)
    DPLUSOP         reduce using rule 263 (expression_statement -> expression SEMICOLON .)
    DMINUSOP        reduce using rule 263 (expression_statement -> expression SEMICOLON .)
    SIZEOF          reduce using rule 263 (expression_statement -> expression SEMICOLON .)
    PLUSOP          reduce using rule 263 (expression_statement -> expression SEMICOLON .)
    MINUSOP         reduce using rule 263 (expression_statement -> expression SEMICOLON .)
    NOTSYM          reduce using rule 263 (expression_statement -> expression SEMICOLON .)
    BNOP            reduce using rule 263 (expression_statement -> expression SEMICOLON .)
    MULTOP          reduce using rule 263 (expression_statement -> expression SEMICOLON .)
    BANDOP          reduce using rule 263 (expression_statement -> expression SEMICOLON .)
    NEW             reduce using rule 263 (expression_statement -> expression SEMICOLON .)
    DELETE          reduce using rule 263 (expression_statement -> expression SEMICOLON .)
    CHAR            reduce using rule 263 (expression_statement -> expression SEMICOLON .)
    SHORT           reduce using rule 263 (expression_statement -> expression SEMICOLON .)
    INT             reduce using rule 263 (expression_statement -> expression SEMICOLON .)
    LONG            reduce using rule 263 (expression_statement -> expression SEMICOLON .)
    SIGNED          reduce using rule 263 (expression_statement -> expression SEMICOLON .)
    UNSIGNED        reduce using rule 263 (expression_statement -> expression SEMICOLON .)
    FLOAT           reduce using rule 263 (expression_statement -> expression SEMICOLON .)
    DOUBLE          reduce using rule 263 (expression_statement -> expression SEMICOLON .)
    VOID            reduce using rule 263 (expression_statement -> expression SEMICOLON .)
    STRING          reduce using rule 263 (expression_statement -> expression SEMICOLON .)
    AUTO            reduce using rule 263 (expression_statement -> expression SEMICOLON .)
    TYPE            reduce using rule 263 (expression_statement -> expression SEMICOLON .)
    CLASS           reduce using rule 263 (expression_statement -> expression SEMICOLON .)
    STRUCT          reduce using rule 263 (expression_statement -> expression SEMICOLON .)
    THIS            reduce using rule 263 (expression_statement -> expression SEMICOLON .)
    LPAREN          reduce using rule 263 (expression_statement -> expression SEMICOLON .)
    DOUBLEBNOP      reduce using rule 263 (expression_statement -> expression SEMICOLON .)
    STRING_L        reduce using rule 263 (expression_statement -> expression SEMICOLON .)
    NUMBER          reduce using rule 263 (expression_statement -> expression SEMICOLON .)
    SCHAR           reduce using rule 263 (expression_statement -> expression SEMICOLON .)
    ELSE            reduce using rule 263 (expression_statement -> expression SEMICOLON .)


state 381

    (248) selection_statement -> IF LPAREN . expression RPAREN statement
    (249) selection_statement -> IF LPAREN . expression RPAREN statement ELSE statement
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    THROW           shift and go to state 216
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    THIS            shift and go to state 144
    LPAREN          shift and go to state 148
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    expression                     shift and go to state 403
    assignment_expression          shift and go to state 214
    throw_expression               shift and go to state 215
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    cast_expression                shift and go to state 126
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    logical_AND_expression         shift and go to state 114
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    inclusive_OR_expression        shift and go to state 115
    literal                        shift and go to state 143
    exclusive_OR_expression        shift and go to state 116
    AND_expression                 shift and go to state 117
    equality_expression            shift and go to state 118
    relational_expression          shift and go to state 119
    shift_expression               shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 122
    pm_expression                  shift and go to state 125

state 382

    (250) selection_statement -> SWITCH LPAREN . expression RPAREN statement
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    THROW           shift and go to state 216
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    THIS            shift and go to state 144
    LPAREN          shift and go to state 148
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    expression                     shift and go to state 404
    assignment_expression          shift and go to state 214
    throw_expression               shift and go to state 215
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    cast_expression                shift and go to state 126
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    logical_AND_expression         shift and go to state 114
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    inclusive_OR_expression        shift and go to state 115
    literal                        shift and go to state 143
    exclusive_OR_expression        shift and go to state 116
    AND_expression                 shift and go to state 117
    equality_expression            shift and go to state 118
    relational_expression          shift and go to state 119
    shift_expression               shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 122
    pm_expression                  shift and go to state 125

state 383

    (255) iteration_statement -> WHILE LPAREN . expression RPAREN statement
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    THROW           shift and go to state 216
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    THIS            shift and go to state 144
    LPAREN          shift and go to state 148
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    expression                     shift and go to state 405
    assignment_expression          shift and go to state 214
    throw_expression               shift and go to state 215
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    cast_expression                shift and go to state 126
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    logical_AND_expression         shift and go to state 114
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    inclusive_OR_expression        shift and go to state 115
    literal                        shift and go to state 143
    exclusive_OR_expression        shift and go to state 116
    AND_expression                 shift and go to state 117
    equality_expression            shift and go to state 118
    relational_expression          shift and go to state 119
    shift_expression               shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 122
    pm_expression                  shift and go to state 125

state 384

    (256) iteration_statement -> DO statement . WHILE LPAREN expression RPAREN SEMICOLON

    WHILE           shift and go to state 406


state 385

    (257) iteration_statement -> FOR LPAREN . for_init_statement expression SEMICOLON expression RPAREN compound_statement
    (258) iteration_statement -> FOR LPAREN . for_init_statement SEMICOLON expression RPAREN compound_statement
    (259) iteration_statement -> FOR LPAREN . for_init_statement expression SEMICOLON RPAREN compound_statement
    (260) iteration_statement -> FOR LPAREN . for_init_statement SEMICOLON RPAREN statement
    (261) for_init_statement -> . expression_statement
    (262) for_init_statement -> . declaration_statement
    (263) expression_statement -> . expression SEMICOLON
    (264) expression_statement -> . SEMICOLON
    (265) declaration_statement -> . declaration
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (266) declaration -> . type_specifier_ declarator_list SEMICOLON
    (267) declaration -> . asm_declaration
    (268) declaration -> . function_definition
    (269) declaration -> . function_decl
    (270) declaration -> . class_define_specifier SEMICOLON
    (271) declaration -> . template_declaration
    (272) declaration -> . typedef_declarator
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (170) type_specifier_ -> . CONST type_specifier
    (171) type_specifier_ -> . type_specifier
    (288) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (227) function_definition -> . type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope
    (228) function_decl -> . type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope
    (205) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (206) class_define_specifier -> . class_head LCPAREN RCPAREN
    (273) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (172) typedef_declarator -> . TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON
    (173) typedef_declarator -> . TYPEDEF type_specifier_ IDENTIFIER SEMICOLON
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (174) type_specifier -> . simple_type_name
    (175) type_specifier -> . complex_type_specifier
    (192) class_head -> . class_key IDENTIFIER base_spec
    (193) class_head -> . class_key IDENTIFIER
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (176) simple_type_name -> . CHAR
    (177) simple_type_name -> . SHORT
    (178) simple_type_name -> . INT
    (179) simple_type_name -> . LONG
    (180) simple_type_name -> . SIGNED
    (181) simple_type_name -> . UNSIGNED
    (182) simple_type_name -> . FLOAT
    (183) simple_type_name -> . DOUBLE
    (184) simple_type_name -> . VOID
    (185) simple_type_name -> . STRING
    (186) simple_type_name -> . AUTO
    (187) complex_type_specifier -> . class_key IDENTIFIER
    (188) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (189) complex_type_specifier -> . TYPE IDENTIFIER
    (190) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (203) class_key -> . CLASS
    (204) class_key -> . STRUCT
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMICOLON       shift and go to state 344
    THROW           shift and go to state 216
    CONST           shift and go to state 16
    ASM             shift and go to state 18
    TEMPLATE        shift and go to state 20
    TYPEDEF         shift and go to state 21
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38
    THIS            shift and go to state 144
    LPAREN          shift and go to state 148
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    for_init_statement             shift and go to state 407
    expression                     shift and go to state 343
    expression_statement           shift and go to state 408
    declaration_statement          shift and go to state 409
    declaration                    shift and go to state 354
    assignment_expression          shift and go to state 214
    throw_expression               shift and go to state 215
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    function_decl                  shift and go to state 12
    class_define_specifier         shift and go to state 13
    template_declaration           shift and go to state 14
    typedef_declarator             shift and go to state 15
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    type_specifier                 shift and go to state 17
    class_head                     shift and go to state 19
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    cast_expression                shift and go to state 126
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 24
    logical_AND_expression         shift and go to state 114
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    inclusive_OR_expression        shift and go to state 115
    literal                        shift and go to state 143
    exclusive_OR_expression        shift and go to state 116
    AND_expression                 shift and go to state 117
    equality_expression            shift and go to state 118
    relational_expression          shift and go to state 119
    shift_expression               shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 122
    pm_expression                  shift and go to state 125

state 386

    (243) jump_statement -> BREAK SEMICOLON .

    RCPAREN         reduce using rule 243 (jump_statement -> BREAK SEMICOLON .)
    IDENTIFIER      reduce using rule 243 (jump_statement -> BREAK SEMICOLON .)
    CASE            reduce using rule 243 (jump_statement -> BREAK SEMICOLON .)
    DEFAULT         reduce using rule 243 (jump_statement -> BREAK SEMICOLON .)
    SEMICOLON       reduce using rule 243 (jump_statement -> BREAK SEMICOLON .)
    LCPAREN         reduce using rule 243 (jump_statement -> BREAK SEMICOLON .)
    IF              reduce using rule 243 (jump_statement -> BREAK SEMICOLON .)
    SWITCH          reduce using rule 243 (jump_statement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 243 (jump_statement -> BREAK SEMICOLON .)
    DO              reduce using rule 243 (jump_statement -> BREAK SEMICOLON .)
    FOR             reduce using rule 243 (jump_statement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 243 (jump_statement -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 243 (jump_statement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 243 (jump_statement -> BREAK SEMICOLON .)
    GOTO            reduce using rule 243 (jump_statement -> BREAK SEMICOLON .)
    TRY             reduce using rule 243 (jump_statement -> BREAK SEMICOLON .)
    THROW           reduce using rule 243 (jump_statement -> BREAK SEMICOLON .)
    CONST           reduce using rule 243 (jump_statement -> BREAK SEMICOLON .)
    ASM             reduce using rule 243 (jump_statement -> BREAK SEMICOLON .)
    TEMPLATE        reduce using rule 243 (jump_statement -> BREAK SEMICOLON .)
    TYPEDEF         reduce using rule 243 (jump_statement -> BREAK SEMICOLON .)
    DPLUSOP         reduce using rule 243 (jump_statement -> BREAK SEMICOLON .)
    DMINUSOP        reduce using rule 243 (jump_statement -> BREAK SEMICOLON .)
    SIZEOF          reduce using rule 243 (jump_statement -> BREAK SEMICOLON .)
    PLUSOP          reduce using rule 243 (jump_statement -> BREAK SEMICOLON .)
    MINUSOP         reduce using rule 243 (jump_statement -> BREAK SEMICOLON .)
    NOTSYM          reduce using rule 243 (jump_statement -> BREAK SEMICOLON .)
    BNOP            reduce using rule 243 (jump_statement -> BREAK SEMICOLON .)
    MULTOP          reduce using rule 243 (jump_statement -> BREAK SEMICOLON .)
    BANDOP          reduce using rule 243 (jump_statement -> BREAK SEMICOLON .)
    NEW             reduce using rule 243 (jump_statement -> BREAK SEMICOLON .)
    DELETE          reduce using rule 243 (jump_statement -> BREAK SEMICOLON .)
    CHAR            reduce using rule 243 (jump_statement -> BREAK SEMICOLON .)
    SHORT           reduce using rule 243 (jump_statement -> BREAK SEMICOLON .)
    INT             reduce using rule 243 (jump_statement -> BREAK SEMICOLON .)
    LONG            reduce using rule 243 (jump_statement -> BREAK SEMICOLON .)
    SIGNED          reduce using rule 243 (jump_statement -> BREAK SEMICOLON .)
    UNSIGNED        reduce using rule 243 (jump_statement -> BREAK SEMICOLON .)
    FLOAT           reduce using rule 243 (jump_statement -> BREAK SEMICOLON .)
    DOUBLE          reduce using rule 243 (jump_statement -> BREAK SEMICOLON .)
    VOID            reduce using rule 243 (jump_statement -> BREAK SEMICOLON .)
    STRING          reduce using rule 243 (jump_statement -> BREAK SEMICOLON .)
    AUTO            reduce using rule 243 (jump_statement -> BREAK SEMICOLON .)
    TYPE            reduce using rule 243 (jump_statement -> BREAK SEMICOLON .)
    CLASS           reduce using rule 243 (jump_statement -> BREAK SEMICOLON .)
    STRUCT          reduce using rule 243 (jump_statement -> BREAK SEMICOLON .)
    THIS            reduce using rule 243 (jump_statement -> BREAK SEMICOLON .)
    LPAREN          reduce using rule 243 (jump_statement -> BREAK SEMICOLON .)
    DOUBLEBNOP      reduce using rule 243 (jump_statement -> BREAK SEMICOLON .)
    STRING_L        reduce using rule 243 (jump_statement -> BREAK SEMICOLON .)
    NUMBER          reduce using rule 243 (jump_statement -> BREAK SEMICOLON .)
    SCHAR           reduce using rule 243 (jump_statement -> BREAK SEMICOLON .)
    ELSE            reduce using rule 243 (jump_statement -> BREAK SEMICOLON .)


state 387

    (244) jump_statement -> CONTINUE SEMICOLON .

    RCPAREN         reduce using rule 244 (jump_statement -> CONTINUE SEMICOLON .)
    IDENTIFIER      reduce using rule 244 (jump_statement -> CONTINUE SEMICOLON .)
    CASE            reduce using rule 244 (jump_statement -> CONTINUE SEMICOLON .)
    DEFAULT         reduce using rule 244 (jump_statement -> CONTINUE SEMICOLON .)
    SEMICOLON       reduce using rule 244 (jump_statement -> CONTINUE SEMICOLON .)
    LCPAREN         reduce using rule 244 (jump_statement -> CONTINUE SEMICOLON .)
    IF              reduce using rule 244 (jump_statement -> CONTINUE SEMICOLON .)
    SWITCH          reduce using rule 244 (jump_statement -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 244 (jump_statement -> CONTINUE SEMICOLON .)
    DO              reduce using rule 244 (jump_statement -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 244 (jump_statement -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 244 (jump_statement -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 244 (jump_statement -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 244 (jump_statement -> CONTINUE SEMICOLON .)
    GOTO            reduce using rule 244 (jump_statement -> CONTINUE SEMICOLON .)
    TRY             reduce using rule 244 (jump_statement -> CONTINUE SEMICOLON .)
    THROW           reduce using rule 244 (jump_statement -> CONTINUE SEMICOLON .)
    CONST           reduce using rule 244 (jump_statement -> CONTINUE SEMICOLON .)
    ASM             reduce using rule 244 (jump_statement -> CONTINUE SEMICOLON .)
    TEMPLATE        reduce using rule 244 (jump_statement -> CONTINUE SEMICOLON .)
    TYPEDEF         reduce using rule 244 (jump_statement -> CONTINUE SEMICOLON .)
    DPLUSOP         reduce using rule 244 (jump_statement -> CONTINUE SEMICOLON .)
    DMINUSOP        reduce using rule 244 (jump_statement -> CONTINUE SEMICOLON .)
    SIZEOF          reduce using rule 244 (jump_statement -> CONTINUE SEMICOLON .)
    PLUSOP          reduce using rule 244 (jump_statement -> CONTINUE SEMICOLON .)
    MINUSOP         reduce using rule 244 (jump_statement -> CONTINUE SEMICOLON .)
    NOTSYM          reduce using rule 244 (jump_statement -> CONTINUE SEMICOLON .)
    BNOP            reduce using rule 244 (jump_statement -> CONTINUE SEMICOLON .)
    MULTOP          reduce using rule 244 (jump_statement -> CONTINUE SEMICOLON .)
    BANDOP          reduce using rule 244 (jump_statement -> CONTINUE SEMICOLON .)
    NEW             reduce using rule 244 (jump_statement -> CONTINUE SEMICOLON .)
    DELETE          reduce using rule 244 (jump_statement -> CONTINUE SEMICOLON .)
    CHAR            reduce using rule 244 (jump_statement -> CONTINUE SEMICOLON .)
    SHORT           reduce using rule 244 (jump_statement -> CONTINUE SEMICOLON .)
    INT             reduce using rule 244 (jump_statement -> CONTINUE SEMICOLON .)
    LONG            reduce using rule 244 (jump_statement -> CONTINUE SEMICOLON .)
    SIGNED          reduce using rule 244 (jump_statement -> CONTINUE SEMICOLON .)
    UNSIGNED        reduce using rule 244 (jump_statement -> CONTINUE SEMICOLON .)
    FLOAT           reduce using rule 244 (jump_statement -> CONTINUE SEMICOLON .)
    DOUBLE          reduce using rule 244 (jump_statement -> CONTINUE SEMICOLON .)
    VOID            reduce using rule 244 (jump_statement -> CONTINUE SEMICOLON .)
    STRING          reduce using rule 244 (jump_statement -> CONTINUE SEMICOLON .)
    AUTO            reduce using rule 244 (jump_statement -> CONTINUE SEMICOLON .)
    TYPE            reduce using rule 244 (jump_statement -> CONTINUE SEMICOLON .)
    CLASS           reduce using rule 244 (jump_statement -> CONTINUE SEMICOLON .)
    STRUCT          reduce using rule 244 (jump_statement -> CONTINUE SEMICOLON .)
    THIS            reduce using rule 244 (jump_statement -> CONTINUE SEMICOLON .)
    LPAREN          reduce using rule 244 (jump_statement -> CONTINUE SEMICOLON .)
    DOUBLEBNOP      reduce using rule 244 (jump_statement -> CONTINUE SEMICOLON .)
    STRING_L        reduce using rule 244 (jump_statement -> CONTINUE SEMICOLON .)
    NUMBER          reduce using rule 244 (jump_statement -> CONTINUE SEMICOLON .)
    SCHAR           reduce using rule 244 (jump_statement -> CONTINUE SEMICOLON .)
    ELSE            reduce using rule 244 (jump_statement -> CONTINUE SEMICOLON .)


state 388

    (245) jump_statement -> RETURN expression . SEMICOLON
    (48) expression -> expression . COMMA assignment_expression

    SEMICOLON       shift and go to state 410
    COMMA           shift and go to state 300


state 389

    (246) jump_statement -> RETURN SEMICOLON .

    RCPAREN         reduce using rule 246 (jump_statement -> RETURN SEMICOLON .)
    IDENTIFIER      reduce using rule 246 (jump_statement -> RETURN SEMICOLON .)
    CASE            reduce using rule 246 (jump_statement -> RETURN SEMICOLON .)
    DEFAULT         reduce using rule 246 (jump_statement -> RETURN SEMICOLON .)
    SEMICOLON       reduce using rule 246 (jump_statement -> RETURN SEMICOLON .)
    LCPAREN         reduce using rule 246 (jump_statement -> RETURN SEMICOLON .)
    IF              reduce using rule 246 (jump_statement -> RETURN SEMICOLON .)
    SWITCH          reduce using rule 246 (jump_statement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 246 (jump_statement -> RETURN SEMICOLON .)
    DO              reduce using rule 246 (jump_statement -> RETURN SEMICOLON .)
    FOR             reduce using rule 246 (jump_statement -> RETURN SEMICOLON .)
    BREAK           reduce using rule 246 (jump_statement -> RETURN SEMICOLON .)
    CONTINUE        reduce using rule 246 (jump_statement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 246 (jump_statement -> RETURN SEMICOLON .)
    GOTO            reduce using rule 246 (jump_statement -> RETURN SEMICOLON .)
    TRY             reduce using rule 246 (jump_statement -> RETURN SEMICOLON .)
    THROW           reduce using rule 246 (jump_statement -> RETURN SEMICOLON .)
    CONST           reduce using rule 246 (jump_statement -> RETURN SEMICOLON .)
    ASM             reduce using rule 246 (jump_statement -> RETURN SEMICOLON .)
    TEMPLATE        reduce using rule 246 (jump_statement -> RETURN SEMICOLON .)
    TYPEDEF         reduce using rule 246 (jump_statement -> RETURN SEMICOLON .)
    DPLUSOP         reduce using rule 246 (jump_statement -> RETURN SEMICOLON .)
    DMINUSOP        reduce using rule 246 (jump_statement -> RETURN SEMICOLON .)
    SIZEOF          reduce using rule 246 (jump_statement -> RETURN SEMICOLON .)
    PLUSOP          reduce using rule 246 (jump_statement -> RETURN SEMICOLON .)
    MINUSOP         reduce using rule 246 (jump_statement -> RETURN SEMICOLON .)
    NOTSYM          reduce using rule 246 (jump_statement -> RETURN SEMICOLON .)
    BNOP            reduce using rule 246 (jump_statement -> RETURN SEMICOLON .)
    MULTOP          reduce using rule 246 (jump_statement -> RETURN SEMICOLON .)
    BANDOP          reduce using rule 246 (jump_statement -> RETURN SEMICOLON .)
    NEW             reduce using rule 246 (jump_statement -> RETURN SEMICOLON .)
    DELETE          reduce using rule 246 (jump_statement -> RETURN SEMICOLON .)
    CHAR            reduce using rule 246 (jump_statement -> RETURN SEMICOLON .)
    SHORT           reduce using rule 246 (jump_statement -> RETURN SEMICOLON .)
    INT             reduce using rule 246 (jump_statement -> RETURN SEMICOLON .)
    LONG            reduce using rule 246 (jump_statement -> RETURN SEMICOLON .)
    SIGNED          reduce using rule 246 (jump_statement -> RETURN SEMICOLON .)
    UNSIGNED        reduce using rule 246 (jump_statement -> RETURN SEMICOLON .)
    FLOAT           reduce using rule 246 (jump_statement -> RETURN SEMICOLON .)
    DOUBLE          reduce using rule 246 (jump_statement -> RETURN SEMICOLON .)
    VOID            reduce using rule 246 (jump_statement -> RETURN SEMICOLON .)
    STRING          reduce using rule 246 (jump_statement -> RETURN SEMICOLON .)
    AUTO            reduce using rule 246 (jump_statement -> RETURN SEMICOLON .)
    TYPE            reduce using rule 246 (jump_statement -> RETURN SEMICOLON .)
    CLASS           reduce using rule 246 (jump_statement -> RETURN SEMICOLON .)
    STRUCT          reduce using rule 246 (jump_statement -> RETURN SEMICOLON .)
    THIS            reduce using rule 246 (jump_statement -> RETURN SEMICOLON .)
    LPAREN          reduce using rule 246 (jump_statement -> RETURN SEMICOLON .)
    DOUBLEBNOP      reduce using rule 246 (jump_statement -> RETURN SEMICOLON .)
    STRING_L        reduce using rule 246 (jump_statement -> RETURN SEMICOLON .)
    NUMBER          reduce using rule 246 (jump_statement -> RETURN SEMICOLON .)
    SCHAR           reduce using rule 246 (jump_statement -> RETURN SEMICOLON .)
    ELSE            reduce using rule 246 (jump_statement -> RETURN SEMICOLON .)


state 390

    (247) jump_statement -> GOTO IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 411


state 391

    (251) try_block -> TRY compound_statement . CATCH compound_statement

    CATCH           shift and go to state 412


state 392

    (14) conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .

    RSPAREN         reduce using rule 14 (conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .)
    RPAREN          reduce using rule 14 (conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .)
    COMMA           reduce using rule 14 (conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .)
    SEMICOLON       reduce using rule 14 (conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .)
    RCPAREN         reduce using rule 14 (conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .)
    COLON           reduce using rule 14 (conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .)
    RTEMPLATE       reduce using rule 14 (conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .)


state 393

    (94) postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .

    LSPAREN         reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    LPAREN          reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    DOT             reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    ARROW           reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    DPLUSOP         reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    DMINUSOP        reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    LTEMPLATE       reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    DOTSTAR         reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    ARROWSTAR       reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    MULTOP          reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    DIVOP           reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    MODOP           reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    PLUSOP          reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    MINUSOP         reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    LSHIFT          reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    RSHIFT          reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    LTCOMP          reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    GTCOMP          reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    LTECOMP         reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    GTECOMP         reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    EQCOMP          reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    NEQCOMP         reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    BANDOP          reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    XOROP           reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    OROP            reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    ANDOP           reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    QUESMARK        reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    RSPAREN         reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    EQUAL           reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    MULTEQOP        reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    DIVEQOP         reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    MODEQOP         reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    PLUSEQOP        reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    MINUSEQOP       reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    LSHIFTEQOP      reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    RSHIFTEQOP      reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    BANDEQOP        reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    BOREQOP         reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    RPAREN          reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    SEMICOLON       reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    RCPAREN         reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    COLON           reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    RTEMPLATE       reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)


state 394

    (83) new_initializer -> LPAREN initializer_list RPAREN .

    DOTSTAR         reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    ARROWSTAR       reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    MULTOP          reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    DIVOP           reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    MODOP           reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    PLUSOP          reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    MINUSOP         reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    LSHIFT          reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    RSHIFT          reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    LTCOMP          reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    GTCOMP          reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    LTECOMP         reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    GTECOMP         reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    EQCOMP          reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    NEQCOMP         reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    BANDOP          reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    XOROP           reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    OROP            reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    ANDOP           reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    QUESMARK        reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    RSPAREN         reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    EQUAL           reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    MULTEQOP        reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    DIVEQOP         reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    MODEQOP         reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    PLUSEQOP        reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    MINUSEQOP       reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    LSHIFTEQOP      reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    RSHIFTEQOP      reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    BANDEQOP        reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    BOREQOP         reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    RPAREN          reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    COMMA           reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    SEMICOLON       reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    RCPAREN         reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    COLON           reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    RTEMPLATE       reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)


state 395

    (285) initializer_list -> initializer_list COMMA . assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    THIS            shift and go to state 144
    LPAREN          shift and go to state 148
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    assignment_expression          shift and go to state 372
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    cast_expression                shift and go to state 126
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    logical_AND_expression         shift and go to state 114
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    inclusive_OR_expression        shift and go to state 115
    literal                        shift and go to state 143
    exclusive_OR_expression        shift and go to state 116
    AND_expression                 shift and go to state 117
    equality_expression            shift and go to state 118
    relational_expression          shift and go to state 119
    shift_expression               shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 122
    pm_expression                  shift and go to state 125

state 396

    (75) allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .

    DOTSTAR         reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    ARROWSTAR       reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    MULTOP          reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    DIVOP           reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    MODOP           reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    PLUSOP          reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    MINUSOP         reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    LSHIFT          reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    RSHIFT          reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    LTCOMP          reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    GTCOMP          reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    LTECOMP         reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    GTECOMP         reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    EQCOMP          reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    NEQCOMP         reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    BANDOP          reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    XOROP           reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    OROP            reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    ANDOP           reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    QUESMARK        reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    RSPAREN         reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    EQUAL           reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    MULTEQOP        reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    DIVEQOP         reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    MODEQOP         reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    PLUSEQOP        reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    MINUSEQOP       reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    LSHIFTEQOP      reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    RSHIFTEQOP      reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    BANDEQOP        reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    BOREQOP         reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    RPAREN          reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    COMMA           reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    SEMICOLON       reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    RCPAREN         reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    COLON           reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    RTEMPLATE       reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)


state 397

    (81) new_declarator -> new_declarator LSPAREN expression . RSPAREN
    (48) expression -> expression . COMMA assignment_expression

    RSPAREN         shift and go to state 413
    COMMA           shift and go to state 300


state 398

    (82) new_declarator -> LSPAREN expression RSPAREN .

    MULTOP          reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    LSPAREN         reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    LPAREN          reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    DOTSTAR         reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    ARROWSTAR       reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    DIVOP           reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    MODOP           reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    PLUSOP          reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    MINUSOP         reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    LSHIFT          reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    RSHIFT          reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    LTCOMP          reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    GTCOMP          reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    LTECOMP         reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    GTECOMP         reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    EQCOMP          reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    NEQCOMP         reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    BANDOP          reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    XOROP           reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    OROP            reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    ANDOP           reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    QUESMARK        reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    RSPAREN         reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    EQUAL           reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    MULTEQOP        reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    DIVEQOP         reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    MODEQOP         reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    PLUSEQOP        reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    MINUSEQOP       reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    LSHIFTEQOP      reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    RSHIFTEQOP      reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    BANDEQOP        reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    BOREQOP         reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    RPAREN          reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    COMMA           reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    SEMICOLON       reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    RCPAREN         reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    COLON           reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    RTEMPLATE       reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)


state 399

    (287) initializer_list -> LCPAREN initializer_list COMMA RCPAREN .

    RCPAREN         reduce using rule 287 (initializer_list -> LCPAREN initializer_list COMMA RCPAREN .)
    COMMA           reduce using rule 287 (initializer_list -> LCPAREN initializer_list COMMA RCPAREN .)
    RPAREN          reduce using rule 287 (initializer_list -> LCPAREN initializer_list COMMA RCPAREN .)


state 400

    (252) labeled_statement -> IDENTIFIER COLON statement .

    RCPAREN         reduce using rule 252 (labeled_statement -> IDENTIFIER COLON statement .)
    IDENTIFIER      reduce using rule 252 (labeled_statement -> IDENTIFIER COLON statement .)
    CASE            reduce using rule 252 (labeled_statement -> IDENTIFIER COLON statement .)
    DEFAULT         reduce using rule 252 (labeled_statement -> IDENTIFIER COLON statement .)
    SEMICOLON       reduce using rule 252 (labeled_statement -> IDENTIFIER COLON statement .)
    LCPAREN         reduce using rule 252 (labeled_statement -> IDENTIFIER COLON statement .)
    IF              reduce using rule 252 (labeled_statement -> IDENTIFIER COLON statement .)
    SWITCH          reduce using rule 252 (labeled_statement -> IDENTIFIER COLON statement .)
    WHILE           reduce using rule 252 (labeled_statement -> IDENTIFIER COLON statement .)
    DO              reduce using rule 252 (labeled_statement -> IDENTIFIER COLON statement .)
    FOR             reduce using rule 252 (labeled_statement -> IDENTIFIER COLON statement .)
    BREAK           reduce using rule 252 (labeled_statement -> IDENTIFIER COLON statement .)
    CONTINUE        reduce using rule 252 (labeled_statement -> IDENTIFIER COLON statement .)
    RETURN          reduce using rule 252 (labeled_statement -> IDENTIFIER COLON statement .)
    GOTO            reduce using rule 252 (labeled_statement -> IDENTIFIER COLON statement .)
    TRY             reduce using rule 252 (labeled_statement -> IDENTIFIER COLON statement .)
    THROW           reduce using rule 252 (labeled_statement -> IDENTIFIER COLON statement .)
    CONST           reduce using rule 252 (labeled_statement -> IDENTIFIER COLON statement .)
    ASM             reduce using rule 252 (labeled_statement -> IDENTIFIER COLON statement .)
    TEMPLATE        reduce using rule 252 (labeled_statement -> IDENTIFIER COLON statement .)
    TYPEDEF         reduce using rule 252 (labeled_statement -> IDENTIFIER COLON statement .)
    DPLUSOP         reduce using rule 252 (labeled_statement -> IDENTIFIER COLON statement .)
    DMINUSOP        reduce using rule 252 (labeled_statement -> IDENTIFIER COLON statement .)
    SIZEOF          reduce using rule 252 (labeled_statement -> IDENTIFIER COLON statement .)
    PLUSOP          reduce using rule 252 (labeled_statement -> IDENTIFIER COLON statement .)
    MINUSOP         reduce using rule 252 (labeled_statement -> IDENTIFIER COLON statement .)
    NOTSYM          reduce using rule 252 (labeled_statement -> IDENTIFIER COLON statement .)
    BNOP            reduce using rule 252 (labeled_statement -> IDENTIFIER COLON statement .)
    MULTOP          reduce using rule 252 (labeled_statement -> IDENTIFIER COLON statement .)
    BANDOP          reduce using rule 252 (labeled_statement -> IDENTIFIER COLON statement .)
    NEW             reduce using rule 252 (labeled_statement -> IDENTIFIER COLON statement .)
    DELETE          reduce using rule 252 (labeled_statement -> IDENTIFIER COLON statement .)
    CHAR            reduce using rule 252 (labeled_statement -> IDENTIFIER COLON statement .)
    SHORT           reduce using rule 252 (labeled_statement -> IDENTIFIER COLON statement .)
    INT             reduce using rule 252 (labeled_statement -> IDENTIFIER COLON statement .)
    LONG            reduce using rule 252 (labeled_statement -> IDENTIFIER COLON statement .)
    SIGNED          reduce using rule 252 (labeled_statement -> IDENTIFIER COLON statement .)
    UNSIGNED        reduce using rule 252 (labeled_statement -> IDENTIFIER COLON statement .)
    FLOAT           reduce using rule 252 (labeled_statement -> IDENTIFIER COLON statement .)
    DOUBLE          reduce using rule 252 (labeled_statement -> IDENTIFIER COLON statement .)
    VOID            reduce using rule 252 (labeled_statement -> IDENTIFIER COLON statement .)
    STRING          reduce using rule 252 (labeled_statement -> IDENTIFIER COLON statement .)
    AUTO            reduce using rule 252 (labeled_statement -> IDENTIFIER COLON statement .)
    TYPE            reduce using rule 252 (labeled_statement -> IDENTIFIER COLON statement .)
    CLASS           reduce using rule 252 (labeled_statement -> IDENTIFIER COLON statement .)
    STRUCT          reduce using rule 252 (labeled_statement -> IDENTIFIER COLON statement .)
    THIS            reduce using rule 252 (labeled_statement -> IDENTIFIER COLON statement .)
    LPAREN          reduce using rule 252 (labeled_statement -> IDENTIFIER COLON statement .)
    DOUBLEBNOP      reduce using rule 252 (labeled_statement -> IDENTIFIER COLON statement .)
    STRING_L        reduce using rule 252 (labeled_statement -> IDENTIFIER COLON statement .)
    NUMBER          reduce using rule 252 (labeled_statement -> IDENTIFIER COLON statement .)
    SCHAR           reduce using rule 252 (labeled_statement -> IDENTIFIER COLON statement .)
    ELSE            reduce using rule 252 (labeled_statement -> IDENTIFIER COLON statement .)


state 401

    (253) labeled_statement -> CASE constant_expression COLON . statement
    (235) statement -> . labeled_statement
    (236) statement -> . expression_statement
    (237) statement -> . compound_statement
    (238) statement -> . selection_statement
    (239) statement -> . iteration_statement
    (240) statement -> . jump_statement
    (241) statement -> . declaration_statement
    (242) statement -> . try_block
    (252) labeled_statement -> . IDENTIFIER COLON statement
    (253) labeled_statement -> . CASE constant_expression COLON statement
    (254) labeled_statement -> . DEFAULT COLON statement
    (263) expression_statement -> . expression SEMICOLON
    (264) expression_statement -> . SEMICOLON
    (231) compound_statement -> . LCPAREN statement_list RCPAREN
    (232) compound_statement -> . LCPAREN RCPAREN
    (248) selection_statement -> . IF LPAREN expression RPAREN statement
    (249) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (250) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (255) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (256) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (257) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement
    (258) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement
    (259) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement
    (260) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (243) jump_statement -> . BREAK SEMICOLON
    (244) jump_statement -> . CONTINUE SEMICOLON
    (245) jump_statement -> . RETURN expression SEMICOLON
    (246) jump_statement -> . RETURN SEMICOLON
    (247) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (265) declaration_statement -> . declaration
    (251) try_block -> . TRY compound_statement CATCH compound_statement
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (266) declaration -> . type_specifier_ declarator_list SEMICOLON
    (267) declaration -> . asm_declaration
    (268) declaration -> . function_definition
    (269) declaration -> . function_decl
    (270) declaration -> . class_define_specifier SEMICOLON
    (271) declaration -> . template_declaration
    (272) declaration -> . typedef_declarator
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (170) type_specifier_ -> . CONST type_specifier
    (171) type_specifier_ -> . type_specifier
    (288) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (227) function_definition -> . type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope
    (228) function_decl -> . type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope
    (205) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (206) class_define_specifier -> . class_head LCPAREN RCPAREN
    (273) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (172) typedef_declarator -> . TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON
    (173) typedef_declarator -> . TYPEDEF type_specifier_ IDENTIFIER SEMICOLON
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (174) type_specifier -> . simple_type_name
    (175) type_specifier -> . complex_type_specifier
    (192) class_head -> . class_key IDENTIFIER base_spec
    (193) class_head -> . class_key IDENTIFIER
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (176) simple_type_name -> . CHAR
    (177) simple_type_name -> . SHORT
    (178) simple_type_name -> . INT
    (179) simple_type_name -> . LONG
    (180) simple_type_name -> . SIGNED
    (181) simple_type_name -> . UNSIGNED
    (182) simple_type_name -> . FLOAT
    (183) simple_type_name -> . DOUBLE
    (184) simple_type_name -> . VOID
    (185) simple_type_name -> . STRING
    (186) simple_type_name -> . AUTO
    (187) complex_type_specifier -> . class_key IDENTIFIER
    (188) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (189) complex_type_specifier -> . TYPE IDENTIFIER
    (190) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (203) class_key -> . CLASS
    (204) class_key -> . STRUCT
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 340
    CASE            shift and go to state 341
    DEFAULT         shift and go to state 342
    SEMICOLON       shift and go to state 344
    LCPAREN         shift and go to state 275
    IF              shift and go to state 345
    SWITCH          shift and go to state 346
    WHILE           shift and go to state 347
    DO              shift and go to state 348
    FOR             shift and go to state 349
    BREAK           shift and go to state 350
    CONTINUE        shift and go to state 351
    RETURN          shift and go to state 352
    GOTO            shift and go to state 353
    TRY             shift and go to state 355
    THROW           shift and go to state 216
    CONST           shift and go to state 16
    ASM             shift and go to state 18
    TEMPLATE        shift and go to state 20
    TYPEDEF         shift and go to state 21
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38
    THIS            shift and go to state 144
    LPAREN          shift and go to state 148
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    statement                      shift and go to state 414
    labeled_statement              shift and go to state 332
    expression_statement           shift and go to state 333
    compound_statement             shift and go to state 334
    selection_statement            shift and go to state 335
    iteration_statement            shift and go to state 336
    jump_statement                 shift and go to state 337
    declaration_statement          shift and go to state 338
    try_block                      shift and go to state 339
    expression                     shift and go to state 343
    declaration                    shift and go to state 354
    assignment_expression          shift and go to state 214
    throw_expression               shift and go to state 215
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    function_decl                  shift and go to state 12
    class_define_specifier         shift and go to state 13
    template_declaration           shift and go to state 14
    typedef_declarator             shift and go to state 15
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    type_specifier                 shift and go to state 17
    class_head                     shift and go to state 19
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    cast_expression                shift and go to state 126
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 24
    logical_AND_expression         shift and go to state 114
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    inclusive_OR_expression        shift and go to state 115
    literal                        shift and go to state 143
    exclusive_OR_expression        shift and go to state 116
    AND_expression                 shift and go to state 117
    equality_expression            shift and go to state 118
    relational_expression          shift and go to state 119
    shift_expression               shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 122
    pm_expression                  shift and go to state 125

state 402

    (254) labeled_statement -> DEFAULT COLON statement .

    RCPAREN         reduce using rule 254 (labeled_statement -> DEFAULT COLON statement .)
    IDENTIFIER      reduce using rule 254 (labeled_statement -> DEFAULT COLON statement .)
    CASE            reduce using rule 254 (labeled_statement -> DEFAULT COLON statement .)
    DEFAULT         reduce using rule 254 (labeled_statement -> DEFAULT COLON statement .)
    SEMICOLON       reduce using rule 254 (labeled_statement -> DEFAULT COLON statement .)
    LCPAREN         reduce using rule 254 (labeled_statement -> DEFAULT COLON statement .)
    IF              reduce using rule 254 (labeled_statement -> DEFAULT COLON statement .)
    SWITCH          reduce using rule 254 (labeled_statement -> DEFAULT COLON statement .)
    WHILE           reduce using rule 254 (labeled_statement -> DEFAULT COLON statement .)
    DO              reduce using rule 254 (labeled_statement -> DEFAULT COLON statement .)
    FOR             reduce using rule 254 (labeled_statement -> DEFAULT COLON statement .)
    BREAK           reduce using rule 254 (labeled_statement -> DEFAULT COLON statement .)
    CONTINUE        reduce using rule 254 (labeled_statement -> DEFAULT COLON statement .)
    RETURN          reduce using rule 254 (labeled_statement -> DEFAULT COLON statement .)
    GOTO            reduce using rule 254 (labeled_statement -> DEFAULT COLON statement .)
    TRY             reduce using rule 254 (labeled_statement -> DEFAULT COLON statement .)
    THROW           reduce using rule 254 (labeled_statement -> DEFAULT COLON statement .)
    CONST           reduce using rule 254 (labeled_statement -> DEFAULT COLON statement .)
    ASM             reduce using rule 254 (labeled_statement -> DEFAULT COLON statement .)
    TEMPLATE        reduce using rule 254 (labeled_statement -> DEFAULT COLON statement .)
    TYPEDEF         reduce using rule 254 (labeled_statement -> DEFAULT COLON statement .)
    DPLUSOP         reduce using rule 254 (labeled_statement -> DEFAULT COLON statement .)
    DMINUSOP        reduce using rule 254 (labeled_statement -> DEFAULT COLON statement .)
    SIZEOF          reduce using rule 254 (labeled_statement -> DEFAULT COLON statement .)
    PLUSOP          reduce using rule 254 (labeled_statement -> DEFAULT COLON statement .)
    MINUSOP         reduce using rule 254 (labeled_statement -> DEFAULT COLON statement .)
    NOTSYM          reduce using rule 254 (labeled_statement -> DEFAULT COLON statement .)
    BNOP            reduce using rule 254 (labeled_statement -> DEFAULT COLON statement .)
    MULTOP          reduce using rule 254 (labeled_statement -> DEFAULT COLON statement .)
    BANDOP          reduce using rule 254 (labeled_statement -> DEFAULT COLON statement .)
    NEW             reduce using rule 254 (labeled_statement -> DEFAULT COLON statement .)
    DELETE          reduce using rule 254 (labeled_statement -> DEFAULT COLON statement .)
    CHAR            reduce using rule 254 (labeled_statement -> DEFAULT COLON statement .)
    SHORT           reduce using rule 254 (labeled_statement -> DEFAULT COLON statement .)
    INT             reduce using rule 254 (labeled_statement -> DEFAULT COLON statement .)
    LONG            reduce using rule 254 (labeled_statement -> DEFAULT COLON statement .)
    SIGNED          reduce using rule 254 (labeled_statement -> DEFAULT COLON statement .)
    UNSIGNED        reduce using rule 254 (labeled_statement -> DEFAULT COLON statement .)
    FLOAT           reduce using rule 254 (labeled_statement -> DEFAULT COLON statement .)
    DOUBLE          reduce using rule 254 (labeled_statement -> DEFAULT COLON statement .)
    VOID            reduce using rule 254 (labeled_statement -> DEFAULT COLON statement .)
    STRING          reduce using rule 254 (labeled_statement -> DEFAULT COLON statement .)
    AUTO            reduce using rule 254 (labeled_statement -> DEFAULT COLON statement .)
    TYPE            reduce using rule 254 (labeled_statement -> DEFAULT COLON statement .)
    CLASS           reduce using rule 254 (labeled_statement -> DEFAULT COLON statement .)
    STRUCT          reduce using rule 254 (labeled_statement -> DEFAULT COLON statement .)
    THIS            reduce using rule 254 (labeled_statement -> DEFAULT COLON statement .)
    LPAREN          reduce using rule 254 (labeled_statement -> DEFAULT COLON statement .)
    DOUBLEBNOP      reduce using rule 254 (labeled_statement -> DEFAULT COLON statement .)
    STRING_L        reduce using rule 254 (labeled_statement -> DEFAULT COLON statement .)
    NUMBER          reduce using rule 254 (labeled_statement -> DEFAULT COLON statement .)
    SCHAR           reduce using rule 254 (labeled_statement -> DEFAULT COLON statement .)
    ELSE            reduce using rule 254 (labeled_statement -> DEFAULT COLON statement .)


state 403

    (248) selection_statement -> IF LPAREN expression . RPAREN statement
    (249) selection_statement -> IF LPAREN expression . RPAREN statement ELSE statement
    (48) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 415
    COMMA           shift and go to state 300


state 404

    (250) selection_statement -> SWITCH LPAREN expression . RPAREN statement
    (48) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 416
    COMMA           shift and go to state 300


state 405

    (255) iteration_statement -> WHILE LPAREN expression . RPAREN statement
    (48) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 417
    COMMA           shift and go to state 300


state 406

    (256) iteration_statement -> DO statement WHILE . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 418


state 407

    (257) iteration_statement -> FOR LPAREN for_init_statement . expression SEMICOLON expression RPAREN compound_statement
    (258) iteration_statement -> FOR LPAREN for_init_statement . SEMICOLON expression RPAREN compound_statement
    (259) iteration_statement -> FOR LPAREN for_init_statement . expression SEMICOLON RPAREN compound_statement
    (260) iteration_statement -> FOR LPAREN for_init_statement . SEMICOLON RPAREN statement
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMICOLON       shift and go to state 420
    THROW           shift and go to state 216
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    THIS            shift and go to state 144
    LPAREN          shift and go to state 148
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    expression                     shift and go to state 419
    assignment_expression          shift and go to state 214
    throw_expression               shift and go to state 215
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    cast_expression                shift and go to state 126
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    logical_AND_expression         shift and go to state 114
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    inclusive_OR_expression        shift and go to state 115
    literal                        shift and go to state 143
    exclusive_OR_expression        shift and go to state 116
    AND_expression                 shift and go to state 117
    equality_expression            shift and go to state 118
    relational_expression          shift and go to state 119
    shift_expression               shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 122
    pm_expression                  shift and go to state 125

state 408

    (261) for_init_statement -> expression_statement .

    SEMICOLON       reduce using rule 261 (for_init_statement -> expression_statement .)
    THROW           reduce using rule 261 (for_init_statement -> expression_statement .)
    DPLUSOP         reduce using rule 261 (for_init_statement -> expression_statement .)
    DMINUSOP        reduce using rule 261 (for_init_statement -> expression_statement .)
    SIZEOF          reduce using rule 261 (for_init_statement -> expression_statement .)
    PLUSOP          reduce using rule 261 (for_init_statement -> expression_statement .)
    MINUSOP         reduce using rule 261 (for_init_statement -> expression_statement .)
    NOTSYM          reduce using rule 261 (for_init_statement -> expression_statement .)
    BNOP            reduce using rule 261 (for_init_statement -> expression_statement .)
    MULTOP          reduce using rule 261 (for_init_statement -> expression_statement .)
    BANDOP          reduce using rule 261 (for_init_statement -> expression_statement .)
    NEW             reduce using rule 261 (for_init_statement -> expression_statement .)
    DELETE          reduce using rule 261 (for_init_statement -> expression_statement .)
    THIS            reduce using rule 261 (for_init_statement -> expression_statement .)
    LPAREN          reduce using rule 261 (for_init_statement -> expression_statement .)
    IDENTIFIER      reduce using rule 261 (for_init_statement -> expression_statement .)
    DOUBLEBNOP      reduce using rule 261 (for_init_statement -> expression_statement .)
    STRING_L        reduce using rule 261 (for_init_statement -> expression_statement .)
    NUMBER          reduce using rule 261 (for_init_statement -> expression_statement .)
    SCHAR           reduce using rule 261 (for_init_statement -> expression_statement .)


state 409

    (262) for_init_statement -> declaration_statement .

    SEMICOLON       reduce using rule 262 (for_init_statement -> declaration_statement .)
    THROW           reduce using rule 262 (for_init_statement -> declaration_statement .)
    DPLUSOP         reduce using rule 262 (for_init_statement -> declaration_statement .)
    DMINUSOP        reduce using rule 262 (for_init_statement -> declaration_statement .)
    SIZEOF          reduce using rule 262 (for_init_statement -> declaration_statement .)
    PLUSOP          reduce using rule 262 (for_init_statement -> declaration_statement .)
    MINUSOP         reduce using rule 262 (for_init_statement -> declaration_statement .)
    NOTSYM          reduce using rule 262 (for_init_statement -> declaration_statement .)
    BNOP            reduce using rule 262 (for_init_statement -> declaration_statement .)
    MULTOP          reduce using rule 262 (for_init_statement -> declaration_statement .)
    BANDOP          reduce using rule 262 (for_init_statement -> declaration_statement .)
    NEW             reduce using rule 262 (for_init_statement -> declaration_statement .)
    DELETE          reduce using rule 262 (for_init_statement -> declaration_statement .)
    THIS            reduce using rule 262 (for_init_statement -> declaration_statement .)
    LPAREN          reduce using rule 262 (for_init_statement -> declaration_statement .)
    IDENTIFIER      reduce using rule 262 (for_init_statement -> declaration_statement .)
    DOUBLEBNOP      reduce using rule 262 (for_init_statement -> declaration_statement .)
    STRING_L        reduce using rule 262 (for_init_statement -> declaration_statement .)
    NUMBER          reduce using rule 262 (for_init_statement -> declaration_statement .)
    SCHAR           reduce using rule 262 (for_init_statement -> declaration_statement .)


state 410

    (245) jump_statement -> RETURN expression SEMICOLON .

    RCPAREN         reduce using rule 245 (jump_statement -> RETURN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 245 (jump_statement -> RETURN expression SEMICOLON .)
    CASE            reduce using rule 245 (jump_statement -> RETURN expression SEMICOLON .)
    DEFAULT         reduce using rule 245 (jump_statement -> RETURN expression SEMICOLON .)
    SEMICOLON       reduce using rule 245 (jump_statement -> RETURN expression SEMICOLON .)
    LCPAREN         reduce using rule 245 (jump_statement -> RETURN expression SEMICOLON .)
    IF              reduce using rule 245 (jump_statement -> RETURN expression SEMICOLON .)
    SWITCH          reduce using rule 245 (jump_statement -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 245 (jump_statement -> RETURN expression SEMICOLON .)
    DO              reduce using rule 245 (jump_statement -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 245 (jump_statement -> RETURN expression SEMICOLON .)
    BREAK           reduce using rule 245 (jump_statement -> RETURN expression SEMICOLON .)
    CONTINUE        reduce using rule 245 (jump_statement -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 245 (jump_statement -> RETURN expression SEMICOLON .)
    GOTO            reduce using rule 245 (jump_statement -> RETURN expression SEMICOLON .)
    TRY             reduce using rule 245 (jump_statement -> RETURN expression SEMICOLON .)
    THROW           reduce using rule 245 (jump_statement -> RETURN expression SEMICOLON .)
    CONST           reduce using rule 245 (jump_statement -> RETURN expression SEMICOLON .)
    ASM             reduce using rule 245 (jump_statement -> RETURN expression SEMICOLON .)
    TEMPLATE        reduce using rule 245 (jump_statement -> RETURN expression SEMICOLON .)
    TYPEDEF         reduce using rule 245 (jump_statement -> RETURN expression SEMICOLON .)
    DPLUSOP         reduce using rule 245 (jump_statement -> RETURN expression SEMICOLON .)
    DMINUSOP        reduce using rule 245 (jump_statement -> RETURN expression SEMICOLON .)
    SIZEOF          reduce using rule 245 (jump_statement -> RETURN expression SEMICOLON .)
    PLUSOP          reduce using rule 245 (jump_statement -> RETURN expression SEMICOLON .)
    MINUSOP         reduce using rule 245 (jump_statement -> RETURN expression SEMICOLON .)
    NOTSYM          reduce using rule 245 (jump_statement -> RETURN expression SEMICOLON .)
    BNOP            reduce using rule 245 (jump_statement -> RETURN expression SEMICOLON .)
    MULTOP          reduce using rule 245 (jump_statement -> RETURN expression SEMICOLON .)
    BANDOP          reduce using rule 245 (jump_statement -> RETURN expression SEMICOLON .)
    NEW             reduce using rule 245 (jump_statement -> RETURN expression SEMICOLON .)
    DELETE          reduce using rule 245 (jump_statement -> RETURN expression SEMICOLON .)
    CHAR            reduce using rule 245 (jump_statement -> RETURN expression SEMICOLON .)
    SHORT           reduce using rule 245 (jump_statement -> RETURN expression SEMICOLON .)
    INT             reduce using rule 245 (jump_statement -> RETURN expression SEMICOLON .)
    LONG            reduce using rule 245 (jump_statement -> RETURN expression SEMICOLON .)
    SIGNED          reduce using rule 245 (jump_statement -> RETURN expression SEMICOLON .)
    UNSIGNED        reduce using rule 245 (jump_statement -> RETURN expression SEMICOLON .)
    FLOAT           reduce using rule 245 (jump_statement -> RETURN expression SEMICOLON .)
    DOUBLE          reduce using rule 245 (jump_statement -> RETURN expression SEMICOLON .)
    VOID            reduce using rule 245 (jump_statement -> RETURN expression SEMICOLON .)
    STRING          reduce using rule 245 (jump_statement -> RETURN expression SEMICOLON .)
    AUTO            reduce using rule 245 (jump_statement -> RETURN expression SEMICOLON .)
    TYPE            reduce using rule 245 (jump_statement -> RETURN expression SEMICOLON .)
    CLASS           reduce using rule 245 (jump_statement -> RETURN expression SEMICOLON .)
    STRUCT          reduce using rule 245 (jump_statement -> RETURN expression SEMICOLON .)
    THIS            reduce using rule 245 (jump_statement -> RETURN expression SEMICOLON .)
    LPAREN          reduce using rule 245 (jump_statement -> RETURN expression SEMICOLON .)
    DOUBLEBNOP      reduce using rule 245 (jump_statement -> RETURN expression SEMICOLON .)
    STRING_L        reduce using rule 245 (jump_statement -> RETURN expression SEMICOLON .)
    NUMBER          reduce using rule 245 (jump_statement -> RETURN expression SEMICOLON .)
    SCHAR           reduce using rule 245 (jump_statement -> RETURN expression SEMICOLON .)
    ELSE            reduce using rule 245 (jump_statement -> RETURN expression SEMICOLON .)


state 411

    (247) jump_statement -> GOTO IDENTIFIER SEMICOLON .

    RCPAREN         reduce using rule 247 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 247 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    CASE            reduce using rule 247 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DEFAULT         reduce using rule 247 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SEMICOLON       reduce using rule 247 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    LCPAREN         reduce using rule 247 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    IF              reduce using rule 247 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SWITCH          reduce using rule 247 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 247 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DO              reduce using rule 247 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    FOR             reduce using rule 247 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    BREAK           reduce using rule 247 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    CONTINUE        reduce using rule 247 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    RETURN          reduce using rule 247 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    GOTO            reduce using rule 247 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    TRY             reduce using rule 247 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    THROW           reduce using rule 247 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    CONST           reduce using rule 247 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    ASM             reduce using rule 247 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    TEMPLATE        reduce using rule 247 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    TYPEDEF         reduce using rule 247 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DPLUSOP         reduce using rule 247 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DMINUSOP        reduce using rule 247 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SIZEOF          reduce using rule 247 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    PLUSOP          reduce using rule 247 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    MINUSOP         reduce using rule 247 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    NOTSYM          reduce using rule 247 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    BNOP            reduce using rule 247 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    MULTOP          reduce using rule 247 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    BANDOP          reduce using rule 247 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    NEW             reduce using rule 247 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DELETE          reduce using rule 247 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    CHAR            reduce using rule 247 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SHORT           reduce using rule 247 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    INT             reduce using rule 247 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    LONG            reduce using rule 247 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SIGNED          reduce using rule 247 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    UNSIGNED        reduce using rule 247 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    FLOAT           reduce using rule 247 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DOUBLE          reduce using rule 247 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    VOID            reduce using rule 247 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    STRING          reduce using rule 247 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    AUTO            reduce using rule 247 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    TYPE            reduce using rule 247 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    CLASS           reduce using rule 247 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    STRUCT          reduce using rule 247 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    THIS            reduce using rule 247 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    LPAREN          reduce using rule 247 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DOUBLEBNOP      reduce using rule 247 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    STRING_L        reduce using rule 247 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    NUMBER          reduce using rule 247 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SCHAR           reduce using rule 247 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    ELSE            reduce using rule 247 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)


state 412

    (251) try_block -> TRY compound_statement CATCH . compound_statement
    (231) compound_statement -> . LCPAREN statement_list RCPAREN
    (232) compound_statement -> . LCPAREN RCPAREN

    LCPAREN         shift and go to state 275

    compound_statement             shift and go to state 421

state 413

    (81) new_declarator -> new_declarator LSPAREN expression RSPAREN .

    MULTOP          reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    LSPAREN         reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    LPAREN          reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    DOTSTAR         reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    ARROWSTAR       reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    DIVOP           reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    MODOP           reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    PLUSOP          reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    MINUSOP         reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    LSHIFT          reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    RSHIFT          reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    LTCOMP          reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    GTCOMP          reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    LTECOMP         reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    GTECOMP         reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    EQCOMP          reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    NEQCOMP         reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    BANDOP          reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    XOROP           reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    OROP            reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    ANDOP           reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    QUESMARK        reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    RSPAREN         reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    EQUAL           reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    MULTEQOP        reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    DIVEQOP         reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    MODEQOP         reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    PLUSEQOP        reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    MINUSEQOP       reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    LSHIFTEQOP      reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    RSHIFTEQOP      reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    BANDEQOP        reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    BOREQOP         reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    RPAREN          reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    COMMA           reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    SEMICOLON       reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    RCPAREN         reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    COLON           reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    RTEMPLATE       reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)


state 414

    (253) labeled_statement -> CASE constant_expression COLON statement .

    RCPAREN         reduce using rule 253 (labeled_statement -> CASE constant_expression COLON statement .)
    IDENTIFIER      reduce using rule 253 (labeled_statement -> CASE constant_expression COLON statement .)
    CASE            reduce using rule 253 (labeled_statement -> CASE constant_expression COLON statement .)
    DEFAULT         reduce using rule 253 (labeled_statement -> CASE constant_expression COLON statement .)
    SEMICOLON       reduce using rule 253 (labeled_statement -> CASE constant_expression COLON statement .)
    LCPAREN         reduce using rule 253 (labeled_statement -> CASE constant_expression COLON statement .)
    IF              reduce using rule 253 (labeled_statement -> CASE constant_expression COLON statement .)
    SWITCH          reduce using rule 253 (labeled_statement -> CASE constant_expression COLON statement .)
    WHILE           reduce using rule 253 (labeled_statement -> CASE constant_expression COLON statement .)
    DO              reduce using rule 253 (labeled_statement -> CASE constant_expression COLON statement .)
    FOR             reduce using rule 253 (labeled_statement -> CASE constant_expression COLON statement .)
    BREAK           reduce using rule 253 (labeled_statement -> CASE constant_expression COLON statement .)
    CONTINUE        reduce using rule 253 (labeled_statement -> CASE constant_expression COLON statement .)
    RETURN          reduce using rule 253 (labeled_statement -> CASE constant_expression COLON statement .)
    GOTO            reduce using rule 253 (labeled_statement -> CASE constant_expression COLON statement .)
    TRY             reduce using rule 253 (labeled_statement -> CASE constant_expression COLON statement .)
    THROW           reduce using rule 253 (labeled_statement -> CASE constant_expression COLON statement .)
    CONST           reduce using rule 253 (labeled_statement -> CASE constant_expression COLON statement .)
    ASM             reduce using rule 253 (labeled_statement -> CASE constant_expression COLON statement .)
    TEMPLATE        reduce using rule 253 (labeled_statement -> CASE constant_expression COLON statement .)
    TYPEDEF         reduce using rule 253 (labeled_statement -> CASE constant_expression COLON statement .)
    DPLUSOP         reduce using rule 253 (labeled_statement -> CASE constant_expression COLON statement .)
    DMINUSOP        reduce using rule 253 (labeled_statement -> CASE constant_expression COLON statement .)
    SIZEOF          reduce using rule 253 (labeled_statement -> CASE constant_expression COLON statement .)
    PLUSOP          reduce using rule 253 (labeled_statement -> CASE constant_expression COLON statement .)
    MINUSOP         reduce using rule 253 (labeled_statement -> CASE constant_expression COLON statement .)
    NOTSYM          reduce using rule 253 (labeled_statement -> CASE constant_expression COLON statement .)
    BNOP            reduce using rule 253 (labeled_statement -> CASE constant_expression COLON statement .)
    MULTOP          reduce using rule 253 (labeled_statement -> CASE constant_expression COLON statement .)
    BANDOP          reduce using rule 253 (labeled_statement -> CASE constant_expression COLON statement .)
    NEW             reduce using rule 253 (labeled_statement -> CASE constant_expression COLON statement .)
    DELETE          reduce using rule 253 (labeled_statement -> CASE constant_expression COLON statement .)
    CHAR            reduce using rule 253 (labeled_statement -> CASE constant_expression COLON statement .)
    SHORT           reduce using rule 253 (labeled_statement -> CASE constant_expression COLON statement .)
    INT             reduce using rule 253 (labeled_statement -> CASE constant_expression COLON statement .)
    LONG            reduce using rule 253 (labeled_statement -> CASE constant_expression COLON statement .)
    SIGNED          reduce using rule 253 (labeled_statement -> CASE constant_expression COLON statement .)
    UNSIGNED        reduce using rule 253 (labeled_statement -> CASE constant_expression COLON statement .)
    FLOAT           reduce using rule 253 (labeled_statement -> CASE constant_expression COLON statement .)
    DOUBLE          reduce using rule 253 (labeled_statement -> CASE constant_expression COLON statement .)
    VOID            reduce using rule 253 (labeled_statement -> CASE constant_expression COLON statement .)
    STRING          reduce using rule 253 (labeled_statement -> CASE constant_expression COLON statement .)
    AUTO            reduce using rule 253 (labeled_statement -> CASE constant_expression COLON statement .)
    TYPE            reduce using rule 253 (labeled_statement -> CASE constant_expression COLON statement .)
    CLASS           reduce using rule 253 (labeled_statement -> CASE constant_expression COLON statement .)
    STRUCT          reduce using rule 253 (labeled_statement -> CASE constant_expression COLON statement .)
    THIS            reduce using rule 253 (labeled_statement -> CASE constant_expression COLON statement .)
    LPAREN          reduce using rule 253 (labeled_statement -> CASE constant_expression COLON statement .)
    DOUBLEBNOP      reduce using rule 253 (labeled_statement -> CASE constant_expression COLON statement .)
    STRING_L        reduce using rule 253 (labeled_statement -> CASE constant_expression COLON statement .)
    NUMBER          reduce using rule 253 (labeled_statement -> CASE constant_expression COLON statement .)
    SCHAR           reduce using rule 253 (labeled_statement -> CASE constant_expression COLON statement .)
    ELSE            reduce using rule 253 (labeled_statement -> CASE constant_expression COLON statement .)


state 415

    (248) selection_statement -> IF LPAREN expression RPAREN . statement
    (249) selection_statement -> IF LPAREN expression RPAREN . statement ELSE statement
    (235) statement -> . labeled_statement
    (236) statement -> . expression_statement
    (237) statement -> . compound_statement
    (238) statement -> . selection_statement
    (239) statement -> . iteration_statement
    (240) statement -> . jump_statement
    (241) statement -> . declaration_statement
    (242) statement -> . try_block
    (252) labeled_statement -> . IDENTIFIER COLON statement
    (253) labeled_statement -> . CASE constant_expression COLON statement
    (254) labeled_statement -> . DEFAULT COLON statement
    (263) expression_statement -> . expression SEMICOLON
    (264) expression_statement -> . SEMICOLON
    (231) compound_statement -> . LCPAREN statement_list RCPAREN
    (232) compound_statement -> . LCPAREN RCPAREN
    (248) selection_statement -> . IF LPAREN expression RPAREN statement
    (249) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (250) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (255) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (256) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (257) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement
    (258) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement
    (259) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement
    (260) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (243) jump_statement -> . BREAK SEMICOLON
    (244) jump_statement -> . CONTINUE SEMICOLON
    (245) jump_statement -> . RETURN expression SEMICOLON
    (246) jump_statement -> . RETURN SEMICOLON
    (247) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (265) declaration_statement -> . declaration
    (251) try_block -> . TRY compound_statement CATCH compound_statement
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (266) declaration -> . type_specifier_ declarator_list SEMICOLON
    (267) declaration -> . asm_declaration
    (268) declaration -> . function_definition
    (269) declaration -> . function_decl
    (270) declaration -> . class_define_specifier SEMICOLON
    (271) declaration -> . template_declaration
    (272) declaration -> . typedef_declarator
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (170) type_specifier_ -> . CONST type_specifier
    (171) type_specifier_ -> . type_specifier
    (288) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (227) function_definition -> . type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope
    (228) function_decl -> . type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope
    (205) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (206) class_define_specifier -> . class_head LCPAREN RCPAREN
    (273) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (172) typedef_declarator -> . TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON
    (173) typedef_declarator -> . TYPEDEF type_specifier_ IDENTIFIER SEMICOLON
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (174) type_specifier -> . simple_type_name
    (175) type_specifier -> . complex_type_specifier
    (192) class_head -> . class_key IDENTIFIER base_spec
    (193) class_head -> . class_key IDENTIFIER
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (176) simple_type_name -> . CHAR
    (177) simple_type_name -> . SHORT
    (178) simple_type_name -> . INT
    (179) simple_type_name -> . LONG
    (180) simple_type_name -> . SIGNED
    (181) simple_type_name -> . UNSIGNED
    (182) simple_type_name -> . FLOAT
    (183) simple_type_name -> . DOUBLE
    (184) simple_type_name -> . VOID
    (185) simple_type_name -> . STRING
    (186) simple_type_name -> . AUTO
    (187) complex_type_specifier -> . class_key IDENTIFIER
    (188) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (189) complex_type_specifier -> . TYPE IDENTIFIER
    (190) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (203) class_key -> . CLASS
    (204) class_key -> . STRUCT
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 340
    CASE            shift and go to state 341
    DEFAULT         shift and go to state 342
    SEMICOLON       shift and go to state 344
    LCPAREN         shift and go to state 275
    IF              shift and go to state 345
    SWITCH          shift and go to state 346
    WHILE           shift and go to state 347
    DO              shift and go to state 348
    FOR             shift and go to state 349
    BREAK           shift and go to state 350
    CONTINUE        shift and go to state 351
    RETURN          shift and go to state 352
    GOTO            shift and go to state 353
    TRY             shift and go to state 355
    THROW           shift and go to state 216
    CONST           shift and go to state 16
    ASM             shift and go to state 18
    TEMPLATE        shift and go to state 20
    TYPEDEF         shift and go to state 21
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38
    THIS            shift and go to state 144
    LPAREN          shift and go to state 148
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    expression                     shift and go to state 343
    statement                      shift and go to state 422
    labeled_statement              shift and go to state 332
    expression_statement           shift and go to state 333
    compound_statement             shift and go to state 334
    selection_statement            shift and go to state 335
    iteration_statement            shift and go to state 336
    jump_statement                 shift and go to state 337
    declaration_statement          shift and go to state 338
    try_block                      shift and go to state 339
    declaration                    shift and go to state 354
    assignment_expression          shift and go to state 214
    throw_expression               shift and go to state 215
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    function_decl                  shift and go to state 12
    class_define_specifier         shift and go to state 13
    template_declaration           shift and go to state 14
    typedef_declarator             shift and go to state 15
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    type_specifier                 shift and go to state 17
    class_head                     shift and go to state 19
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    cast_expression                shift and go to state 126
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 24
    logical_AND_expression         shift and go to state 114
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    inclusive_OR_expression        shift and go to state 115
    literal                        shift and go to state 143
    exclusive_OR_expression        shift and go to state 116
    AND_expression                 shift and go to state 117
    equality_expression            shift and go to state 118
    relational_expression          shift and go to state 119
    shift_expression               shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 122
    pm_expression                  shift and go to state 125

state 416

    (250) selection_statement -> SWITCH LPAREN expression RPAREN . statement
    (235) statement -> . labeled_statement
    (236) statement -> . expression_statement
    (237) statement -> . compound_statement
    (238) statement -> . selection_statement
    (239) statement -> . iteration_statement
    (240) statement -> . jump_statement
    (241) statement -> . declaration_statement
    (242) statement -> . try_block
    (252) labeled_statement -> . IDENTIFIER COLON statement
    (253) labeled_statement -> . CASE constant_expression COLON statement
    (254) labeled_statement -> . DEFAULT COLON statement
    (263) expression_statement -> . expression SEMICOLON
    (264) expression_statement -> . SEMICOLON
    (231) compound_statement -> . LCPAREN statement_list RCPAREN
    (232) compound_statement -> . LCPAREN RCPAREN
    (248) selection_statement -> . IF LPAREN expression RPAREN statement
    (249) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (250) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (255) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (256) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (257) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement
    (258) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement
    (259) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement
    (260) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (243) jump_statement -> . BREAK SEMICOLON
    (244) jump_statement -> . CONTINUE SEMICOLON
    (245) jump_statement -> . RETURN expression SEMICOLON
    (246) jump_statement -> . RETURN SEMICOLON
    (247) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (265) declaration_statement -> . declaration
    (251) try_block -> . TRY compound_statement CATCH compound_statement
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (266) declaration -> . type_specifier_ declarator_list SEMICOLON
    (267) declaration -> . asm_declaration
    (268) declaration -> . function_definition
    (269) declaration -> . function_decl
    (270) declaration -> . class_define_specifier SEMICOLON
    (271) declaration -> . template_declaration
    (272) declaration -> . typedef_declarator
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (170) type_specifier_ -> . CONST type_specifier
    (171) type_specifier_ -> . type_specifier
    (288) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (227) function_definition -> . type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope
    (228) function_decl -> . type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope
    (205) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (206) class_define_specifier -> . class_head LCPAREN RCPAREN
    (273) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (172) typedef_declarator -> . TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON
    (173) typedef_declarator -> . TYPEDEF type_specifier_ IDENTIFIER SEMICOLON
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (174) type_specifier -> . simple_type_name
    (175) type_specifier -> . complex_type_specifier
    (192) class_head -> . class_key IDENTIFIER base_spec
    (193) class_head -> . class_key IDENTIFIER
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (176) simple_type_name -> . CHAR
    (177) simple_type_name -> . SHORT
    (178) simple_type_name -> . INT
    (179) simple_type_name -> . LONG
    (180) simple_type_name -> . SIGNED
    (181) simple_type_name -> . UNSIGNED
    (182) simple_type_name -> . FLOAT
    (183) simple_type_name -> . DOUBLE
    (184) simple_type_name -> . VOID
    (185) simple_type_name -> . STRING
    (186) simple_type_name -> . AUTO
    (187) complex_type_specifier -> . class_key IDENTIFIER
    (188) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (189) complex_type_specifier -> . TYPE IDENTIFIER
    (190) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (203) class_key -> . CLASS
    (204) class_key -> . STRUCT
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 340
    CASE            shift and go to state 341
    DEFAULT         shift and go to state 342
    SEMICOLON       shift and go to state 344
    LCPAREN         shift and go to state 275
    IF              shift and go to state 345
    SWITCH          shift and go to state 346
    WHILE           shift and go to state 347
    DO              shift and go to state 348
    FOR             shift and go to state 349
    BREAK           shift and go to state 350
    CONTINUE        shift and go to state 351
    RETURN          shift and go to state 352
    GOTO            shift and go to state 353
    TRY             shift and go to state 355
    THROW           shift and go to state 216
    CONST           shift and go to state 16
    ASM             shift and go to state 18
    TEMPLATE        shift and go to state 20
    TYPEDEF         shift and go to state 21
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38
    THIS            shift and go to state 144
    LPAREN          shift and go to state 148
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    expression                     shift and go to state 343
    statement                      shift and go to state 423
    labeled_statement              shift and go to state 332
    expression_statement           shift and go to state 333
    compound_statement             shift and go to state 334
    selection_statement            shift and go to state 335
    iteration_statement            shift and go to state 336
    jump_statement                 shift and go to state 337
    declaration_statement          shift and go to state 338
    try_block                      shift and go to state 339
    declaration                    shift and go to state 354
    assignment_expression          shift and go to state 214
    throw_expression               shift and go to state 215
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    function_decl                  shift and go to state 12
    class_define_specifier         shift and go to state 13
    template_declaration           shift and go to state 14
    typedef_declarator             shift and go to state 15
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    type_specifier                 shift and go to state 17
    class_head                     shift and go to state 19
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    cast_expression                shift and go to state 126
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 24
    logical_AND_expression         shift and go to state 114
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    inclusive_OR_expression        shift and go to state 115
    literal                        shift and go to state 143
    exclusive_OR_expression        shift and go to state 116
    AND_expression                 shift and go to state 117
    equality_expression            shift and go to state 118
    relational_expression          shift and go to state 119
    shift_expression               shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 122
    pm_expression                  shift and go to state 125

state 417

    (255) iteration_statement -> WHILE LPAREN expression RPAREN . statement
    (235) statement -> . labeled_statement
    (236) statement -> . expression_statement
    (237) statement -> . compound_statement
    (238) statement -> . selection_statement
    (239) statement -> . iteration_statement
    (240) statement -> . jump_statement
    (241) statement -> . declaration_statement
    (242) statement -> . try_block
    (252) labeled_statement -> . IDENTIFIER COLON statement
    (253) labeled_statement -> . CASE constant_expression COLON statement
    (254) labeled_statement -> . DEFAULT COLON statement
    (263) expression_statement -> . expression SEMICOLON
    (264) expression_statement -> . SEMICOLON
    (231) compound_statement -> . LCPAREN statement_list RCPAREN
    (232) compound_statement -> . LCPAREN RCPAREN
    (248) selection_statement -> . IF LPAREN expression RPAREN statement
    (249) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (250) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (255) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (256) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (257) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement
    (258) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement
    (259) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement
    (260) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (243) jump_statement -> . BREAK SEMICOLON
    (244) jump_statement -> . CONTINUE SEMICOLON
    (245) jump_statement -> . RETURN expression SEMICOLON
    (246) jump_statement -> . RETURN SEMICOLON
    (247) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (265) declaration_statement -> . declaration
    (251) try_block -> . TRY compound_statement CATCH compound_statement
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (266) declaration -> . type_specifier_ declarator_list SEMICOLON
    (267) declaration -> . asm_declaration
    (268) declaration -> . function_definition
    (269) declaration -> . function_decl
    (270) declaration -> . class_define_specifier SEMICOLON
    (271) declaration -> . template_declaration
    (272) declaration -> . typedef_declarator
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (170) type_specifier_ -> . CONST type_specifier
    (171) type_specifier_ -> . type_specifier
    (288) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (227) function_definition -> . type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope
    (228) function_decl -> . type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope
    (205) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (206) class_define_specifier -> . class_head LCPAREN RCPAREN
    (273) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (172) typedef_declarator -> . TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON
    (173) typedef_declarator -> . TYPEDEF type_specifier_ IDENTIFIER SEMICOLON
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (174) type_specifier -> . simple_type_name
    (175) type_specifier -> . complex_type_specifier
    (192) class_head -> . class_key IDENTIFIER base_spec
    (193) class_head -> . class_key IDENTIFIER
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (176) simple_type_name -> . CHAR
    (177) simple_type_name -> . SHORT
    (178) simple_type_name -> . INT
    (179) simple_type_name -> . LONG
    (180) simple_type_name -> . SIGNED
    (181) simple_type_name -> . UNSIGNED
    (182) simple_type_name -> . FLOAT
    (183) simple_type_name -> . DOUBLE
    (184) simple_type_name -> . VOID
    (185) simple_type_name -> . STRING
    (186) simple_type_name -> . AUTO
    (187) complex_type_specifier -> . class_key IDENTIFIER
    (188) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (189) complex_type_specifier -> . TYPE IDENTIFIER
    (190) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (203) class_key -> . CLASS
    (204) class_key -> . STRUCT
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 340
    CASE            shift and go to state 341
    DEFAULT         shift and go to state 342
    SEMICOLON       shift and go to state 344
    LCPAREN         shift and go to state 275
    IF              shift and go to state 345
    SWITCH          shift and go to state 346
    WHILE           shift and go to state 347
    DO              shift and go to state 348
    FOR             shift and go to state 349
    BREAK           shift and go to state 350
    CONTINUE        shift and go to state 351
    RETURN          shift and go to state 352
    GOTO            shift and go to state 353
    TRY             shift and go to state 355
    THROW           shift and go to state 216
    CONST           shift and go to state 16
    ASM             shift and go to state 18
    TEMPLATE        shift and go to state 20
    TYPEDEF         shift and go to state 21
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38
    THIS            shift and go to state 144
    LPAREN          shift and go to state 148
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    expression                     shift and go to state 343
    statement                      shift and go to state 424
    labeled_statement              shift and go to state 332
    expression_statement           shift and go to state 333
    compound_statement             shift and go to state 334
    selection_statement            shift and go to state 335
    iteration_statement            shift and go to state 336
    jump_statement                 shift and go to state 337
    declaration_statement          shift and go to state 338
    try_block                      shift and go to state 339
    declaration                    shift and go to state 354
    assignment_expression          shift and go to state 214
    throw_expression               shift and go to state 215
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    function_decl                  shift and go to state 12
    class_define_specifier         shift and go to state 13
    template_declaration           shift and go to state 14
    typedef_declarator             shift and go to state 15
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    type_specifier                 shift and go to state 17
    class_head                     shift and go to state 19
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    cast_expression                shift and go to state 126
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 24
    logical_AND_expression         shift and go to state 114
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    inclusive_OR_expression        shift and go to state 115
    literal                        shift and go to state 143
    exclusive_OR_expression        shift and go to state 116
    AND_expression                 shift and go to state 117
    equality_expression            shift and go to state 118
    relational_expression          shift and go to state 119
    shift_expression               shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 122
    pm_expression                  shift and go to state 125

state 418

    (256) iteration_statement -> DO statement WHILE LPAREN . expression RPAREN SEMICOLON
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    THROW           shift and go to state 216
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    THIS            shift and go to state 144
    LPAREN          shift and go to state 148
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    expression                     shift and go to state 425
    assignment_expression          shift and go to state 214
    throw_expression               shift and go to state 215
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    cast_expression                shift and go to state 126
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    logical_AND_expression         shift and go to state 114
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    inclusive_OR_expression        shift and go to state 115
    literal                        shift and go to state 143
    exclusive_OR_expression        shift and go to state 116
    AND_expression                 shift and go to state 117
    equality_expression            shift and go to state 118
    relational_expression          shift and go to state 119
    shift_expression               shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 122
    pm_expression                  shift and go to state 125

state 419

    (257) iteration_statement -> FOR LPAREN for_init_statement expression . SEMICOLON expression RPAREN compound_statement
    (259) iteration_statement -> FOR LPAREN for_init_statement expression . SEMICOLON RPAREN compound_statement
    (48) expression -> expression . COMMA assignment_expression

    SEMICOLON       shift and go to state 426
    COMMA           shift and go to state 300


state 420

    (258) iteration_statement -> FOR LPAREN for_init_statement SEMICOLON . expression RPAREN compound_statement
    (260) iteration_statement -> FOR LPAREN for_init_statement SEMICOLON . RPAREN statement
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 428
    THROW           shift and go to state 216
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    THIS            shift and go to state 144
    LPAREN          shift and go to state 148
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    expression                     shift and go to state 427
    assignment_expression          shift and go to state 214
    throw_expression               shift and go to state 215
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    cast_expression                shift and go to state 126
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    logical_AND_expression         shift and go to state 114
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    inclusive_OR_expression        shift and go to state 115
    literal                        shift and go to state 143
    exclusive_OR_expression        shift and go to state 116
    AND_expression                 shift and go to state 117
    equality_expression            shift and go to state 118
    relational_expression          shift and go to state 119
    shift_expression               shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 122
    pm_expression                  shift and go to state 125

state 421

    (251) try_block -> TRY compound_statement CATCH compound_statement .

    RCPAREN         reduce using rule 251 (try_block -> TRY compound_statement CATCH compound_statement .)
    IDENTIFIER      reduce using rule 251 (try_block -> TRY compound_statement CATCH compound_statement .)
    CASE            reduce using rule 251 (try_block -> TRY compound_statement CATCH compound_statement .)
    DEFAULT         reduce using rule 251 (try_block -> TRY compound_statement CATCH compound_statement .)
    SEMICOLON       reduce using rule 251 (try_block -> TRY compound_statement CATCH compound_statement .)
    LCPAREN         reduce using rule 251 (try_block -> TRY compound_statement CATCH compound_statement .)
    IF              reduce using rule 251 (try_block -> TRY compound_statement CATCH compound_statement .)
    SWITCH          reduce using rule 251 (try_block -> TRY compound_statement CATCH compound_statement .)
    WHILE           reduce using rule 251 (try_block -> TRY compound_statement CATCH compound_statement .)
    DO              reduce using rule 251 (try_block -> TRY compound_statement CATCH compound_statement .)
    FOR             reduce using rule 251 (try_block -> TRY compound_statement CATCH compound_statement .)
    BREAK           reduce using rule 251 (try_block -> TRY compound_statement CATCH compound_statement .)
    CONTINUE        reduce using rule 251 (try_block -> TRY compound_statement CATCH compound_statement .)
    RETURN          reduce using rule 251 (try_block -> TRY compound_statement CATCH compound_statement .)
    GOTO            reduce using rule 251 (try_block -> TRY compound_statement CATCH compound_statement .)
    TRY             reduce using rule 251 (try_block -> TRY compound_statement CATCH compound_statement .)
    THROW           reduce using rule 251 (try_block -> TRY compound_statement CATCH compound_statement .)
    CONST           reduce using rule 251 (try_block -> TRY compound_statement CATCH compound_statement .)
    ASM             reduce using rule 251 (try_block -> TRY compound_statement CATCH compound_statement .)
    TEMPLATE        reduce using rule 251 (try_block -> TRY compound_statement CATCH compound_statement .)
    TYPEDEF         reduce using rule 251 (try_block -> TRY compound_statement CATCH compound_statement .)
    DPLUSOP         reduce using rule 251 (try_block -> TRY compound_statement CATCH compound_statement .)
    DMINUSOP        reduce using rule 251 (try_block -> TRY compound_statement CATCH compound_statement .)
    SIZEOF          reduce using rule 251 (try_block -> TRY compound_statement CATCH compound_statement .)
    PLUSOP          reduce using rule 251 (try_block -> TRY compound_statement CATCH compound_statement .)
    MINUSOP         reduce using rule 251 (try_block -> TRY compound_statement CATCH compound_statement .)
    NOTSYM          reduce using rule 251 (try_block -> TRY compound_statement CATCH compound_statement .)
    BNOP            reduce using rule 251 (try_block -> TRY compound_statement CATCH compound_statement .)
    MULTOP          reduce using rule 251 (try_block -> TRY compound_statement CATCH compound_statement .)
    BANDOP          reduce using rule 251 (try_block -> TRY compound_statement CATCH compound_statement .)
    NEW             reduce using rule 251 (try_block -> TRY compound_statement CATCH compound_statement .)
    DELETE          reduce using rule 251 (try_block -> TRY compound_statement CATCH compound_statement .)
    CHAR            reduce using rule 251 (try_block -> TRY compound_statement CATCH compound_statement .)
    SHORT           reduce using rule 251 (try_block -> TRY compound_statement CATCH compound_statement .)
    INT             reduce using rule 251 (try_block -> TRY compound_statement CATCH compound_statement .)
    LONG            reduce using rule 251 (try_block -> TRY compound_statement CATCH compound_statement .)
    SIGNED          reduce using rule 251 (try_block -> TRY compound_statement CATCH compound_statement .)
    UNSIGNED        reduce using rule 251 (try_block -> TRY compound_statement CATCH compound_statement .)
    FLOAT           reduce using rule 251 (try_block -> TRY compound_statement CATCH compound_statement .)
    DOUBLE          reduce using rule 251 (try_block -> TRY compound_statement CATCH compound_statement .)
    VOID            reduce using rule 251 (try_block -> TRY compound_statement CATCH compound_statement .)
    STRING          reduce using rule 251 (try_block -> TRY compound_statement CATCH compound_statement .)
    AUTO            reduce using rule 251 (try_block -> TRY compound_statement CATCH compound_statement .)
    TYPE            reduce using rule 251 (try_block -> TRY compound_statement CATCH compound_statement .)
    CLASS           reduce using rule 251 (try_block -> TRY compound_statement CATCH compound_statement .)
    STRUCT          reduce using rule 251 (try_block -> TRY compound_statement CATCH compound_statement .)
    THIS            reduce using rule 251 (try_block -> TRY compound_statement CATCH compound_statement .)
    LPAREN          reduce using rule 251 (try_block -> TRY compound_statement CATCH compound_statement .)
    DOUBLEBNOP      reduce using rule 251 (try_block -> TRY compound_statement CATCH compound_statement .)
    STRING_L        reduce using rule 251 (try_block -> TRY compound_statement CATCH compound_statement .)
    NUMBER          reduce using rule 251 (try_block -> TRY compound_statement CATCH compound_statement .)
    SCHAR           reduce using rule 251 (try_block -> TRY compound_statement CATCH compound_statement .)
    ELSE            reduce using rule 251 (try_block -> TRY compound_statement CATCH compound_statement .)


state 422

    (248) selection_statement -> IF LPAREN expression RPAREN statement .
    (249) selection_statement -> IF LPAREN expression RPAREN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    RCPAREN         reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IDENTIFIER      reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CASE            reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LCPAREN         reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DO              reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement .)
    GOTO            reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TRY             reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement .)
    THROW           reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CONST           reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ASM             reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TEMPLATE        reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TYPEDEF         reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DPLUSOP         reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DMINUSOP        reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SIZEOF          reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PLUSOP          reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MINUSOP         reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement .)
    NOTSYM          reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BNOP            reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MULTOP          reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BANDOP          reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement .)
    NEW             reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DELETE          reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SHORT           reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INT             reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LONG            reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SIGNED          reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement .)
    UNSIGNED        reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DOUBLE          reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement .)
    VOID            reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STRING          reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement .)
    AUTO            reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TYPE            reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CLASS           reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STRUCT          reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement .)
    THIS            reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DOUBLEBNOP      reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STRING_L        reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SCHAR           reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 429

  ! ELSE            [ reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement .) ]


state 423

    (250) selection_statement -> SWITCH LPAREN expression RPAREN statement .

    RCPAREN         reduce using rule 250 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    IDENTIFIER      reduce using rule 250 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CASE            reduce using rule 250 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 250 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 250 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LCPAREN         reduce using rule 250 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    IF              reduce using rule 250 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 250 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 250 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DO              reduce using rule 250 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    FOR             reduce using rule 250 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 250 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 250 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 250 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    GOTO            reduce using rule 250 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    TRY             reduce using rule 250 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    THROW           reduce using rule 250 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CONST           reduce using rule 250 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    ASM             reduce using rule 250 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    TEMPLATE        reduce using rule 250 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    TYPEDEF         reduce using rule 250 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DPLUSOP         reduce using rule 250 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DMINUSOP        reduce using rule 250 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SIZEOF          reduce using rule 250 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    PLUSOP          reduce using rule 250 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    MINUSOP         reduce using rule 250 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    NOTSYM          reduce using rule 250 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    BNOP            reduce using rule 250 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    MULTOP          reduce using rule 250 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    BANDOP          reduce using rule 250 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    NEW             reduce using rule 250 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DELETE          reduce using rule 250 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 250 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SHORT           reduce using rule 250 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    INT             reduce using rule 250 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LONG            reduce using rule 250 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SIGNED          reduce using rule 250 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    UNSIGNED        reduce using rule 250 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 250 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DOUBLE          reduce using rule 250 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    VOID            reduce using rule 250 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    STRING          reduce using rule 250 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    AUTO            reduce using rule 250 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    TYPE            reduce using rule 250 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CLASS           reduce using rule 250 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    STRUCT          reduce using rule 250 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    THIS            reduce using rule 250 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 250 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DOUBLEBNOP      reduce using rule 250 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    STRING_L        reduce using rule 250 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 250 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SCHAR           reduce using rule 250 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 250 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)


state 424

    (255) iteration_statement -> WHILE LPAREN expression RPAREN statement .

    RCPAREN         reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    IDENTIFIER      reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CASE            reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LCPAREN         reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DO              reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    GOTO            reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TRY             reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    THROW           reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CONST           reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ASM             reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TEMPLATE        reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TYPEDEF         reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DPLUSOP         reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DMINUSOP        reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SIZEOF          reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PLUSOP          reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MINUSOP         reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    NOTSYM          reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BNOP            reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MULTOP          reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BANDOP          reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    NEW             reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DELETE          reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SHORT           reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INT             reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LONG            reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SIGNED          reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    UNSIGNED        reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DOUBLE          reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    VOID            reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STRING          reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    AUTO            reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TYPE            reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CLASS           reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STRUCT          reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    THIS            reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DOUBLEBNOP      reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STRING_L        reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SCHAR           reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 255 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)


state 425

    (256) iteration_statement -> DO statement WHILE LPAREN expression . RPAREN SEMICOLON
    (48) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 430
    COMMA           shift and go to state 300


state 426

    (257) iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON . expression RPAREN compound_statement
    (259) iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON . RPAREN compound_statement
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 432
    THROW           shift and go to state 216
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    THIS            shift and go to state 144
    LPAREN          shift and go to state 148
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    expression                     shift and go to state 431
    assignment_expression          shift and go to state 214
    throw_expression               shift and go to state 215
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    cast_expression                shift and go to state 126
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    logical_AND_expression         shift and go to state 114
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    inclusive_OR_expression        shift and go to state 115
    literal                        shift and go to state 143
    exclusive_OR_expression        shift and go to state 116
    AND_expression                 shift and go to state 117
    equality_expression            shift and go to state 118
    relational_expression          shift and go to state 119
    shift_expression               shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 122
    pm_expression                  shift and go to state 125

state 427

    (258) iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression . RPAREN compound_statement
    (48) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 433
    COMMA           shift and go to state 300


state 428

    (260) iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN . statement
    (235) statement -> . labeled_statement
    (236) statement -> . expression_statement
    (237) statement -> . compound_statement
    (238) statement -> . selection_statement
    (239) statement -> . iteration_statement
    (240) statement -> . jump_statement
    (241) statement -> . declaration_statement
    (242) statement -> . try_block
    (252) labeled_statement -> . IDENTIFIER COLON statement
    (253) labeled_statement -> . CASE constant_expression COLON statement
    (254) labeled_statement -> . DEFAULT COLON statement
    (263) expression_statement -> . expression SEMICOLON
    (264) expression_statement -> . SEMICOLON
    (231) compound_statement -> . LCPAREN statement_list RCPAREN
    (232) compound_statement -> . LCPAREN RCPAREN
    (248) selection_statement -> . IF LPAREN expression RPAREN statement
    (249) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (250) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (255) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (256) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (257) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement
    (258) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement
    (259) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement
    (260) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (243) jump_statement -> . BREAK SEMICOLON
    (244) jump_statement -> . CONTINUE SEMICOLON
    (245) jump_statement -> . RETURN expression SEMICOLON
    (246) jump_statement -> . RETURN SEMICOLON
    (247) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (265) declaration_statement -> . declaration
    (251) try_block -> . TRY compound_statement CATCH compound_statement
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (266) declaration -> . type_specifier_ declarator_list SEMICOLON
    (267) declaration -> . asm_declaration
    (268) declaration -> . function_definition
    (269) declaration -> . function_decl
    (270) declaration -> . class_define_specifier SEMICOLON
    (271) declaration -> . template_declaration
    (272) declaration -> . typedef_declarator
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (170) type_specifier_ -> . CONST type_specifier
    (171) type_specifier_ -> . type_specifier
    (288) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (227) function_definition -> . type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope
    (228) function_decl -> . type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope
    (205) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (206) class_define_specifier -> . class_head LCPAREN RCPAREN
    (273) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (172) typedef_declarator -> . TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON
    (173) typedef_declarator -> . TYPEDEF type_specifier_ IDENTIFIER SEMICOLON
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (174) type_specifier -> . simple_type_name
    (175) type_specifier -> . complex_type_specifier
    (192) class_head -> . class_key IDENTIFIER base_spec
    (193) class_head -> . class_key IDENTIFIER
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (176) simple_type_name -> . CHAR
    (177) simple_type_name -> . SHORT
    (178) simple_type_name -> . INT
    (179) simple_type_name -> . LONG
    (180) simple_type_name -> . SIGNED
    (181) simple_type_name -> . UNSIGNED
    (182) simple_type_name -> . FLOAT
    (183) simple_type_name -> . DOUBLE
    (184) simple_type_name -> . VOID
    (185) simple_type_name -> . STRING
    (186) simple_type_name -> . AUTO
    (187) complex_type_specifier -> . class_key IDENTIFIER
    (188) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (189) complex_type_specifier -> . TYPE IDENTIFIER
    (190) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (203) class_key -> . CLASS
    (204) class_key -> . STRUCT
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 340
    CASE            shift and go to state 341
    DEFAULT         shift and go to state 342
    SEMICOLON       shift and go to state 344
    LCPAREN         shift and go to state 275
    IF              shift and go to state 345
    SWITCH          shift and go to state 346
    WHILE           shift and go to state 347
    DO              shift and go to state 348
    FOR             shift and go to state 349
    BREAK           shift and go to state 350
    CONTINUE        shift and go to state 351
    RETURN          shift and go to state 352
    GOTO            shift and go to state 353
    TRY             shift and go to state 355
    THROW           shift and go to state 216
    CONST           shift and go to state 16
    ASM             shift and go to state 18
    TEMPLATE        shift and go to state 20
    TYPEDEF         shift and go to state 21
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38
    THIS            shift and go to state 144
    LPAREN          shift and go to state 148
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    statement                      shift and go to state 434
    labeled_statement              shift and go to state 332
    expression_statement           shift and go to state 333
    compound_statement             shift and go to state 334
    selection_statement            shift and go to state 335
    iteration_statement            shift and go to state 336
    jump_statement                 shift and go to state 337
    declaration_statement          shift and go to state 338
    try_block                      shift and go to state 339
    expression                     shift and go to state 343
    declaration                    shift and go to state 354
    assignment_expression          shift and go to state 214
    throw_expression               shift and go to state 215
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    function_decl                  shift and go to state 12
    class_define_specifier         shift and go to state 13
    template_declaration           shift and go to state 14
    typedef_declarator             shift and go to state 15
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    type_specifier                 shift and go to state 17
    class_head                     shift and go to state 19
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    cast_expression                shift and go to state 126
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 24
    logical_AND_expression         shift and go to state 114
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    inclusive_OR_expression        shift and go to state 115
    literal                        shift and go to state 143
    exclusive_OR_expression        shift and go to state 116
    AND_expression                 shift and go to state 117
    equality_expression            shift and go to state 118
    relational_expression          shift and go to state 119
    shift_expression               shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 122
    pm_expression                  shift and go to state 125

state 429

    (249) selection_statement -> IF LPAREN expression RPAREN statement ELSE . statement
    (235) statement -> . labeled_statement
    (236) statement -> . expression_statement
    (237) statement -> . compound_statement
    (238) statement -> . selection_statement
    (239) statement -> . iteration_statement
    (240) statement -> . jump_statement
    (241) statement -> . declaration_statement
    (242) statement -> . try_block
    (252) labeled_statement -> . IDENTIFIER COLON statement
    (253) labeled_statement -> . CASE constant_expression COLON statement
    (254) labeled_statement -> . DEFAULT COLON statement
    (263) expression_statement -> . expression SEMICOLON
    (264) expression_statement -> . SEMICOLON
    (231) compound_statement -> . LCPAREN statement_list RCPAREN
    (232) compound_statement -> . LCPAREN RCPAREN
    (248) selection_statement -> . IF LPAREN expression RPAREN statement
    (249) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (250) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (255) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (256) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (257) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement
    (258) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement
    (259) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement
    (260) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (243) jump_statement -> . BREAK SEMICOLON
    (244) jump_statement -> . CONTINUE SEMICOLON
    (245) jump_statement -> . RETURN expression SEMICOLON
    (246) jump_statement -> . RETURN SEMICOLON
    (247) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (265) declaration_statement -> . declaration
    (251) try_block -> . TRY compound_statement CATCH compound_statement
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (266) declaration -> . type_specifier_ declarator_list SEMICOLON
    (267) declaration -> . asm_declaration
    (268) declaration -> . function_definition
    (269) declaration -> . function_decl
    (270) declaration -> . class_define_specifier SEMICOLON
    (271) declaration -> . template_declaration
    (272) declaration -> . typedef_declarator
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (170) type_specifier_ -> . CONST type_specifier
    (171) type_specifier_ -> . type_specifier
    (288) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (227) function_definition -> . type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope
    (228) function_decl -> . type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope
    (205) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (206) class_define_specifier -> . class_head LCPAREN RCPAREN
    (273) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (172) typedef_declarator -> . TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON
    (173) typedef_declarator -> . TYPEDEF type_specifier_ IDENTIFIER SEMICOLON
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (174) type_specifier -> . simple_type_name
    (175) type_specifier -> . complex_type_specifier
    (192) class_head -> . class_key IDENTIFIER base_spec
    (193) class_head -> . class_key IDENTIFIER
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (176) simple_type_name -> . CHAR
    (177) simple_type_name -> . SHORT
    (178) simple_type_name -> . INT
    (179) simple_type_name -> . LONG
    (180) simple_type_name -> . SIGNED
    (181) simple_type_name -> . UNSIGNED
    (182) simple_type_name -> . FLOAT
    (183) simple_type_name -> . DOUBLE
    (184) simple_type_name -> . VOID
    (185) simple_type_name -> . STRING
    (186) simple_type_name -> . AUTO
    (187) complex_type_specifier -> . class_key IDENTIFIER
    (188) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (189) complex_type_specifier -> . TYPE IDENTIFIER
    (190) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (203) class_key -> . CLASS
    (204) class_key -> . STRUCT
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (127) name -> . IDENTIFIER
    (128) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 340
    CASE            shift and go to state 341
    DEFAULT         shift and go to state 342
    SEMICOLON       shift and go to state 344
    LCPAREN         shift and go to state 275
    IF              shift and go to state 345
    SWITCH          shift and go to state 346
    WHILE           shift and go to state 347
    DO              shift and go to state 348
    FOR             shift and go to state 349
    BREAK           shift and go to state 350
    CONTINUE        shift and go to state 351
    RETURN          shift and go to state 352
    GOTO            shift and go to state 353
    TRY             shift and go to state 355
    THROW           shift and go to state 216
    CONST           shift and go to state 16
    ASM             shift and go to state 18
    TEMPLATE        shift and go to state 20
    TYPEDEF         shift and go to state 21
    DPLUSOP         shift and go to state 130
    DMINUSOP        shift and go to state 131
    SIZEOF          shift and go to state 134
    PLUSOP          shift and go to state 123
    MINUSOP         shift and go to state 124
    NOTSYM          shift and go to state 139
    BNOP            shift and go to state 140
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 141
    DELETE          shift and go to state 142
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38
    THIS            shift and go to state 144
    LPAREN          shift and go to state 148
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 145
    NUMBER          shift and go to state 146
    SCHAR           shift and go to state 147

    expression                     shift and go to state 343
    statement                      shift and go to state 435
    labeled_statement              shift and go to state 332
    expression_statement           shift and go to state 333
    compound_statement             shift and go to state 334
    selection_statement            shift and go to state 335
    iteration_statement            shift and go to state 336
    jump_statement                 shift and go to state 337
    declaration_statement          shift and go to state 338
    try_block                      shift and go to state 339
    declaration                    shift and go to state 354
    assignment_expression          shift and go to state 214
    throw_expression               shift and go to state 215
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    function_decl                  shift and go to state 12
    class_define_specifier         shift and go to state 13
    template_declaration           shift and go to state 14
    typedef_declarator             shift and go to state 15
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    type_specifier                 shift and go to state 17
    class_head                     shift and go to state 19
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 129
    unary1_operator                shift and go to state 132
    cast_expression                shift and go to state 126
    unary2_operator                shift and go to state 133
    allocation_expression          shift and go to state 135
    deallocation_expression        shift and go to state 136
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 24
    logical_AND_expression         shift and go to state 114
    primary_expression             shift and go to state 137
    name                           shift and go to state 138
    inclusive_OR_expression        shift and go to state 115
    literal                        shift and go to state 143
    exclusive_OR_expression        shift and go to state 116
    AND_expression                 shift and go to state 117
    equality_expression            shift and go to state 118
    relational_expression          shift and go to state 119
    shift_expression               shift and go to state 120
    additive_expression            shift and go to state 121
    multiplicative_expression      shift and go to state 122
    pm_expression                  shift and go to state 125

state 430

    (256) iteration_statement -> DO statement WHILE LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 436


state 431

    (257) iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression . RPAREN compound_statement
    (48) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 437
    COMMA           shift and go to state 300


state 432

    (259) iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN . compound_statement
    (231) compound_statement -> . LCPAREN statement_list RCPAREN
    (232) compound_statement -> . LCPAREN RCPAREN

    LCPAREN         shift and go to state 275

    compound_statement             shift and go to state 438

state 433

    (258) iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN . compound_statement
    (231) compound_statement -> . LCPAREN statement_list RCPAREN
    (232) compound_statement -> . LCPAREN RCPAREN

    LCPAREN         shift and go to state 275

    compound_statement             shift and go to state 439

state 434

    (260) iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .

    RCPAREN         reduce using rule 260 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    IDENTIFIER      reduce using rule 260 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    CASE            reduce using rule 260 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    DEFAULT         reduce using rule 260 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    SEMICOLON       reduce using rule 260 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    LCPAREN         reduce using rule 260 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    IF              reduce using rule 260 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    SWITCH          reduce using rule 260 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    WHILE           reduce using rule 260 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    DO              reduce using rule 260 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    FOR             reduce using rule 260 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    BREAK           reduce using rule 260 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    CONTINUE        reduce using rule 260 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    RETURN          reduce using rule 260 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    GOTO            reduce using rule 260 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    TRY             reduce using rule 260 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    THROW           reduce using rule 260 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    CONST           reduce using rule 260 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    ASM             reduce using rule 260 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    TEMPLATE        reduce using rule 260 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    TYPEDEF         reduce using rule 260 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    DPLUSOP         reduce using rule 260 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    DMINUSOP        reduce using rule 260 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    SIZEOF          reduce using rule 260 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    PLUSOP          reduce using rule 260 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    MINUSOP         reduce using rule 260 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    NOTSYM          reduce using rule 260 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    BNOP            reduce using rule 260 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    MULTOP          reduce using rule 260 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    BANDOP          reduce using rule 260 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    NEW             reduce using rule 260 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    DELETE          reduce using rule 260 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    CHAR            reduce using rule 260 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    SHORT           reduce using rule 260 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    INT             reduce using rule 260 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    LONG            reduce using rule 260 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    SIGNED          reduce using rule 260 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    UNSIGNED        reduce using rule 260 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    FLOAT           reduce using rule 260 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    DOUBLE          reduce using rule 260 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    VOID            reduce using rule 260 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    STRING          reduce using rule 260 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    AUTO            reduce using rule 260 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    TYPE            reduce using rule 260 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    CLASS           reduce using rule 260 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    STRUCT          reduce using rule 260 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    THIS            reduce using rule 260 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    LPAREN          reduce using rule 260 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    DOUBLEBNOP      reduce using rule 260 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    STRING_L        reduce using rule 260 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    NUMBER          reduce using rule 260 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    SCHAR           reduce using rule 260 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    ELSE            reduce using rule 260 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)


state 435

    (249) selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .

    RCPAREN         reduce using rule 249 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IDENTIFIER      reduce using rule 249 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CASE            reduce using rule 249 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DEFAULT         reduce using rule 249 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SEMICOLON       reduce using rule 249 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LCPAREN         reduce using rule 249 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 249 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SWITCH          reduce using rule 249 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 249 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DO              reduce using rule 249 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 249 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 249 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CONTINUE        reduce using rule 249 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 249 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    GOTO            reduce using rule 249 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TRY             reduce using rule 249 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    THROW           reduce using rule 249 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CONST           reduce using rule 249 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ASM             reduce using rule 249 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TEMPLATE        reduce using rule 249 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TYPEDEF         reduce using rule 249 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DPLUSOP         reduce using rule 249 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DMINUSOP        reduce using rule 249 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SIZEOF          reduce using rule 249 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUSOP          reduce using rule 249 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUSOP         reduce using rule 249 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NOTSYM          reduce using rule 249 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BNOP            reduce using rule 249 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MULTOP          reduce using rule 249 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BANDOP          reduce using rule 249 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NEW             reduce using rule 249 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DELETE          reduce using rule 249 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CHAR            reduce using rule 249 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SHORT           reduce using rule 249 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INT             reduce using rule 249 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LONG            reduce using rule 249 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SIGNED          reduce using rule 249 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    UNSIGNED        reduce using rule 249 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FLOAT           reduce using rule 249 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DOUBLE          reduce using rule 249 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    VOID            reduce using rule 249 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRING          reduce using rule 249 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    AUTO            reduce using rule 249 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TYPE            reduce using rule 249 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CLASS           reduce using rule 249 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRUCT          reduce using rule 249 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    THIS            reduce using rule 249 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 249 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DOUBLEBNOP      reduce using rule 249 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRING_L        reduce using rule 249 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NUMBER          reduce using rule 249 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SCHAR           reduce using rule 249 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 249 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)


state 436

    (256) iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .

    RCPAREN         reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    CASE            reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    LCPAREN         reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    IF              reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SWITCH          reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    WHILE           reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DO              reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    FOR             reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    BREAK           reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    RETURN          reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    GOTO            reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    TRY             reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    THROW           reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    CONST           reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    ASM             reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    TEMPLATE        reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    TYPEDEF         reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DPLUSOP         reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DMINUSOP        reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SIZEOF          reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    PLUSOP          reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    MINUSOP         reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    NOTSYM          reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    BNOP            reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    MULTOP          reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    BANDOP          reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    NEW             reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DELETE          reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    CHAR            reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SHORT           reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    INT             reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    LONG            reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SIGNED          reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    UNSIGNED        reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    FLOAT           reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DOUBLE          reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    VOID            reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    STRING          reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    AUTO            reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    TYPE            reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    CLASS           reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    STRUCT          reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    THIS            reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    LPAREN          reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DOUBLEBNOP      reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    STRING_L        reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    NUMBER          reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SCHAR           reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    ELSE            reduce using rule 256 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)


state 437

    (257) iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN . compound_statement
    (231) compound_statement -> . LCPAREN statement_list RCPAREN
    (232) compound_statement -> . LCPAREN RCPAREN

    LCPAREN         shift and go to state 275

    compound_statement             shift and go to state 440

state 438

    (259) iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement .

    RCPAREN         reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement .)
    IDENTIFIER      reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement .)
    CASE            reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement .)
    DEFAULT         reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement .)
    SEMICOLON       reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement .)
    LCPAREN         reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement .)
    IF              reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement .)
    SWITCH          reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement .)
    WHILE           reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement .)
    DO              reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement .)
    FOR             reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement .)
    BREAK           reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement .)
    CONTINUE        reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement .)
    RETURN          reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement .)
    GOTO            reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement .)
    TRY             reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement .)
    THROW           reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement .)
    CONST           reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement .)
    ASM             reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement .)
    TEMPLATE        reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement .)
    TYPEDEF         reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement .)
    DPLUSOP         reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement .)
    DMINUSOP        reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement .)
    SIZEOF          reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement .)
    PLUSOP          reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement .)
    MINUSOP         reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement .)
    NOTSYM          reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement .)
    BNOP            reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement .)
    MULTOP          reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement .)
    BANDOP          reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement .)
    NEW             reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement .)
    DELETE          reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement .)
    CHAR            reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement .)
    SHORT           reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement .)
    INT             reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement .)
    LONG            reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement .)
    SIGNED          reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement .)
    UNSIGNED        reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement .)
    FLOAT           reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement .)
    DOUBLE          reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement .)
    VOID            reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement .)
    STRING          reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement .)
    AUTO            reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement .)
    TYPE            reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement .)
    CLASS           reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement .)
    STRUCT          reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement .)
    THIS            reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement .)
    LPAREN          reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement .)
    DOUBLEBNOP      reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement .)
    STRING_L        reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement .)
    NUMBER          reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement .)
    SCHAR           reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement .)
    ELSE            reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN compound_statement .)


state 439

    (258) iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement .

    RCPAREN         reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement .)
    IDENTIFIER      reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement .)
    CASE            reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement .)
    DEFAULT         reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement .)
    SEMICOLON       reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement .)
    LCPAREN         reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement .)
    IF              reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement .)
    SWITCH          reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement .)
    WHILE           reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement .)
    DO              reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement .)
    FOR             reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement .)
    BREAK           reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement .)
    CONTINUE        reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement .)
    RETURN          reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement .)
    GOTO            reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement .)
    TRY             reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement .)
    THROW           reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement .)
    CONST           reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement .)
    ASM             reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement .)
    TEMPLATE        reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement .)
    TYPEDEF         reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement .)
    DPLUSOP         reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement .)
    DMINUSOP        reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement .)
    SIZEOF          reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement .)
    PLUSOP          reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement .)
    MINUSOP         reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement .)
    NOTSYM          reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement .)
    BNOP            reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement .)
    MULTOP          reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement .)
    BANDOP          reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement .)
    NEW             reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement .)
    DELETE          reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement .)
    CHAR            reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement .)
    SHORT           reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement .)
    INT             reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement .)
    LONG            reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement .)
    SIGNED          reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement .)
    UNSIGNED        reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement .)
    FLOAT           reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement .)
    DOUBLE          reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement .)
    VOID            reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement .)
    STRING          reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement .)
    AUTO            reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement .)
    TYPE            reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement .)
    CLASS           reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement .)
    STRUCT          reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement .)
    THIS            reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement .)
    LPAREN          reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement .)
    DOUBLEBNOP      reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement .)
    STRING_L        reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement .)
    NUMBER          reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement .)
    SCHAR           reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement .)
    ELSE            reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN compound_statement .)


state 440

    (257) iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement .

    RCPAREN         reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement .)
    IDENTIFIER      reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement .)
    CASE            reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement .)
    DEFAULT         reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement .)
    SEMICOLON       reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement .)
    LCPAREN         reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement .)
    IF              reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement .)
    SWITCH          reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement .)
    WHILE           reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement .)
    DO              reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement .)
    FOR             reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement .)
    BREAK           reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement .)
    CONTINUE        reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement .)
    RETURN          reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement .)
    GOTO            reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement .)
    TRY             reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement .)
    THROW           reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement .)
    CONST           reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement .)
    ASM             reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement .)
    TEMPLATE        reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement .)
    TYPEDEF         reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement .)
    DPLUSOP         reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement .)
    DMINUSOP        reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement .)
    SIZEOF          reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement .)
    PLUSOP          reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement .)
    MINUSOP         reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement .)
    NOTSYM          reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement .)
    BNOP            reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement .)
    MULTOP          reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement .)
    BANDOP          reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement .)
    NEW             reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement .)
    DELETE          reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement .)
    CHAR            reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement .)
    SHORT           reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement .)
    INT             reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement .)
    LONG            reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement .)
    SIGNED          reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement .)
    UNSIGNED        reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement .)
    FLOAT           reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement .)
    DOUBLE          reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement .)
    VOID            reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement .)
    STRING          reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement .)
    AUTO            reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement .)
    TYPE            reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement .)
    CLASS           reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement .)
    STRUCT          reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement .)
    THIS            reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement .)
    LPAREN          reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement .)
    DOUBLEBNOP      reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement .)
    STRING_L        reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement .)
    NUMBER          reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement .)
    SCHAR           reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement .)
    ELSE            reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN compound_statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MULTOP in state 233 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 301 resolved as shift
WARNING: shift/reduce conflict for MULTOP in state 312 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 321 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 422 resolved as shift
