Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     control_line -> control_line control_line_stmt
Rule 2     control_line -> control_line_stmt
Rule 3     include_control -> HASHTAG INCLUDE
Rule 4     control_line_stmt -> include_control LTCOMP STRING_L GTCOMP
Rule 5     control_line_stmt -> include_control STRING_L
Rule 6     program -> control_line translation_unit
Rule 7     program -> translation_unit
Rule 8     translation_unit -> declaration_seq
Rule 9     declaration_seq -> declaration_seq declaration
Rule 10    declaration_seq -> declaration
Rule 11    empty -> <empty>
Rule 12    constant_expression -> conditional_expression
Rule 13    conditional_expression -> logical_OR_expression
Rule 14    conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression
Rule 15    logical_OR_expression -> logical_AND_expression
Rule 16    logical_OR_expression -> logical_OR_expression OROP logical_AND_expression
Rule 17    logical_AND_expression -> inclusive_OR_expression
Rule 18    logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression
Rule 19    inclusive_OR_expression -> exclusive_OR_expression
Rule 20    inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression
Rule 21    exclusive_OR_expression -> AND_expression
Rule 22    exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression
Rule 23    AND_expression -> equality_expression
Rule 24    AND_expression -> AND_expression BANDOP equality_expression
Rule 25    equality_expression -> relational_expression
Rule 26    equality_expression -> equality_expression EQCOMP relational_expression
Rule 27    equality_expression -> equality_expression NEQCOMP relational_expression
Rule 28    relational_expression -> shift_expression
Rule 29    relational_expression -> relational_expression LTCOMP shift_expression
Rule 30    relational_expression -> relational_expression GTCOMP shift_expression
Rule 31    relational_expression -> relational_expression LTECOMP shift_expression
Rule 32    relational_expression -> relational_expression GTECOMP shift_expression
Rule 33    shift_expression -> additive_expression
Rule 34    shift_expression -> shift_expression LSHIFT additive_expression
Rule 35    shift_expression -> shift_expression RSHIFT additive_expression
Rule 36    additive_expression -> multiplicative_expression
Rule 37    additive_expression -> additive_expression PLUSOP multiplicative_expression
Rule 38    additive_expression -> additive_expression MINUSOP multiplicative_expression
Rule 39    multiplicative_expression -> pm_expression
Rule 40    multiplicative_expression -> multiplicative_expression MULTOP pm_expression
Rule 41    multiplicative_expression -> multiplicative_expression DIVOP pm_expression
Rule 42    multiplicative_expression -> multiplicative_expression MODOP pm_expression
Rule 43    pm_expression -> cast_expression
Rule 44    pm_expression -> pm_expression DOTSTAR cast_expression
Rule 45    pm_expression -> pm_expression ARROWSTAR cast_expression
Rule 46    expression -> assignment_expression
Rule 47    expression -> throw_expression
Rule 48    expression -> expression COMMA assignment_expression
Rule 49    throw_expression -> THROW expression
Rule 50    throw_expression -> THROW
Rule 51    assignment_expression -> conditional_expression
Rule 52    assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 53    assignment_operator -> EQUAL
Rule 54    assignment_operator -> MULTEQOP
Rule 55    assignment_operator -> DIVEQOP
Rule 56    assignment_operator -> MODEQOP
Rule 57    assignment_operator -> PLUSEQOP
Rule 58    assignment_operator -> MINUSEQOP
Rule 59    assignment_operator -> LSHIFTEQOP
Rule 60    assignment_operator -> RSHIFTEQOP
Rule 61    assignment_operator -> BANDEQOP
Rule 62    assignment_operator -> BOREQOP
Rule 63    unary_expression -> postfix_expression
Rule 64    unary_expression -> DPLUSOP unary_expression
Rule 65    unary_expression -> DMINUSOP unary_expression
Rule 66    unary_expression -> unary1_operator cast_expression
Rule 67    unary_expression -> unary2_operator cast_expression
Rule 68    unary_expression -> SIZEOF unary_expression
Rule 69    unary_expression -> SIZEOF LPAREN type_name RPAREN
Rule 70    unary_expression -> allocation_expression
Rule 71    unary_expression -> deallocation_expression
Rule 72    deallocation_expression -> DELETE cast_expression
Rule 73    allocation_expression -> NEW new_type_name new_initializer
Rule 74    allocation_expression -> NEW new_type_name
Rule 75    allocation_expression -> NEW LPAREN type_name RPAREN new_initializer
Rule 76    allocation_expression -> NEW LPAREN type_name RPAREN
Rule 77    new_type_name -> type_specifier_ new_declarator
Rule 78    new_type_name -> type_specifier_
Rule 79    new_declarator -> new_declarator MULTOP
Rule 80    new_declarator -> MULTOP
Rule 81    new_declarator -> new_declarator LSPAREN expression RSPAREN
Rule 82    new_declarator -> LSPAREN expression RSPAREN
Rule 83    new_initializer -> LPAREN initializer_list RPAREN
Rule 84    new_initializer -> LPAREN RPAREN
Rule 85    unary1_operator -> PLUSOP
Rule 86    unary1_operator -> MINUSOP
Rule 87    unary1_operator -> NOTSYM
Rule 88    unary1_operator -> BNOP
Rule 89    unary2_operator -> MULTOP
Rule 90    unary2_operator -> BANDOP
Rule 91    postfix_expression -> primary_expression
Rule 92    postfix_expression -> postfix_expression LSPAREN expression RSPAREN
Rule 93    postfix_expression -> postfix_expression LPAREN expression_list RPAREN
Rule 94    postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN
Rule 95    postfix_expression -> postfix_expression LPAREN RPAREN
Rule 96    postfix_expression -> simple_type_name LPAREN expression_list RPAREN
Rule 97    postfix_expression -> simple_type_name LPAREN RPAREN
Rule 98    postfix_expression -> postfix_expression DOT name
Rule 99    postfix_expression -> postfix_expression ARROW name
Rule 100   postfix_expression -> postfix_expression DPLUSOP
Rule 101   postfix_expression -> postfix_expression DMINUSOP
Rule 102   primary_expression -> literal
Rule 103   primary_expression -> THIS
Rule 104   primary_expression -> LPAREN expression RPAREN
Rule 105   primary_expression -> name
Rule 106   literal -> NUMBER
Rule 107   literal -> STRING_L
Rule 108   literal -> SCHAR
Rule 109   cast_expression -> unary_expression
Rule 110   cast_expression -> LPAREN type_name RPAREN cast_expression
Rule 111   abstract_declarator -> unary2_operator
Rule 112   abstract_declarator -> unary2_operator abstract_declarator
Rule 113   abstract_declarator -> LSPAREN constant_expression RSPAREN
Rule 114   abstract_declarator -> abstract_declarator LSPAREN constant_expression RSPAREN
Rule 115   abstract_declarator -> LSPAREN RSPAREN
Rule 116   abstract_declarator -> abstract_declarator LSPAREN RSPAREN
Rule 117   declarator -> name
Rule 118   declarator -> unary2_operator declarator
Rule 119   declarator -> declarator LPAREN argument_declaration_list RPAREN
Rule 120   declarator -> declarator LSPAREN constant_expression RSPAREN
Rule 121   declarator -> declarator LSPAREN RSPAREN
Rule 122   argument_declaration_list -> arg_declaration_list
Rule 123   argument_declaration_list -> empty
Rule 124   arg_declaration_list -> argument_declaration
Rule 125   arg_declaration_list -> argument_declaration COMMA arg_declaration_list
Rule 126   argument_declaration -> type_specifier_ declarator
Rule 127   argument_declaration -> type_specifier_ declarator EQUAL expression
Rule 128   argument_declaration -> type_specifier_ abstract_declarator
Rule 129   argument_declaration -> type_specifier_
Rule 130   argument_declaration -> type_specifier_ abstract_declarator EQUAL expression
Rule 131   argument_declaration -> type_specifier_ EQUAL expression
Rule 132   name -> IDENTIFIER
Rule 133   name -> operator_function_name
Rule 134   name -> DOUBLEBNOP IDENTIFIER
Rule 135   operator_function_name -> OPERATOR operator_name
Rule 136   operator_name -> NEW
Rule 137   operator_name -> DELETE
Rule 138   operator_name -> PLUSOP
Rule 139   operator_name -> MINUSOP
Rule 140   operator_name -> MULTOP
Rule 141   operator_name -> DIVOP
Rule 142   operator_name -> MODOP
Rule 143   operator_name -> XOROP
Rule 144   operator_name -> BANDOP
Rule 145   operator_name -> BNOP
Rule 146   operator_name -> NOTSYM
Rule 147   operator_name -> EQUAL
Rule 148   operator_name -> LTCOMP
Rule 149   operator_name -> GTCOMP
Rule 150   operator_name -> PLUSEQOP
Rule 151   operator_name -> MINUSEQOP
Rule 152   operator_name -> MULTEQOP
Rule 153   operator_name -> DIVEQOP
Rule 154   operator_name -> MODEQOP
Rule 155   operator_name -> XOREQOP
Rule 156   operator_name -> BANDEQOP
Rule 157   operator_name -> LSHIFT
Rule 158   operator_name -> RSHIFT
Rule 159   operator_name -> RSHIFTEQOP
Rule 160   operator_name -> LSHIFTEQOP
Rule 161   operator_name -> EQCOMP
Rule 162   operator_name -> NEQCOMP
Rule 163   operator_name -> LTECOMP
Rule 164   operator_name -> GTECOMP
Rule 165   operator_name -> ANDOP
Rule 166   operator_name -> OROP
Rule 167   operator_name -> DPLUSOP
Rule 168   operator_name -> DMINUSOP
Rule 169   operator_name -> COMMA
Rule 170   operator_name -> ARROWSTAR
Rule 171   operator_name -> ARROW
Rule 172   operator_name -> LPAREN RPAREN
Rule 173   operator_name -> LSPAREN RSPAREN
Rule 174   template_class_name -> LTEMPLATE template_arg_list RTEMPLATE
Rule 175   template_arg_list -> type_name
Rule 176   template_arg_list -> template_arg_list COMMA type_name
Rule 177   type_name -> type_specifier_ abstract_declarator
Rule 178   type_name -> type_specifier_
Rule 179   type_specifier_ -> CONST type_specifier
Rule 180   type_specifier_ -> TYPEDEF type_specifier
Rule 181   type_specifier_ -> type_specifier
Rule 182   type_specifier -> simple_type_name
Rule 183   type_specifier -> complex_type_specifier
Rule 184   simple_type_name -> CHAR
Rule 185   simple_type_name -> SHORT
Rule 186   simple_type_name -> INT
Rule 187   simple_type_name -> LONG
Rule 188   simple_type_name -> SIGNED
Rule 189   simple_type_name -> UNSIGNED
Rule 190   simple_type_name -> FLOAT
Rule 191   simple_type_name -> DOUBLE
Rule 192   simple_type_name -> VOID
Rule 193   simple_type_name -> STRING
Rule 194   simple_type_name -> AUTO
Rule 195   complex_type_specifier -> class_key IDENTIFIER
Rule 196   complex_type_specifier -> class_key IDENTIFIER template_class_name
Rule 197   complex_type_specifier -> TYPE IDENTIFIER
Rule 198   complex_type_specifier -> TYPE IDENTIFIER template_class_name
Rule 199   pure_specifier -> EQUAL NUMBER
Rule 200   class_head -> class_key IDENTIFIER base_spec
Rule 201   class_head -> class_key IDENTIFIER
Rule 202   base_spec -> COLON base_list
Rule 203   base_list -> base_specifier
Rule 204   base_list -> base_list COMMA base_specifier
Rule 205   base_specifier -> class_key IDENTIFIER
Rule 206   base_specifier -> class_key IDENTIFIER template_class_name
Rule 207   base_specifier -> IDENTIFIER
Rule 208   base_specifier -> IDENTIFIER template_class_name
Rule 209   base_specifier -> access_specifier class_key IDENTIFIER
Rule 210   base_specifier -> access_specifier class_key IDENTIFIER template_class_name
Rule 211   class_key -> CLASS
Rule 212   class_key -> STRUCT
Rule 213   class_define_specifier -> class_head LCPAREN member_list RCPAREN
Rule 214   class_define_specifier -> class_head LCPAREN RCPAREN
Rule 215   member_list -> member_access_list
Rule 216   member_list -> access_list
Rule 217   member_list -> member_list access_list
Rule 218   access_specifier -> PRIVATE
Rule 219   access_specifier -> PROTECTED
Rule 220   access_specifier -> PUBLIC
Rule 221   access_list -> access_specifier COLON member_access_list
Rule 222   access_list -> access_specifier COLON
Rule 223   member_access_list -> member_declaration member_access_list
Rule 224   member_access_list -> member_declaration
Rule 225   member_declaration -> type_specifier_ member_declarator_list SEMICOLON
Rule 226   member_declaration -> member_declarator_list SEMICOLON
Rule 227   member_declaration -> type_specifier_ SEMICOLON
Rule 228   member_declaration -> SEMICOLON
Rule 229   member_declaration -> function_definition
Rule 230   member_declaration -> class_define_specifier SEMICOLON
Rule 231   member_declarator_list -> member_declarator
Rule 232   member_declarator_list -> member_declarator_list COMMA member_declarator
Rule 233   member_declarator -> declarator pure_specifier
Rule 234   member_declarator -> declarator
Rule 235   function_definition -> type_specifier_ declarator fct_body
Rule 236   fct_body -> compound_statement
Rule 237   compound_statement -> LCPAREN statement_list RCPAREN
Rule 238   compound_statement -> LCPAREN RCPAREN
Rule 239   statement_list -> statement
Rule 240   statement_list -> statement_list statement
Rule 241   statement -> labeled_statement
Rule 242   statement -> expression_statement
Rule 243   statement -> compound_statement
Rule 244   statement -> selection_statement
Rule 245   statement -> iteration_statement
Rule 246   statement -> jump_statement
Rule 247   statement -> declaration_statement
Rule 248   statement -> try_block
Rule 249   jump_statement -> BREAK SEMICOLON
Rule 250   jump_statement -> CONTINUE SEMICOLON
Rule 251   jump_statement -> RETURN expression SEMICOLON
Rule 252   jump_statement -> RETURN SEMICOLON
Rule 253   jump_statement -> GOTO IDENTIFIER SEMICOLON
Rule 254   selection_statement -> IF LPAREN expression RPAREN statement
Rule 255   selection_statement -> IF LPAREN expression RPAREN statement ELSE statement
Rule 256   selection_statement -> SWITCH LPAREN expression RPAREN statement
Rule 257   try_block -> TRY compound_statement CATCH compound_statement
Rule 258   labeled_statement -> IDENTIFIER COLON statement
Rule 259   labeled_statement -> CASE constant_expression COLON statement
Rule 260   labeled_statement -> DEFAULT COLON statement
Rule 261   iteration_statement -> WHILE LPAREN expression RPAREN statement
Rule 262   iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON
Rule 263   iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
Rule 264   iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
Rule 265   iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
Rule 266   iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement
Rule 267   for_init_statement -> expression_statement
Rule 268   for_init_statement -> declaration_statement
Rule 269   expression_statement -> expression SEMICOLON
Rule 270   expression_statement -> SEMICOLON
Rule 271   declaration_statement -> declaration
Rule 272   declaration -> type_specifier_ declarator_list SEMICOLON
Rule 273   declaration -> type_specifier_ SEMICOLON
Rule 274   declaration -> asm_declaration
Rule 275   declaration -> function_definition
Rule 276   declaration -> class_define_specifier SEMICOLON
Rule 277   declaration -> template_declaration
Rule 278   template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
Rule 279   template_argument_list -> argument_declaration
Rule 280   template_argument_list -> template_argument_list COMMA argument_declaration
Rule 281   declarator_list -> init_declarator
Rule 282   declarator_list -> declarator_list COMMA init_declarator
Rule 283   init_declarator -> declarator initializer
Rule 284   init_declarator -> declarator
Rule 285   initializer -> EQUAL assignment_expression
Rule 286   initializer -> EQUAL LCPAREN initializer_list RCPAREN
Rule 287   initializer -> EQUAL LCPAREN initializer_list COMMA RCPAREN
Rule 288   initializer -> LPAREN expression_list RPAREN
Rule 289   initializer_list -> assignment_expression
Rule 290   initializer_list -> initializer_list COMMA assignment_expression
Rule 291   initializer_list -> LCPAREN initializer_list RCPAREN
Rule 292   initializer_list -> LCPAREN initializer_list COMMA RCPAREN
Rule 293   asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON
Rule 294   expression_list -> assignment_expression
Rule 295   expression_list -> expression_list COMMA assignment_expression

Terminals, with rules where they appear

ANDOP                : 18 165
ARROW                : 99 171
ARROWSTAR            : 45 170
ASM                  : 293
AUTO                 : 194
BANDEQOP             : 61 156
BANDOP               : 24 90 144
BNOP                 : 88 145
BOREQOP              : 62
BREAK                : 249
CASE                 : 259
CATCH                : 257
CHAR                 : 184
CLASS                : 211
COLON                : 14 202 221 222 258 259 260
COMMA                : 48 125 169 176 204 232 280 282 287 290 292 295
CONST                : 179
CONTINUE             : 250
DEFAULT              : 260
DELETE               : 72 137
DIVEQOP              : 55 153
DIVOP                : 41 141
DMINUSOP             : 65 101 168
DO                   : 262
DOT                  : 98
DOTSTAR              : 44
DOUBLE               : 191
DOUBLEBNOP           : 134
DPLUSOP              : 64 100 167
ELSE                 : 255
EQCOMP               : 26 161
EQUAL                : 53 127 130 131 147 199 285 286 287
FLOAT                : 190
FOR                  : 263 264 265 266
GOTO                 : 253
GTCOMP               : 4 30 149
GTECOMP              : 32 164
HASHTAG              : 3
IDENTIFIER           : 132 134 195 196 197 198 200 201 205 206 207 208 209 210 253 258
IF                   : 254 255
INCLUDE              : 3
INT                  : 186
LCPAREN              : 213 214 237 238 286 287 291 292
LONG                 : 187
LPAREN               : 69 75 76 83 84 93 94 95 96 97 104 110 119 172 254 255 256 261 262 263 264 265 266 288 293
LSHIFT               : 34 157
LSHIFTEQOP           : 59 160
LSPAREN              : 81 82 92 113 114 115 116 120 121 173
LTCOMP               : 4 29 148
LTECOMP              : 31 163
LTEMPLATE            : 174 278
MINUSEQOP            : 58 151
MINUSOP              : 38 86 139
MODEQOP              : 56 154
MODOP                : 42 142
MULTEQOP             : 54 152
MULTOP               : 40 79 80 89 140
NEQCOMP              : 27 162
NEW                  : 73 74 75 76 136
NOTSYM               : 87 146
NUMBER               : 106 199
OPERATOR             : 135
OROP                 : 16 20 166
PLUSEQOP             : 57 150
PLUSOP               : 37 85 138
PRIVATE              : 218
PROTECTED            : 219
PUBLIC               : 220
QUESMARK             : 14
RCPAREN              : 213 214 237 238 286 287 291 292
RETURN               : 251 252
RPAREN               : 69 75 76 83 84 93 94 95 96 97 104 110 119 172 254 255 256 261 262 263 264 265 266 288 293
RSHIFT               : 35 158
RSHIFTEQOP           : 60 159
RSPAREN              : 81 82 92 113 114 115 116 120 121 173
RTEMPLATE            : 174 278
SCHAR                : 108
SEMICOLON            : 225 226 227 228 230 249 250 251 252 253 262 263 264 265 266 269 270 272 273 276 293
SHORT                : 185
SIGNED               : 188
SIZEOF               : 68 69
STRING               : 193
STRING_L             : 4 5 107 293
STRUCT               : 212
SWITCH               : 256
TEMPLATE             : 278
THIS                 : 103
THROW                : 49 50
TRY                  : 257
TYPE                 : 197 198
TYPEDEF              : 180
UNSIGNED             : 189
VOID                 : 192
WHILE                : 261 262
XOREQOP              : 155
XOROP                : 22 143
error                : 

Nonterminals, with rules where they appear

AND_expression       : 21 22 24
abstract_declarator  : 112 114 116 128 130 177
access_list          : 216 217
access_specifier     : 209 210 221 222
additive_expression  : 33 34 35 37 38
allocation_expression : 70
arg_declaration_list : 122 125
argument_declaration : 124 125 279 280
argument_declaration_list : 119
asm_declaration      : 274
assignment_expression : 46 48 52 285 289 290 294 295
assignment_operator  : 52
base_list            : 202 204
base_spec            : 200
base_specifier       : 203 204
cast_expression      : 43 44 45 66 67 72 110
class_define_specifier : 230 276
class_head           : 213 214
class_key            : 195 196 200 201 205 206 209 210
complex_type_specifier : 183
compound_statement   : 236 243 257 257
conditional_expression : 12 14 51
constant_expression  : 113 114 120 259
control_line         : 1 6
control_line_stmt    : 1 2
deallocation_expression : 71
declaration          : 9 10 271 278
declaration_seq      : 8 9
declaration_statement : 247 268
declarator           : 118 119 120 121 126 127 233 234 235 283 284
declarator_list      : 272 282
empty                : 123
equality_expression  : 23 24 26 27
exclusive_OR_expression : 19 20 22
expression           : 14 48 49 81 82 92 104 127 130 131 251 254 255 256 261 262 263 263 264 265 269
expression_list      : 93 94 96 288 295
expression_statement : 242 267
fct_body             : 235
for_init_statement   : 263 264 265 266
function_definition  : 229 275
include_control      : 4 5
inclusive_OR_expression : 17 18 20
init_declarator      : 281 282
initializer          : 283
initializer_list     : 83 286 287 290 291 292
iteration_statement  : 245
jump_statement       : 246
labeled_statement    : 241
literal              : 102
logical_AND_expression : 15 16 18
logical_OR_expression : 13 14 16
member_access_list   : 215 221 223
member_declaration   : 223 224
member_declarator    : 231 232
member_declarator_list : 225 226 232
member_list          : 213 217
multiplicative_expression : 36 37 38 40 41 42
name                 : 98 99 105 117
new_declarator       : 77 79 81
new_initializer      : 73 75
new_type_name        : 73 74
operator_function_name : 133
operator_name        : 135
pm_expression        : 39 40 41 42 44 45
postfix_expression   : 63 92 93 94 95 98 99 100 101
primary_expression   : 91
program              : 0
pure_specifier       : 233
relational_expression : 25 26 27 29 30 31 32
selection_statement  : 244
shift_expression     : 28 29 30 31 32 34 35
simple_type_name     : 96 97 182
statement            : 239 240 254 255 255 256 258 259 260 261 262 263 264 265 266
statement_list       : 237 240
template_arg_list    : 174 176
template_argument_list : 278 280
template_class_name  : 94 196 198 206 208 210
template_declaration : 277
throw_expression     : 47
translation_unit     : 6 7
try_block            : 248
type_name            : 69 75 76 110 175 176
type_specifier       : 179 180 181
type_specifier_      : 77 78 126 127 128 129 130 131 177 178 225 227 235 272 273
unary1_operator      : 66
unary2_operator      : 67 111 112 118
unary_expression     : 52 64 65 68 109

Parsing method: LALR

state 0

    (0) S' -> . program
    (6) program -> . control_line translation_unit
    (7) program -> . translation_unit
    (1) control_line -> . control_line control_line_stmt
    (2) control_line -> . control_line_stmt
    (8) translation_unit -> . declaration_seq
    (4) control_line_stmt -> . include_control LTCOMP STRING_L GTCOMP
    (5) control_line_stmt -> . include_control STRING_L
    (9) declaration_seq -> . declaration_seq declaration
    (10) declaration_seq -> . declaration
    (3) include_control -> . HASHTAG INCLUDE
    (272) declaration -> . type_specifier_ declarator_list SEMICOLON
    (273) declaration -> . type_specifier_ SEMICOLON
    (274) declaration -> . asm_declaration
    (275) declaration -> . function_definition
    (276) declaration -> . class_define_specifier SEMICOLON
    (277) declaration -> . template_declaration
    (179) type_specifier_ -> . CONST type_specifier
    (180) type_specifier_ -> . TYPEDEF type_specifier
    (181) type_specifier_ -> . type_specifier
    (293) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (235) function_definition -> . type_specifier_ declarator fct_body
    (213) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (214) class_define_specifier -> . class_head LCPAREN RCPAREN
    (278) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (182) type_specifier -> . simple_type_name
    (183) type_specifier -> . complex_type_specifier
    (200) class_head -> . class_key IDENTIFIER base_spec
    (201) class_head -> . class_key IDENTIFIER
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (195) complex_type_specifier -> . class_key IDENTIFIER
    (196) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (197) complex_type_specifier -> . TYPE IDENTIFIER
    (198) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (211) class_key -> . CLASS
    (212) class_key -> . STRUCT

    HASHTAG         shift and go to state 8
    CONST           shift and go to state 14
    TYPEDEF         shift and go to state 16
    ASM             shift and go to state 17
    TEMPLATE        shift and go to state 19
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    TYPE            shift and go to state 34
    CLASS           shift and go to state 35
    STRUCT          shift and go to state 36

    program                        shift and go to state 1
    control_line                   shift and go to state 2
    translation_unit               shift and go to state 3
    control_line_stmt              shift and go to state 4
    declaration_seq                shift and go to state 5
    include_control                shift and go to state 6
    declaration                    shift and go to state 7
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    class_define_specifier         shift and go to state 12
    template_declaration           shift and go to state 13
    type_specifier                 shift and go to state 15
    class_head                     shift and go to state 18
    simple_type_name               shift and go to state 20
    complex_type_specifier         shift and go to state 21
    class_key                      shift and go to state 22

state 1

    (0) S' -> program .



state 2

    (6) program -> control_line . translation_unit
    (1) control_line -> control_line . control_line_stmt
    (8) translation_unit -> . declaration_seq
    (4) control_line_stmt -> . include_control LTCOMP STRING_L GTCOMP
    (5) control_line_stmt -> . include_control STRING_L
    (9) declaration_seq -> . declaration_seq declaration
    (10) declaration_seq -> . declaration
    (3) include_control -> . HASHTAG INCLUDE
    (272) declaration -> . type_specifier_ declarator_list SEMICOLON
    (273) declaration -> . type_specifier_ SEMICOLON
    (274) declaration -> . asm_declaration
    (275) declaration -> . function_definition
    (276) declaration -> . class_define_specifier SEMICOLON
    (277) declaration -> . template_declaration
    (179) type_specifier_ -> . CONST type_specifier
    (180) type_specifier_ -> . TYPEDEF type_specifier
    (181) type_specifier_ -> . type_specifier
    (293) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (235) function_definition -> . type_specifier_ declarator fct_body
    (213) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (214) class_define_specifier -> . class_head LCPAREN RCPAREN
    (278) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (182) type_specifier -> . simple_type_name
    (183) type_specifier -> . complex_type_specifier
    (200) class_head -> . class_key IDENTIFIER base_spec
    (201) class_head -> . class_key IDENTIFIER
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (195) complex_type_specifier -> . class_key IDENTIFIER
    (196) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (197) complex_type_specifier -> . TYPE IDENTIFIER
    (198) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (211) class_key -> . CLASS
    (212) class_key -> . STRUCT

    HASHTAG         shift and go to state 8
    CONST           shift and go to state 14
    TYPEDEF         shift and go to state 16
    ASM             shift and go to state 17
    TEMPLATE        shift and go to state 19
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    TYPE            shift and go to state 34
    CLASS           shift and go to state 35
    STRUCT          shift and go to state 36

    translation_unit               shift and go to state 37
    control_line_stmt              shift and go to state 38
    declaration_seq                shift and go to state 5
    include_control                shift and go to state 6
    declaration                    shift and go to state 7
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    class_define_specifier         shift and go to state 12
    template_declaration           shift and go to state 13
    type_specifier                 shift and go to state 15
    class_head                     shift and go to state 18
    simple_type_name               shift and go to state 20
    complex_type_specifier         shift and go to state 21
    class_key                      shift and go to state 22

state 3

    (7) program -> translation_unit .

    $end            reduce using rule 7 (program -> translation_unit .)


state 4

    (2) control_line -> control_line_stmt .

    HASHTAG         reduce using rule 2 (control_line -> control_line_stmt .)
    CONST           reduce using rule 2 (control_line -> control_line_stmt .)
    TYPEDEF         reduce using rule 2 (control_line -> control_line_stmt .)
    ASM             reduce using rule 2 (control_line -> control_line_stmt .)
    TEMPLATE        reduce using rule 2 (control_line -> control_line_stmt .)
    CHAR            reduce using rule 2 (control_line -> control_line_stmt .)
    SHORT           reduce using rule 2 (control_line -> control_line_stmt .)
    INT             reduce using rule 2 (control_line -> control_line_stmt .)
    LONG            reduce using rule 2 (control_line -> control_line_stmt .)
    SIGNED          reduce using rule 2 (control_line -> control_line_stmt .)
    UNSIGNED        reduce using rule 2 (control_line -> control_line_stmt .)
    FLOAT           reduce using rule 2 (control_line -> control_line_stmt .)
    DOUBLE          reduce using rule 2 (control_line -> control_line_stmt .)
    VOID            reduce using rule 2 (control_line -> control_line_stmt .)
    STRING          reduce using rule 2 (control_line -> control_line_stmt .)
    AUTO            reduce using rule 2 (control_line -> control_line_stmt .)
    TYPE            reduce using rule 2 (control_line -> control_line_stmt .)
    CLASS           reduce using rule 2 (control_line -> control_line_stmt .)
    STRUCT          reduce using rule 2 (control_line -> control_line_stmt .)


state 5

    (8) translation_unit -> declaration_seq .
    (9) declaration_seq -> declaration_seq . declaration
    (272) declaration -> . type_specifier_ declarator_list SEMICOLON
    (273) declaration -> . type_specifier_ SEMICOLON
    (274) declaration -> . asm_declaration
    (275) declaration -> . function_definition
    (276) declaration -> . class_define_specifier SEMICOLON
    (277) declaration -> . template_declaration
    (179) type_specifier_ -> . CONST type_specifier
    (180) type_specifier_ -> . TYPEDEF type_specifier
    (181) type_specifier_ -> . type_specifier
    (293) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (235) function_definition -> . type_specifier_ declarator fct_body
    (213) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (214) class_define_specifier -> . class_head LCPAREN RCPAREN
    (278) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (182) type_specifier -> . simple_type_name
    (183) type_specifier -> . complex_type_specifier
    (200) class_head -> . class_key IDENTIFIER base_spec
    (201) class_head -> . class_key IDENTIFIER
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (195) complex_type_specifier -> . class_key IDENTIFIER
    (196) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (197) complex_type_specifier -> . TYPE IDENTIFIER
    (198) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (211) class_key -> . CLASS
    (212) class_key -> . STRUCT

    $end            reduce using rule 8 (translation_unit -> declaration_seq .)
    CONST           shift and go to state 14
    TYPEDEF         shift and go to state 16
    ASM             shift and go to state 17
    TEMPLATE        shift and go to state 19
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    TYPE            shift and go to state 34
    CLASS           shift and go to state 35
    STRUCT          shift and go to state 36

    declaration                    shift and go to state 39
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    class_define_specifier         shift and go to state 12
    template_declaration           shift and go to state 13
    type_specifier                 shift and go to state 15
    class_head                     shift and go to state 18
    simple_type_name               shift and go to state 20
    complex_type_specifier         shift and go to state 21
    class_key                      shift and go to state 22

state 6

    (4) control_line_stmt -> include_control . LTCOMP STRING_L GTCOMP
    (5) control_line_stmt -> include_control . STRING_L

    LTCOMP          shift and go to state 40
    STRING_L        shift and go to state 41


state 7

    (10) declaration_seq -> declaration .

    CONST           reduce using rule 10 (declaration_seq -> declaration .)
    TYPEDEF         reduce using rule 10 (declaration_seq -> declaration .)
    ASM             reduce using rule 10 (declaration_seq -> declaration .)
    TEMPLATE        reduce using rule 10 (declaration_seq -> declaration .)
    CHAR            reduce using rule 10 (declaration_seq -> declaration .)
    SHORT           reduce using rule 10 (declaration_seq -> declaration .)
    INT             reduce using rule 10 (declaration_seq -> declaration .)
    LONG            reduce using rule 10 (declaration_seq -> declaration .)
    SIGNED          reduce using rule 10 (declaration_seq -> declaration .)
    UNSIGNED        reduce using rule 10 (declaration_seq -> declaration .)
    FLOAT           reduce using rule 10 (declaration_seq -> declaration .)
    DOUBLE          reduce using rule 10 (declaration_seq -> declaration .)
    VOID            reduce using rule 10 (declaration_seq -> declaration .)
    STRING          reduce using rule 10 (declaration_seq -> declaration .)
    AUTO            reduce using rule 10 (declaration_seq -> declaration .)
    TYPE            reduce using rule 10 (declaration_seq -> declaration .)
    CLASS           reduce using rule 10 (declaration_seq -> declaration .)
    STRUCT          reduce using rule 10 (declaration_seq -> declaration .)
    $end            reduce using rule 10 (declaration_seq -> declaration .)


state 8

    (3) include_control -> HASHTAG . INCLUDE

    INCLUDE         shift and go to state 42


state 9

    (272) declaration -> type_specifier_ . declarator_list SEMICOLON
    (273) declaration -> type_specifier_ . SEMICOLON
    (235) function_definition -> type_specifier_ . declarator fct_body
    (281) declarator_list -> . init_declarator
    (282) declarator_list -> . declarator_list COMMA init_declarator
    (117) declarator -> . name
    (118) declarator -> . unary2_operator declarator
    (119) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (120) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (121) declarator -> . declarator LSPAREN RSPAREN
    (283) init_declarator -> . declarator initializer
    (284) init_declarator -> . declarator
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (135) operator_function_name -> . OPERATOR operator_name

    SEMICOLON       shift and go to state 44
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    OPERATOR        shift and go to state 54

    declarator_list                shift and go to state 43
    declarator                     shift and go to state 45
    init_declarator                shift and go to state 46
    name                           shift and go to state 47
    unary2_operator                shift and go to state 48
    operator_function_name         shift and go to state 50

state 10

    (274) declaration -> asm_declaration .

    CONST           reduce using rule 274 (declaration -> asm_declaration .)
    TYPEDEF         reduce using rule 274 (declaration -> asm_declaration .)
    ASM             reduce using rule 274 (declaration -> asm_declaration .)
    TEMPLATE        reduce using rule 274 (declaration -> asm_declaration .)
    CHAR            reduce using rule 274 (declaration -> asm_declaration .)
    SHORT           reduce using rule 274 (declaration -> asm_declaration .)
    INT             reduce using rule 274 (declaration -> asm_declaration .)
    LONG            reduce using rule 274 (declaration -> asm_declaration .)
    SIGNED          reduce using rule 274 (declaration -> asm_declaration .)
    UNSIGNED        reduce using rule 274 (declaration -> asm_declaration .)
    FLOAT           reduce using rule 274 (declaration -> asm_declaration .)
    DOUBLE          reduce using rule 274 (declaration -> asm_declaration .)
    VOID            reduce using rule 274 (declaration -> asm_declaration .)
    STRING          reduce using rule 274 (declaration -> asm_declaration .)
    AUTO            reduce using rule 274 (declaration -> asm_declaration .)
    TYPE            reduce using rule 274 (declaration -> asm_declaration .)
    CLASS           reduce using rule 274 (declaration -> asm_declaration .)
    STRUCT          reduce using rule 274 (declaration -> asm_declaration .)
    $end            reduce using rule 274 (declaration -> asm_declaration .)
    RCPAREN         reduce using rule 274 (declaration -> asm_declaration .)
    IDENTIFIER      reduce using rule 274 (declaration -> asm_declaration .)
    CASE            reduce using rule 274 (declaration -> asm_declaration .)
    DEFAULT         reduce using rule 274 (declaration -> asm_declaration .)
    SEMICOLON       reduce using rule 274 (declaration -> asm_declaration .)
    LCPAREN         reduce using rule 274 (declaration -> asm_declaration .)
    IF              reduce using rule 274 (declaration -> asm_declaration .)
    SWITCH          reduce using rule 274 (declaration -> asm_declaration .)
    WHILE           reduce using rule 274 (declaration -> asm_declaration .)
    DO              reduce using rule 274 (declaration -> asm_declaration .)
    FOR             reduce using rule 274 (declaration -> asm_declaration .)
    BREAK           reduce using rule 274 (declaration -> asm_declaration .)
    CONTINUE        reduce using rule 274 (declaration -> asm_declaration .)
    RETURN          reduce using rule 274 (declaration -> asm_declaration .)
    GOTO            reduce using rule 274 (declaration -> asm_declaration .)
    TRY             reduce using rule 274 (declaration -> asm_declaration .)
    THROW           reduce using rule 274 (declaration -> asm_declaration .)
    DPLUSOP         reduce using rule 274 (declaration -> asm_declaration .)
    DMINUSOP        reduce using rule 274 (declaration -> asm_declaration .)
    SIZEOF          reduce using rule 274 (declaration -> asm_declaration .)
    PLUSOP          reduce using rule 274 (declaration -> asm_declaration .)
    MINUSOP         reduce using rule 274 (declaration -> asm_declaration .)
    NOTSYM          reduce using rule 274 (declaration -> asm_declaration .)
    BNOP            reduce using rule 274 (declaration -> asm_declaration .)
    MULTOP          reduce using rule 274 (declaration -> asm_declaration .)
    BANDOP          reduce using rule 274 (declaration -> asm_declaration .)
    NEW             reduce using rule 274 (declaration -> asm_declaration .)
    DELETE          reduce using rule 274 (declaration -> asm_declaration .)
    THIS            reduce using rule 274 (declaration -> asm_declaration .)
    LPAREN          reduce using rule 274 (declaration -> asm_declaration .)
    NUMBER          reduce using rule 274 (declaration -> asm_declaration .)
    STRING_L        reduce using rule 274 (declaration -> asm_declaration .)
    SCHAR           reduce using rule 274 (declaration -> asm_declaration .)
    DOUBLEBNOP      reduce using rule 274 (declaration -> asm_declaration .)
    OPERATOR        reduce using rule 274 (declaration -> asm_declaration .)
    ELSE            reduce using rule 274 (declaration -> asm_declaration .)


state 11

    (275) declaration -> function_definition .

    CONST           reduce using rule 275 (declaration -> function_definition .)
    TYPEDEF         reduce using rule 275 (declaration -> function_definition .)
    ASM             reduce using rule 275 (declaration -> function_definition .)
    TEMPLATE        reduce using rule 275 (declaration -> function_definition .)
    CHAR            reduce using rule 275 (declaration -> function_definition .)
    SHORT           reduce using rule 275 (declaration -> function_definition .)
    INT             reduce using rule 275 (declaration -> function_definition .)
    LONG            reduce using rule 275 (declaration -> function_definition .)
    SIGNED          reduce using rule 275 (declaration -> function_definition .)
    UNSIGNED        reduce using rule 275 (declaration -> function_definition .)
    FLOAT           reduce using rule 275 (declaration -> function_definition .)
    DOUBLE          reduce using rule 275 (declaration -> function_definition .)
    VOID            reduce using rule 275 (declaration -> function_definition .)
    STRING          reduce using rule 275 (declaration -> function_definition .)
    AUTO            reduce using rule 275 (declaration -> function_definition .)
    TYPE            reduce using rule 275 (declaration -> function_definition .)
    CLASS           reduce using rule 275 (declaration -> function_definition .)
    STRUCT          reduce using rule 275 (declaration -> function_definition .)
    $end            reduce using rule 275 (declaration -> function_definition .)
    RCPAREN         reduce using rule 275 (declaration -> function_definition .)
    IDENTIFIER      reduce using rule 275 (declaration -> function_definition .)
    CASE            reduce using rule 275 (declaration -> function_definition .)
    DEFAULT         reduce using rule 275 (declaration -> function_definition .)
    SEMICOLON       reduce using rule 275 (declaration -> function_definition .)
    LCPAREN         reduce using rule 275 (declaration -> function_definition .)
    IF              reduce using rule 275 (declaration -> function_definition .)
    SWITCH          reduce using rule 275 (declaration -> function_definition .)
    WHILE           reduce using rule 275 (declaration -> function_definition .)
    DO              reduce using rule 275 (declaration -> function_definition .)
    FOR             reduce using rule 275 (declaration -> function_definition .)
    BREAK           reduce using rule 275 (declaration -> function_definition .)
    CONTINUE        reduce using rule 275 (declaration -> function_definition .)
    RETURN          reduce using rule 275 (declaration -> function_definition .)
    GOTO            reduce using rule 275 (declaration -> function_definition .)
    TRY             reduce using rule 275 (declaration -> function_definition .)
    THROW           reduce using rule 275 (declaration -> function_definition .)
    DPLUSOP         reduce using rule 275 (declaration -> function_definition .)
    DMINUSOP        reduce using rule 275 (declaration -> function_definition .)
    SIZEOF          reduce using rule 275 (declaration -> function_definition .)
    PLUSOP          reduce using rule 275 (declaration -> function_definition .)
    MINUSOP         reduce using rule 275 (declaration -> function_definition .)
    NOTSYM          reduce using rule 275 (declaration -> function_definition .)
    BNOP            reduce using rule 275 (declaration -> function_definition .)
    MULTOP          reduce using rule 275 (declaration -> function_definition .)
    BANDOP          reduce using rule 275 (declaration -> function_definition .)
    NEW             reduce using rule 275 (declaration -> function_definition .)
    DELETE          reduce using rule 275 (declaration -> function_definition .)
    THIS            reduce using rule 275 (declaration -> function_definition .)
    LPAREN          reduce using rule 275 (declaration -> function_definition .)
    NUMBER          reduce using rule 275 (declaration -> function_definition .)
    STRING_L        reduce using rule 275 (declaration -> function_definition .)
    SCHAR           reduce using rule 275 (declaration -> function_definition .)
    DOUBLEBNOP      reduce using rule 275 (declaration -> function_definition .)
    OPERATOR        reduce using rule 275 (declaration -> function_definition .)
    ELSE            reduce using rule 275 (declaration -> function_definition .)


state 12

    (276) declaration -> class_define_specifier . SEMICOLON

    SEMICOLON       shift and go to state 55


state 13

    (277) declaration -> template_declaration .

    CONST           reduce using rule 277 (declaration -> template_declaration .)
    TYPEDEF         reduce using rule 277 (declaration -> template_declaration .)
    ASM             reduce using rule 277 (declaration -> template_declaration .)
    TEMPLATE        reduce using rule 277 (declaration -> template_declaration .)
    CHAR            reduce using rule 277 (declaration -> template_declaration .)
    SHORT           reduce using rule 277 (declaration -> template_declaration .)
    INT             reduce using rule 277 (declaration -> template_declaration .)
    LONG            reduce using rule 277 (declaration -> template_declaration .)
    SIGNED          reduce using rule 277 (declaration -> template_declaration .)
    UNSIGNED        reduce using rule 277 (declaration -> template_declaration .)
    FLOAT           reduce using rule 277 (declaration -> template_declaration .)
    DOUBLE          reduce using rule 277 (declaration -> template_declaration .)
    VOID            reduce using rule 277 (declaration -> template_declaration .)
    STRING          reduce using rule 277 (declaration -> template_declaration .)
    AUTO            reduce using rule 277 (declaration -> template_declaration .)
    TYPE            reduce using rule 277 (declaration -> template_declaration .)
    CLASS           reduce using rule 277 (declaration -> template_declaration .)
    STRUCT          reduce using rule 277 (declaration -> template_declaration .)
    $end            reduce using rule 277 (declaration -> template_declaration .)
    RCPAREN         reduce using rule 277 (declaration -> template_declaration .)
    IDENTIFIER      reduce using rule 277 (declaration -> template_declaration .)
    CASE            reduce using rule 277 (declaration -> template_declaration .)
    DEFAULT         reduce using rule 277 (declaration -> template_declaration .)
    SEMICOLON       reduce using rule 277 (declaration -> template_declaration .)
    LCPAREN         reduce using rule 277 (declaration -> template_declaration .)
    IF              reduce using rule 277 (declaration -> template_declaration .)
    SWITCH          reduce using rule 277 (declaration -> template_declaration .)
    WHILE           reduce using rule 277 (declaration -> template_declaration .)
    DO              reduce using rule 277 (declaration -> template_declaration .)
    FOR             reduce using rule 277 (declaration -> template_declaration .)
    BREAK           reduce using rule 277 (declaration -> template_declaration .)
    CONTINUE        reduce using rule 277 (declaration -> template_declaration .)
    RETURN          reduce using rule 277 (declaration -> template_declaration .)
    GOTO            reduce using rule 277 (declaration -> template_declaration .)
    TRY             reduce using rule 277 (declaration -> template_declaration .)
    THROW           reduce using rule 277 (declaration -> template_declaration .)
    DPLUSOP         reduce using rule 277 (declaration -> template_declaration .)
    DMINUSOP        reduce using rule 277 (declaration -> template_declaration .)
    SIZEOF          reduce using rule 277 (declaration -> template_declaration .)
    PLUSOP          reduce using rule 277 (declaration -> template_declaration .)
    MINUSOP         reduce using rule 277 (declaration -> template_declaration .)
    NOTSYM          reduce using rule 277 (declaration -> template_declaration .)
    BNOP            reduce using rule 277 (declaration -> template_declaration .)
    MULTOP          reduce using rule 277 (declaration -> template_declaration .)
    BANDOP          reduce using rule 277 (declaration -> template_declaration .)
    NEW             reduce using rule 277 (declaration -> template_declaration .)
    DELETE          reduce using rule 277 (declaration -> template_declaration .)
    THIS            reduce using rule 277 (declaration -> template_declaration .)
    LPAREN          reduce using rule 277 (declaration -> template_declaration .)
    NUMBER          reduce using rule 277 (declaration -> template_declaration .)
    STRING_L        reduce using rule 277 (declaration -> template_declaration .)
    SCHAR           reduce using rule 277 (declaration -> template_declaration .)
    DOUBLEBNOP      reduce using rule 277 (declaration -> template_declaration .)
    OPERATOR        reduce using rule 277 (declaration -> template_declaration .)
    ELSE            reduce using rule 277 (declaration -> template_declaration .)


state 14

    (179) type_specifier_ -> CONST . type_specifier
    (182) type_specifier -> . simple_type_name
    (183) type_specifier -> . complex_type_specifier
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (195) complex_type_specifier -> . class_key IDENTIFIER
    (196) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (197) complex_type_specifier -> . TYPE IDENTIFIER
    (198) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (211) class_key -> . CLASS
    (212) class_key -> . STRUCT

    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    TYPE            shift and go to state 34
    CLASS           shift and go to state 35
    STRUCT          shift and go to state 36

    type_specifier                 shift and go to state 56
    simple_type_name               shift and go to state 20
    complex_type_specifier         shift and go to state 21
    class_key                      shift and go to state 57

state 15

    (181) type_specifier_ -> type_specifier .

    SEMICOLON       reduce using rule 181 (type_specifier_ -> type_specifier .)
    IDENTIFIER      reduce using rule 181 (type_specifier_ -> type_specifier .)
    DOUBLEBNOP      reduce using rule 181 (type_specifier_ -> type_specifier .)
    MULTOP          reduce using rule 181 (type_specifier_ -> type_specifier .)
    BANDOP          reduce using rule 181 (type_specifier_ -> type_specifier .)
    OPERATOR        reduce using rule 181 (type_specifier_ -> type_specifier .)
    EQUAL           reduce using rule 181 (type_specifier_ -> type_specifier .)
    LSPAREN         reduce using rule 181 (type_specifier_ -> type_specifier .)
    RTEMPLATE       reduce using rule 181 (type_specifier_ -> type_specifier .)
    COMMA           reduce using rule 181 (type_specifier_ -> type_specifier .)
    RPAREN          reduce using rule 181 (type_specifier_ -> type_specifier .)
    LPAREN          reduce using rule 181 (type_specifier_ -> type_specifier .)
    MULTEQOP        reduce using rule 181 (type_specifier_ -> type_specifier .)
    DIVEQOP         reduce using rule 181 (type_specifier_ -> type_specifier .)
    MODEQOP         reduce using rule 181 (type_specifier_ -> type_specifier .)
    PLUSEQOP        reduce using rule 181 (type_specifier_ -> type_specifier .)
    MINUSEQOP       reduce using rule 181 (type_specifier_ -> type_specifier .)
    LSHIFTEQOP      reduce using rule 181 (type_specifier_ -> type_specifier .)
    RSHIFTEQOP      reduce using rule 181 (type_specifier_ -> type_specifier .)
    BANDEQOP        reduce using rule 181 (type_specifier_ -> type_specifier .)
    BOREQOP         reduce using rule 181 (type_specifier_ -> type_specifier .)
    DOTSTAR         reduce using rule 181 (type_specifier_ -> type_specifier .)
    ARROWSTAR       reduce using rule 181 (type_specifier_ -> type_specifier .)
    DIVOP           reduce using rule 181 (type_specifier_ -> type_specifier .)
    MODOP           reduce using rule 181 (type_specifier_ -> type_specifier .)
    PLUSOP          reduce using rule 181 (type_specifier_ -> type_specifier .)
    MINUSOP         reduce using rule 181 (type_specifier_ -> type_specifier .)
    LSHIFT          reduce using rule 181 (type_specifier_ -> type_specifier .)
    RSHIFT          reduce using rule 181 (type_specifier_ -> type_specifier .)
    LTCOMP          reduce using rule 181 (type_specifier_ -> type_specifier .)
    GTCOMP          reduce using rule 181 (type_specifier_ -> type_specifier .)
    LTECOMP         reduce using rule 181 (type_specifier_ -> type_specifier .)
    GTECOMP         reduce using rule 181 (type_specifier_ -> type_specifier .)
    EQCOMP          reduce using rule 181 (type_specifier_ -> type_specifier .)
    NEQCOMP         reduce using rule 181 (type_specifier_ -> type_specifier .)
    XOROP           reduce using rule 181 (type_specifier_ -> type_specifier .)
    OROP            reduce using rule 181 (type_specifier_ -> type_specifier .)
    ANDOP           reduce using rule 181 (type_specifier_ -> type_specifier .)
    QUESMARK        reduce using rule 181 (type_specifier_ -> type_specifier .)
    RSPAREN         reduce using rule 181 (type_specifier_ -> type_specifier .)
    RCPAREN         reduce using rule 181 (type_specifier_ -> type_specifier .)
    COLON           reduce using rule 181 (type_specifier_ -> type_specifier .)


state 16

    (180) type_specifier_ -> TYPEDEF . type_specifier
    (182) type_specifier -> . simple_type_name
    (183) type_specifier -> . complex_type_specifier
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (195) complex_type_specifier -> . class_key IDENTIFIER
    (196) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (197) complex_type_specifier -> . TYPE IDENTIFIER
    (198) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (211) class_key -> . CLASS
    (212) class_key -> . STRUCT

    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    TYPE            shift and go to state 34
    CLASS           shift and go to state 35
    STRUCT          shift and go to state 36

    type_specifier                 shift and go to state 58
    simple_type_name               shift and go to state 20
    complex_type_specifier         shift and go to state 21
    class_key                      shift and go to state 57

state 17

    (293) asm_declaration -> ASM . LPAREN STRING_L RPAREN SEMICOLON

    LPAREN          shift and go to state 59


state 18

    (213) class_define_specifier -> class_head . LCPAREN member_list RCPAREN
    (214) class_define_specifier -> class_head . LCPAREN RCPAREN

    LCPAREN         shift and go to state 60


state 19

    (278) template_declaration -> TEMPLATE . LTEMPLATE template_argument_list RTEMPLATE declaration

    LTEMPLATE       shift and go to state 61


state 20

    (182) type_specifier -> simple_type_name .

    SEMICOLON       reduce using rule 182 (type_specifier -> simple_type_name .)
    IDENTIFIER      reduce using rule 182 (type_specifier -> simple_type_name .)
    DOUBLEBNOP      reduce using rule 182 (type_specifier -> simple_type_name .)
    MULTOP          reduce using rule 182 (type_specifier -> simple_type_name .)
    BANDOP          reduce using rule 182 (type_specifier -> simple_type_name .)
    OPERATOR        reduce using rule 182 (type_specifier -> simple_type_name .)
    EQUAL           reduce using rule 182 (type_specifier -> simple_type_name .)
    LSPAREN         reduce using rule 182 (type_specifier -> simple_type_name .)
    RTEMPLATE       reduce using rule 182 (type_specifier -> simple_type_name .)
    COMMA           reduce using rule 182 (type_specifier -> simple_type_name .)
    RPAREN          reduce using rule 182 (type_specifier -> simple_type_name .)
    LPAREN          reduce using rule 182 (type_specifier -> simple_type_name .)
    MULTEQOP        reduce using rule 182 (type_specifier -> simple_type_name .)
    DIVEQOP         reduce using rule 182 (type_specifier -> simple_type_name .)
    MODEQOP         reduce using rule 182 (type_specifier -> simple_type_name .)
    PLUSEQOP        reduce using rule 182 (type_specifier -> simple_type_name .)
    MINUSEQOP       reduce using rule 182 (type_specifier -> simple_type_name .)
    LSHIFTEQOP      reduce using rule 182 (type_specifier -> simple_type_name .)
    RSHIFTEQOP      reduce using rule 182 (type_specifier -> simple_type_name .)
    BANDEQOP        reduce using rule 182 (type_specifier -> simple_type_name .)
    BOREQOP         reduce using rule 182 (type_specifier -> simple_type_name .)
    DOTSTAR         reduce using rule 182 (type_specifier -> simple_type_name .)
    ARROWSTAR       reduce using rule 182 (type_specifier -> simple_type_name .)
    DIVOP           reduce using rule 182 (type_specifier -> simple_type_name .)
    MODOP           reduce using rule 182 (type_specifier -> simple_type_name .)
    PLUSOP          reduce using rule 182 (type_specifier -> simple_type_name .)
    MINUSOP         reduce using rule 182 (type_specifier -> simple_type_name .)
    LSHIFT          reduce using rule 182 (type_specifier -> simple_type_name .)
    RSHIFT          reduce using rule 182 (type_specifier -> simple_type_name .)
    LTCOMP          reduce using rule 182 (type_specifier -> simple_type_name .)
    GTCOMP          reduce using rule 182 (type_specifier -> simple_type_name .)
    LTECOMP         reduce using rule 182 (type_specifier -> simple_type_name .)
    GTECOMP         reduce using rule 182 (type_specifier -> simple_type_name .)
    EQCOMP          reduce using rule 182 (type_specifier -> simple_type_name .)
    NEQCOMP         reduce using rule 182 (type_specifier -> simple_type_name .)
    XOROP           reduce using rule 182 (type_specifier -> simple_type_name .)
    OROP            reduce using rule 182 (type_specifier -> simple_type_name .)
    ANDOP           reduce using rule 182 (type_specifier -> simple_type_name .)
    QUESMARK        reduce using rule 182 (type_specifier -> simple_type_name .)
    RSPAREN         reduce using rule 182 (type_specifier -> simple_type_name .)
    RCPAREN         reduce using rule 182 (type_specifier -> simple_type_name .)
    COLON           reduce using rule 182 (type_specifier -> simple_type_name .)


state 21

    (183) type_specifier -> complex_type_specifier .

    SEMICOLON       reduce using rule 183 (type_specifier -> complex_type_specifier .)
    IDENTIFIER      reduce using rule 183 (type_specifier -> complex_type_specifier .)
    DOUBLEBNOP      reduce using rule 183 (type_specifier -> complex_type_specifier .)
    MULTOP          reduce using rule 183 (type_specifier -> complex_type_specifier .)
    BANDOP          reduce using rule 183 (type_specifier -> complex_type_specifier .)
    OPERATOR        reduce using rule 183 (type_specifier -> complex_type_specifier .)
    EQUAL           reduce using rule 183 (type_specifier -> complex_type_specifier .)
    LSPAREN         reduce using rule 183 (type_specifier -> complex_type_specifier .)
    RTEMPLATE       reduce using rule 183 (type_specifier -> complex_type_specifier .)
    COMMA           reduce using rule 183 (type_specifier -> complex_type_specifier .)
    RPAREN          reduce using rule 183 (type_specifier -> complex_type_specifier .)
    LPAREN          reduce using rule 183 (type_specifier -> complex_type_specifier .)
    MULTEQOP        reduce using rule 183 (type_specifier -> complex_type_specifier .)
    DIVEQOP         reduce using rule 183 (type_specifier -> complex_type_specifier .)
    MODEQOP         reduce using rule 183 (type_specifier -> complex_type_specifier .)
    PLUSEQOP        reduce using rule 183 (type_specifier -> complex_type_specifier .)
    MINUSEQOP       reduce using rule 183 (type_specifier -> complex_type_specifier .)
    LSHIFTEQOP      reduce using rule 183 (type_specifier -> complex_type_specifier .)
    RSHIFTEQOP      reduce using rule 183 (type_specifier -> complex_type_specifier .)
    BANDEQOP        reduce using rule 183 (type_specifier -> complex_type_specifier .)
    BOREQOP         reduce using rule 183 (type_specifier -> complex_type_specifier .)
    DOTSTAR         reduce using rule 183 (type_specifier -> complex_type_specifier .)
    ARROWSTAR       reduce using rule 183 (type_specifier -> complex_type_specifier .)
    DIVOP           reduce using rule 183 (type_specifier -> complex_type_specifier .)
    MODOP           reduce using rule 183 (type_specifier -> complex_type_specifier .)
    PLUSOP          reduce using rule 183 (type_specifier -> complex_type_specifier .)
    MINUSOP         reduce using rule 183 (type_specifier -> complex_type_specifier .)
    LSHIFT          reduce using rule 183 (type_specifier -> complex_type_specifier .)
    RSHIFT          reduce using rule 183 (type_specifier -> complex_type_specifier .)
    LTCOMP          reduce using rule 183 (type_specifier -> complex_type_specifier .)
    GTCOMP          reduce using rule 183 (type_specifier -> complex_type_specifier .)
    LTECOMP         reduce using rule 183 (type_specifier -> complex_type_specifier .)
    GTECOMP         reduce using rule 183 (type_specifier -> complex_type_specifier .)
    EQCOMP          reduce using rule 183 (type_specifier -> complex_type_specifier .)
    NEQCOMP         reduce using rule 183 (type_specifier -> complex_type_specifier .)
    XOROP           reduce using rule 183 (type_specifier -> complex_type_specifier .)
    OROP            reduce using rule 183 (type_specifier -> complex_type_specifier .)
    ANDOP           reduce using rule 183 (type_specifier -> complex_type_specifier .)
    QUESMARK        reduce using rule 183 (type_specifier -> complex_type_specifier .)
    RSPAREN         reduce using rule 183 (type_specifier -> complex_type_specifier .)
    RCPAREN         reduce using rule 183 (type_specifier -> complex_type_specifier .)
    COLON           reduce using rule 183 (type_specifier -> complex_type_specifier .)


state 22

    (200) class_head -> class_key . IDENTIFIER base_spec
    (201) class_head -> class_key . IDENTIFIER
    (195) complex_type_specifier -> class_key . IDENTIFIER
    (196) complex_type_specifier -> class_key . IDENTIFIER template_class_name

    IDENTIFIER      shift and go to state 62


state 23

    (184) simple_type_name -> CHAR .

    SEMICOLON       reduce using rule 184 (simple_type_name -> CHAR .)
    IDENTIFIER      reduce using rule 184 (simple_type_name -> CHAR .)
    DOUBLEBNOP      reduce using rule 184 (simple_type_name -> CHAR .)
    MULTOP          reduce using rule 184 (simple_type_name -> CHAR .)
    BANDOP          reduce using rule 184 (simple_type_name -> CHAR .)
    OPERATOR        reduce using rule 184 (simple_type_name -> CHAR .)
    EQUAL           reduce using rule 184 (simple_type_name -> CHAR .)
    LSPAREN         reduce using rule 184 (simple_type_name -> CHAR .)
    RTEMPLATE       reduce using rule 184 (simple_type_name -> CHAR .)
    COMMA           reduce using rule 184 (simple_type_name -> CHAR .)
    RPAREN          reduce using rule 184 (simple_type_name -> CHAR .)
    LPAREN          reduce using rule 184 (simple_type_name -> CHAR .)
    MULTEQOP        reduce using rule 184 (simple_type_name -> CHAR .)
    DIVEQOP         reduce using rule 184 (simple_type_name -> CHAR .)
    MODEQOP         reduce using rule 184 (simple_type_name -> CHAR .)
    PLUSEQOP        reduce using rule 184 (simple_type_name -> CHAR .)
    MINUSEQOP       reduce using rule 184 (simple_type_name -> CHAR .)
    LSHIFTEQOP      reduce using rule 184 (simple_type_name -> CHAR .)
    RSHIFTEQOP      reduce using rule 184 (simple_type_name -> CHAR .)
    BANDEQOP        reduce using rule 184 (simple_type_name -> CHAR .)
    BOREQOP         reduce using rule 184 (simple_type_name -> CHAR .)
    DOTSTAR         reduce using rule 184 (simple_type_name -> CHAR .)
    ARROWSTAR       reduce using rule 184 (simple_type_name -> CHAR .)
    DIVOP           reduce using rule 184 (simple_type_name -> CHAR .)
    MODOP           reduce using rule 184 (simple_type_name -> CHAR .)
    PLUSOP          reduce using rule 184 (simple_type_name -> CHAR .)
    MINUSOP         reduce using rule 184 (simple_type_name -> CHAR .)
    LSHIFT          reduce using rule 184 (simple_type_name -> CHAR .)
    RSHIFT          reduce using rule 184 (simple_type_name -> CHAR .)
    LTCOMP          reduce using rule 184 (simple_type_name -> CHAR .)
    GTCOMP          reduce using rule 184 (simple_type_name -> CHAR .)
    LTECOMP         reduce using rule 184 (simple_type_name -> CHAR .)
    GTECOMP         reduce using rule 184 (simple_type_name -> CHAR .)
    EQCOMP          reduce using rule 184 (simple_type_name -> CHAR .)
    NEQCOMP         reduce using rule 184 (simple_type_name -> CHAR .)
    XOROP           reduce using rule 184 (simple_type_name -> CHAR .)
    OROP            reduce using rule 184 (simple_type_name -> CHAR .)
    ANDOP           reduce using rule 184 (simple_type_name -> CHAR .)
    QUESMARK        reduce using rule 184 (simple_type_name -> CHAR .)
    RSPAREN         reduce using rule 184 (simple_type_name -> CHAR .)
    RCPAREN         reduce using rule 184 (simple_type_name -> CHAR .)
    COLON           reduce using rule 184 (simple_type_name -> CHAR .)


state 24

    (185) simple_type_name -> SHORT .

    SEMICOLON       reduce using rule 185 (simple_type_name -> SHORT .)
    IDENTIFIER      reduce using rule 185 (simple_type_name -> SHORT .)
    DOUBLEBNOP      reduce using rule 185 (simple_type_name -> SHORT .)
    MULTOP          reduce using rule 185 (simple_type_name -> SHORT .)
    BANDOP          reduce using rule 185 (simple_type_name -> SHORT .)
    OPERATOR        reduce using rule 185 (simple_type_name -> SHORT .)
    EQUAL           reduce using rule 185 (simple_type_name -> SHORT .)
    LSPAREN         reduce using rule 185 (simple_type_name -> SHORT .)
    RTEMPLATE       reduce using rule 185 (simple_type_name -> SHORT .)
    COMMA           reduce using rule 185 (simple_type_name -> SHORT .)
    RPAREN          reduce using rule 185 (simple_type_name -> SHORT .)
    LPAREN          reduce using rule 185 (simple_type_name -> SHORT .)
    MULTEQOP        reduce using rule 185 (simple_type_name -> SHORT .)
    DIVEQOP         reduce using rule 185 (simple_type_name -> SHORT .)
    MODEQOP         reduce using rule 185 (simple_type_name -> SHORT .)
    PLUSEQOP        reduce using rule 185 (simple_type_name -> SHORT .)
    MINUSEQOP       reduce using rule 185 (simple_type_name -> SHORT .)
    LSHIFTEQOP      reduce using rule 185 (simple_type_name -> SHORT .)
    RSHIFTEQOP      reduce using rule 185 (simple_type_name -> SHORT .)
    BANDEQOP        reduce using rule 185 (simple_type_name -> SHORT .)
    BOREQOP         reduce using rule 185 (simple_type_name -> SHORT .)
    DOTSTAR         reduce using rule 185 (simple_type_name -> SHORT .)
    ARROWSTAR       reduce using rule 185 (simple_type_name -> SHORT .)
    DIVOP           reduce using rule 185 (simple_type_name -> SHORT .)
    MODOP           reduce using rule 185 (simple_type_name -> SHORT .)
    PLUSOP          reduce using rule 185 (simple_type_name -> SHORT .)
    MINUSOP         reduce using rule 185 (simple_type_name -> SHORT .)
    LSHIFT          reduce using rule 185 (simple_type_name -> SHORT .)
    RSHIFT          reduce using rule 185 (simple_type_name -> SHORT .)
    LTCOMP          reduce using rule 185 (simple_type_name -> SHORT .)
    GTCOMP          reduce using rule 185 (simple_type_name -> SHORT .)
    LTECOMP         reduce using rule 185 (simple_type_name -> SHORT .)
    GTECOMP         reduce using rule 185 (simple_type_name -> SHORT .)
    EQCOMP          reduce using rule 185 (simple_type_name -> SHORT .)
    NEQCOMP         reduce using rule 185 (simple_type_name -> SHORT .)
    XOROP           reduce using rule 185 (simple_type_name -> SHORT .)
    OROP            reduce using rule 185 (simple_type_name -> SHORT .)
    ANDOP           reduce using rule 185 (simple_type_name -> SHORT .)
    QUESMARK        reduce using rule 185 (simple_type_name -> SHORT .)
    RSPAREN         reduce using rule 185 (simple_type_name -> SHORT .)
    RCPAREN         reduce using rule 185 (simple_type_name -> SHORT .)
    COLON           reduce using rule 185 (simple_type_name -> SHORT .)


state 25

    (186) simple_type_name -> INT .

    SEMICOLON       reduce using rule 186 (simple_type_name -> INT .)
    IDENTIFIER      reduce using rule 186 (simple_type_name -> INT .)
    DOUBLEBNOP      reduce using rule 186 (simple_type_name -> INT .)
    MULTOP          reduce using rule 186 (simple_type_name -> INT .)
    BANDOP          reduce using rule 186 (simple_type_name -> INT .)
    OPERATOR        reduce using rule 186 (simple_type_name -> INT .)
    EQUAL           reduce using rule 186 (simple_type_name -> INT .)
    LSPAREN         reduce using rule 186 (simple_type_name -> INT .)
    RTEMPLATE       reduce using rule 186 (simple_type_name -> INT .)
    COMMA           reduce using rule 186 (simple_type_name -> INT .)
    RPAREN          reduce using rule 186 (simple_type_name -> INT .)
    LPAREN          reduce using rule 186 (simple_type_name -> INT .)
    MULTEQOP        reduce using rule 186 (simple_type_name -> INT .)
    DIVEQOP         reduce using rule 186 (simple_type_name -> INT .)
    MODEQOP         reduce using rule 186 (simple_type_name -> INT .)
    PLUSEQOP        reduce using rule 186 (simple_type_name -> INT .)
    MINUSEQOP       reduce using rule 186 (simple_type_name -> INT .)
    LSHIFTEQOP      reduce using rule 186 (simple_type_name -> INT .)
    RSHIFTEQOP      reduce using rule 186 (simple_type_name -> INT .)
    BANDEQOP        reduce using rule 186 (simple_type_name -> INT .)
    BOREQOP         reduce using rule 186 (simple_type_name -> INT .)
    DOTSTAR         reduce using rule 186 (simple_type_name -> INT .)
    ARROWSTAR       reduce using rule 186 (simple_type_name -> INT .)
    DIVOP           reduce using rule 186 (simple_type_name -> INT .)
    MODOP           reduce using rule 186 (simple_type_name -> INT .)
    PLUSOP          reduce using rule 186 (simple_type_name -> INT .)
    MINUSOP         reduce using rule 186 (simple_type_name -> INT .)
    LSHIFT          reduce using rule 186 (simple_type_name -> INT .)
    RSHIFT          reduce using rule 186 (simple_type_name -> INT .)
    LTCOMP          reduce using rule 186 (simple_type_name -> INT .)
    GTCOMP          reduce using rule 186 (simple_type_name -> INT .)
    LTECOMP         reduce using rule 186 (simple_type_name -> INT .)
    GTECOMP         reduce using rule 186 (simple_type_name -> INT .)
    EQCOMP          reduce using rule 186 (simple_type_name -> INT .)
    NEQCOMP         reduce using rule 186 (simple_type_name -> INT .)
    XOROP           reduce using rule 186 (simple_type_name -> INT .)
    OROP            reduce using rule 186 (simple_type_name -> INT .)
    ANDOP           reduce using rule 186 (simple_type_name -> INT .)
    QUESMARK        reduce using rule 186 (simple_type_name -> INT .)
    RSPAREN         reduce using rule 186 (simple_type_name -> INT .)
    RCPAREN         reduce using rule 186 (simple_type_name -> INT .)
    COLON           reduce using rule 186 (simple_type_name -> INT .)


state 26

    (187) simple_type_name -> LONG .

    SEMICOLON       reduce using rule 187 (simple_type_name -> LONG .)
    IDENTIFIER      reduce using rule 187 (simple_type_name -> LONG .)
    DOUBLEBNOP      reduce using rule 187 (simple_type_name -> LONG .)
    MULTOP          reduce using rule 187 (simple_type_name -> LONG .)
    BANDOP          reduce using rule 187 (simple_type_name -> LONG .)
    OPERATOR        reduce using rule 187 (simple_type_name -> LONG .)
    EQUAL           reduce using rule 187 (simple_type_name -> LONG .)
    LSPAREN         reduce using rule 187 (simple_type_name -> LONG .)
    RTEMPLATE       reduce using rule 187 (simple_type_name -> LONG .)
    COMMA           reduce using rule 187 (simple_type_name -> LONG .)
    RPAREN          reduce using rule 187 (simple_type_name -> LONG .)
    LPAREN          reduce using rule 187 (simple_type_name -> LONG .)
    MULTEQOP        reduce using rule 187 (simple_type_name -> LONG .)
    DIVEQOP         reduce using rule 187 (simple_type_name -> LONG .)
    MODEQOP         reduce using rule 187 (simple_type_name -> LONG .)
    PLUSEQOP        reduce using rule 187 (simple_type_name -> LONG .)
    MINUSEQOP       reduce using rule 187 (simple_type_name -> LONG .)
    LSHIFTEQOP      reduce using rule 187 (simple_type_name -> LONG .)
    RSHIFTEQOP      reduce using rule 187 (simple_type_name -> LONG .)
    BANDEQOP        reduce using rule 187 (simple_type_name -> LONG .)
    BOREQOP         reduce using rule 187 (simple_type_name -> LONG .)
    DOTSTAR         reduce using rule 187 (simple_type_name -> LONG .)
    ARROWSTAR       reduce using rule 187 (simple_type_name -> LONG .)
    DIVOP           reduce using rule 187 (simple_type_name -> LONG .)
    MODOP           reduce using rule 187 (simple_type_name -> LONG .)
    PLUSOP          reduce using rule 187 (simple_type_name -> LONG .)
    MINUSOP         reduce using rule 187 (simple_type_name -> LONG .)
    LSHIFT          reduce using rule 187 (simple_type_name -> LONG .)
    RSHIFT          reduce using rule 187 (simple_type_name -> LONG .)
    LTCOMP          reduce using rule 187 (simple_type_name -> LONG .)
    GTCOMP          reduce using rule 187 (simple_type_name -> LONG .)
    LTECOMP         reduce using rule 187 (simple_type_name -> LONG .)
    GTECOMP         reduce using rule 187 (simple_type_name -> LONG .)
    EQCOMP          reduce using rule 187 (simple_type_name -> LONG .)
    NEQCOMP         reduce using rule 187 (simple_type_name -> LONG .)
    XOROP           reduce using rule 187 (simple_type_name -> LONG .)
    OROP            reduce using rule 187 (simple_type_name -> LONG .)
    ANDOP           reduce using rule 187 (simple_type_name -> LONG .)
    QUESMARK        reduce using rule 187 (simple_type_name -> LONG .)
    RSPAREN         reduce using rule 187 (simple_type_name -> LONG .)
    RCPAREN         reduce using rule 187 (simple_type_name -> LONG .)
    COLON           reduce using rule 187 (simple_type_name -> LONG .)


state 27

    (188) simple_type_name -> SIGNED .

    SEMICOLON       reduce using rule 188 (simple_type_name -> SIGNED .)
    IDENTIFIER      reduce using rule 188 (simple_type_name -> SIGNED .)
    DOUBLEBNOP      reduce using rule 188 (simple_type_name -> SIGNED .)
    MULTOP          reduce using rule 188 (simple_type_name -> SIGNED .)
    BANDOP          reduce using rule 188 (simple_type_name -> SIGNED .)
    OPERATOR        reduce using rule 188 (simple_type_name -> SIGNED .)
    EQUAL           reduce using rule 188 (simple_type_name -> SIGNED .)
    LSPAREN         reduce using rule 188 (simple_type_name -> SIGNED .)
    RTEMPLATE       reduce using rule 188 (simple_type_name -> SIGNED .)
    COMMA           reduce using rule 188 (simple_type_name -> SIGNED .)
    RPAREN          reduce using rule 188 (simple_type_name -> SIGNED .)
    LPAREN          reduce using rule 188 (simple_type_name -> SIGNED .)
    MULTEQOP        reduce using rule 188 (simple_type_name -> SIGNED .)
    DIVEQOP         reduce using rule 188 (simple_type_name -> SIGNED .)
    MODEQOP         reduce using rule 188 (simple_type_name -> SIGNED .)
    PLUSEQOP        reduce using rule 188 (simple_type_name -> SIGNED .)
    MINUSEQOP       reduce using rule 188 (simple_type_name -> SIGNED .)
    LSHIFTEQOP      reduce using rule 188 (simple_type_name -> SIGNED .)
    RSHIFTEQOP      reduce using rule 188 (simple_type_name -> SIGNED .)
    BANDEQOP        reduce using rule 188 (simple_type_name -> SIGNED .)
    BOREQOP         reduce using rule 188 (simple_type_name -> SIGNED .)
    DOTSTAR         reduce using rule 188 (simple_type_name -> SIGNED .)
    ARROWSTAR       reduce using rule 188 (simple_type_name -> SIGNED .)
    DIVOP           reduce using rule 188 (simple_type_name -> SIGNED .)
    MODOP           reduce using rule 188 (simple_type_name -> SIGNED .)
    PLUSOP          reduce using rule 188 (simple_type_name -> SIGNED .)
    MINUSOP         reduce using rule 188 (simple_type_name -> SIGNED .)
    LSHIFT          reduce using rule 188 (simple_type_name -> SIGNED .)
    RSHIFT          reduce using rule 188 (simple_type_name -> SIGNED .)
    LTCOMP          reduce using rule 188 (simple_type_name -> SIGNED .)
    GTCOMP          reduce using rule 188 (simple_type_name -> SIGNED .)
    LTECOMP         reduce using rule 188 (simple_type_name -> SIGNED .)
    GTECOMP         reduce using rule 188 (simple_type_name -> SIGNED .)
    EQCOMP          reduce using rule 188 (simple_type_name -> SIGNED .)
    NEQCOMP         reduce using rule 188 (simple_type_name -> SIGNED .)
    XOROP           reduce using rule 188 (simple_type_name -> SIGNED .)
    OROP            reduce using rule 188 (simple_type_name -> SIGNED .)
    ANDOP           reduce using rule 188 (simple_type_name -> SIGNED .)
    QUESMARK        reduce using rule 188 (simple_type_name -> SIGNED .)
    RSPAREN         reduce using rule 188 (simple_type_name -> SIGNED .)
    RCPAREN         reduce using rule 188 (simple_type_name -> SIGNED .)
    COLON           reduce using rule 188 (simple_type_name -> SIGNED .)


state 28

    (189) simple_type_name -> UNSIGNED .

    SEMICOLON       reduce using rule 189 (simple_type_name -> UNSIGNED .)
    IDENTIFIER      reduce using rule 189 (simple_type_name -> UNSIGNED .)
    DOUBLEBNOP      reduce using rule 189 (simple_type_name -> UNSIGNED .)
    MULTOP          reduce using rule 189 (simple_type_name -> UNSIGNED .)
    BANDOP          reduce using rule 189 (simple_type_name -> UNSIGNED .)
    OPERATOR        reduce using rule 189 (simple_type_name -> UNSIGNED .)
    EQUAL           reduce using rule 189 (simple_type_name -> UNSIGNED .)
    LSPAREN         reduce using rule 189 (simple_type_name -> UNSIGNED .)
    RTEMPLATE       reduce using rule 189 (simple_type_name -> UNSIGNED .)
    COMMA           reduce using rule 189 (simple_type_name -> UNSIGNED .)
    RPAREN          reduce using rule 189 (simple_type_name -> UNSIGNED .)
    LPAREN          reduce using rule 189 (simple_type_name -> UNSIGNED .)
    MULTEQOP        reduce using rule 189 (simple_type_name -> UNSIGNED .)
    DIVEQOP         reduce using rule 189 (simple_type_name -> UNSIGNED .)
    MODEQOP         reduce using rule 189 (simple_type_name -> UNSIGNED .)
    PLUSEQOP        reduce using rule 189 (simple_type_name -> UNSIGNED .)
    MINUSEQOP       reduce using rule 189 (simple_type_name -> UNSIGNED .)
    LSHIFTEQOP      reduce using rule 189 (simple_type_name -> UNSIGNED .)
    RSHIFTEQOP      reduce using rule 189 (simple_type_name -> UNSIGNED .)
    BANDEQOP        reduce using rule 189 (simple_type_name -> UNSIGNED .)
    BOREQOP         reduce using rule 189 (simple_type_name -> UNSIGNED .)
    DOTSTAR         reduce using rule 189 (simple_type_name -> UNSIGNED .)
    ARROWSTAR       reduce using rule 189 (simple_type_name -> UNSIGNED .)
    DIVOP           reduce using rule 189 (simple_type_name -> UNSIGNED .)
    MODOP           reduce using rule 189 (simple_type_name -> UNSIGNED .)
    PLUSOP          reduce using rule 189 (simple_type_name -> UNSIGNED .)
    MINUSOP         reduce using rule 189 (simple_type_name -> UNSIGNED .)
    LSHIFT          reduce using rule 189 (simple_type_name -> UNSIGNED .)
    RSHIFT          reduce using rule 189 (simple_type_name -> UNSIGNED .)
    LTCOMP          reduce using rule 189 (simple_type_name -> UNSIGNED .)
    GTCOMP          reduce using rule 189 (simple_type_name -> UNSIGNED .)
    LTECOMP         reduce using rule 189 (simple_type_name -> UNSIGNED .)
    GTECOMP         reduce using rule 189 (simple_type_name -> UNSIGNED .)
    EQCOMP          reduce using rule 189 (simple_type_name -> UNSIGNED .)
    NEQCOMP         reduce using rule 189 (simple_type_name -> UNSIGNED .)
    XOROP           reduce using rule 189 (simple_type_name -> UNSIGNED .)
    OROP            reduce using rule 189 (simple_type_name -> UNSIGNED .)
    ANDOP           reduce using rule 189 (simple_type_name -> UNSIGNED .)
    QUESMARK        reduce using rule 189 (simple_type_name -> UNSIGNED .)
    RSPAREN         reduce using rule 189 (simple_type_name -> UNSIGNED .)
    RCPAREN         reduce using rule 189 (simple_type_name -> UNSIGNED .)
    COLON           reduce using rule 189 (simple_type_name -> UNSIGNED .)


state 29

    (190) simple_type_name -> FLOAT .

    SEMICOLON       reduce using rule 190 (simple_type_name -> FLOAT .)
    IDENTIFIER      reduce using rule 190 (simple_type_name -> FLOAT .)
    DOUBLEBNOP      reduce using rule 190 (simple_type_name -> FLOAT .)
    MULTOP          reduce using rule 190 (simple_type_name -> FLOAT .)
    BANDOP          reduce using rule 190 (simple_type_name -> FLOAT .)
    OPERATOR        reduce using rule 190 (simple_type_name -> FLOAT .)
    EQUAL           reduce using rule 190 (simple_type_name -> FLOAT .)
    LSPAREN         reduce using rule 190 (simple_type_name -> FLOAT .)
    RTEMPLATE       reduce using rule 190 (simple_type_name -> FLOAT .)
    COMMA           reduce using rule 190 (simple_type_name -> FLOAT .)
    RPAREN          reduce using rule 190 (simple_type_name -> FLOAT .)
    LPAREN          reduce using rule 190 (simple_type_name -> FLOAT .)
    MULTEQOP        reduce using rule 190 (simple_type_name -> FLOAT .)
    DIVEQOP         reduce using rule 190 (simple_type_name -> FLOAT .)
    MODEQOP         reduce using rule 190 (simple_type_name -> FLOAT .)
    PLUSEQOP        reduce using rule 190 (simple_type_name -> FLOAT .)
    MINUSEQOP       reduce using rule 190 (simple_type_name -> FLOAT .)
    LSHIFTEQOP      reduce using rule 190 (simple_type_name -> FLOAT .)
    RSHIFTEQOP      reduce using rule 190 (simple_type_name -> FLOAT .)
    BANDEQOP        reduce using rule 190 (simple_type_name -> FLOAT .)
    BOREQOP         reduce using rule 190 (simple_type_name -> FLOAT .)
    DOTSTAR         reduce using rule 190 (simple_type_name -> FLOAT .)
    ARROWSTAR       reduce using rule 190 (simple_type_name -> FLOAT .)
    DIVOP           reduce using rule 190 (simple_type_name -> FLOAT .)
    MODOP           reduce using rule 190 (simple_type_name -> FLOAT .)
    PLUSOP          reduce using rule 190 (simple_type_name -> FLOAT .)
    MINUSOP         reduce using rule 190 (simple_type_name -> FLOAT .)
    LSHIFT          reduce using rule 190 (simple_type_name -> FLOAT .)
    RSHIFT          reduce using rule 190 (simple_type_name -> FLOAT .)
    LTCOMP          reduce using rule 190 (simple_type_name -> FLOAT .)
    GTCOMP          reduce using rule 190 (simple_type_name -> FLOAT .)
    LTECOMP         reduce using rule 190 (simple_type_name -> FLOAT .)
    GTECOMP         reduce using rule 190 (simple_type_name -> FLOAT .)
    EQCOMP          reduce using rule 190 (simple_type_name -> FLOAT .)
    NEQCOMP         reduce using rule 190 (simple_type_name -> FLOAT .)
    XOROP           reduce using rule 190 (simple_type_name -> FLOAT .)
    OROP            reduce using rule 190 (simple_type_name -> FLOAT .)
    ANDOP           reduce using rule 190 (simple_type_name -> FLOAT .)
    QUESMARK        reduce using rule 190 (simple_type_name -> FLOAT .)
    RSPAREN         reduce using rule 190 (simple_type_name -> FLOAT .)
    RCPAREN         reduce using rule 190 (simple_type_name -> FLOAT .)
    COLON           reduce using rule 190 (simple_type_name -> FLOAT .)


state 30

    (191) simple_type_name -> DOUBLE .

    SEMICOLON       reduce using rule 191 (simple_type_name -> DOUBLE .)
    IDENTIFIER      reduce using rule 191 (simple_type_name -> DOUBLE .)
    DOUBLEBNOP      reduce using rule 191 (simple_type_name -> DOUBLE .)
    MULTOP          reduce using rule 191 (simple_type_name -> DOUBLE .)
    BANDOP          reduce using rule 191 (simple_type_name -> DOUBLE .)
    OPERATOR        reduce using rule 191 (simple_type_name -> DOUBLE .)
    EQUAL           reduce using rule 191 (simple_type_name -> DOUBLE .)
    LSPAREN         reduce using rule 191 (simple_type_name -> DOUBLE .)
    RTEMPLATE       reduce using rule 191 (simple_type_name -> DOUBLE .)
    COMMA           reduce using rule 191 (simple_type_name -> DOUBLE .)
    RPAREN          reduce using rule 191 (simple_type_name -> DOUBLE .)
    LPAREN          reduce using rule 191 (simple_type_name -> DOUBLE .)
    MULTEQOP        reduce using rule 191 (simple_type_name -> DOUBLE .)
    DIVEQOP         reduce using rule 191 (simple_type_name -> DOUBLE .)
    MODEQOP         reduce using rule 191 (simple_type_name -> DOUBLE .)
    PLUSEQOP        reduce using rule 191 (simple_type_name -> DOUBLE .)
    MINUSEQOP       reduce using rule 191 (simple_type_name -> DOUBLE .)
    LSHIFTEQOP      reduce using rule 191 (simple_type_name -> DOUBLE .)
    RSHIFTEQOP      reduce using rule 191 (simple_type_name -> DOUBLE .)
    BANDEQOP        reduce using rule 191 (simple_type_name -> DOUBLE .)
    BOREQOP         reduce using rule 191 (simple_type_name -> DOUBLE .)
    DOTSTAR         reduce using rule 191 (simple_type_name -> DOUBLE .)
    ARROWSTAR       reduce using rule 191 (simple_type_name -> DOUBLE .)
    DIVOP           reduce using rule 191 (simple_type_name -> DOUBLE .)
    MODOP           reduce using rule 191 (simple_type_name -> DOUBLE .)
    PLUSOP          reduce using rule 191 (simple_type_name -> DOUBLE .)
    MINUSOP         reduce using rule 191 (simple_type_name -> DOUBLE .)
    LSHIFT          reduce using rule 191 (simple_type_name -> DOUBLE .)
    RSHIFT          reduce using rule 191 (simple_type_name -> DOUBLE .)
    LTCOMP          reduce using rule 191 (simple_type_name -> DOUBLE .)
    GTCOMP          reduce using rule 191 (simple_type_name -> DOUBLE .)
    LTECOMP         reduce using rule 191 (simple_type_name -> DOUBLE .)
    GTECOMP         reduce using rule 191 (simple_type_name -> DOUBLE .)
    EQCOMP          reduce using rule 191 (simple_type_name -> DOUBLE .)
    NEQCOMP         reduce using rule 191 (simple_type_name -> DOUBLE .)
    XOROP           reduce using rule 191 (simple_type_name -> DOUBLE .)
    OROP            reduce using rule 191 (simple_type_name -> DOUBLE .)
    ANDOP           reduce using rule 191 (simple_type_name -> DOUBLE .)
    QUESMARK        reduce using rule 191 (simple_type_name -> DOUBLE .)
    RSPAREN         reduce using rule 191 (simple_type_name -> DOUBLE .)
    RCPAREN         reduce using rule 191 (simple_type_name -> DOUBLE .)
    COLON           reduce using rule 191 (simple_type_name -> DOUBLE .)


state 31

    (192) simple_type_name -> VOID .

    SEMICOLON       reduce using rule 192 (simple_type_name -> VOID .)
    IDENTIFIER      reduce using rule 192 (simple_type_name -> VOID .)
    DOUBLEBNOP      reduce using rule 192 (simple_type_name -> VOID .)
    MULTOP          reduce using rule 192 (simple_type_name -> VOID .)
    BANDOP          reduce using rule 192 (simple_type_name -> VOID .)
    OPERATOR        reduce using rule 192 (simple_type_name -> VOID .)
    EQUAL           reduce using rule 192 (simple_type_name -> VOID .)
    LSPAREN         reduce using rule 192 (simple_type_name -> VOID .)
    RTEMPLATE       reduce using rule 192 (simple_type_name -> VOID .)
    COMMA           reduce using rule 192 (simple_type_name -> VOID .)
    RPAREN          reduce using rule 192 (simple_type_name -> VOID .)
    LPAREN          reduce using rule 192 (simple_type_name -> VOID .)
    MULTEQOP        reduce using rule 192 (simple_type_name -> VOID .)
    DIVEQOP         reduce using rule 192 (simple_type_name -> VOID .)
    MODEQOP         reduce using rule 192 (simple_type_name -> VOID .)
    PLUSEQOP        reduce using rule 192 (simple_type_name -> VOID .)
    MINUSEQOP       reduce using rule 192 (simple_type_name -> VOID .)
    LSHIFTEQOP      reduce using rule 192 (simple_type_name -> VOID .)
    RSHIFTEQOP      reduce using rule 192 (simple_type_name -> VOID .)
    BANDEQOP        reduce using rule 192 (simple_type_name -> VOID .)
    BOREQOP         reduce using rule 192 (simple_type_name -> VOID .)
    DOTSTAR         reduce using rule 192 (simple_type_name -> VOID .)
    ARROWSTAR       reduce using rule 192 (simple_type_name -> VOID .)
    DIVOP           reduce using rule 192 (simple_type_name -> VOID .)
    MODOP           reduce using rule 192 (simple_type_name -> VOID .)
    PLUSOP          reduce using rule 192 (simple_type_name -> VOID .)
    MINUSOP         reduce using rule 192 (simple_type_name -> VOID .)
    LSHIFT          reduce using rule 192 (simple_type_name -> VOID .)
    RSHIFT          reduce using rule 192 (simple_type_name -> VOID .)
    LTCOMP          reduce using rule 192 (simple_type_name -> VOID .)
    GTCOMP          reduce using rule 192 (simple_type_name -> VOID .)
    LTECOMP         reduce using rule 192 (simple_type_name -> VOID .)
    GTECOMP         reduce using rule 192 (simple_type_name -> VOID .)
    EQCOMP          reduce using rule 192 (simple_type_name -> VOID .)
    NEQCOMP         reduce using rule 192 (simple_type_name -> VOID .)
    XOROP           reduce using rule 192 (simple_type_name -> VOID .)
    OROP            reduce using rule 192 (simple_type_name -> VOID .)
    ANDOP           reduce using rule 192 (simple_type_name -> VOID .)
    QUESMARK        reduce using rule 192 (simple_type_name -> VOID .)
    RSPAREN         reduce using rule 192 (simple_type_name -> VOID .)
    RCPAREN         reduce using rule 192 (simple_type_name -> VOID .)
    COLON           reduce using rule 192 (simple_type_name -> VOID .)


state 32

    (193) simple_type_name -> STRING .

    SEMICOLON       reduce using rule 193 (simple_type_name -> STRING .)
    IDENTIFIER      reduce using rule 193 (simple_type_name -> STRING .)
    DOUBLEBNOP      reduce using rule 193 (simple_type_name -> STRING .)
    MULTOP          reduce using rule 193 (simple_type_name -> STRING .)
    BANDOP          reduce using rule 193 (simple_type_name -> STRING .)
    OPERATOR        reduce using rule 193 (simple_type_name -> STRING .)
    EQUAL           reduce using rule 193 (simple_type_name -> STRING .)
    LSPAREN         reduce using rule 193 (simple_type_name -> STRING .)
    RTEMPLATE       reduce using rule 193 (simple_type_name -> STRING .)
    COMMA           reduce using rule 193 (simple_type_name -> STRING .)
    RPAREN          reduce using rule 193 (simple_type_name -> STRING .)
    LPAREN          reduce using rule 193 (simple_type_name -> STRING .)
    MULTEQOP        reduce using rule 193 (simple_type_name -> STRING .)
    DIVEQOP         reduce using rule 193 (simple_type_name -> STRING .)
    MODEQOP         reduce using rule 193 (simple_type_name -> STRING .)
    PLUSEQOP        reduce using rule 193 (simple_type_name -> STRING .)
    MINUSEQOP       reduce using rule 193 (simple_type_name -> STRING .)
    LSHIFTEQOP      reduce using rule 193 (simple_type_name -> STRING .)
    RSHIFTEQOP      reduce using rule 193 (simple_type_name -> STRING .)
    BANDEQOP        reduce using rule 193 (simple_type_name -> STRING .)
    BOREQOP         reduce using rule 193 (simple_type_name -> STRING .)
    DOTSTAR         reduce using rule 193 (simple_type_name -> STRING .)
    ARROWSTAR       reduce using rule 193 (simple_type_name -> STRING .)
    DIVOP           reduce using rule 193 (simple_type_name -> STRING .)
    MODOP           reduce using rule 193 (simple_type_name -> STRING .)
    PLUSOP          reduce using rule 193 (simple_type_name -> STRING .)
    MINUSOP         reduce using rule 193 (simple_type_name -> STRING .)
    LSHIFT          reduce using rule 193 (simple_type_name -> STRING .)
    RSHIFT          reduce using rule 193 (simple_type_name -> STRING .)
    LTCOMP          reduce using rule 193 (simple_type_name -> STRING .)
    GTCOMP          reduce using rule 193 (simple_type_name -> STRING .)
    LTECOMP         reduce using rule 193 (simple_type_name -> STRING .)
    GTECOMP         reduce using rule 193 (simple_type_name -> STRING .)
    EQCOMP          reduce using rule 193 (simple_type_name -> STRING .)
    NEQCOMP         reduce using rule 193 (simple_type_name -> STRING .)
    XOROP           reduce using rule 193 (simple_type_name -> STRING .)
    OROP            reduce using rule 193 (simple_type_name -> STRING .)
    ANDOP           reduce using rule 193 (simple_type_name -> STRING .)
    QUESMARK        reduce using rule 193 (simple_type_name -> STRING .)
    RSPAREN         reduce using rule 193 (simple_type_name -> STRING .)
    RCPAREN         reduce using rule 193 (simple_type_name -> STRING .)
    COLON           reduce using rule 193 (simple_type_name -> STRING .)


state 33

    (194) simple_type_name -> AUTO .

    SEMICOLON       reduce using rule 194 (simple_type_name -> AUTO .)
    IDENTIFIER      reduce using rule 194 (simple_type_name -> AUTO .)
    DOUBLEBNOP      reduce using rule 194 (simple_type_name -> AUTO .)
    MULTOP          reduce using rule 194 (simple_type_name -> AUTO .)
    BANDOP          reduce using rule 194 (simple_type_name -> AUTO .)
    OPERATOR        reduce using rule 194 (simple_type_name -> AUTO .)
    EQUAL           reduce using rule 194 (simple_type_name -> AUTO .)
    LSPAREN         reduce using rule 194 (simple_type_name -> AUTO .)
    RTEMPLATE       reduce using rule 194 (simple_type_name -> AUTO .)
    COMMA           reduce using rule 194 (simple_type_name -> AUTO .)
    RPAREN          reduce using rule 194 (simple_type_name -> AUTO .)
    LPAREN          reduce using rule 194 (simple_type_name -> AUTO .)
    MULTEQOP        reduce using rule 194 (simple_type_name -> AUTO .)
    DIVEQOP         reduce using rule 194 (simple_type_name -> AUTO .)
    MODEQOP         reduce using rule 194 (simple_type_name -> AUTO .)
    PLUSEQOP        reduce using rule 194 (simple_type_name -> AUTO .)
    MINUSEQOP       reduce using rule 194 (simple_type_name -> AUTO .)
    LSHIFTEQOP      reduce using rule 194 (simple_type_name -> AUTO .)
    RSHIFTEQOP      reduce using rule 194 (simple_type_name -> AUTO .)
    BANDEQOP        reduce using rule 194 (simple_type_name -> AUTO .)
    BOREQOP         reduce using rule 194 (simple_type_name -> AUTO .)
    DOTSTAR         reduce using rule 194 (simple_type_name -> AUTO .)
    ARROWSTAR       reduce using rule 194 (simple_type_name -> AUTO .)
    DIVOP           reduce using rule 194 (simple_type_name -> AUTO .)
    MODOP           reduce using rule 194 (simple_type_name -> AUTO .)
    PLUSOP          reduce using rule 194 (simple_type_name -> AUTO .)
    MINUSOP         reduce using rule 194 (simple_type_name -> AUTO .)
    LSHIFT          reduce using rule 194 (simple_type_name -> AUTO .)
    RSHIFT          reduce using rule 194 (simple_type_name -> AUTO .)
    LTCOMP          reduce using rule 194 (simple_type_name -> AUTO .)
    GTCOMP          reduce using rule 194 (simple_type_name -> AUTO .)
    LTECOMP         reduce using rule 194 (simple_type_name -> AUTO .)
    GTECOMP         reduce using rule 194 (simple_type_name -> AUTO .)
    EQCOMP          reduce using rule 194 (simple_type_name -> AUTO .)
    NEQCOMP         reduce using rule 194 (simple_type_name -> AUTO .)
    XOROP           reduce using rule 194 (simple_type_name -> AUTO .)
    OROP            reduce using rule 194 (simple_type_name -> AUTO .)
    ANDOP           reduce using rule 194 (simple_type_name -> AUTO .)
    QUESMARK        reduce using rule 194 (simple_type_name -> AUTO .)
    RSPAREN         reduce using rule 194 (simple_type_name -> AUTO .)
    RCPAREN         reduce using rule 194 (simple_type_name -> AUTO .)
    COLON           reduce using rule 194 (simple_type_name -> AUTO .)


state 34

    (197) complex_type_specifier -> TYPE . IDENTIFIER
    (198) complex_type_specifier -> TYPE . IDENTIFIER template_class_name

    IDENTIFIER      shift and go to state 63


state 35

    (211) class_key -> CLASS .

    IDENTIFIER      reduce using rule 211 (class_key -> CLASS .)


state 36

    (212) class_key -> STRUCT .

    IDENTIFIER      reduce using rule 212 (class_key -> STRUCT .)


state 37

    (6) program -> control_line translation_unit .

    $end            reduce using rule 6 (program -> control_line translation_unit .)


state 38

    (1) control_line -> control_line control_line_stmt .

    HASHTAG         reduce using rule 1 (control_line -> control_line control_line_stmt .)
    CONST           reduce using rule 1 (control_line -> control_line control_line_stmt .)
    TYPEDEF         reduce using rule 1 (control_line -> control_line control_line_stmt .)
    ASM             reduce using rule 1 (control_line -> control_line control_line_stmt .)
    TEMPLATE        reduce using rule 1 (control_line -> control_line control_line_stmt .)
    CHAR            reduce using rule 1 (control_line -> control_line control_line_stmt .)
    SHORT           reduce using rule 1 (control_line -> control_line control_line_stmt .)
    INT             reduce using rule 1 (control_line -> control_line control_line_stmt .)
    LONG            reduce using rule 1 (control_line -> control_line control_line_stmt .)
    SIGNED          reduce using rule 1 (control_line -> control_line control_line_stmt .)
    UNSIGNED        reduce using rule 1 (control_line -> control_line control_line_stmt .)
    FLOAT           reduce using rule 1 (control_line -> control_line control_line_stmt .)
    DOUBLE          reduce using rule 1 (control_line -> control_line control_line_stmt .)
    VOID            reduce using rule 1 (control_line -> control_line control_line_stmt .)
    STRING          reduce using rule 1 (control_line -> control_line control_line_stmt .)
    AUTO            reduce using rule 1 (control_line -> control_line control_line_stmt .)
    TYPE            reduce using rule 1 (control_line -> control_line control_line_stmt .)
    CLASS           reduce using rule 1 (control_line -> control_line control_line_stmt .)
    STRUCT          reduce using rule 1 (control_line -> control_line control_line_stmt .)


state 39

    (9) declaration_seq -> declaration_seq declaration .

    CONST           reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    TYPEDEF         reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    ASM             reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    TEMPLATE        reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    CHAR            reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    SHORT           reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    INT             reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    LONG            reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    SIGNED          reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    UNSIGNED        reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    FLOAT           reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    DOUBLE          reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    VOID            reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    STRING          reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    AUTO            reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    TYPE            reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    CLASS           reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    STRUCT          reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    $end            reduce using rule 9 (declaration_seq -> declaration_seq declaration .)


state 40

    (4) control_line_stmt -> include_control LTCOMP . STRING_L GTCOMP

    STRING_L        shift and go to state 64


state 41

    (5) control_line_stmt -> include_control STRING_L .

    HASHTAG         reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    CONST           reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    TYPEDEF         reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    ASM             reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    TEMPLATE        reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    CHAR            reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    SHORT           reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    INT             reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    LONG            reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    SIGNED          reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    UNSIGNED        reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    FLOAT           reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    DOUBLE          reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    VOID            reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    STRING          reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    AUTO            reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    TYPE            reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    CLASS           reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    STRUCT          reduce using rule 5 (control_line_stmt -> include_control STRING_L .)


state 42

    (3) include_control -> HASHTAG INCLUDE .

    LTCOMP          reduce using rule 3 (include_control -> HASHTAG INCLUDE .)
    STRING_L        reduce using rule 3 (include_control -> HASHTAG INCLUDE .)


state 43

    (272) declaration -> type_specifier_ declarator_list . SEMICOLON
    (282) declarator_list -> declarator_list . COMMA init_declarator

    SEMICOLON       shift and go to state 65
    COMMA           shift and go to state 66


state 44

    (273) declaration -> type_specifier_ SEMICOLON .

    CONST           reduce using rule 273 (declaration -> type_specifier_ SEMICOLON .)
    TYPEDEF         reduce using rule 273 (declaration -> type_specifier_ SEMICOLON .)
    ASM             reduce using rule 273 (declaration -> type_specifier_ SEMICOLON .)
    TEMPLATE        reduce using rule 273 (declaration -> type_specifier_ SEMICOLON .)
    CHAR            reduce using rule 273 (declaration -> type_specifier_ SEMICOLON .)
    SHORT           reduce using rule 273 (declaration -> type_specifier_ SEMICOLON .)
    INT             reduce using rule 273 (declaration -> type_specifier_ SEMICOLON .)
    LONG            reduce using rule 273 (declaration -> type_specifier_ SEMICOLON .)
    SIGNED          reduce using rule 273 (declaration -> type_specifier_ SEMICOLON .)
    UNSIGNED        reduce using rule 273 (declaration -> type_specifier_ SEMICOLON .)
    FLOAT           reduce using rule 273 (declaration -> type_specifier_ SEMICOLON .)
    DOUBLE          reduce using rule 273 (declaration -> type_specifier_ SEMICOLON .)
    VOID            reduce using rule 273 (declaration -> type_specifier_ SEMICOLON .)
    STRING          reduce using rule 273 (declaration -> type_specifier_ SEMICOLON .)
    AUTO            reduce using rule 273 (declaration -> type_specifier_ SEMICOLON .)
    TYPE            reduce using rule 273 (declaration -> type_specifier_ SEMICOLON .)
    CLASS           reduce using rule 273 (declaration -> type_specifier_ SEMICOLON .)
    STRUCT          reduce using rule 273 (declaration -> type_specifier_ SEMICOLON .)
    $end            reduce using rule 273 (declaration -> type_specifier_ SEMICOLON .)
    RCPAREN         reduce using rule 273 (declaration -> type_specifier_ SEMICOLON .)
    IDENTIFIER      reduce using rule 273 (declaration -> type_specifier_ SEMICOLON .)
    CASE            reduce using rule 273 (declaration -> type_specifier_ SEMICOLON .)
    DEFAULT         reduce using rule 273 (declaration -> type_specifier_ SEMICOLON .)
    SEMICOLON       reduce using rule 273 (declaration -> type_specifier_ SEMICOLON .)
    LCPAREN         reduce using rule 273 (declaration -> type_specifier_ SEMICOLON .)
    IF              reduce using rule 273 (declaration -> type_specifier_ SEMICOLON .)
    SWITCH          reduce using rule 273 (declaration -> type_specifier_ SEMICOLON .)
    WHILE           reduce using rule 273 (declaration -> type_specifier_ SEMICOLON .)
    DO              reduce using rule 273 (declaration -> type_specifier_ SEMICOLON .)
    FOR             reduce using rule 273 (declaration -> type_specifier_ SEMICOLON .)
    BREAK           reduce using rule 273 (declaration -> type_specifier_ SEMICOLON .)
    CONTINUE        reduce using rule 273 (declaration -> type_specifier_ SEMICOLON .)
    RETURN          reduce using rule 273 (declaration -> type_specifier_ SEMICOLON .)
    GOTO            reduce using rule 273 (declaration -> type_specifier_ SEMICOLON .)
    TRY             reduce using rule 273 (declaration -> type_specifier_ SEMICOLON .)
    THROW           reduce using rule 273 (declaration -> type_specifier_ SEMICOLON .)
    DPLUSOP         reduce using rule 273 (declaration -> type_specifier_ SEMICOLON .)
    DMINUSOP        reduce using rule 273 (declaration -> type_specifier_ SEMICOLON .)
    SIZEOF          reduce using rule 273 (declaration -> type_specifier_ SEMICOLON .)
    PLUSOP          reduce using rule 273 (declaration -> type_specifier_ SEMICOLON .)
    MINUSOP         reduce using rule 273 (declaration -> type_specifier_ SEMICOLON .)
    NOTSYM          reduce using rule 273 (declaration -> type_specifier_ SEMICOLON .)
    BNOP            reduce using rule 273 (declaration -> type_specifier_ SEMICOLON .)
    MULTOP          reduce using rule 273 (declaration -> type_specifier_ SEMICOLON .)
    BANDOP          reduce using rule 273 (declaration -> type_specifier_ SEMICOLON .)
    NEW             reduce using rule 273 (declaration -> type_specifier_ SEMICOLON .)
    DELETE          reduce using rule 273 (declaration -> type_specifier_ SEMICOLON .)
    THIS            reduce using rule 273 (declaration -> type_specifier_ SEMICOLON .)
    LPAREN          reduce using rule 273 (declaration -> type_specifier_ SEMICOLON .)
    NUMBER          reduce using rule 273 (declaration -> type_specifier_ SEMICOLON .)
    STRING_L        reduce using rule 273 (declaration -> type_specifier_ SEMICOLON .)
    SCHAR           reduce using rule 273 (declaration -> type_specifier_ SEMICOLON .)
    DOUBLEBNOP      reduce using rule 273 (declaration -> type_specifier_ SEMICOLON .)
    OPERATOR        reduce using rule 273 (declaration -> type_specifier_ SEMICOLON .)
    ELSE            reduce using rule 273 (declaration -> type_specifier_ SEMICOLON .)


state 45

    (235) function_definition -> type_specifier_ declarator . fct_body
    (119) declarator -> declarator . LPAREN argument_declaration_list RPAREN
    (120) declarator -> declarator . LSPAREN constant_expression RSPAREN
    (121) declarator -> declarator . LSPAREN RSPAREN
    (283) init_declarator -> declarator . initializer
    (284) init_declarator -> declarator .
    (236) fct_body -> . compound_statement
    (285) initializer -> . EQUAL assignment_expression
    (286) initializer -> . EQUAL LCPAREN initializer_list RCPAREN
    (287) initializer -> . EQUAL LCPAREN initializer_list COMMA RCPAREN
    (288) initializer -> . LPAREN expression_list RPAREN
    (237) compound_statement -> . LCPAREN statement_list RCPAREN
    (238) compound_statement -> . LCPAREN RCPAREN

    LPAREN          shift and go to state 68
    LSPAREN         shift and go to state 69
    SEMICOLON       reduce using rule 284 (init_declarator -> declarator .)
    COMMA           reduce using rule 284 (init_declarator -> declarator .)
    EQUAL           shift and go to state 72
    LCPAREN         shift and go to state 73

    fct_body                       shift and go to state 67
    initializer                    shift and go to state 70
    compound_statement             shift and go to state 71

state 46

    (281) declarator_list -> init_declarator .

    SEMICOLON       reduce using rule 281 (declarator_list -> init_declarator .)
    COMMA           reduce using rule 281 (declarator_list -> init_declarator .)


state 47

    (117) declarator -> name .

    LPAREN          reduce using rule 117 (declarator -> name .)
    LSPAREN         reduce using rule 117 (declarator -> name .)
    EQUAL           reduce using rule 117 (declarator -> name .)
    LCPAREN         reduce using rule 117 (declarator -> name .)
    SEMICOLON       reduce using rule 117 (declarator -> name .)
    COMMA           reduce using rule 117 (declarator -> name .)
    RTEMPLATE       reduce using rule 117 (declarator -> name .)
    RPAREN          reduce using rule 117 (declarator -> name .)


state 48

    (118) declarator -> unary2_operator . declarator
    (117) declarator -> . name
    (118) declarator -> . unary2_operator declarator
    (119) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (120) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (121) declarator -> . declarator LSPAREN RSPAREN
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (135) operator_function_name -> . OPERATOR operator_name

    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    OPERATOR        shift and go to state 54

    unary2_operator                shift and go to state 48
    declarator                     shift and go to state 74
    name                           shift and go to state 47
    operator_function_name         shift and go to state 50

state 49

    (132) name -> IDENTIFIER .

    LPAREN          reduce using rule 132 (name -> IDENTIFIER .)
    LSPAREN         reduce using rule 132 (name -> IDENTIFIER .)
    EQUAL           reduce using rule 132 (name -> IDENTIFIER .)
    LCPAREN         reduce using rule 132 (name -> IDENTIFIER .)
    SEMICOLON       reduce using rule 132 (name -> IDENTIFIER .)
    COMMA           reduce using rule 132 (name -> IDENTIFIER .)
    DOT             reduce using rule 132 (name -> IDENTIFIER .)
    ARROW           reduce using rule 132 (name -> IDENTIFIER .)
    DPLUSOP         reduce using rule 132 (name -> IDENTIFIER .)
    DMINUSOP        reduce using rule 132 (name -> IDENTIFIER .)
    LTEMPLATE       reduce using rule 132 (name -> IDENTIFIER .)
    MULTEQOP        reduce using rule 132 (name -> IDENTIFIER .)
    DIVEQOP         reduce using rule 132 (name -> IDENTIFIER .)
    MODEQOP         reduce using rule 132 (name -> IDENTIFIER .)
    PLUSEQOP        reduce using rule 132 (name -> IDENTIFIER .)
    MINUSEQOP       reduce using rule 132 (name -> IDENTIFIER .)
    LSHIFTEQOP      reduce using rule 132 (name -> IDENTIFIER .)
    RSHIFTEQOP      reduce using rule 132 (name -> IDENTIFIER .)
    BANDEQOP        reduce using rule 132 (name -> IDENTIFIER .)
    BOREQOP         reduce using rule 132 (name -> IDENTIFIER .)
    DOTSTAR         reduce using rule 132 (name -> IDENTIFIER .)
    ARROWSTAR       reduce using rule 132 (name -> IDENTIFIER .)
    MULTOP          reduce using rule 132 (name -> IDENTIFIER .)
    DIVOP           reduce using rule 132 (name -> IDENTIFIER .)
    MODOP           reduce using rule 132 (name -> IDENTIFIER .)
    PLUSOP          reduce using rule 132 (name -> IDENTIFIER .)
    MINUSOP         reduce using rule 132 (name -> IDENTIFIER .)
    LSHIFT          reduce using rule 132 (name -> IDENTIFIER .)
    RSHIFT          reduce using rule 132 (name -> IDENTIFIER .)
    LTCOMP          reduce using rule 132 (name -> IDENTIFIER .)
    GTCOMP          reduce using rule 132 (name -> IDENTIFIER .)
    LTECOMP         reduce using rule 132 (name -> IDENTIFIER .)
    GTECOMP         reduce using rule 132 (name -> IDENTIFIER .)
    EQCOMP          reduce using rule 132 (name -> IDENTIFIER .)
    NEQCOMP         reduce using rule 132 (name -> IDENTIFIER .)
    BANDOP          reduce using rule 132 (name -> IDENTIFIER .)
    XOROP           reduce using rule 132 (name -> IDENTIFIER .)
    OROP            reduce using rule 132 (name -> IDENTIFIER .)
    ANDOP           reduce using rule 132 (name -> IDENTIFIER .)
    QUESMARK        reduce using rule 132 (name -> IDENTIFIER .)
    RPAREN          reduce using rule 132 (name -> IDENTIFIER .)
    RSPAREN         reduce using rule 132 (name -> IDENTIFIER .)
    RTEMPLATE       reduce using rule 132 (name -> IDENTIFIER .)
    RCPAREN         reduce using rule 132 (name -> IDENTIFIER .)
    COLON           reduce using rule 132 (name -> IDENTIFIER .)


state 50

    (133) name -> operator_function_name .

    LPAREN          reduce using rule 133 (name -> operator_function_name .)
    LSPAREN         reduce using rule 133 (name -> operator_function_name .)
    EQUAL           reduce using rule 133 (name -> operator_function_name .)
    LCPAREN         reduce using rule 133 (name -> operator_function_name .)
    SEMICOLON       reduce using rule 133 (name -> operator_function_name .)
    COMMA           reduce using rule 133 (name -> operator_function_name .)
    DOT             reduce using rule 133 (name -> operator_function_name .)
    ARROW           reduce using rule 133 (name -> operator_function_name .)
    DPLUSOP         reduce using rule 133 (name -> operator_function_name .)
    DMINUSOP        reduce using rule 133 (name -> operator_function_name .)
    LTEMPLATE       reduce using rule 133 (name -> operator_function_name .)
    MULTEQOP        reduce using rule 133 (name -> operator_function_name .)
    DIVEQOP         reduce using rule 133 (name -> operator_function_name .)
    MODEQOP         reduce using rule 133 (name -> operator_function_name .)
    PLUSEQOP        reduce using rule 133 (name -> operator_function_name .)
    MINUSEQOP       reduce using rule 133 (name -> operator_function_name .)
    LSHIFTEQOP      reduce using rule 133 (name -> operator_function_name .)
    RSHIFTEQOP      reduce using rule 133 (name -> operator_function_name .)
    BANDEQOP        reduce using rule 133 (name -> operator_function_name .)
    BOREQOP         reduce using rule 133 (name -> operator_function_name .)
    DOTSTAR         reduce using rule 133 (name -> operator_function_name .)
    ARROWSTAR       reduce using rule 133 (name -> operator_function_name .)
    MULTOP          reduce using rule 133 (name -> operator_function_name .)
    DIVOP           reduce using rule 133 (name -> operator_function_name .)
    MODOP           reduce using rule 133 (name -> operator_function_name .)
    PLUSOP          reduce using rule 133 (name -> operator_function_name .)
    MINUSOP         reduce using rule 133 (name -> operator_function_name .)
    LSHIFT          reduce using rule 133 (name -> operator_function_name .)
    RSHIFT          reduce using rule 133 (name -> operator_function_name .)
    LTCOMP          reduce using rule 133 (name -> operator_function_name .)
    GTCOMP          reduce using rule 133 (name -> operator_function_name .)
    LTECOMP         reduce using rule 133 (name -> operator_function_name .)
    GTECOMP         reduce using rule 133 (name -> operator_function_name .)
    EQCOMP          reduce using rule 133 (name -> operator_function_name .)
    NEQCOMP         reduce using rule 133 (name -> operator_function_name .)
    BANDOP          reduce using rule 133 (name -> operator_function_name .)
    XOROP           reduce using rule 133 (name -> operator_function_name .)
    OROP            reduce using rule 133 (name -> operator_function_name .)
    ANDOP           reduce using rule 133 (name -> operator_function_name .)
    QUESMARK        reduce using rule 133 (name -> operator_function_name .)
    RPAREN          reduce using rule 133 (name -> operator_function_name .)
    RSPAREN         reduce using rule 133 (name -> operator_function_name .)
    RTEMPLATE       reduce using rule 133 (name -> operator_function_name .)
    RCPAREN         reduce using rule 133 (name -> operator_function_name .)
    COLON           reduce using rule 133 (name -> operator_function_name .)


state 51

    (134) name -> DOUBLEBNOP . IDENTIFIER

    IDENTIFIER      shift and go to state 75


state 52

    (89) unary2_operator -> MULTOP .

    IDENTIFIER      reduce using rule 89 (unary2_operator -> MULTOP .)
    DOUBLEBNOP      reduce using rule 89 (unary2_operator -> MULTOP .)
    MULTOP          reduce using rule 89 (unary2_operator -> MULTOP .)
    BANDOP          reduce using rule 89 (unary2_operator -> MULTOP .)
    OPERATOR        reduce using rule 89 (unary2_operator -> MULTOP .)
    LPAREN          reduce using rule 89 (unary2_operator -> MULTOP .)
    DPLUSOP         reduce using rule 89 (unary2_operator -> MULTOP .)
    DMINUSOP        reduce using rule 89 (unary2_operator -> MULTOP .)
    SIZEOF          reduce using rule 89 (unary2_operator -> MULTOP .)
    PLUSOP          reduce using rule 89 (unary2_operator -> MULTOP .)
    MINUSOP         reduce using rule 89 (unary2_operator -> MULTOP .)
    NOTSYM          reduce using rule 89 (unary2_operator -> MULTOP .)
    BNOP            reduce using rule 89 (unary2_operator -> MULTOP .)
    NEW             reduce using rule 89 (unary2_operator -> MULTOP .)
    DELETE          reduce using rule 89 (unary2_operator -> MULTOP .)
    THIS            reduce using rule 89 (unary2_operator -> MULTOP .)
    CHAR            reduce using rule 89 (unary2_operator -> MULTOP .)
    SHORT           reduce using rule 89 (unary2_operator -> MULTOP .)
    INT             reduce using rule 89 (unary2_operator -> MULTOP .)
    LONG            reduce using rule 89 (unary2_operator -> MULTOP .)
    SIGNED          reduce using rule 89 (unary2_operator -> MULTOP .)
    UNSIGNED        reduce using rule 89 (unary2_operator -> MULTOP .)
    FLOAT           reduce using rule 89 (unary2_operator -> MULTOP .)
    DOUBLE          reduce using rule 89 (unary2_operator -> MULTOP .)
    VOID            reduce using rule 89 (unary2_operator -> MULTOP .)
    STRING          reduce using rule 89 (unary2_operator -> MULTOP .)
    AUTO            reduce using rule 89 (unary2_operator -> MULTOP .)
    NUMBER          reduce using rule 89 (unary2_operator -> MULTOP .)
    STRING_L        reduce using rule 89 (unary2_operator -> MULTOP .)
    SCHAR           reduce using rule 89 (unary2_operator -> MULTOP .)
    LSPAREN         reduce using rule 89 (unary2_operator -> MULTOP .)
    EQUAL           reduce using rule 89 (unary2_operator -> MULTOP .)
    RTEMPLATE       reduce using rule 89 (unary2_operator -> MULTOP .)
    COMMA           reduce using rule 89 (unary2_operator -> MULTOP .)
    RPAREN          reduce using rule 89 (unary2_operator -> MULTOP .)


state 53

    (90) unary2_operator -> BANDOP .

    IDENTIFIER      reduce using rule 90 (unary2_operator -> BANDOP .)
    DOUBLEBNOP      reduce using rule 90 (unary2_operator -> BANDOP .)
    MULTOP          reduce using rule 90 (unary2_operator -> BANDOP .)
    BANDOP          reduce using rule 90 (unary2_operator -> BANDOP .)
    OPERATOR        reduce using rule 90 (unary2_operator -> BANDOP .)
    LPAREN          reduce using rule 90 (unary2_operator -> BANDOP .)
    DPLUSOP         reduce using rule 90 (unary2_operator -> BANDOP .)
    DMINUSOP        reduce using rule 90 (unary2_operator -> BANDOP .)
    SIZEOF          reduce using rule 90 (unary2_operator -> BANDOP .)
    PLUSOP          reduce using rule 90 (unary2_operator -> BANDOP .)
    MINUSOP         reduce using rule 90 (unary2_operator -> BANDOP .)
    NOTSYM          reduce using rule 90 (unary2_operator -> BANDOP .)
    BNOP            reduce using rule 90 (unary2_operator -> BANDOP .)
    NEW             reduce using rule 90 (unary2_operator -> BANDOP .)
    DELETE          reduce using rule 90 (unary2_operator -> BANDOP .)
    THIS            reduce using rule 90 (unary2_operator -> BANDOP .)
    CHAR            reduce using rule 90 (unary2_operator -> BANDOP .)
    SHORT           reduce using rule 90 (unary2_operator -> BANDOP .)
    INT             reduce using rule 90 (unary2_operator -> BANDOP .)
    LONG            reduce using rule 90 (unary2_operator -> BANDOP .)
    SIGNED          reduce using rule 90 (unary2_operator -> BANDOP .)
    UNSIGNED        reduce using rule 90 (unary2_operator -> BANDOP .)
    FLOAT           reduce using rule 90 (unary2_operator -> BANDOP .)
    DOUBLE          reduce using rule 90 (unary2_operator -> BANDOP .)
    VOID            reduce using rule 90 (unary2_operator -> BANDOP .)
    STRING          reduce using rule 90 (unary2_operator -> BANDOP .)
    AUTO            reduce using rule 90 (unary2_operator -> BANDOP .)
    NUMBER          reduce using rule 90 (unary2_operator -> BANDOP .)
    STRING_L        reduce using rule 90 (unary2_operator -> BANDOP .)
    SCHAR           reduce using rule 90 (unary2_operator -> BANDOP .)
    LSPAREN         reduce using rule 90 (unary2_operator -> BANDOP .)
    EQUAL           reduce using rule 90 (unary2_operator -> BANDOP .)
    RTEMPLATE       reduce using rule 90 (unary2_operator -> BANDOP .)
    COMMA           reduce using rule 90 (unary2_operator -> BANDOP .)
    RPAREN          reduce using rule 90 (unary2_operator -> BANDOP .)


state 54

    (135) operator_function_name -> OPERATOR . operator_name
    (136) operator_name -> . NEW
    (137) operator_name -> . DELETE
    (138) operator_name -> . PLUSOP
    (139) operator_name -> . MINUSOP
    (140) operator_name -> . MULTOP
    (141) operator_name -> . DIVOP
    (142) operator_name -> . MODOP
    (143) operator_name -> . XOROP
    (144) operator_name -> . BANDOP
    (145) operator_name -> . BNOP
    (146) operator_name -> . NOTSYM
    (147) operator_name -> . EQUAL
    (148) operator_name -> . LTCOMP
    (149) operator_name -> . GTCOMP
    (150) operator_name -> . PLUSEQOP
    (151) operator_name -> . MINUSEQOP
    (152) operator_name -> . MULTEQOP
    (153) operator_name -> . DIVEQOP
    (154) operator_name -> . MODEQOP
    (155) operator_name -> . XOREQOP
    (156) operator_name -> . BANDEQOP
    (157) operator_name -> . LSHIFT
    (158) operator_name -> . RSHIFT
    (159) operator_name -> . RSHIFTEQOP
    (160) operator_name -> . LSHIFTEQOP
    (161) operator_name -> . EQCOMP
    (162) operator_name -> . NEQCOMP
    (163) operator_name -> . LTECOMP
    (164) operator_name -> . GTECOMP
    (165) operator_name -> . ANDOP
    (166) operator_name -> . OROP
    (167) operator_name -> . DPLUSOP
    (168) operator_name -> . DMINUSOP
    (169) operator_name -> . COMMA
    (170) operator_name -> . ARROWSTAR
    (171) operator_name -> . ARROW
    (172) operator_name -> . LPAREN RPAREN
    (173) operator_name -> . LSPAREN RSPAREN

    NEW             shift and go to state 77
    DELETE          shift and go to state 78
    PLUSOP          shift and go to state 79
    MINUSOP         shift and go to state 80
    MULTOP          shift and go to state 81
    DIVOP           shift and go to state 82
    MODOP           shift and go to state 83
    XOROP           shift and go to state 84
    BANDOP          shift and go to state 85
    BNOP            shift and go to state 86
    NOTSYM          shift and go to state 87
    EQUAL           shift and go to state 88
    LTCOMP          shift and go to state 89
    GTCOMP          shift and go to state 90
    PLUSEQOP        shift and go to state 91
    MINUSEQOP       shift and go to state 92
    MULTEQOP        shift and go to state 93
    DIVEQOP         shift and go to state 94
    MODEQOP         shift and go to state 95
    XOREQOP         shift and go to state 96
    BANDEQOP        shift and go to state 97
    LSHIFT          shift and go to state 98
    RSHIFT          shift and go to state 99
    RSHIFTEQOP      shift and go to state 100
    LSHIFTEQOP      shift and go to state 101
    EQCOMP          shift and go to state 102
    NEQCOMP         shift and go to state 103
    LTECOMP         shift and go to state 104
    GTECOMP         shift and go to state 105
    ANDOP           shift and go to state 106
    OROP            shift and go to state 107
    DPLUSOP         shift and go to state 108
    DMINUSOP        shift and go to state 109
    COMMA           shift and go to state 110
    ARROWSTAR       shift and go to state 111
    ARROW           shift and go to state 112
    LPAREN          shift and go to state 113
    LSPAREN         shift and go to state 114

    operator_name                  shift and go to state 76

state 55

    (276) declaration -> class_define_specifier SEMICOLON .

    CONST           reduce using rule 276 (declaration -> class_define_specifier SEMICOLON .)
    TYPEDEF         reduce using rule 276 (declaration -> class_define_specifier SEMICOLON .)
    ASM             reduce using rule 276 (declaration -> class_define_specifier SEMICOLON .)
    TEMPLATE        reduce using rule 276 (declaration -> class_define_specifier SEMICOLON .)
    CHAR            reduce using rule 276 (declaration -> class_define_specifier SEMICOLON .)
    SHORT           reduce using rule 276 (declaration -> class_define_specifier SEMICOLON .)
    INT             reduce using rule 276 (declaration -> class_define_specifier SEMICOLON .)
    LONG            reduce using rule 276 (declaration -> class_define_specifier SEMICOLON .)
    SIGNED          reduce using rule 276 (declaration -> class_define_specifier SEMICOLON .)
    UNSIGNED        reduce using rule 276 (declaration -> class_define_specifier SEMICOLON .)
    FLOAT           reduce using rule 276 (declaration -> class_define_specifier SEMICOLON .)
    DOUBLE          reduce using rule 276 (declaration -> class_define_specifier SEMICOLON .)
    VOID            reduce using rule 276 (declaration -> class_define_specifier SEMICOLON .)
    STRING          reduce using rule 276 (declaration -> class_define_specifier SEMICOLON .)
    AUTO            reduce using rule 276 (declaration -> class_define_specifier SEMICOLON .)
    TYPE            reduce using rule 276 (declaration -> class_define_specifier SEMICOLON .)
    CLASS           reduce using rule 276 (declaration -> class_define_specifier SEMICOLON .)
    STRUCT          reduce using rule 276 (declaration -> class_define_specifier SEMICOLON .)
    $end            reduce using rule 276 (declaration -> class_define_specifier SEMICOLON .)
    RCPAREN         reduce using rule 276 (declaration -> class_define_specifier SEMICOLON .)
    IDENTIFIER      reduce using rule 276 (declaration -> class_define_specifier SEMICOLON .)
    CASE            reduce using rule 276 (declaration -> class_define_specifier SEMICOLON .)
    DEFAULT         reduce using rule 276 (declaration -> class_define_specifier SEMICOLON .)
    SEMICOLON       reduce using rule 276 (declaration -> class_define_specifier SEMICOLON .)
    LCPAREN         reduce using rule 276 (declaration -> class_define_specifier SEMICOLON .)
    IF              reduce using rule 276 (declaration -> class_define_specifier SEMICOLON .)
    SWITCH          reduce using rule 276 (declaration -> class_define_specifier SEMICOLON .)
    WHILE           reduce using rule 276 (declaration -> class_define_specifier SEMICOLON .)
    DO              reduce using rule 276 (declaration -> class_define_specifier SEMICOLON .)
    FOR             reduce using rule 276 (declaration -> class_define_specifier SEMICOLON .)
    BREAK           reduce using rule 276 (declaration -> class_define_specifier SEMICOLON .)
    CONTINUE        reduce using rule 276 (declaration -> class_define_specifier SEMICOLON .)
    RETURN          reduce using rule 276 (declaration -> class_define_specifier SEMICOLON .)
    GOTO            reduce using rule 276 (declaration -> class_define_specifier SEMICOLON .)
    TRY             reduce using rule 276 (declaration -> class_define_specifier SEMICOLON .)
    THROW           reduce using rule 276 (declaration -> class_define_specifier SEMICOLON .)
    DPLUSOP         reduce using rule 276 (declaration -> class_define_specifier SEMICOLON .)
    DMINUSOP        reduce using rule 276 (declaration -> class_define_specifier SEMICOLON .)
    SIZEOF          reduce using rule 276 (declaration -> class_define_specifier SEMICOLON .)
    PLUSOP          reduce using rule 276 (declaration -> class_define_specifier SEMICOLON .)
    MINUSOP         reduce using rule 276 (declaration -> class_define_specifier SEMICOLON .)
    NOTSYM          reduce using rule 276 (declaration -> class_define_specifier SEMICOLON .)
    BNOP            reduce using rule 276 (declaration -> class_define_specifier SEMICOLON .)
    MULTOP          reduce using rule 276 (declaration -> class_define_specifier SEMICOLON .)
    BANDOP          reduce using rule 276 (declaration -> class_define_specifier SEMICOLON .)
    NEW             reduce using rule 276 (declaration -> class_define_specifier SEMICOLON .)
    DELETE          reduce using rule 276 (declaration -> class_define_specifier SEMICOLON .)
    THIS            reduce using rule 276 (declaration -> class_define_specifier SEMICOLON .)
    LPAREN          reduce using rule 276 (declaration -> class_define_specifier SEMICOLON .)
    NUMBER          reduce using rule 276 (declaration -> class_define_specifier SEMICOLON .)
    STRING_L        reduce using rule 276 (declaration -> class_define_specifier SEMICOLON .)
    SCHAR           reduce using rule 276 (declaration -> class_define_specifier SEMICOLON .)
    DOUBLEBNOP      reduce using rule 276 (declaration -> class_define_specifier SEMICOLON .)
    OPERATOR        reduce using rule 276 (declaration -> class_define_specifier SEMICOLON .)
    ELSE            reduce using rule 276 (declaration -> class_define_specifier SEMICOLON .)


state 56

    (179) type_specifier_ -> CONST type_specifier .

    SEMICOLON       reduce using rule 179 (type_specifier_ -> CONST type_specifier .)
    IDENTIFIER      reduce using rule 179 (type_specifier_ -> CONST type_specifier .)
    DOUBLEBNOP      reduce using rule 179 (type_specifier_ -> CONST type_specifier .)
    MULTOP          reduce using rule 179 (type_specifier_ -> CONST type_specifier .)
    BANDOP          reduce using rule 179 (type_specifier_ -> CONST type_specifier .)
    OPERATOR        reduce using rule 179 (type_specifier_ -> CONST type_specifier .)
    EQUAL           reduce using rule 179 (type_specifier_ -> CONST type_specifier .)
    LSPAREN         reduce using rule 179 (type_specifier_ -> CONST type_specifier .)
    RTEMPLATE       reduce using rule 179 (type_specifier_ -> CONST type_specifier .)
    COMMA           reduce using rule 179 (type_specifier_ -> CONST type_specifier .)
    RPAREN          reduce using rule 179 (type_specifier_ -> CONST type_specifier .)
    LPAREN          reduce using rule 179 (type_specifier_ -> CONST type_specifier .)
    MULTEQOP        reduce using rule 179 (type_specifier_ -> CONST type_specifier .)
    DIVEQOP         reduce using rule 179 (type_specifier_ -> CONST type_specifier .)
    MODEQOP         reduce using rule 179 (type_specifier_ -> CONST type_specifier .)
    PLUSEQOP        reduce using rule 179 (type_specifier_ -> CONST type_specifier .)
    MINUSEQOP       reduce using rule 179 (type_specifier_ -> CONST type_specifier .)
    LSHIFTEQOP      reduce using rule 179 (type_specifier_ -> CONST type_specifier .)
    RSHIFTEQOP      reduce using rule 179 (type_specifier_ -> CONST type_specifier .)
    BANDEQOP        reduce using rule 179 (type_specifier_ -> CONST type_specifier .)
    BOREQOP         reduce using rule 179 (type_specifier_ -> CONST type_specifier .)
    DOTSTAR         reduce using rule 179 (type_specifier_ -> CONST type_specifier .)
    ARROWSTAR       reduce using rule 179 (type_specifier_ -> CONST type_specifier .)
    DIVOP           reduce using rule 179 (type_specifier_ -> CONST type_specifier .)
    MODOP           reduce using rule 179 (type_specifier_ -> CONST type_specifier .)
    PLUSOP          reduce using rule 179 (type_specifier_ -> CONST type_specifier .)
    MINUSOP         reduce using rule 179 (type_specifier_ -> CONST type_specifier .)
    LSHIFT          reduce using rule 179 (type_specifier_ -> CONST type_specifier .)
    RSHIFT          reduce using rule 179 (type_specifier_ -> CONST type_specifier .)
    LTCOMP          reduce using rule 179 (type_specifier_ -> CONST type_specifier .)
    GTCOMP          reduce using rule 179 (type_specifier_ -> CONST type_specifier .)
    LTECOMP         reduce using rule 179 (type_specifier_ -> CONST type_specifier .)
    GTECOMP         reduce using rule 179 (type_specifier_ -> CONST type_specifier .)
    EQCOMP          reduce using rule 179 (type_specifier_ -> CONST type_specifier .)
    NEQCOMP         reduce using rule 179 (type_specifier_ -> CONST type_specifier .)
    XOROP           reduce using rule 179 (type_specifier_ -> CONST type_specifier .)
    OROP            reduce using rule 179 (type_specifier_ -> CONST type_specifier .)
    ANDOP           reduce using rule 179 (type_specifier_ -> CONST type_specifier .)
    QUESMARK        reduce using rule 179 (type_specifier_ -> CONST type_specifier .)
    RSPAREN         reduce using rule 179 (type_specifier_ -> CONST type_specifier .)
    RCPAREN         reduce using rule 179 (type_specifier_ -> CONST type_specifier .)
    COLON           reduce using rule 179 (type_specifier_ -> CONST type_specifier .)


state 57

    (195) complex_type_specifier -> class_key . IDENTIFIER
    (196) complex_type_specifier -> class_key . IDENTIFIER template_class_name

    IDENTIFIER      shift and go to state 115


state 58

    (180) type_specifier_ -> TYPEDEF type_specifier .

    SEMICOLON       reduce using rule 180 (type_specifier_ -> TYPEDEF type_specifier .)
    IDENTIFIER      reduce using rule 180 (type_specifier_ -> TYPEDEF type_specifier .)
    DOUBLEBNOP      reduce using rule 180 (type_specifier_ -> TYPEDEF type_specifier .)
    MULTOP          reduce using rule 180 (type_specifier_ -> TYPEDEF type_specifier .)
    BANDOP          reduce using rule 180 (type_specifier_ -> TYPEDEF type_specifier .)
    OPERATOR        reduce using rule 180 (type_specifier_ -> TYPEDEF type_specifier .)
    EQUAL           reduce using rule 180 (type_specifier_ -> TYPEDEF type_specifier .)
    LSPAREN         reduce using rule 180 (type_specifier_ -> TYPEDEF type_specifier .)
    RTEMPLATE       reduce using rule 180 (type_specifier_ -> TYPEDEF type_specifier .)
    COMMA           reduce using rule 180 (type_specifier_ -> TYPEDEF type_specifier .)
    RPAREN          reduce using rule 180 (type_specifier_ -> TYPEDEF type_specifier .)
    LPAREN          reduce using rule 180 (type_specifier_ -> TYPEDEF type_specifier .)
    MULTEQOP        reduce using rule 180 (type_specifier_ -> TYPEDEF type_specifier .)
    DIVEQOP         reduce using rule 180 (type_specifier_ -> TYPEDEF type_specifier .)
    MODEQOP         reduce using rule 180 (type_specifier_ -> TYPEDEF type_specifier .)
    PLUSEQOP        reduce using rule 180 (type_specifier_ -> TYPEDEF type_specifier .)
    MINUSEQOP       reduce using rule 180 (type_specifier_ -> TYPEDEF type_specifier .)
    LSHIFTEQOP      reduce using rule 180 (type_specifier_ -> TYPEDEF type_specifier .)
    RSHIFTEQOP      reduce using rule 180 (type_specifier_ -> TYPEDEF type_specifier .)
    BANDEQOP        reduce using rule 180 (type_specifier_ -> TYPEDEF type_specifier .)
    BOREQOP         reduce using rule 180 (type_specifier_ -> TYPEDEF type_specifier .)
    DOTSTAR         reduce using rule 180 (type_specifier_ -> TYPEDEF type_specifier .)
    ARROWSTAR       reduce using rule 180 (type_specifier_ -> TYPEDEF type_specifier .)
    DIVOP           reduce using rule 180 (type_specifier_ -> TYPEDEF type_specifier .)
    MODOP           reduce using rule 180 (type_specifier_ -> TYPEDEF type_specifier .)
    PLUSOP          reduce using rule 180 (type_specifier_ -> TYPEDEF type_specifier .)
    MINUSOP         reduce using rule 180 (type_specifier_ -> TYPEDEF type_specifier .)
    LSHIFT          reduce using rule 180 (type_specifier_ -> TYPEDEF type_specifier .)
    RSHIFT          reduce using rule 180 (type_specifier_ -> TYPEDEF type_specifier .)
    LTCOMP          reduce using rule 180 (type_specifier_ -> TYPEDEF type_specifier .)
    GTCOMP          reduce using rule 180 (type_specifier_ -> TYPEDEF type_specifier .)
    LTECOMP         reduce using rule 180 (type_specifier_ -> TYPEDEF type_specifier .)
    GTECOMP         reduce using rule 180 (type_specifier_ -> TYPEDEF type_specifier .)
    EQCOMP          reduce using rule 180 (type_specifier_ -> TYPEDEF type_specifier .)
    NEQCOMP         reduce using rule 180 (type_specifier_ -> TYPEDEF type_specifier .)
    XOROP           reduce using rule 180 (type_specifier_ -> TYPEDEF type_specifier .)
    OROP            reduce using rule 180 (type_specifier_ -> TYPEDEF type_specifier .)
    ANDOP           reduce using rule 180 (type_specifier_ -> TYPEDEF type_specifier .)
    QUESMARK        reduce using rule 180 (type_specifier_ -> TYPEDEF type_specifier .)
    RSPAREN         reduce using rule 180 (type_specifier_ -> TYPEDEF type_specifier .)
    RCPAREN         reduce using rule 180 (type_specifier_ -> TYPEDEF type_specifier .)
    COLON           reduce using rule 180 (type_specifier_ -> TYPEDEF type_specifier .)


state 59

    (293) asm_declaration -> ASM LPAREN . STRING_L RPAREN SEMICOLON

    STRING_L        shift and go to state 116


state 60

    (213) class_define_specifier -> class_head LCPAREN . member_list RCPAREN
    (214) class_define_specifier -> class_head LCPAREN . RCPAREN
    (215) member_list -> . member_access_list
    (216) member_list -> . access_list
    (217) member_list -> . member_list access_list
    (223) member_access_list -> . member_declaration member_access_list
    (224) member_access_list -> . member_declaration
    (221) access_list -> . access_specifier COLON member_access_list
    (222) access_list -> . access_specifier COLON
    (225) member_declaration -> . type_specifier_ member_declarator_list SEMICOLON
    (226) member_declaration -> . member_declarator_list SEMICOLON
    (227) member_declaration -> . type_specifier_ SEMICOLON
    (228) member_declaration -> . SEMICOLON
    (229) member_declaration -> . function_definition
    (230) member_declaration -> . class_define_specifier SEMICOLON
    (218) access_specifier -> . PRIVATE
    (219) access_specifier -> . PROTECTED
    (220) access_specifier -> . PUBLIC
    (179) type_specifier_ -> . CONST type_specifier
    (180) type_specifier_ -> . TYPEDEF type_specifier
    (181) type_specifier_ -> . type_specifier
    (231) member_declarator_list -> . member_declarator
    (232) member_declarator_list -> . member_declarator_list COMMA member_declarator
    (235) function_definition -> . type_specifier_ declarator fct_body
    (213) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (214) class_define_specifier -> . class_head LCPAREN RCPAREN
    (182) type_specifier -> . simple_type_name
    (183) type_specifier -> . complex_type_specifier
    (233) member_declarator -> . declarator pure_specifier
    (234) member_declarator -> . declarator
    (200) class_head -> . class_key IDENTIFIER base_spec
    (201) class_head -> . class_key IDENTIFIER
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (195) complex_type_specifier -> . class_key IDENTIFIER
    (196) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (197) complex_type_specifier -> . TYPE IDENTIFIER
    (198) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (117) declarator -> . name
    (118) declarator -> . unary2_operator declarator
    (119) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (120) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (121) declarator -> . declarator LSPAREN RSPAREN
    (211) class_key -> . CLASS
    (212) class_key -> . STRUCT
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (135) operator_function_name -> . OPERATOR operator_name

    RCPAREN         shift and go to state 118
    SEMICOLON       shift and go to state 125
    PRIVATE         shift and go to state 128
    PROTECTED       shift and go to state 129
    PUBLIC          shift and go to state 130
    CONST           shift and go to state 14
    TYPEDEF         shift and go to state 16
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    TYPE            shift and go to state 34
    CLASS           shift and go to state 35
    STRUCT          shift and go to state 36
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    OPERATOR        shift and go to state 54

    class_head                     shift and go to state 18
    member_list                    shift and go to state 117
    member_access_list             shift and go to state 119
    access_list                    shift and go to state 120
    member_declaration             shift and go to state 121
    access_specifier               shift and go to state 122
    type_specifier_                shift and go to state 123
    member_declarator_list         shift and go to state 124
    function_definition            shift and go to state 126
    class_define_specifier         shift and go to state 127
    type_specifier                 shift and go to state 15
    member_declarator              shift and go to state 131
    declarator                     shift and go to state 132
    simple_type_name               shift and go to state 20
    complex_type_specifier         shift and go to state 21
    class_key                      shift and go to state 22
    name                           shift and go to state 47
    unary2_operator                shift and go to state 48
    operator_function_name         shift and go to state 50

state 61

    (278) template_declaration -> TEMPLATE LTEMPLATE . template_argument_list RTEMPLATE declaration
    (279) template_argument_list -> . argument_declaration
    (280) template_argument_list -> . template_argument_list COMMA argument_declaration
    (126) argument_declaration -> . type_specifier_ declarator
    (127) argument_declaration -> . type_specifier_ declarator EQUAL expression
    (128) argument_declaration -> . type_specifier_ abstract_declarator
    (129) argument_declaration -> . type_specifier_
    (130) argument_declaration -> . type_specifier_ abstract_declarator EQUAL expression
    (131) argument_declaration -> . type_specifier_ EQUAL expression
    (179) type_specifier_ -> . CONST type_specifier
    (180) type_specifier_ -> . TYPEDEF type_specifier
    (181) type_specifier_ -> . type_specifier
    (182) type_specifier -> . simple_type_name
    (183) type_specifier -> . complex_type_specifier
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (195) complex_type_specifier -> . class_key IDENTIFIER
    (196) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (197) complex_type_specifier -> . TYPE IDENTIFIER
    (198) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (211) class_key -> . CLASS
    (212) class_key -> . STRUCT

    CONST           shift and go to state 14
    TYPEDEF         shift and go to state 16
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    TYPE            shift and go to state 34
    CLASS           shift and go to state 35
    STRUCT          shift and go to state 36

    template_argument_list         shift and go to state 133
    argument_declaration           shift and go to state 134
    type_specifier_                shift and go to state 135
    type_specifier                 shift and go to state 15
    simple_type_name               shift and go to state 20
    complex_type_specifier         shift and go to state 21
    class_key                      shift and go to state 57

state 62

    (200) class_head -> class_key IDENTIFIER . base_spec
    (201) class_head -> class_key IDENTIFIER .
    (195) complex_type_specifier -> class_key IDENTIFIER .
    (196) complex_type_specifier -> class_key IDENTIFIER . template_class_name
    (202) base_spec -> . COLON base_list
    (174) template_class_name -> . LTEMPLATE template_arg_list RTEMPLATE

    LCPAREN         reduce using rule 201 (class_head -> class_key IDENTIFIER .)
    SEMICOLON       reduce using rule 195 (complex_type_specifier -> class_key IDENTIFIER .)
    IDENTIFIER      reduce using rule 195 (complex_type_specifier -> class_key IDENTIFIER .)
    DOUBLEBNOP      reduce using rule 195 (complex_type_specifier -> class_key IDENTIFIER .)
    MULTOP          reduce using rule 195 (complex_type_specifier -> class_key IDENTIFIER .)
    BANDOP          reduce using rule 195 (complex_type_specifier -> class_key IDENTIFIER .)
    OPERATOR        reduce using rule 195 (complex_type_specifier -> class_key IDENTIFIER .)
    COLON           shift and go to state 138
    LTEMPLATE       shift and go to state 139

    base_spec                      shift and go to state 136
    template_class_name            shift and go to state 137

state 63

    (197) complex_type_specifier -> TYPE IDENTIFIER .
    (198) complex_type_specifier -> TYPE IDENTIFIER . template_class_name
    (174) template_class_name -> . LTEMPLATE template_arg_list RTEMPLATE

    SEMICOLON       reduce using rule 197 (complex_type_specifier -> TYPE IDENTIFIER .)
    IDENTIFIER      reduce using rule 197 (complex_type_specifier -> TYPE IDENTIFIER .)
    DOUBLEBNOP      reduce using rule 197 (complex_type_specifier -> TYPE IDENTIFIER .)
    MULTOP          reduce using rule 197 (complex_type_specifier -> TYPE IDENTIFIER .)
    BANDOP          reduce using rule 197 (complex_type_specifier -> TYPE IDENTIFIER .)
    OPERATOR        reduce using rule 197 (complex_type_specifier -> TYPE IDENTIFIER .)
    EQUAL           reduce using rule 197 (complex_type_specifier -> TYPE IDENTIFIER .)
    LSPAREN         reduce using rule 197 (complex_type_specifier -> TYPE IDENTIFIER .)
    RTEMPLATE       reduce using rule 197 (complex_type_specifier -> TYPE IDENTIFIER .)
    COMMA           reduce using rule 197 (complex_type_specifier -> TYPE IDENTIFIER .)
    RPAREN          reduce using rule 197 (complex_type_specifier -> TYPE IDENTIFIER .)
    LPAREN          reduce using rule 197 (complex_type_specifier -> TYPE IDENTIFIER .)
    MULTEQOP        reduce using rule 197 (complex_type_specifier -> TYPE IDENTIFIER .)
    DIVEQOP         reduce using rule 197 (complex_type_specifier -> TYPE IDENTIFIER .)
    MODEQOP         reduce using rule 197 (complex_type_specifier -> TYPE IDENTIFIER .)
    PLUSEQOP        reduce using rule 197 (complex_type_specifier -> TYPE IDENTIFIER .)
    MINUSEQOP       reduce using rule 197 (complex_type_specifier -> TYPE IDENTIFIER .)
    LSHIFTEQOP      reduce using rule 197 (complex_type_specifier -> TYPE IDENTIFIER .)
    RSHIFTEQOP      reduce using rule 197 (complex_type_specifier -> TYPE IDENTIFIER .)
    BANDEQOP        reduce using rule 197 (complex_type_specifier -> TYPE IDENTIFIER .)
    BOREQOP         reduce using rule 197 (complex_type_specifier -> TYPE IDENTIFIER .)
    DOTSTAR         reduce using rule 197 (complex_type_specifier -> TYPE IDENTIFIER .)
    ARROWSTAR       reduce using rule 197 (complex_type_specifier -> TYPE IDENTIFIER .)
    DIVOP           reduce using rule 197 (complex_type_specifier -> TYPE IDENTIFIER .)
    MODOP           reduce using rule 197 (complex_type_specifier -> TYPE IDENTIFIER .)
    PLUSOP          reduce using rule 197 (complex_type_specifier -> TYPE IDENTIFIER .)
    MINUSOP         reduce using rule 197 (complex_type_specifier -> TYPE IDENTIFIER .)
    LSHIFT          reduce using rule 197 (complex_type_specifier -> TYPE IDENTIFIER .)
    RSHIFT          reduce using rule 197 (complex_type_specifier -> TYPE IDENTIFIER .)
    LTCOMP          reduce using rule 197 (complex_type_specifier -> TYPE IDENTIFIER .)
    GTCOMP          reduce using rule 197 (complex_type_specifier -> TYPE IDENTIFIER .)
    LTECOMP         reduce using rule 197 (complex_type_specifier -> TYPE IDENTIFIER .)
    GTECOMP         reduce using rule 197 (complex_type_specifier -> TYPE IDENTIFIER .)
    EQCOMP          reduce using rule 197 (complex_type_specifier -> TYPE IDENTIFIER .)
    NEQCOMP         reduce using rule 197 (complex_type_specifier -> TYPE IDENTIFIER .)
    XOROP           reduce using rule 197 (complex_type_specifier -> TYPE IDENTIFIER .)
    OROP            reduce using rule 197 (complex_type_specifier -> TYPE IDENTIFIER .)
    ANDOP           reduce using rule 197 (complex_type_specifier -> TYPE IDENTIFIER .)
    QUESMARK        reduce using rule 197 (complex_type_specifier -> TYPE IDENTIFIER .)
    RSPAREN         reduce using rule 197 (complex_type_specifier -> TYPE IDENTIFIER .)
    RCPAREN         reduce using rule 197 (complex_type_specifier -> TYPE IDENTIFIER .)
    COLON           reduce using rule 197 (complex_type_specifier -> TYPE IDENTIFIER .)
    LTEMPLATE       shift and go to state 139

    template_class_name            shift and go to state 140

state 64

    (4) control_line_stmt -> include_control LTCOMP STRING_L . GTCOMP

    GTCOMP          shift and go to state 141


state 65

    (272) declaration -> type_specifier_ declarator_list SEMICOLON .

    CONST           reduce using rule 272 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    TYPEDEF         reduce using rule 272 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    ASM             reduce using rule 272 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    TEMPLATE        reduce using rule 272 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    CHAR            reduce using rule 272 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    SHORT           reduce using rule 272 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    INT             reduce using rule 272 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    LONG            reduce using rule 272 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    SIGNED          reduce using rule 272 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    UNSIGNED        reduce using rule 272 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    FLOAT           reduce using rule 272 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    DOUBLE          reduce using rule 272 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    VOID            reduce using rule 272 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    STRING          reduce using rule 272 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    AUTO            reduce using rule 272 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    TYPE            reduce using rule 272 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    CLASS           reduce using rule 272 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    STRUCT          reduce using rule 272 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    $end            reduce using rule 272 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    RCPAREN         reduce using rule 272 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    IDENTIFIER      reduce using rule 272 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    CASE            reduce using rule 272 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    DEFAULT         reduce using rule 272 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    SEMICOLON       reduce using rule 272 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    LCPAREN         reduce using rule 272 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    IF              reduce using rule 272 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    SWITCH          reduce using rule 272 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    WHILE           reduce using rule 272 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    DO              reduce using rule 272 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    FOR             reduce using rule 272 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    BREAK           reduce using rule 272 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    CONTINUE        reduce using rule 272 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    RETURN          reduce using rule 272 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    GOTO            reduce using rule 272 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    TRY             reduce using rule 272 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    THROW           reduce using rule 272 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    DPLUSOP         reduce using rule 272 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    DMINUSOP        reduce using rule 272 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    SIZEOF          reduce using rule 272 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    PLUSOP          reduce using rule 272 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    MINUSOP         reduce using rule 272 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    NOTSYM          reduce using rule 272 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    BNOP            reduce using rule 272 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    MULTOP          reduce using rule 272 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    BANDOP          reduce using rule 272 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    NEW             reduce using rule 272 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    DELETE          reduce using rule 272 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    THIS            reduce using rule 272 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    LPAREN          reduce using rule 272 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    NUMBER          reduce using rule 272 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    STRING_L        reduce using rule 272 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    SCHAR           reduce using rule 272 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    DOUBLEBNOP      reduce using rule 272 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    OPERATOR        reduce using rule 272 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    ELSE            reduce using rule 272 (declaration -> type_specifier_ declarator_list SEMICOLON .)


state 66

    (282) declarator_list -> declarator_list COMMA . init_declarator
    (283) init_declarator -> . declarator initializer
    (284) init_declarator -> . declarator
    (117) declarator -> . name
    (118) declarator -> . unary2_operator declarator
    (119) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (120) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (121) declarator -> . declarator LSPAREN RSPAREN
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (135) operator_function_name -> . OPERATOR operator_name

    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    OPERATOR        shift and go to state 54

    init_declarator                shift and go to state 142
    declarator                     shift and go to state 143
    name                           shift and go to state 47
    unary2_operator                shift and go to state 48
    operator_function_name         shift and go to state 50

state 67

    (235) function_definition -> type_specifier_ declarator fct_body .

    CONST           reduce using rule 235 (function_definition -> type_specifier_ declarator fct_body .)
    TYPEDEF         reduce using rule 235 (function_definition -> type_specifier_ declarator fct_body .)
    ASM             reduce using rule 235 (function_definition -> type_specifier_ declarator fct_body .)
    TEMPLATE        reduce using rule 235 (function_definition -> type_specifier_ declarator fct_body .)
    CHAR            reduce using rule 235 (function_definition -> type_specifier_ declarator fct_body .)
    SHORT           reduce using rule 235 (function_definition -> type_specifier_ declarator fct_body .)
    INT             reduce using rule 235 (function_definition -> type_specifier_ declarator fct_body .)
    LONG            reduce using rule 235 (function_definition -> type_specifier_ declarator fct_body .)
    SIGNED          reduce using rule 235 (function_definition -> type_specifier_ declarator fct_body .)
    UNSIGNED        reduce using rule 235 (function_definition -> type_specifier_ declarator fct_body .)
    FLOAT           reduce using rule 235 (function_definition -> type_specifier_ declarator fct_body .)
    DOUBLE          reduce using rule 235 (function_definition -> type_specifier_ declarator fct_body .)
    VOID            reduce using rule 235 (function_definition -> type_specifier_ declarator fct_body .)
    STRING          reduce using rule 235 (function_definition -> type_specifier_ declarator fct_body .)
    AUTO            reduce using rule 235 (function_definition -> type_specifier_ declarator fct_body .)
    TYPE            reduce using rule 235 (function_definition -> type_specifier_ declarator fct_body .)
    CLASS           reduce using rule 235 (function_definition -> type_specifier_ declarator fct_body .)
    STRUCT          reduce using rule 235 (function_definition -> type_specifier_ declarator fct_body .)
    $end            reduce using rule 235 (function_definition -> type_specifier_ declarator fct_body .)
    SEMICOLON       reduce using rule 235 (function_definition -> type_specifier_ declarator fct_body .)
    IDENTIFIER      reduce using rule 235 (function_definition -> type_specifier_ declarator fct_body .)
    DOUBLEBNOP      reduce using rule 235 (function_definition -> type_specifier_ declarator fct_body .)
    MULTOP          reduce using rule 235 (function_definition -> type_specifier_ declarator fct_body .)
    BANDOP          reduce using rule 235 (function_definition -> type_specifier_ declarator fct_body .)
    OPERATOR        reduce using rule 235 (function_definition -> type_specifier_ declarator fct_body .)
    RCPAREN         reduce using rule 235 (function_definition -> type_specifier_ declarator fct_body .)
    PRIVATE         reduce using rule 235 (function_definition -> type_specifier_ declarator fct_body .)
    PROTECTED       reduce using rule 235 (function_definition -> type_specifier_ declarator fct_body .)
    PUBLIC          reduce using rule 235 (function_definition -> type_specifier_ declarator fct_body .)
    CASE            reduce using rule 235 (function_definition -> type_specifier_ declarator fct_body .)
    DEFAULT         reduce using rule 235 (function_definition -> type_specifier_ declarator fct_body .)
    LCPAREN         reduce using rule 235 (function_definition -> type_specifier_ declarator fct_body .)
    IF              reduce using rule 235 (function_definition -> type_specifier_ declarator fct_body .)
    SWITCH          reduce using rule 235 (function_definition -> type_specifier_ declarator fct_body .)
    WHILE           reduce using rule 235 (function_definition -> type_specifier_ declarator fct_body .)
    DO              reduce using rule 235 (function_definition -> type_specifier_ declarator fct_body .)
    FOR             reduce using rule 235 (function_definition -> type_specifier_ declarator fct_body .)
    BREAK           reduce using rule 235 (function_definition -> type_specifier_ declarator fct_body .)
    CONTINUE        reduce using rule 235 (function_definition -> type_specifier_ declarator fct_body .)
    RETURN          reduce using rule 235 (function_definition -> type_specifier_ declarator fct_body .)
    GOTO            reduce using rule 235 (function_definition -> type_specifier_ declarator fct_body .)
    TRY             reduce using rule 235 (function_definition -> type_specifier_ declarator fct_body .)
    THROW           reduce using rule 235 (function_definition -> type_specifier_ declarator fct_body .)
    DPLUSOP         reduce using rule 235 (function_definition -> type_specifier_ declarator fct_body .)
    DMINUSOP        reduce using rule 235 (function_definition -> type_specifier_ declarator fct_body .)
    SIZEOF          reduce using rule 235 (function_definition -> type_specifier_ declarator fct_body .)
    PLUSOP          reduce using rule 235 (function_definition -> type_specifier_ declarator fct_body .)
    MINUSOP         reduce using rule 235 (function_definition -> type_specifier_ declarator fct_body .)
    NOTSYM          reduce using rule 235 (function_definition -> type_specifier_ declarator fct_body .)
    BNOP            reduce using rule 235 (function_definition -> type_specifier_ declarator fct_body .)
    NEW             reduce using rule 235 (function_definition -> type_specifier_ declarator fct_body .)
    DELETE          reduce using rule 235 (function_definition -> type_specifier_ declarator fct_body .)
    THIS            reduce using rule 235 (function_definition -> type_specifier_ declarator fct_body .)
    LPAREN          reduce using rule 235 (function_definition -> type_specifier_ declarator fct_body .)
    NUMBER          reduce using rule 235 (function_definition -> type_specifier_ declarator fct_body .)
    STRING_L        reduce using rule 235 (function_definition -> type_specifier_ declarator fct_body .)
    SCHAR           reduce using rule 235 (function_definition -> type_specifier_ declarator fct_body .)
    ELSE            reduce using rule 235 (function_definition -> type_specifier_ declarator fct_body .)


state 68

    (119) declarator -> declarator LPAREN . argument_declaration_list RPAREN
    (288) initializer -> LPAREN . expression_list RPAREN
    (122) argument_declaration_list -> . arg_declaration_list
    (123) argument_declaration_list -> . empty
    (294) expression_list -> . assignment_expression
    (295) expression_list -> . expression_list COMMA assignment_expression
    (124) arg_declaration_list -> . argument_declaration
    (125) arg_declaration_list -> . argument_declaration COMMA arg_declaration_list
    (11) empty -> .
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (126) argument_declaration -> . type_specifier_ declarator
    (127) argument_declaration -> . type_specifier_ declarator EQUAL expression
    (128) argument_declaration -> . type_specifier_ abstract_declarator
    (129) argument_declaration -> . type_specifier_
    (130) argument_declaration -> . type_specifier_ abstract_declarator EQUAL expression
    (131) argument_declaration -> . type_specifier_ EQUAL expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (179) type_specifier_ -> . CONST type_specifier
    (180) type_specifier_ -> . TYPEDEF type_specifier
    (181) type_specifier_ -> . type_specifier
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (182) type_specifier -> . simple_type_name
    (183) type_specifier -> . complex_type_specifier
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (195) complex_type_specifier -> . class_key IDENTIFIER
    (196) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (197) complex_type_specifier -> . TYPE IDENTIFIER
    (198) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (211) class_key -> . CLASS
    (212) class_key -> . STRUCT
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (135) operator_function_name -> . OPERATOR operator_name
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          reduce using rule 11 (empty -> .)
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    CONST           shift and go to state 14
    TYPEDEF         shift and go to state 16
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    THIS            shift and go to state 175
    LPAREN          shift and go to state 144
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    TYPE            shift and go to state 34
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    CLASS           shift and go to state 35
    STRUCT          shift and go to state 36
    OPERATOR        shift and go to state 54

    argument_declaration_list      shift and go to state 145
    expression_list                shift and go to state 146
    arg_declaration_list           shift and go to state 147
    empty                          shift and go to state 148
    assignment_expression          shift and go to state 149
    argument_declaration           shift and go to state 150
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    type_specifier_                shift and go to state 135
    logical_OR_expression          shift and go to state 153
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    cast_expression                shift and go to state 158
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    type_specifier                 shift and go to state 15
    logical_AND_expression         shift and go to state 163
    primary_expression             shift and go to state 164
    simple_type_name               shift and go to state 165
    name                           shift and go to state 166
    complex_type_specifier         shift and go to state 21
    inclusive_OR_expression        shift and go to state 173
    literal                        shift and go to state 174
    class_key                      shift and go to state 57
    exclusive_OR_expression        shift and go to state 176
    operator_function_name         shift and go to state 50
    AND_expression                 shift and go to state 180
    equality_expression            shift and go to state 181
    relational_expression          shift and go to state 182
    shift_expression               shift and go to state 183
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186

state 69

    (120) declarator -> declarator LSPAREN . constant_expression RSPAREN
    (121) declarator -> declarator LSPAREN . RSPAREN
    (12) constant_expression -> . conditional_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (135) operator_function_name -> . OPERATOR operator_name

    RSPAREN         shift and go to state 188
    LPAREN          shift and go to state 191
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    THIS            shift and go to state 175
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    constant_expression            shift and go to state 187
    conditional_expression         shift and go to state 189
    logical_OR_expression          shift and go to state 153
    logical_AND_expression         shift and go to state 163
    inclusive_OR_expression        shift and go to state 173
    exclusive_OR_expression        shift and go to state 176
    AND_expression                 shift and go to state 180
    equality_expression            shift and go to state 181
    relational_expression          shift and go to state 182
    shift_expression               shift and go to state 183
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186
    cast_expression                shift and go to state 158
    unary_expression               shift and go to state 190
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    primary_expression             shift and go to state 164
    simple_type_name               shift and go to state 192
    name                           shift and go to state 166
    literal                        shift and go to state 174
    operator_function_name         shift and go to state 50

state 70

    (283) init_declarator -> declarator initializer .

    SEMICOLON       reduce using rule 283 (init_declarator -> declarator initializer .)
    COMMA           reduce using rule 283 (init_declarator -> declarator initializer .)


state 71

    (236) fct_body -> compound_statement .

    CONST           reduce using rule 236 (fct_body -> compound_statement .)
    TYPEDEF         reduce using rule 236 (fct_body -> compound_statement .)
    ASM             reduce using rule 236 (fct_body -> compound_statement .)
    TEMPLATE        reduce using rule 236 (fct_body -> compound_statement .)
    CHAR            reduce using rule 236 (fct_body -> compound_statement .)
    SHORT           reduce using rule 236 (fct_body -> compound_statement .)
    INT             reduce using rule 236 (fct_body -> compound_statement .)
    LONG            reduce using rule 236 (fct_body -> compound_statement .)
    SIGNED          reduce using rule 236 (fct_body -> compound_statement .)
    UNSIGNED        reduce using rule 236 (fct_body -> compound_statement .)
    FLOAT           reduce using rule 236 (fct_body -> compound_statement .)
    DOUBLE          reduce using rule 236 (fct_body -> compound_statement .)
    VOID            reduce using rule 236 (fct_body -> compound_statement .)
    STRING          reduce using rule 236 (fct_body -> compound_statement .)
    AUTO            reduce using rule 236 (fct_body -> compound_statement .)
    TYPE            reduce using rule 236 (fct_body -> compound_statement .)
    CLASS           reduce using rule 236 (fct_body -> compound_statement .)
    STRUCT          reduce using rule 236 (fct_body -> compound_statement .)
    $end            reduce using rule 236 (fct_body -> compound_statement .)
    RCPAREN         reduce using rule 236 (fct_body -> compound_statement .)
    IDENTIFIER      reduce using rule 236 (fct_body -> compound_statement .)
    CASE            reduce using rule 236 (fct_body -> compound_statement .)
    DEFAULT         reduce using rule 236 (fct_body -> compound_statement .)
    SEMICOLON       reduce using rule 236 (fct_body -> compound_statement .)
    LCPAREN         reduce using rule 236 (fct_body -> compound_statement .)
    IF              reduce using rule 236 (fct_body -> compound_statement .)
    SWITCH          reduce using rule 236 (fct_body -> compound_statement .)
    WHILE           reduce using rule 236 (fct_body -> compound_statement .)
    DO              reduce using rule 236 (fct_body -> compound_statement .)
    FOR             reduce using rule 236 (fct_body -> compound_statement .)
    BREAK           reduce using rule 236 (fct_body -> compound_statement .)
    CONTINUE        reduce using rule 236 (fct_body -> compound_statement .)
    RETURN          reduce using rule 236 (fct_body -> compound_statement .)
    GOTO            reduce using rule 236 (fct_body -> compound_statement .)
    TRY             reduce using rule 236 (fct_body -> compound_statement .)
    THROW           reduce using rule 236 (fct_body -> compound_statement .)
    DPLUSOP         reduce using rule 236 (fct_body -> compound_statement .)
    DMINUSOP        reduce using rule 236 (fct_body -> compound_statement .)
    SIZEOF          reduce using rule 236 (fct_body -> compound_statement .)
    PLUSOP          reduce using rule 236 (fct_body -> compound_statement .)
    MINUSOP         reduce using rule 236 (fct_body -> compound_statement .)
    NOTSYM          reduce using rule 236 (fct_body -> compound_statement .)
    BNOP            reduce using rule 236 (fct_body -> compound_statement .)
    MULTOP          reduce using rule 236 (fct_body -> compound_statement .)
    BANDOP          reduce using rule 236 (fct_body -> compound_statement .)
    NEW             reduce using rule 236 (fct_body -> compound_statement .)
    DELETE          reduce using rule 236 (fct_body -> compound_statement .)
    THIS            reduce using rule 236 (fct_body -> compound_statement .)
    LPAREN          reduce using rule 236 (fct_body -> compound_statement .)
    NUMBER          reduce using rule 236 (fct_body -> compound_statement .)
    STRING_L        reduce using rule 236 (fct_body -> compound_statement .)
    SCHAR           reduce using rule 236 (fct_body -> compound_statement .)
    DOUBLEBNOP      reduce using rule 236 (fct_body -> compound_statement .)
    OPERATOR        reduce using rule 236 (fct_body -> compound_statement .)
    ELSE            reduce using rule 236 (fct_body -> compound_statement .)
    PRIVATE         reduce using rule 236 (fct_body -> compound_statement .)
    PROTECTED       reduce using rule 236 (fct_body -> compound_statement .)
    PUBLIC          reduce using rule 236 (fct_body -> compound_statement .)


state 72

    (285) initializer -> EQUAL . assignment_expression
    (286) initializer -> EQUAL . LCPAREN initializer_list RCPAREN
    (287) initializer -> EQUAL . LCPAREN initializer_list COMMA RCPAREN
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (135) operator_function_name -> . OPERATOR operator_name
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LCPAREN         shift and go to state 194
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    THIS            shift and go to state 175
    LPAREN          shift and go to state 144
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    assignment_expression          shift and go to state 193
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    logical_OR_expression          shift and go to state 153
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    cast_expression                shift and go to state 158
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    logical_AND_expression         shift and go to state 163
    primary_expression             shift and go to state 164
    simple_type_name               shift and go to state 192
    name                           shift and go to state 166
    inclusive_OR_expression        shift and go to state 173
    literal                        shift and go to state 174
    exclusive_OR_expression        shift and go to state 176
    operator_function_name         shift and go to state 50
    AND_expression                 shift and go to state 180
    equality_expression            shift and go to state 181
    relational_expression          shift and go to state 182
    shift_expression               shift and go to state 183
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186

state 73

    (237) compound_statement -> LCPAREN . statement_list RCPAREN
    (238) compound_statement -> LCPAREN . RCPAREN
    (239) statement_list -> . statement
    (240) statement_list -> . statement_list statement
    (241) statement -> . labeled_statement
    (242) statement -> . expression_statement
    (243) statement -> . compound_statement
    (244) statement -> . selection_statement
    (245) statement -> . iteration_statement
    (246) statement -> . jump_statement
    (247) statement -> . declaration_statement
    (248) statement -> . try_block
    (258) labeled_statement -> . IDENTIFIER COLON statement
    (259) labeled_statement -> . CASE constant_expression COLON statement
    (260) labeled_statement -> . DEFAULT COLON statement
    (269) expression_statement -> . expression SEMICOLON
    (270) expression_statement -> . SEMICOLON
    (237) compound_statement -> . LCPAREN statement_list RCPAREN
    (238) compound_statement -> . LCPAREN RCPAREN
    (254) selection_statement -> . IF LPAREN expression RPAREN statement
    (255) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (256) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (261) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (262) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (263) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (264) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (265) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (266) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (249) jump_statement -> . BREAK SEMICOLON
    (250) jump_statement -> . CONTINUE SEMICOLON
    (251) jump_statement -> . RETURN expression SEMICOLON
    (252) jump_statement -> . RETURN SEMICOLON
    (253) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (271) declaration_statement -> . declaration
    (257) try_block -> . TRY compound_statement CATCH compound_statement
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (272) declaration -> . type_specifier_ declarator_list SEMICOLON
    (273) declaration -> . type_specifier_ SEMICOLON
    (274) declaration -> . asm_declaration
    (275) declaration -> . function_definition
    (276) declaration -> . class_define_specifier SEMICOLON
    (277) declaration -> . template_declaration
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (179) type_specifier_ -> . CONST type_specifier
    (180) type_specifier_ -> . TYPEDEF type_specifier
    (181) type_specifier_ -> . type_specifier
    (293) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (235) function_definition -> . type_specifier_ declarator fct_body
    (213) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (214) class_define_specifier -> . class_head LCPAREN RCPAREN
    (278) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (182) type_specifier -> . simple_type_name
    (183) type_specifier -> . complex_type_specifier
    (200) class_head -> . class_key IDENTIFIER base_spec
    (201) class_head -> . class_key IDENTIFIER
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (195) complex_type_specifier -> . class_key IDENTIFIER
    (196) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (197) complex_type_specifier -> . TYPE IDENTIFIER
    (198) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (211) class_key -> . CLASS
    (212) class_key -> . STRUCT
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (135) operator_function_name -> . OPERATOR operator_name
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RCPAREN         shift and go to state 196
    IDENTIFIER      shift and go to state 206
    CASE            shift and go to state 207
    DEFAULT         shift and go to state 208
    SEMICOLON       shift and go to state 210
    LCPAREN         shift and go to state 73
    IF              shift and go to state 211
    SWITCH          shift and go to state 212
    WHILE           shift and go to state 213
    DO              shift and go to state 214
    FOR             shift and go to state 215
    BREAK           shift and go to state 216
    CONTINUE        shift and go to state 217
    RETURN          shift and go to state 218
    GOTO            shift and go to state 219
    TRY             shift and go to state 221
    THROW           shift and go to state 224
    CONST           shift and go to state 14
    TYPEDEF         shift and go to state 16
    ASM             shift and go to state 17
    TEMPLATE        shift and go to state 19
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    TYPE            shift and go to state 34
    CLASS           shift and go to state 35
    STRUCT          shift and go to state 36
    THIS            shift and go to state 175
    LPAREN          shift and go to state 144
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    statement_list                 shift and go to state 195
    statement                      shift and go to state 197
    labeled_statement              shift and go to state 198
    expression_statement           shift and go to state 199
    compound_statement             shift and go to state 200
    selection_statement            shift and go to state 201
    iteration_statement            shift and go to state 202
    jump_statement                 shift and go to state 203
    declaration_statement          shift and go to state 204
    try_block                      shift and go to state 205
    expression                     shift and go to state 209
    declaration                    shift and go to state 220
    assignment_expression          shift and go to state 222
    throw_expression               shift and go to state 223
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    class_define_specifier         shift and go to state 12
    template_declaration           shift and go to state 13
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    type_specifier                 shift and go to state 15
    class_head                     shift and go to state 18
    logical_OR_expression          shift and go to state 153
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    cast_expression                shift and go to state 158
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    simple_type_name               shift and go to state 225
    complex_type_specifier         shift and go to state 21
    class_key                      shift and go to state 22
    logical_AND_expression         shift and go to state 163
    primary_expression             shift and go to state 164
    name                           shift and go to state 166
    inclusive_OR_expression        shift and go to state 173
    literal                        shift and go to state 174
    exclusive_OR_expression        shift and go to state 176
    operator_function_name         shift and go to state 50
    AND_expression                 shift and go to state 180
    equality_expression            shift and go to state 181
    relational_expression          shift and go to state 182
    shift_expression               shift and go to state 183
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186

state 74

    (118) declarator -> unary2_operator declarator .
    (119) declarator -> declarator . LPAREN argument_declaration_list RPAREN
    (120) declarator -> declarator . LSPAREN constant_expression RSPAREN
    (121) declarator -> declarator . LSPAREN RSPAREN

    LPAREN          reduce using rule 118 (declarator -> unary2_operator declarator .)
    LSPAREN         reduce using rule 118 (declarator -> unary2_operator declarator .)
    EQUAL           reduce using rule 118 (declarator -> unary2_operator declarator .)
    LCPAREN         reduce using rule 118 (declarator -> unary2_operator declarator .)
    SEMICOLON       reduce using rule 118 (declarator -> unary2_operator declarator .)
    COMMA           reduce using rule 118 (declarator -> unary2_operator declarator .)
    RTEMPLATE       reduce using rule 118 (declarator -> unary2_operator declarator .)
    RPAREN          reduce using rule 118 (declarator -> unary2_operator declarator .)

  ! LPAREN          [ shift and go to state 226 ]
  ! LSPAREN         [ shift and go to state 69 ]


state 75

    (134) name -> DOUBLEBNOP IDENTIFIER .

    LPAREN          reduce using rule 134 (name -> DOUBLEBNOP IDENTIFIER .)
    LSPAREN         reduce using rule 134 (name -> DOUBLEBNOP IDENTIFIER .)
    EQUAL           reduce using rule 134 (name -> DOUBLEBNOP IDENTIFIER .)
    LCPAREN         reduce using rule 134 (name -> DOUBLEBNOP IDENTIFIER .)
    SEMICOLON       reduce using rule 134 (name -> DOUBLEBNOP IDENTIFIER .)
    COMMA           reduce using rule 134 (name -> DOUBLEBNOP IDENTIFIER .)
    DOT             reduce using rule 134 (name -> DOUBLEBNOP IDENTIFIER .)
    ARROW           reduce using rule 134 (name -> DOUBLEBNOP IDENTIFIER .)
    DPLUSOP         reduce using rule 134 (name -> DOUBLEBNOP IDENTIFIER .)
    DMINUSOP        reduce using rule 134 (name -> DOUBLEBNOP IDENTIFIER .)
    LTEMPLATE       reduce using rule 134 (name -> DOUBLEBNOP IDENTIFIER .)
    MULTEQOP        reduce using rule 134 (name -> DOUBLEBNOP IDENTIFIER .)
    DIVEQOP         reduce using rule 134 (name -> DOUBLEBNOP IDENTIFIER .)
    MODEQOP         reduce using rule 134 (name -> DOUBLEBNOP IDENTIFIER .)
    PLUSEQOP        reduce using rule 134 (name -> DOUBLEBNOP IDENTIFIER .)
    MINUSEQOP       reduce using rule 134 (name -> DOUBLEBNOP IDENTIFIER .)
    LSHIFTEQOP      reduce using rule 134 (name -> DOUBLEBNOP IDENTIFIER .)
    RSHIFTEQOP      reduce using rule 134 (name -> DOUBLEBNOP IDENTIFIER .)
    BANDEQOP        reduce using rule 134 (name -> DOUBLEBNOP IDENTIFIER .)
    BOREQOP         reduce using rule 134 (name -> DOUBLEBNOP IDENTIFIER .)
    DOTSTAR         reduce using rule 134 (name -> DOUBLEBNOP IDENTIFIER .)
    ARROWSTAR       reduce using rule 134 (name -> DOUBLEBNOP IDENTIFIER .)
    MULTOP          reduce using rule 134 (name -> DOUBLEBNOP IDENTIFIER .)
    DIVOP           reduce using rule 134 (name -> DOUBLEBNOP IDENTIFIER .)
    MODOP           reduce using rule 134 (name -> DOUBLEBNOP IDENTIFIER .)
    PLUSOP          reduce using rule 134 (name -> DOUBLEBNOP IDENTIFIER .)
    MINUSOP         reduce using rule 134 (name -> DOUBLEBNOP IDENTIFIER .)
    LSHIFT          reduce using rule 134 (name -> DOUBLEBNOP IDENTIFIER .)
    RSHIFT          reduce using rule 134 (name -> DOUBLEBNOP IDENTIFIER .)
    LTCOMP          reduce using rule 134 (name -> DOUBLEBNOP IDENTIFIER .)
    GTCOMP          reduce using rule 134 (name -> DOUBLEBNOP IDENTIFIER .)
    LTECOMP         reduce using rule 134 (name -> DOUBLEBNOP IDENTIFIER .)
    GTECOMP         reduce using rule 134 (name -> DOUBLEBNOP IDENTIFIER .)
    EQCOMP          reduce using rule 134 (name -> DOUBLEBNOP IDENTIFIER .)
    NEQCOMP         reduce using rule 134 (name -> DOUBLEBNOP IDENTIFIER .)
    BANDOP          reduce using rule 134 (name -> DOUBLEBNOP IDENTIFIER .)
    XOROP           reduce using rule 134 (name -> DOUBLEBNOP IDENTIFIER .)
    OROP            reduce using rule 134 (name -> DOUBLEBNOP IDENTIFIER .)
    ANDOP           reduce using rule 134 (name -> DOUBLEBNOP IDENTIFIER .)
    QUESMARK        reduce using rule 134 (name -> DOUBLEBNOP IDENTIFIER .)
    RPAREN          reduce using rule 134 (name -> DOUBLEBNOP IDENTIFIER .)
    RSPAREN         reduce using rule 134 (name -> DOUBLEBNOP IDENTIFIER .)
    RTEMPLATE       reduce using rule 134 (name -> DOUBLEBNOP IDENTIFIER .)
    RCPAREN         reduce using rule 134 (name -> DOUBLEBNOP IDENTIFIER .)
    COLON           reduce using rule 134 (name -> DOUBLEBNOP IDENTIFIER .)


state 76

    (135) operator_function_name -> OPERATOR operator_name .

    LPAREN          reduce using rule 135 (operator_function_name -> OPERATOR operator_name .)
    LSPAREN         reduce using rule 135 (operator_function_name -> OPERATOR operator_name .)
    EQUAL           reduce using rule 135 (operator_function_name -> OPERATOR operator_name .)
    LCPAREN         reduce using rule 135 (operator_function_name -> OPERATOR operator_name .)
    SEMICOLON       reduce using rule 135 (operator_function_name -> OPERATOR operator_name .)
    COMMA           reduce using rule 135 (operator_function_name -> OPERATOR operator_name .)
    DOT             reduce using rule 135 (operator_function_name -> OPERATOR operator_name .)
    ARROW           reduce using rule 135 (operator_function_name -> OPERATOR operator_name .)
    DPLUSOP         reduce using rule 135 (operator_function_name -> OPERATOR operator_name .)
    DMINUSOP        reduce using rule 135 (operator_function_name -> OPERATOR operator_name .)
    LTEMPLATE       reduce using rule 135 (operator_function_name -> OPERATOR operator_name .)
    MULTEQOP        reduce using rule 135 (operator_function_name -> OPERATOR operator_name .)
    DIVEQOP         reduce using rule 135 (operator_function_name -> OPERATOR operator_name .)
    MODEQOP         reduce using rule 135 (operator_function_name -> OPERATOR operator_name .)
    PLUSEQOP        reduce using rule 135 (operator_function_name -> OPERATOR operator_name .)
    MINUSEQOP       reduce using rule 135 (operator_function_name -> OPERATOR operator_name .)
    LSHIFTEQOP      reduce using rule 135 (operator_function_name -> OPERATOR operator_name .)
    RSHIFTEQOP      reduce using rule 135 (operator_function_name -> OPERATOR operator_name .)
    BANDEQOP        reduce using rule 135 (operator_function_name -> OPERATOR operator_name .)
    BOREQOP         reduce using rule 135 (operator_function_name -> OPERATOR operator_name .)
    DOTSTAR         reduce using rule 135 (operator_function_name -> OPERATOR operator_name .)
    ARROWSTAR       reduce using rule 135 (operator_function_name -> OPERATOR operator_name .)
    MULTOP          reduce using rule 135 (operator_function_name -> OPERATOR operator_name .)
    DIVOP           reduce using rule 135 (operator_function_name -> OPERATOR operator_name .)
    MODOP           reduce using rule 135 (operator_function_name -> OPERATOR operator_name .)
    PLUSOP          reduce using rule 135 (operator_function_name -> OPERATOR operator_name .)
    MINUSOP         reduce using rule 135 (operator_function_name -> OPERATOR operator_name .)
    LSHIFT          reduce using rule 135 (operator_function_name -> OPERATOR operator_name .)
    RSHIFT          reduce using rule 135 (operator_function_name -> OPERATOR operator_name .)
    LTCOMP          reduce using rule 135 (operator_function_name -> OPERATOR operator_name .)
    GTCOMP          reduce using rule 135 (operator_function_name -> OPERATOR operator_name .)
    LTECOMP         reduce using rule 135 (operator_function_name -> OPERATOR operator_name .)
    GTECOMP         reduce using rule 135 (operator_function_name -> OPERATOR operator_name .)
    EQCOMP          reduce using rule 135 (operator_function_name -> OPERATOR operator_name .)
    NEQCOMP         reduce using rule 135 (operator_function_name -> OPERATOR operator_name .)
    BANDOP          reduce using rule 135 (operator_function_name -> OPERATOR operator_name .)
    XOROP           reduce using rule 135 (operator_function_name -> OPERATOR operator_name .)
    OROP            reduce using rule 135 (operator_function_name -> OPERATOR operator_name .)
    ANDOP           reduce using rule 135 (operator_function_name -> OPERATOR operator_name .)
    QUESMARK        reduce using rule 135 (operator_function_name -> OPERATOR operator_name .)
    RPAREN          reduce using rule 135 (operator_function_name -> OPERATOR operator_name .)
    RSPAREN         reduce using rule 135 (operator_function_name -> OPERATOR operator_name .)
    RTEMPLATE       reduce using rule 135 (operator_function_name -> OPERATOR operator_name .)
    RCPAREN         reduce using rule 135 (operator_function_name -> OPERATOR operator_name .)
    COLON           reduce using rule 135 (operator_function_name -> OPERATOR operator_name .)


state 77

    (136) operator_name -> NEW .

    LPAREN          reduce using rule 136 (operator_name -> NEW .)
    LSPAREN         reduce using rule 136 (operator_name -> NEW .)
    EQUAL           reduce using rule 136 (operator_name -> NEW .)
    LCPAREN         reduce using rule 136 (operator_name -> NEW .)
    SEMICOLON       reduce using rule 136 (operator_name -> NEW .)
    COMMA           reduce using rule 136 (operator_name -> NEW .)
    DOT             reduce using rule 136 (operator_name -> NEW .)
    ARROW           reduce using rule 136 (operator_name -> NEW .)
    DPLUSOP         reduce using rule 136 (operator_name -> NEW .)
    DMINUSOP        reduce using rule 136 (operator_name -> NEW .)
    LTEMPLATE       reduce using rule 136 (operator_name -> NEW .)
    MULTEQOP        reduce using rule 136 (operator_name -> NEW .)
    DIVEQOP         reduce using rule 136 (operator_name -> NEW .)
    MODEQOP         reduce using rule 136 (operator_name -> NEW .)
    PLUSEQOP        reduce using rule 136 (operator_name -> NEW .)
    MINUSEQOP       reduce using rule 136 (operator_name -> NEW .)
    LSHIFTEQOP      reduce using rule 136 (operator_name -> NEW .)
    RSHIFTEQOP      reduce using rule 136 (operator_name -> NEW .)
    BANDEQOP        reduce using rule 136 (operator_name -> NEW .)
    BOREQOP         reduce using rule 136 (operator_name -> NEW .)
    DOTSTAR         reduce using rule 136 (operator_name -> NEW .)
    ARROWSTAR       reduce using rule 136 (operator_name -> NEW .)
    MULTOP          reduce using rule 136 (operator_name -> NEW .)
    DIVOP           reduce using rule 136 (operator_name -> NEW .)
    MODOP           reduce using rule 136 (operator_name -> NEW .)
    PLUSOP          reduce using rule 136 (operator_name -> NEW .)
    MINUSOP         reduce using rule 136 (operator_name -> NEW .)
    LSHIFT          reduce using rule 136 (operator_name -> NEW .)
    RSHIFT          reduce using rule 136 (operator_name -> NEW .)
    LTCOMP          reduce using rule 136 (operator_name -> NEW .)
    GTCOMP          reduce using rule 136 (operator_name -> NEW .)
    LTECOMP         reduce using rule 136 (operator_name -> NEW .)
    GTECOMP         reduce using rule 136 (operator_name -> NEW .)
    EQCOMP          reduce using rule 136 (operator_name -> NEW .)
    NEQCOMP         reduce using rule 136 (operator_name -> NEW .)
    BANDOP          reduce using rule 136 (operator_name -> NEW .)
    XOROP           reduce using rule 136 (operator_name -> NEW .)
    OROP            reduce using rule 136 (operator_name -> NEW .)
    ANDOP           reduce using rule 136 (operator_name -> NEW .)
    QUESMARK        reduce using rule 136 (operator_name -> NEW .)
    RPAREN          reduce using rule 136 (operator_name -> NEW .)
    RSPAREN         reduce using rule 136 (operator_name -> NEW .)
    RTEMPLATE       reduce using rule 136 (operator_name -> NEW .)
    RCPAREN         reduce using rule 136 (operator_name -> NEW .)
    COLON           reduce using rule 136 (operator_name -> NEW .)


state 78

    (137) operator_name -> DELETE .

    LPAREN          reduce using rule 137 (operator_name -> DELETE .)
    LSPAREN         reduce using rule 137 (operator_name -> DELETE .)
    EQUAL           reduce using rule 137 (operator_name -> DELETE .)
    LCPAREN         reduce using rule 137 (operator_name -> DELETE .)
    SEMICOLON       reduce using rule 137 (operator_name -> DELETE .)
    COMMA           reduce using rule 137 (operator_name -> DELETE .)
    DOT             reduce using rule 137 (operator_name -> DELETE .)
    ARROW           reduce using rule 137 (operator_name -> DELETE .)
    DPLUSOP         reduce using rule 137 (operator_name -> DELETE .)
    DMINUSOP        reduce using rule 137 (operator_name -> DELETE .)
    LTEMPLATE       reduce using rule 137 (operator_name -> DELETE .)
    MULTEQOP        reduce using rule 137 (operator_name -> DELETE .)
    DIVEQOP         reduce using rule 137 (operator_name -> DELETE .)
    MODEQOP         reduce using rule 137 (operator_name -> DELETE .)
    PLUSEQOP        reduce using rule 137 (operator_name -> DELETE .)
    MINUSEQOP       reduce using rule 137 (operator_name -> DELETE .)
    LSHIFTEQOP      reduce using rule 137 (operator_name -> DELETE .)
    RSHIFTEQOP      reduce using rule 137 (operator_name -> DELETE .)
    BANDEQOP        reduce using rule 137 (operator_name -> DELETE .)
    BOREQOP         reduce using rule 137 (operator_name -> DELETE .)
    DOTSTAR         reduce using rule 137 (operator_name -> DELETE .)
    ARROWSTAR       reduce using rule 137 (operator_name -> DELETE .)
    MULTOP          reduce using rule 137 (operator_name -> DELETE .)
    DIVOP           reduce using rule 137 (operator_name -> DELETE .)
    MODOP           reduce using rule 137 (operator_name -> DELETE .)
    PLUSOP          reduce using rule 137 (operator_name -> DELETE .)
    MINUSOP         reduce using rule 137 (operator_name -> DELETE .)
    LSHIFT          reduce using rule 137 (operator_name -> DELETE .)
    RSHIFT          reduce using rule 137 (operator_name -> DELETE .)
    LTCOMP          reduce using rule 137 (operator_name -> DELETE .)
    GTCOMP          reduce using rule 137 (operator_name -> DELETE .)
    LTECOMP         reduce using rule 137 (operator_name -> DELETE .)
    GTECOMP         reduce using rule 137 (operator_name -> DELETE .)
    EQCOMP          reduce using rule 137 (operator_name -> DELETE .)
    NEQCOMP         reduce using rule 137 (operator_name -> DELETE .)
    BANDOP          reduce using rule 137 (operator_name -> DELETE .)
    XOROP           reduce using rule 137 (operator_name -> DELETE .)
    OROP            reduce using rule 137 (operator_name -> DELETE .)
    ANDOP           reduce using rule 137 (operator_name -> DELETE .)
    QUESMARK        reduce using rule 137 (operator_name -> DELETE .)
    RPAREN          reduce using rule 137 (operator_name -> DELETE .)
    RSPAREN         reduce using rule 137 (operator_name -> DELETE .)
    RTEMPLATE       reduce using rule 137 (operator_name -> DELETE .)
    RCPAREN         reduce using rule 137 (operator_name -> DELETE .)
    COLON           reduce using rule 137 (operator_name -> DELETE .)


state 79

    (138) operator_name -> PLUSOP .

    LPAREN          reduce using rule 138 (operator_name -> PLUSOP .)
    LSPAREN         reduce using rule 138 (operator_name -> PLUSOP .)
    EQUAL           reduce using rule 138 (operator_name -> PLUSOP .)
    LCPAREN         reduce using rule 138 (operator_name -> PLUSOP .)
    SEMICOLON       reduce using rule 138 (operator_name -> PLUSOP .)
    COMMA           reduce using rule 138 (operator_name -> PLUSOP .)
    DOT             reduce using rule 138 (operator_name -> PLUSOP .)
    ARROW           reduce using rule 138 (operator_name -> PLUSOP .)
    DPLUSOP         reduce using rule 138 (operator_name -> PLUSOP .)
    DMINUSOP        reduce using rule 138 (operator_name -> PLUSOP .)
    LTEMPLATE       reduce using rule 138 (operator_name -> PLUSOP .)
    MULTEQOP        reduce using rule 138 (operator_name -> PLUSOP .)
    DIVEQOP         reduce using rule 138 (operator_name -> PLUSOP .)
    MODEQOP         reduce using rule 138 (operator_name -> PLUSOP .)
    PLUSEQOP        reduce using rule 138 (operator_name -> PLUSOP .)
    MINUSEQOP       reduce using rule 138 (operator_name -> PLUSOP .)
    LSHIFTEQOP      reduce using rule 138 (operator_name -> PLUSOP .)
    RSHIFTEQOP      reduce using rule 138 (operator_name -> PLUSOP .)
    BANDEQOP        reduce using rule 138 (operator_name -> PLUSOP .)
    BOREQOP         reduce using rule 138 (operator_name -> PLUSOP .)
    DOTSTAR         reduce using rule 138 (operator_name -> PLUSOP .)
    ARROWSTAR       reduce using rule 138 (operator_name -> PLUSOP .)
    MULTOP          reduce using rule 138 (operator_name -> PLUSOP .)
    DIVOP           reduce using rule 138 (operator_name -> PLUSOP .)
    MODOP           reduce using rule 138 (operator_name -> PLUSOP .)
    PLUSOP          reduce using rule 138 (operator_name -> PLUSOP .)
    MINUSOP         reduce using rule 138 (operator_name -> PLUSOP .)
    LSHIFT          reduce using rule 138 (operator_name -> PLUSOP .)
    RSHIFT          reduce using rule 138 (operator_name -> PLUSOP .)
    LTCOMP          reduce using rule 138 (operator_name -> PLUSOP .)
    GTCOMP          reduce using rule 138 (operator_name -> PLUSOP .)
    LTECOMP         reduce using rule 138 (operator_name -> PLUSOP .)
    GTECOMP         reduce using rule 138 (operator_name -> PLUSOP .)
    EQCOMP          reduce using rule 138 (operator_name -> PLUSOP .)
    NEQCOMP         reduce using rule 138 (operator_name -> PLUSOP .)
    BANDOP          reduce using rule 138 (operator_name -> PLUSOP .)
    XOROP           reduce using rule 138 (operator_name -> PLUSOP .)
    OROP            reduce using rule 138 (operator_name -> PLUSOP .)
    ANDOP           reduce using rule 138 (operator_name -> PLUSOP .)
    QUESMARK        reduce using rule 138 (operator_name -> PLUSOP .)
    RPAREN          reduce using rule 138 (operator_name -> PLUSOP .)
    RSPAREN         reduce using rule 138 (operator_name -> PLUSOP .)
    RTEMPLATE       reduce using rule 138 (operator_name -> PLUSOP .)
    RCPAREN         reduce using rule 138 (operator_name -> PLUSOP .)
    COLON           reduce using rule 138 (operator_name -> PLUSOP .)


state 80

    (139) operator_name -> MINUSOP .

    LPAREN          reduce using rule 139 (operator_name -> MINUSOP .)
    LSPAREN         reduce using rule 139 (operator_name -> MINUSOP .)
    EQUAL           reduce using rule 139 (operator_name -> MINUSOP .)
    LCPAREN         reduce using rule 139 (operator_name -> MINUSOP .)
    SEMICOLON       reduce using rule 139 (operator_name -> MINUSOP .)
    COMMA           reduce using rule 139 (operator_name -> MINUSOP .)
    DOT             reduce using rule 139 (operator_name -> MINUSOP .)
    ARROW           reduce using rule 139 (operator_name -> MINUSOP .)
    DPLUSOP         reduce using rule 139 (operator_name -> MINUSOP .)
    DMINUSOP        reduce using rule 139 (operator_name -> MINUSOP .)
    LTEMPLATE       reduce using rule 139 (operator_name -> MINUSOP .)
    MULTEQOP        reduce using rule 139 (operator_name -> MINUSOP .)
    DIVEQOP         reduce using rule 139 (operator_name -> MINUSOP .)
    MODEQOP         reduce using rule 139 (operator_name -> MINUSOP .)
    PLUSEQOP        reduce using rule 139 (operator_name -> MINUSOP .)
    MINUSEQOP       reduce using rule 139 (operator_name -> MINUSOP .)
    LSHIFTEQOP      reduce using rule 139 (operator_name -> MINUSOP .)
    RSHIFTEQOP      reduce using rule 139 (operator_name -> MINUSOP .)
    BANDEQOP        reduce using rule 139 (operator_name -> MINUSOP .)
    BOREQOP         reduce using rule 139 (operator_name -> MINUSOP .)
    DOTSTAR         reduce using rule 139 (operator_name -> MINUSOP .)
    ARROWSTAR       reduce using rule 139 (operator_name -> MINUSOP .)
    MULTOP          reduce using rule 139 (operator_name -> MINUSOP .)
    DIVOP           reduce using rule 139 (operator_name -> MINUSOP .)
    MODOP           reduce using rule 139 (operator_name -> MINUSOP .)
    PLUSOP          reduce using rule 139 (operator_name -> MINUSOP .)
    MINUSOP         reduce using rule 139 (operator_name -> MINUSOP .)
    LSHIFT          reduce using rule 139 (operator_name -> MINUSOP .)
    RSHIFT          reduce using rule 139 (operator_name -> MINUSOP .)
    LTCOMP          reduce using rule 139 (operator_name -> MINUSOP .)
    GTCOMP          reduce using rule 139 (operator_name -> MINUSOP .)
    LTECOMP         reduce using rule 139 (operator_name -> MINUSOP .)
    GTECOMP         reduce using rule 139 (operator_name -> MINUSOP .)
    EQCOMP          reduce using rule 139 (operator_name -> MINUSOP .)
    NEQCOMP         reduce using rule 139 (operator_name -> MINUSOP .)
    BANDOP          reduce using rule 139 (operator_name -> MINUSOP .)
    XOROP           reduce using rule 139 (operator_name -> MINUSOP .)
    OROP            reduce using rule 139 (operator_name -> MINUSOP .)
    ANDOP           reduce using rule 139 (operator_name -> MINUSOP .)
    QUESMARK        reduce using rule 139 (operator_name -> MINUSOP .)
    RPAREN          reduce using rule 139 (operator_name -> MINUSOP .)
    RSPAREN         reduce using rule 139 (operator_name -> MINUSOP .)
    RTEMPLATE       reduce using rule 139 (operator_name -> MINUSOP .)
    RCPAREN         reduce using rule 139 (operator_name -> MINUSOP .)
    COLON           reduce using rule 139 (operator_name -> MINUSOP .)


state 81

    (140) operator_name -> MULTOP .

    LPAREN          reduce using rule 140 (operator_name -> MULTOP .)
    LSPAREN         reduce using rule 140 (operator_name -> MULTOP .)
    EQUAL           reduce using rule 140 (operator_name -> MULTOP .)
    LCPAREN         reduce using rule 140 (operator_name -> MULTOP .)
    SEMICOLON       reduce using rule 140 (operator_name -> MULTOP .)
    COMMA           reduce using rule 140 (operator_name -> MULTOP .)
    DOT             reduce using rule 140 (operator_name -> MULTOP .)
    ARROW           reduce using rule 140 (operator_name -> MULTOP .)
    DPLUSOP         reduce using rule 140 (operator_name -> MULTOP .)
    DMINUSOP        reduce using rule 140 (operator_name -> MULTOP .)
    LTEMPLATE       reduce using rule 140 (operator_name -> MULTOP .)
    MULTEQOP        reduce using rule 140 (operator_name -> MULTOP .)
    DIVEQOP         reduce using rule 140 (operator_name -> MULTOP .)
    MODEQOP         reduce using rule 140 (operator_name -> MULTOP .)
    PLUSEQOP        reduce using rule 140 (operator_name -> MULTOP .)
    MINUSEQOP       reduce using rule 140 (operator_name -> MULTOP .)
    LSHIFTEQOP      reduce using rule 140 (operator_name -> MULTOP .)
    RSHIFTEQOP      reduce using rule 140 (operator_name -> MULTOP .)
    BANDEQOP        reduce using rule 140 (operator_name -> MULTOP .)
    BOREQOP         reduce using rule 140 (operator_name -> MULTOP .)
    DOTSTAR         reduce using rule 140 (operator_name -> MULTOP .)
    ARROWSTAR       reduce using rule 140 (operator_name -> MULTOP .)
    MULTOP          reduce using rule 140 (operator_name -> MULTOP .)
    DIVOP           reduce using rule 140 (operator_name -> MULTOP .)
    MODOP           reduce using rule 140 (operator_name -> MULTOP .)
    PLUSOP          reduce using rule 140 (operator_name -> MULTOP .)
    MINUSOP         reduce using rule 140 (operator_name -> MULTOP .)
    LSHIFT          reduce using rule 140 (operator_name -> MULTOP .)
    RSHIFT          reduce using rule 140 (operator_name -> MULTOP .)
    LTCOMP          reduce using rule 140 (operator_name -> MULTOP .)
    GTCOMP          reduce using rule 140 (operator_name -> MULTOP .)
    LTECOMP         reduce using rule 140 (operator_name -> MULTOP .)
    GTECOMP         reduce using rule 140 (operator_name -> MULTOP .)
    EQCOMP          reduce using rule 140 (operator_name -> MULTOP .)
    NEQCOMP         reduce using rule 140 (operator_name -> MULTOP .)
    BANDOP          reduce using rule 140 (operator_name -> MULTOP .)
    XOROP           reduce using rule 140 (operator_name -> MULTOP .)
    OROP            reduce using rule 140 (operator_name -> MULTOP .)
    ANDOP           reduce using rule 140 (operator_name -> MULTOP .)
    QUESMARK        reduce using rule 140 (operator_name -> MULTOP .)
    RPAREN          reduce using rule 140 (operator_name -> MULTOP .)
    RSPAREN         reduce using rule 140 (operator_name -> MULTOP .)
    RTEMPLATE       reduce using rule 140 (operator_name -> MULTOP .)
    RCPAREN         reduce using rule 140 (operator_name -> MULTOP .)
    COLON           reduce using rule 140 (operator_name -> MULTOP .)


state 82

    (141) operator_name -> DIVOP .

    LPAREN          reduce using rule 141 (operator_name -> DIVOP .)
    LSPAREN         reduce using rule 141 (operator_name -> DIVOP .)
    EQUAL           reduce using rule 141 (operator_name -> DIVOP .)
    LCPAREN         reduce using rule 141 (operator_name -> DIVOP .)
    SEMICOLON       reduce using rule 141 (operator_name -> DIVOP .)
    COMMA           reduce using rule 141 (operator_name -> DIVOP .)
    DOT             reduce using rule 141 (operator_name -> DIVOP .)
    ARROW           reduce using rule 141 (operator_name -> DIVOP .)
    DPLUSOP         reduce using rule 141 (operator_name -> DIVOP .)
    DMINUSOP        reduce using rule 141 (operator_name -> DIVOP .)
    LTEMPLATE       reduce using rule 141 (operator_name -> DIVOP .)
    MULTEQOP        reduce using rule 141 (operator_name -> DIVOP .)
    DIVEQOP         reduce using rule 141 (operator_name -> DIVOP .)
    MODEQOP         reduce using rule 141 (operator_name -> DIVOP .)
    PLUSEQOP        reduce using rule 141 (operator_name -> DIVOP .)
    MINUSEQOP       reduce using rule 141 (operator_name -> DIVOP .)
    LSHIFTEQOP      reduce using rule 141 (operator_name -> DIVOP .)
    RSHIFTEQOP      reduce using rule 141 (operator_name -> DIVOP .)
    BANDEQOP        reduce using rule 141 (operator_name -> DIVOP .)
    BOREQOP         reduce using rule 141 (operator_name -> DIVOP .)
    DOTSTAR         reduce using rule 141 (operator_name -> DIVOP .)
    ARROWSTAR       reduce using rule 141 (operator_name -> DIVOP .)
    MULTOP          reduce using rule 141 (operator_name -> DIVOP .)
    DIVOP           reduce using rule 141 (operator_name -> DIVOP .)
    MODOP           reduce using rule 141 (operator_name -> DIVOP .)
    PLUSOP          reduce using rule 141 (operator_name -> DIVOP .)
    MINUSOP         reduce using rule 141 (operator_name -> DIVOP .)
    LSHIFT          reduce using rule 141 (operator_name -> DIVOP .)
    RSHIFT          reduce using rule 141 (operator_name -> DIVOP .)
    LTCOMP          reduce using rule 141 (operator_name -> DIVOP .)
    GTCOMP          reduce using rule 141 (operator_name -> DIVOP .)
    LTECOMP         reduce using rule 141 (operator_name -> DIVOP .)
    GTECOMP         reduce using rule 141 (operator_name -> DIVOP .)
    EQCOMP          reduce using rule 141 (operator_name -> DIVOP .)
    NEQCOMP         reduce using rule 141 (operator_name -> DIVOP .)
    BANDOP          reduce using rule 141 (operator_name -> DIVOP .)
    XOROP           reduce using rule 141 (operator_name -> DIVOP .)
    OROP            reduce using rule 141 (operator_name -> DIVOP .)
    ANDOP           reduce using rule 141 (operator_name -> DIVOP .)
    QUESMARK        reduce using rule 141 (operator_name -> DIVOP .)
    RPAREN          reduce using rule 141 (operator_name -> DIVOP .)
    RSPAREN         reduce using rule 141 (operator_name -> DIVOP .)
    RTEMPLATE       reduce using rule 141 (operator_name -> DIVOP .)
    RCPAREN         reduce using rule 141 (operator_name -> DIVOP .)
    COLON           reduce using rule 141 (operator_name -> DIVOP .)


state 83

    (142) operator_name -> MODOP .

    LPAREN          reduce using rule 142 (operator_name -> MODOP .)
    LSPAREN         reduce using rule 142 (operator_name -> MODOP .)
    EQUAL           reduce using rule 142 (operator_name -> MODOP .)
    LCPAREN         reduce using rule 142 (operator_name -> MODOP .)
    SEMICOLON       reduce using rule 142 (operator_name -> MODOP .)
    COMMA           reduce using rule 142 (operator_name -> MODOP .)
    DOT             reduce using rule 142 (operator_name -> MODOP .)
    ARROW           reduce using rule 142 (operator_name -> MODOP .)
    DPLUSOP         reduce using rule 142 (operator_name -> MODOP .)
    DMINUSOP        reduce using rule 142 (operator_name -> MODOP .)
    LTEMPLATE       reduce using rule 142 (operator_name -> MODOP .)
    MULTEQOP        reduce using rule 142 (operator_name -> MODOP .)
    DIVEQOP         reduce using rule 142 (operator_name -> MODOP .)
    MODEQOP         reduce using rule 142 (operator_name -> MODOP .)
    PLUSEQOP        reduce using rule 142 (operator_name -> MODOP .)
    MINUSEQOP       reduce using rule 142 (operator_name -> MODOP .)
    LSHIFTEQOP      reduce using rule 142 (operator_name -> MODOP .)
    RSHIFTEQOP      reduce using rule 142 (operator_name -> MODOP .)
    BANDEQOP        reduce using rule 142 (operator_name -> MODOP .)
    BOREQOP         reduce using rule 142 (operator_name -> MODOP .)
    DOTSTAR         reduce using rule 142 (operator_name -> MODOP .)
    ARROWSTAR       reduce using rule 142 (operator_name -> MODOP .)
    MULTOP          reduce using rule 142 (operator_name -> MODOP .)
    DIVOP           reduce using rule 142 (operator_name -> MODOP .)
    MODOP           reduce using rule 142 (operator_name -> MODOP .)
    PLUSOP          reduce using rule 142 (operator_name -> MODOP .)
    MINUSOP         reduce using rule 142 (operator_name -> MODOP .)
    LSHIFT          reduce using rule 142 (operator_name -> MODOP .)
    RSHIFT          reduce using rule 142 (operator_name -> MODOP .)
    LTCOMP          reduce using rule 142 (operator_name -> MODOP .)
    GTCOMP          reduce using rule 142 (operator_name -> MODOP .)
    LTECOMP         reduce using rule 142 (operator_name -> MODOP .)
    GTECOMP         reduce using rule 142 (operator_name -> MODOP .)
    EQCOMP          reduce using rule 142 (operator_name -> MODOP .)
    NEQCOMP         reduce using rule 142 (operator_name -> MODOP .)
    BANDOP          reduce using rule 142 (operator_name -> MODOP .)
    XOROP           reduce using rule 142 (operator_name -> MODOP .)
    OROP            reduce using rule 142 (operator_name -> MODOP .)
    ANDOP           reduce using rule 142 (operator_name -> MODOP .)
    QUESMARK        reduce using rule 142 (operator_name -> MODOP .)
    RPAREN          reduce using rule 142 (operator_name -> MODOP .)
    RSPAREN         reduce using rule 142 (operator_name -> MODOP .)
    RTEMPLATE       reduce using rule 142 (operator_name -> MODOP .)
    RCPAREN         reduce using rule 142 (operator_name -> MODOP .)
    COLON           reduce using rule 142 (operator_name -> MODOP .)


state 84

    (143) operator_name -> XOROP .

    LPAREN          reduce using rule 143 (operator_name -> XOROP .)
    LSPAREN         reduce using rule 143 (operator_name -> XOROP .)
    EQUAL           reduce using rule 143 (operator_name -> XOROP .)
    LCPAREN         reduce using rule 143 (operator_name -> XOROP .)
    SEMICOLON       reduce using rule 143 (operator_name -> XOROP .)
    COMMA           reduce using rule 143 (operator_name -> XOROP .)
    DOT             reduce using rule 143 (operator_name -> XOROP .)
    ARROW           reduce using rule 143 (operator_name -> XOROP .)
    DPLUSOP         reduce using rule 143 (operator_name -> XOROP .)
    DMINUSOP        reduce using rule 143 (operator_name -> XOROP .)
    LTEMPLATE       reduce using rule 143 (operator_name -> XOROP .)
    MULTEQOP        reduce using rule 143 (operator_name -> XOROP .)
    DIVEQOP         reduce using rule 143 (operator_name -> XOROP .)
    MODEQOP         reduce using rule 143 (operator_name -> XOROP .)
    PLUSEQOP        reduce using rule 143 (operator_name -> XOROP .)
    MINUSEQOP       reduce using rule 143 (operator_name -> XOROP .)
    LSHIFTEQOP      reduce using rule 143 (operator_name -> XOROP .)
    RSHIFTEQOP      reduce using rule 143 (operator_name -> XOROP .)
    BANDEQOP        reduce using rule 143 (operator_name -> XOROP .)
    BOREQOP         reduce using rule 143 (operator_name -> XOROP .)
    DOTSTAR         reduce using rule 143 (operator_name -> XOROP .)
    ARROWSTAR       reduce using rule 143 (operator_name -> XOROP .)
    MULTOP          reduce using rule 143 (operator_name -> XOROP .)
    DIVOP           reduce using rule 143 (operator_name -> XOROP .)
    MODOP           reduce using rule 143 (operator_name -> XOROP .)
    PLUSOP          reduce using rule 143 (operator_name -> XOROP .)
    MINUSOP         reduce using rule 143 (operator_name -> XOROP .)
    LSHIFT          reduce using rule 143 (operator_name -> XOROP .)
    RSHIFT          reduce using rule 143 (operator_name -> XOROP .)
    LTCOMP          reduce using rule 143 (operator_name -> XOROP .)
    GTCOMP          reduce using rule 143 (operator_name -> XOROP .)
    LTECOMP         reduce using rule 143 (operator_name -> XOROP .)
    GTECOMP         reduce using rule 143 (operator_name -> XOROP .)
    EQCOMP          reduce using rule 143 (operator_name -> XOROP .)
    NEQCOMP         reduce using rule 143 (operator_name -> XOROP .)
    BANDOP          reduce using rule 143 (operator_name -> XOROP .)
    XOROP           reduce using rule 143 (operator_name -> XOROP .)
    OROP            reduce using rule 143 (operator_name -> XOROP .)
    ANDOP           reduce using rule 143 (operator_name -> XOROP .)
    QUESMARK        reduce using rule 143 (operator_name -> XOROP .)
    RPAREN          reduce using rule 143 (operator_name -> XOROP .)
    RSPAREN         reduce using rule 143 (operator_name -> XOROP .)
    RTEMPLATE       reduce using rule 143 (operator_name -> XOROP .)
    RCPAREN         reduce using rule 143 (operator_name -> XOROP .)
    COLON           reduce using rule 143 (operator_name -> XOROP .)


state 85

    (144) operator_name -> BANDOP .

    LPAREN          reduce using rule 144 (operator_name -> BANDOP .)
    LSPAREN         reduce using rule 144 (operator_name -> BANDOP .)
    EQUAL           reduce using rule 144 (operator_name -> BANDOP .)
    LCPAREN         reduce using rule 144 (operator_name -> BANDOP .)
    SEMICOLON       reduce using rule 144 (operator_name -> BANDOP .)
    COMMA           reduce using rule 144 (operator_name -> BANDOP .)
    DOT             reduce using rule 144 (operator_name -> BANDOP .)
    ARROW           reduce using rule 144 (operator_name -> BANDOP .)
    DPLUSOP         reduce using rule 144 (operator_name -> BANDOP .)
    DMINUSOP        reduce using rule 144 (operator_name -> BANDOP .)
    LTEMPLATE       reduce using rule 144 (operator_name -> BANDOP .)
    MULTEQOP        reduce using rule 144 (operator_name -> BANDOP .)
    DIVEQOP         reduce using rule 144 (operator_name -> BANDOP .)
    MODEQOP         reduce using rule 144 (operator_name -> BANDOP .)
    PLUSEQOP        reduce using rule 144 (operator_name -> BANDOP .)
    MINUSEQOP       reduce using rule 144 (operator_name -> BANDOP .)
    LSHIFTEQOP      reduce using rule 144 (operator_name -> BANDOP .)
    RSHIFTEQOP      reduce using rule 144 (operator_name -> BANDOP .)
    BANDEQOP        reduce using rule 144 (operator_name -> BANDOP .)
    BOREQOP         reduce using rule 144 (operator_name -> BANDOP .)
    DOTSTAR         reduce using rule 144 (operator_name -> BANDOP .)
    ARROWSTAR       reduce using rule 144 (operator_name -> BANDOP .)
    MULTOP          reduce using rule 144 (operator_name -> BANDOP .)
    DIVOP           reduce using rule 144 (operator_name -> BANDOP .)
    MODOP           reduce using rule 144 (operator_name -> BANDOP .)
    PLUSOP          reduce using rule 144 (operator_name -> BANDOP .)
    MINUSOP         reduce using rule 144 (operator_name -> BANDOP .)
    LSHIFT          reduce using rule 144 (operator_name -> BANDOP .)
    RSHIFT          reduce using rule 144 (operator_name -> BANDOP .)
    LTCOMP          reduce using rule 144 (operator_name -> BANDOP .)
    GTCOMP          reduce using rule 144 (operator_name -> BANDOP .)
    LTECOMP         reduce using rule 144 (operator_name -> BANDOP .)
    GTECOMP         reduce using rule 144 (operator_name -> BANDOP .)
    EQCOMP          reduce using rule 144 (operator_name -> BANDOP .)
    NEQCOMP         reduce using rule 144 (operator_name -> BANDOP .)
    BANDOP          reduce using rule 144 (operator_name -> BANDOP .)
    XOROP           reduce using rule 144 (operator_name -> BANDOP .)
    OROP            reduce using rule 144 (operator_name -> BANDOP .)
    ANDOP           reduce using rule 144 (operator_name -> BANDOP .)
    QUESMARK        reduce using rule 144 (operator_name -> BANDOP .)
    RPAREN          reduce using rule 144 (operator_name -> BANDOP .)
    RSPAREN         reduce using rule 144 (operator_name -> BANDOP .)
    RTEMPLATE       reduce using rule 144 (operator_name -> BANDOP .)
    RCPAREN         reduce using rule 144 (operator_name -> BANDOP .)
    COLON           reduce using rule 144 (operator_name -> BANDOP .)


state 86

    (145) operator_name -> BNOP .

    LPAREN          reduce using rule 145 (operator_name -> BNOP .)
    LSPAREN         reduce using rule 145 (operator_name -> BNOP .)
    EQUAL           reduce using rule 145 (operator_name -> BNOP .)
    LCPAREN         reduce using rule 145 (operator_name -> BNOP .)
    SEMICOLON       reduce using rule 145 (operator_name -> BNOP .)
    COMMA           reduce using rule 145 (operator_name -> BNOP .)
    DOT             reduce using rule 145 (operator_name -> BNOP .)
    ARROW           reduce using rule 145 (operator_name -> BNOP .)
    DPLUSOP         reduce using rule 145 (operator_name -> BNOP .)
    DMINUSOP        reduce using rule 145 (operator_name -> BNOP .)
    LTEMPLATE       reduce using rule 145 (operator_name -> BNOP .)
    MULTEQOP        reduce using rule 145 (operator_name -> BNOP .)
    DIVEQOP         reduce using rule 145 (operator_name -> BNOP .)
    MODEQOP         reduce using rule 145 (operator_name -> BNOP .)
    PLUSEQOP        reduce using rule 145 (operator_name -> BNOP .)
    MINUSEQOP       reduce using rule 145 (operator_name -> BNOP .)
    LSHIFTEQOP      reduce using rule 145 (operator_name -> BNOP .)
    RSHIFTEQOP      reduce using rule 145 (operator_name -> BNOP .)
    BANDEQOP        reduce using rule 145 (operator_name -> BNOP .)
    BOREQOP         reduce using rule 145 (operator_name -> BNOP .)
    DOTSTAR         reduce using rule 145 (operator_name -> BNOP .)
    ARROWSTAR       reduce using rule 145 (operator_name -> BNOP .)
    MULTOP          reduce using rule 145 (operator_name -> BNOP .)
    DIVOP           reduce using rule 145 (operator_name -> BNOP .)
    MODOP           reduce using rule 145 (operator_name -> BNOP .)
    PLUSOP          reduce using rule 145 (operator_name -> BNOP .)
    MINUSOP         reduce using rule 145 (operator_name -> BNOP .)
    LSHIFT          reduce using rule 145 (operator_name -> BNOP .)
    RSHIFT          reduce using rule 145 (operator_name -> BNOP .)
    LTCOMP          reduce using rule 145 (operator_name -> BNOP .)
    GTCOMP          reduce using rule 145 (operator_name -> BNOP .)
    LTECOMP         reduce using rule 145 (operator_name -> BNOP .)
    GTECOMP         reduce using rule 145 (operator_name -> BNOP .)
    EQCOMP          reduce using rule 145 (operator_name -> BNOP .)
    NEQCOMP         reduce using rule 145 (operator_name -> BNOP .)
    BANDOP          reduce using rule 145 (operator_name -> BNOP .)
    XOROP           reduce using rule 145 (operator_name -> BNOP .)
    OROP            reduce using rule 145 (operator_name -> BNOP .)
    ANDOP           reduce using rule 145 (operator_name -> BNOP .)
    QUESMARK        reduce using rule 145 (operator_name -> BNOP .)
    RPAREN          reduce using rule 145 (operator_name -> BNOP .)
    RSPAREN         reduce using rule 145 (operator_name -> BNOP .)
    RTEMPLATE       reduce using rule 145 (operator_name -> BNOP .)
    RCPAREN         reduce using rule 145 (operator_name -> BNOP .)
    COLON           reduce using rule 145 (operator_name -> BNOP .)


state 87

    (146) operator_name -> NOTSYM .

    LPAREN          reduce using rule 146 (operator_name -> NOTSYM .)
    LSPAREN         reduce using rule 146 (operator_name -> NOTSYM .)
    EQUAL           reduce using rule 146 (operator_name -> NOTSYM .)
    LCPAREN         reduce using rule 146 (operator_name -> NOTSYM .)
    SEMICOLON       reduce using rule 146 (operator_name -> NOTSYM .)
    COMMA           reduce using rule 146 (operator_name -> NOTSYM .)
    DOT             reduce using rule 146 (operator_name -> NOTSYM .)
    ARROW           reduce using rule 146 (operator_name -> NOTSYM .)
    DPLUSOP         reduce using rule 146 (operator_name -> NOTSYM .)
    DMINUSOP        reduce using rule 146 (operator_name -> NOTSYM .)
    LTEMPLATE       reduce using rule 146 (operator_name -> NOTSYM .)
    MULTEQOP        reduce using rule 146 (operator_name -> NOTSYM .)
    DIVEQOP         reduce using rule 146 (operator_name -> NOTSYM .)
    MODEQOP         reduce using rule 146 (operator_name -> NOTSYM .)
    PLUSEQOP        reduce using rule 146 (operator_name -> NOTSYM .)
    MINUSEQOP       reduce using rule 146 (operator_name -> NOTSYM .)
    LSHIFTEQOP      reduce using rule 146 (operator_name -> NOTSYM .)
    RSHIFTEQOP      reduce using rule 146 (operator_name -> NOTSYM .)
    BANDEQOP        reduce using rule 146 (operator_name -> NOTSYM .)
    BOREQOP         reduce using rule 146 (operator_name -> NOTSYM .)
    DOTSTAR         reduce using rule 146 (operator_name -> NOTSYM .)
    ARROWSTAR       reduce using rule 146 (operator_name -> NOTSYM .)
    MULTOP          reduce using rule 146 (operator_name -> NOTSYM .)
    DIVOP           reduce using rule 146 (operator_name -> NOTSYM .)
    MODOP           reduce using rule 146 (operator_name -> NOTSYM .)
    PLUSOP          reduce using rule 146 (operator_name -> NOTSYM .)
    MINUSOP         reduce using rule 146 (operator_name -> NOTSYM .)
    LSHIFT          reduce using rule 146 (operator_name -> NOTSYM .)
    RSHIFT          reduce using rule 146 (operator_name -> NOTSYM .)
    LTCOMP          reduce using rule 146 (operator_name -> NOTSYM .)
    GTCOMP          reduce using rule 146 (operator_name -> NOTSYM .)
    LTECOMP         reduce using rule 146 (operator_name -> NOTSYM .)
    GTECOMP         reduce using rule 146 (operator_name -> NOTSYM .)
    EQCOMP          reduce using rule 146 (operator_name -> NOTSYM .)
    NEQCOMP         reduce using rule 146 (operator_name -> NOTSYM .)
    BANDOP          reduce using rule 146 (operator_name -> NOTSYM .)
    XOROP           reduce using rule 146 (operator_name -> NOTSYM .)
    OROP            reduce using rule 146 (operator_name -> NOTSYM .)
    ANDOP           reduce using rule 146 (operator_name -> NOTSYM .)
    QUESMARK        reduce using rule 146 (operator_name -> NOTSYM .)
    RPAREN          reduce using rule 146 (operator_name -> NOTSYM .)
    RSPAREN         reduce using rule 146 (operator_name -> NOTSYM .)
    RTEMPLATE       reduce using rule 146 (operator_name -> NOTSYM .)
    RCPAREN         reduce using rule 146 (operator_name -> NOTSYM .)
    COLON           reduce using rule 146 (operator_name -> NOTSYM .)


state 88

    (147) operator_name -> EQUAL .

    LPAREN          reduce using rule 147 (operator_name -> EQUAL .)
    LSPAREN         reduce using rule 147 (operator_name -> EQUAL .)
    EQUAL           reduce using rule 147 (operator_name -> EQUAL .)
    LCPAREN         reduce using rule 147 (operator_name -> EQUAL .)
    SEMICOLON       reduce using rule 147 (operator_name -> EQUAL .)
    COMMA           reduce using rule 147 (operator_name -> EQUAL .)
    DOT             reduce using rule 147 (operator_name -> EQUAL .)
    ARROW           reduce using rule 147 (operator_name -> EQUAL .)
    DPLUSOP         reduce using rule 147 (operator_name -> EQUAL .)
    DMINUSOP        reduce using rule 147 (operator_name -> EQUAL .)
    LTEMPLATE       reduce using rule 147 (operator_name -> EQUAL .)
    MULTEQOP        reduce using rule 147 (operator_name -> EQUAL .)
    DIVEQOP         reduce using rule 147 (operator_name -> EQUAL .)
    MODEQOP         reduce using rule 147 (operator_name -> EQUAL .)
    PLUSEQOP        reduce using rule 147 (operator_name -> EQUAL .)
    MINUSEQOP       reduce using rule 147 (operator_name -> EQUAL .)
    LSHIFTEQOP      reduce using rule 147 (operator_name -> EQUAL .)
    RSHIFTEQOP      reduce using rule 147 (operator_name -> EQUAL .)
    BANDEQOP        reduce using rule 147 (operator_name -> EQUAL .)
    BOREQOP         reduce using rule 147 (operator_name -> EQUAL .)
    DOTSTAR         reduce using rule 147 (operator_name -> EQUAL .)
    ARROWSTAR       reduce using rule 147 (operator_name -> EQUAL .)
    MULTOP          reduce using rule 147 (operator_name -> EQUAL .)
    DIVOP           reduce using rule 147 (operator_name -> EQUAL .)
    MODOP           reduce using rule 147 (operator_name -> EQUAL .)
    PLUSOP          reduce using rule 147 (operator_name -> EQUAL .)
    MINUSOP         reduce using rule 147 (operator_name -> EQUAL .)
    LSHIFT          reduce using rule 147 (operator_name -> EQUAL .)
    RSHIFT          reduce using rule 147 (operator_name -> EQUAL .)
    LTCOMP          reduce using rule 147 (operator_name -> EQUAL .)
    GTCOMP          reduce using rule 147 (operator_name -> EQUAL .)
    LTECOMP         reduce using rule 147 (operator_name -> EQUAL .)
    GTECOMP         reduce using rule 147 (operator_name -> EQUAL .)
    EQCOMP          reduce using rule 147 (operator_name -> EQUAL .)
    NEQCOMP         reduce using rule 147 (operator_name -> EQUAL .)
    BANDOP          reduce using rule 147 (operator_name -> EQUAL .)
    XOROP           reduce using rule 147 (operator_name -> EQUAL .)
    OROP            reduce using rule 147 (operator_name -> EQUAL .)
    ANDOP           reduce using rule 147 (operator_name -> EQUAL .)
    QUESMARK        reduce using rule 147 (operator_name -> EQUAL .)
    RPAREN          reduce using rule 147 (operator_name -> EQUAL .)
    RSPAREN         reduce using rule 147 (operator_name -> EQUAL .)
    RTEMPLATE       reduce using rule 147 (operator_name -> EQUAL .)
    RCPAREN         reduce using rule 147 (operator_name -> EQUAL .)
    COLON           reduce using rule 147 (operator_name -> EQUAL .)


state 89

    (148) operator_name -> LTCOMP .

    LPAREN          reduce using rule 148 (operator_name -> LTCOMP .)
    LSPAREN         reduce using rule 148 (operator_name -> LTCOMP .)
    EQUAL           reduce using rule 148 (operator_name -> LTCOMP .)
    LCPAREN         reduce using rule 148 (operator_name -> LTCOMP .)
    SEMICOLON       reduce using rule 148 (operator_name -> LTCOMP .)
    COMMA           reduce using rule 148 (operator_name -> LTCOMP .)
    DOT             reduce using rule 148 (operator_name -> LTCOMP .)
    ARROW           reduce using rule 148 (operator_name -> LTCOMP .)
    DPLUSOP         reduce using rule 148 (operator_name -> LTCOMP .)
    DMINUSOP        reduce using rule 148 (operator_name -> LTCOMP .)
    LTEMPLATE       reduce using rule 148 (operator_name -> LTCOMP .)
    MULTEQOP        reduce using rule 148 (operator_name -> LTCOMP .)
    DIVEQOP         reduce using rule 148 (operator_name -> LTCOMP .)
    MODEQOP         reduce using rule 148 (operator_name -> LTCOMP .)
    PLUSEQOP        reduce using rule 148 (operator_name -> LTCOMP .)
    MINUSEQOP       reduce using rule 148 (operator_name -> LTCOMP .)
    LSHIFTEQOP      reduce using rule 148 (operator_name -> LTCOMP .)
    RSHIFTEQOP      reduce using rule 148 (operator_name -> LTCOMP .)
    BANDEQOP        reduce using rule 148 (operator_name -> LTCOMP .)
    BOREQOP         reduce using rule 148 (operator_name -> LTCOMP .)
    DOTSTAR         reduce using rule 148 (operator_name -> LTCOMP .)
    ARROWSTAR       reduce using rule 148 (operator_name -> LTCOMP .)
    MULTOP          reduce using rule 148 (operator_name -> LTCOMP .)
    DIVOP           reduce using rule 148 (operator_name -> LTCOMP .)
    MODOP           reduce using rule 148 (operator_name -> LTCOMP .)
    PLUSOP          reduce using rule 148 (operator_name -> LTCOMP .)
    MINUSOP         reduce using rule 148 (operator_name -> LTCOMP .)
    LSHIFT          reduce using rule 148 (operator_name -> LTCOMP .)
    RSHIFT          reduce using rule 148 (operator_name -> LTCOMP .)
    LTCOMP          reduce using rule 148 (operator_name -> LTCOMP .)
    GTCOMP          reduce using rule 148 (operator_name -> LTCOMP .)
    LTECOMP         reduce using rule 148 (operator_name -> LTCOMP .)
    GTECOMP         reduce using rule 148 (operator_name -> LTCOMP .)
    EQCOMP          reduce using rule 148 (operator_name -> LTCOMP .)
    NEQCOMP         reduce using rule 148 (operator_name -> LTCOMP .)
    BANDOP          reduce using rule 148 (operator_name -> LTCOMP .)
    XOROP           reduce using rule 148 (operator_name -> LTCOMP .)
    OROP            reduce using rule 148 (operator_name -> LTCOMP .)
    ANDOP           reduce using rule 148 (operator_name -> LTCOMP .)
    QUESMARK        reduce using rule 148 (operator_name -> LTCOMP .)
    RPAREN          reduce using rule 148 (operator_name -> LTCOMP .)
    RSPAREN         reduce using rule 148 (operator_name -> LTCOMP .)
    RTEMPLATE       reduce using rule 148 (operator_name -> LTCOMP .)
    RCPAREN         reduce using rule 148 (operator_name -> LTCOMP .)
    COLON           reduce using rule 148 (operator_name -> LTCOMP .)


state 90

    (149) operator_name -> GTCOMP .

    LPAREN          reduce using rule 149 (operator_name -> GTCOMP .)
    LSPAREN         reduce using rule 149 (operator_name -> GTCOMP .)
    EQUAL           reduce using rule 149 (operator_name -> GTCOMP .)
    LCPAREN         reduce using rule 149 (operator_name -> GTCOMP .)
    SEMICOLON       reduce using rule 149 (operator_name -> GTCOMP .)
    COMMA           reduce using rule 149 (operator_name -> GTCOMP .)
    DOT             reduce using rule 149 (operator_name -> GTCOMP .)
    ARROW           reduce using rule 149 (operator_name -> GTCOMP .)
    DPLUSOP         reduce using rule 149 (operator_name -> GTCOMP .)
    DMINUSOP        reduce using rule 149 (operator_name -> GTCOMP .)
    LTEMPLATE       reduce using rule 149 (operator_name -> GTCOMP .)
    MULTEQOP        reduce using rule 149 (operator_name -> GTCOMP .)
    DIVEQOP         reduce using rule 149 (operator_name -> GTCOMP .)
    MODEQOP         reduce using rule 149 (operator_name -> GTCOMP .)
    PLUSEQOP        reduce using rule 149 (operator_name -> GTCOMP .)
    MINUSEQOP       reduce using rule 149 (operator_name -> GTCOMP .)
    LSHIFTEQOP      reduce using rule 149 (operator_name -> GTCOMP .)
    RSHIFTEQOP      reduce using rule 149 (operator_name -> GTCOMP .)
    BANDEQOP        reduce using rule 149 (operator_name -> GTCOMP .)
    BOREQOP         reduce using rule 149 (operator_name -> GTCOMP .)
    DOTSTAR         reduce using rule 149 (operator_name -> GTCOMP .)
    ARROWSTAR       reduce using rule 149 (operator_name -> GTCOMP .)
    MULTOP          reduce using rule 149 (operator_name -> GTCOMP .)
    DIVOP           reduce using rule 149 (operator_name -> GTCOMP .)
    MODOP           reduce using rule 149 (operator_name -> GTCOMP .)
    PLUSOP          reduce using rule 149 (operator_name -> GTCOMP .)
    MINUSOP         reduce using rule 149 (operator_name -> GTCOMP .)
    LSHIFT          reduce using rule 149 (operator_name -> GTCOMP .)
    RSHIFT          reduce using rule 149 (operator_name -> GTCOMP .)
    LTCOMP          reduce using rule 149 (operator_name -> GTCOMP .)
    GTCOMP          reduce using rule 149 (operator_name -> GTCOMP .)
    LTECOMP         reduce using rule 149 (operator_name -> GTCOMP .)
    GTECOMP         reduce using rule 149 (operator_name -> GTCOMP .)
    EQCOMP          reduce using rule 149 (operator_name -> GTCOMP .)
    NEQCOMP         reduce using rule 149 (operator_name -> GTCOMP .)
    BANDOP          reduce using rule 149 (operator_name -> GTCOMP .)
    XOROP           reduce using rule 149 (operator_name -> GTCOMP .)
    OROP            reduce using rule 149 (operator_name -> GTCOMP .)
    ANDOP           reduce using rule 149 (operator_name -> GTCOMP .)
    QUESMARK        reduce using rule 149 (operator_name -> GTCOMP .)
    RPAREN          reduce using rule 149 (operator_name -> GTCOMP .)
    RSPAREN         reduce using rule 149 (operator_name -> GTCOMP .)
    RTEMPLATE       reduce using rule 149 (operator_name -> GTCOMP .)
    RCPAREN         reduce using rule 149 (operator_name -> GTCOMP .)
    COLON           reduce using rule 149 (operator_name -> GTCOMP .)


state 91

    (150) operator_name -> PLUSEQOP .

    LPAREN          reduce using rule 150 (operator_name -> PLUSEQOP .)
    LSPAREN         reduce using rule 150 (operator_name -> PLUSEQOP .)
    EQUAL           reduce using rule 150 (operator_name -> PLUSEQOP .)
    LCPAREN         reduce using rule 150 (operator_name -> PLUSEQOP .)
    SEMICOLON       reduce using rule 150 (operator_name -> PLUSEQOP .)
    COMMA           reduce using rule 150 (operator_name -> PLUSEQOP .)
    DOT             reduce using rule 150 (operator_name -> PLUSEQOP .)
    ARROW           reduce using rule 150 (operator_name -> PLUSEQOP .)
    DPLUSOP         reduce using rule 150 (operator_name -> PLUSEQOP .)
    DMINUSOP        reduce using rule 150 (operator_name -> PLUSEQOP .)
    LTEMPLATE       reduce using rule 150 (operator_name -> PLUSEQOP .)
    MULTEQOP        reduce using rule 150 (operator_name -> PLUSEQOP .)
    DIVEQOP         reduce using rule 150 (operator_name -> PLUSEQOP .)
    MODEQOP         reduce using rule 150 (operator_name -> PLUSEQOP .)
    PLUSEQOP        reduce using rule 150 (operator_name -> PLUSEQOP .)
    MINUSEQOP       reduce using rule 150 (operator_name -> PLUSEQOP .)
    LSHIFTEQOP      reduce using rule 150 (operator_name -> PLUSEQOP .)
    RSHIFTEQOP      reduce using rule 150 (operator_name -> PLUSEQOP .)
    BANDEQOP        reduce using rule 150 (operator_name -> PLUSEQOP .)
    BOREQOP         reduce using rule 150 (operator_name -> PLUSEQOP .)
    DOTSTAR         reduce using rule 150 (operator_name -> PLUSEQOP .)
    ARROWSTAR       reduce using rule 150 (operator_name -> PLUSEQOP .)
    MULTOP          reduce using rule 150 (operator_name -> PLUSEQOP .)
    DIVOP           reduce using rule 150 (operator_name -> PLUSEQOP .)
    MODOP           reduce using rule 150 (operator_name -> PLUSEQOP .)
    PLUSOP          reduce using rule 150 (operator_name -> PLUSEQOP .)
    MINUSOP         reduce using rule 150 (operator_name -> PLUSEQOP .)
    LSHIFT          reduce using rule 150 (operator_name -> PLUSEQOP .)
    RSHIFT          reduce using rule 150 (operator_name -> PLUSEQOP .)
    LTCOMP          reduce using rule 150 (operator_name -> PLUSEQOP .)
    GTCOMP          reduce using rule 150 (operator_name -> PLUSEQOP .)
    LTECOMP         reduce using rule 150 (operator_name -> PLUSEQOP .)
    GTECOMP         reduce using rule 150 (operator_name -> PLUSEQOP .)
    EQCOMP          reduce using rule 150 (operator_name -> PLUSEQOP .)
    NEQCOMP         reduce using rule 150 (operator_name -> PLUSEQOP .)
    BANDOP          reduce using rule 150 (operator_name -> PLUSEQOP .)
    XOROP           reduce using rule 150 (operator_name -> PLUSEQOP .)
    OROP            reduce using rule 150 (operator_name -> PLUSEQOP .)
    ANDOP           reduce using rule 150 (operator_name -> PLUSEQOP .)
    QUESMARK        reduce using rule 150 (operator_name -> PLUSEQOP .)
    RPAREN          reduce using rule 150 (operator_name -> PLUSEQOP .)
    RSPAREN         reduce using rule 150 (operator_name -> PLUSEQOP .)
    RTEMPLATE       reduce using rule 150 (operator_name -> PLUSEQOP .)
    RCPAREN         reduce using rule 150 (operator_name -> PLUSEQOP .)
    COLON           reduce using rule 150 (operator_name -> PLUSEQOP .)


state 92

    (151) operator_name -> MINUSEQOP .

    LPAREN          reduce using rule 151 (operator_name -> MINUSEQOP .)
    LSPAREN         reduce using rule 151 (operator_name -> MINUSEQOP .)
    EQUAL           reduce using rule 151 (operator_name -> MINUSEQOP .)
    LCPAREN         reduce using rule 151 (operator_name -> MINUSEQOP .)
    SEMICOLON       reduce using rule 151 (operator_name -> MINUSEQOP .)
    COMMA           reduce using rule 151 (operator_name -> MINUSEQOP .)
    DOT             reduce using rule 151 (operator_name -> MINUSEQOP .)
    ARROW           reduce using rule 151 (operator_name -> MINUSEQOP .)
    DPLUSOP         reduce using rule 151 (operator_name -> MINUSEQOP .)
    DMINUSOP        reduce using rule 151 (operator_name -> MINUSEQOP .)
    LTEMPLATE       reduce using rule 151 (operator_name -> MINUSEQOP .)
    MULTEQOP        reduce using rule 151 (operator_name -> MINUSEQOP .)
    DIVEQOP         reduce using rule 151 (operator_name -> MINUSEQOP .)
    MODEQOP         reduce using rule 151 (operator_name -> MINUSEQOP .)
    PLUSEQOP        reduce using rule 151 (operator_name -> MINUSEQOP .)
    MINUSEQOP       reduce using rule 151 (operator_name -> MINUSEQOP .)
    LSHIFTEQOP      reduce using rule 151 (operator_name -> MINUSEQOP .)
    RSHIFTEQOP      reduce using rule 151 (operator_name -> MINUSEQOP .)
    BANDEQOP        reduce using rule 151 (operator_name -> MINUSEQOP .)
    BOREQOP         reduce using rule 151 (operator_name -> MINUSEQOP .)
    DOTSTAR         reduce using rule 151 (operator_name -> MINUSEQOP .)
    ARROWSTAR       reduce using rule 151 (operator_name -> MINUSEQOP .)
    MULTOP          reduce using rule 151 (operator_name -> MINUSEQOP .)
    DIVOP           reduce using rule 151 (operator_name -> MINUSEQOP .)
    MODOP           reduce using rule 151 (operator_name -> MINUSEQOP .)
    PLUSOP          reduce using rule 151 (operator_name -> MINUSEQOP .)
    MINUSOP         reduce using rule 151 (operator_name -> MINUSEQOP .)
    LSHIFT          reduce using rule 151 (operator_name -> MINUSEQOP .)
    RSHIFT          reduce using rule 151 (operator_name -> MINUSEQOP .)
    LTCOMP          reduce using rule 151 (operator_name -> MINUSEQOP .)
    GTCOMP          reduce using rule 151 (operator_name -> MINUSEQOP .)
    LTECOMP         reduce using rule 151 (operator_name -> MINUSEQOP .)
    GTECOMP         reduce using rule 151 (operator_name -> MINUSEQOP .)
    EQCOMP          reduce using rule 151 (operator_name -> MINUSEQOP .)
    NEQCOMP         reduce using rule 151 (operator_name -> MINUSEQOP .)
    BANDOP          reduce using rule 151 (operator_name -> MINUSEQOP .)
    XOROP           reduce using rule 151 (operator_name -> MINUSEQOP .)
    OROP            reduce using rule 151 (operator_name -> MINUSEQOP .)
    ANDOP           reduce using rule 151 (operator_name -> MINUSEQOP .)
    QUESMARK        reduce using rule 151 (operator_name -> MINUSEQOP .)
    RPAREN          reduce using rule 151 (operator_name -> MINUSEQOP .)
    RSPAREN         reduce using rule 151 (operator_name -> MINUSEQOP .)
    RTEMPLATE       reduce using rule 151 (operator_name -> MINUSEQOP .)
    RCPAREN         reduce using rule 151 (operator_name -> MINUSEQOP .)
    COLON           reduce using rule 151 (operator_name -> MINUSEQOP .)


state 93

    (152) operator_name -> MULTEQOP .

    LPAREN          reduce using rule 152 (operator_name -> MULTEQOP .)
    LSPAREN         reduce using rule 152 (operator_name -> MULTEQOP .)
    EQUAL           reduce using rule 152 (operator_name -> MULTEQOP .)
    LCPAREN         reduce using rule 152 (operator_name -> MULTEQOP .)
    SEMICOLON       reduce using rule 152 (operator_name -> MULTEQOP .)
    COMMA           reduce using rule 152 (operator_name -> MULTEQOP .)
    DOT             reduce using rule 152 (operator_name -> MULTEQOP .)
    ARROW           reduce using rule 152 (operator_name -> MULTEQOP .)
    DPLUSOP         reduce using rule 152 (operator_name -> MULTEQOP .)
    DMINUSOP        reduce using rule 152 (operator_name -> MULTEQOP .)
    LTEMPLATE       reduce using rule 152 (operator_name -> MULTEQOP .)
    MULTEQOP        reduce using rule 152 (operator_name -> MULTEQOP .)
    DIVEQOP         reduce using rule 152 (operator_name -> MULTEQOP .)
    MODEQOP         reduce using rule 152 (operator_name -> MULTEQOP .)
    PLUSEQOP        reduce using rule 152 (operator_name -> MULTEQOP .)
    MINUSEQOP       reduce using rule 152 (operator_name -> MULTEQOP .)
    LSHIFTEQOP      reduce using rule 152 (operator_name -> MULTEQOP .)
    RSHIFTEQOP      reduce using rule 152 (operator_name -> MULTEQOP .)
    BANDEQOP        reduce using rule 152 (operator_name -> MULTEQOP .)
    BOREQOP         reduce using rule 152 (operator_name -> MULTEQOP .)
    DOTSTAR         reduce using rule 152 (operator_name -> MULTEQOP .)
    ARROWSTAR       reduce using rule 152 (operator_name -> MULTEQOP .)
    MULTOP          reduce using rule 152 (operator_name -> MULTEQOP .)
    DIVOP           reduce using rule 152 (operator_name -> MULTEQOP .)
    MODOP           reduce using rule 152 (operator_name -> MULTEQOP .)
    PLUSOP          reduce using rule 152 (operator_name -> MULTEQOP .)
    MINUSOP         reduce using rule 152 (operator_name -> MULTEQOP .)
    LSHIFT          reduce using rule 152 (operator_name -> MULTEQOP .)
    RSHIFT          reduce using rule 152 (operator_name -> MULTEQOP .)
    LTCOMP          reduce using rule 152 (operator_name -> MULTEQOP .)
    GTCOMP          reduce using rule 152 (operator_name -> MULTEQOP .)
    LTECOMP         reduce using rule 152 (operator_name -> MULTEQOP .)
    GTECOMP         reduce using rule 152 (operator_name -> MULTEQOP .)
    EQCOMP          reduce using rule 152 (operator_name -> MULTEQOP .)
    NEQCOMP         reduce using rule 152 (operator_name -> MULTEQOP .)
    BANDOP          reduce using rule 152 (operator_name -> MULTEQOP .)
    XOROP           reduce using rule 152 (operator_name -> MULTEQOP .)
    OROP            reduce using rule 152 (operator_name -> MULTEQOP .)
    ANDOP           reduce using rule 152 (operator_name -> MULTEQOP .)
    QUESMARK        reduce using rule 152 (operator_name -> MULTEQOP .)
    RPAREN          reduce using rule 152 (operator_name -> MULTEQOP .)
    RSPAREN         reduce using rule 152 (operator_name -> MULTEQOP .)
    RTEMPLATE       reduce using rule 152 (operator_name -> MULTEQOP .)
    RCPAREN         reduce using rule 152 (operator_name -> MULTEQOP .)
    COLON           reduce using rule 152 (operator_name -> MULTEQOP .)


state 94

    (153) operator_name -> DIVEQOP .

    LPAREN          reduce using rule 153 (operator_name -> DIVEQOP .)
    LSPAREN         reduce using rule 153 (operator_name -> DIVEQOP .)
    EQUAL           reduce using rule 153 (operator_name -> DIVEQOP .)
    LCPAREN         reduce using rule 153 (operator_name -> DIVEQOP .)
    SEMICOLON       reduce using rule 153 (operator_name -> DIVEQOP .)
    COMMA           reduce using rule 153 (operator_name -> DIVEQOP .)
    DOT             reduce using rule 153 (operator_name -> DIVEQOP .)
    ARROW           reduce using rule 153 (operator_name -> DIVEQOP .)
    DPLUSOP         reduce using rule 153 (operator_name -> DIVEQOP .)
    DMINUSOP        reduce using rule 153 (operator_name -> DIVEQOP .)
    LTEMPLATE       reduce using rule 153 (operator_name -> DIVEQOP .)
    MULTEQOP        reduce using rule 153 (operator_name -> DIVEQOP .)
    DIVEQOP         reduce using rule 153 (operator_name -> DIVEQOP .)
    MODEQOP         reduce using rule 153 (operator_name -> DIVEQOP .)
    PLUSEQOP        reduce using rule 153 (operator_name -> DIVEQOP .)
    MINUSEQOP       reduce using rule 153 (operator_name -> DIVEQOP .)
    LSHIFTEQOP      reduce using rule 153 (operator_name -> DIVEQOP .)
    RSHIFTEQOP      reduce using rule 153 (operator_name -> DIVEQOP .)
    BANDEQOP        reduce using rule 153 (operator_name -> DIVEQOP .)
    BOREQOP         reduce using rule 153 (operator_name -> DIVEQOP .)
    DOTSTAR         reduce using rule 153 (operator_name -> DIVEQOP .)
    ARROWSTAR       reduce using rule 153 (operator_name -> DIVEQOP .)
    MULTOP          reduce using rule 153 (operator_name -> DIVEQOP .)
    DIVOP           reduce using rule 153 (operator_name -> DIVEQOP .)
    MODOP           reduce using rule 153 (operator_name -> DIVEQOP .)
    PLUSOP          reduce using rule 153 (operator_name -> DIVEQOP .)
    MINUSOP         reduce using rule 153 (operator_name -> DIVEQOP .)
    LSHIFT          reduce using rule 153 (operator_name -> DIVEQOP .)
    RSHIFT          reduce using rule 153 (operator_name -> DIVEQOP .)
    LTCOMP          reduce using rule 153 (operator_name -> DIVEQOP .)
    GTCOMP          reduce using rule 153 (operator_name -> DIVEQOP .)
    LTECOMP         reduce using rule 153 (operator_name -> DIVEQOP .)
    GTECOMP         reduce using rule 153 (operator_name -> DIVEQOP .)
    EQCOMP          reduce using rule 153 (operator_name -> DIVEQOP .)
    NEQCOMP         reduce using rule 153 (operator_name -> DIVEQOP .)
    BANDOP          reduce using rule 153 (operator_name -> DIVEQOP .)
    XOROP           reduce using rule 153 (operator_name -> DIVEQOP .)
    OROP            reduce using rule 153 (operator_name -> DIVEQOP .)
    ANDOP           reduce using rule 153 (operator_name -> DIVEQOP .)
    QUESMARK        reduce using rule 153 (operator_name -> DIVEQOP .)
    RPAREN          reduce using rule 153 (operator_name -> DIVEQOP .)
    RSPAREN         reduce using rule 153 (operator_name -> DIVEQOP .)
    RTEMPLATE       reduce using rule 153 (operator_name -> DIVEQOP .)
    RCPAREN         reduce using rule 153 (operator_name -> DIVEQOP .)
    COLON           reduce using rule 153 (operator_name -> DIVEQOP .)


state 95

    (154) operator_name -> MODEQOP .

    LPAREN          reduce using rule 154 (operator_name -> MODEQOP .)
    LSPAREN         reduce using rule 154 (operator_name -> MODEQOP .)
    EQUAL           reduce using rule 154 (operator_name -> MODEQOP .)
    LCPAREN         reduce using rule 154 (operator_name -> MODEQOP .)
    SEMICOLON       reduce using rule 154 (operator_name -> MODEQOP .)
    COMMA           reduce using rule 154 (operator_name -> MODEQOP .)
    DOT             reduce using rule 154 (operator_name -> MODEQOP .)
    ARROW           reduce using rule 154 (operator_name -> MODEQOP .)
    DPLUSOP         reduce using rule 154 (operator_name -> MODEQOP .)
    DMINUSOP        reduce using rule 154 (operator_name -> MODEQOP .)
    LTEMPLATE       reduce using rule 154 (operator_name -> MODEQOP .)
    MULTEQOP        reduce using rule 154 (operator_name -> MODEQOP .)
    DIVEQOP         reduce using rule 154 (operator_name -> MODEQOP .)
    MODEQOP         reduce using rule 154 (operator_name -> MODEQOP .)
    PLUSEQOP        reduce using rule 154 (operator_name -> MODEQOP .)
    MINUSEQOP       reduce using rule 154 (operator_name -> MODEQOP .)
    LSHIFTEQOP      reduce using rule 154 (operator_name -> MODEQOP .)
    RSHIFTEQOP      reduce using rule 154 (operator_name -> MODEQOP .)
    BANDEQOP        reduce using rule 154 (operator_name -> MODEQOP .)
    BOREQOP         reduce using rule 154 (operator_name -> MODEQOP .)
    DOTSTAR         reduce using rule 154 (operator_name -> MODEQOP .)
    ARROWSTAR       reduce using rule 154 (operator_name -> MODEQOP .)
    MULTOP          reduce using rule 154 (operator_name -> MODEQOP .)
    DIVOP           reduce using rule 154 (operator_name -> MODEQOP .)
    MODOP           reduce using rule 154 (operator_name -> MODEQOP .)
    PLUSOP          reduce using rule 154 (operator_name -> MODEQOP .)
    MINUSOP         reduce using rule 154 (operator_name -> MODEQOP .)
    LSHIFT          reduce using rule 154 (operator_name -> MODEQOP .)
    RSHIFT          reduce using rule 154 (operator_name -> MODEQOP .)
    LTCOMP          reduce using rule 154 (operator_name -> MODEQOP .)
    GTCOMP          reduce using rule 154 (operator_name -> MODEQOP .)
    LTECOMP         reduce using rule 154 (operator_name -> MODEQOP .)
    GTECOMP         reduce using rule 154 (operator_name -> MODEQOP .)
    EQCOMP          reduce using rule 154 (operator_name -> MODEQOP .)
    NEQCOMP         reduce using rule 154 (operator_name -> MODEQOP .)
    BANDOP          reduce using rule 154 (operator_name -> MODEQOP .)
    XOROP           reduce using rule 154 (operator_name -> MODEQOP .)
    OROP            reduce using rule 154 (operator_name -> MODEQOP .)
    ANDOP           reduce using rule 154 (operator_name -> MODEQOP .)
    QUESMARK        reduce using rule 154 (operator_name -> MODEQOP .)
    RPAREN          reduce using rule 154 (operator_name -> MODEQOP .)
    RSPAREN         reduce using rule 154 (operator_name -> MODEQOP .)
    RTEMPLATE       reduce using rule 154 (operator_name -> MODEQOP .)
    RCPAREN         reduce using rule 154 (operator_name -> MODEQOP .)
    COLON           reduce using rule 154 (operator_name -> MODEQOP .)


state 96

    (155) operator_name -> XOREQOP .

    LPAREN          reduce using rule 155 (operator_name -> XOREQOP .)
    LSPAREN         reduce using rule 155 (operator_name -> XOREQOP .)
    EQUAL           reduce using rule 155 (operator_name -> XOREQOP .)
    LCPAREN         reduce using rule 155 (operator_name -> XOREQOP .)
    SEMICOLON       reduce using rule 155 (operator_name -> XOREQOP .)
    COMMA           reduce using rule 155 (operator_name -> XOREQOP .)
    DOT             reduce using rule 155 (operator_name -> XOREQOP .)
    ARROW           reduce using rule 155 (operator_name -> XOREQOP .)
    DPLUSOP         reduce using rule 155 (operator_name -> XOREQOP .)
    DMINUSOP        reduce using rule 155 (operator_name -> XOREQOP .)
    LTEMPLATE       reduce using rule 155 (operator_name -> XOREQOP .)
    MULTEQOP        reduce using rule 155 (operator_name -> XOREQOP .)
    DIVEQOP         reduce using rule 155 (operator_name -> XOREQOP .)
    MODEQOP         reduce using rule 155 (operator_name -> XOREQOP .)
    PLUSEQOP        reduce using rule 155 (operator_name -> XOREQOP .)
    MINUSEQOP       reduce using rule 155 (operator_name -> XOREQOP .)
    LSHIFTEQOP      reduce using rule 155 (operator_name -> XOREQOP .)
    RSHIFTEQOP      reduce using rule 155 (operator_name -> XOREQOP .)
    BANDEQOP        reduce using rule 155 (operator_name -> XOREQOP .)
    BOREQOP         reduce using rule 155 (operator_name -> XOREQOP .)
    DOTSTAR         reduce using rule 155 (operator_name -> XOREQOP .)
    ARROWSTAR       reduce using rule 155 (operator_name -> XOREQOP .)
    MULTOP          reduce using rule 155 (operator_name -> XOREQOP .)
    DIVOP           reduce using rule 155 (operator_name -> XOREQOP .)
    MODOP           reduce using rule 155 (operator_name -> XOREQOP .)
    PLUSOP          reduce using rule 155 (operator_name -> XOREQOP .)
    MINUSOP         reduce using rule 155 (operator_name -> XOREQOP .)
    LSHIFT          reduce using rule 155 (operator_name -> XOREQOP .)
    RSHIFT          reduce using rule 155 (operator_name -> XOREQOP .)
    LTCOMP          reduce using rule 155 (operator_name -> XOREQOP .)
    GTCOMP          reduce using rule 155 (operator_name -> XOREQOP .)
    LTECOMP         reduce using rule 155 (operator_name -> XOREQOP .)
    GTECOMP         reduce using rule 155 (operator_name -> XOREQOP .)
    EQCOMP          reduce using rule 155 (operator_name -> XOREQOP .)
    NEQCOMP         reduce using rule 155 (operator_name -> XOREQOP .)
    BANDOP          reduce using rule 155 (operator_name -> XOREQOP .)
    XOROP           reduce using rule 155 (operator_name -> XOREQOP .)
    OROP            reduce using rule 155 (operator_name -> XOREQOP .)
    ANDOP           reduce using rule 155 (operator_name -> XOREQOP .)
    QUESMARK        reduce using rule 155 (operator_name -> XOREQOP .)
    RPAREN          reduce using rule 155 (operator_name -> XOREQOP .)
    RSPAREN         reduce using rule 155 (operator_name -> XOREQOP .)
    RTEMPLATE       reduce using rule 155 (operator_name -> XOREQOP .)
    RCPAREN         reduce using rule 155 (operator_name -> XOREQOP .)
    COLON           reduce using rule 155 (operator_name -> XOREQOP .)


state 97

    (156) operator_name -> BANDEQOP .

    LPAREN          reduce using rule 156 (operator_name -> BANDEQOP .)
    LSPAREN         reduce using rule 156 (operator_name -> BANDEQOP .)
    EQUAL           reduce using rule 156 (operator_name -> BANDEQOP .)
    LCPAREN         reduce using rule 156 (operator_name -> BANDEQOP .)
    SEMICOLON       reduce using rule 156 (operator_name -> BANDEQOP .)
    COMMA           reduce using rule 156 (operator_name -> BANDEQOP .)
    DOT             reduce using rule 156 (operator_name -> BANDEQOP .)
    ARROW           reduce using rule 156 (operator_name -> BANDEQOP .)
    DPLUSOP         reduce using rule 156 (operator_name -> BANDEQOP .)
    DMINUSOP        reduce using rule 156 (operator_name -> BANDEQOP .)
    LTEMPLATE       reduce using rule 156 (operator_name -> BANDEQOP .)
    MULTEQOP        reduce using rule 156 (operator_name -> BANDEQOP .)
    DIVEQOP         reduce using rule 156 (operator_name -> BANDEQOP .)
    MODEQOP         reduce using rule 156 (operator_name -> BANDEQOP .)
    PLUSEQOP        reduce using rule 156 (operator_name -> BANDEQOP .)
    MINUSEQOP       reduce using rule 156 (operator_name -> BANDEQOP .)
    LSHIFTEQOP      reduce using rule 156 (operator_name -> BANDEQOP .)
    RSHIFTEQOP      reduce using rule 156 (operator_name -> BANDEQOP .)
    BANDEQOP        reduce using rule 156 (operator_name -> BANDEQOP .)
    BOREQOP         reduce using rule 156 (operator_name -> BANDEQOP .)
    DOTSTAR         reduce using rule 156 (operator_name -> BANDEQOP .)
    ARROWSTAR       reduce using rule 156 (operator_name -> BANDEQOP .)
    MULTOP          reduce using rule 156 (operator_name -> BANDEQOP .)
    DIVOP           reduce using rule 156 (operator_name -> BANDEQOP .)
    MODOP           reduce using rule 156 (operator_name -> BANDEQOP .)
    PLUSOP          reduce using rule 156 (operator_name -> BANDEQOP .)
    MINUSOP         reduce using rule 156 (operator_name -> BANDEQOP .)
    LSHIFT          reduce using rule 156 (operator_name -> BANDEQOP .)
    RSHIFT          reduce using rule 156 (operator_name -> BANDEQOP .)
    LTCOMP          reduce using rule 156 (operator_name -> BANDEQOP .)
    GTCOMP          reduce using rule 156 (operator_name -> BANDEQOP .)
    LTECOMP         reduce using rule 156 (operator_name -> BANDEQOP .)
    GTECOMP         reduce using rule 156 (operator_name -> BANDEQOP .)
    EQCOMP          reduce using rule 156 (operator_name -> BANDEQOP .)
    NEQCOMP         reduce using rule 156 (operator_name -> BANDEQOP .)
    BANDOP          reduce using rule 156 (operator_name -> BANDEQOP .)
    XOROP           reduce using rule 156 (operator_name -> BANDEQOP .)
    OROP            reduce using rule 156 (operator_name -> BANDEQOP .)
    ANDOP           reduce using rule 156 (operator_name -> BANDEQOP .)
    QUESMARK        reduce using rule 156 (operator_name -> BANDEQOP .)
    RPAREN          reduce using rule 156 (operator_name -> BANDEQOP .)
    RSPAREN         reduce using rule 156 (operator_name -> BANDEQOP .)
    RTEMPLATE       reduce using rule 156 (operator_name -> BANDEQOP .)
    RCPAREN         reduce using rule 156 (operator_name -> BANDEQOP .)
    COLON           reduce using rule 156 (operator_name -> BANDEQOP .)


state 98

    (157) operator_name -> LSHIFT .

    LPAREN          reduce using rule 157 (operator_name -> LSHIFT .)
    LSPAREN         reduce using rule 157 (operator_name -> LSHIFT .)
    EQUAL           reduce using rule 157 (operator_name -> LSHIFT .)
    LCPAREN         reduce using rule 157 (operator_name -> LSHIFT .)
    SEMICOLON       reduce using rule 157 (operator_name -> LSHIFT .)
    COMMA           reduce using rule 157 (operator_name -> LSHIFT .)
    DOT             reduce using rule 157 (operator_name -> LSHIFT .)
    ARROW           reduce using rule 157 (operator_name -> LSHIFT .)
    DPLUSOP         reduce using rule 157 (operator_name -> LSHIFT .)
    DMINUSOP        reduce using rule 157 (operator_name -> LSHIFT .)
    LTEMPLATE       reduce using rule 157 (operator_name -> LSHIFT .)
    MULTEQOP        reduce using rule 157 (operator_name -> LSHIFT .)
    DIVEQOP         reduce using rule 157 (operator_name -> LSHIFT .)
    MODEQOP         reduce using rule 157 (operator_name -> LSHIFT .)
    PLUSEQOP        reduce using rule 157 (operator_name -> LSHIFT .)
    MINUSEQOP       reduce using rule 157 (operator_name -> LSHIFT .)
    LSHIFTEQOP      reduce using rule 157 (operator_name -> LSHIFT .)
    RSHIFTEQOP      reduce using rule 157 (operator_name -> LSHIFT .)
    BANDEQOP        reduce using rule 157 (operator_name -> LSHIFT .)
    BOREQOP         reduce using rule 157 (operator_name -> LSHIFT .)
    DOTSTAR         reduce using rule 157 (operator_name -> LSHIFT .)
    ARROWSTAR       reduce using rule 157 (operator_name -> LSHIFT .)
    MULTOP          reduce using rule 157 (operator_name -> LSHIFT .)
    DIVOP           reduce using rule 157 (operator_name -> LSHIFT .)
    MODOP           reduce using rule 157 (operator_name -> LSHIFT .)
    PLUSOP          reduce using rule 157 (operator_name -> LSHIFT .)
    MINUSOP         reduce using rule 157 (operator_name -> LSHIFT .)
    LSHIFT          reduce using rule 157 (operator_name -> LSHIFT .)
    RSHIFT          reduce using rule 157 (operator_name -> LSHIFT .)
    LTCOMP          reduce using rule 157 (operator_name -> LSHIFT .)
    GTCOMP          reduce using rule 157 (operator_name -> LSHIFT .)
    LTECOMP         reduce using rule 157 (operator_name -> LSHIFT .)
    GTECOMP         reduce using rule 157 (operator_name -> LSHIFT .)
    EQCOMP          reduce using rule 157 (operator_name -> LSHIFT .)
    NEQCOMP         reduce using rule 157 (operator_name -> LSHIFT .)
    BANDOP          reduce using rule 157 (operator_name -> LSHIFT .)
    XOROP           reduce using rule 157 (operator_name -> LSHIFT .)
    OROP            reduce using rule 157 (operator_name -> LSHIFT .)
    ANDOP           reduce using rule 157 (operator_name -> LSHIFT .)
    QUESMARK        reduce using rule 157 (operator_name -> LSHIFT .)
    RPAREN          reduce using rule 157 (operator_name -> LSHIFT .)
    RSPAREN         reduce using rule 157 (operator_name -> LSHIFT .)
    RTEMPLATE       reduce using rule 157 (operator_name -> LSHIFT .)
    RCPAREN         reduce using rule 157 (operator_name -> LSHIFT .)
    COLON           reduce using rule 157 (operator_name -> LSHIFT .)


state 99

    (158) operator_name -> RSHIFT .

    LPAREN          reduce using rule 158 (operator_name -> RSHIFT .)
    LSPAREN         reduce using rule 158 (operator_name -> RSHIFT .)
    EQUAL           reduce using rule 158 (operator_name -> RSHIFT .)
    LCPAREN         reduce using rule 158 (operator_name -> RSHIFT .)
    SEMICOLON       reduce using rule 158 (operator_name -> RSHIFT .)
    COMMA           reduce using rule 158 (operator_name -> RSHIFT .)
    DOT             reduce using rule 158 (operator_name -> RSHIFT .)
    ARROW           reduce using rule 158 (operator_name -> RSHIFT .)
    DPLUSOP         reduce using rule 158 (operator_name -> RSHIFT .)
    DMINUSOP        reduce using rule 158 (operator_name -> RSHIFT .)
    LTEMPLATE       reduce using rule 158 (operator_name -> RSHIFT .)
    MULTEQOP        reduce using rule 158 (operator_name -> RSHIFT .)
    DIVEQOP         reduce using rule 158 (operator_name -> RSHIFT .)
    MODEQOP         reduce using rule 158 (operator_name -> RSHIFT .)
    PLUSEQOP        reduce using rule 158 (operator_name -> RSHIFT .)
    MINUSEQOP       reduce using rule 158 (operator_name -> RSHIFT .)
    LSHIFTEQOP      reduce using rule 158 (operator_name -> RSHIFT .)
    RSHIFTEQOP      reduce using rule 158 (operator_name -> RSHIFT .)
    BANDEQOP        reduce using rule 158 (operator_name -> RSHIFT .)
    BOREQOP         reduce using rule 158 (operator_name -> RSHIFT .)
    DOTSTAR         reduce using rule 158 (operator_name -> RSHIFT .)
    ARROWSTAR       reduce using rule 158 (operator_name -> RSHIFT .)
    MULTOP          reduce using rule 158 (operator_name -> RSHIFT .)
    DIVOP           reduce using rule 158 (operator_name -> RSHIFT .)
    MODOP           reduce using rule 158 (operator_name -> RSHIFT .)
    PLUSOP          reduce using rule 158 (operator_name -> RSHIFT .)
    MINUSOP         reduce using rule 158 (operator_name -> RSHIFT .)
    LSHIFT          reduce using rule 158 (operator_name -> RSHIFT .)
    RSHIFT          reduce using rule 158 (operator_name -> RSHIFT .)
    LTCOMP          reduce using rule 158 (operator_name -> RSHIFT .)
    GTCOMP          reduce using rule 158 (operator_name -> RSHIFT .)
    LTECOMP         reduce using rule 158 (operator_name -> RSHIFT .)
    GTECOMP         reduce using rule 158 (operator_name -> RSHIFT .)
    EQCOMP          reduce using rule 158 (operator_name -> RSHIFT .)
    NEQCOMP         reduce using rule 158 (operator_name -> RSHIFT .)
    BANDOP          reduce using rule 158 (operator_name -> RSHIFT .)
    XOROP           reduce using rule 158 (operator_name -> RSHIFT .)
    OROP            reduce using rule 158 (operator_name -> RSHIFT .)
    ANDOP           reduce using rule 158 (operator_name -> RSHIFT .)
    QUESMARK        reduce using rule 158 (operator_name -> RSHIFT .)
    RPAREN          reduce using rule 158 (operator_name -> RSHIFT .)
    RSPAREN         reduce using rule 158 (operator_name -> RSHIFT .)
    RTEMPLATE       reduce using rule 158 (operator_name -> RSHIFT .)
    RCPAREN         reduce using rule 158 (operator_name -> RSHIFT .)
    COLON           reduce using rule 158 (operator_name -> RSHIFT .)


state 100

    (159) operator_name -> RSHIFTEQOP .

    LPAREN          reduce using rule 159 (operator_name -> RSHIFTEQOP .)
    LSPAREN         reduce using rule 159 (operator_name -> RSHIFTEQOP .)
    EQUAL           reduce using rule 159 (operator_name -> RSHIFTEQOP .)
    LCPAREN         reduce using rule 159 (operator_name -> RSHIFTEQOP .)
    SEMICOLON       reduce using rule 159 (operator_name -> RSHIFTEQOP .)
    COMMA           reduce using rule 159 (operator_name -> RSHIFTEQOP .)
    DOT             reduce using rule 159 (operator_name -> RSHIFTEQOP .)
    ARROW           reduce using rule 159 (operator_name -> RSHIFTEQOP .)
    DPLUSOP         reduce using rule 159 (operator_name -> RSHIFTEQOP .)
    DMINUSOP        reduce using rule 159 (operator_name -> RSHIFTEQOP .)
    LTEMPLATE       reduce using rule 159 (operator_name -> RSHIFTEQOP .)
    MULTEQOP        reduce using rule 159 (operator_name -> RSHIFTEQOP .)
    DIVEQOP         reduce using rule 159 (operator_name -> RSHIFTEQOP .)
    MODEQOP         reduce using rule 159 (operator_name -> RSHIFTEQOP .)
    PLUSEQOP        reduce using rule 159 (operator_name -> RSHIFTEQOP .)
    MINUSEQOP       reduce using rule 159 (operator_name -> RSHIFTEQOP .)
    LSHIFTEQOP      reduce using rule 159 (operator_name -> RSHIFTEQOP .)
    RSHIFTEQOP      reduce using rule 159 (operator_name -> RSHIFTEQOP .)
    BANDEQOP        reduce using rule 159 (operator_name -> RSHIFTEQOP .)
    BOREQOP         reduce using rule 159 (operator_name -> RSHIFTEQOP .)
    DOTSTAR         reduce using rule 159 (operator_name -> RSHIFTEQOP .)
    ARROWSTAR       reduce using rule 159 (operator_name -> RSHIFTEQOP .)
    MULTOP          reduce using rule 159 (operator_name -> RSHIFTEQOP .)
    DIVOP           reduce using rule 159 (operator_name -> RSHIFTEQOP .)
    MODOP           reduce using rule 159 (operator_name -> RSHIFTEQOP .)
    PLUSOP          reduce using rule 159 (operator_name -> RSHIFTEQOP .)
    MINUSOP         reduce using rule 159 (operator_name -> RSHIFTEQOP .)
    LSHIFT          reduce using rule 159 (operator_name -> RSHIFTEQOP .)
    RSHIFT          reduce using rule 159 (operator_name -> RSHIFTEQOP .)
    LTCOMP          reduce using rule 159 (operator_name -> RSHIFTEQOP .)
    GTCOMP          reduce using rule 159 (operator_name -> RSHIFTEQOP .)
    LTECOMP         reduce using rule 159 (operator_name -> RSHIFTEQOP .)
    GTECOMP         reduce using rule 159 (operator_name -> RSHIFTEQOP .)
    EQCOMP          reduce using rule 159 (operator_name -> RSHIFTEQOP .)
    NEQCOMP         reduce using rule 159 (operator_name -> RSHIFTEQOP .)
    BANDOP          reduce using rule 159 (operator_name -> RSHIFTEQOP .)
    XOROP           reduce using rule 159 (operator_name -> RSHIFTEQOP .)
    OROP            reduce using rule 159 (operator_name -> RSHIFTEQOP .)
    ANDOP           reduce using rule 159 (operator_name -> RSHIFTEQOP .)
    QUESMARK        reduce using rule 159 (operator_name -> RSHIFTEQOP .)
    RPAREN          reduce using rule 159 (operator_name -> RSHIFTEQOP .)
    RSPAREN         reduce using rule 159 (operator_name -> RSHIFTEQOP .)
    RTEMPLATE       reduce using rule 159 (operator_name -> RSHIFTEQOP .)
    RCPAREN         reduce using rule 159 (operator_name -> RSHIFTEQOP .)
    COLON           reduce using rule 159 (operator_name -> RSHIFTEQOP .)


state 101

    (160) operator_name -> LSHIFTEQOP .

    LPAREN          reduce using rule 160 (operator_name -> LSHIFTEQOP .)
    LSPAREN         reduce using rule 160 (operator_name -> LSHIFTEQOP .)
    EQUAL           reduce using rule 160 (operator_name -> LSHIFTEQOP .)
    LCPAREN         reduce using rule 160 (operator_name -> LSHIFTEQOP .)
    SEMICOLON       reduce using rule 160 (operator_name -> LSHIFTEQOP .)
    COMMA           reduce using rule 160 (operator_name -> LSHIFTEQOP .)
    DOT             reduce using rule 160 (operator_name -> LSHIFTEQOP .)
    ARROW           reduce using rule 160 (operator_name -> LSHIFTEQOP .)
    DPLUSOP         reduce using rule 160 (operator_name -> LSHIFTEQOP .)
    DMINUSOP        reduce using rule 160 (operator_name -> LSHIFTEQOP .)
    LTEMPLATE       reduce using rule 160 (operator_name -> LSHIFTEQOP .)
    MULTEQOP        reduce using rule 160 (operator_name -> LSHIFTEQOP .)
    DIVEQOP         reduce using rule 160 (operator_name -> LSHIFTEQOP .)
    MODEQOP         reduce using rule 160 (operator_name -> LSHIFTEQOP .)
    PLUSEQOP        reduce using rule 160 (operator_name -> LSHIFTEQOP .)
    MINUSEQOP       reduce using rule 160 (operator_name -> LSHIFTEQOP .)
    LSHIFTEQOP      reduce using rule 160 (operator_name -> LSHIFTEQOP .)
    RSHIFTEQOP      reduce using rule 160 (operator_name -> LSHIFTEQOP .)
    BANDEQOP        reduce using rule 160 (operator_name -> LSHIFTEQOP .)
    BOREQOP         reduce using rule 160 (operator_name -> LSHIFTEQOP .)
    DOTSTAR         reduce using rule 160 (operator_name -> LSHIFTEQOP .)
    ARROWSTAR       reduce using rule 160 (operator_name -> LSHIFTEQOP .)
    MULTOP          reduce using rule 160 (operator_name -> LSHIFTEQOP .)
    DIVOP           reduce using rule 160 (operator_name -> LSHIFTEQOP .)
    MODOP           reduce using rule 160 (operator_name -> LSHIFTEQOP .)
    PLUSOP          reduce using rule 160 (operator_name -> LSHIFTEQOP .)
    MINUSOP         reduce using rule 160 (operator_name -> LSHIFTEQOP .)
    LSHIFT          reduce using rule 160 (operator_name -> LSHIFTEQOP .)
    RSHIFT          reduce using rule 160 (operator_name -> LSHIFTEQOP .)
    LTCOMP          reduce using rule 160 (operator_name -> LSHIFTEQOP .)
    GTCOMP          reduce using rule 160 (operator_name -> LSHIFTEQOP .)
    LTECOMP         reduce using rule 160 (operator_name -> LSHIFTEQOP .)
    GTECOMP         reduce using rule 160 (operator_name -> LSHIFTEQOP .)
    EQCOMP          reduce using rule 160 (operator_name -> LSHIFTEQOP .)
    NEQCOMP         reduce using rule 160 (operator_name -> LSHIFTEQOP .)
    BANDOP          reduce using rule 160 (operator_name -> LSHIFTEQOP .)
    XOROP           reduce using rule 160 (operator_name -> LSHIFTEQOP .)
    OROP            reduce using rule 160 (operator_name -> LSHIFTEQOP .)
    ANDOP           reduce using rule 160 (operator_name -> LSHIFTEQOP .)
    QUESMARK        reduce using rule 160 (operator_name -> LSHIFTEQOP .)
    RPAREN          reduce using rule 160 (operator_name -> LSHIFTEQOP .)
    RSPAREN         reduce using rule 160 (operator_name -> LSHIFTEQOP .)
    RTEMPLATE       reduce using rule 160 (operator_name -> LSHIFTEQOP .)
    RCPAREN         reduce using rule 160 (operator_name -> LSHIFTEQOP .)
    COLON           reduce using rule 160 (operator_name -> LSHIFTEQOP .)


state 102

    (161) operator_name -> EQCOMP .

    LPAREN          reduce using rule 161 (operator_name -> EQCOMP .)
    LSPAREN         reduce using rule 161 (operator_name -> EQCOMP .)
    EQUAL           reduce using rule 161 (operator_name -> EQCOMP .)
    LCPAREN         reduce using rule 161 (operator_name -> EQCOMP .)
    SEMICOLON       reduce using rule 161 (operator_name -> EQCOMP .)
    COMMA           reduce using rule 161 (operator_name -> EQCOMP .)
    DOT             reduce using rule 161 (operator_name -> EQCOMP .)
    ARROW           reduce using rule 161 (operator_name -> EQCOMP .)
    DPLUSOP         reduce using rule 161 (operator_name -> EQCOMP .)
    DMINUSOP        reduce using rule 161 (operator_name -> EQCOMP .)
    LTEMPLATE       reduce using rule 161 (operator_name -> EQCOMP .)
    MULTEQOP        reduce using rule 161 (operator_name -> EQCOMP .)
    DIVEQOP         reduce using rule 161 (operator_name -> EQCOMP .)
    MODEQOP         reduce using rule 161 (operator_name -> EQCOMP .)
    PLUSEQOP        reduce using rule 161 (operator_name -> EQCOMP .)
    MINUSEQOP       reduce using rule 161 (operator_name -> EQCOMP .)
    LSHIFTEQOP      reduce using rule 161 (operator_name -> EQCOMP .)
    RSHIFTEQOP      reduce using rule 161 (operator_name -> EQCOMP .)
    BANDEQOP        reduce using rule 161 (operator_name -> EQCOMP .)
    BOREQOP         reduce using rule 161 (operator_name -> EQCOMP .)
    DOTSTAR         reduce using rule 161 (operator_name -> EQCOMP .)
    ARROWSTAR       reduce using rule 161 (operator_name -> EQCOMP .)
    MULTOP          reduce using rule 161 (operator_name -> EQCOMP .)
    DIVOP           reduce using rule 161 (operator_name -> EQCOMP .)
    MODOP           reduce using rule 161 (operator_name -> EQCOMP .)
    PLUSOP          reduce using rule 161 (operator_name -> EQCOMP .)
    MINUSOP         reduce using rule 161 (operator_name -> EQCOMP .)
    LSHIFT          reduce using rule 161 (operator_name -> EQCOMP .)
    RSHIFT          reduce using rule 161 (operator_name -> EQCOMP .)
    LTCOMP          reduce using rule 161 (operator_name -> EQCOMP .)
    GTCOMP          reduce using rule 161 (operator_name -> EQCOMP .)
    LTECOMP         reduce using rule 161 (operator_name -> EQCOMP .)
    GTECOMP         reduce using rule 161 (operator_name -> EQCOMP .)
    EQCOMP          reduce using rule 161 (operator_name -> EQCOMP .)
    NEQCOMP         reduce using rule 161 (operator_name -> EQCOMP .)
    BANDOP          reduce using rule 161 (operator_name -> EQCOMP .)
    XOROP           reduce using rule 161 (operator_name -> EQCOMP .)
    OROP            reduce using rule 161 (operator_name -> EQCOMP .)
    ANDOP           reduce using rule 161 (operator_name -> EQCOMP .)
    QUESMARK        reduce using rule 161 (operator_name -> EQCOMP .)
    RPAREN          reduce using rule 161 (operator_name -> EQCOMP .)
    RSPAREN         reduce using rule 161 (operator_name -> EQCOMP .)
    RTEMPLATE       reduce using rule 161 (operator_name -> EQCOMP .)
    RCPAREN         reduce using rule 161 (operator_name -> EQCOMP .)
    COLON           reduce using rule 161 (operator_name -> EQCOMP .)


state 103

    (162) operator_name -> NEQCOMP .

    LPAREN          reduce using rule 162 (operator_name -> NEQCOMP .)
    LSPAREN         reduce using rule 162 (operator_name -> NEQCOMP .)
    EQUAL           reduce using rule 162 (operator_name -> NEQCOMP .)
    LCPAREN         reduce using rule 162 (operator_name -> NEQCOMP .)
    SEMICOLON       reduce using rule 162 (operator_name -> NEQCOMP .)
    COMMA           reduce using rule 162 (operator_name -> NEQCOMP .)
    DOT             reduce using rule 162 (operator_name -> NEQCOMP .)
    ARROW           reduce using rule 162 (operator_name -> NEQCOMP .)
    DPLUSOP         reduce using rule 162 (operator_name -> NEQCOMP .)
    DMINUSOP        reduce using rule 162 (operator_name -> NEQCOMP .)
    LTEMPLATE       reduce using rule 162 (operator_name -> NEQCOMP .)
    MULTEQOP        reduce using rule 162 (operator_name -> NEQCOMP .)
    DIVEQOP         reduce using rule 162 (operator_name -> NEQCOMP .)
    MODEQOP         reduce using rule 162 (operator_name -> NEQCOMP .)
    PLUSEQOP        reduce using rule 162 (operator_name -> NEQCOMP .)
    MINUSEQOP       reduce using rule 162 (operator_name -> NEQCOMP .)
    LSHIFTEQOP      reduce using rule 162 (operator_name -> NEQCOMP .)
    RSHIFTEQOP      reduce using rule 162 (operator_name -> NEQCOMP .)
    BANDEQOP        reduce using rule 162 (operator_name -> NEQCOMP .)
    BOREQOP         reduce using rule 162 (operator_name -> NEQCOMP .)
    DOTSTAR         reduce using rule 162 (operator_name -> NEQCOMP .)
    ARROWSTAR       reduce using rule 162 (operator_name -> NEQCOMP .)
    MULTOP          reduce using rule 162 (operator_name -> NEQCOMP .)
    DIVOP           reduce using rule 162 (operator_name -> NEQCOMP .)
    MODOP           reduce using rule 162 (operator_name -> NEQCOMP .)
    PLUSOP          reduce using rule 162 (operator_name -> NEQCOMP .)
    MINUSOP         reduce using rule 162 (operator_name -> NEQCOMP .)
    LSHIFT          reduce using rule 162 (operator_name -> NEQCOMP .)
    RSHIFT          reduce using rule 162 (operator_name -> NEQCOMP .)
    LTCOMP          reduce using rule 162 (operator_name -> NEQCOMP .)
    GTCOMP          reduce using rule 162 (operator_name -> NEQCOMP .)
    LTECOMP         reduce using rule 162 (operator_name -> NEQCOMP .)
    GTECOMP         reduce using rule 162 (operator_name -> NEQCOMP .)
    EQCOMP          reduce using rule 162 (operator_name -> NEQCOMP .)
    NEQCOMP         reduce using rule 162 (operator_name -> NEQCOMP .)
    BANDOP          reduce using rule 162 (operator_name -> NEQCOMP .)
    XOROP           reduce using rule 162 (operator_name -> NEQCOMP .)
    OROP            reduce using rule 162 (operator_name -> NEQCOMP .)
    ANDOP           reduce using rule 162 (operator_name -> NEQCOMP .)
    QUESMARK        reduce using rule 162 (operator_name -> NEQCOMP .)
    RPAREN          reduce using rule 162 (operator_name -> NEQCOMP .)
    RSPAREN         reduce using rule 162 (operator_name -> NEQCOMP .)
    RTEMPLATE       reduce using rule 162 (operator_name -> NEQCOMP .)
    RCPAREN         reduce using rule 162 (operator_name -> NEQCOMP .)
    COLON           reduce using rule 162 (operator_name -> NEQCOMP .)


state 104

    (163) operator_name -> LTECOMP .

    LPAREN          reduce using rule 163 (operator_name -> LTECOMP .)
    LSPAREN         reduce using rule 163 (operator_name -> LTECOMP .)
    EQUAL           reduce using rule 163 (operator_name -> LTECOMP .)
    LCPAREN         reduce using rule 163 (operator_name -> LTECOMP .)
    SEMICOLON       reduce using rule 163 (operator_name -> LTECOMP .)
    COMMA           reduce using rule 163 (operator_name -> LTECOMP .)
    DOT             reduce using rule 163 (operator_name -> LTECOMP .)
    ARROW           reduce using rule 163 (operator_name -> LTECOMP .)
    DPLUSOP         reduce using rule 163 (operator_name -> LTECOMP .)
    DMINUSOP        reduce using rule 163 (operator_name -> LTECOMP .)
    LTEMPLATE       reduce using rule 163 (operator_name -> LTECOMP .)
    MULTEQOP        reduce using rule 163 (operator_name -> LTECOMP .)
    DIVEQOP         reduce using rule 163 (operator_name -> LTECOMP .)
    MODEQOP         reduce using rule 163 (operator_name -> LTECOMP .)
    PLUSEQOP        reduce using rule 163 (operator_name -> LTECOMP .)
    MINUSEQOP       reduce using rule 163 (operator_name -> LTECOMP .)
    LSHIFTEQOP      reduce using rule 163 (operator_name -> LTECOMP .)
    RSHIFTEQOP      reduce using rule 163 (operator_name -> LTECOMP .)
    BANDEQOP        reduce using rule 163 (operator_name -> LTECOMP .)
    BOREQOP         reduce using rule 163 (operator_name -> LTECOMP .)
    DOTSTAR         reduce using rule 163 (operator_name -> LTECOMP .)
    ARROWSTAR       reduce using rule 163 (operator_name -> LTECOMP .)
    MULTOP          reduce using rule 163 (operator_name -> LTECOMP .)
    DIVOP           reduce using rule 163 (operator_name -> LTECOMP .)
    MODOP           reduce using rule 163 (operator_name -> LTECOMP .)
    PLUSOP          reduce using rule 163 (operator_name -> LTECOMP .)
    MINUSOP         reduce using rule 163 (operator_name -> LTECOMP .)
    LSHIFT          reduce using rule 163 (operator_name -> LTECOMP .)
    RSHIFT          reduce using rule 163 (operator_name -> LTECOMP .)
    LTCOMP          reduce using rule 163 (operator_name -> LTECOMP .)
    GTCOMP          reduce using rule 163 (operator_name -> LTECOMP .)
    LTECOMP         reduce using rule 163 (operator_name -> LTECOMP .)
    GTECOMP         reduce using rule 163 (operator_name -> LTECOMP .)
    EQCOMP          reduce using rule 163 (operator_name -> LTECOMP .)
    NEQCOMP         reduce using rule 163 (operator_name -> LTECOMP .)
    BANDOP          reduce using rule 163 (operator_name -> LTECOMP .)
    XOROP           reduce using rule 163 (operator_name -> LTECOMP .)
    OROP            reduce using rule 163 (operator_name -> LTECOMP .)
    ANDOP           reduce using rule 163 (operator_name -> LTECOMP .)
    QUESMARK        reduce using rule 163 (operator_name -> LTECOMP .)
    RPAREN          reduce using rule 163 (operator_name -> LTECOMP .)
    RSPAREN         reduce using rule 163 (operator_name -> LTECOMP .)
    RTEMPLATE       reduce using rule 163 (operator_name -> LTECOMP .)
    RCPAREN         reduce using rule 163 (operator_name -> LTECOMP .)
    COLON           reduce using rule 163 (operator_name -> LTECOMP .)


state 105

    (164) operator_name -> GTECOMP .

    LPAREN          reduce using rule 164 (operator_name -> GTECOMP .)
    LSPAREN         reduce using rule 164 (operator_name -> GTECOMP .)
    EQUAL           reduce using rule 164 (operator_name -> GTECOMP .)
    LCPAREN         reduce using rule 164 (operator_name -> GTECOMP .)
    SEMICOLON       reduce using rule 164 (operator_name -> GTECOMP .)
    COMMA           reduce using rule 164 (operator_name -> GTECOMP .)
    DOT             reduce using rule 164 (operator_name -> GTECOMP .)
    ARROW           reduce using rule 164 (operator_name -> GTECOMP .)
    DPLUSOP         reduce using rule 164 (operator_name -> GTECOMP .)
    DMINUSOP        reduce using rule 164 (operator_name -> GTECOMP .)
    LTEMPLATE       reduce using rule 164 (operator_name -> GTECOMP .)
    MULTEQOP        reduce using rule 164 (operator_name -> GTECOMP .)
    DIVEQOP         reduce using rule 164 (operator_name -> GTECOMP .)
    MODEQOP         reduce using rule 164 (operator_name -> GTECOMP .)
    PLUSEQOP        reduce using rule 164 (operator_name -> GTECOMP .)
    MINUSEQOP       reduce using rule 164 (operator_name -> GTECOMP .)
    LSHIFTEQOP      reduce using rule 164 (operator_name -> GTECOMP .)
    RSHIFTEQOP      reduce using rule 164 (operator_name -> GTECOMP .)
    BANDEQOP        reduce using rule 164 (operator_name -> GTECOMP .)
    BOREQOP         reduce using rule 164 (operator_name -> GTECOMP .)
    DOTSTAR         reduce using rule 164 (operator_name -> GTECOMP .)
    ARROWSTAR       reduce using rule 164 (operator_name -> GTECOMP .)
    MULTOP          reduce using rule 164 (operator_name -> GTECOMP .)
    DIVOP           reduce using rule 164 (operator_name -> GTECOMP .)
    MODOP           reduce using rule 164 (operator_name -> GTECOMP .)
    PLUSOP          reduce using rule 164 (operator_name -> GTECOMP .)
    MINUSOP         reduce using rule 164 (operator_name -> GTECOMP .)
    LSHIFT          reduce using rule 164 (operator_name -> GTECOMP .)
    RSHIFT          reduce using rule 164 (operator_name -> GTECOMP .)
    LTCOMP          reduce using rule 164 (operator_name -> GTECOMP .)
    GTCOMP          reduce using rule 164 (operator_name -> GTECOMP .)
    LTECOMP         reduce using rule 164 (operator_name -> GTECOMP .)
    GTECOMP         reduce using rule 164 (operator_name -> GTECOMP .)
    EQCOMP          reduce using rule 164 (operator_name -> GTECOMP .)
    NEQCOMP         reduce using rule 164 (operator_name -> GTECOMP .)
    BANDOP          reduce using rule 164 (operator_name -> GTECOMP .)
    XOROP           reduce using rule 164 (operator_name -> GTECOMP .)
    OROP            reduce using rule 164 (operator_name -> GTECOMP .)
    ANDOP           reduce using rule 164 (operator_name -> GTECOMP .)
    QUESMARK        reduce using rule 164 (operator_name -> GTECOMP .)
    RPAREN          reduce using rule 164 (operator_name -> GTECOMP .)
    RSPAREN         reduce using rule 164 (operator_name -> GTECOMP .)
    RTEMPLATE       reduce using rule 164 (operator_name -> GTECOMP .)
    RCPAREN         reduce using rule 164 (operator_name -> GTECOMP .)
    COLON           reduce using rule 164 (operator_name -> GTECOMP .)


state 106

    (165) operator_name -> ANDOP .

    LPAREN          reduce using rule 165 (operator_name -> ANDOP .)
    LSPAREN         reduce using rule 165 (operator_name -> ANDOP .)
    EQUAL           reduce using rule 165 (operator_name -> ANDOP .)
    LCPAREN         reduce using rule 165 (operator_name -> ANDOP .)
    SEMICOLON       reduce using rule 165 (operator_name -> ANDOP .)
    COMMA           reduce using rule 165 (operator_name -> ANDOP .)
    DOT             reduce using rule 165 (operator_name -> ANDOP .)
    ARROW           reduce using rule 165 (operator_name -> ANDOP .)
    DPLUSOP         reduce using rule 165 (operator_name -> ANDOP .)
    DMINUSOP        reduce using rule 165 (operator_name -> ANDOP .)
    LTEMPLATE       reduce using rule 165 (operator_name -> ANDOP .)
    MULTEQOP        reduce using rule 165 (operator_name -> ANDOP .)
    DIVEQOP         reduce using rule 165 (operator_name -> ANDOP .)
    MODEQOP         reduce using rule 165 (operator_name -> ANDOP .)
    PLUSEQOP        reduce using rule 165 (operator_name -> ANDOP .)
    MINUSEQOP       reduce using rule 165 (operator_name -> ANDOP .)
    LSHIFTEQOP      reduce using rule 165 (operator_name -> ANDOP .)
    RSHIFTEQOP      reduce using rule 165 (operator_name -> ANDOP .)
    BANDEQOP        reduce using rule 165 (operator_name -> ANDOP .)
    BOREQOP         reduce using rule 165 (operator_name -> ANDOP .)
    DOTSTAR         reduce using rule 165 (operator_name -> ANDOP .)
    ARROWSTAR       reduce using rule 165 (operator_name -> ANDOP .)
    MULTOP          reduce using rule 165 (operator_name -> ANDOP .)
    DIVOP           reduce using rule 165 (operator_name -> ANDOP .)
    MODOP           reduce using rule 165 (operator_name -> ANDOP .)
    PLUSOP          reduce using rule 165 (operator_name -> ANDOP .)
    MINUSOP         reduce using rule 165 (operator_name -> ANDOP .)
    LSHIFT          reduce using rule 165 (operator_name -> ANDOP .)
    RSHIFT          reduce using rule 165 (operator_name -> ANDOP .)
    LTCOMP          reduce using rule 165 (operator_name -> ANDOP .)
    GTCOMP          reduce using rule 165 (operator_name -> ANDOP .)
    LTECOMP         reduce using rule 165 (operator_name -> ANDOP .)
    GTECOMP         reduce using rule 165 (operator_name -> ANDOP .)
    EQCOMP          reduce using rule 165 (operator_name -> ANDOP .)
    NEQCOMP         reduce using rule 165 (operator_name -> ANDOP .)
    BANDOP          reduce using rule 165 (operator_name -> ANDOP .)
    XOROP           reduce using rule 165 (operator_name -> ANDOP .)
    OROP            reduce using rule 165 (operator_name -> ANDOP .)
    ANDOP           reduce using rule 165 (operator_name -> ANDOP .)
    QUESMARK        reduce using rule 165 (operator_name -> ANDOP .)
    RPAREN          reduce using rule 165 (operator_name -> ANDOP .)
    RSPAREN         reduce using rule 165 (operator_name -> ANDOP .)
    RTEMPLATE       reduce using rule 165 (operator_name -> ANDOP .)
    RCPAREN         reduce using rule 165 (operator_name -> ANDOP .)
    COLON           reduce using rule 165 (operator_name -> ANDOP .)


state 107

    (166) operator_name -> OROP .

    LPAREN          reduce using rule 166 (operator_name -> OROP .)
    LSPAREN         reduce using rule 166 (operator_name -> OROP .)
    EQUAL           reduce using rule 166 (operator_name -> OROP .)
    LCPAREN         reduce using rule 166 (operator_name -> OROP .)
    SEMICOLON       reduce using rule 166 (operator_name -> OROP .)
    COMMA           reduce using rule 166 (operator_name -> OROP .)
    DOT             reduce using rule 166 (operator_name -> OROP .)
    ARROW           reduce using rule 166 (operator_name -> OROP .)
    DPLUSOP         reduce using rule 166 (operator_name -> OROP .)
    DMINUSOP        reduce using rule 166 (operator_name -> OROP .)
    LTEMPLATE       reduce using rule 166 (operator_name -> OROP .)
    MULTEQOP        reduce using rule 166 (operator_name -> OROP .)
    DIVEQOP         reduce using rule 166 (operator_name -> OROP .)
    MODEQOP         reduce using rule 166 (operator_name -> OROP .)
    PLUSEQOP        reduce using rule 166 (operator_name -> OROP .)
    MINUSEQOP       reduce using rule 166 (operator_name -> OROP .)
    LSHIFTEQOP      reduce using rule 166 (operator_name -> OROP .)
    RSHIFTEQOP      reduce using rule 166 (operator_name -> OROP .)
    BANDEQOP        reduce using rule 166 (operator_name -> OROP .)
    BOREQOP         reduce using rule 166 (operator_name -> OROP .)
    DOTSTAR         reduce using rule 166 (operator_name -> OROP .)
    ARROWSTAR       reduce using rule 166 (operator_name -> OROP .)
    MULTOP          reduce using rule 166 (operator_name -> OROP .)
    DIVOP           reduce using rule 166 (operator_name -> OROP .)
    MODOP           reduce using rule 166 (operator_name -> OROP .)
    PLUSOP          reduce using rule 166 (operator_name -> OROP .)
    MINUSOP         reduce using rule 166 (operator_name -> OROP .)
    LSHIFT          reduce using rule 166 (operator_name -> OROP .)
    RSHIFT          reduce using rule 166 (operator_name -> OROP .)
    LTCOMP          reduce using rule 166 (operator_name -> OROP .)
    GTCOMP          reduce using rule 166 (operator_name -> OROP .)
    LTECOMP         reduce using rule 166 (operator_name -> OROP .)
    GTECOMP         reduce using rule 166 (operator_name -> OROP .)
    EQCOMP          reduce using rule 166 (operator_name -> OROP .)
    NEQCOMP         reduce using rule 166 (operator_name -> OROP .)
    BANDOP          reduce using rule 166 (operator_name -> OROP .)
    XOROP           reduce using rule 166 (operator_name -> OROP .)
    OROP            reduce using rule 166 (operator_name -> OROP .)
    ANDOP           reduce using rule 166 (operator_name -> OROP .)
    QUESMARK        reduce using rule 166 (operator_name -> OROP .)
    RPAREN          reduce using rule 166 (operator_name -> OROP .)
    RSPAREN         reduce using rule 166 (operator_name -> OROP .)
    RTEMPLATE       reduce using rule 166 (operator_name -> OROP .)
    RCPAREN         reduce using rule 166 (operator_name -> OROP .)
    COLON           reduce using rule 166 (operator_name -> OROP .)


state 108

    (167) operator_name -> DPLUSOP .

    LPAREN          reduce using rule 167 (operator_name -> DPLUSOP .)
    LSPAREN         reduce using rule 167 (operator_name -> DPLUSOP .)
    EQUAL           reduce using rule 167 (operator_name -> DPLUSOP .)
    LCPAREN         reduce using rule 167 (operator_name -> DPLUSOP .)
    SEMICOLON       reduce using rule 167 (operator_name -> DPLUSOP .)
    COMMA           reduce using rule 167 (operator_name -> DPLUSOP .)
    DOT             reduce using rule 167 (operator_name -> DPLUSOP .)
    ARROW           reduce using rule 167 (operator_name -> DPLUSOP .)
    DPLUSOP         reduce using rule 167 (operator_name -> DPLUSOP .)
    DMINUSOP        reduce using rule 167 (operator_name -> DPLUSOP .)
    LTEMPLATE       reduce using rule 167 (operator_name -> DPLUSOP .)
    MULTEQOP        reduce using rule 167 (operator_name -> DPLUSOP .)
    DIVEQOP         reduce using rule 167 (operator_name -> DPLUSOP .)
    MODEQOP         reduce using rule 167 (operator_name -> DPLUSOP .)
    PLUSEQOP        reduce using rule 167 (operator_name -> DPLUSOP .)
    MINUSEQOP       reduce using rule 167 (operator_name -> DPLUSOP .)
    LSHIFTEQOP      reduce using rule 167 (operator_name -> DPLUSOP .)
    RSHIFTEQOP      reduce using rule 167 (operator_name -> DPLUSOP .)
    BANDEQOP        reduce using rule 167 (operator_name -> DPLUSOP .)
    BOREQOP         reduce using rule 167 (operator_name -> DPLUSOP .)
    DOTSTAR         reduce using rule 167 (operator_name -> DPLUSOP .)
    ARROWSTAR       reduce using rule 167 (operator_name -> DPLUSOP .)
    MULTOP          reduce using rule 167 (operator_name -> DPLUSOP .)
    DIVOP           reduce using rule 167 (operator_name -> DPLUSOP .)
    MODOP           reduce using rule 167 (operator_name -> DPLUSOP .)
    PLUSOP          reduce using rule 167 (operator_name -> DPLUSOP .)
    MINUSOP         reduce using rule 167 (operator_name -> DPLUSOP .)
    LSHIFT          reduce using rule 167 (operator_name -> DPLUSOP .)
    RSHIFT          reduce using rule 167 (operator_name -> DPLUSOP .)
    LTCOMP          reduce using rule 167 (operator_name -> DPLUSOP .)
    GTCOMP          reduce using rule 167 (operator_name -> DPLUSOP .)
    LTECOMP         reduce using rule 167 (operator_name -> DPLUSOP .)
    GTECOMP         reduce using rule 167 (operator_name -> DPLUSOP .)
    EQCOMP          reduce using rule 167 (operator_name -> DPLUSOP .)
    NEQCOMP         reduce using rule 167 (operator_name -> DPLUSOP .)
    BANDOP          reduce using rule 167 (operator_name -> DPLUSOP .)
    XOROP           reduce using rule 167 (operator_name -> DPLUSOP .)
    OROP            reduce using rule 167 (operator_name -> DPLUSOP .)
    ANDOP           reduce using rule 167 (operator_name -> DPLUSOP .)
    QUESMARK        reduce using rule 167 (operator_name -> DPLUSOP .)
    RPAREN          reduce using rule 167 (operator_name -> DPLUSOP .)
    RSPAREN         reduce using rule 167 (operator_name -> DPLUSOP .)
    RTEMPLATE       reduce using rule 167 (operator_name -> DPLUSOP .)
    RCPAREN         reduce using rule 167 (operator_name -> DPLUSOP .)
    COLON           reduce using rule 167 (operator_name -> DPLUSOP .)


state 109

    (168) operator_name -> DMINUSOP .

    LPAREN          reduce using rule 168 (operator_name -> DMINUSOP .)
    LSPAREN         reduce using rule 168 (operator_name -> DMINUSOP .)
    EQUAL           reduce using rule 168 (operator_name -> DMINUSOP .)
    LCPAREN         reduce using rule 168 (operator_name -> DMINUSOP .)
    SEMICOLON       reduce using rule 168 (operator_name -> DMINUSOP .)
    COMMA           reduce using rule 168 (operator_name -> DMINUSOP .)
    DOT             reduce using rule 168 (operator_name -> DMINUSOP .)
    ARROW           reduce using rule 168 (operator_name -> DMINUSOP .)
    DPLUSOP         reduce using rule 168 (operator_name -> DMINUSOP .)
    DMINUSOP        reduce using rule 168 (operator_name -> DMINUSOP .)
    LTEMPLATE       reduce using rule 168 (operator_name -> DMINUSOP .)
    MULTEQOP        reduce using rule 168 (operator_name -> DMINUSOP .)
    DIVEQOP         reduce using rule 168 (operator_name -> DMINUSOP .)
    MODEQOP         reduce using rule 168 (operator_name -> DMINUSOP .)
    PLUSEQOP        reduce using rule 168 (operator_name -> DMINUSOP .)
    MINUSEQOP       reduce using rule 168 (operator_name -> DMINUSOP .)
    LSHIFTEQOP      reduce using rule 168 (operator_name -> DMINUSOP .)
    RSHIFTEQOP      reduce using rule 168 (operator_name -> DMINUSOP .)
    BANDEQOP        reduce using rule 168 (operator_name -> DMINUSOP .)
    BOREQOP         reduce using rule 168 (operator_name -> DMINUSOP .)
    DOTSTAR         reduce using rule 168 (operator_name -> DMINUSOP .)
    ARROWSTAR       reduce using rule 168 (operator_name -> DMINUSOP .)
    MULTOP          reduce using rule 168 (operator_name -> DMINUSOP .)
    DIVOP           reduce using rule 168 (operator_name -> DMINUSOP .)
    MODOP           reduce using rule 168 (operator_name -> DMINUSOP .)
    PLUSOP          reduce using rule 168 (operator_name -> DMINUSOP .)
    MINUSOP         reduce using rule 168 (operator_name -> DMINUSOP .)
    LSHIFT          reduce using rule 168 (operator_name -> DMINUSOP .)
    RSHIFT          reduce using rule 168 (operator_name -> DMINUSOP .)
    LTCOMP          reduce using rule 168 (operator_name -> DMINUSOP .)
    GTCOMP          reduce using rule 168 (operator_name -> DMINUSOP .)
    LTECOMP         reduce using rule 168 (operator_name -> DMINUSOP .)
    GTECOMP         reduce using rule 168 (operator_name -> DMINUSOP .)
    EQCOMP          reduce using rule 168 (operator_name -> DMINUSOP .)
    NEQCOMP         reduce using rule 168 (operator_name -> DMINUSOP .)
    BANDOP          reduce using rule 168 (operator_name -> DMINUSOP .)
    XOROP           reduce using rule 168 (operator_name -> DMINUSOP .)
    OROP            reduce using rule 168 (operator_name -> DMINUSOP .)
    ANDOP           reduce using rule 168 (operator_name -> DMINUSOP .)
    QUESMARK        reduce using rule 168 (operator_name -> DMINUSOP .)
    RPAREN          reduce using rule 168 (operator_name -> DMINUSOP .)
    RSPAREN         reduce using rule 168 (operator_name -> DMINUSOP .)
    RTEMPLATE       reduce using rule 168 (operator_name -> DMINUSOP .)
    RCPAREN         reduce using rule 168 (operator_name -> DMINUSOP .)
    COLON           reduce using rule 168 (operator_name -> DMINUSOP .)


state 110

    (169) operator_name -> COMMA .

    LPAREN          reduce using rule 169 (operator_name -> COMMA .)
    LSPAREN         reduce using rule 169 (operator_name -> COMMA .)
    EQUAL           reduce using rule 169 (operator_name -> COMMA .)
    LCPAREN         reduce using rule 169 (operator_name -> COMMA .)
    SEMICOLON       reduce using rule 169 (operator_name -> COMMA .)
    COMMA           reduce using rule 169 (operator_name -> COMMA .)
    DOT             reduce using rule 169 (operator_name -> COMMA .)
    ARROW           reduce using rule 169 (operator_name -> COMMA .)
    DPLUSOP         reduce using rule 169 (operator_name -> COMMA .)
    DMINUSOP        reduce using rule 169 (operator_name -> COMMA .)
    LTEMPLATE       reduce using rule 169 (operator_name -> COMMA .)
    MULTEQOP        reduce using rule 169 (operator_name -> COMMA .)
    DIVEQOP         reduce using rule 169 (operator_name -> COMMA .)
    MODEQOP         reduce using rule 169 (operator_name -> COMMA .)
    PLUSEQOP        reduce using rule 169 (operator_name -> COMMA .)
    MINUSEQOP       reduce using rule 169 (operator_name -> COMMA .)
    LSHIFTEQOP      reduce using rule 169 (operator_name -> COMMA .)
    RSHIFTEQOP      reduce using rule 169 (operator_name -> COMMA .)
    BANDEQOP        reduce using rule 169 (operator_name -> COMMA .)
    BOREQOP         reduce using rule 169 (operator_name -> COMMA .)
    DOTSTAR         reduce using rule 169 (operator_name -> COMMA .)
    ARROWSTAR       reduce using rule 169 (operator_name -> COMMA .)
    MULTOP          reduce using rule 169 (operator_name -> COMMA .)
    DIVOP           reduce using rule 169 (operator_name -> COMMA .)
    MODOP           reduce using rule 169 (operator_name -> COMMA .)
    PLUSOP          reduce using rule 169 (operator_name -> COMMA .)
    MINUSOP         reduce using rule 169 (operator_name -> COMMA .)
    LSHIFT          reduce using rule 169 (operator_name -> COMMA .)
    RSHIFT          reduce using rule 169 (operator_name -> COMMA .)
    LTCOMP          reduce using rule 169 (operator_name -> COMMA .)
    GTCOMP          reduce using rule 169 (operator_name -> COMMA .)
    LTECOMP         reduce using rule 169 (operator_name -> COMMA .)
    GTECOMP         reduce using rule 169 (operator_name -> COMMA .)
    EQCOMP          reduce using rule 169 (operator_name -> COMMA .)
    NEQCOMP         reduce using rule 169 (operator_name -> COMMA .)
    BANDOP          reduce using rule 169 (operator_name -> COMMA .)
    XOROP           reduce using rule 169 (operator_name -> COMMA .)
    OROP            reduce using rule 169 (operator_name -> COMMA .)
    ANDOP           reduce using rule 169 (operator_name -> COMMA .)
    QUESMARK        reduce using rule 169 (operator_name -> COMMA .)
    RPAREN          reduce using rule 169 (operator_name -> COMMA .)
    RSPAREN         reduce using rule 169 (operator_name -> COMMA .)
    RTEMPLATE       reduce using rule 169 (operator_name -> COMMA .)
    RCPAREN         reduce using rule 169 (operator_name -> COMMA .)
    COLON           reduce using rule 169 (operator_name -> COMMA .)


state 111

    (170) operator_name -> ARROWSTAR .

    LPAREN          reduce using rule 170 (operator_name -> ARROWSTAR .)
    LSPAREN         reduce using rule 170 (operator_name -> ARROWSTAR .)
    EQUAL           reduce using rule 170 (operator_name -> ARROWSTAR .)
    LCPAREN         reduce using rule 170 (operator_name -> ARROWSTAR .)
    SEMICOLON       reduce using rule 170 (operator_name -> ARROWSTAR .)
    COMMA           reduce using rule 170 (operator_name -> ARROWSTAR .)
    DOT             reduce using rule 170 (operator_name -> ARROWSTAR .)
    ARROW           reduce using rule 170 (operator_name -> ARROWSTAR .)
    DPLUSOP         reduce using rule 170 (operator_name -> ARROWSTAR .)
    DMINUSOP        reduce using rule 170 (operator_name -> ARROWSTAR .)
    LTEMPLATE       reduce using rule 170 (operator_name -> ARROWSTAR .)
    MULTEQOP        reduce using rule 170 (operator_name -> ARROWSTAR .)
    DIVEQOP         reduce using rule 170 (operator_name -> ARROWSTAR .)
    MODEQOP         reduce using rule 170 (operator_name -> ARROWSTAR .)
    PLUSEQOP        reduce using rule 170 (operator_name -> ARROWSTAR .)
    MINUSEQOP       reduce using rule 170 (operator_name -> ARROWSTAR .)
    LSHIFTEQOP      reduce using rule 170 (operator_name -> ARROWSTAR .)
    RSHIFTEQOP      reduce using rule 170 (operator_name -> ARROWSTAR .)
    BANDEQOP        reduce using rule 170 (operator_name -> ARROWSTAR .)
    BOREQOP         reduce using rule 170 (operator_name -> ARROWSTAR .)
    DOTSTAR         reduce using rule 170 (operator_name -> ARROWSTAR .)
    ARROWSTAR       reduce using rule 170 (operator_name -> ARROWSTAR .)
    MULTOP          reduce using rule 170 (operator_name -> ARROWSTAR .)
    DIVOP           reduce using rule 170 (operator_name -> ARROWSTAR .)
    MODOP           reduce using rule 170 (operator_name -> ARROWSTAR .)
    PLUSOP          reduce using rule 170 (operator_name -> ARROWSTAR .)
    MINUSOP         reduce using rule 170 (operator_name -> ARROWSTAR .)
    LSHIFT          reduce using rule 170 (operator_name -> ARROWSTAR .)
    RSHIFT          reduce using rule 170 (operator_name -> ARROWSTAR .)
    LTCOMP          reduce using rule 170 (operator_name -> ARROWSTAR .)
    GTCOMP          reduce using rule 170 (operator_name -> ARROWSTAR .)
    LTECOMP         reduce using rule 170 (operator_name -> ARROWSTAR .)
    GTECOMP         reduce using rule 170 (operator_name -> ARROWSTAR .)
    EQCOMP          reduce using rule 170 (operator_name -> ARROWSTAR .)
    NEQCOMP         reduce using rule 170 (operator_name -> ARROWSTAR .)
    BANDOP          reduce using rule 170 (operator_name -> ARROWSTAR .)
    XOROP           reduce using rule 170 (operator_name -> ARROWSTAR .)
    OROP            reduce using rule 170 (operator_name -> ARROWSTAR .)
    ANDOP           reduce using rule 170 (operator_name -> ARROWSTAR .)
    QUESMARK        reduce using rule 170 (operator_name -> ARROWSTAR .)
    RPAREN          reduce using rule 170 (operator_name -> ARROWSTAR .)
    RSPAREN         reduce using rule 170 (operator_name -> ARROWSTAR .)
    RTEMPLATE       reduce using rule 170 (operator_name -> ARROWSTAR .)
    RCPAREN         reduce using rule 170 (operator_name -> ARROWSTAR .)
    COLON           reduce using rule 170 (operator_name -> ARROWSTAR .)


state 112

    (171) operator_name -> ARROW .

    LPAREN          reduce using rule 171 (operator_name -> ARROW .)
    LSPAREN         reduce using rule 171 (operator_name -> ARROW .)
    EQUAL           reduce using rule 171 (operator_name -> ARROW .)
    LCPAREN         reduce using rule 171 (operator_name -> ARROW .)
    SEMICOLON       reduce using rule 171 (operator_name -> ARROW .)
    COMMA           reduce using rule 171 (operator_name -> ARROW .)
    DOT             reduce using rule 171 (operator_name -> ARROW .)
    ARROW           reduce using rule 171 (operator_name -> ARROW .)
    DPLUSOP         reduce using rule 171 (operator_name -> ARROW .)
    DMINUSOP        reduce using rule 171 (operator_name -> ARROW .)
    LTEMPLATE       reduce using rule 171 (operator_name -> ARROW .)
    MULTEQOP        reduce using rule 171 (operator_name -> ARROW .)
    DIVEQOP         reduce using rule 171 (operator_name -> ARROW .)
    MODEQOP         reduce using rule 171 (operator_name -> ARROW .)
    PLUSEQOP        reduce using rule 171 (operator_name -> ARROW .)
    MINUSEQOP       reduce using rule 171 (operator_name -> ARROW .)
    LSHIFTEQOP      reduce using rule 171 (operator_name -> ARROW .)
    RSHIFTEQOP      reduce using rule 171 (operator_name -> ARROW .)
    BANDEQOP        reduce using rule 171 (operator_name -> ARROW .)
    BOREQOP         reduce using rule 171 (operator_name -> ARROW .)
    DOTSTAR         reduce using rule 171 (operator_name -> ARROW .)
    ARROWSTAR       reduce using rule 171 (operator_name -> ARROW .)
    MULTOP          reduce using rule 171 (operator_name -> ARROW .)
    DIVOP           reduce using rule 171 (operator_name -> ARROW .)
    MODOP           reduce using rule 171 (operator_name -> ARROW .)
    PLUSOP          reduce using rule 171 (operator_name -> ARROW .)
    MINUSOP         reduce using rule 171 (operator_name -> ARROW .)
    LSHIFT          reduce using rule 171 (operator_name -> ARROW .)
    RSHIFT          reduce using rule 171 (operator_name -> ARROW .)
    LTCOMP          reduce using rule 171 (operator_name -> ARROW .)
    GTCOMP          reduce using rule 171 (operator_name -> ARROW .)
    LTECOMP         reduce using rule 171 (operator_name -> ARROW .)
    GTECOMP         reduce using rule 171 (operator_name -> ARROW .)
    EQCOMP          reduce using rule 171 (operator_name -> ARROW .)
    NEQCOMP         reduce using rule 171 (operator_name -> ARROW .)
    BANDOP          reduce using rule 171 (operator_name -> ARROW .)
    XOROP           reduce using rule 171 (operator_name -> ARROW .)
    OROP            reduce using rule 171 (operator_name -> ARROW .)
    ANDOP           reduce using rule 171 (operator_name -> ARROW .)
    QUESMARK        reduce using rule 171 (operator_name -> ARROW .)
    RPAREN          reduce using rule 171 (operator_name -> ARROW .)
    RSPAREN         reduce using rule 171 (operator_name -> ARROW .)
    RTEMPLATE       reduce using rule 171 (operator_name -> ARROW .)
    RCPAREN         reduce using rule 171 (operator_name -> ARROW .)
    COLON           reduce using rule 171 (operator_name -> ARROW .)


state 113

    (172) operator_name -> LPAREN . RPAREN

    RPAREN          shift and go to state 227


state 114

    (173) operator_name -> LSPAREN . RSPAREN

    RSPAREN         shift and go to state 228


state 115

    (195) complex_type_specifier -> class_key IDENTIFIER .
    (196) complex_type_specifier -> class_key IDENTIFIER . template_class_name
    (174) template_class_name -> . LTEMPLATE template_arg_list RTEMPLATE

    SEMICOLON       reduce using rule 195 (complex_type_specifier -> class_key IDENTIFIER .)
    IDENTIFIER      reduce using rule 195 (complex_type_specifier -> class_key IDENTIFIER .)
    DOUBLEBNOP      reduce using rule 195 (complex_type_specifier -> class_key IDENTIFIER .)
    MULTOP          reduce using rule 195 (complex_type_specifier -> class_key IDENTIFIER .)
    BANDOP          reduce using rule 195 (complex_type_specifier -> class_key IDENTIFIER .)
    OPERATOR        reduce using rule 195 (complex_type_specifier -> class_key IDENTIFIER .)
    EQUAL           reduce using rule 195 (complex_type_specifier -> class_key IDENTIFIER .)
    LSPAREN         reduce using rule 195 (complex_type_specifier -> class_key IDENTIFIER .)
    RTEMPLATE       reduce using rule 195 (complex_type_specifier -> class_key IDENTIFIER .)
    COMMA           reduce using rule 195 (complex_type_specifier -> class_key IDENTIFIER .)
    RPAREN          reduce using rule 195 (complex_type_specifier -> class_key IDENTIFIER .)
    LPAREN          reduce using rule 195 (complex_type_specifier -> class_key IDENTIFIER .)
    MULTEQOP        reduce using rule 195 (complex_type_specifier -> class_key IDENTIFIER .)
    DIVEQOP         reduce using rule 195 (complex_type_specifier -> class_key IDENTIFIER .)
    MODEQOP         reduce using rule 195 (complex_type_specifier -> class_key IDENTIFIER .)
    PLUSEQOP        reduce using rule 195 (complex_type_specifier -> class_key IDENTIFIER .)
    MINUSEQOP       reduce using rule 195 (complex_type_specifier -> class_key IDENTIFIER .)
    LSHIFTEQOP      reduce using rule 195 (complex_type_specifier -> class_key IDENTIFIER .)
    RSHIFTEQOP      reduce using rule 195 (complex_type_specifier -> class_key IDENTIFIER .)
    BANDEQOP        reduce using rule 195 (complex_type_specifier -> class_key IDENTIFIER .)
    BOREQOP         reduce using rule 195 (complex_type_specifier -> class_key IDENTIFIER .)
    DOTSTAR         reduce using rule 195 (complex_type_specifier -> class_key IDENTIFIER .)
    ARROWSTAR       reduce using rule 195 (complex_type_specifier -> class_key IDENTIFIER .)
    DIVOP           reduce using rule 195 (complex_type_specifier -> class_key IDENTIFIER .)
    MODOP           reduce using rule 195 (complex_type_specifier -> class_key IDENTIFIER .)
    PLUSOP          reduce using rule 195 (complex_type_specifier -> class_key IDENTIFIER .)
    MINUSOP         reduce using rule 195 (complex_type_specifier -> class_key IDENTIFIER .)
    LSHIFT          reduce using rule 195 (complex_type_specifier -> class_key IDENTIFIER .)
    RSHIFT          reduce using rule 195 (complex_type_specifier -> class_key IDENTIFIER .)
    LTCOMP          reduce using rule 195 (complex_type_specifier -> class_key IDENTIFIER .)
    GTCOMP          reduce using rule 195 (complex_type_specifier -> class_key IDENTIFIER .)
    LTECOMP         reduce using rule 195 (complex_type_specifier -> class_key IDENTIFIER .)
    GTECOMP         reduce using rule 195 (complex_type_specifier -> class_key IDENTIFIER .)
    EQCOMP          reduce using rule 195 (complex_type_specifier -> class_key IDENTIFIER .)
    NEQCOMP         reduce using rule 195 (complex_type_specifier -> class_key IDENTIFIER .)
    XOROP           reduce using rule 195 (complex_type_specifier -> class_key IDENTIFIER .)
    OROP            reduce using rule 195 (complex_type_specifier -> class_key IDENTIFIER .)
    ANDOP           reduce using rule 195 (complex_type_specifier -> class_key IDENTIFIER .)
    QUESMARK        reduce using rule 195 (complex_type_specifier -> class_key IDENTIFIER .)
    RSPAREN         reduce using rule 195 (complex_type_specifier -> class_key IDENTIFIER .)
    RCPAREN         reduce using rule 195 (complex_type_specifier -> class_key IDENTIFIER .)
    COLON           reduce using rule 195 (complex_type_specifier -> class_key IDENTIFIER .)
    LTEMPLATE       shift and go to state 139

    template_class_name            shift and go to state 137

state 116

    (293) asm_declaration -> ASM LPAREN STRING_L . RPAREN SEMICOLON

    RPAREN          shift and go to state 229


state 117

    (213) class_define_specifier -> class_head LCPAREN member_list . RCPAREN
    (217) member_list -> member_list . access_list
    (221) access_list -> . access_specifier COLON member_access_list
    (222) access_list -> . access_specifier COLON
    (218) access_specifier -> . PRIVATE
    (219) access_specifier -> . PROTECTED
    (220) access_specifier -> . PUBLIC

    RCPAREN         shift and go to state 230
    PRIVATE         shift and go to state 128
    PROTECTED       shift and go to state 129
    PUBLIC          shift and go to state 130

    access_list                    shift and go to state 231
    access_specifier               shift and go to state 122

state 118

    (214) class_define_specifier -> class_head LCPAREN RCPAREN .

    SEMICOLON       reduce using rule 214 (class_define_specifier -> class_head LCPAREN RCPAREN .)


state 119

    (215) member_list -> member_access_list .

    RCPAREN         reduce using rule 215 (member_list -> member_access_list .)
    PRIVATE         reduce using rule 215 (member_list -> member_access_list .)
    PROTECTED       reduce using rule 215 (member_list -> member_access_list .)
    PUBLIC          reduce using rule 215 (member_list -> member_access_list .)


state 120

    (216) member_list -> access_list .

    RCPAREN         reduce using rule 216 (member_list -> access_list .)
    PRIVATE         reduce using rule 216 (member_list -> access_list .)
    PROTECTED       reduce using rule 216 (member_list -> access_list .)
    PUBLIC          reduce using rule 216 (member_list -> access_list .)


state 121

    (223) member_access_list -> member_declaration . member_access_list
    (224) member_access_list -> member_declaration .
    (223) member_access_list -> . member_declaration member_access_list
    (224) member_access_list -> . member_declaration
    (225) member_declaration -> . type_specifier_ member_declarator_list SEMICOLON
    (226) member_declaration -> . member_declarator_list SEMICOLON
    (227) member_declaration -> . type_specifier_ SEMICOLON
    (228) member_declaration -> . SEMICOLON
    (229) member_declaration -> . function_definition
    (230) member_declaration -> . class_define_specifier SEMICOLON
    (179) type_specifier_ -> . CONST type_specifier
    (180) type_specifier_ -> . TYPEDEF type_specifier
    (181) type_specifier_ -> . type_specifier
    (231) member_declarator_list -> . member_declarator
    (232) member_declarator_list -> . member_declarator_list COMMA member_declarator
    (235) function_definition -> . type_specifier_ declarator fct_body
    (213) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (214) class_define_specifier -> . class_head LCPAREN RCPAREN
    (182) type_specifier -> . simple_type_name
    (183) type_specifier -> . complex_type_specifier
    (233) member_declarator -> . declarator pure_specifier
    (234) member_declarator -> . declarator
    (200) class_head -> . class_key IDENTIFIER base_spec
    (201) class_head -> . class_key IDENTIFIER
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (195) complex_type_specifier -> . class_key IDENTIFIER
    (196) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (197) complex_type_specifier -> . TYPE IDENTIFIER
    (198) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (117) declarator -> . name
    (118) declarator -> . unary2_operator declarator
    (119) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (120) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (121) declarator -> . declarator LSPAREN RSPAREN
    (211) class_key -> . CLASS
    (212) class_key -> . STRUCT
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (135) operator_function_name -> . OPERATOR operator_name

    RCPAREN         reduce using rule 224 (member_access_list -> member_declaration .)
    PRIVATE         reduce using rule 224 (member_access_list -> member_declaration .)
    PROTECTED       reduce using rule 224 (member_access_list -> member_declaration .)
    PUBLIC          reduce using rule 224 (member_access_list -> member_declaration .)
    SEMICOLON       shift and go to state 125
    CONST           shift and go to state 14
    TYPEDEF         shift and go to state 16
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    TYPE            shift and go to state 34
    CLASS           shift and go to state 35
    STRUCT          shift and go to state 36
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    OPERATOR        shift and go to state 54

    member_declaration             shift and go to state 121
    member_access_list             shift and go to state 232
    type_specifier_                shift and go to state 123
    member_declarator_list         shift and go to state 124
    function_definition            shift and go to state 126
    class_define_specifier         shift and go to state 127
    type_specifier                 shift and go to state 15
    member_declarator              shift and go to state 131
    declarator                     shift and go to state 132
    class_head                     shift and go to state 18
    simple_type_name               shift and go to state 20
    complex_type_specifier         shift and go to state 21
    class_key                      shift and go to state 22
    name                           shift and go to state 47
    unary2_operator                shift and go to state 48
    operator_function_name         shift and go to state 50

state 122

    (221) access_list -> access_specifier . COLON member_access_list
    (222) access_list -> access_specifier . COLON

    COLON           shift and go to state 233


state 123

    (225) member_declaration -> type_specifier_ . member_declarator_list SEMICOLON
    (227) member_declaration -> type_specifier_ . SEMICOLON
    (235) function_definition -> type_specifier_ . declarator fct_body
    (231) member_declarator_list -> . member_declarator
    (232) member_declarator_list -> . member_declarator_list COMMA member_declarator
    (117) declarator -> . name
    (118) declarator -> . unary2_operator declarator
    (119) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (120) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (121) declarator -> . declarator LSPAREN RSPAREN
    (233) member_declarator -> . declarator pure_specifier
    (234) member_declarator -> . declarator
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (135) operator_function_name -> . OPERATOR operator_name

    SEMICOLON       shift and go to state 235
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    OPERATOR        shift and go to state 54

    member_declarator_list         shift and go to state 234
    declarator                     shift and go to state 236
    member_declarator              shift and go to state 131
    name                           shift and go to state 47
    unary2_operator                shift and go to state 48
    operator_function_name         shift and go to state 50

state 124

    (226) member_declaration -> member_declarator_list . SEMICOLON
    (232) member_declarator_list -> member_declarator_list . COMMA member_declarator

    SEMICOLON       shift and go to state 237
    COMMA           shift and go to state 238


state 125

    (228) member_declaration -> SEMICOLON .

    SEMICOLON       reduce using rule 228 (member_declaration -> SEMICOLON .)
    CONST           reduce using rule 228 (member_declaration -> SEMICOLON .)
    TYPEDEF         reduce using rule 228 (member_declaration -> SEMICOLON .)
    CHAR            reduce using rule 228 (member_declaration -> SEMICOLON .)
    SHORT           reduce using rule 228 (member_declaration -> SEMICOLON .)
    INT             reduce using rule 228 (member_declaration -> SEMICOLON .)
    LONG            reduce using rule 228 (member_declaration -> SEMICOLON .)
    SIGNED          reduce using rule 228 (member_declaration -> SEMICOLON .)
    UNSIGNED        reduce using rule 228 (member_declaration -> SEMICOLON .)
    FLOAT           reduce using rule 228 (member_declaration -> SEMICOLON .)
    DOUBLE          reduce using rule 228 (member_declaration -> SEMICOLON .)
    VOID            reduce using rule 228 (member_declaration -> SEMICOLON .)
    STRING          reduce using rule 228 (member_declaration -> SEMICOLON .)
    AUTO            reduce using rule 228 (member_declaration -> SEMICOLON .)
    TYPE            reduce using rule 228 (member_declaration -> SEMICOLON .)
    CLASS           reduce using rule 228 (member_declaration -> SEMICOLON .)
    STRUCT          reduce using rule 228 (member_declaration -> SEMICOLON .)
    IDENTIFIER      reduce using rule 228 (member_declaration -> SEMICOLON .)
    DOUBLEBNOP      reduce using rule 228 (member_declaration -> SEMICOLON .)
    MULTOP          reduce using rule 228 (member_declaration -> SEMICOLON .)
    BANDOP          reduce using rule 228 (member_declaration -> SEMICOLON .)
    OPERATOR        reduce using rule 228 (member_declaration -> SEMICOLON .)
    RCPAREN         reduce using rule 228 (member_declaration -> SEMICOLON .)
    PRIVATE         reduce using rule 228 (member_declaration -> SEMICOLON .)
    PROTECTED       reduce using rule 228 (member_declaration -> SEMICOLON .)
    PUBLIC          reduce using rule 228 (member_declaration -> SEMICOLON .)


state 126

    (229) member_declaration -> function_definition .

    SEMICOLON       reduce using rule 229 (member_declaration -> function_definition .)
    CONST           reduce using rule 229 (member_declaration -> function_definition .)
    TYPEDEF         reduce using rule 229 (member_declaration -> function_definition .)
    CHAR            reduce using rule 229 (member_declaration -> function_definition .)
    SHORT           reduce using rule 229 (member_declaration -> function_definition .)
    INT             reduce using rule 229 (member_declaration -> function_definition .)
    LONG            reduce using rule 229 (member_declaration -> function_definition .)
    SIGNED          reduce using rule 229 (member_declaration -> function_definition .)
    UNSIGNED        reduce using rule 229 (member_declaration -> function_definition .)
    FLOAT           reduce using rule 229 (member_declaration -> function_definition .)
    DOUBLE          reduce using rule 229 (member_declaration -> function_definition .)
    VOID            reduce using rule 229 (member_declaration -> function_definition .)
    STRING          reduce using rule 229 (member_declaration -> function_definition .)
    AUTO            reduce using rule 229 (member_declaration -> function_definition .)
    TYPE            reduce using rule 229 (member_declaration -> function_definition .)
    CLASS           reduce using rule 229 (member_declaration -> function_definition .)
    STRUCT          reduce using rule 229 (member_declaration -> function_definition .)
    IDENTIFIER      reduce using rule 229 (member_declaration -> function_definition .)
    DOUBLEBNOP      reduce using rule 229 (member_declaration -> function_definition .)
    MULTOP          reduce using rule 229 (member_declaration -> function_definition .)
    BANDOP          reduce using rule 229 (member_declaration -> function_definition .)
    OPERATOR        reduce using rule 229 (member_declaration -> function_definition .)
    RCPAREN         reduce using rule 229 (member_declaration -> function_definition .)
    PRIVATE         reduce using rule 229 (member_declaration -> function_definition .)
    PROTECTED       reduce using rule 229 (member_declaration -> function_definition .)
    PUBLIC          reduce using rule 229 (member_declaration -> function_definition .)


state 127

    (230) member_declaration -> class_define_specifier . SEMICOLON

    SEMICOLON       shift and go to state 239


state 128

    (218) access_specifier -> PRIVATE .

    COLON           reduce using rule 218 (access_specifier -> PRIVATE .)
    CLASS           reduce using rule 218 (access_specifier -> PRIVATE .)
    STRUCT          reduce using rule 218 (access_specifier -> PRIVATE .)


state 129

    (219) access_specifier -> PROTECTED .

    COLON           reduce using rule 219 (access_specifier -> PROTECTED .)
    CLASS           reduce using rule 219 (access_specifier -> PROTECTED .)
    STRUCT          reduce using rule 219 (access_specifier -> PROTECTED .)


state 130

    (220) access_specifier -> PUBLIC .

    COLON           reduce using rule 220 (access_specifier -> PUBLIC .)
    CLASS           reduce using rule 220 (access_specifier -> PUBLIC .)
    STRUCT          reduce using rule 220 (access_specifier -> PUBLIC .)


state 131

    (231) member_declarator_list -> member_declarator .

    SEMICOLON       reduce using rule 231 (member_declarator_list -> member_declarator .)
    COMMA           reduce using rule 231 (member_declarator_list -> member_declarator .)


state 132

    (233) member_declarator -> declarator . pure_specifier
    (234) member_declarator -> declarator .
    (119) declarator -> declarator . LPAREN argument_declaration_list RPAREN
    (120) declarator -> declarator . LSPAREN constant_expression RSPAREN
    (121) declarator -> declarator . LSPAREN RSPAREN
    (199) pure_specifier -> . EQUAL NUMBER

    SEMICOLON       reduce using rule 234 (member_declarator -> declarator .)
    COMMA           reduce using rule 234 (member_declarator -> declarator .)
    LPAREN          shift and go to state 226
    LSPAREN         shift and go to state 69
    EQUAL           shift and go to state 241

    pure_specifier                 shift and go to state 240

state 133

    (278) template_declaration -> TEMPLATE LTEMPLATE template_argument_list . RTEMPLATE declaration
    (280) template_argument_list -> template_argument_list . COMMA argument_declaration

    RTEMPLATE       shift and go to state 242
    COMMA           shift and go to state 243


state 134

    (279) template_argument_list -> argument_declaration .

    RTEMPLATE       reduce using rule 279 (template_argument_list -> argument_declaration .)
    COMMA           reduce using rule 279 (template_argument_list -> argument_declaration .)


state 135

    (126) argument_declaration -> type_specifier_ . declarator
    (127) argument_declaration -> type_specifier_ . declarator EQUAL expression
    (128) argument_declaration -> type_specifier_ . abstract_declarator
    (129) argument_declaration -> type_specifier_ .
    (130) argument_declaration -> type_specifier_ . abstract_declarator EQUAL expression
    (131) argument_declaration -> type_specifier_ . EQUAL expression
    (117) declarator -> . name
    (118) declarator -> . unary2_operator declarator
    (119) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (120) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (121) declarator -> . declarator LSPAREN RSPAREN
    (111) abstract_declarator -> . unary2_operator
    (112) abstract_declarator -> . unary2_operator abstract_declarator
    (113) abstract_declarator -> . LSPAREN constant_expression RSPAREN
    (114) abstract_declarator -> . abstract_declarator LSPAREN constant_expression RSPAREN
    (115) abstract_declarator -> . LSPAREN RSPAREN
    (116) abstract_declarator -> . abstract_declarator LSPAREN RSPAREN
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (135) operator_function_name -> . OPERATOR operator_name

    RTEMPLATE       reduce using rule 129 (argument_declaration -> type_specifier_ .)
    COMMA           reduce using rule 129 (argument_declaration -> type_specifier_ .)
    RPAREN          reduce using rule 129 (argument_declaration -> type_specifier_ .)
    EQUAL           shift and go to state 245
    LSPAREN         shift and go to state 248
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    OPERATOR        shift and go to state 54

    declarator                     shift and go to state 244
    abstract_declarator            shift and go to state 246
    name                           shift and go to state 47
    unary2_operator                shift and go to state 247
    operator_function_name         shift and go to state 50

state 136

    (200) class_head -> class_key IDENTIFIER base_spec .

    LCPAREN         reduce using rule 200 (class_head -> class_key IDENTIFIER base_spec .)


state 137

    (196) complex_type_specifier -> class_key IDENTIFIER template_class_name .

    SEMICOLON       reduce using rule 196 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    IDENTIFIER      reduce using rule 196 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    DOUBLEBNOP      reduce using rule 196 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    MULTOP          reduce using rule 196 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    BANDOP          reduce using rule 196 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    OPERATOR        reduce using rule 196 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    EQUAL           reduce using rule 196 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    LSPAREN         reduce using rule 196 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    RTEMPLATE       reduce using rule 196 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    COMMA           reduce using rule 196 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    RPAREN          reduce using rule 196 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    LPAREN          reduce using rule 196 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    MULTEQOP        reduce using rule 196 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    DIVEQOP         reduce using rule 196 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    MODEQOP         reduce using rule 196 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    PLUSEQOP        reduce using rule 196 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    MINUSEQOP       reduce using rule 196 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    LSHIFTEQOP      reduce using rule 196 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    RSHIFTEQOP      reduce using rule 196 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    BANDEQOP        reduce using rule 196 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    BOREQOP         reduce using rule 196 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    DOTSTAR         reduce using rule 196 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    ARROWSTAR       reduce using rule 196 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    DIVOP           reduce using rule 196 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    MODOP           reduce using rule 196 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    PLUSOP          reduce using rule 196 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    MINUSOP         reduce using rule 196 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    LSHIFT          reduce using rule 196 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    RSHIFT          reduce using rule 196 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    LTCOMP          reduce using rule 196 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    GTCOMP          reduce using rule 196 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    LTECOMP         reduce using rule 196 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    GTECOMP         reduce using rule 196 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    EQCOMP          reduce using rule 196 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    NEQCOMP         reduce using rule 196 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    XOROP           reduce using rule 196 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    OROP            reduce using rule 196 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    ANDOP           reduce using rule 196 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    QUESMARK        reduce using rule 196 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    RSPAREN         reduce using rule 196 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    RCPAREN         reduce using rule 196 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    COLON           reduce using rule 196 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)


state 138

    (202) base_spec -> COLON . base_list
    (203) base_list -> . base_specifier
    (204) base_list -> . base_list COMMA base_specifier
    (205) base_specifier -> . class_key IDENTIFIER
    (206) base_specifier -> . class_key IDENTIFIER template_class_name
    (207) base_specifier -> . IDENTIFIER
    (208) base_specifier -> . IDENTIFIER template_class_name
    (209) base_specifier -> . access_specifier class_key IDENTIFIER
    (210) base_specifier -> . access_specifier class_key IDENTIFIER template_class_name
    (211) class_key -> . CLASS
    (212) class_key -> . STRUCT
    (218) access_specifier -> . PRIVATE
    (219) access_specifier -> . PROTECTED
    (220) access_specifier -> . PUBLIC

    IDENTIFIER      shift and go to state 252
    CLASS           shift and go to state 35
    STRUCT          shift and go to state 36
    PRIVATE         shift and go to state 128
    PROTECTED       shift and go to state 129
    PUBLIC          shift and go to state 130

    base_list                      shift and go to state 249
    base_specifier                 shift and go to state 250
    class_key                      shift and go to state 251
    access_specifier               shift and go to state 253

state 139

    (174) template_class_name -> LTEMPLATE . template_arg_list RTEMPLATE
    (175) template_arg_list -> . type_name
    (176) template_arg_list -> . template_arg_list COMMA type_name
    (177) type_name -> . type_specifier_ abstract_declarator
    (178) type_name -> . type_specifier_
    (179) type_specifier_ -> . CONST type_specifier
    (180) type_specifier_ -> . TYPEDEF type_specifier
    (181) type_specifier_ -> . type_specifier
    (182) type_specifier -> . simple_type_name
    (183) type_specifier -> . complex_type_specifier
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (195) complex_type_specifier -> . class_key IDENTIFIER
    (196) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (197) complex_type_specifier -> . TYPE IDENTIFIER
    (198) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (211) class_key -> . CLASS
    (212) class_key -> . STRUCT

    CONST           shift and go to state 14
    TYPEDEF         shift and go to state 16
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    TYPE            shift and go to state 34
    CLASS           shift and go to state 35
    STRUCT          shift and go to state 36

    template_arg_list              shift and go to state 254
    type_name                      shift and go to state 255
    type_specifier_                shift and go to state 256
    type_specifier                 shift and go to state 15
    simple_type_name               shift and go to state 20
    complex_type_specifier         shift and go to state 21
    class_key                      shift and go to state 57

state 140

    (198) complex_type_specifier -> TYPE IDENTIFIER template_class_name .

    SEMICOLON       reduce using rule 198 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    IDENTIFIER      reduce using rule 198 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    DOUBLEBNOP      reduce using rule 198 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    MULTOP          reduce using rule 198 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    BANDOP          reduce using rule 198 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    OPERATOR        reduce using rule 198 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    EQUAL           reduce using rule 198 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    LSPAREN         reduce using rule 198 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    RTEMPLATE       reduce using rule 198 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    COMMA           reduce using rule 198 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    RPAREN          reduce using rule 198 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    LPAREN          reduce using rule 198 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    MULTEQOP        reduce using rule 198 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    DIVEQOP         reduce using rule 198 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    MODEQOP         reduce using rule 198 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    PLUSEQOP        reduce using rule 198 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    MINUSEQOP       reduce using rule 198 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    LSHIFTEQOP      reduce using rule 198 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    RSHIFTEQOP      reduce using rule 198 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    BANDEQOP        reduce using rule 198 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    BOREQOP         reduce using rule 198 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    DOTSTAR         reduce using rule 198 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    ARROWSTAR       reduce using rule 198 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    DIVOP           reduce using rule 198 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    MODOP           reduce using rule 198 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    PLUSOP          reduce using rule 198 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    MINUSOP         reduce using rule 198 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    LSHIFT          reduce using rule 198 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    RSHIFT          reduce using rule 198 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    LTCOMP          reduce using rule 198 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    GTCOMP          reduce using rule 198 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    LTECOMP         reduce using rule 198 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    GTECOMP         reduce using rule 198 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    EQCOMP          reduce using rule 198 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    NEQCOMP         reduce using rule 198 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    XOROP           reduce using rule 198 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    OROP            reduce using rule 198 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    ANDOP           reduce using rule 198 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    QUESMARK        reduce using rule 198 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    RSPAREN         reduce using rule 198 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    RCPAREN         reduce using rule 198 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    COLON           reduce using rule 198 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)


state 141

    (4) control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .

    HASHTAG         reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    CONST           reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    TYPEDEF         reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    ASM             reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    TEMPLATE        reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    CHAR            reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    SHORT           reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    INT             reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    LONG            reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    SIGNED          reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    UNSIGNED        reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    FLOAT           reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    DOUBLE          reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    VOID            reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    STRING          reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    AUTO            reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    TYPE            reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    CLASS           reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    STRUCT          reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)


state 142

    (282) declarator_list -> declarator_list COMMA init_declarator .

    SEMICOLON       reduce using rule 282 (declarator_list -> declarator_list COMMA init_declarator .)
    COMMA           reduce using rule 282 (declarator_list -> declarator_list COMMA init_declarator .)


state 143

    (283) init_declarator -> declarator . initializer
    (284) init_declarator -> declarator .
    (119) declarator -> declarator . LPAREN argument_declaration_list RPAREN
    (120) declarator -> declarator . LSPAREN constant_expression RSPAREN
    (121) declarator -> declarator . LSPAREN RSPAREN
    (285) initializer -> . EQUAL assignment_expression
    (286) initializer -> . EQUAL LCPAREN initializer_list RCPAREN
    (287) initializer -> . EQUAL LCPAREN initializer_list COMMA RCPAREN
    (288) initializer -> . LPAREN expression_list RPAREN

    SEMICOLON       reduce using rule 284 (init_declarator -> declarator .)
    COMMA           reduce using rule 284 (init_declarator -> declarator .)
    LPAREN          shift and go to state 68
    LSPAREN         shift and go to state 69
    EQUAL           shift and go to state 72

    initializer                    shift and go to state 70

state 144

    (104) primary_expression -> LPAREN . expression RPAREN
    (110) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (177) type_name -> . type_specifier_ abstract_declarator
    (178) type_name -> . type_specifier_
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (179) type_specifier_ -> . CONST type_specifier
    (180) type_specifier_ -> . TYPEDEF type_specifier
    (181) type_specifier_ -> . type_specifier
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (182) type_specifier -> . simple_type_name
    (183) type_specifier -> . complex_type_specifier
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (195) complex_type_specifier -> . class_key IDENTIFIER
    (196) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (197) complex_type_specifier -> . TYPE IDENTIFIER
    (198) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (211) class_key -> . CLASS
    (212) class_key -> . STRUCT
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (135) operator_function_name -> . OPERATOR operator_name
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression

    THROW           shift and go to state 224
    CONST           shift and go to state 14
    TYPEDEF         shift and go to state 16
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    TYPE            shift and go to state 34
    THIS            shift and go to state 175
    LPAREN          shift and go to state 144
    CLASS           shift and go to state 35
    STRUCT          shift and go to state 36
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    expression                     shift and go to state 257
    type_name                      shift and go to state 258
    cast_expression                shift and go to state 158
    assignment_expression          shift and go to state 222
    throw_expression               shift and go to state 223
    type_specifier_                shift and go to state 256
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    type_specifier                 shift and go to state 15
    logical_OR_expression          shift and go to state 153
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    simple_type_name               shift and go to state 225
    complex_type_specifier         shift and go to state 21
    logical_AND_expression         shift and go to state 163
    primary_expression             shift and go to state 164
    name                           shift and go to state 166
    class_key                      shift and go to state 57
    inclusive_OR_expression        shift and go to state 173
    literal                        shift and go to state 174
    exclusive_OR_expression        shift and go to state 176
    operator_function_name         shift and go to state 50
    AND_expression                 shift and go to state 180
    equality_expression            shift and go to state 181
    relational_expression          shift and go to state 182
    shift_expression               shift and go to state 183
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186

state 145

    (119) declarator -> declarator LPAREN argument_declaration_list . RPAREN

    RPAREN          shift and go to state 259


state 146

    (288) initializer -> LPAREN expression_list . RPAREN
    (295) expression_list -> expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 260
    COMMA           shift and go to state 261


state 147

    (122) argument_declaration_list -> arg_declaration_list .

    RPAREN          reduce using rule 122 (argument_declaration_list -> arg_declaration_list .)


state 148

    (123) argument_declaration_list -> empty .

    RPAREN          reduce using rule 123 (argument_declaration_list -> empty .)


state 149

    (294) expression_list -> assignment_expression .

    RPAREN          reduce using rule 294 (expression_list -> assignment_expression .)
    COMMA           reduce using rule 294 (expression_list -> assignment_expression .)


state 150

    (124) arg_declaration_list -> argument_declaration .
    (125) arg_declaration_list -> argument_declaration . COMMA arg_declaration_list

    RPAREN          reduce using rule 124 (arg_declaration_list -> argument_declaration .)
    COMMA           shift and go to state 262


state 151

    (51) assignment_expression -> conditional_expression .

    RPAREN          reduce using rule 51 (assignment_expression -> conditional_expression .)
    COMMA           reduce using rule 51 (assignment_expression -> conditional_expression .)
    SEMICOLON       reduce using rule 51 (assignment_expression -> conditional_expression .)
    RCPAREN         reduce using rule 51 (assignment_expression -> conditional_expression .)
    RTEMPLATE       reduce using rule 51 (assignment_expression -> conditional_expression .)
    COLON           reduce using rule 51 (assignment_expression -> conditional_expression .)
    RSPAREN         reduce using rule 51 (assignment_expression -> conditional_expression .)


state 152

    (52) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (109) cast_expression -> unary_expression .
    (53) assignment_operator -> . EQUAL
    (54) assignment_operator -> . MULTEQOP
    (55) assignment_operator -> . DIVEQOP
    (56) assignment_operator -> . MODEQOP
    (57) assignment_operator -> . PLUSEQOP
    (58) assignment_operator -> . MINUSEQOP
    (59) assignment_operator -> . LSHIFTEQOP
    (60) assignment_operator -> . RSHIFTEQOP
    (61) assignment_operator -> . BANDEQOP
    (62) assignment_operator -> . BOREQOP

    DOTSTAR         reduce using rule 109 (cast_expression -> unary_expression .)
    ARROWSTAR       reduce using rule 109 (cast_expression -> unary_expression .)
    MULTOP          reduce using rule 109 (cast_expression -> unary_expression .)
    DIVOP           reduce using rule 109 (cast_expression -> unary_expression .)
    MODOP           reduce using rule 109 (cast_expression -> unary_expression .)
    PLUSOP          reduce using rule 109 (cast_expression -> unary_expression .)
    MINUSOP         reduce using rule 109 (cast_expression -> unary_expression .)
    LSHIFT          reduce using rule 109 (cast_expression -> unary_expression .)
    RSHIFT          reduce using rule 109 (cast_expression -> unary_expression .)
    LTCOMP          reduce using rule 109 (cast_expression -> unary_expression .)
    GTCOMP          reduce using rule 109 (cast_expression -> unary_expression .)
    LTECOMP         reduce using rule 109 (cast_expression -> unary_expression .)
    GTECOMP         reduce using rule 109 (cast_expression -> unary_expression .)
    EQCOMP          reduce using rule 109 (cast_expression -> unary_expression .)
    NEQCOMP         reduce using rule 109 (cast_expression -> unary_expression .)
    BANDOP          reduce using rule 109 (cast_expression -> unary_expression .)
    XOROP           reduce using rule 109 (cast_expression -> unary_expression .)
    OROP            reduce using rule 109 (cast_expression -> unary_expression .)
    ANDOP           reduce using rule 109 (cast_expression -> unary_expression .)
    QUESMARK        reduce using rule 109 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 109 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 109 (cast_expression -> unary_expression .)
    SEMICOLON       reduce using rule 109 (cast_expression -> unary_expression .)
    RCPAREN         reduce using rule 109 (cast_expression -> unary_expression .)
    RTEMPLATE       reduce using rule 109 (cast_expression -> unary_expression .)
    COLON           reduce using rule 109 (cast_expression -> unary_expression .)
    RSPAREN         reduce using rule 109 (cast_expression -> unary_expression .)
    EQUAL           shift and go to state 264
    MULTEQOP        shift and go to state 265
    DIVEQOP         shift and go to state 266
    MODEQOP         shift and go to state 267
    PLUSEQOP        shift and go to state 268
    MINUSEQOP       shift and go to state 269
    LSHIFTEQOP      shift and go to state 270
    RSHIFTEQOP      shift and go to state 271
    BANDEQOP        shift and go to state 272
    BOREQOP         shift and go to state 273

    assignment_operator            shift and go to state 263

state 153

    (13) conditional_expression -> logical_OR_expression .
    (14) conditional_expression -> logical_OR_expression . QUESMARK expression COLON conditional_expression
    (16) logical_OR_expression -> logical_OR_expression . OROP logical_AND_expression

    RPAREN          reduce using rule 13 (conditional_expression -> logical_OR_expression .)
    COMMA           reduce using rule 13 (conditional_expression -> logical_OR_expression .)
    RSPAREN         reduce using rule 13 (conditional_expression -> logical_OR_expression .)
    SEMICOLON       reduce using rule 13 (conditional_expression -> logical_OR_expression .)
    RCPAREN         reduce using rule 13 (conditional_expression -> logical_OR_expression .)
    COLON           reduce using rule 13 (conditional_expression -> logical_OR_expression .)
    RTEMPLATE       reduce using rule 13 (conditional_expression -> logical_OR_expression .)
    QUESMARK        shift and go to state 274
    OROP            shift and go to state 275


state 154

    (63) unary_expression -> postfix_expression .
    (92) postfix_expression -> postfix_expression . LSPAREN expression RSPAREN
    (93) postfix_expression -> postfix_expression . LPAREN expression_list RPAREN
    (94) postfix_expression -> postfix_expression . template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> postfix_expression . LPAREN RPAREN
    (98) postfix_expression -> postfix_expression . DOT name
    (99) postfix_expression -> postfix_expression . ARROW name
    (100) postfix_expression -> postfix_expression . DPLUSOP
    (101) postfix_expression -> postfix_expression . DMINUSOP
    (174) template_class_name -> . LTEMPLATE template_arg_list RTEMPLATE

    EQUAL           reduce using rule 63 (unary_expression -> postfix_expression .)
    MULTEQOP        reduce using rule 63 (unary_expression -> postfix_expression .)
    DIVEQOP         reduce using rule 63 (unary_expression -> postfix_expression .)
    MODEQOP         reduce using rule 63 (unary_expression -> postfix_expression .)
    PLUSEQOP        reduce using rule 63 (unary_expression -> postfix_expression .)
    MINUSEQOP       reduce using rule 63 (unary_expression -> postfix_expression .)
    LSHIFTEQOP      reduce using rule 63 (unary_expression -> postfix_expression .)
    RSHIFTEQOP      reduce using rule 63 (unary_expression -> postfix_expression .)
    BANDEQOP        reduce using rule 63 (unary_expression -> postfix_expression .)
    BOREQOP         reduce using rule 63 (unary_expression -> postfix_expression .)
    DOTSTAR         reduce using rule 63 (unary_expression -> postfix_expression .)
    ARROWSTAR       reduce using rule 63 (unary_expression -> postfix_expression .)
    MULTOP          reduce using rule 63 (unary_expression -> postfix_expression .)
    DIVOP           reduce using rule 63 (unary_expression -> postfix_expression .)
    MODOP           reduce using rule 63 (unary_expression -> postfix_expression .)
    PLUSOP          reduce using rule 63 (unary_expression -> postfix_expression .)
    MINUSOP         reduce using rule 63 (unary_expression -> postfix_expression .)
    LSHIFT          reduce using rule 63 (unary_expression -> postfix_expression .)
    RSHIFT          reduce using rule 63 (unary_expression -> postfix_expression .)
    LTCOMP          reduce using rule 63 (unary_expression -> postfix_expression .)
    GTCOMP          reduce using rule 63 (unary_expression -> postfix_expression .)
    LTECOMP         reduce using rule 63 (unary_expression -> postfix_expression .)
    GTECOMP         reduce using rule 63 (unary_expression -> postfix_expression .)
    EQCOMP          reduce using rule 63 (unary_expression -> postfix_expression .)
    NEQCOMP         reduce using rule 63 (unary_expression -> postfix_expression .)
    BANDOP          reduce using rule 63 (unary_expression -> postfix_expression .)
    XOROP           reduce using rule 63 (unary_expression -> postfix_expression .)
    OROP            reduce using rule 63 (unary_expression -> postfix_expression .)
    ANDOP           reduce using rule 63 (unary_expression -> postfix_expression .)
    QUESMARK        reduce using rule 63 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 63 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 63 (unary_expression -> postfix_expression .)
    RSPAREN         reduce using rule 63 (unary_expression -> postfix_expression .)
    SEMICOLON       reduce using rule 63 (unary_expression -> postfix_expression .)
    RCPAREN         reduce using rule 63 (unary_expression -> postfix_expression .)
    COLON           reduce using rule 63 (unary_expression -> postfix_expression .)
    RTEMPLATE       reduce using rule 63 (unary_expression -> postfix_expression .)
    LSPAREN         shift and go to state 276
    LPAREN          shift and go to state 277
    DOT             shift and go to state 279
    ARROW           shift and go to state 280
    DPLUSOP         shift and go to state 281
    DMINUSOP        shift and go to state 282
    LTEMPLATE       shift and go to state 139

    template_class_name            shift and go to state 278

state 155

    (64) unary_expression -> DPLUSOP . unary_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (135) operator_function_name -> . OPERATOR operator_name

    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    THIS            shift and go to state 175
    LPAREN          shift and go to state 284
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    unary_expression               shift and go to state 283
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    primary_expression             shift and go to state 164
    simple_type_name               shift and go to state 192
    name                           shift and go to state 166
    literal                        shift and go to state 174
    operator_function_name         shift and go to state 50

state 156

    (65) unary_expression -> DMINUSOP . unary_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (135) operator_function_name -> . OPERATOR operator_name

    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    THIS            shift and go to state 175
    LPAREN          shift and go to state 284
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    unary_expression               shift and go to state 285
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    primary_expression             shift and go to state 164
    simple_type_name               shift and go to state 192
    name                           shift and go to state 166
    literal                        shift and go to state 174
    operator_function_name         shift and go to state 50

state 157

    (66) unary_expression -> unary1_operator . cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (135) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 191
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    THIS            shift and go to state 175
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    unary1_operator                shift and go to state 157
    cast_expression                shift and go to state 286
    unary_expression               shift and go to state 190
    postfix_expression             shift and go to state 154
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    primary_expression             shift and go to state 164
    simple_type_name               shift and go to state 192
    name                           shift and go to state 166
    literal                        shift and go to state 174
    operator_function_name         shift and go to state 50

state 158

    (43) pm_expression -> cast_expression .

    DOTSTAR         reduce using rule 43 (pm_expression -> cast_expression .)
    ARROWSTAR       reduce using rule 43 (pm_expression -> cast_expression .)
    MULTOP          reduce using rule 43 (pm_expression -> cast_expression .)
    DIVOP           reduce using rule 43 (pm_expression -> cast_expression .)
    MODOP           reduce using rule 43 (pm_expression -> cast_expression .)
    PLUSOP          reduce using rule 43 (pm_expression -> cast_expression .)
    MINUSOP         reduce using rule 43 (pm_expression -> cast_expression .)
    LSHIFT          reduce using rule 43 (pm_expression -> cast_expression .)
    RSHIFT          reduce using rule 43 (pm_expression -> cast_expression .)
    LTCOMP          reduce using rule 43 (pm_expression -> cast_expression .)
    GTCOMP          reduce using rule 43 (pm_expression -> cast_expression .)
    LTECOMP         reduce using rule 43 (pm_expression -> cast_expression .)
    GTECOMP         reduce using rule 43 (pm_expression -> cast_expression .)
    EQCOMP          reduce using rule 43 (pm_expression -> cast_expression .)
    NEQCOMP         reduce using rule 43 (pm_expression -> cast_expression .)
    BANDOP          reduce using rule 43 (pm_expression -> cast_expression .)
    XOROP           reduce using rule 43 (pm_expression -> cast_expression .)
    OROP            reduce using rule 43 (pm_expression -> cast_expression .)
    ANDOP           reduce using rule 43 (pm_expression -> cast_expression .)
    QUESMARK        reduce using rule 43 (pm_expression -> cast_expression .)
    RPAREN          reduce using rule 43 (pm_expression -> cast_expression .)
    COMMA           reduce using rule 43 (pm_expression -> cast_expression .)
    RSPAREN         reduce using rule 43 (pm_expression -> cast_expression .)
    SEMICOLON       reduce using rule 43 (pm_expression -> cast_expression .)
    RCPAREN         reduce using rule 43 (pm_expression -> cast_expression .)
    COLON           reduce using rule 43 (pm_expression -> cast_expression .)
    RTEMPLATE       reduce using rule 43 (pm_expression -> cast_expression .)


state 159

    (67) unary_expression -> unary2_operator . cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (135) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 191
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    THIS            shift and go to state 175
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    unary2_operator                shift and go to state 159
    cast_expression                shift and go to state 287
    unary_expression               shift and go to state 190
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    primary_expression             shift and go to state 164
    simple_type_name               shift and go to state 192
    name                           shift and go to state 166
    literal                        shift and go to state 174
    operator_function_name         shift and go to state 50

state 160

    (68) unary_expression -> SIZEOF . unary_expression
    (69) unary_expression -> SIZEOF . LPAREN type_name RPAREN
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (135) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 289
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    THIS            shift and go to state 175
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    unary_expression               shift and go to state 288
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    primary_expression             shift and go to state 164
    simple_type_name               shift and go to state 192
    name                           shift and go to state 166
    literal                        shift and go to state 174
    operator_function_name         shift and go to state 50

state 161

    (70) unary_expression -> allocation_expression .

    EQUAL           reduce using rule 70 (unary_expression -> allocation_expression .)
    MULTEQOP        reduce using rule 70 (unary_expression -> allocation_expression .)
    DIVEQOP         reduce using rule 70 (unary_expression -> allocation_expression .)
    MODEQOP         reduce using rule 70 (unary_expression -> allocation_expression .)
    PLUSEQOP        reduce using rule 70 (unary_expression -> allocation_expression .)
    MINUSEQOP       reduce using rule 70 (unary_expression -> allocation_expression .)
    LSHIFTEQOP      reduce using rule 70 (unary_expression -> allocation_expression .)
    RSHIFTEQOP      reduce using rule 70 (unary_expression -> allocation_expression .)
    BANDEQOP        reduce using rule 70 (unary_expression -> allocation_expression .)
    BOREQOP         reduce using rule 70 (unary_expression -> allocation_expression .)
    DOTSTAR         reduce using rule 70 (unary_expression -> allocation_expression .)
    ARROWSTAR       reduce using rule 70 (unary_expression -> allocation_expression .)
    MULTOP          reduce using rule 70 (unary_expression -> allocation_expression .)
    DIVOP           reduce using rule 70 (unary_expression -> allocation_expression .)
    MODOP           reduce using rule 70 (unary_expression -> allocation_expression .)
    PLUSOP          reduce using rule 70 (unary_expression -> allocation_expression .)
    MINUSOP         reduce using rule 70 (unary_expression -> allocation_expression .)
    LSHIFT          reduce using rule 70 (unary_expression -> allocation_expression .)
    RSHIFT          reduce using rule 70 (unary_expression -> allocation_expression .)
    LTCOMP          reduce using rule 70 (unary_expression -> allocation_expression .)
    GTCOMP          reduce using rule 70 (unary_expression -> allocation_expression .)
    LTECOMP         reduce using rule 70 (unary_expression -> allocation_expression .)
    GTECOMP         reduce using rule 70 (unary_expression -> allocation_expression .)
    EQCOMP          reduce using rule 70 (unary_expression -> allocation_expression .)
    NEQCOMP         reduce using rule 70 (unary_expression -> allocation_expression .)
    BANDOP          reduce using rule 70 (unary_expression -> allocation_expression .)
    XOROP           reduce using rule 70 (unary_expression -> allocation_expression .)
    OROP            reduce using rule 70 (unary_expression -> allocation_expression .)
    ANDOP           reduce using rule 70 (unary_expression -> allocation_expression .)
    QUESMARK        reduce using rule 70 (unary_expression -> allocation_expression .)
    RPAREN          reduce using rule 70 (unary_expression -> allocation_expression .)
    COMMA           reduce using rule 70 (unary_expression -> allocation_expression .)
    RSPAREN         reduce using rule 70 (unary_expression -> allocation_expression .)
    SEMICOLON       reduce using rule 70 (unary_expression -> allocation_expression .)
    RCPAREN         reduce using rule 70 (unary_expression -> allocation_expression .)
    COLON           reduce using rule 70 (unary_expression -> allocation_expression .)
    RTEMPLATE       reduce using rule 70 (unary_expression -> allocation_expression .)


state 162

    (71) unary_expression -> deallocation_expression .

    EQUAL           reduce using rule 71 (unary_expression -> deallocation_expression .)
    MULTEQOP        reduce using rule 71 (unary_expression -> deallocation_expression .)
    DIVEQOP         reduce using rule 71 (unary_expression -> deallocation_expression .)
    MODEQOP         reduce using rule 71 (unary_expression -> deallocation_expression .)
    PLUSEQOP        reduce using rule 71 (unary_expression -> deallocation_expression .)
    MINUSEQOP       reduce using rule 71 (unary_expression -> deallocation_expression .)
    LSHIFTEQOP      reduce using rule 71 (unary_expression -> deallocation_expression .)
    RSHIFTEQOP      reduce using rule 71 (unary_expression -> deallocation_expression .)
    BANDEQOP        reduce using rule 71 (unary_expression -> deallocation_expression .)
    BOREQOP         reduce using rule 71 (unary_expression -> deallocation_expression .)
    DOTSTAR         reduce using rule 71 (unary_expression -> deallocation_expression .)
    ARROWSTAR       reduce using rule 71 (unary_expression -> deallocation_expression .)
    MULTOP          reduce using rule 71 (unary_expression -> deallocation_expression .)
    DIVOP           reduce using rule 71 (unary_expression -> deallocation_expression .)
    MODOP           reduce using rule 71 (unary_expression -> deallocation_expression .)
    PLUSOP          reduce using rule 71 (unary_expression -> deallocation_expression .)
    MINUSOP         reduce using rule 71 (unary_expression -> deallocation_expression .)
    LSHIFT          reduce using rule 71 (unary_expression -> deallocation_expression .)
    RSHIFT          reduce using rule 71 (unary_expression -> deallocation_expression .)
    LTCOMP          reduce using rule 71 (unary_expression -> deallocation_expression .)
    GTCOMP          reduce using rule 71 (unary_expression -> deallocation_expression .)
    LTECOMP         reduce using rule 71 (unary_expression -> deallocation_expression .)
    GTECOMP         reduce using rule 71 (unary_expression -> deallocation_expression .)
    EQCOMP          reduce using rule 71 (unary_expression -> deallocation_expression .)
    NEQCOMP         reduce using rule 71 (unary_expression -> deallocation_expression .)
    BANDOP          reduce using rule 71 (unary_expression -> deallocation_expression .)
    XOROP           reduce using rule 71 (unary_expression -> deallocation_expression .)
    OROP            reduce using rule 71 (unary_expression -> deallocation_expression .)
    ANDOP           reduce using rule 71 (unary_expression -> deallocation_expression .)
    QUESMARK        reduce using rule 71 (unary_expression -> deallocation_expression .)
    RPAREN          reduce using rule 71 (unary_expression -> deallocation_expression .)
    COMMA           reduce using rule 71 (unary_expression -> deallocation_expression .)
    RSPAREN         reduce using rule 71 (unary_expression -> deallocation_expression .)
    SEMICOLON       reduce using rule 71 (unary_expression -> deallocation_expression .)
    RCPAREN         reduce using rule 71 (unary_expression -> deallocation_expression .)
    COLON           reduce using rule 71 (unary_expression -> deallocation_expression .)
    RTEMPLATE       reduce using rule 71 (unary_expression -> deallocation_expression .)


state 163

    (15) logical_OR_expression -> logical_AND_expression .
    (18) logical_AND_expression -> logical_AND_expression . ANDOP inclusive_OR_expression

    QUESMARK        reduce using rule 15 (logical_OR_expression -> logical_AND_expression .)
    OROP            reduce using rule 15 (logical_OR_expression -> logical_AND_expression .)
    RPAREN          reduce using rule 15 (logical_OR_expression -> logical_AND_expression .)
    COMMA           reduce using rule 15 (logical_OR_expression -> logical_AND_expression .)
    RSPAREN         reduce using rule 15 (logical_OR_expression -> logical_AND_expression .)
    SEMICOLON       reduce using rule 15 (logical_OR_expression -> logical_AND_expression .)
    RCPAREN         reduce using rule 15 (logical_OR_expression -> logical_AND_expression .)
    COLON           reduce using rule 15 (logical_OR_expression -> logical_AND_expression .)
    RTEMPLATE       reduce using rule 15 (logical_OR_expression -> logical_AND_expression .)
    ANDOP           shift and go to state 290


state 164

    (91) postfix_expression -> primary_expression .

    LSPAREN         reduce using rule 91 (postfix_expression -> primary_expression .)
    LPAREN          reduce using rule 91 (postfix_expression -> primary_expression .)
    DOT             reduce using rule 91 (postfix_expression -> primary_expression .)
    ARROW           reduce using rule 91 (postfix_expression -> primary_expression .)
    DPLUSOP         reduce using rule 91 (postfix_expression -> primary_expression .)
    DMINUSOP        reduce using rule 91 (postfix_expression -> primary_expression .)
    LTEMPLATE       reduce using rule 91 (postfix_expression -> primary_expression .)
    EQUAL           reduce using rule 91 (postfix_expression -> primary_expression .)
    MULTEQOP        reduce using rule 91 (postfix_expression -> primary_expression .)
    DIVEQOP         reduce using rule 91 (postfix_expression -> primary_expression .)
    MODEQOP         reduce using rule 91 (postfix_expression -> primary_expression .)
    PLUSEQOP        reduce using rule 91 (postfix_expression -> primary_expression .)
    MINUSEQOP       reduce using rule 91 (postfix_expression -> primary_expression .)
    LSHIFTEQOP      reduce using rule 91 (postfix_expression -> primary_expression .)
    RSHIFTEQOP      reduce using rule 91 (postfix_expression -> primary_expression .)
    BANDEQOP        reduce using rule 91 (postfix_expression -> primary_expression .)
    BOREQOP         reduce using rule 91 (postfix_expression -> primary_expression .)
    DOTSTAR         reduce using rule 91 (postfix_expression -> primary_expression .)
    ARROWSTAR       reduce using rule 91 (postfix_expression -> primary_expression .)
    MULTOP          reduce using rule 91 (postfix_expression -> primary_expression .)
    DIVOP           reduce using rule 91 (postfix_expression -> primary_expression .)
    MODOP           reduce using rule 91 (postfix_expression -> primary_expression .)
    PLUSOP          reduce using rule 91 (postfix_expression -> primary_expression .)
    MINUSOP         reduce using rule 91 (postfix_expression -> primary_expression .)
    LSHIFT          reduce using rule 91 (postfix_expression -> primary_expression .)
    RSHIFT          reduce using rule 91 (postfix_expression -> primary_expression .)
    LTCOMP          reduce using rule 91 (postfix_expression -> primary_expression .)
    GTCOMP          reduce using rule 91 (postfix_expression -> primary_expression .)
    LTECOMP         reduce using rule 91 (postfix_expression -> primary_expression .)
    GTECOMP         reduce using rule 91 (postfix_expression -> primary_expression .)
    EQCOMP          reduce using rule 91 (postfix_expression -> primary_expression .)
    NEQCOMP         reduce using rule 91 (postfix_expression -> primary_expression .)
    BANDOP          reduce using rule 91 (postfix_expression -> primary_expression .)
    XOROP           reduce using rule 91 (postfix_expression -> primary_expression .)
    OROP            reduce using rule 91 (postfix_expression -> primary_expression .)
    ANDOP           reduce using rule 91 (postfix_expression -> primary_expression .)
    QUESMARK        reduce using rule 91 (postfix_expression -> primary_expression .)
    RPAREN          reduce using rule 91 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 91 (postfix_expression -> primary_expression .)
    RSPAREN         reduce using rule 91 (postfix_expression -> primary_expression .)
    SEMICOLON       reduce using rule 91 (postfix_expression -> primary_expression .)
    RCPAREN         reduce using rule 91 (postfix_expression -> primary_expression .)
    COLON           reduce using rule 91 (postfix_expression -> primary_expression .)
    RTEMPLATE       reduce using rule 91 (postfix_expression -> primary_expression .)


state 165

    (96) postfix_expression -> simple_type_name . LPAREN expression_list RPAREN
    (97) postfix_expression -> simple_type_name . LPAREN RPAREN
    (182) type_specifier -> simple_type_name .

    LPAREN          shift and go to state 291
    EQUAL           reduce using rule 182 (type_specifier -> simple_type_name .)
    LSPAREN         reduce using rule 182 (type_specifier -> simple_type_name .)
    IDENTIFIER      reduce using rule 182 (type_specifier -> simple_type_name .)
    DOUBLEBNOP      reduce using rule 182 (type_specifier -> simple_type_name .)
    MULTOP          reduce using rule 182 (type_specifier -> simple_type_name .)
    BANDOP          reduce using rule 182 (type_specifier -> simple_type_name .)
    OPERATOR        reduce using rule 182 (type_specifier -> simple_type_name .)
    COMMA           reduce using rule 182 (type_specifier -> simple_type_name .)
    RPAREN          reduce using rule 182 (type_specifier -> simple_type_name .)


state 166

    (105) primary_expression -> name .

    LSPAREN         reduce using rule 105 (primary_expression -> name .)
    LPAREN          reduce using rule 105 (primary_expression -> name .)
    DOT             reduce using rule 105 (primary_expression -> name .)
    ARROW           reduce using rule 105 (primary_expression -> name .)
    DPLUSOP         reduce using rule 105 (primary_expression -> name .)
    DMINUSOP        reduce using rule 105 (primary_expression -> name .)
    LTEMPLATE       reduce using rule 105 (primary_expression -> name .)
    EQUAL           reduce using rule 105 (primary_expression -> name .)
    MULTEQOP        reduce using rule 105 (primary_expression -> name .)
    DIVEQOP         reduce using rule 105 (primary_expression -> name .)
    MODEQOP         reduce using rule 105 (primary_expression -> name .)
    PLUSEQOP        reduce using rule 105 (primary_expression -> name .)
    MINUSEQOP       reduce using rule 105 (primary_expression -> name .)
    LSHIFTEQOP      reduce using rule 105 (primary_expression -> name .)
    RSHIFTEQOP      reduce using rule 105 (primary_expression -> name .)
    BANDEQOP        reduce using rule 105 (primary_expression -> name .)
    BOREQOP         reduce using rule 105 (primary_expression -> name .)
    DOTSTAR         reduce using rule 105 (primary_expression -> name .)
    ARROWSTAR       reduce using rule 105 (primary_expression -> name .)
    MULTOP          reduce using rule 105 (primary_expression -> name .)
    DIVOP           reduce using rule 105 (primary_expression -> name .)
    MODOP           reduce using rule 105 (primary_expression -> name .)
    PLUSOP          reduce using rule 105 (primary_expression -> name .)
    MINUSOP         reduce using rule 105 (primary_expression -> name .)
    LSHIFT          reduce using rule 105 (primary_expression -> name .)
    RSHIFT          reduce using rule 105 (primary_expression -> name .)
    LTCOMP          reduce using rule 105 (primary_expression -> name .)
    GTCOMP          reduce using rule 105 (primary_expression -> name .)
    LTECOMP         reduce using rule 105 (primary_expression -> name .)
    GTECOMP         reduce using rule 105 (primary_expression -> name .)
    EQCOMP          reduce using rule 105 (primary_expression -> name .)
    NEQCOMP         reduce using rule 105 (primary_expression -> name .)
    BANDOP          reduce using rule 105 (primary_expression -> name .)
    XOROP           reduce using rule 105 (primary_expression -> name .)
    OROP            reduce using rule 105 (primary_expression -> name .)
    ANDOP           reduce using rule 105 (primary_expression -> name .)
    QUESMARK        reduce using rule 105 (primary_expression -> name .)
    RPAREN          reduce using rule 105 (primary_expression -> name .)
    COMMA           reduce using rule 105 (primary_expression -> name .)
    RSPAREN         reduce using rule 105 (primary_expression -> name .)
    SEMICOLON       reduce using rule 105 (primary_expression -> name .)
    RCPAREN         reduce using rule 105 (primary_expression -> name .)
    COLON           reduce using rule 105 (primary_expression -> name .)
    RTEMPLATE       reduce using rule 105 (primary_expression -> name .)


state 167

    (85) unary1_operator -> PLUSOP .

    LPAREN          reduce using rule 85 (unary1_operator -> PLUSOP .)
    DPLUSOP         reduce using rule 85 (unary1_operator -> PLUSOP .)
    DMINUSOP        reduce using rule 85 (unary1_operator -> PLUSOP .)
    SIZEOF          reduce using rule 85 (unary1_operator -> PLUSOP .)
    PLUSOP          reduce using rule 85 (unary1_operator -> PLUSOP .)
    MINUSOP         reduce using rule 85 (unary1_operator -> PLUSOP .)
    NOTSYM          reduce using rule 85 (unary1_operator -> PLUSOP .)
    BNOP            reduce using rule 85 (unary1_operator -> PLUSOP .)
    MULTOP          reduce using rule 85 (unary1_operator -> PLUSOP .)
    BANDOP          reduce using rule 85 (unary1_operator -> PLUSOP .)
    NEW             reduce using rule 85 (unary1_operator -> PLUSOP .)
    DELETE          reduce using rule 85 (unary1_operator -> PLUSOP .)
    THIS            reduce using rule 85 (unary1_operator -> PLUSOP .)
    CHAR            reduce using rule 85 (unary1_operator -> PLUSOP .)
    SHORT           reduce using rule 85 (unary1_operator -> PLUSOP .)
    INT             reduce using rule 85 (unary1_operator -> PLUSOP .)
    LONG            reduce using rule 85 (unary1_operator -> PLUSOP .)
    SIGNED          reduce using rule 85 (unary1_operator -> PLUSOP .)
    UNSIGNED        reduce using rule 85 (unary1_operator -> PLUSOP .)
    FLOAT           reduce using rule 85 (unary1_operator -> PLUSOP .)
    DOUBLE          reduce using rule 85 (unary1_operator -> PLUSOP .)
    VOID            reduce using rule 85 (unary1_operator -> PLUSOP .)
    STRING          reduce using rule 85 (unary1_operator -> PLUSOP .)
    AUTO            reduce using rule 85 (unary1_operator -> PLUSOP .)
    NUMBER          reduce using rule 85 (unary1_operator -> PLUSOP .)
    STRING_L        reduce using rule 85 (unary1_operator -> PLUSOP .)
    SCHAR           reduce using rule 85 (unary1_operator -> PLUSOP .)
    IDENTIFIER      reduce using rule 85 (unary1_operator -> PLUSOP .)
    DOUBLEBNOP      reduce using rule 85 (unary1_operator -> PLUSOP .)
    OPERATOR        reduce using rule 85 (unary1_operator -> PLUSOP .)


state 168

    (86) unary1_operator -> MINUSOP .

    LPAREN          reduce using rule 86 (unary1_operator -> MINUSOP .)
    DPLUSOP         reduce using rule 86 (unary1_operator -> MINUSOP .)
    DMINUSOP        reduce using rule 86 (unary1_operator -> MINUSOP .)
    SIZEOF          reduce using rule 86 (unary1_operator -> MINUSOP .)
    PLUSOP          reduce using rule 86 (unary1_operator -> MINUSOP .)
    MINUSOP         reduce using rule 86 (unary1_operator -> MINUSOP .)
    NOTSYM          reduce using rule 86 (unary1_operator -> MINUSOP .)
    BNOP            reduce using rule 86 (unary1_operator -> MINUSOP .)
    MULTOP          reduce using rule 86 (unary1_operator -> MINUSOP .)
    BANDOP          reduce using rule 86 (unary1_operator -> MINUSOP .)
    NEW             reduce using rule 86 (unary1_operator -> MINUSOP .)
    DELETE          reduce using rule 86 (unary1_operator -> MINUSOP .)
    THIS            reduce using rule 86 (unary1_operator -> MINUSOP .)
    CHAR            reduce using rule 86 (unary1_operator -> MINUSOP .)
    SHORT           reduce using rule 86 (unary1_operator -> MINUSOP .)
    INT             reduce using rule 86 (unary1_operator -> MINUSOP .)
    LONG            reduce using rule 86 (unary1_operator -> MINUSOP .)
    SIGNED          reduce using rule 86 (unary1_operator -> MINUSOP .)
    UNSIGNED        reduce using rule 86 (unary1_operator -> MINUSOP .)
    FLOAT           reduce using rule 86 (unary1_operator -> MINUSOP .)
    DOUBLE          reduce using rule 86 (unary1_operator -> MINUSOP .)
    VOID            reduce using rule 86 (unary1_operator -> MINUSOP .)
    STRING          reduce using rule 86 (unary1_operator -> MINUSOP .)
    AUTO            reduce using rule 86 (unary1_operator -> MINUSOP .)
    NUMBER          reduce using rule 86 (unary1_operator -> MINUSOP .)
    STRING_L        reduce using rule 86 (unary1_operator -> MINUSOP .)
    SCHAR           reduce using rule 86 (unary1_operator -> MINUSOP .)
    IDENTIFIER      reduce using rule 86 (unary1_operator -> MINUSOP .)
    DOUBLEBNOP      reduce using rule 86 (unary1_operator -> MINUSOP .)
    OPERATOR        reduce using rule 86 (unary1_operator -> MINUSOP .)


state 169

    (87) unary1_operator -> NOTSYM .

    LPAREN          reduce using rule 87 (unary1_operator -> NOTSYM .)
    DPLUSOP         reduce using rule 87 (unary1_operator -> NOTSYM .)
    DMINUSOP        reduce using rule 87 (unary1_operator -> NOTSYM .)
    SIZEOF          reduce using rule 87 (unary1_operator -> NOTSYM .)
    PLUSOP          reduce using rule 87 (unary1_operator -> NOTSYM .)
    MINUSOP         reduce using rule 87 (unary1_operator -> NOTSYM .)
    NOTSYM          reduce using rule 87 (unary1_operator -> NOTSYM .)
    BNOP            reduce using rule 87 (unary1_operator -> NOTSYM .)
    MULTOP          reduce using rule 87 (unary1_operator -> NOTSYM .)
    BANDOP          reduce using rule 87 (unary1_operator -> NOTSYM .)
    NEW             reduce using rule 87 (unary1_operator -> NOTSYM .)
    DELETE          reduce using rule 87 (unary1_operator -> NOTSYM .)
    THIS            reduce using rule 87 (unary1_operator -> NOTSYM .)
    CHAR            reduce using rule 87 (unary1_operator -> NOTSYM .)
    SHORT           reduce using rule 87 (unary1_operator -> NOTSYM .)
    INT             reduce using rule 87 (unary1_operator -> NOTSYM .)
    LONG            reduce using rule 87 (unary1_operator -> NOTSYM .)
    SIGNED          reduce using rule 87 (unary1_operator -> NOTSYM .)
    UNSIGNED        reduce using rule 87 (unary1_operator -> NOTSYM .)
    FLOAT           reduce using rule 87 (unary1_operator -> NOTSYM .)
    DOUBLE          reduce using rule 87 (unary1_operator -> NOTSYM .)
    VOID            reduce using rule 87 (unary1_operator -> NOTSYM .)
    STRING          reduce using rule 87 (unary1_operator -> NOTSYM .)
    AUTO            reduce using rule 87 (unary1_operator -> NOTSYM .)
    NUMBER          reduce using rule 87 (unary1_operator -> NOTSYM .)
    STRING_L        reduce using rule 87 (unary1_operator -> NOTSYM .)
    SCHAR           reduce using rule 87 (unary1_operator -> NOTSYM .)
    IDENTIFIER      reduce using rule 87 (unary1_operator -> NOTSYM .)
    DOUBLEBNOP      reduce using rule 87 (unary1_operator -> NOTSYM .)
    OPERATOR        reduce using rule 87 (unary1_operator -> NOTSYM .)


state 170

    (88) unary1_operator -> BNOP .

    LPAREN          reduce using rule 88 (unary1_operator -> BNOP .)
    DPLUSOP         reduce using rule 88 (unary1_operator -> BNOP .)
    DMINUSOP        reduce using rule 88 (unary1_operator -> BNOP .)
    SIZEOF          reduce using rule 88 (unary1_operator -> BNOP .)
    PLUSOP          reduce using rule 88 (unary1_operator -> BNOP .)
    MINUSOP         reduce using rule 88 (unary1_operator -> BNOP .)
    NOTSYM          reduce using rule 88 (unary1_operator -> BNOP .)
    BNOP            reduce using rule 88 (unary1_operator -> BNOP .)
    MULTOP          reduce using rule 88 (unary1_operator -> BNOP .)
    BANDOP          reduce using rule 88 (unary1_operator -> BNOP .)
    NEW             reduce using rule 88 (unary1_operator -> BNOP .)
    DELETE          reduce using rule 88 (unary1_operator -> BNOP .)
    THIS            reduce using rule 88 (unary1_operator -> BNOP .)
    CHAR            reduce using rule 88 (unary1_operator -> BNOP .)
    SHORT           reduce using rule 88 (unary1_operator -> BNOP .)
    INT             reduce using rule 88 (unary1_operator -> BNOP .)
    LONG            reduce using rule 88 (unary1_operator -> BNOP .)
    SIGNED          reduce using rule 88 (unary1_operator -> BNOP .)
    UNSIGNED        reduce using rule 88 (unary1_operator -> BNOP .)
    FLOAT           reduce using rule 88 (unary1_operator -> BNOP .)
    DOUBLE          reduce using rule 88 (unary1_operator -> BNOP .)
    VOID            reduce using rule 88 (unary1_operator -> BNOP .)
    STRING          reduce using rule 88 (unary1_operator -> BNOP .)
    AUTO            reduce using rule 88 (unary1_operator -> BNOP .)
    NUMBER          reduce using rule 88 (unary1_operator -> BNOP .)
    STRING_L        reduce using rule 88 (unary1_operator -> BNOP .)
    SCHAR           reduce using rule 88 (unary1_operator -> BNOP .)
    IDENTIFIER      reduce using rule 88 (unary1_operator -> BNOP .)
    DOUBLEBNOP      reduce using rule 88 (unary1_operator -> BNOP .)
    OPERATOR        reduce using rule 88 (unary1_operator -> BNOP .)


state 171

    (73) allocation_expression -> NEW . new_type_name new_initializer
    (74) allocation_expression -> NEW . new_type_name
    (75) allocation_expression -> NEW . LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> NEW . LPAREN type_name RPAREN
    (77) new_type_name -> . type_specifier_ new_declarator
    (78) new_type_name -> . type_specifier_
    (179) type_specifier_ -> . CONST type_specifier
    (180) type_specifier_ -> . TYPEDEF type_specifier
    (181) type_specifier_ -> . type_specifier
    (182) type_specifier -> . simple_type_name
    (183) type_specifier -> . complex_type_specifier
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (195) complex_type_specifier -> . class_key IDENTIFIER
    (196) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (197) complex_type_specifier -> . TYPE IDENTIFIER
    (198) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (211) class_key -> . CLASS
    (212) class_key -> . STRUCT

    LPAREN          shift and go to state 293
    CONST           shift and go to state 14
    TYPEDEF         shift and go to state 16
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    TYPE            shift and go to state 34
    CLASS           shift and go to state 35
    STRUCT          shift and go to state 36

    new_type_name                  shift and go to state 292
    type_specifier_                shift and go to state 294
    type_specifier                 shift and go to state 15
    simple_type_name               shift and go to state 20
    complex_type_specifier         shift and go to state 21
    class_key                      shift and go to state 57

state 172

    (72) deallocation_expression -> DELETE . cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (135) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 191
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    THIS            shift and go to state 175
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    cast_expression                shift and go to state 295
    unary_expression               shift and go to state 190
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    primary_expression             shift and go to state 164
    simple_type_name               shift and go to state 192
    name                           shift and go to state 166
    literal                        shift and go to state 174
    operator_function_name         shift and go to state 50

state 173

    (17) logical_AND_expression -> inclusive_OR_expression .
    (20) inclusive_OR_expression -> inclusive_OR_expression . OROP exclusive_OR_expression

    ANDOP           reduce using rule 17 (logical_AND_expression -> inclusive_OR_expression .)
    QUESMARK        reduce using rule 17 (logical_AND_expression -> inclusive_OR_expression .)
    OROP            reduce using rule 17 (logical_AND_expression -> inclusive_OR_expression .)
    RPAREN          reduce using rule 17 (logical_AND_expression -> inclusive_OR_expression .)
    COMMA           reduce using rule 17 (logical_AND_expression -> inclusive_OR_expression .)
    RSPAREN         reduce using rule 17 (logical_AND_expression -> inclusive_OR_expression .)
    SEMICOLON       reduce using rule 17 (logical_AND_expression -> inclusive_OR_expression .)
    RCPAREN         reduce using rule 17 (logical_AND_expression -> inclusive_OR_expression .)
    COLON           reduce using rule 17 (logical_AND_expression -> inclusive_OR_expression .)
    RTEMPLATE       reduce using rule 17 (logical_AND_expression -> inclusive_OR_expression .)

  ! OROP            [ shift and go to state 296 ]


state 174

    (102) primary_expression -> literal .

    LSPAREN         reduce using rule 102 (primary_expression -> literal .)
    LPAREN          reduce using rule 102 (primary_expression -> literal .)
    DOT             reduce using rule 102 (primary_expression -> literal .)
    ARROW           reduce using rule 102 (primary_expression -> literal .)
    DPLUSOP         reduce using rule 102 (primary_expression -> literal .)
    DMINUSOP        reduce using rule 102 (primary_expression -> literal .)
    LTEMPLATE       reduce using rule 102 (primary_expression -> literal .)
    EQUAL           reduce using rule 102 (primary_expression -> literal .)
    MULTEQOP        reduce using rule 102 (primary_expression -> literal .)
    DIVEQOP         reduce using rule 102 (primary_expression -> literal .)
    MODEQOP         reduce using rule 102 (primary_expression -> literal .)
    PLUSEQOP        reduce using rule 102 (primary_expression -> literal .)
    MINUSEQOP       reduce using rule 102 (primary_expression -> literal .)
    LSHIFTEQOP      reduce using rule 102 (primary_expression -> literal .)
    RSHIFTEQOP      reduce using rule 102 (primary_expression -> literal .)
    BANDEQOP        reduce using rule 102 (primary_expression -> literal .)
    BOREQOP         reduce using rule 102 (primary_expression -> literal .)
    DOTSTAR         reduce using rule 102 (primary_expression -> literal .)
    ARROWSTAR       reduce using rule 102 (primary_expression -> literal .)
    MULTOP          reduce using rule 102 (primary_expression -> literal .)
    DIVOP           reduce using rule 102 (primary_expression -> literal .)
    MODOP           reduce using rule 102 (primary_expression -> literal .)
    PLUSOP          reduce using rule 102 (primary_expression -> literal .)
    MINUSOP         reduce using rule 102 (primary_expression -> literal .)
    LSHIFT          reduce using rule 102 (primary_expression -> literal .)
    RSHIFT          reduce using rule 102 (primary_expression -> literal .)
    LTCOMP          reduce using rule 102 (primary_expression -> literal .)
    GTCOMP          reduce using rule 102 (primary_expression -> literal .)
    LTECOMP         reduce using rule 102 (primary_expression -> literal .)
    GTECOMP         reduce using rule 102 (primary_expression -> literal .)
    EQCOMP          reduce using rule 102 (primary_expression -> literal .)
    NEQCOMP         reduce using rule 102 (primary_expression -> literal .)
    BANDOP          reduce using rule 102 (primary_expression -> literal .)
    XOROP           reduce using rule 102 (primary_expression -> literal .)
    OROP            reduce using rule 102 (primary_expression -> literal .)
    ANDOP           reduce using rule 102 (primary_expression -> literal .)
    QUESMARK        reduce using rule 102 (primary_expression -> literal .)
    RPAREN          reduce using rule 102 (primary_expression -> literal .)
    COMMA           reduce using rule 102 (primary_expression -> literal .)
    RSPAREN         reduce using rule 102 (primary_expression -> literal .)
    SEMICOLON       reduce using rule 102 (primary_expression -> literal .)
    RCPAREN         reduce using rule 102 (primary_expression -> literal .)
    COLON           reduce using rule 102 (primary_expression -> literal .)
    RTEMPLATE       reduce using rule 102 (primary_expression -> literal .)


state 175

    (103) primary_expression -> THIS .

    LSPAREN         reduce using rule 103 (primary_expression -> THIS .)
    LPAREN          reduce using rule 103 (primary_expression -> THIS .)
    DOT             reduce using rule 103 (primary_expression -> THIS .)
    ARROW           reduce using rule 103 (primary_expression -> THIS .)
    DPLUSOP         reduce using rule 103 (primary_expression -> THIS .)
    DMINUSOP        reduce using rule 103 (primary_expression -> THIS .)
    LTEMPLATE       reduce using rule 103 (primary_expression -> THIS .)
    EQUAL           reduce using rule 103 (primary_expression -> THIS .)
    MULTEQOP        reduce using rule 103 (primary_expression -> THIS .)
    DIVEQOP         reduce using rule 103 (primary_expression -> THIS .)
    MODEQOP         reduce using rule 103 (primary_expression -> THIS .)
    PLUSEQOP        reduce using rule 103 (primary_expression -> THIS .)
    MINUSEQOP       reduce using rule 103 (primary_expression -> THIS .)
    LSHIFTEQOP      reduce using rule 103 (primary_expression -> THIS .)
    RSHIFTEQOP      reduce using rule 103 (primary_expression -> THIS .)
    BANDEQOP        reduce using rule 103 (primary_expression -> THIS .)
    BOREQOP         reduce using rule 103 (primary_expression -> THIS .)
    DOTSTAR         reduce using rule 103 (primary_expression -> THIS .)
    ARROWSTAR       reduce using rule 103 (primary_expression -> THIS .)
    MULTOP          reduce using rule 103 (primary_expression -> THIS .)
    DIVOP           reduce using rule 103 (primary_expression -> THIS .)
    MODOP           reduce using rule 103 (primary_expression -> THIS .)
    PLUSOP          reduce using rule 103 (primary_expression -> THIS .)
    MINUSOP         reduce using rule 103 (primary_expression -> THIS .)
    LSHIFT          reduce using rule 103 (primary_expression -> THIS .)
    RSHIFT          reduce using rule 103 (primary_expression -> THIS .)
    LTCOMP          reduce using rule 103 (primary_expression -> THIS .)
    GTCOMP          reduce using rule 103 (primary_expression -> THIS .)
    LTECOMP         reduce using rule 103 (primary_expression -> THIS .)
    GTECOMP         reduce using rule 103 (primary_expression -> THIS .)
    EQCOMP          reduce using rule 103 (primary_expression -> THIS .)
    NEQCOMP         reduce using rule 103 (primary_expression -> THIS .)
    BANDOP          reduce using rule 103 (primary_expression -> THIS .)
    XOROP           reduce using rule 103 (primary_expression -> THIS .)
    OROP            reduce using rule 103 (primary_expression -> THIS .)
    ANDOP           reduce using rule 103 (primary_expression -> THIS .)
    QUESMARK        reduce using rule 103 (primary_expression -> THIS .)
    RPAREN          reduce using rule 103 (primary_expression -> THIS .)
    COMMA           reduce using rule 103 (primary_expression -> THIS .)
    RSPAREN         reduce using rule 103 (primary_expression -> THIS .)
    SEMICOLON       reduce using rule 103 (primary_expression -> THIS .)
    RCPAREN         reduce using rule 103 (primary_expression -> THIS .)
    COLON           reduce using rule 103 (primary_expression -> THIS .)
    RTEMPLATE       reduce using rule 103 (primary_expression -> THIS .)


state 176

    (19) inclusive_OR_expression -> exclusive_OR_expression .
    (22) exclusive_OR_expression -> exclusive_OR_expression . XOROP AND_expression

    OROP            reduce using rule 19 (inclusive_OR_expression -> exclusive_OR_expression .)
    ANDOP           reduce using rule 19 (inclusive_OR_expression -> exclusive_OR_expression .)
    QUESMARK        reduce using rule 19 (inclusive_OR_expression -> exclusive_OR_expression .)
    RPAREN          reduce using rule 19 (inclusive_OR_expression -> exclusive_OR_expression .)
    COMMA           reduce using rule 19 (inclusive_OR_expression -> exclusive_OR_expression .)
    RSPAREN         reduce using rule 19 (inclusive_OR_expression -> exclusive_OR_expression .)
    SEMICOLON       reduce using rule 19 (inclusive_OR_expression -> exclusive_OR_expression .)
    RCPAREN         reduce using rule 19 (inclusive_OR_expression -> exclusive_OR_expression .)
    COLON           reduce using rule 19 (inclusive_OR_expression -> exclusive_OR_expression .)
    RTEMPLATE       reduce using rule 19 (inclusive_OR_expression -> exclusive_OR_expression .)
    XOROP           shift and go to state 297


state 177

    (106) literal -> NUMBER .

    LSPAREN         reduce using rule 106 (literal -> NUMBER .)
    LPAREN          reduce using rule 106 (literal -> NUMBER .)
    DOT             reduce using rule 106 (literal -> NUMBER .)
    ARROW           reduce using rule 106 (literal -> NUMBER .)
    DPLUSOP         reduce using rule 106 (literal -> NUMBER .)
    DMINUSOP        reduce using rule 106 (literal -> NUMBER .)
    LTEMPLATE       reduce using rule 106 (literal -> NUMBER .)
    EQUAL           reduce using rule 106 (literal -> NUMBER .)
    MULTEQOP        reduce using rule 106 (literal -> NUMBER .)
    DIVEQOP         reduce using rule 106 (literal -> NUMBER .)
    MODEQOP         reduce using rule 106 (literal -> NUMBER .)
    PLUSEQOP        reduce using rule 106 (literal -> NUMBER .)
    MINUSEQOP       reduce using rule 106 (literal -> NUMBER .)
    LSHIFTEQOP      reduce using rule 106 (literal -> NUMBER .)
    RSHIFTEQOP      reduce using rule 106 (literal -> NUMBER .)
    BANDEQOP        reduce using rule 106 (literal -> NUMBER .)
    BOREQOP         reduce using rule 106 (literal -> NUMBER .)
    DOTSTAR         reduce using rule 106 (literal -> NUMBER .)
    ARROWSTAR       reduce using rule 106 (literal -> NUMBER .)
    MULTOP          reduce using rule 106 (literal -> NUMBER .)
    DIVOP           reduce using rule 106 (literal -> NUMBER .)
    MODOP           reduce using rule 106 (literal -> NUMBER .)
    PLUSOP          reduce using rule 106 (literal -> NUMBER .)
    MINUSOP         reduce using rule 106 (literal -> NUMBER .)
    LSHIFT          reduce using rule 106 (literal -> NUMBER .)
    RSHIFT          reduce using rule 106 (literal -> NUMBER .)
    LTCOMP          reduce using rule 106 (literal -> NUMBER .)
    GTCOMP          reduce using rule 106 (literal -> NUMBER .)
    LTECOMP         reduce using rule 106 (literal -> NUMBER .)
    GTECOMP         reduce using rule 106 (literal -> NUMBER .)
    EQCOMP          reduce using rule 106 (literal -> NUMBER .)
    NEQCOMP         reduce using rule 106 (literal -> NUMBER .)
    BANDOP          reduce using rule 106 (literal -> NUMBER .)
    XOROP           reduce using rule 106 (literal -> NUMBER .)
    OROP            reduce using rule 106 (literal -> NUMBER .)
    ANDOP           reduce using rule 106 (literal -> NUMBER .)
    QUESMARK        reduce using rule 106 (literal -> NUMBER .)
    RPAREN          reduce using rule 106 (literal -> NUMBER .)
    COMMA           reduce using rule 106 (literal -> NUMBER .)
    RSPAREN         reduce using rule 106 (literal -> NUMBER .)
    SEMICOLON       reduce using rule 106 (literal -> NUMBER .)
    RCPAREN         reduce using rule 106 (literal -> NUMBER .)
    COLON           reduce using rule 106 (literal -> NUMBER .)
    RTEMPLATE       reduce using rule 106 (literal -> NUMBER .)


state 178

    (107) literal -> STRING_L .

    LSPAREN         reduce using rule 107 (literal -> STRING_L .)
    LPAREN          reduce using rule 107 (literal -> STRING_L .)
    DOT             reduce using rule 107 (literal -> STRING_L .)
    ARROW           reduce using rule 107 (literal -> STRING_L .)
    DPLUSOP         reduce using rule 107 (literal -> STRING_L .)
    DMINUSOP        reduce using rule 107 (literal -> STRING_L .)
    LTEMPLATE       reduce using rule 107 (literal -> STRING_L .)
    EQUAL           reduce using rule 107 (literal -> STRING_L .)
    MULTEQOP        reduce using rule 107 (literal -> STRING_L .)
    DIVEQOP         reduce using rule 107 (literal -> STRING_L .)
    MODEQOP         reduce using rule 107 (literal -> STRING_L .)
    PLUSEQOP        reduce using rule 107 (literal -> STRING_L .)
    MINUSEQOP       reduce using rule 107 (literal -> STRING_L .)
    LSHIFTEQOP      reduce using rule 107 (literal -> STRING_L .)
    RSHIFTEQOP      reduce using rule 107 (literal -> STRING_L .)
    BANDEQOP        reduce using rule 107 (literal -> STRING_L .)
    BOREQOP         reduce using rule 107 (literal -> STRING_L .)
    DOTSTAR         reduce using rule 107 (literal -> STRING_L .)
    ARROWSTAR       reduce using rule 107 (literal -> STRING_L .)
    MULTOP          reduce using rule 107 (literal -> STRING_L .)
    DIVOP           reduce using rule 107 (literal -> STRING_L .)
    MODOP           reduce using rule 107 (literal -> STRING_L .)
    PLUSOP          reduce using rule 107 (literal -> STRING_L .)
    MINUSOP         reduce using rule 107 (literal -> STRING_L .)
    LSHIFT          reduce using rule 107 (literal -> STRING_L .)
    RSHIFT          reduce using rule 107 (literal -> STRING_L .)
    LTCOMP          reduce using rule 107 (literal -> STRING_L .)
    GTCOMP          reduce using rule 107 (literal -> STRING_L .)
    LTECOMP         reduce using rule 107 (literal -> STRING_L .)
    GTECOMP         reduce using rule 107 (literal -> STRING_L .)
    EQCOMP          reduce using rule 107 (literal -> STRING_L .)
    NEQCOMP         reduce using rule 107 (literal -> STRING_L .)
    BANDOP          reduce using rule 107 (literal -> STRING_L .)
    XOROP           reduce using rule 107 (literal -> STRING_L .)
    OROP            reduce using rule 107 (literal -> STRING_L .)
    ANDOP           reduce using rule 107 (literal -> STRING_L .)
    QUESMARK        reduce using rule 107 (literal -> STRING_L .)
    RPAREN          reduce using rule 107 (literal -> STRING_L .)
    COMMA           reduce using rule 107 (literal -> STRING_L .)
    RSPAREN         reduce using rule 107 (literal -> STRING_L .)
    SEMICOLON       reduce using rule 107 (literal -> STRING_L .)
    RCPAREN         reduce using rule 107 (literal -> STRING_L .)
    COLON           reduce using rule 107 (literal -> STRING_L .)
    RTEMPLATE       reduce using rule 107 (literal -> STRING_L .)


state 179

    (108) literal -> SCHAR .

    LSPAREN         reduce using rule 108 (literal -> SCHAR .)
    LPAREN          reduce using rule 108 (literal -> SCHAR .)
    DOT             reduce using rule 108 (literal -> SCHAR .)
    ARROW           reduce using rule 108 (literal -> SCHAR .)
    DPLUSOP         reduce using rule 108 (literal -> SCHAR .)
    DMINUSOP        reduce using rule 108 (literal -> SCHAR .)
    LTEMPLATE       reduce using rule 108 (literal -> SCHAR .)
    EQUAL           reduce using rule 108 (literal -> SCHAR .)
    MULTEQOP        reduce using rule 108 (literal -> SCHAR .)
    DIVEQOP         reduce using rule 108 (literal -> SCHAR .)
    MODEQOP         reduce using rule 108 (literal -> SCHAR .)
    PLUSEQOP        reduce using rule 108 (literal -> SCHAR .)
    MINUSEQOP       reduce using rule 108 (literal -> SCHAR .)
    LSHIFTEQOP      reduce using rule 108 (literal -> SCHAR .)
    RSHIFTEQOP      reduce using rule 108 (literal -> SCHAR .)
    BANDEQOP        reduce using rule 108 (literal -> SCHAR .)
    BOREQOP         reduce using rule 108 (literal -> SCHAR .)
    DOTSTAR         reduce using rule 108 (literal -> SCHAR .)
    ARROWSTAR       reduce using rule 108 (literal -> SCHAR .)
    MULTOP          reduce using rule 108 (literal -> SCHAR .)
    DIVOP           reduce using rule 108 (literal -> SCHAR .)
    MODOP           reduce using rule 108 (literal -> SCHAR .)
    PLUSOP          reduce using rule 108 (literal -> SCHAR .)
    MINUSOP         reduce using rule 108 (literal -> SCHAR .)
    LSHIFT          reduce using rule 108 (literal -> SCHAR .)
    RSHIFT          reduce using rule 108 (literal -> SCHAR .)
    LTCOMP          reduce using rule 108 (literal -> SCHAR .)
    GTCOMP          reduce using rule 108 (literal -> SCHAR .)
    LTECOMP         reduce using rule 108 (literal -> SCHAR .)
    GTECOMP         reduce using rule 108 (literal -> SCHAR .)
    EQCOMP          reduce using rule 108 (literal -> SCHAR .)
    NEQCOMP         reduce using rule 108 (literal -> SCHAR .)
    BANDOP          reduce using rule 108 (literal -> SCHAR .)
    XOROP           reduce using rule 108 (literal -> SCHAR .)
    OROP            reduce using rule 108 (literal -> SCHAR .)
    ANDOP           reduce using rule 108 (literal -> SCHAR .)
    QUESMARK        reduce using rule 108 (literal -> SCHAR .)
    RPAREN          reduce using rule 108 (literal -> SCHAR .)
    COMMA           reduce using rule 108 (literal -> SCHAR .)
    RSPAREN         reduce using rule 108 (literal -> SCHAR .)
    SEMICOLON       reduce using rule 108 (literal -> SCHAR .)
    RCPAREN         reduce using rule 108 (literal -> SCHAR .)
    COLON           reduce using rule 108 (literal -> SCHAR .)
    RTEMPLATE       reduce using rule 108 (literal -> SCHAR .)


state 180

    (21) exclusive_OR_expression -> AND_expression .
    (24) AND_expression -> AND_expression . BANDOP equality_expression

    XOROP           reduce using rule 21 (exclusive_OR_expression -> AND_expression .)
    OROP            reduce using rule 21 (exclusive_OR_expression -> AND_expression .)
    ANDOP           reduce using rule 21 (exclusive_OR_expression -> AND_expression .)
    QUESMARK        reduce using rule 21 (exclusive_OR_expression -> AND_expression .)
    RPAREN          reduce using rule 21 (exclusive_OR_expression -> AND_expression .)
    COMMA           reduce using rule 21 (exclusive_OR_expression -> AND_expression .)
    RSPAREN         reduce using rule 21 (exclusive_OR_expression -> AND_expression .)
    SEMICOLON       reduce using rule 21 (exclusive_OR_expression -> AND_expression .)
    RCPAREN         reduce using rule 21 (exclusive_OR_expression -> AND_expression .)
    COLON           reduce using rule 21 (exclusive_OR_expression -> AND_expression .)
    RTEMPLATE       reduce using rule 21 (exclusive_OR_expression -> AND_expression .)
    BANDOP          shift and go to state 298


state 181

    (23) AND_expression -> equality_expression .
    (26) equality_expression -> equality_expression . EQCOMP relational_expression
    (27) equality_expression -> equality_expression . NEQCOMP relational_expression

    BANDOP          reduce using rule 23 (AND_expression -> equality_expression .)
    XOROP           reduce using rule 23 (AND_expression -> equality_expression .)
    OROP            reduce using rule 23 (AND_expression -> equality_expression .)
    ANDOP           reduce using rule 23 (AND_expression -> equality_expression .)
    QUESMARK        reduce using rule 23 (AND_expression -> equality_expression .)
    RPAREN          reduce using rule 23 (AND_expression -> equality_expression .)
    COMMA           reduce using rule 23 (AND_expression -> equality_expression .)
    RSPAREN         reduce using rule 23 (AND_expression -> equality_expression .)
    SEMICOLON       reduce using rule 23 (AND_expression -> equality_expression .)
    RCPAREN         reduce using rule 23 (AND_expression -> equality_expression .)
    COLON           reduce using rule 23 (AND_expression -> equality_expression .)
    RTEMPLATE       reduce using rule 23 (AND_expression -> equality_expression .)
    EQCOMP          shift and go to state 299
    NEQCOMP         shift and go to state 300


state 182

    (25) equality_expression -> relational_expression .
    (29) relational_expression -> relational_expression . LTCOMP shift_expression
    (30) relational_expression -> relational_expression . GTCOMP shift_expression
    (31) relational_expression -> relational_expression . LTECOMP shift_expression
    (32) relational_expression -> relational_expression . GTECOMP shift_expression

    EQCOMP          reduce using rule 25 (equality_expression -> relational_expression .)
    NEQCOMP         reduce using rule 25 (equality_expression -> relational_expression .)
    BANDOP          reduce using rule 25 (equality_expression -> relational_expression .)
    XOROP           reduce using rule 25 (equality_expression -> relational_expression .)
    OROP            reduce using rule 25 (equality_expression -> relational_expression .)
    ANDOP           reduce using rule 25 (equality_expression -> relational_expression .)
    QUESMARK        reduce using rule 25 (equality_expression -> relational_expression .)
    RPAREN          reduce using rule 25 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 25 (equality_expression -> relational_expression .)
    RSPAREN         reduce using rule 25 (equality_expression -> relational_expression .)
    SEMICOLON       reduce using rule 25 (equality_expression -> relational_expression .)
    RCPAREN         reduce using rule 25 (equality_expression -> relational_expression .)
    COLON           reduce using rule 25 (equality_expression -> relational_expression .)
    RTEMPLATE       reduce using rule 25 (equality_expression -> relational_expression .)
    LTCOMP          shift and go to state 301
    GTCOMP          shift and go to state 302
    LTECOMP         shift and go to state 303
    GTECOMP         shift and go to state 304


state 183

    (28) relational_expression -> shift_expression .
    (34) shift_expression -> shift_expression . LSHIFT additive_expression
    (35) shift_expression -> shift_expression . RSHIFT additive_expression

    LTCOMP          reduce using rule 28 (relational_expression -> shift_expression .)
    GTCOMP          reduce using rule 28 (relational_expression -> shift_expression .)
    LTECOMP         reduce using rule 28 (relational_expression -> shift_expression .)
    GTECOMP         reduce using rule 28 (relational_expression -> shift_expression .)
    EQCOMP          reduce using rule 28 (relational_expression -> shift_expression .)
    NEQCOMP         reduce using rule 28 (relational_expression -> shift_expression .)
    BANDOP          reduce using rule 28 (relational_expression -> shift_expression .)
    XOROP           reduce using rule 28 (relational_expression -> shift_expression .)
    OROP            reduce using rule 28 (relational_expression -> shift_expression .)
    ANDOP           reduce using rule 28 (relational_expression -> shift_expression .)
    QUESMARK        reduce using rule 28 (relational_expression -> shift_expression .)
    RPAREN          reduce using rule 28 (relational_expression -> shift_expression .)
    COMMA           reduce using rule 28 (relational_expression -> shift_expression .)
    RSPAREN         reduce using rule 28 (relational_expression -> shift_expression .)
    SEMICOLON       reduce using rule 28 (relational_expression -> shift_expression .)
    RCPAREN         reduce using rule 28 (relational_expression -> shift_expression .)
    COLON           reduce using rule 28 (relational_expression -> shift_expression .)
    RTEMPLATE       reduce using rule 28 (relational_expression -> shift_expression .)
    LSHIFT          shift and go to state 305
    RSHIFT          shift and go to state 306


state 184

    (33) shift_expression -> additive_expression .
    (37) additive_expression -> additive_expression . PLUSOP multiplicative_expression
    (38) additive_expression -> additive_expression . MINUSOP multiplicative_expression

    LSHIFT          reduce using rule 33 (shift_expression -> additive_expression .)
    RSHIFT          reduce using rule 33 (shift_expression -> additive_expression .)
    LTCOMP          reduce using rule 33 (shift_expression -> additive_expression .)
    GTCOMP          reduce using rule 33 (shift_expression -> additive_expression .)
    LTECOMP         reduce using rule 33 (shift_expression -> additive_expression .)
    GTECOMP         reduce using rule 33 (shift_expression -> additive_expression .)
    EQCOMP          reduce using rule 33 (shift_expression -> additive_expression .)
    NEQCOMP         reduce using rule 33 (shift_expression -> additive_expression .)
    BANDOP          reduce using rule 33 (shift_expression -> additive_expression .)
    XOROP           reduce using rule 33 (shift_expression -> additive_expression .)
    OROP            reduce using rule 33 (shift_expression -> additive_expression .)
    ANDOP           reduce using rule 33 (shift_expression -> additive_expression .)
    QUESMARK        reduce using rule 33 (shift_expression -> additive_expression .)
    RPAREN          reduce using rule 33 (shift_expression -> additive_expression .)
    COMMA           reduce using rule 33 (shift_expression -> additive_expression .)
    RSPAREN         reduce using rule 33 (shift_expression -> additive_expression .)
    SEMICOLON       reduce using rule 33 (shift_expression -> additive_expression .)
    RCPAREN         reduce using rule 33 (shift_expression -> additive_expression .)
    COLON           reduce using rule 33 (shift_expression -> additive_expression .)
    RTEMPLATE       reduce using rule 33 (shift_expression -> additive_expression .)
    PLUSOP          shift and go to state 307
    MINUSOP         shift and go to state 308


state 185

    (36) additive_expression -> multiplicative_expression .
    (40) multiplicative_expression -> multiplicative_expression . MULTOP pm_expression
    (41) multiplicative_expression -> multiplicative_expression . DIVOP pm_expression
    (42) multiplicative_expression -> multiplicative_expression . MODOP pm_expression

    PLUSOP          reduce using rule 36 (additive_expression -> multiplicative_expression .)
    MINUSOP         reduce using rule 36 (additive_expression -> multiplicative_expression .)
    LSHIFT          reduce using rule 36 (additive_expression -> multiplicative_expression .)
    RSHIFT          reduce using rule 36 (additive_expression -> multiplicative_expression .)
    LTCOMP          reduce using rule 36 (additive_expression -> multiplicative_expression .)
    GTCOMP          reduce using rule 36 (additive_expression -> multiplicative_expression .)
    LTECOMP         reduce using rule 36 (additive_expression -> multiplicative_expression .)
    GTECOMP         reduce using rule 36 (additive_expression -> multiplicative_expression .)
    EQCOMP          reduce using rule 36 (additive_expression -> multiplicative_expression .)
    NEQCOMP         reduce using rule 36 (additive_expression -> multiplicative_expression .)
    BANDOP          reduce using rule 36 (additive_expression -> multiplicative_expression .)
    XOROP           reduce using rule 36 (additive_expression -> multiplicative_expression .)
    OROP            reduce using rule 36 (additive_expression -> multiplicative_expression .)
    ANDOP           reduce using rule 36 (additive_expression -> multiplicative_expression .)
    QUESMARK        reduce using rule 36 (additive_expression -> multiplicative_expression .)
    RPAREN          reduce using rule 36 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 36 (additive_expression -> multiplicative_expression .)
    RSPAREN         reduce using rule 36 (additive_expression -> multiplicative_expression .)
    SEMICOLON       reduce using rule 36 (additive_expression -> multiplicative_expression .)
    RCPAREN         reduce using rule 36 (additive_expression -> multiplicative_expression .)
    COLON           reduce using rule 36 (additive_expression -> multiplicative_expression .)
    RTEMPLATE       reduce using rule 36 (additive_expression -> multiplicative_expression .)
    MULTOP          shift and go to state 309
    DIVOP           shift and go to state 310
    MODOP           shift and go to state 311


state 186

    (39) multiplicative_expression -> pm_expression .
    (44) pm_expression -> pm_expression . DOTSTAR cast_expression
    (45) pm_expression -> pm_expression . ARROWSTAR cast_expression

    MULTOP          reduce using rule 39 (multiplicative_expression -> pm_expression .)
    DIVOP           reduce using rule 39 (multiplicative_expression -> pm_expression .)
    MODOP           reduce using rule 39 (multiplicative_expression -> pm_expression .)
    PLUSOP          reduce using rule 39 (multiplicative_expression -> pm_expression .)
    MINUSOP         reduce using rule 39 (multiplicative_expression -> pm_expression .)
    LSHIFT          reduce using rule 39 (multiplicative_expression -> pm_expression .)
    RSHIFT          reduce using rule 39 (multiplicative_expression -> pm_expression .)
    LTCOMP          reduce using rule 39 (multiplicative_expression -> pm_expression .)
    GTCOMP          reduce using rule 39 (multiplicative_expression -> pm_expression .)
    LTECOMP         reduce using rule 39 (multiplicative_expression -> pm_expression .)
    GTECOMP         reduce using rule 39 (multiplicative_expression -> pm_expression .)
    EQCOMP          reduce using rule 39 (multiplicative_expression -> pm_expression .)
    NEQCOMP         reduce using rule 39 (multiplicative_expression -> pm_expression .)
    BANDOP          reduce using rule 39 (multiplicative_expression -> pm_expression .)
    XOROP           reduce using rule 39 (multiplicative_expression -> pm_expression .)
    OROP            reduce using rule 39 (multiplicative_expression -> pm_expression .)
    ANDOP           reduce using rule 39 (multiplicative_expression -> pm_expression .)
    QUESMARK        reduce using rule 39 (multiplicative_expression -> pm_expression .)
    RPAREN          reduce using rule 39 (multiplicative_expression -> pm_expression .)
    COMMA           reduce using rule 39 (multiplicative_expression -> pm_expression .)
    RSPAREN         reduce using rule 39 (multiplicative_expression -> pm_expression .)
    SEMICOLON       reduce using rule 39 (multiplicative_expression -> pm_expression .)
    RCPAREN         reduce using rule 39 (multiplicative_expression -> pm_expression .)
    COLON           reduce using rule 39 (multiplicative_expression -> pm_expression .)
    RTEMPLATE       reduce using rule 39 (multiplicative_expression -> pm_expression .)
    DOTSTAR         shift and go to state 312
    ARROWSTAR       shift and go to state 313


state 187

    (120) declarator -> declarator LSPAREN constant_expression . RSPAREN

    RSPAREN         shift and go to state 314


state 188

    (121) declarator -> declarator LSPAREN RSPAREN .

    LPAREN          reduce using rule 121 (declarator -> declarator LSPAREN RSPAREN .)
    LSPAREN         reduce using rule 121 (declarator -> declarator LSPAREN RSPAREN .)
    EQUAL           reduce using rule 121 (declarator -> declarator LSPAREN RSPAREN .)
    LCPAREN         reduce using rule 121 (declarator -> declarator LSPAREN RSPAREN .)
    SEMICOLON       reduce using rule 121 (declarator -> declarator LSPAREN RSPAREN .)
    COMMA           reduce using rule 121 (declarator -> declarator LSPAREN RSPAREN .)
    RTEMPLATE       reduce using rule 121 (declarator -> declarator LSPAREN RSPAREN .)
    RPAREN          reduce using rule 121 (declarator -> declarator LSPAREN RSPAREN .)


state 189

    (12) constant_expression -> conditional_expression .

    RSPAREN         reduce using rule 12 (constant_expression -> conditional_expression .)
    COLON           reduce using rule 12 (constant_expression -> conditional_expression .)


state 190

    (109) cast_expression -> unary_expression .

    DOTSTAR         reduce using rule 109 (cast_expression -> unary_expression .)
    ARROWSTAR       reduce using rule 109 (cast_expression -> unary_expression .)
    MULTOP          reduce using rule 109 (cast_expression -> unary_expression .)
    DIVOP           reduce using rule 109 (cast_expression -> unary_expression .)
    MODOP           reduce using rule 109 (cast_expression -> unary_expression .)
    PLUSOP          reduce using rule 109 (cast_expression -> unary_expression .)
    MINUSOP         reduce using rule 109 (cast_expression -> unary_expression .)
    LSHIFT          reduce using rule 109 (cast_expression -> unary_expression .)
    RSHIFT          reduce using rule 109 (cast_expression -> unary_expression .)
    LTCOMP          reduce using rule 109 (cast_expression -> unary_expression .)
    GTCOMP          reduce using rule 109 (cast_expression -> unary_expression .)
    LTECOMP         reduce using rule 109 (cast_expression -> unary_expression .)
    GTECOMP         reduce using rule 109 (cast_expression -> unary_expression .)
    EQCOMP          reduce using rule 109 (cast_expression -> unary_expression .)
    NEQCOMP         reduce using rule 109 (cast_expression -> unary_expression .)
    BANDOP          reduce using rule 109 (cast_expression -> unary_expression .)
    XOROP           reduce using rule 109 (cast_expression -> unary_expression .)
    OROP            reduce using rule 109 (cast_expression -> unary_expression .)
    ANDOP           reduce using rule 109 (cast_expression -> unary_expression .)
    QUESMARK        reduce using rule 109 (cast_expression -> unary_expression .)
    RSPAREN         reduce using rule 109 (cast_expression -> unary_expression .)
    EQUAL           reduce using rule 109 (cast_expression -> unary_expression .)
    MULTEQOP        reduce using rule 109 (cast_expression -> unary_expression .)
    DIVEQOP         reduce using rule 109 (cast_expression -> unary_expression .)
    MODEQOP         reduce using rule 109 (cast_expression -> unary_expression .)
    PLUSEQOP        reduce using rule 109 (cast_expression -> unary_expression .)
    MINUSEQOP       reduce using rule 109 (cast_expression -> unary_expression .)
    LSHIFTEQOP      reduce using rule 109 (cast_expression -> unary_expression .)
    RSHIFTEQOP      reduce using rule 109 (cast_expression -> unary_expression .)
    BANDEQOP        reduce using rule 109 (cast_expression -> unary_expression .)
    BOREQOP         reduce using rule 109 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 109 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 109 (cast_expression -> unary_expression .)
    SEMICOLON       reduce using rule 109 (cast_expression -> unary_expression .)
    RCPAREN         reduce using rule 109 (cast_expression -> unary_expression .)
    COLON           reduce using rule 109 (cast_expression -> unary_expression .)
    RTEMPLATE       reduce using rule 109 (cast_expression -> unary_expression .)


state 191

    (110) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (104) primary_expression -> LPAREN . expression RPAREN
    (177) type_name -> . type_specifier_ abstract_declarator
    (178) type_name -> . type_specifier_
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (179) type_specifier_ -> . CONST type_specifier
    (180) type_specifier_ -> . TYPEDEF type_specifier
    (181) type_specifier_ -> . type_specifier
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (182) type_specifier -> . simple_type_name
    (183) type_specifier -> . complex_type_specifier
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (195) complex_type_specifier -> . class_key IDENTIFIER
    (196) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (197) complex_type_specifier -> . TYPE IDENTIFIER
    (198) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (211) class_key -> . CLASS
    (212) class_key -> . STRUCT
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (135) operator_function_name -> . OPERATOR operator_name
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression

    CONST           shift and go to state 14
    TYPEDEF         shift and go to state 16
    THROW           shift and go to state 224
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    TYPE            shift and go to state 34
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    CLASS           shift and go to state 35
    STRUCT          shift and go to state 36
    THIS            shift and go to state 175
    LPAREN          shift and go to state 144
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    type_name                      shift and go to state 258
    cast_expression                shift and go to state 158
    expression                     shift and go to state 257
    type_specifier_                shift and go to state 256
    assignment_expression          shift and go to state 222
    throw_expression               shift and go to state 223
    type_specifier                 shift and go to state 15
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    simple_type_name               shift and go to state 225
    complex_type_specifier         shift and go to state 21
    logical_OR_expression          shift and go to state 153
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    class_key                      shift and go to state 57
    logical_AND_expression         shift and go to state 163
    primary_expression             shift and go to state 164
    name                           shift and go to state 166
    inclusive_OR_expression        shift and go to state 173
    literal                        shift and go to state 174
    exclusive_OR_expression        shift and go to state 176
    operator_function_name         shift and go to state 50
    AND_expression                 shift and go to state 180
    equality_expression            shift and go to state 181
    relational_expression          shift and go to state 182
    shift_expression               shift and go to state 183
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186

state 192

    (96) postfix_expression -> simple_type_name . LPAREN expression_list RPAREN
    (97) postfix_expression -> simple_type_name . LPAREN RPAREN

    LPAREN          shift and go to state 291


state 193

    (285) initializer -> EQUAL assignment_expression .

    SEMICOLON       reduce using rule 285 (initializer -> EQUAL assignment_expression .)
    COMMA           reduce using rule 285 (initializer -> EQUAL assignment_expression .)


state 194

    (286) initializer -> EQUAL LCPAREN . initializer_list RCPAREN
    (287) initializer -> EQUAL LCPAREN . initializer_list COMMA RCPAREN
    (289) initializer_list -> . assignment_expression
    (290) initializer_list -> . initializer_list COMMA assignment_expression
    (291) initializer_list -> . LCPAREN initializer_list RCPAREN
    (292) initializer_list -> . LCPAREN initializer_list COMMA RCPAREN
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (135) operator_function_name -> . OPERATOR operator_name
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LCPAREN         shift and go to state 315
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    THIS            shift and go to state 175
    LPAREN          shift and go to state 144
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    initializer_list               shift and go to state 316
    assignment_expression          shift and go to state 317
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    logical_OR_expression          shift and go to state 153
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    cast_expression                shift and go to state 158
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    logical_AND_expression         shift and go to state 163
    primary_expression             shift and go to state 164
    simple_type_name               shift and go to state 192
    name                           shift and go to state 166
    inclusive_OR_expression        shift and go to state 173
    literal                        shift and go to state 174
    exclusive_OR_expression        shift and go to state 176
    operator_function_name         shift and go to state 50
    AND_expression                 shift and go to state 180
    equality_expression            shift and go to state 181
    relational_expression          shift and go to state 182
    shift_expression               shift and go to state 183
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186

state 195

    (237) compound_statement -> LCPAREN statement_list . RCPAREN
    (240) statement_list -> statement_list . statement
    (241) statement -> . labeled_statement
    (242) statement -> . expression_statement
    (243) statement -> . compound_statement
    (244) statement -> . selection_statement
    (245) statement -> . iteration_statement
    (246) statement -> . jump_statement
    (247) statement -> . declaration_statement
    (248) statement -> . try_block
    (258) labeled_statement -> . IDENTIFIER COLON statement
    (259) labeled_statement -> . CASE constant_expression COLON statement
    (260) labeled_statement -> . DEFAULT COLON statement
    (269) expression_statement -> . expression SEMICOLON
    (270) expression_statement -> . SEMICOLON
    (237) compound_statement -> . LCPAREN statement_list RCPAREN
    (238) compound_statement -> . LCPAREN RCPAREN
    (254) selection_statement -> . IF LPAREN expression RPAREN statement
    (255) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (256) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (261) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (262) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (263) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (264) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (265) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (266) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (249) jump_statement -> . BREAK SEMICOLON
    (250) jump_statement -> . CONTINUE SEMICOLON
    (251) jump_statement -> . RETURN expression SEMICOLON
    (252) jump_statement -> . RETURN SEMICOLON
    (253) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (271) declaration_statement -> . declaration
    (257) try_block -> . TRY compound_statement CATCH compound_statement
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (272) declaration -> . type_specifier_ declarator_list SEMICOLON
    (273) declaration -> . type_specifier_ SEMICOLON
    (274) declaration -> . asm_declaration
    (275) declaration -> . function_definition
    (276) declaration -> . class_define_specifier SEMICOLON
    (277) declaration -> . template_declaration
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (179) type_specifier_ -> . CONST type_specifier
    (180) type_specifier_ -> . TYPEDEF type_specifier
    (181) type_specifier_ -> . type_specifier
    (293) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (235) function_definition -> . type_specifier_ declarator fct_body
    (213) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (214) class_define_specifier -> . class_head LCPAREN RCPAREN
    (278) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (182) type_specifier -> . simple_type_name
    (183) type_specifier -> . complex_type_specifier
    (200) class_head -> . class_key IDENTIFIER base_spec
    (201) class_head -> . class_key IDENTIFIER
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (195) complex_type_specifier -> . class_key IDENTIFIER
    (196) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (197) complex_type_specifier -> . TYPE IDENTIFIER
    (198) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (211) class_key -> . CLASS
    (212) class_key -> . STRUCT
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (135) operator_function_name -> . OPERATOR operator_name
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RCPAREN         shift and go to state 318
    IDENTIFIER      shift and go to state 206
    CASE            shift and go to state 207
    DEFAULT         shift and go to state 208
    SEMICOLON       shift and go to state 210
    LCPAREN         shift and go to state 73
    IF              shift and go to state 211
    SWITCH          shift and go to state 212
    WHILE           shift and go to state 213
    DO              shift and go to state 214
    FOR             shift and go to state 215
    BREAK           shift and go to state 216
    CONTINUE        shift and go to state 217
    RETURN          shift and go to state 218
    GOTO            shift and go to state 219
    TRY             shift and go to state 221
    THROW           shift and go to state 224
    CONST           shift and go to state 14
    TYPEDEF         shift and go to state 16
    ASM             shift and go to state 17
    TEMPLATE        shift and go to state 19
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    TYPE            shift and go to state 34
    CLASS           shift and go to state 35
    STRUCT          shift and go to state 36
    THIS            shift and go to state 175
    LPAREN          shift and go to state 144
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    statement                      shift and go to state 319
    labeled_statement              shift and go to state 198
    expression_statement           shift and go to state 199
    compound_statement             shift and go to state 200
    selection_statement            shift and go to state 201
    iteration_statement            shift and go to state 202
    jump_statement                 shift and go to state 203
    declaration_statement          shift and go to state 204
    try_block                      shift and go to state 205
    expression                     shift and go to state 209
    declaration                    shift and go to state 220
    assignment_expression          shift and go to state 222
    throw_expression               shift and go to state 223
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    class_define_specifier         shift and go to state 12
    template_declaration           shift and go to state 13
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    type_specifier                 shift and go to state 15
    class_head                     shift and go to state 18
    logical_OR_expression          shift and go to state 153
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    cast_expression                shift and go to state 158
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    simple_type_name               shift and go to state 225
    complex_type_specifier         shift and go to state 21
    class_key                      shift and go to state 22
    logical_AND_expression         shift and go to state 163
    primary_expression             shift and go to state 164
    name                           shift and go to state 166
    inclusive_OR_expression        shift and go to state 173
    literal                        shift and go to state 174
    exclusive_OR_expression        shift and go to state 176
    operator_function_name         shift and go to state 50
    AND_expression                 shift and go to state 180
    equality_expression            shift and go to state 181
    relational_expression          shift and go to state 182
    shift_expression               shift and go to state 183
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186

state 196

    (238) compound_statement -> LCPAREN RCPAREN .

    CONST           reduce using rule 238 (compound_statement -> LCPAREN RCPAREN .)
    TYPEDEF         reduce using rule 238 (compound_statement -> LCPAREN RCPAREN .)
    ASM             reduce using rule 238 (compound_statement -> LCPAREN RCPAREN .)
    TEMPLATE        reduce using rule 238 (compound_statement -> LCPAREN RCPAREN .)
    CHAR            reduce using rule 238 (compound_statement -> LCPAREN RCPAREN .)
    SHORT           reduce using rule 238 (compound_statement -> LCPAREN RCPAREN .)
    INT             reduce using rule 238 (compound_statement -> LCPAREN RCPAREN .)
    LONG            reduce using rule 238 (compound_statement -> LCPAREN RCPAREN .)
    SIGNED          reduce using rule 238 (compound_statement -> LCPAREN RCPAREN .)
    UNSIGNED        reduce using rule 238 (compound_statement -> LCPAREN RCPAREN .)
    FLOAT           reduce using rule 238 (compound_statement -> LCPAREN RCPAREN .)
    DOUBLE          reduce using rule 238 (compound_statement -> LCPAREN RCPAREN .)
    VOID            reduce using rule 238 (compound_statement -> LCPAREN RCPAREN .)
    STRING          reduce using rule 238 (compound_statement -> LCPAREN RCPAREN .)
    AUTO            reduce using rule 238 (compound_statement -> LCPAREN RCPAREN .)
    TYPE            reduce using rule 238 (compound_statement -> LCPAREN RCPAREN .)
    CLASS           reduce using rule 238 (compound_statement -> LCPAREN RCPAREN .)
    STRUCT          reduce using rule 238 (compound_statement -> LCPAREN RCPAREN .)
    $end            reduce using rule 238 (compound_statement -> LCPAREN RCPAREN .)
    RCPAREN         reduce using rule 238 (compound_statement -> LCPAREN RCPAREN .)
    IDENTIFIER      reduce using rule 238 (compound_statement -> LCPAREN RCPAREN .)
    CASE            reduce using rule 238 (compound_statement -> LCPAREN RCPAREN .)
    DEFAULT         reduce using rule 238 (compound_statement -> LCPAREN RCPAREN .)
    SEMICOLON       reduce using rule 238 (compound_statement -> LCPAREN RCPAREN .)
    LCPAREN         reduce using rule 238 (compound_statement -> LCPAREN RCPAREN .)
    IF              reduce using rule 238 (compound_statement -> LCPAREN RCPAREN .)
    SWITCH          reduce using rule 238 (compound_statement -> LCPAREN RCPAREN .)
    WHILE           reduce using rule 238 (compound_statement -> LCPAREN RCPAREN .)
    DO              reduce using rule 238 (compound_statement -> LCPAREN RCPAREN .)
    FOR             reduce using rule 238 (compound_statement -> LCPAREN RCPAREN .)
    BREAK           reduce using rule 238 (compound_statement -> LCPAREN RCPAREN .)
    CONTINUE        reduce using rule 238 (compound_statement -> LCPAREN RCPAREN .)
    RETURN          reduce using rule 238 (compound_statement -> LCPAREN RCPAREN .)
    GOTO            reduce using rule 238 (compound_statement -> LCPAREN RCPAREN .)
    TRY             reduce using rule 238 (compound_statement -> LCPAREN RCPAREN .)
    THROW           reduce using rule 238 (compound_statement -> LCPAREN RCPAREN .)
    DPLUSOP         reduce using rule 238 (compound_statement -> LCPAREN RCPAREN .)
    DMINUSOP        reduce using rule 238 (compound_statement -> LCPAREN RCPAREN .)
    SIZEOF          reduce using rule 238 (compound_statement -> LCPAREN RCPAREN .)
    PLUSOP          reduce using rule 238 (compound_statement -> LCPAREN RCPAREN .)
    MINUSOP         reduce using rule 238 (compound_statement -> LCPAREN RCPAREN .)
    NOTSYM          reduce using rule 238 (compound_statement -> LCPAREN RCPAREN .)
    BNOP            reduce using rule 238 (compound_statement -> LCPAREN RCPAREN .)
    MULTOP          reduce using rule 238 (compound_statement -> LCPAREN RCPAREN .)
    BANDOP          reduce using rule 238 (compound_statement -> LCPAREN RCPAREN .)
    NEW             reduce using rule 238 (compound_statement -> LCPAREN RCPAREN .)
    DELETE          reduce using rule 238 (compound_statement -> LCPAREN RCPAREN .)
    THIS            reduce using rule 238 (compound_statement -> LCPAREN RCPAREN .)
    LPAREN          reduce using rule 238 (compound_statement -> LCPAREN RCPAREN .)
    NUMBER          reduce using rule 238 (compound_statement -> LCPAREN RCPAREN .)
    STRING_L        reduce using rule 238 (compound_statement -> LCPAREN RCPAREN .)
    SCHAR           reduce using rule 238 (compound_statement -> LCPAREN RCPAREN .)
    DOUBLEBNOP      reduce using rule 238 (compound_statement -> LCPAREN RCPAREN .)
    OPERATOR        reduce using rule 238 (compound_statement -> LCPAREN RCPAREN .)
    ELSE            reduce using rule 238 (compound_statement -> LCPAREN RCPAREN .)
    CATCH           reduce using rule 238 (compound_statement -> LCPAREN RCPAREN .)
    PRIVATE         reduce using rule 238 (compound_statement -> LCPAREN RCPAREN .)
    PROTECTED       reduce using rule 238 (compound_statement -> LCPAREN RCPAREN .)
    PUBLIC          reduce using rule 238 (compound_statement -> LCPAREN RCPAREN .)


state 197

    (239) statement_list -> statement .

    RCPAREN         reduce using rule 239 (statement_list -> statement .)
    IDENTIFIER      reduce using rule 239 (statement_list -> statement .)
    CASE            reduce using rule 239 (statement_list -> statement .)
    DEFAULT         reduce using rule 239 (statement_list -> statement .)
    SEMICOLON       reduce using rule 239 (statement_list -> statement .)
    LCPAREN         reduce using rule 239 (statement_list -> statement .)
    IF              reduce using rule 239 (statement_list -> statement .)
    SWITCH          reduce using rule 239 (statement_list -> statement .)
    WHILE           reduce using rule 239 (statement_list -> statement .)
    DO              reduce using rule 239 (statement_list -> statement .)
    FOR             reduce using rule 239 (statement_list -> statement .)
    BREAK           reduce using rule 239 (statement_list -> statement .)
    CONTINUE        reduce using rule 239 (statement_list -> statement .)
    RETURN          reduce using rule 239 (statement_list -> statement .)
    GOTO            reduce using rule 239 (statement_list -> statement .)
    TRY             reduce using rule 239 (statement_list -> statement .)
    THROW           reduce using rule 239 (statement_list -> statement .)
    CONST           reduce using rule 239 (statement_list -> statement .)
    TYPEDEF         reduce using rule 239 (statement_list -> statement .)
    ASM             reduce using rule 239 (statement_list -> statement .)
    TEMPLATE        reduce using rule 239 (statement_list -> statement .)
    DPLUSOP         reduce using rule 239 (statement_list -> statement .)
    DMINUSOP        reduce using rule 239 (statement_list -> statement .)
    SIZEOF          reduce using rule 239 (statement_list -> statement .)
    PLUSOP          reduce using rule 239 (statement_list -> statement .)
    MINUSOP         reduce using rule 239 (statement_list -> statement .)
    NOTSYM          reduce using rule 239 (statement_list -> statement .)
    BNOP            reduce using rule 239 (statement_list -> statement .)
    MULTOP          reduce using rule 239 (statement_list -> statement .)
    BANDOP          reduce using rule 239 (statement_list -> statement .)
    NEW             reduce using rule 239 (statement_list -> statement .)
    DELETE          reduce using rule 239 (statement_list -> statement .)
    CHAR            reduce using rule 239 (statement_list -> statement .)
    SHORT           reduce using rule 239 (statement_list -> statement .)
    INT             reduce using rule 239 (statement_list -> statement .)
    LONG            reduce using rule 239 (statement_list -> statement .)
    SIGNED          reduce using rule 239 (statement_list -> statement .)
    UNSIGNED        reduce using rule 239 (statement_list -> statement .)
    FLOAT           reduce using rule 239 (statement_list -> statement .)
    DOUBLE          reduce using rule 239 (statement_list -> statement .)
    VOID            reduce using rule 239 (statement_list -> statement .)
    STRING          reduce using rule 239 (statement_list -> statement .)
    AUTO            reduce using rule 239 (statement_list -> statement .)
    TYPE            reduce using rule 239 (statement_list -> statement .)
    CLASS           reduce using rule 239 (statement_list -> statement .)
    STRUCT          reduce using rule 239 (statement_list -> statement .)
    THIS            reduce using rule 239 (statement_list -> statement .)
    LPAREN          reduce using rule 239 (statement_list -> statement .)
    NUMBER          reduce using rule 239 (statement_list -> statement .)
    STRING_L        reduce using rule 239 (statement_list -> statement .)
    SCHAR           reduce using rule 239 (statement_list -> statement .)
    DOUBLEBNOP      reduce using rule 239 (statement_list -> statement .)
    OPERATOR        reduce using rule 239 (statement_list -> statement .)


state 198

    (241) statement -> labeled_statement .

    RCPAREN         reduce using rule 241 (statement -> labeled_statement .)
    IDENTIFIER      reduce using rule 241 (statement -> labeled_statement .)
    CASE            reduce using rule 241 (statement -> labeled_statement .)
    DEFAULT         reduce using rule 241 (statement -> labeled_statement .)
    SEMICOLON       reduce using rule 241 (statement -> labeled_statement .)
    LCPAREN         reduce using rule 241 (statement -> labeled_statement .)
    IF              reduce using rule 241 (statement -> labeled_statement .)
    SWITCH          reduce using rule 241 (statement -> labeled_statement .)
    WHILE           reduce using rule 241 (statement -> labeled_statement .)
    DO              reduce using rule 241 (statement -> labeled_statement .)
    FOR             reduce using rule 241 (statement -> labeled_statement .)
    BREAK           reduce using rule 241 (statement -> labeled_statement .)
    CONTINUE        reduce using rule 241 (statement -> labeled_statement .)
    RETURN          reduce using rule 241 (statement -> labeled_statement .)
    GOTO            reduce using rule 241 (statement -> labeled_statement .)
    TRY             reduce using rule 241 (statement -> labeled_statement .)
    THROW           reduce using rule 241 (statement -> labeled_statement .)
    CONST           reduce using rule 241 (statement -> labeled_statement .)
    TYPEDEF         reduce using rule 241 (statement -> labeled_statement .)
    ASM             reduce using rule 241 (statement -> labeled_statement .)
    TEMPLATE        reduce using rule 241 (statement -> labeled_statement .)
    DPLUSOP         reduce using rule 241 (statement -> labeled_statement .)
    DMINUSOP        reduce using rule 241 (statement -> labeled_statement .)
    SIZEOF          reduce using rule 241 (statement -> labeled_statement .)
    PLUSOP          reduce using rule 241 (statement -> labeled_statement .)
    MINUSOP         reduce using rule 241 (statement -> labeled_statement .)
    NOTSYM          reduce using rule 241 (statement -> labeled_statement .)
    BNOP            reduce using rule 241 (statement -> labeled_statement .)
    MULTOP          reduce using rule 241 (statement -> labeled_statement .)
    BANDOP          reduce using rule 241 (statement -> labeled_statement .)
    NEW             reduce using rule 241 (statement -> labeled_statement .)
    DELETE          reduce using rule 241 (statement -> labeled_statement .)
    CHAR            reduce using rule 241 (statement -> labeled_statement .)
    SHORT           reduce using rule 241 (statement -> labeled_statement .)
    INT             reduce using rule 241 (statement -> labeled_statement .)
    LONG            reduce using rule 241 (statement -> labeled_statement .)
    SIGNED          reduce using rule 241 (statement -> labeled_statement .)
    UNSIGNED        reduce using rule 241 (statement -> labeled_statement .)
    FLOAT           reduce using rule 241 (statement -> labeled_statement .)
    DOUBLE          reduce using rule 241 (statement -> labeled_statement .)
    VOID            reduce using rule 241 (statement -> labeled_statement .)
    STRING          reduce using rule 241 (statement -> labeled_statement .)
    AUTO            reduce using rule 241 (statement -> labeled_statement .)
    TYPE            reduce using rule 241 (statement -> labeled_statement .)
    CLASS           reduce using rule 241 (statement -> labeled_statement .)
    STRUCT          reduce using rule 241 (statement -> labeled_statement .)
    THIS            reduce using rule 241 (statement -> labeled_statement .)
    LPAREN          reduce using rule 241 (statement -> labeled_statement .)
    NUMBER          reduce using rule 241 (statement -> labeled_statement .)
    STRING_L        reduce using rule 241 (statement -> labeled_statement .)
    SCHAR           reduce using rule 241 (statement -> labeled_statement .)
    DOUBLEBNOP      reduce using rule 241 (statement -> labeled_statement .)
    OPERATOR        reduce using rule 241 (statement -> labeled_statement .)
    ELSE            reduce using rule 241 (statement -> labeled_statement .)


state 199

    (242) statement -> expression_statement .

    RCPAREN         reduce using rule 242 (statement -> expression_statement .)
    IDENTIFIER      reduce using rule 242 (statement -> expression_statement .)
    CASE            reduce using rule 242 (statement -> expression_statement .)
    DEFAULT         reduce using rule 242 (statement -> expression_statement .)
    SEMICOLON       reduce using rule 242 (statement -> expression_statement .)
    LCPAREN         reduce using rule 242 (statement -> expression_statement .)
    IF              reduce using rule 242 (statement -> expression_statement .)
    SWITCH          reduce using rule 242 (statement -> expression_statement .)
    WHILE           reduce using rule 242 (statement -> expression_statement .)
    DO              reduce using rule 242 (statement -> expression_statement .)
    FOR             reduce using rule 242 (statement -> expression_statement .)
    BREAK           reduce using rule 242 (statement -> expression_statement .)
    CONTINUE        reduce using rule 242 (statement -> expression_statement .)
    RETURN          reduce using rule 242 (statement -> expression_statement .)
    GOTO            reduce using rule 242 (statement -> expression_statement .)
    TRY             reduce using rule 242 (statement -> expression_statement .)
    THROW           reduce using rule 242 (statement -> expression_statement .)
    CONST           reduce using rule 242 (statement -> expression_statement .)
    TYPEDEF         reduce using rule 242 (statement -> expression_statement .)
    ASM             reduce using rule 242 (statement -> expression_statement .)
    TEMPLATE        reduce using rule 242 (statement -> expression_statement .)
    DPLUSOP         reduce using rule 242 (statement -> expression_statement .)
    DMINUSOP        reduce using rule 242 (statement -> expression_statement .)
    SIZEOF          reduce using rule 242 (statement -> expression_statement .)
    PLUSOP          reduce using rule 242 (statement -> expression_statement .)
    MINUSOP         reduce using rule 242 (statement -> expression_statement .)
    NOTSYM          reduce using rule 242 (statement -> expression_statement .)
    BNOP            reduce using rule 242 (statement -> expression_statement .)
    MULTOP          reduce using rule 242 (statement -> expression_statement .)
    BANDOP          reduce using rule 242 (statement -> expression_statement .)
    NEW             reduce using rule 242 (statement -> expression_statement .)
    DELETE          reduce using rule 242 (statement -> expression_statement .)
    CHAR            reduce using rule 242 (statement -> expression_statement .)
    SHORT           reduce using rule 242 (statement -> expression_statement .)
    INT             reduce using rule 242 (statement -> expression_statement .)
    LONG            reduce using rule 242 (statement -> expression_statement .)
    SIGNED          reduce using rule 242 (statement -> expression_statement .)
    UNSIGNED        reduce using rule 242 (statement -> expression_statement .)
    FLOAT           reduce using rule 242 (statement -> expression_statement .)
    DOUBLE          reduce using rule 242 (statement -> expression_statement .)
    VOID            reduce using rule 242 (statement -> expression_statement .)
    STRING          reduce using rule 242 (statement -> expression_statement .)
    AUTO            reduce using rule 242 (statement -> expression_statement .)
    TYPE            reduce using rule 242 (statement -> expression_statement .)
    CLASS           reduce using rule 242 (statement -> expression_statement .)
    STRUCT          reduce using rule 242 (statement -> expression_statement .)
    THIS            reduce using rule 242 (statement -> expression_statement .)
    LPAREN          reduce using rule 242 (statement -> expression_statement .)
    NUMBER          reduce using rule 242 (statement -> expression_statement .)
    STRING_L        reduce using rule 242 (statement -> expression_statement .)
    SCHAR           reduce using rule 242 (statement -> expression_statement .)
    DOUBLEBNOP      reduce using rule 242 (statement -> expression_statement .)
    OPERATOR        reduce using rule 242 (statement -> expression_statement .)
    ELSE            reduce using rule 242 (statement -> expression_statement .)


state 200

    (243) statement -> compound_statement .

    RCPAREN         reduce using rule 243 (statement -> compound_statement .)
    IDENTIFIER      reduce using rule 243 (statement -> compound_statement .)
    CASE            reduce using rule 243 (statement -> compound_statement .)
    DEFAULT         reduce using rule 243 (statement -> compound_statement .)
    SEMICOLON       reduce using rule 243 (statement -> compound_statement .)
    LCPAREN         reduce using rule 243 (statement -> compound_statement .)
    IF              reduce using rule 243 (statement -> compound_statement .)
    SWITCH          reduce using rule 243 (statement -> compound_statement .)
    WHILE           reduce using rule 243 (statement -> compound_statement .)
    DO              reduce using rule 243 (statement -> compound_statement .)
    FOR             reduce using rule 243 (statement -> compound_statement .)
    BREAK           reduce using rule 243 (statement -> compound_statement .)
    CONTINUE        reduce using rule 243 (statement -> compound_statement .)
    RETURN          reduce using rule 243 (statement -> compound_statement .)
    GOTO            reduce using rule 243 (statement -> compound_statement .)
    TRY             reduce using rule 243 (statement -> compound_statement .)
    THROW           reduce using rule 243 (statement -> compound_statement .)
    CONST           reduce using rule 243 (statement -> compound_statement .)
    TYPEDEF         reduce using rule 243 (statement -> compound_statement .)
    ASM             reduce using rule 243 (statement -> compound_statement .)
    TEMPLATE        reduce using rule 243 (statement -> compound_statement .)
    DPLUSOP         reduce using rule 243 (statement -> compound_statement .)
    DMINUSOP        reduce using rule 243 (statement -> compound_statement .)
    SIZEOF          reduce using rule 243 (statement -> compound_statement .)
    PLUSOP          reduce using rule 243 (statement -> compound_statement .)
    MINUSOP         reduce using rule 243 (statement -> compound_statement .)
    NOTSYM          reduce using rule 243 (statement -> compound_statement .)
    BNOP            reduce using rule 243 (statement -> compound_statement .)
    MULTOP          reduce using rule 243 (statement -> compound_statement .)
    BANDOP          reduce using rule 243 (statement -> compound_statement .)
    NEW             reduce using rule 243 (statement -> compound_statement .)
    DELETE          reduce using rule 243 (statement -> compound_statement .)
    CHAR            reduce using rule 243 (statement -> compound_statement .)
    SHORT           reduce using rule 243 (statement -> compound_statement .)
    INT             reduce using rule 243 (statement -> compound_statement .)
    LONG            reduce using rule 243 (statement -> compound_statement .)
    SIGNED          reduce using rule 243 (statement -> compound_statement .)
    UNSIGNED        reduce using rule 243 (statement -> compound_statement .)
    FLOAT           reduce using rule 243 (statement -> compound_statement .)
    DOUBLE          reduce using rule 243 (statement -> compound_statement .)
    VOID            reduce using rule 243 (statement -> compound_statement .)
    STRING          reduce using rule 243 (statement -> compound_statement .)
    AUTO            reduce using rule 243 (statement -> compound_statement .)
    TYPE            reduce using rule 243 (statement -> compound_statement .)
    CLASS           reduce using rule 243 (statement -> compound_statement .)
    STRUCT          reduce using rule 243 (statement -> compound_statement .)
    THIS            reduce using rule 243 (statement -> compound_statement .)
    LPAREN          reduce using rule 243 (statement -> compound_statement .)
    NUMBER          reduce using rule 243 (statement -> compound_statement .)
    STRING_L        reduce using rule 243 (statement -> compound_statement .)
    SCHAR           reduce using rule 243 (statement -> compound_statement .)
    DOUBLEBNOP      reduce using rule 243 (statement -> compound_statement .)
    OPERATOR        reduce using rule 243 (statement -> compound_statement .)
    ELSE            reduce using rule 243 (statement -> compound_statement .)


state 201

    (244) statement -> selection_statement .

    RCPAREN         reduce using rule 244 (statement -> selection_statement .)
    IDENTIFIER      reduce using rule 244 (statement -> selection_statement .)
    CASE            reduce using rule 244 (statement -> selection_statement .)
    DEFAULT         reduce using rule 244 (statement -> selection_statement .)
    SEMICOLON       reduce using rule 244 (statement -> selection_statement .)
    LCPAREN         reduce using rule 244 (statement -> selection_statement .)
    IF              reduce using rule 244 (statement -> selection_statement .)
    SWITCH          reduce using rule 244 (statement -> selection_statement .)
    WHILE           reduce using rule 244 (statement -> selection_statement .)
    DO              reduce using rule 244 (statement -> selection_statement .)
    FOR             reduce using rule 244 (statement -> selection_statement .)
    BREAK           reduce using rule 244 (statement -> selection_statement .)
    CONTINUE        reduce using rule 244 (statement -> selection_statement .)
    RETURN          reduce using rule 244 (statement -> selection_statement .)
    GOTO            reduce using rule 244 (statement -> selection_statement .)
    TRY             reduce using rule 244 (statement -> selection_statement .)
    THROW           reduce using rule 244 (statement -> selection_statement .)
    CONST           reduce using rule 244 (statement -> selection_statement .)
    TYPEDEF         reduce using rule 244 (statement -> selection_statement .)
    ASM             reduce using rule 244 (statement -> selection_statement .)
    TEMPLATE        reduce using rule 244 (statement -> selection_statement .)
    DPLUSOP         reduce using rule 244 (statement -> selection_statement .)
    DMINUSOP        reduce using rule 244 (statement -> selection_statement .)
    SIZEOF          reduce using rule 244 (statement -> selection_statement .)
    PLUSOP          reduce using rule 244 (statement -> selection_statement .)
    MINUSOP         reduce using rule 244 (statement -> selection_statement .)
    NOTSYM          reduce using rule 244 (statement -> selection_statement .)
    BNOP            reduce using rule 244 (statement -> selection_statement .)
    MULTOP          reduce using rule 244 (statement -> selection_statement .)
    BANDOP          reduce using rule 244 (statement -> selection_statement .)
    NEW             reduce using rule 244 (statement -> selection_statement .)
    DELETE          reduce using rule 244 (statement -> selection_statement .)
    CHAR            reduce using rule 244 (statement -> selection_statement .)
    SHORT           reduce using rule 244 (statement -> selection_statement .)
    INT             reduce using rule 244 (statement -> selection_statement .)
    LONG            reduce using rule 244 (statement -> selection_statement .)
    SIGNED          reduce using rule 244 (statement -> selection_statement .)
    UNSIGNED        reduce using rule 244 (statement -> selection_statement .)
    FLOAT           reduce using rule 244 (statement -> selection_statement .)
    DOUBLE          reduce using rule 244 (statement -> selection_statement .)
    VOID            reduce using rule 244 (statement -> selection_statement .)
    STRING          reduce using rule 244 (statement -> selection_statement .)
    AUTO            reduce using rule 244 (statement -> selection_statement .)
    TYPE            reduce using rule 244 (statement -> selection_statement .)
    CLASS           reduce using rule 244 (statement -> selection_statement .)
    STRUCT          reduce using rule 244 (statement -> selection_statement .)
    THIS            reduce using rule 244 (statement -> selection_statement .)
    LPAREN          reduce using rule 244 (statement -> selection_statement .)
    NUMBER          reduce using rule 244 (statement -> selection_statement .)
    STRING_L        reduce using rule 244 (statement -> selection_statement .)
    SCHAR           reduce using rule 244 (statement -> selection_statement .)
    DOUBLEBNOP      reduce using rule 244 (statement -> selection_statement .)
    OPERATOR        reduce using rule 244 (statement -> selection_statement .)
    ELSE            reduce using rule 244 (statement -> selection_statement .)


state 202

    (245) statement -> iteration_statement .

    RCPAREN         reduce using rule 245 (statement -> iteration_statement .)
    IDENTIFIER      reduce using rule 245 (statement -> iteration_statement .)
    CASE            reduce using rule 245 (statement -> iteration_statement .)
    DEFAULT         reduce using rule 245 (statement -> iteration_statement .)
    SEMICOLON       reduce using rule 245 (statement -> iteration_statement .)
    LCPAREN         reduce using rule 245 (statement -> iteration_statement .)
    IF              reduce using rule 245 (statement -> iteration_statement .)
    SWITCH          reduce using rule 245 (statement -> iteration_statement .)
    WHILE           reduce using rule 245 (statement -> iteration_statement .)
    DO              reduce using rule 245 (statement -> iteration_statement .)
    FOR             reduce using rule 245 (statement -> iteration_statement .)
    BREAK           reduce using rule 245 (statement -> iteration_statement .)
    CONTINUE        reduce using rule 245 (statement -> iteration_statement .)
    RETURN          reduce using rule 245 (statement -> iteration_statement .)
    GOTO            reduce using rule 245 (statement -> iteration_statement .)
    TRY             reduce using rule 245 (statement -> iteration_statement .)
    THROW           reduce using rule 245 (statement -> iteration_statement .)
    CONST           reduce using rule 245 (statement -> iteration_statement .)
    TYPEDEF         reduce using rule 245 (statement -> iteration_statement .)
    ASM             reduce using rule 245 (statement -> iteration_statement .)
    TEMPLATE        reduce using rule 245 (statement -> iteration_statement .)
    DPLUSOP         reduce using rule 245 (statement -> iteration_statement .)
    DMINUSOP        reduce using rule 245 (statement -> iteration_statement .)
    SIZEOF          reduce using rule 245 (statement -> iteration_statement .)
    PLUSOP          reduce using rule 245 (statement -> iteration_statement .)
    MINUSOP         reduce using rule 245 (statement -> iteration_statement .)
    NOTSYM          reduce using rule 245 (statement -> iteration_statement .)
    BNOP            reduce using rule 245 (statement -> iteration_statement .)
    MULTOP          reduce using rule 245 (statement -> iteration_statement .)
    BANDOP          reduce using rule 245 (statement -> iteration_statement .)
    NEW             reduce using rule 245 (statement -> iteration_statement .)
    DELETE          reduce using rule 245 (statement -> iteration_statement .)
    CHAR            reduce using rule 245 (statement -> iteration_statement .)
    SHORT           reduce using rule 245 (statement -> iteration_statement .)
    INT             reduce using rule 245 (statement -> iteration_statement .)
    LONG            reduce using rule 245 (statement -> iteration_statement .)
    SIGNED          reduce using rule 245 (statement -> iteration_statement .)
    UNSIGNED        reduce using rule 245 (statement -> iteration_statement .)
    FLOAT           reduce using rule 245 (statement -> iteration_statement .)
    DOUBLE          reduce using rule 245 (statement -> iteration_statement .)
    VOID            reduce using rule 245 (statement -> iteration_statement .)
    STRING          reduce using rule 245 (statement -> iteration_statement .)
    AUTO            reduce using rule 245 (statement -> iteration_statement .)
    TYPE            reduce using rule 245 (statement -> iteration_statement .)
    CLASS           reduce using rule 245 (statement -> iteration_statement .)
    STRUCT          reduce using rule 245 (statement -> iteration_statement .)
    THIS            reduce using rule 245 (statement -> iteration_statement .)
    LPAREN          reduce using rule 245 (statement -> iteration_statement .)
    NUMBER          reduce using rule 245 (statement -> iteration_statement .)
    STRING_L        reduce using rule 245 (statement -> iteration_statement .)
    SCHAR           reduce using rule 245 (statement -> iteration_statement .)
    DOUBLEBNOP      reduce using rule 245 (statement -> iteration_statement .)
    OPERATOR        reduce using rule 245 (statement -> iteration_statement .)
    ELSE            reduce using rule 245 (statement -> iteration_statement .)


state 203

    (246) statement -> jump_statement .

    RCPAREN         reduce using rule 246 (statement -> jump_statement .)
    IDENTIFIER      reduce using rule 246 (statement -> jump_statement .)
    CASE            reduce using rule 246 (statement -> jump_statement .)
    DEFAULT         reduce using rule 246 (statement -> jump_statement .)
    SEMICOLON       reduce using rule 246 (statement -> jump_statement .)
    LCPAREN         reduce using rule 246 (statement -> jump_statement .)
    IF              reduce using rule 246 (statement -> jump_statement .)
    SWITCH          reduce using rule 246 (statement -> jump_statement .)
    WHILE           reduce using rule 246 (statement -> jump_statement .)
    DO              reduce using rule 246 (statement -> jump_statement .)
    FOR             reduce using rule 246 (statement -> jump_statement .)
    BREAK           reduce using rule 246 (statement -> jump_statement .)
    CONTINUE        reduce using rule 246 (statement -> jump_statement .)
    RETURN          reduce using rule 246 (statement -> jump_statement .)
    GOTO            reduce using rule 246 (statement -> jump_statement .)
    TRY             reduce using rule 246 (statement -> jump_statement .)
    THROW           reduce using rule 246 (statement -> jump_statement .)
    CONST           reduce using rule 246 (statement -> jump_statement .)
    TYPEDEF         reduce using rule 246 (statement -> jump_statement .)
    ASM             reduce using rule 246 (statement -> jump_statement .)
    TEMPLATE        reduce using rule 246 (statement -> jump_statement .)
    DPLUSOP         reduce using rule 246 (statement -> jump_statement .)
    DMINUSOP        reduce using rule 246 (statement -> jump_statement .)
    SIZEOF          reduce using rule 246 (statement -> jump_statement .)
    PLUSOP          reduce using rule 246 (statement -> jump_statement .)
    MINUSOP         reduce using rule 246 (statement -> jump_statement .)
    NOTSYM          reduce using rule 246 (statement -> jump_statement .)
    BNOP            reduce using rule 246 (statement -> jump_statement .)
    MULTOP          reduce using rule 246 (statement -> jump_statement .)
    BANDOP          reduce using rule 246 (statement -> jump_statement .)
    NEW             reduce using rule 246 (statement -> jump_statement .)
    DELETE          reduce using rule 246 (statement -> jump_statement .)
    CHAR            reduce using rule 246 (statement -> jump_statement .)
    SHORT           reduce using rule 246 (statement -> jump_statement .)
    INT             reduce using rule 246 (statement -> jump_statement .)
    LONG            reduce using rule 246 (statement -> jump_statement .)
    SIGNED          reduce using rule 246 (statement -> jump_statement .)
    UNSIGNED        reduce using rule 246 (statement -> jump_statement .)
    FLOAT           reduce using rule 246 (statement -> jump_statement .)
    DOUBLE          reduce using rule 246 (statement -> jump_statement .)
    VOID            reduce using rule 246 (statement -> jump_statement .)
    STRING          reduce using rule 246 (statement -> jump_statement .)
    AUTO            reduce using rule 246 (statement -> jump_statement .)
    TYPE            reduce using rule 246 (statement -> jump_statement .)
    CLASS           reduce using rule 246 (statement -> jump_statement .)
    STRUCT          reduce using rule 246 (statement -> jump_statement .)
    THIS            reduce using rule 246 (statement -> jump_statement .)
    LPAREN          reduce using rule 246 (statement -> jump_statement .)
    NUMBER          reduce using rule 246 (statement -> jump_statement .)
    STRING_L        reduce using rule 246 (statement -> jump_statement .)
    SCHAR           reduce using rule 246 (statement -> jump_statement .)
    DOUBLEBNOP      reduce using rule 246 (statement -> jump_statement .)
    OPERATOR        reduce using rule 246 (statement -> jump_statement .)
    ELSE            reduce using rule 246 (statement -> jump_statement .)


state 204

    (247) statement -> declaration_statement .

    RCPAREN         reduce using rule 247 (statement -> declaration_statement .)
    IDENTIFIER      reduce using rule 247 (statement -> declaration_statement .)
    CASE            reduce using rule 247 (statement -> declaration_statement .)
    DEFAULT         reduce using rule 247 (statement -> declaration_statement .)
    SEMICOLON       reduce using rule 247 (statement -> declaration_statement .)
    LCPAREN         reduce using rule 247 (statement -> declaration_statement .)
    IF              reduce using rule 247 (statement -> declaration_statement .)
    SWITCH          reduce using rule 247 (statement -> declaration_statement .)
    WHILE           reduce using rule 247 (statement -> declaration_statement .)
    DO              reduce using rule 247 (statement -> declaration_statement .)
    FOR             reduce using rule 247 (statement -> declaration_statement .)
    BREAK           reduce using rule 247 (statement -> declaration_statement .)
    CONTINUE        reduce using rule 247 (statement -> declaration_statement .)
    RETURN          reduce using rule 247 (statement -> declaration_statement .)
    GOTO            reduce using rule 247 (statement -> declaration_statement .)
    TRY             reduce using rule 247 (statement -> declaration_statement .)
    THROW           reduce using rule 247 (statement -> declaration_statement .)
    CONST           reduce using rule 247 (statement -> declaration_statement .)
    TYPEDEF         reduce using rule 247 (statement -> declaration_statement .)
    ASM             reduce using rule 247 (statement -> declaration_statement .)
    TEMPLATE        reduce using rule 247 (statement -> declaration_statement .)
    DPLUSOP         reduce using rule 247 (statement -> declaration_statement .)
    DMINUSOP        reduce using rule 247 (statement -> declaration_statement .)
    SIZEOF          reduce using rule 247 (statement -> declaration_statement .)
    PLUSOP          reduce using rule 247 (statement -> declaration_statement .)
    MINUSOP         reduce using rule 247 (statement -> declaration_statement .)
    NOTSYM          reduce using rule 247 (statement -> declaration_statement .)
    BNOP            reduce using rule 247 (statement -> declaration_statement .)
    MULTOP          reduce using rule 247 (statement -> declaration_statement .)
    BANDOP          reduce using rule 247 (statement -> declaration_statement .)
    NEW             reduce using rule 247 (statement -> declaration_statement .)
    DELETE          reduce using rule 247 (statement -> declaration_statement .)
    CHAR            reduce using rule 247 (statement -> declaration_statement .)
    SHORT           reduce using rule 247 (statement -> declaration_statement .)
    INT             reduce using rule 247 (statement -> declaration_statement .)
    LONG            reduce using rule 247 (statement -> declaration_statement .)
    SIGNED          reduce using rule 247 (statement -> declaration_statement .)
    UNSIGNED        reduce using rule 247 (statement -> declaration_statement .)
    FLOAT           reduce using rule 247 (statement -> declaration_statement .)
    DOUBLE          reduce using rule 247 (statement -> declaration_statement .)
    VOID            reduce using rule 247 (statement -> declaration_statement .)
    STRING          reduce using rule 247 (statement -> declaration_statement .)
    AUTO            reduce using rule 247 (statement -> declaration_statement .)
    TYPE            reduce using rule 247 (statement -> declaration_statement .)
    CLASS           reduce using rule 247 (statement -> declaration_statement .)
    STRUCT          reduce using rule 247 (statement -> declaration_statement .)
    THIS            reduce using rule 247 (statement -> declaration_statement .)
    LPAREN          reduce using rule 247 (statement -> declaration_statement .)
    NUMBER          reduce using rule 247 (statement -> declaration_statement .)
    STRING_L        reduce using rule 247 (statement -> declaration_statement .)
    SCHAR           reduce using rule 247 (statement -> declaration_statement .)
    DOUBLEBNOP      reduce using rule 247 (statement -> declaration_statement .)
    OPERATOR        reduce using rule 247 (statement -> declaration_statement .)
    ELSE            reduce using rule 247 (statement -> declaration_statement .)


state 205

    (248) statement -> try_block .

    RCPAREN         reduce using rule 248 (statement -> try_block .)
    IDENTIFIER      reduce using rule 248 (statement -> try_block .)
    CASE            reduce using rule 248 (statement -> try_block .)
    DEFAULT         reduce using rule 248 (statement -> try_block .)
    SEMICOLON       reduce using rule 248 (statement -> try_block .)
    LCPAREN         reduce using rule 248 (statement -> try_block .)
    IF              reduce using rule 248 (statement -> try_block .)
    SWITCH          reduce using rule 248 (statement -> try_block .)
    WHILE           reduce using rule 248 (statement -> try_block .)
    DO              reduce using rule 248 (statement -> try_block .)
    FOR             reduce using rule 248 (statement -> try_block .)
    BREAK           reduce using rule 248 (statement -> try_block .)
    CONTINUE        reduce using rule 248 (statement -> try_block .)
    RETURN          reduce using rule 248 (statement -> try_block .)
    GOTO            reduce using rule 248 (statement -> try_block .)
    TRY             reduce using rule 248 (statement -> try_block .)
    THROW           reduce using rule 248 (statement -> try_block .)
    CONST           reduce using rule 248 (statement -> try_block .)
    TYPEDEF         reduce using rule 248 (statement -> try_block .)
    ASM             reduce using rule 248 (statement -> try_block .)
    TEMPLATE        reduce using rule 248 (statement -> try_block .)
    DPLUSOP         reduce using rule 248 (statement -> try_block .)
    DMINUSOP        reduce using rule 248 (statement -> try_block .)
    SIZEOF          reduce using rule 248 (statement -> try_block .)
    PLUSOP          reduce using rule 248 (statement -> try_block .)
    MINUSOP         reduce using rule 248 (statement -> try_block .)
    NOTSYM          reduce using rule 248 (statement -> try_block .)
    BNOP            reduce using rule 248 (statement -> try_block .)
    MULTOP          reduce using rule 248 (statement -> try_block .)
    BANDOP          reduce using rule 248 (statement -> try_block .)
    NEW             reduce using rule 248 (statement -> try_block .)
    DELETE          reduce using rule 248 (statement -> try_block .)
    CHAR            reduce using rule 248 (statement -> try_block .)
    SHORT           reduce using rule 248 (statement -> try_block .)
    INT             reduce using rule 248 (statement -> try_block .)
    LONG            reduce using rule 248 (statement -> try_block .)
    SIGNED          reduce using rule 248 (statement -> try_block .)
    UNSIGNED        reduce using rule 248 (statement -> try_block .)
    FLOAT           reduce using rule 248 (statement -> try_block .)
    DOUBLE          reduce using rule 248 (statement -> try_block .)
    VOID            reduce using rule 248 (statement -> try_block .)
    STRING          reduce using rule 248 (statement -> try_block .)
    AUTO            reduce using rule 248 (statement -> try_block .)
    TYPE            reduce using rule 248 (statement -> try_block .)
    CLASS           reduce using rule 248 (statement -> try_block .)
    STRUCT          reduce using rule 248 (statement -> try_block .)
    THIS            reduce using rule 248 (statement -> try_block .)
    LPAREN          reduce using rule 248 (statement -> try_block .)
    NUMBER          reduce using rule 248 (statement -> try_block .)
    STRING_L        reduce using rule 248 (statement -> try_block .)
    SCHAR           reduce using rule 248 (statement -> try_block .)
    DOUBLEBNOP      reduce using rule 248 (statement -> try_block .)
    OPERATOR        reduce using rule 248 (statement -> try_block .)
    ELSE            reduce using rule 248 (statement -> try_block .)


state 206

    (258) labeled_statement -> IDENTIFIER . COLON statement
    (132) name -> IDENTIFIER .

    COLON           shift and go to state 320
    LSPAREN         reduce using rule 132 (name -> IDENTIFIER .)
    LPAREN          reduce using rule 132 (name -> IDENTIFIER .)
    DOT             reduce using rule 132 (name -> IDENTIFIER .)
    ARROW           reduce using rule 132 (name -> IDENTIFIER .)
    DPLUSOP         reduce using rule 132 (name -> IDENTIFIER .)
    DMINUSOP        reduce using rule 132 (name -> IDENTIFIER .)
    LTEMPLATE       reduce using rule 132 (name -> IDENTIFIER .)
    EQUAL           reduce using rule 132 (name -> IDENTIFIER .)
    MULTEQOP        reduce using rule 132 (name -> IDENTIFIER .)
    DIVEQOP         reduce using rule 132 (name -> IDENTIFIER .)
    MODEQOP         reduce using rule 132 (name -> IDENTIFIER .)
    PLUSEQOP        reduce using rule 132 (name -> IDENTIFIER .)
    MINUSEQOP       reduce using rule 132 (name -> IDENTIFIER .)
    LSHIFTEQOP      reduce using rule 132 (name -> IDENTIFIER .)
    RSHIFTEQOP      reduce using rule 132 (name -> IDENTIFIER .)
    BANDEQOP        reduce using rule 132 (name -> IDENTIFIER .)
    BOREQOP         reduce using rule 132 (name -> IDENTIFIER .)
    DOTSTAR         reduce using rule 132 (name -> IDENTIFIER .)
    ARROWSTAR       reduce using rule 132 (name -> IDENTIFIER .)
    MULTOP          reduce using rule 132 (name -> IDENTIFIER .)
    DIVOP           reduce using rule 132 (name -> IDENTIFIER .)
    MODOP           reduce using rule 132 (name -> IDENTIFIER .)
    PLUSOP          reduce using rule 132 (name -> IDENTIFIER .)
    MINUSOP         reduce using rule 132 (name -> IDENTIFIER .)
    LSHIFT          reduce using rule 132 (name -> IDENTIFIER .)
    RSHIFT          reduce using rule 132 (name -> IDENTIFIER .)
    LTCOMP          reduce using rule 132 (name -> IDENTIFIER .)
    GTCOMP          reduce using rule 132 (name -> IDENTIFIER .)
    LTECOMP         reduce using rule 132 (name -> IDENTIFIER .)
    GTECOMP         reduce using rule 132 (name -> IDENTIFIER .)
    EQCOMP          reduce using rule 132 (name -> IDENTIFIER .)
    NEQCOMP         reduce using rule 132 (name -> IDENTIFIER .)
    BANDOP          reduce using rule 132 (name -> IDENTIFIER .)
    XOROP           reduce using rule 132 (name -> IDENTIFIER .)
    OROP            reduce using rule 132 (name -> IDENTIFIER .)
    ANDOP           reduce using rule 132 (name -> IDENTIFIER .)
    QUESMARK        reduce using rule 132 (name -> IDENTIFIER .)
    SEMICOLON       reduce using rule 132 (name -> IDENTIFIER .)
    COMMA           reduce using rule 132 (name -> IDENTIFIER .)


state 207

    (259) labeled_statement -> CASE . constant_expression COLON statement
    (12) constant_expression -> . conditional_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (135) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 191
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    THIS            shift and go to state 175
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    constant_expression            shift and go to state 321
    conditional_expression         shift and go to state 189
    logical_OR_expression          shift and go to state 153
    logical_AND_expression         shift and go to state 163
    inclusive_OR_expression        shift and go to state 173
    exclusive_OR_expression        shift and go to state 176
    AND_expression                 shift and go to state 180
    equality_expression            shift and go to state 181
    relational_expression          shift and go to state 182
    shift_expression               shift and go to state 183
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186
    cast_expression                shift and go to state 158
    unary_expression               shift and go to state 190
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    primary_expression             shift and go to state 164
    simple_type_name               shift and go to state 192
    name                           shift and go to state 166
    literal                        shift and go to state 174
    operator_function_name         shift and go to state 50

state 208

    (260) labeled_statement -> DEFAULT . COLON statement

    COLON           shift and go to state 322


state 209

    (269) expression_statement -> expression . SEMICOLON
    (48) expression -> expression . COMMA assignment_expression

    SEMICOLON       shift and go to state 323
    COMMA           shift and go to state 324


state 210

    (270) expression_statement -> SEMICOLON .

    RCPAREN         reduce using rule 270 (expression_statement -> SEMICOLON .)
    IDENTIFIER      reduce using rule 270 (expression_statement -> SEMICOLON .)
    CASE            reduce using rule 270 (expression_statement -> SEMICOLON .)
    DEFAULT         reduce using rule 270 (expression_statement -> SEMICOLON .)
    SEMICOLON       reduce using rule 270 (expression_statement -> SEMICOLON .)
    LCPAREN         reduce using rule 270 (expression_statement -> SEMICOLON .)
    IF              reduce using rule 270 (expression_statement -> SEMICOLON .)
    SWITCH          reduce using rule 270 (expression_statement -> SEMICOLON .)
    WHILE           reduce using rule 270 (expression_statement -> SEMICOLON .)
    DO              reduce using rule 270 (expression_statement -> SEMICOLON .)
    FOR             reduce using rule 270 (expression_statement -> SEMICOLON .)
    BREAK           reduce using rule 270 (expression_statement -> SEMICOLON .)
    CONTINUE        reduce using rule 270 (expression_statement -> SEMICOLON .)
    RETURN          reduce using rule 270 (expression_statement -> SEMICOLON .)
    GOTO            reduce using rule 270 (expression_statement -> SEMICOLON .)
    TRY             reduce using rule 270 (expression_statement -> SEMICOLON .)
    THROW           reduce using rule 270 (expression_statement -> SEMICOLON .)
    CONST           reduce using rule 270 (expression_statement -> SEMICOLON .)
    TYPEDEF         reduce using rule 270 (expression_statement -> SEMICOLON .)
    ASM             reduce using rule 270 (expression_statement -> SEMICOLON .)
    TEMPLATE        reduce using rule 270 (expression_statement -> SEMICOLON .)
    DPLUSOP         reduce using rule 270 (expression_statement -> SEMICOLON .)
    DMINUSOP        reduce using rule 270 (expression_statement -> SEMICOLON .)
    SIZEOF          reduce using rule 270 (expression_statement -> SEMICOLON .)
    PLUSOP          reduce using rule 270 (expression_statement -> SEMICOLON .)
    MINUSOP         reduce using rule 270 (expression_statement -> SEMICOLON .)
    NOTSYM          reduce using rule 270 (expression_statement -> SEMICOLON .)
    BNOP            reduce using rule 270 (expression_statement -> SEMICOLON .)
    MULTOP          reduce using rule 270 (expression_statement -> SEMICOLON .)
    BANDOP          reduce using rule 270 (expression_statement -> SEMICOLON .)
    NEW             reduce using rule 270 (expression_statement -> SEMICOLON .)
    DELETE          reduce using rule 270 (expression_statement -> SEMICOLON .)
    CHAR            reduce using rule 270 (expression_statement -> SEMICOLON .)
    SHORT           reduce using rule 270 (expression_statement -> SEMICOLON .)
    INT             reduce using rule 270 (expression_statement -> SEMICOLON .)
    LONG            reduce using rule 270 (expression_statement -> SEMICOLON .)
    SIGNED          reduce using rule 270 (expression_statement -> SEMICOLON .)
    UNSIGNED        reduce using rule 270 (expression_statement -> SEMICOLON .)
    FLOAT           reduce using rule 270 (expression_statement -> SEMICOLON .)
    DOUBLE          reduce using rule 270 (expression_statement -> SEMICOLON .)
    VOID            reduce using rule 270 (expression_statement -> SEMICOLON .)
    STRING          reduce using rule 270 (expression_statement -> SEMICOLON .)
    AUTO            reduce using rule 270 (expression_statement -> SEMICOLON .)
    TYPE            reduce using rule 270 (expression_statement -> SEMICOLON .)
    CLASS           reduce using rule 270 (expression_statement -> SEMICOLON .)
    STRUCT          reduce using rule 270 (expression_statement -> SEMICOLON .)
    THIS            reduce using rule 270 (expression_statement -> SEMICOLON .)
    LPAREN          reduce using rule 270 (expression_statement -> SEMICOLON .)
    NUMBER          reduce using rule 270 (expression_statement -> SEMICOLON .)
    STRING_L        reduce using rule 270 (expression_statement -> SEMICOLON .)
    SCHAR           reduce using rule 270 (expression_statement -> SEMICOLON .)
    DOUBLEBNOP      reduce using rule 270 (expression_statement -> SEMICOLON .)
    OPERATOR        reduce using rule 270 (expression_statement -> SEMICOLON .)
    ELSE            reduce using rule 270 (expression_statement -> SEMICOLON .)


state 211

    (254) selection_statement -> IF . LPAREN expression RPAREN statement
    (255) selection_statement -> IF . LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 325


state 212

    (256) selection_statement -> SWITCH . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 326


state 213

    (261) iteration_statement -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 327


state 214

    (262) iteration_statement -> DO . statement WHILE LPAREN expression RPAREN SEMICOLON
    (241) statement -> . labeled_statement
    (242) statement -> . expression_statement
    (243) statement -> . compound_statement
    (244) statement -> . selection_statement
    (245) statement -> . iteration_statement
    (246) statement -> . jump_statement
    (247) statement -> . declaration_statement
    (248) statement -> . try_block
    (258) labeled_statement -> . IDENTIFIER COLON statement
    (259) labeled_statement -> . CASE constant_expression COLON statement
    (260) labeled_statement -> . DEFAULT COLON statement
    (269) expression_statement -> . expression SEMICOLON
    (270) expression_statement -> . SEMICOLON
    (237) compound_statement -> . LCPAREN statement_list RCPAREN
    (238) compound_statement -> . LCPAREN RCPAREN
    (254) selection_statement -> . IF LPAREN expression RPAREN statement
    (255) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (256) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (261) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (262) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (263) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (264) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (265) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (266) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (249) jump_statement -> . BREAK SEMICOLON
    (250) jump_statement -> . CONTINUE SEMICOLON
    (251) jump_statement -> . RETURN expression SEMICOLON
    (252) jump_statement -> . RETURN SEMICOLON
    (253) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (271) declaration_statement -> . declaration
    (257) try_block -> . TRY compound_statement CATCH compound_statement
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (272) declaration -> . type_specifier_ declarator_list SEMICOLON
    (273) declaration -> . type_specifier_ SEMICOLON
    (274) declaration -> . asm_declaration
    (275) declaration -> . function_definition
    (276) declaration -> . class_define_specifier SEMICOLON
    (277) declaration -> . template_declaration
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (179) type_specifier_ -> . CONST type_specifier
    (180) type_specifier_ -> . TYPEDEF type_specifier
    (181) type_specifier_ -> . type_specifier
    (293) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (235) function_definition -> . type_specifier_ declarator fct_body
    (213) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (214) class_define_specifier -> . class_head LCPAREN RCPAREN
    (278) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (182) type_specifier -> . simple_type_name
    (183) type_specifier -> . complex_type_specifier
    (200) class_head -> . class_key IDENTIFIER base_spec
    (201) class_head -> . class_key IDENTIFIER
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (195) complex_type_specifier -> . class_key IDENTIFIER
    (196) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (197) complex_type_specifier -> . TYPE IDENTIFIER
    (198) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (211) class_key -> . CLASS
    (212) class_key -> . STRUCT
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (135) operator_function_name -> . OPERATOR operator_name
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 206
    CASE            shift and go to state 207
    DEFAULT         shift and go to state 208
    SEMICOLON       shift and go to state 210
    LCPAREN         shift and go to state 73
    IF              shift and go to state 211
    SWITCH          shift and go to state 212
    WHILE           shift and go to state 213
    DO              shift and go to state 214
    FOR             shift and go to state 215
    BREAK           shift and go to state 216
    CONTINUE        shift and go to state 217
    RETURN          shift and go to state 218
    GOTO            shift and go to state 219
    TRY             shift and go to state 221
    THROW           shift and go to state 224
    CONST           shift and go to state 14
    TYPEDEF         shift and go to state 16
    ASM             shift and go to state 17
    TEMPLATE        shift and go to state 19
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    TYPE            shift and go to state 34
    CLASS           shift and go to state 35
    STRUCT          shift and go to state 36
    THIS            shift and go to state 175
    LPAREN          shift and go to state 144
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    statement                      shift and go to state 328
    expression                     shift and go to state 209
    labeled_statement              shift and go to state 198
    expression_statement           shift and go to state 199
    compound_statement             shift and go to state 200
    selection_statement            shift and go to state 201
    iteration_statement            shift and go to state 202
    jump_statement                 shift and go to state 203
    declaration_statement          shift and go to state 204
    try_block                      shift and go to state 205
    declaration                    shift and go to state 220
    assignment_expression          shift and go to state 222
    throw_expression               shift and go to state 223
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    class_define_specifier         shift and go to state 12
    template_declaration           shift and go to state 13
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    type_specifier                 shift and go to state 15
    class_head                     shift and go to state 18
    logical_OR_expression          shift and go to state 153
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    cast_expression                shift and go to state 158
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    simple_type_name               shift and go to state 225
    complex_type_specifier         shift and go to state 21
    class_key                      shift and go to state 22
    logical_AND_expression         shift and go to state 163
    primary_expression             shift and go to state 164
    name                           shift and go to state 166
    inclusive_OR_expression        shift and go to state 173
    literal                        shift and go to state 174
    exclusive_OR_expression        shift and go to state 176
    operator_function_name         shift and go to state 50
    AND_expression                 shift and go to state 180
    equality_expression            shift and go to state 181
    relational_expression          shift and go to state 182
    shift_expression               shift and go to state 183
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186

state 215

    (263) iteration_statement -> FOR . LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (264) iteration_statement -> FOR . LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (265) iteration_statement -> FOR . LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (266) iteration_statement -> FOR . LPAREN for_init_statement SEMICOLON RPAREN statement

    LPAREN          shift and go to state 329


state 216

    (249) jump_statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 330


state 217

    (250) jump_statement -> CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 331


state 218

    (251) jump_statement -> RETURN . expression SEMICOLON
    (252) jump_statement -> RETURN . SEMICOLON
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (135) operator_function_name -> . OPERATOR operator_name
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMICOLON       shift and go to state 333
    THROW           shift and go to state 224
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    THIS            shift and go to state 175
    LPAREN          shift and go to state 144
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    expression                     shift and go to state 332
    assignment_expression          shift and go to state 222
    throw_expression               shift and go to state 223
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    logical_OR_expression          shift and go to state 153
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    cast_expression                shift and go to state 158
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    logical_AND_expression         shift and go to state 163
    primary_expression             shift and go to state 164
    simple_type_name               shift and go to state 192
    name                           shift and go to state 166
    inclusive_OR_expression        shift and go to state 173
    literal                        shift and go to state 174
    exclusive_OR_expression        shift and go to state 176
    operator_function_name         shift and go to state 50
    AND_expression                 shift and go to state 180
    equality_expression            shift and go to state 181
    relational_expression          shift and go to state 182
    shift_expression               shift and go to state 183
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186

state 219

    (253) jump_statement -> GOTO . IDENTIFIER SEMICOLON

    IDENTIFIER      shift and go to state 334


state 220

    (271) declaration_statement -> declaration .

    RCPAREN         reduce using rule 271 (declaration_statement -> declaration .)
    IDENTIFIER      reduce using rule 271 (declaration_statement -> declaration .)
    CASE            reduce using rule 271 (declaration_statement -> declaration .)
    DEFAULT         reduce using rule 271 (declaration_statement -> declaration .)
    SEMICOLON       reduce using rule 271 (declaration_statement -> declaration .)
    LCPAREN         reduce using rule 271 (declaration_statement -> declaration .)
    IF              reduce using rule 271 (declaration_statement -> declaration .)
    SWITCH          reduce using rule 271 (declaration_statement -> declaration .)
    WHILE           reduce using rule 271 (declaration_statement -> declaration .)
    DO              reduce using rule 271 (declaration_statement -> declaration .)
    FOR             reduce using rule 271 (declaration_statement -> declaration .)
    BREAK           reduce using rule 271 (declaration_statement -> declaration .)
    CONTINUE        reduce using rule 271 (declaration_statement -> declaration .)
    RETURN          reduce using rule 271 (declaration_statement -> declaration .)
    GOTO            reduce using rule 271 (declaration_statement -> declaration .)
    TRY             reduce using rule 271 (declaration_statement -> declaration .)
    THROW           reduce using rule 271 (declaration_statement -> declaration .)
    CONST           reduce using rule 271 (declaration_statement -> declaration .)
    TYPEDEF         reduce using rule 271 (declaration_statement -> declaration .)
    ASM             reduce using rule 271 (declaration_statement -> declaration .)
    TEMPLATE        reduce using rule 271 (declaration_statement -> declaration .)
    DPLUSOP         reduce using rule 271 (declaration_statement -> declaration .)
    DMINUSOP        reduce using rule 271 (declaration_statement -> declaration .)
    SIZEOF          reduce using rule 271 (declaration_statement -> declaration .)
    PLUSOP          reduce using rule 271 (declaration_statement -> declaration .)
    MINUSOP         reduce using rule 271 (declaration_statement -> declaration .)
    NOTSYM          reduce using rule 271 (declaration_statement -> declaration .)
    BNOP            reduce using rule 271 (declaration_statement -> declaration .)
    MULTOP          reduce using rule 271 (declaration_statement -> declaration .)
    BANDOP          reduce using rule 271 (declaration_statement -> declaration .)
    NEW             reduce using rule 271 (declaration_statement -> declaration .)
    DELETE          reduce using rule 271 (declaration_statement -> declaration .)
    CHAR            reduce using rule 271 (declaration_statement -> declaration .)
    SHORT           reduce using rule 271 (declaration_statement -> declaration .)
    INT             reduce using rule 271 (declaration_statement -> declaration .)
    LONG            reduce using rule 271 (declaration_statement -> declaration .)
    SIGNED          reduce using rule 271 (declaration_statement -> declaration .)
    UNSIGNED        reduce using rule 271 (declaration_statement -> declaration .)
    FLOAT           reduce using rule 271 (declaration_statement -> declaration .)
    DOUBLE          reduce using rule 271 (declaration_statement -> declaration .)
    VOID            reduce using rule 271 (declaration_statement -> declaration .)
    STRING          reduce using rule 271 (declaration_statement -> declaration .)
    AUTO            reduce using rule 271 (declaration_statement -> declaration .)
    TYPE            reduce using rule 271 (declaration_statement -> declaration .)
    CLASS           reduce using rule 271 (declaration_statement -> declaration .)
    STRUCT          reduce using rule 271 (declaration_statement -> declaration .)
    THIS            reduce using rule 271 (declaration_statement -> declaration .)
    LPAREN          reduce using rule 271 (declaration_statement -> declaration .)
    NUMBER          reduce using rule 271 (declaration_statement -> declaration .)
    STRING_L        reduce using rule 271 (declaration_statement -> declaration .)
    SCHAR           reduce using rule 271 (declaration_statement -> declaration .)
    DOUBLEBNOP      reduce using rule 271 (declaration_statement -> declaration .)
    OPERATOR        reduce using rule 271 (declaration_statement -> declaration .)
    ELSE            reduce using rule 271 (declaration_statement -> declaration .)


state 221

    (257) try_block -> TRY . compound_statement CATCH compound_statement
    (237) compound_statement -> . LCPAREN statement_list RCPAREN
    (238) compound_statement -> . LCPAREN RCPAREN

    LCPAREN         shift and go to state 73

    compound_statement             shift and go to state 335

state 222

    (46) expression -> assignment_expression .

    SEMICOLON       reduce using rule 46 (expression -> assignment_expression .)
    COMMA           reduce using rule 46 (expression -> assignment_expression .)
    RPAREN          reduce using rule 46 (expression -> assignment_expression .)
    RTEMPLATE       reduce using rule 46 (expression -> assignment_expression .)
    COLON           reduce using rule 46 (expression -> assignment_expression .)
    RSPAREN         reduce using rule 46 (expression -> assignment_expression .)


state 223

    (47) expression -> throw_expression .

    SEMICOLON       reduce using rule 47 (expression -> throw_expression .)
    COMMA           reduce using rule 47 (expression -> throw_expression .)
    RPAREN          reduce using rule 47 (expression -> throw_expression .)
    RTEMPLATE       reduce using rule 47 (expression -> throw_expression .)
    COLON           reduce using rule 47 (expression -> throw_expression .)
    RSPAREN         reduce using rule 47 (expression -> throw_expression .)


state 224

    (49) throw_expression -> THROW . expression
    (50) throw_expression -> THROW .
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (135) operator_function_name -> . OPERATOR operator_name
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMICOLON       reduce using rule 50 (throw_expression -> THROW .)
    COMMA           reduce using rule 50 (throw_expression -> THROW .)
    RPAREN          reduce using rule 50 (throw_expression -> THROW .)
    RTEMPLATE       reduce using rule 50 (throw_expression -> THROW .)
    COLON           reduce using rule 50 (throw_expression -> THROW .)
    RSPAREN         reduce using rule 50 (throw_expression -> THROW .)
    THROW           shift and go to state 224
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    THIS            shift and go to state 175
    LPAREN          shift and go to state 144
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    expression                     shift and go to state 336
    assignment_expression          shift and go to state 222
    throw_expression               shift and go to state 223
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    logical_OR_expression          shift and go to state 153
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    cast_expression                shift and go to state 158
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    logical_AND_expression         shift and go to state 163
    primary_expression             shift and go to state 164
    simple_type_name               shift and go to state 192
    name                           shift and go to state 166
    inclusive_OR_expression        shift and go to state 173
    literal                        shift and go to state 174
    exclusive_OR_expression        shift and go to state 176
    operator_function_name         shift and go to state 50
    AND_expression                 shift and go to state 180
    equality_expression            shift and go to state 181
    relational_expression          shift and go to state 182
    shift_expression               shift and go to state 183
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186

state 225

    (182) type_specifier -> simple_type_name .
    (96) postfix_expression -> simple_type_name . LPAREN expression_list RPAREN
    (97) postfix_expression -> simple_type_name . LPAREN RPAREN

    SEMICOLON       reduce using rule 182 (type_specifier -> simple_type_name .)
    IDENTIFIER      reduce using rule 182 (type_specifier -> simple_type_name .)
    DOUBLEBNOP      reduce using rule 182 (type_specifier -> simple_type_name .)
    MULTOP          reduce using rule 182 (type_specifier -> simple_type_name .)
    BANDOP          reduce using rule 182 (type_specifier -> simple_type_name .)
    OPERATOR        reduce using rule 182 (type_specifier -> simple_type_name .)
    LSPAREN         reduce using rule 182 (type_specifier -> simple_type_name .)
    RPAREN          reduce using rule 182 (type_specifier -> simple_type_name .)
    LPAREN          shift and go to state 291


state 226

    (119) declarator -> declarator LPAREN . argument_declaration_list RPAREN
    (122) argument_declaration_list -> . arg_declaration_list
    (123) argument_declaration_list -> . empty
    (124) arg_declaration_list -> . argument_declaration
    (125) arg_declaration_list -> . argument_declaration COMMA arg_declaration_list
    (11) empty -> .
    (126) argument_declaration -> . type_specifier_ declarator
    (127) argument_declaration -> . type_specifier_ declarator EQUAL expression
    (128) argument_declaration -> . type_specifier_ abstract_declarator
    (129) argument_declaration -> . type_specifier_
    (130) argument_declaration -> . type_specifier_ abstract_declarator EQUAL expression
    (131) argument_declaration -> . type_specifier_ EQUAL expression
    (179) type_specifier_ -> . CONST type_specifier
    (180) type_specifier_ -> . TYPEDEF type_specifier
    (181) type_specifier_ -> . type_specifier
    (182) type_specifier -> . simple_type_name
    (183) type_specifier -> . complex_type_specifier
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (195) complex_type_specifier -> . class_key IDENTIFIER
    (196) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (197) complex_type_specifier -> . TYPE IDENTIFIER
    (198) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (211) class_key -> . CLASS
    (212) class_key -> . STRUCT

    RPAREN          reduce using rule 11 (empty -> .)
    CONST           shift and go to state 14
    TYPEDEF         shift and go to state 16
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    TYPE            shift and go to state 34
    CLASS           shift and go to state 35
    STRUCT          shift and go to state 36

    argument_declaration_list      shift and go to state 145
    arg_declaration_list           shift and go to state 147
    empty                          shift and go to state 148
    argument_declaration           shift and go to state 150
    type_specifier_                shift and go to state 135
    type_specifier                 shift and go to state 15
    simple_type_name               shift and go to state 20
    complex_type_specifier         shift and go to state 21
    class_key                      shift and go to state 57

state 227

    (172) operator_name -> LPAREN RPAREN .

    LPAREN          reduce using rule 172 (operator_name -> LPAREN RPAREN .)
    LSPAREN         reduce using rule 172 (operator_name -> LPAREN RPAREN .)
    EQUAL           reduce using rule 172 (operator_name -> LPAREN RPAREN .)
    LCPAREN         reduce using rule 172 (operator_name -> LPAREN RPAREN .)
    SEMICOLON       reduce using rule 172 (operator_name -> LPAREN RPAREN .)
    COMMA           reduce using rule 172 (operator_name -> LPAREN RPAREN .)
    DOT             reduce using rule 172 (operator_name -> LPAREN RPAREN .)
    ARROW           reduce using rule 172 (operator_name -> LPAREN RPAREN .)
    DPLUSOP         reduce using rule 172 (operator_name -> LPAREN RPAREN .)
    DMINUSOP        reduce using rule 172 (operator_name -> LPAREN RPAREN .)
    LTEMPLATE       reduce using rule 172 (operator_name -> LPAREN RPAREN .)
    MULTEQOP        reduce using rule 172 (operator_name -> LPAREN RPAREN .)
    DIVEQOP         reduce using rule 172 (operator_name -> LPAREN RPAREN .)
    MODEQOP         reduce using rule 172 (operator_name -> LPAREN RPAREN .)
    PLUSEQOP        reduce using rule 172 (operator_name -> LPAREN RPAREN .)
    MINUSEQOP       reduce using rule 172 (operator_name -> LPAREN RPAREN .)
    LSHIFTEQOP      reduce using rule 172 (operator_name -> LPAREN RPAREN .)
    RSHIFTEQOP      reduce using rule 172 (operator_name -> LPAREN RPAREN .)
    BANDEQOP        reduce using rule 172 (operator_name -> LPAREN RPAREN .)
    BOREQOP         reduce using rule 172 (operator_name -> LPAREN RPAREN .)
    DOTSTAR         reduce using rule 172 (operator_name -> LPAREN RPAREN .)
    ARROWSTAR       reduce using rule 172 (operator_name -> LPAREN RPAREN .)
    MULTOP          reduce using rule 172 (operator_name -> LPAREN RPAREN .)
    DIVOP           reduce using rule 172 (operator_name -> LPAREN RPAREN .)
    MODOP           reduce using rule 172 (operator_name -> LPAREN RPAREN .)
    PLUSOP          reduce using rule 172 (operator_name -> LPAREN RPAREN .)
    MINUSOP         reduce using rule 172 (operator_name -> LPAREN RPAREN .)
    LSHIFT          reduce using rule 172 (operator_name -> LPAREN RPAREN .)
    RSHIFT          reduce using rule 172 (operator_name -> LPAREN RPAREN .)
    LTCOMP          reduce using rule 172 (operator_name -> LPAREN RPAREN .)
    GTCOMP          reduce using rule 172 (operator_name -> LPAREN RPAREN .)
    LTECOMP         reduce using rule 172 (operator_name -> LPAREN RPAREN .)
    GTECOMP         reduce using rule 172 (operator_name -> LPAREN RPAREN .)
    EQCOMP          reduce using rule 172 (operator_name -> LPAREN RPAREN .)
    NEQCOMP         reduce using rule 172 (operator_name -> LPAREN RPAREN .)
    BANDOP          reduce using rule 172 (operator_name -> LPAREN RPAREN .)
    XOROP           reduce using rule 172 (operator_name -> LPAREN RPAREN .)
    OROP            reduce using rule 172 (operator_name -> LPAREN RPAREN .)
    ANDOP           reduce using rule 172 (operator_name -> LPAREN RPAREN .)
    QUESMARK        reduce using rule 172 (operator_name -> LPAREN RPAREN .)
    RPAREN          reduce using rule 172 (operator_name -> LPAREN RPAREN .)
    RSPAREN         reduce using rule 172 (operator_name -> LPAREN RPAREN .)
    RTEMPLATE       reduce using rule 172 (operator_name -> LPAREN RPAREN .)
    RCPAREN         reduce using rule 172 (operator_name -> LPAREN RPAREN .)
    COLON           reduce using rule 172 (operator_name -> LPAREN RPAREN .)


state 228

    (173) operator_name -> LSPAREN RSPAREN .

    LPAREN          reduce using rule 173 (operator_name -> LSPAREN RSPAREN .)
    LSPAREN         reduce using rule 173 (operator_name -> LSPAREN RSPAREN .)
    EQUAL           reduce using rule 173 (operator_name -> LSPAREN RSPAREN .)
    LCPAREN         reduce using rule 173 (operator_name -> LSPAREN RSPAREN .)
    SEMICOLON       reduce using rule 173 (operator_name -> LSPAREN RSPAREN .)
    COMMA           reduce using rule 173 (operator_name -> LSPAREN RSPAREN .)
    DOT             reduce using rule 173 (operator_name -> LSPAREN RSPAREN .)
    ARROW           reduce using rule 173 (operator_name -> LSPAREN RSPAREN .)
    DPLUSOP         reduce using rule 173 (operator_name -> LSPAREN RSPAREN .)
    DMINUSOP        reduce using rule 173 (operator_name -> LSPAREN RSPAREN .)
    LTEMPLATE       reduce using rule 173 (operator_name -> LSPAREN RSPAREN .)
    MULTEQOP        reduce using rule 173 (operator_name -> LSPAREN RSPAREN .)
    DIVEQOP         reduce using rule 173 (operator_name -> LSPAREN RSPAREN .)
    MODEQOP         reduce using rule 173 (operator_name -> LSPAREN RSPAREN .)
    PLUSEQOP        reduce using rule 173 (operator_name -> LSPAREN RSPAREN .)
    MINUSEQOP       reduce using rule 173 (operator_name -> LSPAREN RSPAREN .)
    LSHIFTEQOP      reduce using rule 173 (operator_name -> LSPAREN RSPAREN .)
    RSHIFTEQOP      reduce using rule 173 (operator_name -> LSPAREN RSPAREN .)
    BANDEQOP        reduce using rule 173 (operator_name -> LSPAREN RSPAREN .)
    BOREQOP         reduce using rule 173 (operator_name -> LSPAREN RSPAREN .)
    DOTSTAR         reduce using rule 173 (operator_name -> LSPAREN RSPAREN .)
    ARROWSTAR       reduce using rule 173 (operator_name -> LSPAREN RSPAREN .)
    MULTOP          reduce using rule 173 (operator_name -> LSPAREN RSPAREN .)
    DIVOP           reduce using rule 173 (operator_name -> LSPAREN RSPAREN .)
    MODOP           reduce using rule 173 (operator_name -> LSPAREN RSPAREN .)
    PLUSOP          reduce using rule 173 (operator_name -> LSPAREN RSPAREN .)
    MINUSOP         reduce using rule 173 (operator_name -> LSPAREN RSPAREN .)
    LSHIFT          reduce using rule 173 (operator_name -> LSPAREN RSPAREN .)
    RSHIFT          reduce using rule 173 (operator_name -> LSPAREN RSPAREN .)
    LTCOMP          reduce using rule 173 (operator_name -> LSPAREN RSPAREN .)
    GTCOMP          reduce using rule 173 (operator_name -> LSPAREN RSPAREN .)
    LTECOMP         reduce using rule 173 (operator_name -> LSPAREN RSPAREN .)
    GTECOMP         reduce using rule 173 (operator_name -> LSPAREN RSPAREN .)
    EQCOMP          reduce using rule 173 (operator_name -> LSPAREN RSPAREN .)
    NEQCOMP         reduce using rule 173 (operator_name -> LSPAREN RSPAREN .)
    BANDOP          reduce using rule 173 (operator_name -> LSPAREN RSPAREN .)
    XOROP           reduce using rule 173 (operator_name -> LSPAREN RSPAREN .)
    OROP            reduce using rule 173 (operator_name -> LSPAREN RSPAREN .)
    ANDOP           reduce using rule 173 (operator_name -> LSPAREN RSPAREN .)
    QUESMARK        reduce using rule 173 (operator_name -> LSPAREN RSPAREN .)
    RPAREN          reduce using rule 173 (operator_name -> LSPAREN RSPAREN .)
    RSPAREN         reduce using rule 173 (operator_name -> LSPAREN RSPAREN .)
    RTEMPLATE       reduce using rule 173 (operator_name -> LSPAREN RSPAREN .)
    RCPAREN         reduce using rule 173 (operator_name -> LSPAREN RSPAREN .)
    COLON           reduce using rule 173 (operator_name -> LSPAREN RSPAREN .)


state 229

    (293) asm_declaration -> ASM LPAREN STRING_L RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 337


state 230

    (213) class_define_specifier -> class_head LCPAREN member_list RCPAREN .

    SEMICOLON       reduce using rule 213 (class_define_specifier -> class_head LCPAREN member_list RCPAREN .)


state 231

    (217) member_list -> member_list access_list .

    RCPAREN         reduce using rule 217 (member_list -> member_list access_list .)
    PRIVATE         reduce using rule 217 (member_list -> member_list access_list .)
    PROTECTED       reduce using rule 217 (member_list -> member_list access_list .)
    PUBLIC          reduce using rule 217 (member_list -> member_list access_list .)


state 232

    (223) member_access_list -> member_declaration member_access_list .

    RCPAREN         reduce using rule 223 (member_access_list -> member_declaration member_access_list .)
    PRIVATE         reduce using rule 223 (member_access_list -> member_declaration member_access_list .)
    PROTECTED       reduce using rule 223 (member_access_list -> member_declaration member_access_list .)
    PUBLIC          reduce using rule 223 (member_access_list -> member_declaration member_access_list .)


state 233

    (221) access_list -> access_specifier COLON . member_access_list
    (222) access_list -> access_specifier COLON .
    (223) member_access_list -> . member_declaration member_access_list
    (224) member_access_list -> . member_declaration
    (225) member_declaration -> . type_specifier_ member_declarator_list SEMICOLON
    (226) member_declaration -> . member_declarator_list SEMICOLON
    (227) member_declaration -> . type_specifier_ SEMICOLON
    (228) member_declaration -> . SEMICOLON
    (229) member_declaration -> . function_definition
    (230) member_declaration -> . class_define_specifier SEMICOLON
    (179) type_specifier_ -> . CONST type_specifier
    (180) type_specifier_ -> . TYPEDEF type_specifier
    (181) type_specifier_ -> . type_specifier
    (231) member_declarator_list -> . member_declarator
    (232) member_declarator_list -> . member_declarator_list COMMA member_declarator
    (235) function_definition -> . type_specifier_ declarator fct_body
    (213) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (214) class_define_specifier -> . class_head LCPAREN RCPAREN
    (182) type_specifier -> . simple_type_name
    (183) type_specifier -> . complex_type_specifier
    (233) member_declarator -> . declarator pure_specifier
    (234) member_declarator -> . declarator
    (200) class_head -> . class_key IDENTIFIER base_spec
    (201) class_head -> . class_key IDENTIFIER
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (195) complex_type_specifier -> . class_key IDENTIFIER
    (196) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (197) complex_type_specifier -> . TYPE IDENTIFIER
    (198) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (117) declarator -> . name
    (118) declarator -> . unary2_operator declarator
    (119) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (120) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (121) declarator -> . declarator LSPAREN RSPAREN
    (211) class_key -> . CLASS
    (212) class_key -> . STRUCT
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (135) operator_function_name -> . OPERATOR operator_name

    RCPAREN         reduce using rule 222 (access_list -> access_specifier COLON .)
    PRIVATE         reduce using rule 222 (access_list -> access_specifier COLON .)
    PROTECTED       reduce using rule 222 (access_list -> access_specifier COLON .)
    PUBLIC          reduce using rule 222 (access_list -> access_specifier COLON .)
    SEMICOLON       shift and go to state 125
    CONST           shift and go to state 14
    TYPEDEF         shift and go to state 16
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    TYPE            shift and go to state 34
    CLASS           shift and go to state 35
    STRUCT          shift and go to state 36
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    OPERATOR        shift and go to state 54

    member_access_list             shift and go to state 338
    member_declaration             shift and go to state 121
    type_specifier_                shift and go to state 123
    member_declarator_list         shift and go to state 124
    function_definition            shift and go to state 126
    class_define_specifier         shift and go to state 127
    type_specifier                 shift and go to state 15
    member_declarator              shift and go to state 131
    declarator                     shift and go to state 132
    class_head                     shift and go to state 18
    simple_type_name               shift and go to state 20
    complex_type_specifier         shift and go to state 21
    class_key                      shift and go to state 22
    name                           shift and go to state 47
    unary2_operator                shift and go to state 48
    operator_function_name         shift and go to state 50

state 234

    (225) member_declaration -> type_specifier_ member_declarator_list . SEMICOLON
    (232) member_declarator_list -> member_declarator_list . COMMA member_declarator

    SEMICOLON       shift and go to state 339
    COMMA           shift and go to state 238


state 235

    (227) member_declaration -> type_specifier_ SEMICOLON .

    SEMICOLON       reduce using rule 227 (member_declaration -> type_specifier_ SEMICOLON .)
    CONST           reduce using rule 227 (member_declaration -> type_specifier_ SEMICOLON .)
    TYPEDEF         reduce using rule 227 (member_declaration -> type_specifier_ SEMICOLON .)
    CHAR            reduce using rule 227 (member_declaration -> type_specifier_ SEMICOLON .)
    SHORT           reduce using rule 227 (member_declaration -> type_specifier_ SEMICOLON .)
    INT             reduce using rule 227 (member_declaration -> type_specifier_ SEMICOLON .)
    LONG            reduce using rule 227 (member_declaration -> type_specifier_ SEMICOLON .)
    SIGNED          reduce using rule 227 (member_declaration -> type_specifier_ SEMICOLON .)
    UNSIGNED        reduce using rule 227 (member_declaration -> type_specifier_ SEMICOLON .)
    FLOAT           reduce using rule 227 (member_declaration -> type_specifier_ SEMICOLON .)
    DOUBLE          reduce using rule 227 (member_declaration -> type_specifier_ SEMICOLON .)
    VOID            reduce using rule 227 (member_declaration -> type_specifier_ SEMICOLON .)
    STRING          reduce using rule 227 (member_declaration -> type_specifier_ SEMICOLON .)
    AUTO            reduce using rule 227 (member_declaration -> type_specifier_ SEMICOLON .)
    TYPE            reduce using rule 227 (member_declaration -> type_specifier_ SEMICOLON .)
    CLASS           reduce using rule 227 (member_declaration -> type_specifier_ SEMICOLON .)
    STRUCT          reduce using rule 227 (member_declaration -> type_specifier_ SEMICOLON .)
    IDENTIFIER      reduce using rule 227 (member_declaration -> type_specifier_ SEMICOLON .)
    DOUBLEBNOP      reduce using rule 227 (member_declaration -> type_specifier_ SEMICOLON .)
    MULTOP          reduce using rule 227 (member_declaration -> type_specifier_ SEMICOLON .)
    BANDOP          reduce using rule 227 (member_declaration -> type_specifier_ SEMICOLON .)
    OPERATOR        reduce using rule 227 (member_declaration -> type_specifier_ SEMICOLON .)
    RCPAREN         reduce using rule 227 (member_declaration -> type_specifier_ SEMICOLON .)
    PRIVATE         reduce using rule 227 (member_declaration -> type_specifier_ SEMICOLON .)
    PROTECTED       reduce using rule 227 (member_declaration -> type_specifier_ SEMICOLON .)
    PUBLIC          reduce using rule 227 (member_declaration -> type_specifier_ SEMICOLON .)


state 236

    (235) function_definition -> type_specifier_ declarator . fct_body
    (119) declarator -> declarator . LPAREN argument_declaration_list RPAREN
    (120) declarator -> declarator . LSPAREN constant_expression RSPAREN
    (121) declarator -> declarator . LSPAREN RSPAREN
    (233) member_declarator -> declarator . pure_specifier
    (234) member_declarator -> declarator .
    (236) fct_body -> . compound_statement
    (199) pure_specifier -> . EQUAL NUMBER
    (237) compound_statement -> . LCPAREN statement_list RCPAREN
    (238) compound_statement -> . LCPAREN RCPAREN

    LPAREN          shift and go to state 226
    LSPAREN         shift and go to state 69
    SEMICOLON       reduce using rule 234 (member_declarator -> declarator .)
    COMMA           reduce using rule 234 (member_declarator -> declarator .)
    EQUAL           shift and go to state 241
    LCPAREN         shift and go to state 73

    fct_body                       shift and go to state 67
    pure_specifier                 shift and go to state 240
    compound_statement             shift and go to state 71

state 237

    (226) member_declaration -> member_declarator_list SEMICOLON .

    SEMICOLON       reduce using rule 226 (member_declaration -> member_declarator_list SEMICOLON .)
    CONST           reduce using rule 226 (member_declaration -> member_declarator_list SEMICOLON .)
    TYPEDEF         reduce using rule 226 (member_declaration -> member_declarator_list SEMICOLON .)
    CHAR            reduce using rule 226 (member_declaration -> member_declarator_list SEMICOLON .)
    SHORT           reduce using rule 226 (member_declaration -> member_declarator_list SEMICOLON .)
    INT             reduce using rule 226 (member_declaration -> member_declarator_list SEMICOLON .)
    LONG            reduce using rule 226 (member_declaration -> member_declarator_list SEMICOLON .)
    SIGNED          reduce using rule 226 (member_declaration -> member_declarator_list SEMICOLON .)
    UNSIGNED        reduce using rule 226 (member_declaration -> member_declarator_list SEMICOLON .)
    FLOAT           reduce using rule 226 (member_declaration -> member_declarator_list SEMICOLON .)
    DOUBLE          reduce using rule 226 (member_declaration -> member_declarator_list SEMICOLON .)
    VOID            reduce using rule 226 (member_declaration -> member_declarator_list SEMICOLON .)
    STRING          reduce using rule 226 (member_declaration -> member_declarator_list SEMICOLON .)
    AUTO            reduce using rule 226 (member_declaration -> member_declarator_list SEMICOLON .)
    TYPE            reduce using rule 226 (member_declaration -> member_declarator_list SEMICOLON .)
    CLASS           reduce using rule 226 (member_declaration -> member_declarator_list SEMICOLON .)
    STRUCT          reduce using rule 226 (member_declaration -> member_declarator_list SEMICOLON .)
    IDENTIFIER      reduce using rule 226 (member_declaration -> member_declarator_list SEMICOLON .)
    DOUBLEBNOP      reduce using rule 226 (member_declaration -> member_declarator_list SEMICOLON .)
    MULTOP          reduce using rule 226 (member_declaration -> member_declarator_list SEMICOLON .)
    BANDOP          reduce using rule 226 (member_declaration -> member_declarator_list SEMICOLON .)
    OPERATOR        reduce using rule 226 (member_declaration -> member_declarator_list SEMICOLON .)
    RCPAREN         reduce using rule 226 (member_declaration -> member_declarator_list SEMICOLON .)
    PRIVATE         reduce using rule 226 (member_declaration -> member_declarator_list SEMICOLON .)
    PROTECTED       reduce using rule 226 (member_declaration -> member_declarator_list SEMICOLON .)
    PUBLIC          reduce using rule 226 (member_declaration -> member_declarator_list SEMICOLON .)


state 238

    (232) member_declarator_list -> member_declarator_list COMMA . member_declarator
    (233) member_declarator -> . declarator pure_specifier
    (234) member_declarator -> . declarator
    (117) declarator -> . name
    (118) declarator -> . unary2_operator declarator
    (119) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (120) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (121) declarator -> . declarator LSPAREN RSPAREN
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (135) operator_function_name -> . OPERATOR operator_name

    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    OPERATOR        shift and go to state 54

    member_declarator              shift and go to state 340
    declarator                     shift and go to state 132
    name                           shift and go to state 47
    unary2_operator                shift and go to state 48
    operator_function_name         shift and go to state 50

state 239

    (230) member_declaration -> class_define_specifier SEMICOLON .

    SEMICOLON       reduce using rule 230 (member_declaration -> class_define_specifier SEMICOLON .)
    CONST           reduce using rule 230 (member_declaration -> class_define_specifier SEMICOLON .)
    TYPEDEF         reduce using rule 230 (member_declaration -> class_define_specifier SEMICOLON .)
    CHAR            reduce using rule 230 (member_declaration -> class_define_specifier SEMICOLON .)
    SHORT           reduce using rule 230 (member_declaration -> class_define_specifier SEMICOLON .)
    INT             reduce using rule 230 (member_declaration -> class_define_specifier SEMICOLON .)
    LONG            reduce using rule 230 (member_declaration -> class_define_specifier SEMICOLON .)
    SIGNED          reduce using rule 230 (member_declaration -> class_define_specifier SEMICOLON .)
    UNSIGNED        reduce using rule 230 (member_declaration -> class_define_specifier SEMICOLON .)
    FLOAT           reduce using rule 230 (member_declaration -> class_define_specifier SEMICOLON .)
    DOUBLE          reduce using rule 230 (member_declaration -> class_define_specifier SEMICOLON .)
    VOID            reduce using rule 230 (member_declaration -> class_define_specifier SEMICOLON .)
    STRING          reduce using rule 230 (member_declaration -> class_define_specifier SEMICOLON .)
    AUTO            reduce using rule 230 (member_declaration -> class_define_specifier SEMICOLON .)
    TYPE            reduce using rule 230 (member_declaration -> class_define_specifier SEMICOLON .)
    CLASS           reduce using rule 230 (member_declaration -> class_define_specifier SEMICOLON .)
    STRUCT          reduce using rule 230 (member_declaration -> class_define_specifier SEMICOLON .)
    IDENTIFIER      reduce using rule 230 (member_declaration -> class_define_specifier SEMICOLON .)
    DOUBLEBNOP      reduce using rule 230 (member_declaration -> class_define_specifier SEMICOLON .)
    MULTOP          reduce using rule 230 (member_declaration -> class_define_specifier SEMICOLON .)
    BANDOP          reduce using rule 230 (member_declaration -> class_define_specifier SEMICOLON .)
    OPERATOR        reduce using rule 230 (member_declaration -> class_define_specifier SEMICOLON .)
    RCPAREN         reduce using rule 230 (member_declaration -> class_define_specifier SEMICOLON .)
    PRIVATE         reduce using rule 230 (member_declaration -> class_define_specifier SEMICOLON .)
    PROTECTED       reduce using rule 230 (member_declaration -> class_define_specifier SEMICOLON .)
    PUBLIC          reduce using rule 230 (member_declaration -> class_define_specifier SEMICOLON .)


state 240

    (233) member_declarator -> declarator pure_specifier .

    SEMICOLON       reduce using rule 233 (member_declarator -> declarator pure_specifier .)
    COMMA           reduce using rule 233 (member_declarator -> declarator pure_specifier .)


state 241

    (199) pure_specifier -> EQUAL . NUMBER

    NUMBER          shift and go to state 341


state 242

    (278) template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE . declaration
    (272) declaration -> . type_specifier_ declarator_list SEMICOLON
    (273) declaration -> . type_specifier_ SEMICOLON
    (274) declaration -> . asm_declaration
    (275) declaration -> . function_definition
    (276) declaration -> . class_define_specifier SEMICOLON
    (277) declaration -> . template_declaration
    (179) type_specifier_ -> . CONST type_specifier
    (180) type_specifier_ -> . TYPEDEF type_specifier
    (181) type_specifier_ -> . type_specifier
    (293) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (235) function_definition -> . type_specifier_ declarator fct_body
    (213) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (214) class_define_specifier -> . class_head LCPAREN RCPAREN
    (278) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (182) type_specifier -> . simple_type_name
    (183) type_specifier -> . complex_type_specifier
    (200) class_head -> . class_key IDENTIFIER base_spec
    (201) class_head -> . class_key IDENTIFIER
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (195) complex_type_specifier -> . class_key IDENTIFIER
    (196) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (197) complex_type_specifier -> . TYPE IDENTIFIER
    (198) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (211) class_key -> . CLASS
    (212) class_key -> . STRUCT

    CONST           shift and go to state 14
    TYPEDEF         shift and go to state 16
    ASM             shift and go to state 17
    TEMPLATE        shift and go to state 19
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    TYPE            shift and go to state 34
    CLASS           shift and go to state 35
    STRUCT          shift and go to state 36

    declaration                    shift and go to state 342
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    class_define_specifier         shift and go to state 12
    template_declaration           shift and go to state 13
    type_specifier                 shift and go to state 15
    class_head                     shift and go to state 18
    simple_type_name               shift and go to state 20
    complex_type_specifier         shift and go to state 21
    class_key                      shift and go to state 22

state 243

    (280) template_argument_list -> template_argument_list COMMA . argument_declaration
    (126) argument_declaration -> . type_specifier_ declarator
    (127) argument_declaration -> . type_specifier_ declarator EQUAL expression
    (128) argument_declaration -> . type_specifier_ abstract_declarator
    (129) argument_declaration -> . type_specifier_
    (130) argument_declaration -> . type_specifier_ abstract_declarator EQUAL expression
    (131) argument_declaration -> . type_specifier_ EQUAL expression
    (179) type_specifier_ -> . CONST type_specifier
    (180) type_specifier_ -> . TYPEDEF type_specifier
    (181) type_specifier_ -> . type_specifier
    (182) type_specifier -> . simple_type_name
    (183) type_specifier -> . complex_type_specifier
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (195) complex_type_specifier -> . class_key IDENTIFIER
    (196) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (197) complex_type_specifier -> . TYPE IDENTIFIER
    (198) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (211) class_key -> . CLASS
    (212) class_key -> . STRUCT

    CONST           shift and go to state 14
    TYPEDEF         shift and go to state 16
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    TYPE            shift and go to state 34
    CLASS           shift and go to state 35
    STRUCT          shift and go to state 36

    argument_declaration           shift and go to state 343
    type_specifier_                shift and go to state 135
    type_specifier                 shift and go to state 15
    simple_type_name               shift and go to state 20
    complex_type_specifier         shift and go to state 21
    class_key                      shift and go to state 57

state 244

    (126) argument_declaration -> type_specifier_ declarator .
    (127) argument_declaration -> type_specifier_ declarator . EQUAL expression
    (119) declarator -> declarator . LPAREN argument_declaration_list RPAREN
    (120) declarator -> declarator . LSPAREN constant_expression RSPAREN
    (121) declarator -> declarator . LSPAREN RSPAREN

    RTEMPLATE       reduce using rule 126 (argument_declaration -> type_specifier_ declarator .)
    COMMA           reduce using rule 126 (argument_declaration -> type_specifier_ declarator .)
    RPAREN          reduce using rule 126 (argument_declaration -> type_specifier_ declarator .)
    EQUAL           shift and go to state 344
    LPAREN          shift and go to state 226
    LSPAREN         shift and go to state 69


state 245

    (131) argument_declaration -> type_specifier_ EQUAL . expression
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (135) operator_function_name -> . OPERATOR operator_name
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression

    THROW           shift and go to state 224
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    THIS            shift and go to state 175
    LPAREN          shift and go to state 144
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    expression                     shift and go to state 345
    assignment_expression          shift and go to state 222
    throw_expression               shift and go to state 223
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    logical_OR_expression          shift and go to state 153
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    cast_expression                shift and go to state 158
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    logical_AND_expression         shift and go to state 163
    primary_expression             shift and go to state 164
    simple_type_name               shift and go to state 192
    name                           shift and go to state 166
    inclusive_OR_expression        shift and go to state 173
    literal                        shift and go to state 174
    exclusive_OR_expression        shift and go to state 176
    operator_function_name         shift and go to state 50
    AND_expression                 shift and go to state 180
    equality_expression            shift and go to state 181
    relational_expression          shift and go to state 182
    shift_expression               shift and go to state 183
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186

state 246

    (128) argument_declaration -> type_specifier_ abstract_declarator .
    (130) argument_declaration -> type_specifier_ abstract_declarator . EQUAL expression
    (114) abstract_declarator -> abstract_declarator . LSPAREN constant_expression RSPAREN
    (116) abstract_declarator -> abstract_declarator . LSPAREN RSPAREN

    RTEMPLATE       reduce using rule 128 (argument_declaration -> type_specifier_ abstract_declarator .)
    COMMA           reduce using rule 128 (argument_declaration -> type_specifier_ abstract_declarator .)
    RPAREN          reduce using rule 128 (argument_declaration -> type_specifier_ abstract_declarator .)
    EQUAL           shift and go to state 346
    LSPAREN         shift and go to state 347


state 247

    (118) declarator -> unary2_operator . declarator
    (111) abstract_declarator -> unary2_operator .
    (112) abstract_declarator -> unary2_operator . abstract_declarator
    (117) declarator -> . name
    (118) declarator -> . unary2_operator declarator
    (119) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (120) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (121) declarator -> . declarator LSPAREN RSPAREN
    (111) abstract_declarator -> . unary2_operator
    (112) abstract_declarator -> . unary2_operator abstract_declarator
    (113) abstract_declarator -> . LSPAREN constant_expression RSPAREN
    (114) abstract_declarator -> . abstract_declarator LSPAREN constant_expression RSPAREN
    (115) abstract_declarator -> . LSPAREN RSPAREN
    (116) abstract_declarator -> . abstract_declarator LSPAREN RSPAREN
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (135) operator_function_name -> . OPERATOR operator_name

    EQUAL           reduce using rule 111 (abstract_declarator -> unary2_operator .)
    LSPAREN         reduce using rule 111 (abstract_declarator -> unary2_operator .)
    RTEMPLATE       reduce using rule 111 (abstract_declarator -> unary2_operator .)
    COMMA           reduce using rule 111 (abstract_declarator -> unary2_operator .)
    RPAREN          reduce using rule 111 (abstract_declarator -> unary2_operator .)
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    OPERATOR        shift and go to state 54

  ! LSPAREN         [ shift and go to state 248 ]

    unary2_operator                shift and go to state 247
    declarator                     shift and go to state 74
    abstract_declarator            shift and go to state 348
    name                           shift and go to state 47
    operator_function_name         shift and go to state 50

state 248

    (113) abstract_declarator -> LSPAREN . constant_expression RSPAREN
    (115) abstract_declarator -> LSPAREN . RSPAREN
    (12) constant_expression -> . conditional_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (135) operator_function_name -> . OPERATOR operator_name

    RSPAREN         shift and go to state 350
    LPAREN          shift and go to state 191
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    THIS            shift and go to state 175
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    constant_expression            shift and go to state 349
    conditional_expression         shift and go to state 189
    logical_OR_expression          shift and go to state 153
    logical_AND_expression         shift and go to state 163
    inclusive_OR_expression        shift and go to state 173
    exclusive_OR_expression        shift and go to state 176
    AND_expression                 shift and go to state 180
    equality_expression            shift and go to state 181
    relational_expression          shift and go to state 182
    shift_expression               shift and go to state 183
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186
    cast_expression                shift and go to state 158
    unary_expression               shift and go to state 190
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    primary_expression             shift and go to state 164
    simple_type_name               shift and go to state 192
    name                           shift and go to state 166
    literal                        shift and go to state 174
    operator_function_name         shift and go to state 50

state 249

    (202) base_spec -> COLON base_list .
    (204) base_list -> base_list . COMMA base_specifier

    LCPAREN         reduce using rule 202 (base_spec -> COLON base_list .)
    COMMA           shift and go to state 351


state 250

    (203) base_list -> base_specifier .

    COMMA           reduce using rule 203 (base_list -> base_specifier .)
    LCPAREN         reduce using rule 203 (base_list -> base_specifier .)


state 251

    (205) base_specifier -> class_key . IDENTIFIER
    (206) base_specifier -> class_key . IDENTIFIER template_class_name

    IDENTIFIER      shift and go to state 352


state 252

    (207) base_specifier -> IDENTIFIER .
    (208) base_specifier -> IDENTIFIER . template_class_name
    (174) template_class_name -> . LTEMPLATE template_arg_list RTEMPLATE

    COMMA           reduce using rule 207 (base_specifier -> IDENTIFIER .)
    LCPAREN         reduce using rule 207 (base_specifier -> IDENTIFIER .)
    LTEMPLATE       shift and go to state 139

    template_class_name            shift and go to state 353

state 253

    (209) base_specifier -> access_specifier . class_key IDENTIFIER
    (210) base_specifier -> access_specifier . class_key IDENTIFIER template_class_name
    (211) class_key -> . CLASS
    (212) class_key -> . STRUCT

    CLASS           shift and go to state 35
    STRUCT          shift and go to state 36

    class_key                      shift and go to state 354

state 254

    (174) template_class_name -> LTEMPLATE template_arg_list . RTEMPLATE
    (176) template_arg_list -> template_arg_list . COMMA type_name

    RTEMPLATE       shift and go to state 355
    COMMA           shift and go to state 356


state 255

    (175) template_arg_list -> type_name .

    RTEMPLATE       reduce using rule 175 (template_arg_list -> type_name .)
    COMMA           reduce using rule 175 (template_arg_list -> type_name .)


state 256

    (177) type_name -> type_specifier_ . abstract_declarator
    (178) type_name -> type_specifier_ .
    (111) abstract_declarator -> . unary2_operator
    (112) abstract_declarator -> . unary2_operator abstract_declarator
    (113) abstract_declarator -> . LSPAREN constant_expression RSPAREN
    (114) abstract_declarator -> . abstract_declarator LSPAREN constant_expression RSPAREN
    (115) abstract_declarator -> . LSPAREN RSPAREN
    (116) abstract_declarator -> . abstract_declarator LSPAREN RSPAREN
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP

    RTEMPLATE       reduce using rule 178 (type_name -> type_specifier_ .)
    COMMA           reduce using rule 178 (type_name -> type_specifier_ .)
    RPAREN          reduce using rule 178 (type_name -> type_specifier_ .)
    LSPAREN         shift and go to state 248
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53

    abstract_declarator            shift and go to state 357
    unary2_operator                shift and go to state 358

state 257

    (104) primary_expression -> LPAREN expression . RPAREN
    (48) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 359
    COMMA           shift and go to state 324


state 258

    (110) cast_expression -> LPAREN type_name . RPAREN cast_expression

    RPAREN          shift and go to state 360


state 259

    (119) declarator -> declarator LPAREN argument_declaration_list RPAREN .

    LPAREN          reduce using rule 119 (declarator -> declarator LPAREN argument_declaration_list RPAREN .)
    LSPAREN         reduce using rule 119 (declarator -> declarator LPAREN argument_declaration_list RPAREN .)
    EQUAL           reduce using rule 119 (declarator -> declarator LPAREN argument_declaration_list RPAREN .)
    LCPAREN         reduce using rule 119 (declarator -> declarator LPAREN argument_declaration_list RPAREN .)
    SEMICOLON       reduce using rule 119 (declarator -> declarator LPAREN argument_declaration_list RPAREN .)
    COMMA           reduce using rule 119 (declarator -> declarator LPAREN argument_declaration_list RPAREN .)
    RTEMPLATE       reduce using rule 119 (declarator -> declarator LPAREN argument_declaration_list RPAREN .)
    RPAREN          reduce using rule 119 (declarator -> declarator LPAREN argument_declaration_list RPAREN .)


state 260

    (288) initializer -> LPAREN expression_list RPAREN .

    SEMICOLON       reduce using rule 288 (initializer -> LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 288 (initializer -> LPAREN expression_list RPAREN .)


state 261

    (295) expression_list -> expression_list COMMA . assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (135) operator_function_name -> . OPERATOR operator_name
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    THIS            shift and go to state 175
    LPAREN          shift and go to state 144
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    assignment_expression          shift and go to state 361
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    logical_OR_expression          shift and go to state 153
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    cast_expression                shift and go to state 158
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    logical_AND_expression         shift and go to state 163
    primary_expression             shift and go to state 164
    simple_type_name               shift and go to state 192
    name                           shift and go to state 166
    inclusive_OR_expression        shift and go to state 173
    literal                        shift and go to state 174
    exclusive_OR_expression        shift and go to state 176
    operator_function_name         shift and go to state 50
    AND_expression                 shift and go to state 180
    equality_expression            shift and go to state 181
    relational_expression          shift and go to state 182
    shift_expression               shift and go to state 183
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186

state 262

    (125) arg_declaration_list -> argument_declaration COMMA . arg_declaration_list
    (124) arg_declaration_list -> . argument_declaration
    (125) arg_declaration_list -> . argument_declaration COMMA arg_declaration_list
    (126) argument_declaration -> . type_specifier_ declarator
    (127) argument_declaration -> . type_specifier_ declarator EQUAL expression
    (128) argument_declaration -> . type_specifier_ abstract_declarator
    (129) argument_declaration -> . type_specifier_
    (130) argument_declaration -> . type_specifier_ abstract_declarator EQUAL expression
    (131) argument_declaration -> . type_specifier_ EQUAL expression
    (179) type_specifier_ -> . CONST type_specifier
    (180) type_specifier_ -> . TYPEDEF type_specifier
    (181) type_specifier_ -> . type_specifier
    (182) type_specifier -> . simple_type_name
    (183) type_specifier -> . complex_type_specifier
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (195) complex_type_specifier -> . class_key IDENTIFIER
    (196) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (197) complex_type_specifier -> . TYPE IDENTIFIER
    (198) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (211) class_key -> . CLASS
    (212) class_key -> . STRUCT

    CONST           shift and go to state 14
    TYPEDEF         shift and go to state 16
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    TYPE            shift and go to state 34
    CLASS           shift and go to state 35
    STRUCT          shift and go to state 36

    argument_declaration           shift and go to state 150
    arg_declaration_list           shift and go to state 362
    type_specifier_                shift and go to state 135
    type_specifier                 shift and go to state 15
    simple_type_name               shift and go to state 20
    complex_type_specifier         shift and go to state 21
    class_key                      shift and go to state 57

state 263

    (52) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (135) operator_function_name -> . OPERATOR operator_name
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    THIS            shift and go to state 175
    LPAREN          shift and go to state 144
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    unary_expression               shift and go to state 152
    assignment_expression          shift and go to state 363
    conditional_expression         shift and go to state 151
    logical_OR_expression          shift and go to state 153
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    cast_expression                shift and go to state 158
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    logical_AND_expression         shift and go to state 163
    primary_expression             shift and go to state 164
    simple_type_name               shift and go to state 192
    name                           shift and go to state 166
    inclusive_OR_expression        shift and go to state 173
    literal                        shift and go to state 174
    exclusive_OR_expression        shift and go to state 176
    operator_function_name         shift and go to state 50
    AND_expression                 shift and go to state 180
    equality_expression            shift and go to state 181
    relational_expression          shift and go to state 182
    shift_expression               shift and go to state 183
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186

state 264

    (53) assignment_operator -> EQUAL .

    DPLUSOP         reduce using rule 53 (assignment_operator -> EQUAL .)
    DMINUSOP        reduce using rule 53 (assignment_operator -> EQUAL .)
    SIZEOF          reduce using rule 53 (assignment_operator -> EQUAL .)
    PLUSOP          reduce using rule 53 (assignment_operator -> EQUAL .)
    MINUSOP         reduce using rule 53 (assignment_operator -> EQUAL .)
    NOTSYM          reduce using rule 53 (assignment_operator -> EQUAL .)
    BNOP            reduce using rule 53 (assignment_operator -> EQUAL .)
    MULTOP          reduce using rule 53 (assignment_operator -> EQUAL .)
    BANDOP          reduce using rule 53 (assignment_operator -> EQUAL .)
    NEW             reduce using rule 53 (assignment_operator -> EQUAL .)
    DELETE          reduce using rule 53 (assignment_operator -> EQUAL .)
    THIS            reduce using rule 53 (assignment_operator -> EQUAL .)
    LPAREN          reduce using rule 53 (assignment_operator -> EQUAL .)
    CHAR            reduce using rule 53 (assignment_operator -> EQUAL .)
    SHORT           reduce using rule 53 (assignment_operator -> EQUAL .)
    INT             reduce using rule 53 (assignment_operator -> EQUAL .)
    LONG            reduce using rule 53 (assignment_operator -> EQUAL .)
    SIGNED          reduce using rule 53 (assignment_operator -> EQUAL .)
    UNSIGNED        reduce using rule 53 (assignment_operator -> EQUAL .)
    FLOAT           reduce using rule 53 (assignment_operator -> EQUAL .)
    DOUBLE          reduce using rule 53 (assignment_operator -> EQUAL .)
    VOID            reduce using rule 53 (assignment_operator -> EQUAL .)
    STRING          reduce using rule 53 (assignment_operator -> EQUAL .)
    AUTO            reduce using rule 53 (assignment_operator -> EQUAL .)
    NUMBER          reduce using rule 53 (assignment_operator -> EQUAL .)
    STRING_L        reduce using rule 53 (assignment_operator -> EQUAL .)
    SCHAR           reduce using rule 53 (assignment_operator -> EQUAL .)
    IDENTIFIER      reduce using rule 53 (assignment_operator -> EQUAL .)
    DOUBLEBNOP      reduce using rule 53 (assignment_operator -> EQUAL .)
    OPERATOR        reduce using rule 53 (assignment_operator -> EQUAL .)


state 265

    (54) assignment_operator -> MULTEQOP .

    DPLUSOP         reduce using rule 54 (assignment_operator -> MULTEQOP .)
    DMINUSOP        reduce using rule 54 (assignment_operator -> MULTEQOP .)
    SIZEOF          reduce using rule 54 (assignment_operator -> MULTEQOP .)
    PLUSOP          reduce using rule 54 (assignment_operator -> MULTEQOP .)
    MINUSOP         reduce using rule 54 (assignment_operator -> MULTEQOP .)
    NOTSYM          reduce using rule 54 (assignment_operator -> MULTEQOP .)
    BNOP            reduce using rule 54 (assignment_operator -> MULTEQOP .)
    MULTOP          reduce using rule 54 (assignment_operator -> MULTEQOP .)
    BANDOP          reduce using rule 54 (assignment_operator -> MULTEQOP .)
    NEW             reduce using rule 54 (assignment_operator -> MULTEQOP .)
    DELETE          reduce using rule 54 (assignment_operator -> MULTEQOP .)
    THIS            reduce using rule 54 (assignment_operator -> MULTEQOP .)
    LPAREN          reduce using rule 54 (assignment_operator -> MULTEQOP .)
    CHAR            reduce using rule 54 (assignment_operator -> MULTEQOP .)
    SHORT           reduce using rule 54 (assignment_operator -> MULTEQOP .)
    INT             reduce using rule 54 (assignment_operator -> MULTEQOP .)
    LONG            reduce using rule 54 (assignment_operator -> MULTEQOP .)
    SIGNED          reduce using rule 54 (assignment_operator -> MULTEQOP .)
    UNSIGNED        reduce using rule 54 (assignment_operator -> MULTEQOP .)
    FLOAT           reduce using rule 54 (assignment_operator -> MULTEQOP .)
    DOUBLE          reduce using rule 54 (assignment_operator -> MULTEQOP .)
    VOID            reduce using rule 54 (assignment_operator -> MULTEQOP .)
    STRING          reduce using rule 54 (assignment_operator -> MULTEQOP .)
    AUTO            reduce using rule 54 (assignment_operator -> MULTEQOP .)
    NUMBER          reduce using rule 54 (assignment_operator -> MULTEQOP .)
    STRING_L        reduce using rule 54 (assignment_operator -> MULTEQOP .)
    SCHAR           reduce using rule 54 (assignment_operator -> MULTEQOP .)
    IDENTIFIER      reduce using rule 54 (assignment_operator -> MULTEQOP .)
    DOUBLEBNOP      reduce using rule 54 (assignment_operator -> MULTEQOP .)
    OPERATOR        reduce using rule 54 (assignment_operator -> MULTEQOP .)


state 266

    (55) assignment_operator -> DIVEQOP .

    DPLUSOP         reduce using rule 55 (assignment_operator -> DIVEQOP .)
    DMINUSOP        reduce using rule 55 (assignment_operator -> DIVEQOP .)
    SIZEOF          reduce using rule 55 (assignment_operator -> DIVEQOP .)
    PLUSOP          reduce using rule 55 (assignment_operator -> DIVEQOP .)
    MINUSOP         reduce using rule 55 (assignment_operator -> DIVEQOP .)
    NOTSYM          reduce using rule 55 (assignment_operator -> DIVEQOP .)
    BNOP            reduce using rule 55 (assignment_operator -> DIVEQOP .)
    MULTOP          reduce using rule 55 (assignment_operator -> DIVEQOP .)
    BANDOP          reduce using rule 55 (assignment_operator -> DIVEQOP .)
    NEW             reduce using rule 55 (assignment_operator -> DIVEQOP .)
    DELETE          reduce using rule 55 (assignment_operator -> DIVEQOP .)
    THIS            reduce using rule 55 (assignment_operator -> DIVEQOP .)
    LPAREN          reduce using rule 55 (assignment_operator -> DIVEQOP .)
    CHAR            reduce using rule 55 (assignment_operator -> DIVEQOP .)
    SHORT           reduce using rule 55 (assignment_operator -> DIVEQOP .)
    INT             reduce using rule 55 (assignment_operator -> DIVEQOP .)
    LONG            reduce using rule 55 (assignment_operator -> DIVEQOP .)
    SIGNED          reduce using rule 55 (assignment_operator -> DIVEQOP .)
    UNSIGNED        reduce using rule 55 (assignment_operator -> DIVEQOP .)
    FLOAT           reduce using rule 55 (assignment_operator -> DIVEQOP .)
    DOUBLE          reduce using rule 55 (assignment_operator -> DIVEQOP .)
    VOID            reduce using rule 55 (assignment_operator -> DIVEQOP .)
    STRING          reduce using rule 55 (assignment_operator -> DIVEQOP .)
    AUTO            reduce using rule 55 (assignment_operator -> DIVEQOP .)
    NUMBER          reduce using rule 55 (assignment_operator -> DIVEQOP .)
    STRING_L        reduce using rule 55 (assignment_operator -> DIVEQOP .)
    SCHAR           reduce using rule 55 (assignment_operator -> DIVEQOP .)
    IDENTIFIER      reduce using rule 55 (assignment_operator -> DIVEQOP .)
    DOUBLEBNOP      reduce using rule 55 (assignment_operator -> DIVEQOP .)
    OPERATOR        reduce using rule 55 (assignment_operator -> DIVEQOP .)


state 267

    (56) assignment_operator -> MODEQOP .

    DPLUSOP         reduce using rule 56 (assignment_operator -> MODEQOP .)
    DMINUSOP        reduce using rule 56 (assignment_operator -> MODEQOP .)
    SIZEOF          reduce using rule 56 (assignment_operator -> MODEQOP .)
    PLUSOP          reduce using rule 56 (assignment_operator -> MODEQOP .)
    MINUSOP         reduce using rule 56 (assignment_operator -> MODEQOP .)
    NOTSYM          reduce using rule 56 (assignment_operator -> MODEQOP .)
    BNOP            reduce using rule 56 (assignment_operator -> MODEQOP .)
    MULTOP          reduce using rule 56 (assignment_operator -> MODEQOP .)
    BANDOP          reduce using rule 56 (assignment_operator -> MODEQOP .)
    NEW             reduce using rule 56 (assignment_operator -> MODEQOP .)
    DELETE          reduce using rule 56 (assignment_operator -> MODEQOP .)
    THIS            reduce using rule 56 (assignment_operator -> MODEQOP .)
    LPAREN          reduce using rule 56 (assignment_operator -> MODEQOP .)
    CHAR            reduce using rule 56 (assignment_operator -> MODEQOP .)
    SHORT           reduce using rule 56 (assignment_operator -> MODEQOP .)
    INT             reduce using rule 56 (assignment_operator -> MODEQOP .)
    LONG            reduce using rule 56 (assignment_operator -> MODEQOP .)
    SIGNED          reduce using rule 56 (assignment_operator -> MODEQOP .)
    UNSIGNED        reduce using rule 56 (assignment_operator -> MODEQOP .)
    FLOAT           reduce using rule 56 (assignment_operator -> MODEQOP .)
    DOUBLE          reduce using rule 56 (assignment_operator -> MODEQOP .)
    VOID            reduce using rule 56 (assignment_operator -> MODEQOP .)
    STRING          reduce using rule 56 (assignment_operator -> MODEQOP .)
    AUTO            reduce using rule 56 (assignment_operator -> MODEQOP .)
    NUMBER          reduce using rule 56 (assignment_operator -> MODEQOP .)
    STRING_L        reduce using rule 56 (assignment_operator -> MODEQOP .)
    SCHAR           reduce using rule 56 (assignment_operator -> MODEQOP .)
    IDENTIFIER      reduce using rule 56 (assignment_operator -> MODEQOP .)
    DOUBLEBNOP      reduce using rule 56 (assignment_operator -> MODEQOP .)
    OPERATOR        reduce using rule 56 (assignment_operator -> MODEQOP .)


state 268

    (57) assignment_operator -> PLUSEQOP .

    DPLUSOP         reduce using rule 57 (assignment_operator -> PLUSEQOP .)
    DMINUSOP        reduce using rule 57 (assignment_operator -> PLUSEQOP .)
    SIZEOF          reduce using rule 57 (assignment_operator -> PLUSEQOP .)
    PLUSOP          reduce using rule 57 (assignment_operator -> PLUSEQOP .)
    MINUSOP         reduce using rule 57 (assignment_operator -> PLUSEQOP .)
    NOTSYM          reduce using rule 57 (assignment_operator -> PLUSEQOP .)
    BNOP            reduce using rule 57 (assignment_operator -> PLUSEQOP .)
    MULTOP          reduce using rule 57 (assignment_operator -> PLUSEQOP .)
    BANDOP          reduce using rule 57 (assignment_operator -> PLUSEQOP .)
    NEW             reduce using rule 57 (assignment_operator -> PLUSEQOP .)
    DELETE          reduce using rule 57 (assignment_operator -> PLUSEQOP .)
    THIS            reduce using rule 57 (assignment_operator -> PLUSEQOP .)
    LPAREN          reduce using rule 57 (assignment_operator -> PLUSEQOP .)
    CHAR            reduce using rule 57 (assignment_operator -> PLUSEQOP .)
    SHORT           reduce using rule 57 (assignment_operator -> PLUSEQOP .)
    INT             reduce using rule 57 (assignment_operator -> PLUSEQOP .)
    LONG            reduce using rule 57 (assignment_operator -> PLUSEQOP .)
    SIGNED          reduce using rule 57 (assignment_operator -> PLUSEQOP .)
    UNSIGNED        reduce using rule 57 (assignment_operator -> PLUSEQOP .)
    FLOAT           reduce using rule 57 (assignment_operator -> PLUSEQOP .)
    DOUBLE          reduce using rule 57 (assignment_operator -> PLUSEQOP .)
    VOID            reduce using rule 57 (assignment_operator -> PLUSEQOP .)
    STRING          reduce using rule 57 (assignment_operator -> PLUSEQOP .)
    AUTO            reduce using rule 57 (assignment_operator -> PLUSEQOP .)
    NUMBER          reduce using rule 57 (assignment_operator -> PLUSEQOP .)
    STRING_L        reduce using rule 57 (assignment_operator -> PLUSEQOP .)
    SCHAR           reduce using rule 57 (assignment_operator -> PLUSEQOP .)
    IDENTIFIER      reduce using rule 57 (assignment_operator -> PLUSEQOP .)
    DOUBLEBNOP      reduce using rule 57 (assignment_operator -> PLUSEQOP .)
    OPERATOR        reduce using rule 57 (assignment_operator -> PLUSEQOP .)


state 269

    (58) assignment_operator -> MINUSEQOP .

    DPLUSOP         reduce using rule 58 (assignment_operator -> MINUSEQOP .)
    DMINUSOP        reduce using rule 58 (assignment_operator -> MINUSEQOP .)
    SIZEOF          reduce using rule 58 (assignment_operator -> MINUSEQOP .)
    PLUSOP          reduce using rule 58 (assignment_operator -> MINUSEQOP .)
    MINUSOP         reduce using rule 58 (assignment_operator -> MINUSEQOP .)
    NOTSYM          reduce using rule 58 (assignment_operator -> MINUSEQOP .)
    BNOP            reduce using rule 58 (assignment_operator -> MINUSEQOP .)
    MULTOP          reduce using rule 58 (assignment_operator -> MINUSEQOP .)
    BANDOP          reduce using rule 58 (assignment_operator -> MINUSEQOP .)
    NEW             reduce using rule 58 (assignment_operator -> MINUSEQOP .)
    DELETE          reduce using rule 58 (assignment_operator -> MINUSEQOP .)
    THIS            reduce using rule 58 (assignment_operator -> MINUSEQOP .)
    LPAREN          reduce using rule 58 (assignment_operator -> MINUSEQOP .)
    CHAR            reduce using rule 58 (assignment_operator -> MINUSEQOP .)
    SHORT           reduce using rule 58 (assignment_operator -> MINUSEQOP .)
    INT             reduce using rule 58 (assignment_operator -> MINUSEQOP .)
    LONG            reduce using rule 58 (assignment_operator -> MINUSEQOP .)
    SIGNED          reduce using rule 58 (assignment_operator -> MINUSEQOP .)
    UNSIGNED        reduce using rule 58 (assignment_operator -> MINUSEQOP .)
    FLOAT           reduce using rule 58 (assignment_operator -> MINUSEQOP .)
    DOUBLE          reduce using rule 58 (assignment_operator -> MINUSEQOP .)
    VOID            reduce using rule 58 (assignment_operator -> MINUSEQOP .)
    STRING          reduce using rule 58 (assignment_operator -> MINUSEQOP .)
    AUTO            reduce using rule 58 (assignment_operator -> MINUSEQOP .)
    NUMBER          reduce using rule 58 (assignment_operator -> MINUSEQOP .)
    STRING_L        reduce using rule 58 (assignment_operator -> MINUSEQOP .)
    SCHAR           reduce using rule 58 (assignment_operator -> MINUSEQOP .)
    IDENTIFIER      reduce using rule 58 (assignment_operator -> MINUSEQOP .)
    DOUBLEBNOP      reduce using rule 58 (assignment_operator -> MINUSEQOP .)
    OPERATOR        reduce using rule 58 (assignment_operator -> MINUSEQOP .)


state 270

    (59) assignment_operator -> LSHIFTEQOP .

    DPLUSOP         reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)
    DMINUSOP        reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)
    SIZEOF          reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)
    PLUSOP          reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)
    MINUSOP         reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)
    NOTSYM          reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)
    BNOP            reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)
    MULTOP          reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)
    BANDOP          reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)
    NEW             reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)
    DELETE          reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)
    THIS            reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)
    LPAREN          reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)
    CHAR            reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)
    SHORT           reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)
    INT             reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)
    LONG            reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)
    SIGNED          reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)
    UNSIGNED        reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)
    FLOAT           reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)
    DOUBLE          reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)
    VOID            reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)
    STRING          reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)
    AUTO            reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)
    NUMBER          reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)
    STRING_L        reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)
    SCHAR           reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)
    IDENTIFIER      reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)
    DOUBLEBNOP      reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)
    OPERATOR        reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)


state 271

    (60) assignment_operator -> RSHIFTEQOP .

    DPLUSOP         reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)
    DMINUSOP        reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)
    SIZEOF          reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)
    PLUSOP          reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)
    MINUSOP         reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)
    NOTSYM          reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)
    BNOP            reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)
    MULTOP          reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)
    BANDOP          reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)
    NEW             reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)
    DELETE          reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)
    THIS            reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)
    LPAREN          reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)
    CHAR            reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)
    SHORT           reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)
    INT             reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)
    LONG            reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)
    SIGNED          reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)
    UNSIGNED        reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)
    FLOAT           reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)
    DOUBLE          reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)
    VOID            reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)
    STRING          reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)
    AUTO            reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)
    NUMBER          reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)
    STRING_L        reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)
    SCHAR           reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)
    IDENTIFIER      reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)
    DOUBLEBNOP      reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)
    OPERATOR        reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)


state 272

    (61) assignment_operator -> BANDEQOP .

    DPLUSOP         reduce using rule 61 (assignment_operator -> BANDEQOP .)
    DMINUSOP        reduce using rule 61 (assignment_operator -> BANDEQOP .)
    SIZEOF          reduce using rule 61 (assignment_operator -> BANDEQOP .)
    PLUSOP          reduce using rule 61 (assignment_operator -> BANDEQOP .)
    MINUSOP         reduce using rule 61 (assignment_operator -> BANDEQOP .)
    NOTSYM          reduce using rule 61 (assignment_operator -> BANDEQOP .)
    BNOP            reduce using rule 61 (assignment_operator -> BANDEQOP .)
    MULTOP          reduce using rule 61 (assignment_operator -> BANDEQOP .)
    BANDOP          reduce using rule 61 (assignment_operator -> BANDEQOP .)
    NEW             reduce using rule 61 (assignment_operator -> BANDEQOP .)
    DELETE          reduce using rule 61 (assignment_operator -> BANDEQOP .)
    THIS            reduce using rule 61 (assignment_operator -> BANDEQOP .)
    LPAREN          reduce using rule 61 (assignment_operator -> BANDEQOP .)
    CHAR            reduce using rule 61 (assignment_operator -> BANDEQOP .)
    SHORT           reduce using rule 61 (assignment_operator -> BANDEQOP .)
    INT             reduce using rule 61 (assignment_operator -> BANDEQOP .)
    LONG            reduce using rule 61 (assignment_operator -> BANDEQOP .)
    SIGNED          reduce using rule 61 (assignment_operator -> BANDEQOP .)
    UNSIGNED        reduce using rule 61 (assignment_operator -> BANDEQOP .)
    FLOAT           reduce using rule 61 (assignment_operator -> BANDEQOP .)
    DOUBLE          reduce using rule 61 (assignment_operator -> BANDEQOP .)
    VOID            reduce using rule 61 (assignment_operator -> BANDEQOP .)
    STRING          reduce using rule 61 (assignment_operator -> BANDEQOP .)
    AUTO            reduce using rule 61 (assignment_operator -> BANDEQOP .)
    NUMBER          reduce using rule 61 (assignment_operator -> BANDEQOP .)
    STRING_L        reduce using rule 61 (assignment_operator -> BANDEQOP .)
    SCHAR           reduce using rule 61 (assignment_operator -> BANDEQOP .)
    IDENTIFIER      reduce using rule 61 (assignment_operator -> BANDEQOP .)
    DOUBLEBNOP      reduce using rule 61 (assignment_operator -> BANDEQOP .)
    OPERATOR        reduce using rule 61 (assignment_operator -> BANDEQOP .)


state 273

    (62) assignment_operator -> BOREQOP .

    DPLUSOP         reduce using rule 62 (assignment_operator -> BOREQOP .)
    DMINUSOP        reduce using rule 62 (assignment_operator -> BOREQOP .)
    SIZEOF          reduce using rule 62 (assignment_operator -> BOREQOP .)
    PLUSOP          reduce using rule 62 (assignment_operator -> BOREQOP .)
    MINUSOP         reduce using rule 62 (assignment_operator -> BOREQOP .)
    NOTSYM          reduce using rule 62 (assignment_operator -> BOREQOP .)
    BNOP            reduce using rule 62 (assignment_operator -> BOREQOP .)
    MULTOP          reduce using rule 62 (assignment_operator -> BOREQOP .)
    BANDOP          reduce using rule 62 (assignment_operator -> BOREQOP .)
    NEW             reduce using rule 62 (assignment_operator -> BOREQOP .)
    DELETE          reduce using rule 62 (assignment_operator -> BOREQOP .)
    THIS            reduce using rule 62 (assignment_operator -> BOREQOP .)
    LPAREN          reduce using rule 62 (assignment_operator -> BOREQOP .)
    CHAR            reduce using rule 62 (assignment_operator -> BOREQOP .)
    SHORT           reduce using rule 62 (assignment_operator -> BOREQOP .)
    INT             reduce using rule 62 (assignment_operator -> BOREQOP .)
    LONG            reduce using rule 62 (assignment_operator -> BOREQOP .)
    SIGNED          reduce using rule 62 (assignment_operator -> BOREQOP .)
    UNSIGNED        reduce using rule 62 (assignment_operator -> BOREQOP .)
    FLOAT           reduce using rule 62 (assignment_operator -> BOREQOP .)
    DOUBLE          reduce using rule 62 (assignment_operator -> BOREQOP .)
    VOID            reduce using rule 62 (assignment_operator -> BOREQOP .)
    STRING          reduce using rule 62 (assignment_operator -> BOREQOP .)
    AUTO            reduce using rule 62 (assignment_operator -> BOREQOP .)
    NUMBER          reduce using rule 62 (assignment_operator -> BOREQOP .)
    STRING_L        reduce using rule 62 (assignment_operator -> BOREQOP .)
    SCHAR           reduce using rule 62 (assignment_operator -> BOREQOP .)
    IDENTIFIER      reduce using rule 62 (assignment_operator -> BOREQOP .)
    DOUBLEBNOP      reduce using rule 62 (assignment_operator -> BOREQOP .)
    OPERATOR        reduce using rule 62 (assignment_operator -> BOREQOP .)


state 274

    (14) conditional_expression -> logical_OR_expression QUESMARK . expression COLON conditional_expression
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (135) operator_function_name -> . OPERATOR operator_name
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression

    THROW           shift and go to state 224
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    THIS            shift and go to state 175
    LPAREN          shift and go to state 144
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    logical_OR_expression          shift and go to state 153
    expression                     shift and go to state 364
    conditional_expression         shift and go to state 151
    assignment_expression          shift and go to state 222
    throw_expression               shift and go to state 223
    unary_expression               shift and go to state 152
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    cast_expression                shift and go to state 158
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    logical_AND_expression         shift and go to state 163
    primary_expression             shift and go to state 164
    simple_type_name               shift and go to state 192
    name                           shift and go to state 166
    inclusive_OR_expression        shift and go to state 173
    literal                        shift and go to state 174
    exclusive_OR_expression        shift and go to state 176
    operator_function_name         shift and go to state 50
    AND_expression                 shift and go to state 180
    equality_expression            shift and go to state 181
    relational_expression          shift and go to state 182
    shift_expression               shift and go to state 183
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186

state 275

    (16) logical_OR_expression -> logical_OR_expression OROP . logical_AND_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (135) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 191
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    THIS            shift and go to state 175
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    logical_AND_expression         shift and go to state 365
    inclusive_OR_expression        shift and go to state 173
    exclusive_OR_expression        shift and go to state 176
    AND_expression                 shift and go to state 180
    equality_expression            shift and go to state 181
    relational_expression          shift and go to state 182
    shift_expression               shift and go to state 183
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186
    cast_expression                shift and go to state 158
    unary_expression               shift and go to state 190
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    primary_expression             shift and go to state 164
    simple_type_name               shift and go to state 192
    name                           shift and go to state 166
    literal                        shift and go to state 174
    operator_function_name         shift and go to state 50

state 276

    (92) postfix_expression -> postfix_expression LSPAREN . expression RSPAREN
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (135) operator_function_name -> . OPERATOR operator_name
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression

    THROW           shift and go to state 224
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    THIS            shift and go to state 175
    LPAREN          shift and go to state 144
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    postfix_expression             shift and go to state 154
    expression                     shift and go to state 366
    assignment_expression          shift and go to state 222
    throw_expression               shift and go to state 223
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    logical_OR_expression          shift and go to state 153
    unary1_operator                shift and go to state 157
    cast_expression                shift and go to state 158
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    logical_AND_expression         shift and go to state 163
    primary_expression             shift and go to state 164
    simple_type_name               shift and go to state 192
    name                           shift and go to state 166
    inclusive_OR_expression        shift and go to state 173
    literal                        shift and go to state 174
    exclusive_OR_expression        shift and go to state 176
    operator_function_name         shift and go to state 50
    AND_expression                 shift and go to state 180
    equality_expression            shift and go to state 181
    relational_expression          shift and go to state 182
    shift_expression               shift and go to state 183
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186

state 277

    (93) postfix_expression -> postfix_expression LPAREN . expression_list RPAREN
    (95) postfix_expression -> postfix_expression LPAREN . RPAREN
    (294) expression_list -> . assignment_expression
    (295) expression_list -> . expression_list COMMA assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (135) operator_function_name -> . OPERATOR operator_name
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 368
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    THIS            shift and go to state 175
    LPAREN          shift and go to state 144
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    postfix_expression             shift and go to state 154
    expression_list                shift and go to state 367
    assignment_expression          shift and go to state 149
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    logical_OR_expression          shift and go to state 153
    unary1_operator                shift and go to state 157
    cast_expression                shift and go to state 158
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    logical_AND_expression         shift and go to state 163
    primary_expression             shift and go to state 164
    simple_type_name               shift and go to state 192
    name                           shift and go to state 166
    inclusive_OR_expression        shift and go to state 173
    literal                        shift and go to state 174
    exclusive_OR_expression        shift and go to state 176
    operator_function_name         shift and go to state 50
    AND_expression                 shift and go to state 180
    equality_expression            shift and go to state 181
    relational_expression          shift and go to state 182
    shift_expression               shift and go to state 183
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186

state 278

    (94) postfix_expression -> postfix_expression template_class_name . LPAREN expression_list RPAREN

    LPAREN          shift and go to state 369


state 279

    (98) postfix_expression -> postfix_expression DOT . name
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (135) operator_function_name -> . OPERATOR operator_name

    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    name                           shift and go to state 370
    operator_function_name         shift and go to state 50

state 280

    (99) postfix_expression -> postfix_expression ARROW . name
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (135) operator_function_name -> . OPERATOR operator_name

    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    name                           shift and go to state 371
    operator_function_name         shift and go to state 50

state 281

    (100) postfix_expression -> postfix_expression DPLUSOP .

    LSPAREN         reduce using rule 100 (postfix_expression -> postfix_expression DPLUSOP .)
    LPAREN          reduce using rule 100 (postfix_expression -> postfix_expression DPLUSOP .)
    DOT             reduce using rule 100 (postfix_expression -> postfix_expression DPLUSOP .)
    ARROW           reduce using rule 100 (postfix_expression -> postfix_expression DPLUSOP .)
    DPLUSOP         reduce using rule 100 (postfix_expression -> postfix_expression DPLUSOP .)
    DMINUSOP        reduce using rule 100 (postfix_expression -> postfix_expression DPLUSOP .)
    LTEMPLATE       reduce using rule 100 (postfix_expression -> postfix_expression DPLUSOP .)
    EQUAL           reduce using rule 100 (postfix_expression -> postfix_expression DPLUSOP .)
    MULTEQOP        reduce using rule 100 (postfix_expression -> postfix_expression DPLUSOP .)
    DIVEQOP         reduce using rule 100 (postfix_expression -> postfix_expression DPLUSOP .)
    MODEQOP         reduce using rule 100 (postfix_expression -> postfix_expression DPLUSOP .)
    PLUSEQOP        reduce using rule 100 (postfix_expression -> postfix_expression DPLUSOP .)
    MINUSEQOP       reduce using rule 100 (postfix_expression -> postfix_expression DPLUSOP .)
    LSHIFTEQOP      reduce using rule 100 (postfix_expression -> postfix_expression DPLUSOP .)
    RSHIFTEQOP      reduce using rule 100 (postfix_expression -> postfix_expression DPLUSOP .)
    BANDEQOP        reduce using rule 100 (postfix_expression -> postfix_expression DPLUSOP .)
    BOREQOP         reduce using rule 100 (postfix_expression -> postfix_expression DPLUSOP .)
    DOTSTAR         reduce using rule 100 (postfix_expression -> postfix_expression DPLUSOP .)
    ARROWSTAR       reduce using rule 100 (postfix_expression -> postfix_expression DPLUSOP .)
    MULTOP          reduce using rule 100 (postfix_expression -> postfix_expression DPLUSOP .)
    DIVOP           reduce using rule 100 (postfix_expression -> postfix_expression DPLUSOP .)
    MODOP           reduce using rule 100 (postfix_expression -> postfix_expression DPLUSOP .)
    PLUSOP          reduce using rule 100 (postfix_expression -> postfix_expression DPLUSOP .)
    MINUSOP         reduce using rule 100 (postfix_expression -> postfix_expression DPLUSOP .)
    LSHIFT          reduce using rule 100 (postfix_expression -> postfix_expression DPLUSOP .)
    RSHIFT          reduce using rule 100 (postfix_expression -> postfix_expression DPLUSOP .)
    LTCOMP          reduce using rule 100 (postfix_expression -> postfix_expression DPLUSOP .)
    GTCOMP          reduce using rule 100 (postfix_expression -> postfix_expression DPLUSOP .)
    LTECOMP         reduce using rule 100 (postfix_expression -> postfix_expression DPLUSOP .)
    GTECOMP         reduce using rule 100 (postfix_expression -> postfix_expression DPLUSOP .)
    EQCOMP          reduce using rule 100 (postfix_expression -> postfix_expression DPLUSOP .)
    NEQCOMP         reduce using rule 100 (postfix_expression -> postfix_expression DPLUSOP .)
    BANDOP          reduce using rule 100 (postfix_expression -> postfix_expression DPLUSOP .)
    XOROP           reduce using rule 100 (postfix_expression -> postfix_expression DPLUSOP .)
    OROP            reduce using rule 100 (postfix_expression -> postfix_expression DPLUSOP .)
    ANDOP           reduce using rule 100 (postfix_expression -> postfix_expression DPLUSOP .)
    QUESMARK        reduce using rule 100 (postfix_expression -> postfix_expression DPLUSOP .)
    RPAREN          reduce using rule 100 (postfix_expression -> postfix_expression DPLUSOP .)
    COMMA           reduce using rule 100 (postfix_expression -> postfix_expression DPLUSOP .)
    RSPAREN         reduce using rule 100 (postfix_expression -> postfix_expression DPLUSOP .)
    SEMICOLON       reduce using rule 100 (postfix_expression -> postfix_expression DPLUSOP .)
    RCPAREN         reduce using rule 100 (postfix_expression -> postfix_expression DPLUSOP .)
    COLON           reduce using rule 100 (postfix_expression -> postfix_expression DPLUSOP .)
    RTEMPLATE       reduce using rule 100 (postfix_expression -> postfix_expression DPLUSOP .)


state 282

    (101) postfix_expression -> postfix_expression DMINUSOP .

    LSPAREN         reduce using rule 101 (postfix_expression -> postfix_expression DMINUSOP .)
    LPAREN          reduce using rule 101 (postfix_expression -> postfix_expression DMINUSOP .)
    DOT             reduce using rule 101 (postfix_expression -> postfix_expression DMINUSOP .)
    ARROW           reduce using rule 101 (postfix_expression -> postfix_expression DMINUSOP .)
    DPLUSOP         reduce using rule 101 (postfix_expression -> postfix_expression DMINUSOP .)
    DMINUSOP        reduce using rule 101 (postfix_expression -> postfix_expression DMINUSOP .)
    LTEMPLATE       reduce using rule 101 (postfix_expression -> postfix_expression DMINUSOP .)
    EQUAL           reduce using rule 101 (postfix_expression -> postfix_expression DMINUSOP .)
    MULTEQOP        reduce using rule 101 (postfix_expression -> postfix_expression DMINUSOP .)
    DIVEQOP         reduce using rule 101 (postfix_expression -> postfix_expression DMINUSOP .)
    MODEQOP         reduce using rule 101 (postfix_expression -> postfix_expression DMINUSOP .)
    PLUSEQOP        reduce using rule 101 (postfix_expression -> postfix_expression DMINUSOP .)
    MINUSEQOP       reduce using rule 101 (postfix_expression -> postfix_expression DMINUSOP .)
    LSHIFTEQOP      reduce using rule 101 (postfix_expression -> postfix_expression DMINUSOP .)
    RSHIFTEQOP      reduce using rule 101 (postfix_expression -> postfix_expression DMINUSOP .)
    BANDEQOP        reduce using rule 101 (postfix_expression -> postfix_expression DMINUSOP .)
    BOREQOP         reduce using rule 101 (postfix_expression -> postfix_expression DMINUSOP .)
    DOTSTAR         reduce using rule 101 (postfix_expression -> postfix_expression DMINUSOP .)
    ARROWSTAR       reduce using rule 101 (postfix_expression -> postfix_expression DMINUSOP .)
    MULTOP          reduce using rule 101 (postfix_expression -> postfix_expression DMINUSOP .)
    DIVOP           reduce using rule 101 (postfix_expression -> postfix_expression DMINUSOP .)
    MODOP           reduce using rule 101 (postfix_expression -> postfix_expression DMINUSOP .)
    PLUSOP          reduce using rule 101 (postfix_expression -> postfix_expression DMINUSOP .)
    MINUSOP         reduce using rule 101 (postfix_expression -> postfix_expression DMINUSOP .)
    LSHIFT          reduce using rule 101 (postfix_expression -> postfix_expression DMINUSOP .)
    RSHIFT          reduce using rule 101 (postfix_expression -> postfix_expression DMINUSOP .)
    LTCOMP          reduce using rule 101 (postfix_expression -> postfix_expression DMINUSOP .)
    GTCOMP          reduce using rule 101 (postfix_expression -> postfix_expression DMINUSOP .)
    LTECOMP         reduce using rule 101 (postfix_expression -> postfix_expression DMINUSOP .)
    GTECOMP         reduce using rule 101 (postfix_expression -> postfix_expression DMINUSOP .)
    EQCOMP          reduce using rule 101 (postfix_expression -> postfix_expression DMINUSOP .)
    NEQCOMP         reduce using rule 101 (postfix_expression -> postfix_expression DMINUSOP .)
    BANDOP          reduce using rule 101 (postfix_expression -> postfix_expression DMINUSOP .)
    XOROP           reduce using rule 101 (postfix_expression -> postfix_expression DMINUSOP .)
    OROP            reduce using rule 101 (postfix_expression -> postfix_expression DMINUSOP .)
    ANDOP           reduce using rule 101 (postfix_expression -> postfix_expression DMINUSOP .)
    QUESMARK        reduce using rule 101 (postfix_expression -> postfix_expression DMINUSOP .)
    RPAREN          reduce using rule 101 (postfix_expression -> postfix_expression DMINUSOP .)
    COMMA           reduce using rule 101 (postfix_expression -> postfix_expression DMINUSOP .)
    RSPAREN         reduce using rule 101 (postfix_expression -> postfix_expression DMINUSOP .)
    SEMICOLON       reduce using rule 101 (postfix_expression -> postfix_expression DMINUSOP .)
    RCPAREN         reduce using rule 101 (postfix_expression -> postfix_expression DMINUSOP .)
    COLON           reduce using rule 101 (postfix_expression -> postfix_expression DMINUSOP .)
    RTEMPLATE       reduce using rule 101 (postfix_expression -> postfix_expression DMINUSOP .)


state 283

    (64) unary_expression -> DPLUSOP unary_expression .

    EQUAL           reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    MULTEQOP        reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    DIVEQOP         reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    MODEQOP         reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    PLUSEQOP        reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    MINUSEQOP       reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    LSHIFTEQOP      reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    RSHIFTEQOP      reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    BANDEQOP        reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    BOREQOP         reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    DOTSTAR         reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    ARROWSTAR       reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    MULTOP          reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    DIVOP           reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    MODOP           reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    PLUSOP          reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    MINUSOP         reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    LSHIFT          reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    RSHIFT          reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    LTCOMP          reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    GTCOMP          reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    LTECOMP         reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    GTECOMP         reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    EQCOMP          reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    NEQCOMP         reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    BANDOP          reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    XOROP           reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    OROP            reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    ANDOP           reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    QUESMARK        reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    RPAREN          reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    COMMA           reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    RSPAREN         reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    SEMICOLON       reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    RCPAREN         reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    COLON           reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    RTEMPLATE       reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)


state 284

    (104) primary_expression -> LPAREN . expression RPAREN
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (135) operator_function_name -> . OPERATOR operator_name
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression

    THROW           shift and go to state 224
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    THIS            shift and go to state 175
    LPAREN          shift and go to state 144
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    expression                     shift and go to state 257
    assignment_expression          shift and go to state 222
    throw_expression               shift and go to state 223
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    logical_OR_expression          shift and go to state 153
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    cast_expression                shift and go to state 158
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    logical_AND_expression         shift and go to state 163
    primary_expression             shift and go to state 164
    simple_type_name               shift and go to state 192
    name                           shift and go to state 166
    inclusive_OR_expression        shift and go to state 173
    literal                        shift and go to state 174
    exclusive_OR_expression        shift and go to state 176
    operator_function_name         shift and go to state 50
    AND_expression                 shift and go to state 180
    equality_expression            shift and go to state 181
    relational_expression          shift and go to state 182
    shift_expression               shift and go to state 183
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186

state 285

    (65) unary_expression -> DMINUSOP unary_expression .

    EQUAL           reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    MULTEQOP        reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    DIVEQOP         reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    MODEQOP         reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    PLUSEQOP        reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    MINUSEQOP       reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    LSHIFTEQOP      reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    RSHIFTEQOP      reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    BANDEQOP        reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    BOREQOP         reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    DOTSTAR         reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    ARROWSTAR       reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    MULTOP          reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    DIVOP           reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    MODOP           reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    PLUSOP          reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    MINUSOP         reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    LSHIFT          reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    RSHIFT          reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    LTCOMP          reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    GTCOMP          reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    LTECOMP         reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    GTECOMP         reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    EQCOMP          reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    NEQCOMP         reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    BANDOP          reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    XOROP           reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    OROP            reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    ANDOP           reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    QUESMARK        reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    RPAREN          reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    COMMA           reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    RSPAREN         reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    SEMICOLON       reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    RCPAREN         reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    COLON           reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    RTEMPLATE       reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)


state 286

    (66) unary_expression -> unary1_operator cast_expression .

    EQUAL           reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    MULTEQOP        reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    DIVEQOP         reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    MODEQOP         reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    PLUSEQOP        reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    MINUSEQOP       reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    LSHIFTEQOP      reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    RSHIFTEQOP      reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    BANDEQOP        reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    BOREQOP         reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    DOTSTAR         reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    ARROWSTAR       reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    MULTOP          reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    DIVOP           reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    MODOP           reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    PLUSOP          reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    MINUSOP         reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    LSHIFT          reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    RSHIFT          reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    LTCOMP          reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    GTCOMP          reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    LTECOMP         reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    GTECOMP         reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    EQCOMP          reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    NEQCOMP         reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    BANDOP          reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    XOROP           reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    OROP            reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    ANDOP           reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    QUESMARK        reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    RPAREN          reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    COMMA           reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    RSPAREN         reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    SEMICOLON       reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    RCPAREN         reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    COLON           reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    RTEMPLATE       reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)


state 287

    (67) unary_expression -> unary2_operator cast_expression .

    EQUAL           reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    MULTEQOP        reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    DIVEQOP         reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    MODEQOP         reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    PLUSEQOP        reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    MINUSEQOP       reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    LSHIFTEQOP      reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    RSHIFTEQOP      reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    BANDEQOP        reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    BOREQOP         reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    DOTSTAR         reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    ARROWSTAR       reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    MULTOP          reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    DIVOP           reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    MODOP           reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    PLUSOP          reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    MINUSOP         reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    LSHIFT          reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    RSHIFT          reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    LTCOMP          reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    GTCOMP          reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    LTECOMP         reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    GTECOMP         reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    EQCOMP          reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    NEQCOMP         reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    BANDOP          reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    XOROP           reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    OROP            reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    ANDOP           reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    QUESMARK        reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    RPAREN          reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    COMMA           reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    RSPAREN         reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    SEMICOLON       reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    RCPAREN         reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    COLON           reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    RTEMPLATE       reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)


state 288

    (68) unary_expression -> SIZEOF unary_expression .

    EQUAL           reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    MULTEQOP        reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    DIVEQOP         reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    MODEQOP         reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    PLUSEQOP        reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    MINUSEQOP       reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    LSHIFTEQOP      reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    RSHIFTEQOP      reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    BANDEQOP        reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    BOREQOP         reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    DOTSTAR         reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    ARROWSTAR       reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    MULTOP          reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    DIVOP           reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    MODOP           reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    PLUSOP          reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    MINUSOP         reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    LSHIFT          reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    RSHIFT          reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    LTCOMP          reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    GTCOMP          reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    LTECOMP         reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    GTECOMP         reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    EQCOMP          reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    NEQCOMP         reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    BANDOP          reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    XOROP           reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    OROP            reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    ANDOP           reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    QUESMARK        reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    RPAREN          reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    COMMA           reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    RSPAREN         reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    SEMICOLON       reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    RCPAREN         reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    COLON           reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    RTEMPLATE       reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)


state 289

    (69) unary_expression -> SIZEOF LPAREN . type_name RPAREN
    (104) primary_expression -> LPAREN . expression RPAREN
    (177) type_name -> . type_specifier_ abstract_declarator
    (178) type_name -> . type_specifier_
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (179) type_specifier_ -> . CONST type_specifier
    (180) type_specifier_ -> . TYPEDEF type_specifier
    (181) type_specifier_ -> . type_specifier
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (182) type_specifier -> . simple_type_name
    (183) type_specifier -> . complex_type_specifier
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (195) complex_type_specifier -> . class_key IDENTIFIER
    (196) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (197) complex_type_specifier -> . TYPE IDENTIFIER
    (198) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (211) class_key -> . CLASS
    (212) class_key -> . STRUCT
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (135) operator_function_name -> . OPERATOR operator_name
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression

    CONST           shift and go to state 14
    TYPEDEF         shift and go to state 16
    THROW           shift and go to state 224
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    TYPE            shift and go to state 34
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    CLASS           shift and go to state 35
    STRUCT          shift and go to state 36
    THIS            shift and go to state 175
    LPAREN          shift and go to state 144
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    type_name                      shift and go to state 372
    expression                     shift and go to state 257
    type_specifier_                shift and go to state 256
    assignment_expression          shift and go to state 222
    throw_expression               shift and go to state 223
    type_specifier                 shift and go to state 15
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    simple_type_name               shift and go to state 225
    complex_type_specifier         shift and go to state 21
    logical_OR_expression          shift and go to state 153
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    cast_expression                shift and go to state 158
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    class_key                      shift and go to state 57
    logical_AND_expression         shift and go to state 163
    primary_expression             shift and go to state 164
    name                           shift and go to state 166
    inclusive_OR_expression        shift and go to state 173
    literal                        shift and go to state 174
    exclusive_OR_expression        shift and go to state 176
    operator_function_name         shift and go to state 50
    AND_expression                 shift and go to state 180
    equality_expression            shift and go to state 181
    relational_expression          shift and go to state 182
    shift_expression               shift and go to state 183
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186

state 290

    (18) logical_AND_expression -> logical_AND_expression ANDOP . inclusive_OR_expression
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (135) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 191
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    THIS            shift and go to state 175
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    inclusive_OR_expression        shift and go to state 373
    exclusive_OR_expression        shift and go to state 176
    AND_expression                 shift and go to state 180
    equality_expression            shift and go to state 181
    relational_expression          shift and go to state 182
    shift_expression               shift and go to state 183
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186
    cast_expression                shift and go to state 158
    unary_expression               shift and go to state 190
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    primary_expression             shift and go to state 164
    simple_type_name               shift and go to state 192
    name                           shift and go to state 166
    literal                        shift and go to state 174
    operator_function_name         shift and go to state 50

state 291

    (96) postfix_expression -> simple_type_name LPAREN . expression_list RPAREN
    (97) postfix_expression -> simple_type_name LPAREN . RPAREN
    (294) expression_list -> . assignment_expression
    (295) expression_list -> . expression_list COMMA assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (135) operator_function_name -> . OPERATOR operator_name
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 375
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    THIS            shift and go to state 175
    LPAREN          shift and go to state 144
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    simple_type_name               shift and go to state 192
    expression_list                shift and go to state 374
    assignment_expression          shift and go to state 149
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    logical_OR_expression          shift and go to state 153
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    cast_expression                shift and go to state 158
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    logical_AND_expression         shift and go to state 163
    primary_expression             shift and go to state 164
    name                           shift and go to state 166
    inclusive_OR_expression        shift and go to state 173
    literal                        shift and go to state 174
    exclusive_OR_expression        shift and go to state 176
    operator_function_name         shift and go to state 50
    AND_expression                 shift and go to state 180
    equality_expression            shift and go to state 181
    relational_expression          shift and go to state 182
    shift_expression               shift and go to state 183
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186

state 292

    (73) allocation_expression -> NEW new_type_name . new_initializer
    (74) allocation_expression -> NEW new_type_name .
    (83) new_initializer -> . LPAREN initializer_list RPAREN
    (84) new_initializer -> . LPAREN RPAREN

    EQUAL           reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    MULTEQOP        reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    DIVEQOP         reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    MODEQOP         reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    PLUSEQOP        reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    MINUSEQOP       reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    LSHIFTEQOP      reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    RSHIFTEQOP      reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    BANDEQOP        reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    BOREQOP         reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    DOTSTAR         reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    ARROWSTAR       reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    MULTOP          reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    DIVOP           reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    MODOP           reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    PLUSOP          reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    MINUSOP         reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    LSHIFT          reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    RSHIFT          reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    LTCOMP          reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    GTCOMP          reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    LTECOMP         reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    GTECOMP         reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    EQCOMP          reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    NEQCOMP         reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    BANDOP          reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    XOROP           reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    OROP            reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    ANDOP           reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    QUESMARK        reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    RPAREN          reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    COMMA           reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    RSPAREN         reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    SEMICOLON       reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    RCPAREN         reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    COLON           reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    RTEMPLATE       reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    LPAREN          shift and go to state 377

    new_initializer                shift and go to state 376

state 293

    (75) allocation_expression -> NEW LPAREN . type_name RPAREN new_initializer
    (76) allocation_expression -> NEW LPAREN . type_name RPAREN
    (177) type_name -> . type_specifier_ abstract_declarator
    (178) type_name -> . type_specifier_
    (179) type_specifier_ -> . CONST type_specifier
    (180) type_specifier_ -> . TYPEDEF type_specifier
    (181) type_specifier_ -> . type_specifier
    (182) type_specifier -> . simple_type_name
    (183) type_specifier -> . complex_type_specifier
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (195) complex_type_specifier -> . class_key IDENTIFIER
    (196) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (197) complex_type_specifier -> . TYPE IDENTIFIER
    (198) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (211) class_key -> . CLASS
    (212) class_key -> . STRUCT

    CONST           shift and go to state 14
    TYPEDEF         shift and go to state 16
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    TYPE            shift and go to state 34
    CLASS           shift and go to state 35
    STRUCT          shift and go to state 36

    type_name                      shift and go to state 378
    type_specifier_                shift and go to state 256
    type_specifier                 shift and go to state 15
    simple_type_name               shift and go to state 20
    complex_type_specifier         shift and go to state 21
    class_key                      shift and go to state 57

state 294

    (77) new_type_name -> type_specifier_ . new_declarator
    (78) new_type_name -> type_specifier_ .
    (79) new_declarator -> . new_declarator MULTOP
    (80) new_declarator -> . MULTOP
    (81) new_declarator -> . new_declarator LSPAREN expression RSPAREN
    (82) new_declarator -> . LSPAREN expression RSPAREN

  ! shift/reduce conflict for MULTOP resolved as shift
    LPAREN          reduce using rule 78 (new_type_name -> type_specifier_ .)
    EQUAL           reduce using rule 78 (new_type_name -> type_specifier_ .)
    MULTEQOP        reduce using rule 78 (new_type_name -> type_specifier_ .)
    DIVEQOP         reduce using rule 78 (new_type_name -> type_specifier_ .)
    MODEQOP         reduce using rule 78 (new_type_name -> type_specifier_ .)
    PLUSEQOP        reduce using rule 78 (new_type_name -> type_specifier_ .)
    MINUSEQOP       reduce using rule 78 (new_type_name -> type_specifier_ .)
    LSHIFTEQOP      reduce using rule 78 (new_type_name -> type_specifier_ .)
    RSHIFTEQOP      reduce using rule 78 (new_type_name -> type_specifier_ .)
    BANDEQOP        reduce using rule 78 (new_type_name -> type_specifier_ .)
    BOREQOP         reduce using rule 78 (new_type_name -> type_specifier_ .)
    DOTSTAR         reduce using rule 78 (new_type_name -> type_specifier_ .)
    ARROWSTAR       reduce using rule 78 (new_type_name -> type_specifier_ .)
    DIVOP           reduce using rule 78 (new_type_name -> type_specifier_ .)
    MODOP           reduce using rule 78 (new_type_name -> type_specifier_ .)
    PLUSOP          reduce using rule 78 (new_type_name -> type_specifier_ .)
    MINUSOP         reduce using rule 78 (new_type_name -> type_specifier_ .)
    LSHIFT          reduce using rule 78 (new_type_name -> type_specifier_ .)
    RSHIFT          reduce using rule 78 (new_type_name -> type_specifier_ .)
    LTCOMP          reduce using rule 78 (new_type_name -> type_specifier_ .)
    GTCOMP          reduce using rule 78 (new_type_name -> type_specifier_ .)
    LTECOMP         reduce using rule 78 (new_type_name -> type_specifier_ .)
    GTECOMP         reduce using rule 78 (new_type_name -> type_specifier_ .)
    EQCOMP          reduce using rule 78 (new_type_name -> type_specifier_ .)
    NEQCOMP         reduce using rule 78 (new_type_name -> type_specifier_ .)
    BANDOP          reduce using rule 78 (new_type_name -> type_specifier_ .)
    XOROP           reduce using rule 78 (new_type_name -> type_specifier_ .)
    OROP            reduce using rule 78 (new_type_name -> type_specifier_ .)
    ANDOP           reduce using rule 78 (new_type_name -> type_specifier_ .)
    QUESMARK        reduce using rule 78 (new_type_name -> type_specifier_ .)
    RPAREN          reduce using rule 78 (new_type_name -> type_specifier_ .)
    COMMA           reduce using rule 78 (new_type_name -> type_specifier_ .)
    RSPAREN         reduce using rule 78 (new_type_name -> type_specifier_ .)
    SEMICOLON       reduce using rule 78 (new_type_name -> type_specifier_ .)
    RCPAREN         reduce using rule 78 (new_type_name -> type_specifier_ .)
    COLON           reduce using rule 78 (new_type_name -> type_specifier_ .)
    RTEMPLATE       reduce using rule 78 (new_type_name -> type_specifier_ .)
    MULTOP          shift and go to state 380
    LSPAREN         shift and go to state 381

  ! MULTOP          [ reduce using rule 78 (new_type_name -> type_specifier_ .) ]

    new_declarator                 shift and go to state 379

state 295

    (72) deallocation_expression -> DELETE cast_expression .

    EQUAL           reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    MULTEQOP        reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    DIVEQOP         reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    MODEQOP         reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    PLUSEQOP        reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    MINUSEQOP       reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    LSHIFTEQOP      reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    RSHIFTEQOP      reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    BANDEQOP        reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    BOREQOP         reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    DOTSTAR         reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    ARROWSTAR       reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    MULTOP          reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    DIVOP           reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    MODOP           reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    PLUSOP          reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    MINUSOP         reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    LSHIFT          reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    RSHIFT          reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    LTCOMP          reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    GTCOMP          reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    LTECOMP         reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    GTECOMP         reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    EQCOMP          reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    NEQCOMP         reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    BANDOP          reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    XOROP           reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    OROP            reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    ANDOP           reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    QUESMARK        reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    RPAREN          reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    COMMA           reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    RSPAREN         reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    SEMICOLON       reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    RCPAREN         reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    COLON           reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    RTEMPLATE       reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)


state 296

    (20) inclusive_OR_expression -> inclusive_OR_expression OROP . exclusive_OR_expression
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (135) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 191
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    THIS            shift and go to state 175
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    exclusive_OR_expression        shift and go to state 382
    AND_expression                 shift and go to state 180
    equality_expression            shift and go to state 181
    relational_expression          shift and go to state 182
    shift_expression               shift and go to state 183
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186
    cast_expression                shift and go to state 158
    unary_expression               shift and go to state 190
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    primary_expression             shift and go to state 164
    simple_type_name               shift and go to state 192
    name                           shift and go to state 166
    literal                        shift and go to state 174
    operator_function_name         shift and go to state 50

state 297

    (22) exclusive_OR_expression -> exclusive_OR_expression XOROP . AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (135) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 191
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    THIS            shift and go to state 175
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    AND_expression                 shift and go to state 383
    equality_expression            shift and go to state 181
    relational_expression          shift and go to state 182
    shift_expression               shift and go to state 183
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186
    cast_expression                shift and go to state 158
    unary_expression               shift and go to state 190
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    primary_expression             shift and go to state 164
    simple_type_name               shift and go to state 192
    name                           shift and go to state 166
    literal                        shift and go to state 174
    operator_function_name         shift and go to state 50

state 298

    (24) AND_expression -> AND_expression BANDOP . equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (135) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 191
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    THIS            shift and go to state 175
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    equality_expression            shift and go to state 384
    relational_expression          shift and go to state 182
    shift_expression               shift and go to state 183
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186
    cast_expression                shift and go to state 158
    unary_expression               shift and go to state 190
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    primary_expression             shift and go to state 164
    simple_type_name               shift and go to state 192
    name                           shift and go to state 166
    literal                        shift and go to state 174
    operator_function_name         shift and go to state 50

state 299

    (26) equality_expression -> equality_expression EQCOMP . relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (135) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 191
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    THIS            shift and go to state 175
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    relational_expression          shift and go to state 385
    shift_expression               shift and go to state 183
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186
    cast_expression                shift and go to state 158
    unary_expression               shift and go to state 190
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    primary_expression             shift and go to state 164
    simple_type_name               shift and go to state 192
    name                           shift and go to state 166
    literal                        shift and go to state 174
    operator_function_name         shift and go to state 50

state 300

    (27) equality_expression -> equality_expression NEQCOMP . relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (135) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 191
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    THIS            shift and go to state 175
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    relational_expression          shift and go to state 386
    shift_expression               shift and go to state 183
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186
    cast_expression                shift and go to state 158
    unary_expression               shift and go to state 190
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    primary_expression             shift and go to state 164
    simple_type_name               shift and go to state 192
    name                           shift and go to state 166
    literal                        shift and go to state 174
    operator_function_name         shift and go to state 50

state 301

    (29) relational_expression -> relational_expression LTCOMP . shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (135) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 191
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    THIS            shift and go to state 175
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    shift_expression               shift and go to state 387
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186
    cast_expression                shift and go to state 158
    unary_expression               shift and go to state 190
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    primary_expression             shift and go to state 164
    simple_type_name               shift and go to state 192
    name                           shift and go to state 166
    literal                        shift and go to state 174
    operator_function_name         shift and go to state 50

state 302

    (30) relational_expression -> relational_expression GTCOMP . shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (135) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 191
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    THIS            shift and go to state 175
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    shift_expression               shift and go to state 388
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186
    cast_expression                shift and go to state 158
    unary_expression               shift and go to state 190
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    primary_expression             shift and go to state 164
    simple_type_name               shift and go to state 192
    name                           shift and go to state 166
    literal                        shift and go to state 174
    operator_function_name         shift and go to state 50

state 303

    (31) relational_expression -> relational_expression LTECOMP . shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (135) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 191
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    THIS            shift and go to state 175
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    shift_expression               shift and go to state 389
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186
    cast_expression                shift and go to state 158
    unary_expression               shift and go to state 190
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    primary_expression             shift and go to state 164
    simple_type_name               shift and go to state 192
    name                           shift and go to state 166
    literal                        shift and go to state 174
    operator_function_name         shift and go to state 50

state 304

    (32) relational_expression -> relational_expression GTECOMP . shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (135) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 191
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    THIS            shift and go to state 175
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    shift_expression               shift and go to state 390
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186
    cast_expression                shift and go to state 158
    unary_expression               shift and go to state 190
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    primary_expression             shift and go to state 164
    simple_type_name               shift and go to state 192
    name                           shift and go to state 166
    literal                        shift and go to state 174
    operator_function_name         shift and go to state 50

state 305

    (34) shift_expression -> shift_expression LSHIFT . additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (135) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 191
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    THIS            shift and go to state 175
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    additive_expression            shift and go to state 391
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186
    cast_expression                shift and go to state 158
    unary_expression               shift and go to state 190
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    primary_expression             shift and go to state 164
    simple_type_name               shift and go to state 192
    name                           shift and go to state 166
    literal                        shift and go to state 174
    operator_function_name         shift and go to state 50

state 306

    (35) shift_expression -> shift_expression RSHIFT . additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (135) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 191
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    THIS            shift and go to state 175
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    additive_expression            shift and go to state 392
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186
    cast_expression                shift and go to state 158
    unary_expression               shift and go to state 190
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    primary_expression             shift and go to state 164
    simple_type_name               shift and go to state 192
    name                           shift and go to state 166
    literal                        shift and go to state 174
    operator_function_name         shift and go to state 50

state 307

    (37) additive_expression -> additive_expression PLUSOP . multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (135) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 191
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    THIS            shift and go to state 175
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    multiplicative_expression      shift and go to state 393
    pm_expression                  shift and go to state 186
    cast_expression                shift and go to state 158
    unary_expression               shift and go to state 190
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    primary_expression             shift and go to state 164
    simple_type_name               shift and go to state 192
    name                           shift and go to state 166
    literal                        shift and go to state 174
    operator_function_name         shift and go to state 50

state 308

    (38) additive_expression -> additive_expression MINUSOP . multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (135) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 191
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    THIS            shift and go to state 175
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    multiplicative_expression      shift and go to state 394
    pm_expression                  shift and go to state 186
    cast_expression                shift and go to state 158
    unary_expression               shift and go to state 190
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    primary_expression             shift and go to state 164
    simple_type_name               shift and go to state 192
    name                           shift and go to state 166
    literal                        shift and go to state 174
    operator_function_name         shift and go to state 50

state 309

    (40) multiplicative_expression -> multiplicative_expression MULTOP . pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (135) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 191
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    THIS            shift and go to state 175
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    pm_expression                  shift and go to state 395
    cast_expression                shift and go to state 158
    unary_expression               shift and go to state 190
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    primary_expression             shift and go to state 164
    simple_type_name               shift and go to state 192
    name                           shift and go to state 166
    literal                        shift and go to state 174
    operator_function_name         shift and go to state 50

state 310

    (41) multiplicative_expression -> multiplicative_expression DIVOP . pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (135) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 191
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    THIS            shift and go to state 175
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    pm_expression                  shift and go to state 396
    cast_expression                shift and go to state 158
    unary_expression               shift and go to state 190
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    primary_expression             shift and go to state 164
    simple_type_name               shift and go to state 192
    name                           shift and go to state 166
    literal                        shift and go to state 174
    operator_function_name         shift and go to state 50

state 311

    (42) multiplicative_expression -> multiplicative_expression MODOP . pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (135) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 191
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    THIS            shift and go to state 175
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    pm_expression                  shift and go to state 397
    cast_expression                shift and go to state 158
    unary_expression               shift and go to state 190
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    primary_expression             shift and go to state 164
    simple_type_name               shift and go to state 192
    name                           shift and go to state 166
    literal                        shift and go to state 174
    operator_function_name         shift and go to state 50

state 312

    (44) pm_expression -> pm_expression DOTSTAR . cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (135) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 191
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    THIS            shift and go to state 175
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    cast_expression                shift and go to state 398
    unary_expression               shift and go to state 190
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    primary_expression             shift and go to state 164
    simple_type_name               shift and go to state 192
    name                           shift and go to state 166
    literal                        shift and go to state 174
    operator_function_name         shift and go to state 50

state 313

    (45) pm_expression -> pm_expression ARROWSTAR . cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (135) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 191
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    THIS            shift and go to state 175
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    cast_expression                shift and go to state 399
    unary_expression               shift and go to state 190
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    primary_expression             shift and go to state 164
    simple_type_name               shift and go to state 192
    name                           shift and go to state 166
    literal                        shift and go to state 174
    operator_function_name         shift and go to state 50

state 314

    (120) declarator -> declarator LSPAREN constant_expression RSPAREN .

    LPAREN          reduce using rule 120 (declarator -> declarator LSPAREN constant_expression RSPAREN .)
    LSPAREN         reduce using rule 120 (declarator -> declarator LSPAREN constant_expression RSPAREN .)
    EQUAL           reduce using rule 120 (declarator -> declarator LSPAREN constant_expression RSPAREN .)
    LCPAREN         reduce using rule 120 (declarator -> declarator LSPAREN constant_expression RSPAREN .)
    SEMICOLON       reduce using rule 120 (declarator -> declarator LSPAREN constant_expression RSPAREN .)
    COMMA           reduce using rule 120 (declarator -> declarator LSPAREN constant_expression RSPAREN .)
    RTEMPLATE       reduce using rule 120 (declarator -> declarator LSPAREN constant_expression RSPAREN .)
    RPAREN          reduce using rule 120 (declarator -> declarator LSPAREN constant_expression RSPAREN .)


state 315

    (291) initializer_list -> LCPAREN . initializer_list RCPAREN
    (292) initializer_list -> LCPAREN . initializer_list COMMA RCPAREN
    (289) initializer_list -> . assignment_expression
    (290) initializer_list -> . initializer_list COMMA assignment_expression
    (291) initializer_list -> . LCPAREN initializer_list RCPAREN
    (292) initializer_list -> . LCPAREN initializer_list COMMA RCPAREN
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (135) operator_function_name -> . OPERATOR operator_name
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LCPAREN         shift and go to state 315
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    THIS            shift and go to state 175
    LPAREN          shift and go to state 144
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    initializer_list               shift and go to state 400
    assignment_expression          shift and go to state 317
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    logical_OR_expression          shift and go to state 153
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    cast_expression                shift and go to state 158
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    logical_AND_expression         shift and go to state 163
    primary_expression             shift and go to state 164
    simple_type_name               shift and go to state 192
    name                           shift and go to state 166
    inclusive_OR_expression        shift and go to state 173
    literal                        shift and go to state 174
    exclusive_OR_expression        shift and go to state 176
    operator_function_name         shift and go to state 50
    AND_expression                 shift and go to state 180
    equality_expression            shift and go to state 181
    relational_expression          shift and go to state 182
    shift_expression               shift and go to state 183
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186

state 316

    (286) initializer -> EQUAL LCPAREN initializer_list . RCPAREN
    (287) initializer -> EQUAL LCPAREN initializer_list . COMMA RCPAREN
    (290) initializer_list -> initializer_list . COMMA assignment_expression

    RCPAREN         shift and go to state 401
    COMMA           shift and go to state 402


state 317

    (289) initializer_list -> assignment_expression .

    RCPAREN         reduce using rule 289 (initializer_list -> assignment_expression .)
    COMMA           reduce using rule 289 (initializer_list -> assignment_expression .)
    RPAREN          reduce using rule 289 (initializer_list -> assignment_expression .)


state 318

    (237) compound_statement -> LCPAREN statement_list RCPAREN .

    CONST           reduce using rule 237 (compound_statement -> LCPAREN statement_list RCPAREN .)
    TYPEDEF         reduce using rule 237 (compound_statement -> LCPAREN statement_list RCPAREN .)
    ASM             reduce using rule 237 (compound_statement -> LCPAREN statement_list RCPAREN .)
    TEMPLATE        reduce using rule 237 (compound_statement -> LCPAREN statement_list RCPAREN .)
    CHAR            reduce using rule 237 (compound_statement -> LCPAREN statement_list RCPAREN .)
    SHORT           reduce using rule 237 (compound_statement -> LCPAREN statement_list RCPAREN .)
    INT             reduce using rule 237 (compound_statement -> LCPAREN statement_list RCPAREN .)
    LONG            reduce using rule 237 (compound_statement -> LCPAREN statement_list RCPAREN .)
    SIGNED          reduce using rule 237 (compound_statement -> LCPAREN statement_list RCPAREN .)
    UNSIGNED        reduce using rule 237 (compound_statement -> LCPAREN statement_list RCPAREN .)
    FLOAT           reduce using rule 237 (compound_statement -> LCPAREN statement_list RCPAREN .)
    DOUBLE          reduce using rule 237 (compound_statement -> LCPAREN statement_list RCPAREN .)
    VOID            reduce using rule 237 (compound_statement -> LCPAREN statement_list RCPAREN .)
    STRING          reduce using rule 237 (compound_statement -> LCPAREN statement_list RCPAREN .)
    AUTO            reduce using rule 237 (compound_statement -> LCPAREN statement_list RCPAREN .)
    TYPE            reduce using rule 237 (compound_statement -> LCPAREN statement_list RCPAREN .)
    CLASS           reduce using rule 237 (compound_statement -> LCPAREN statement_list RCPAREN .)
    STRUCT          reduce using rule 237 (compound_statement -> LCPAREN statement_list RCPAREN .)
    $end            reduce using rule 237 (compound_statement -> LCPAREN statement_list RCPAREN .)
    RCPAREN         reduce using rule 237 (compound_statement -> LCPAREN statement_list RCPAREN .)
    IDENTIFIER      reduce using rule 237 (compound_statement -> LCPAREN statement_list RCPAREN .)
    CASE            reduce using rule 237 (compound_statement -> LCPAREN statement_list RCPAREN .)
    DEFAULT         reduce using rule 237 (compound_statement -> LCPAREN statement_list RCPAREN .)
    SEMICOLON       reduce using rule 237 (compound_statement -> LCPAREN statement_list RCPAREN .)
    LCPAREN         reduce using rule 237 (compound_statement -> LCPAREN statement_list RCPAREN .)
    IF              reduce using rule 237 (compound_statement -> LCPAREN statement_list RCPAREN .)
    SWITCH          reduce using rule 237 (compound_statement -> LCPAREN statement_list RCPAREN .)
    WHILE           reduce using rule 237 (compound_statement -> LCPAREN statement_list RCPAREN .)
    DO              reduce using rule 237 (compound_statement -> LCPAREN statement_list RCPAREN .)
    FOR             reduce using rule 237 (compound_statement -> LCPAREN statement_list RCPAREN .)
    BREAK           reduce using rule 237 (compound_statement -> LCPAREN statement_list RCPAREN .)
    CONTINUE        reduce using rule 237 (compound_statement -> LCPAREN statement_list RCPAREN .)
    RETURN          reduce using rule 237 (compound_statement -> LCPAREN statement_list RCPAREN .)
    GOTO            reduce using rule 237 (compound_statement -> LCPAREN statement_list RCPAREN .)
    TRY             reduce using rule 237 (compound_statement -> LCPAREN statement_list RCPAREN .)
    THROW           reduce using rule 237 (compound_statement -> LCPAREN statement_list RCPAREN .)
    DPLUSOP         reduce using rule 237 (compound_statement -> LCPAREN statement_list RCPAREN .)
    DMINUSOP        reduce using rule 237 (compound_statement -> LCPAREN statement_list RCPAREN .)
    SIZEOF          reduce using rule 237 (compound_statement -> LCPAREN statement_list RCPAREN .)
    PLUSOP          reduce using rule 237 (compound_statement -> LCPAREN statement_list RCPAREN .)
    MINUSOP         reduce using rule 237 (compound_statement -> LCPAREN statement_list RCPAREN .)
    NOTSYM          reduce using rule 237 (compound_statement -> LCPAREN statement_list RCPAREN .)
    BNOP            reduce using rule 237 (compound_statement -> LCPAREN statement_list RCPAREN .)
    MULTOP          reduce using rule 237 (compound_statement -> LCPAREN statement_list RCPAREN .)
    BANDOP          reduce using rule 237 (compound_statement -> LCPAREN statement_list RCPAREN .)
    NEW             reduce using rule 237 (compound_statement -> LCPAREN statement_list RCPAREN .)
    DELETE          reduce using rule 237 (compound_statement -> LCPAREN statement_list RCPAREN .)
    THIS            reduce using rule 237 (compound_statement -> LCPAREN statement_list RCPAREN .)
    LPAREN          reduce using rule 237 (compound_statement -> LCPAREN statement_list RCPAREN .)
    NUMBER          reduce using rule 237 (compound_statement -> LCPAREN statement_list RCPAREN .)
    STRING_L        reduce using rule 237 (compound_statement -> LCPAREN statement_list RCPAREN .)
    SCHAR           reduce using rule 237 (compound_statement -> LCPAREN statement_list RCPAREN .)
    DOUBLEBNOP      reduce using rule 237 (compound_statement -> LCPAREN statement_list RCPAREN .)
    OPERATOR        reduce using rule 237 (compound_statement -> LCPAREN statement_list RCPAREN .)
    ELSE            reduce using rule 237 (compound_statement -> LCPAREN statement_list RCPAREN .)
    CATCH           reduce using rule 237 (compound_statement -> LCPAREN statement_list RCPAREN .)
    PRIVATE         reduce using rule 237 (compound_statement -> LCPAREN statement_list RCPAREN .)
    PROTECTED       reduce using rule 237 (compound_statement -> LCPAREN statement_list RCPAREN .)
    PUBLIC          reduce using rule 237 (compound_statement -> LCPAREN statement_list RCPAREN .)


state 319

    (240) statement_list -> statement_list statement .

    RCPAREN         reduce using rule 240 (statement_list -> statement_list statement .)
    IDENTIFIER      reduce using rule 240 (statement_list -> statement_list statement .)
    CASE            reduce using rule 240 (statement_list -> statement_list statement .)
    DEFAULT         reduce using rule 240 (statement_list -> statement_list statement .)
    SEMICOLON       reduce using rule 240 (statement_list -> statement_list statement .)
    LCPAREN         reduce using rule 240 (statement_list -> statement_list statement .)
    IF              reduce using rule 240 (statement_list -> statement_list statement .)
    SWITCH          reduce using rule 240 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 240 (statement_list -> statement_list statement .)
    DO              reduce using rule 240 (statement_list -> statement_list statement .)
    FOR             reduce using rule 240 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 240 (statement_list -> statement_list statement .)
    CONTINUE        reduce using rule 240 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 240 (statement_list -> statement_list statement .)
    GOTO            reduce using rule 240 (statement_list -> statement_list statement .)
    TRY             reduce using rule 240 (statement_list -> statement_list statement .)
    THROW           reduce using rule 240 (statement_list -> statement_list statement .)
    CONST           reduce using rule 240 (statement_list -> statement_list statement .)
    TYPEDEF         reduce using rule 240 (statement_list -> statement_list statement .)
    ASM             reduce using rule 240 (statement_list -> statement_list statement .)
    TEMPLATE        reduce using rule 240 (statement_list -> statement_list statement .)
    DPLUSOP         reduce using rule 240 (statement_list -> statement_list statement .)
    DMINUSOP        reduce using rule 240 (statement_list -> statement_list statement .)
    SIZEOF          reduce using rule 240 (statement_list -> statement_list statement .)
    PLUSOP          reduce using rule 240 (statement_list -> statement_list statement .)
    MINUSOP         reduce using rule 240 (statement_list -> statement_list statement .)
    NOTSYM          reduce using rule 240 (statement_list -> statement_list statement .)
    BNOP            reduce using rule 240 (statement_list -> statement_list statement .)
    MULTOP          reduce using rule 240 (statement_list -> statement_list statement .)
    BANDOP          reduce using rule 240 (statement_list -> statement_list statement .)
    NEW             reduce using rule 240 (statement_list -> statement_list statement .)
    DELETE          reduce using rule 240 (statement_list -> statement_list statement .)
    CHAR            reduce using rule 240 (statement_list -> statement_list statement .)
    SHORT           reduce using rule 240 (statement_list -> statement_list statement .)
    INT             reduce using rule 240 (statement_list -> statement_list statement .)
    LONG            reduce using rule 240 (statement_list -> statement_list statement .)
    SIGNED          reduce using rule 240 (statement_list -> statement_list statement .)
    UNSIGNED        reduce using rule 240 (statement_list -> statement_list statement .)
    FLOAT           reduce using rule 240 (statement_list -> statement_list statement .)
    DOUBLE          reduce using rule 240 (statement_list -> statement_list statement .)
    VOID            reduce using rule 240 (statement_list -> statement_list statement .)
    STRING          reduce using rule 240 (statement_list -> statement_list statement .)
    AUTO            reduce using rule 240 (statement_list -> statement_list statement .)
    TYPE            reduce using rule 240 (statement_list -> statement_list statement .)
    CLASS           reduce using rule 240 (statement_list -> statement_list statement .)
    STRUCT          reduce using rule 240 (statement_list -> statement_list statement .)
    THIS            reduce using rule 240 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 240 (statement_list -> statement_list statement .)
    NUMBER          reduce using rule 240 (statement_list -> statement_list statement .)
    STRING_L        reduce using rule 240 (statement_list -> statement_list statement .)
    SCHAR           reduce using rule 240 (statement_list -> statement_list statement .)
    DOUBLEBNOP      reduce using rule 240 (statement_list -> statement_list statement .)
    OPERATOR        reduce using rule 240 (statement_list -> statement_list statement .)


state 320

    (258) labeled_statement -> IDENTIFIER COLON . statement
    (241) statement -> . labeled_statement
    (242) statement -> . expression_statement
    (243) statement -> . compound_statement
    (244) statement -> . selection_statement
    (245) statement -> . iteration_statement
    (246) statement -> . jump_statement
    (247) statement -> . declaration_statement
    (248) statement -> . try_block
    (258) labeled_statement -> . IDENTIFIER COLON statement
    (259) labeled_statement -> . CASE constant_expression COLON statement
    (260) labeled_statement -> . DEFAULT COLON statement
    (269) expression_statement -> . expression SEMICOLON
    (270) expression_statement -> . SEMICOLON
    (237) compound_statement -> . LCPAREN statement_list RCPAREN
    (238) compound_statement -> . LCPAREN RCPAREN
    (254) selection_statement -> . IF LPAREN expression RPAREN statement
    (255) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (256) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (261) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (262) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (263) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (264) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (265) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (266) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (249) jump_statement -> . BREAK SEMICOLON
    (250) jump_statement -> . CONTINUE SEMICOLON
    (251) jump_statement -> . RETURN expression SEMICOLON
    (252) jump_statement -> . RETURN SEMICOLON
    (253) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (271) declaration_statement -> . declaration
    (257) try_block -> . TRY compound_statement CATCH compound_statement
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (272) declaration -> . type_specifier_ declarator_list SEMICOLON
    (273) declaration -> . type_specifier_ SEMICOLON
    (274) declaration -> . asm_declaration
    (275) declaration -> . function_definition
    (276) declaration -> . class_define_specifier SEMICOLON
    (277) declaration -> . template_declaration
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (179) type_specifier_ -> . CONST type_specifier
    (180) type_specifier_ -> . TYPEDEF type_specifier
    (181) type_specifier_ -> . type_specifier
    (293) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (235) function_definition -> . type_specifier_ declarator fct_body
    (213) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (214) class_define_specifier -> . class_head LCPAREN RCPAREN
    (278) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (182) type_specifier -> . simple_type_name
    (183) type_specifier -> . complex_type_specifier
    (200) class_head -> . class_key IDENTIFIER base_spec
    (201) class_head -> . class_key IDENTIFIER
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (195) complex_type_specifier -> . class_key IDENTIFIER
    (196) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (197) complex_type_specifier -> . TYPE IDENTIFIER
    (198) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (211) class_key -> . CLASS
    (212) class_key -> . STRUCT
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (135) operator_function_name -> . OPERATOR operator_name
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 206
    CASE            shift and go to state 207
    DEFAULT         shift and go to state 208
    SEMICOLON       shift and go to state 210
    LCPAREN         shift and go to state 73
    IF              shift and go to state 211
    SWITCH          shift and go to state 212
    WHILE           shift and go to state 213
    DO              shift and go to state 214
    FOR             shift and go to state 215
    BREAK           shift and go to state 216
    CONTINUE        shift and go to state 217
    RETURN          shift and go to state 218
    GOTO            shift and go to state 219
    TRY             shift and go to state 221
    THROW           shift and go to state 224
    CONST           shift and go to state 14
    TYPEDEF         shift and go to state 16
    ASM             shift and go to state 17
    TEMPLATE        shift and go to state 19
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    TYPE            shift and go to state 34
    CLASS           shift and go to state 35
    STRUCT          shift and go to state 36
    THIS            shift and go to state 175
    LPAREN          shift and go to state 144
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    statement                      shift and go to state 403
    labeled_statement              shift and go to state 198
    expression_statement           shift and go to state 199
    compound_statement             shift and go to state 200
    selection_statement            shift and go to state 201
    iteration_statement            shift and go to state 202
    jump_statement                 shift and go to state 203
    declaration_statement          shift and go to state 204
    try_block                      shift and go to state 205
    expression                     shift and go to state 209
    declaration                    shift and go to state 220
    assignment_expression          shift and go to state 222
    throw_expression               shift and go to state 223
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    class_define_specifier         shift and go to state 12
    template_declaration           shift and go to state 13
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    type_specifier                 shift and go to state 15
    class_head                     shift and go to state 18
    logical_OR_expression          shift and go to state 153
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    cast_expression                shift and go to state 158
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    simple_type_name               shift and go to state 225
    complex_type_specifier         shift and go to state 21
    class_key                      shift and go to state 22
    logical_AND_expression         shift and go to state 163
    primary_expression             shift and go to state 164
    name                           shift and go to state 166
    inclusive_OR_expression        shift and go to state 173
    literal                        shift and go to state 174
    exclusive_OR_expression        shift and go to state 176
    operator_function_name         shift and go to state 50
    AND_expression                 shift and go to state 180
    equality_expression            shift and go to state 181
    relational_expression          shift and go to state 182
    shift_expression               shift and go to state 183
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186

state 321

    (259) labeled_statement -> CASE constant_expression . COLON statement

    COLON           shift and go to state 404


state 322

    (260) labeled_statement -> DEFAULT COLON . statement
    (241) statement -> . labeled_statement
    (242) statement -> . expression_statement
    (243) statement -> . compound_statement
    (244) statement -> . selection_statement
    (245) statement -> . iteration_statement
    (246) statement -> . jump_statement
    (247) statement -> . declaration_statement
    (248) statement -> . try_block
    (258) labeled_statement -> . IDENTIFIER COLON statement
    (259) labeled_statement -> . CASE constant_expression COLON statement
    (260) labeled_statement -> . DEFAULT COLON statement
    (269) expression_statement -> . expression SEMICOLON
    (270) expression_statement -> . SEMICOLON
    (237) compound_statement -> . LCPAREN statement_list RCPAREN
    (238) compound_statement -> . LCPAREN RCPAREN
    (254) selection_statement -> . IF LPAREN expression RPAREN statement
    (255) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (256) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (261) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (262) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (263) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (264) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (265) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (266) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (249) jump_statement -> . BREAK SEMICOLON
    (250) jump_statement -> . CONTINUE SEMICOLON
    (251) jump_statement -> . RETURN expression SEMICOLON
    (252) jump_statement -> . RETURN SEMICOLON
    (253) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (271) declaration_statement -> . declaration
    (257) try_block -> . TRY compound_statement CATCH compound_statement
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (272) declaration -> . type_specifier_ declarator_list SEMICOLON
    (273) declaration -> . type_specifier_ SEMICOLON
    (274) declaration -> . asm_declaration
    (275) declaration -> . function_definition
    (276) declaration -> . class_define_specifier SEMICOLON
    (277) declaration -> . template_declaration
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (179) type_specifier_ -> . CONST type_specifier
    (180) type_specifier_ -> . TYPEDEF type_specifier
    (181) type_specifier_ -> . type_specifier
    (293) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (235) function_definition -> . type_specifier_ declarator fct_body
    (213) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (214) class_define_specifier -> . class_head LCPAREN RCPAREN
    (278) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (182) type_specifier -> . simple_type_name
    (183) type_specifier -> . complex_type_specifier
    (200) class_head -> . class_key IDENTIFIER base_spec
    (201) class_head -> . class_key IDENTIFIER
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (195) complex_type_specifier -> . class_key IDENTIFIER
    (196) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (197) complex_type_specifier -> . TYPE IDENTIFIER
    (198) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (211) class_key -> . CLASS
    (212) class_key -> . STRUCT
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (135) operator_function_name -> . OPERATOR operator_name
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 206
    CASE            shift and go to state 207
    DEFAULT         shift and go to state 208
    SEMICOLON       shift and go to state 210
    LCPAREN         shift and go to state 73
    IF              shift and go to state 211
    SWITCH          shift and go to state 212
    WHILE           shift and go to state 213
    DO              shift and go to state 214
    FOR             shift and go to state 215
    BREAK           shift and go to state 216
    CONTINUE        shift and go to state 217
    RETURN          shift and go to state 218
    GOTO            shift and go to state 219
    TRY             shift and go to state 221
    THROW           shift and go to state 224
    CONST           shift and go to state 14
    TYPEDEF         shift and go to state 16
    ASM             shift and go to state 17
    TEMPLATE        shift and go to state 19
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    TYPE            shift and go to state 34
    CLASS           shift and go to state 35
    STRUCT          shift and go to state 36
    THIS            shift and go to state 175
    LPAREN          shift and go to state 144
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    statement                      shift and go to state 405
    labeled_statement              shift and go to state 198
    expression_statement           shift and go to state 199
    compound_statement             shift and go to state 200
    selection_statement            shift and go to state 201
    iteration_statement            shift and go to state 202
    jump_statement                 shift and go to state 203
    declaration_statement          shift and go to state 204
    try_block                      shift and go to state 205
    expression                     shift and go to state 209
    declaration                    shift and go to state 220
    assignment_expression          shift and go to state 222
    throw_expression               shift and go to state 223
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    class_define_specifier         shift and go to state 12
    template_declaration           shift and go to state 13
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    type_specifier                 shift and go to state 15
    class_head                     shift and go to state 18
    logical_OR_expression          shift and go to state 153
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    cast_expression                shift and go to state 158
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    simple_type_name               shift and go to state 225
    complex_type_specifier         shift and go to state 21
    class_key                      shift and go to state 22
    logical_AND_expression         shift and go to state 163
    primary_expression             shift and go to state 164
    name                           shift and go to state 166
    inclusive_OR_expression        shift and go to state 173
    literal                        shift and go to state 174
    exclusive_OR_expression        shift and go to state 176
    operator_function_name         shift and go to state 50
    AND_expression                 shift and go to state 180
    equality_expression            shift and go to state 181
    relational_expression          shift and go to state 182
    shift_expression               shift and go to state 183
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186

state 323

    (269) expression_statement -> expression SEMICOLON .

    RCPAREN         reduce using rule 269 (expression_statement -> expression SEMICOLON .)
    IDENTIFIER      reduce using rule 269 (expression_statement -> expression SEMICOLON .)
    CASE            reduce using rule 269 (expression_statement -> expression SEMICOLON .)
    DEFAULT         reduce using rule 269 (expression_statement -> expression SEMICOLON .)
    SEMICOLON       reduce using rule 269 (expression_statement -> expression SEMICOLON .)
    LCPAREN         reduce using rule 269 (expression_statement -> expression SEMICOLON .)
    IF              reduce using rule 269 (expression_statement -> expression SEMICOLON .)
    SWITCH          reduce using rule 269 (expression_statement -> expression SEMICOLON .)
    WHILE           reduce using rule 269 (expression_statement -> expression SEMICOLON .)
    DO              reduce using rule 269 (expression_statement -> expression SEMICOLON .)
    FOR             reduce using rule 269 (expression_statement -> expression SEMICOLON .)
    BREAK           reduce using rule 269 (expression_statement -> expression SEMICOLON .)
    CONTINUE        reduce using rule 269 (expression_statement -> expression SEMICOLON .)
    RETURN          reduce using rule 269 (expression_statement -> expression SEMICOLON .)
    GOTO            reduce using rule 269 (expression_statement -> expression SEMICOLON .)
    TRY             reduce using rule 269 (expression_statement -> expression SEMICOLON .)
    THROW           reduce using rule 269 (expression_statement -> expression SEMICOLON .)
    CONST           reduce using rule 269 (expression_statement -> expression SEMICOLON .)
    TYPEDEF         reduce using rule 269 (expression_statement -> expression SEMICOLON .)
    ASM             reduce using rule 269 (expression_statement -> expression SEMICOLON .)
    TEMPLATE        reduce using rule 269 (expression_statement -> expression SEMICOLON .)
    DPLUSOP         reduce using rule 269 (expression_statement -> expression SEMICOLON .)
    DMINUSOP        reduce using rule 269 (expression_statement -> expression SEMICOLON .)
    SIZEOF          reduce using rule 269 (expression_statement -> expression SEMICOLON .)
    PLUSOP          reduce using rule 269 (expression_statement -> expression SEMICOLON .)
    MINUSOP         reduce using rule 269 (expression_statement -> expression SEMICOLON .)
    NOTSYM          reduce using rule 269 (expression_statement -> expression SEMICOLON .)
    BNOP            reduce using rule 269 (expression_statement -> expression SEMICOLON .)
    MULTOP          reduce using rule 269 (expression_statement -> expression SEMICOLON .)
    BANDOP          reduce using rule 269 (expression_statement -> expression SEMICOLON .)
    NEW             reduce using rule 269 (expression_statement -> expression SEMICOLON .)
    DELETE          reduce using rule 269 (expression_statement -> expression SEMICOLON .)
    CHAR            reduce using rule 269 (expression_statement -> expression SEMICOLON .)
    SHORT           reduce using rule 269 (expression_statement -> expression SEMICOLON .)
    INT             reduce using rule 269 (expression_statement -> expression SEMICOLON .)
    LONG            reduce using rule 269 (expression_statement -> expression SEMICOLON .)
    SIGNED          reduce using rule 269 (expression_statement -> expression SEMICOLON .)
    UNSIGNED        reduce using rule 269 (expression_statement -> expression SEMICOLON .)
    FLOAT           reduce using rule 269 (expression_statement -> expression SEMICOLON .)
    DOUBLE          reduce using rule 269 (expression_statement -> expression SEMICOLON .)
    VOID            reduce using rule 269 (expression_statement -> expression SEMICOLON .)
    STRING          reduce using rule 269 (expression_statement -> expression SEMICOLON .)
    AUTO            reduce using rule 269 (expression_statement -> expression SEMICOLON .)
    TYPE            reduce using rule 269 (expression_statement -> expression SEMICOLON .)
    CLASS           reduce using rule 269 (expression_statement -> expression SEMICOLON .)
    STRUCT          reduce using rule 269 (expression_statement -> expression SEMICOLON .)
    THIS            reduce using rule 269 (expression_statement -> expression SEMICOLON .)
    LPAREN          reduce using rule 269 (expression_statement -> expression SEMICOLON .)
    NUMBER          reduce using rule 269 (expression_statement -> expression SEMICOLON .)
    STRING_L        reduce using rule 269 (expression_statement -> expression SEMICOLON .)
    SCHAR           reduce using rule 269 (expression_statement -> expression SEMICOLON .)
    DOUBLEBNOP      reduce using rule 269 (expression_statement -> expression SEMICOLON .)
    OPERATOR        reduce using rule 269 (expression_statement -> expression SEMICOLON .)
    ELSE            reduce using rule 269 (expression_statement -> expression SEMICOLON .)


state 324

    (48) expression -> expression COMMA . assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (135) operator_function_name -> . OPERATOR operator_name
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    THIS            shift and go to state 175
    LPAREN          shift and go to state 144
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    assignment_expression          shift and go to state 406
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    logical_OR_expression          shift and go to state 153
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    cast_expression                shift and go to state 158
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    logical_AND_expression         shift and go to state 163
    primary_expression             shift and go to state 164
    simple_type_name               shift and go to state 192
    name                           shift and go to state 166
    inclusive_OR_expression        shift and go to state 173
    literal                        shift and go to state 174
    exclusive_OR_expression        shift and go to state 176
    operator_function_name         shift and go to state 50
    AND_expression                 shift and go to state 180
    equality_expression            shift and go to state 181
    relational_expression          shift and go to state 182
    shift_expression               shift and go to state 183
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186

state 325

    (254) selection_statement -> IF LPAREN . expression RPAREN statement
    (255) selection_statement -> IF LPAREN . expression RPAREN statement ELSE statement
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (135) operator_function_name -> . OPERATOR operator_name
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression

    THROW           shift and go to state 224
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    THIS            shift and go to state 175
    LPAREN          shift and go to state 144
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    expression                     shift and go to state 407
    assignment_expression          shift and go to state 222
    throw_expression               shift and go to state 223
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    logical_OR_expression          shift and go to state 153
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    cast_expression                shift and go to state 158
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    logical_AND_expression         shift and go to state 163
    primary_expression             shift and go to state 164
    simple_type_name               shift and go to state 192
    name                           shift and go to state 166
    inclusive_OR_expression        shift and go to state 173
    literal                        shift and go to state 174
    exclusive_OR_expression        shift and go to state 176
    operator_function_name         shift and go to state 50
    AND_expression                 shift and go to state 180
    equality_expression            shift and go to state 181
    relational_expression          shift and go to state 182
    shift_expression               shift and go to state 183
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186

state 326

    (256) selection_statement -> SWITCH LPAREN . expression RPAREN statement
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (135) operator_function_name -> . OPERATOR operator_name
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression

    THROW           shift and go to state 224
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    THIS            shift and go to state 175
    LPAREN          shift and go to state 144
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    expression                     shift and go to state 408
    assignment_expression          shift and go to state 222
    throw_expression               shift and go to state 223
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    logical_OR_expression          shift and go to state 153
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    cast_expression                shift and go to state 158
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    logical_AND_expression         shift and go to state 163
    primary_expression             shift and go to state 164
    simple_type_name               shift and go to state 192
    name                           shift and go to state 166
    inclusive_OR_expression        shift and go to state 173
    literal                        shift and go to state 174
    exclusive_OR_expression        shift and go to state 176
    operator_function_name         shift and go to state 50
    AND_expression                 shift and go to state 180
    equality_expression            shift and go to state 181
    relational_expression          shift and go to state 182
    shift_expression               shift and go to state 183
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186

state 327

    (261) iteration_statement -> WHILE LPAREN . expression RPAREN statement
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (135) operator_function_name -> . OPERATOR operator_name
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression

    THROW           shift and go to state 224
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    THIS            shift and go to state 175
    LPAREN          shift and go to state 144
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    expression                     shift and go to state 409
    assignment_expression          shift and go to state 222
    throw_expression               shift and go to state 223
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    logical_OR_expression          shift and go to state 153
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    cast_expression                shift and go to state 158
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    logical_AND_expression         shift and go to state 163
    primary_expression             shift and go to state 164
    simple_type_name               shift and go to state 192
    name                           shift and go to state 166
    inclusive_OR_expression        shift and go to state 173
    literal                        shift and go to state 174
    exclusive_OR_expression        shift and go to state 176
    operator_function_name         shift and go to state 50
    AND_expression                 shift and go to state 180
    equality_expression            shift and go to state 181
    relational_expression          shift and go to state 182
    shift_expression               shift and go to state 183
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186

state 328

    (262) iteration_statement -> DO statement . WHILE LPAREN expression RPAREN SEMICOLON

    WHILE           shift and go to state 410


state 329

    (263) iteration_statement -> FOR LPAREN . for_init_statement expression SEMICOLON expression RPAREN statement
    (264) iteration_statement -> FOR LPAREN . for_init_statement SEMICOLON expression RPAREN statement
    (265) iteration_statement -> FOR LPAREN . for_init_statement expression SEMICOLON RPAREN statement
    (266) iteration_statement -> FOR LPAREN . for_init_statement SEMICOLON RPAREN statement
    (267) for_init_statement -> . expression_statement
    (268) for_init_statement -> . declaration_statement
    (269) expression_statement -> . expression SEMICOLON
    (270) expression_statement -> . SEMICOLON
    (271) declaration_statement -> . declaration
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (272) declaration -> . type_specifier_ declarator_list SEMICOLON
    (273) declaration -> . type_specifier_ SEMICOLON
    (274) declaration -> . asm_declaration
    (275) declaration -> . function_definition
    (276) declaration -> . class_define_specifier SEMICOLON
    (277) declaration -> . template_declaration
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (179) type_specifier_ -> . CONST type_specifier
    (180) type_specifier_ -> . TYPEDEF type_specifier
    (181) type_specifier_ -> . type_specifier
    (293) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (235) function_definition -> . type_specifier_ declarator fct_body
    (213) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (214) class_define_specifier -> . class_head LCPAREN RCPAREN
    (278) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (182) type_specifier -> . simple_type_name
    (183) type_specifier -> . complex_type_specifier
    (200) class_head -> . class_key IDENTIFIER base_spec
    (201) class_head -> . class_key IDENTIFIER
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (195) complex_type_specifier -> . class_key IDENTIFIER
    (196) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (197) complex_type_specifier -> . TYPE IDENTIFIER
    (198) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (211) class_key -> . CLASS
    (212) class_key -> . STRUCT
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (135) operator_function_name -> . OPERATOR operator_name
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMICOLON       shift and go to state 210
    THROW           shift and go to state 224
    CONST           shift and go to state 14
    TYPEDEF         shift and go to state 16
    ASM             shift and go to state 17
    TEMPLATE        shift and go to state 19
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    TYPE            shift and go to state 34
    CLASS           shift and go to state 35
    STRUCT          shift and go to state 36
    THIS            shift and go to state 175
    LPAREN          shift and go to state 144
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    for_init_statement             shift and go to state 411
    expression                     shift and go to state 209
    expression_statement           shift and go to state 412
    declaration_statement          shift and go to state 413
    declaration                    shift and go to state 220
    assignment_expression          shift and go to state 222
    throw_expression               shift and go to state 223
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    class_define_specifier         shift and go to state 12
    template_declaration           shift and go to state 13
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    type_specifier                 shift and go to state 15
    class_head                     shift and go to state 18
    logical_OR_expression          shift and go to state 153
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    cast_expression                shift and go to state 158
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    simple_type_name               shift and go to state 225
    complex_type_specifier         shift and go to state 21
    class_key                      shift and go to state 22
    logical_AND_expression         shift and go to state 163
    primary_expression             shift and go to state 164
    name                           shift and go to state 166
    inclusive_OR_expression        shift and go to state 173
    literal                        shift and go to state 174
    exclusive_OR_expression        shift and go to state 176
    operator_function_name         shift and go to state 50
    AND_expression                 shift and go to state 180
    equality_expression            shift and go to state 181
    relational_expression          shift and go to state 182
    shift_expression               shift and go to state 183
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186

state 330

    (249) jump_statement -> BREAK SEMICOLON .

    RCPAREN         reduce using rule 249 (jump_statement -> BREAK SEMICOLON .)
    IDENTIFIER      reduce using rule 249 (jump_statement -> BREAK SEMICOLON .)
    CASE            reduce using rule 249 (jump_statement -> BREAK SEMICOLON .)
    DEFAULT         reduce using rule 249 (jump_statement -> BREAK SEMICOLON .)
    SEMICOLON       reduce using rule 249 (jump_statement -> BREAK SEMICOLON .)
    LCPAREN         reduce using rule 249 (jump_statement -> BREAK SEMICOLON .)
    IF              reduce using rule 249 (jump_statement -> BREAK SEMICOLON .)
    SWITCH          reduce using rule 249 (jump_statement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 249 (jump_statement -> BREAK SEMICOLON .)
    DO              reduce using rule 249 (jump_statement -> BREAK SEMICOLON .)
    FOR             reduce using rule 249 (jump_statement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 249 (jump_statement -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 249 (jump_statement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 249 (jump_statement -> BREAK SEMICOLON .)
    GOTO            reduce using rule 249 (jump_statement -> BREAK SEMICOLON .)
    TRY             reduce using rule 249 (jump_statement -> BREAK SEMICOLON .)
    THROW           reduce using rule 249 (jump_statement -> BREAK SEMICOLON .)
    CONST           reduce using rule 249 (jump_statement -> BREAK SEMICOLON .)
    TYPEDEF         reduce using rule 249 (jump_statement -> BREAK SEMICOLON .)
    ASM             reduce using rule 249 (jump_statement -> BREAK SEMICOLON .)
    TEMPLATE        reduce using rule 249 (jump_statement -> BREAK SEMICOLON .)
    DPLUSOP         reduce using rule 249 (jump_statement -> BREAK SEMICOLON .)
    DMINUSOP        reduce using rule 249 (jump_statement -> BREAK SEMICOLON .)
    SIZEOF          reduce using rule 249 (jump_statement -> BREAK SEMICOLON .)
    PLUSOP          reduce using rule 249 (jump_statement -> BREAK SEMICOLON .)
    MINUSOP         reduce using rule 249 (jump_statement -> BREAK SEMICOLON .)
    NOTSYM          reduce using rule 249 (jump_statement -> BREAK SEMICOLON .)
    BNOP            reduce using rule 249 (jump_statement -> BREAK SEMICOLON .)
    MULTOP          reduce using rule 249 (jump_statement -> BREAK SEMICOLON .)
    BANDOP          reduce using rule 249 (jump_statement -> BREAK SEMICOLON .)
    NEW             reduce using rule 249 (jump_statement -> BREAK SEMICOLON .)
    DELETE          reduce using rule 249 (jump_statement -> BREAK SEMICOLON .)
    CHAR            reduce using rule 249 (jump_statement -> BREAK SEMICOLON .)
    SHORT           reduce using rule 249 (jump_statement -> BREAK SEMICOLON .)
    INT             reduce using rule 249 (jump_statement -> BREAK SEMICOLON .)
    LONG            reduce using rule 249 (jump_statement -> BREAK SEMICOLON .)
    SIGNED          reduce using rule 249 (jump_statement -> BREAK SEMICOLON .)
    UNSIGNED        reduce using rule 249 (jump_statement -> BREAK SEMICOLON .)
    FLOAT           reduce using rule 249 (jump_statement -> BREAK SEMICOLON .)
    DOUBLE          reduce using rule 249 (jump_statement -> BREAK SEMICOLON .)
    VOID            reduce using rule 249 (jump_statement -> BREAK SEMICOLON .)
    STRING          reduce using rule 249 (jump_statement -> BREAK SEMICOLON .)
    AUTO            reduce using rule 249 (jump_statement -> BREAK SEMICOLON .)
    TYPE            reduce using rule 249 (jump_statement -> BREAK SEMICOLON .)
    CLASS           reduce using rule 249 (jump_statement -> BREAK SEMICOLON .)
    STRUCT          reduce using rule 249 (jump_statement -> BREAK SEMICOLON .)
    THIS            reduce using rule 249 (jump_statement -> BREAK SEMICOLON .)
    LPAREN          reduce using rule 249 (jump_statement -> BREAK SEMICOLON .)
    NUMBER          reduce using rule 249 (jump_statement -> BREAK SEMICOLON .)
    STRING_L        reduce using rule 249 (jump_statement -> BREAK SEMICOLON .)
    SCHAR           reduce using rule 249 (jump_statement -> BREAK SEMICOLON .)
    DOUBLEBNOP      reduce using rule 249 (jump_statement -> BREAK SEMICOLON .)
    OPERATOR        reduce using rule 249 (jump_statement -> BREAK SEMICOLON .)
    ELSE            reduce using rule 249 (jump_statement -> BREAK SEMICOLON .)


state 331

    (250) jump_statement -> CONTINUE SEMICOLON .

    RCPAREN         reduce using rule 250 (jump_statement -> CONTINUE SEMICOLON .)
    IDENTIFIER      reduce using rule 250 (jump_statement -> CONTINUE SEMICOLON .)
    CASE            reduce using rule 250 (jump_statement -> CONTINUE SEMICOLON .)
    DEFAULT         reduce using rule 250 (jump_statement -> CONTINUE SEMICOLON .)
    SEMICOLON       reduce using rule 250 (jump_statement -> CONTINUE SEMICOLON .)
    LCPAREN         reduce using rule 250 (jump_statement -> CONTINUE SEMICOLON .)
    IF              reduce using rule 250 (jump_statement -> CONTINUE SEMICOLON .)
    SWITCH          reduce using rule 250 (jump_statement -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 250 (jump_statement -> CONTINUE SEMICOLON .)
    DO              reduce using rule 250 (jump_statement -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 250 (jump_statement -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 250 (jump_statement -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 250 (jump_statement -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 250 (jump_statement -> CONTINUE SEMICOLON .)
    GOTO            reduce using rule 250 (jump_statement -> CONTINUE SEMICOLON .)
    TRY             reduce using rule 250 (jump_statement -> CONTINUE SEMICOLON .)
    THROW           reduce using rule 250 (jump_statement -> CONTINUE SEMICOLON .)
    CONST           reduce using rule 250 (jump_statement -> CONTINUE SEMICOLON .)
    TYPEDEF         reduce using rule 250 (jump_statement -> CONTINUE SEMICOLON .)
    ASM             reduce using rule 250 (jump_statement -> CONTINUE SEMICOLON .)
    TEMPLATE        reduce using rule 250 (jump_statement -> CONTINUE SEMICOLON .)
    DPLUSOP         reduce using rule 250 (jump_statement -> CONTINUE SEMICOLON .)
    DMINUSOP        reduce using rule 250 (jump_statement -> CONTINUE SEMICOLON .)
    SIZEOF          reduce using rule 250 (jump_statement -> CONTINUE SEMICOLON .)
    PLUSOP          reduce using rule 250 (jump_statement -> CONTINUE SEMICOLON .)
    MINUSOP         reduce using rule 250 (jump_statement -> CONTINUE SEMICOLON .)
    NOTSYM          reduce using rule 250 (jump_statement -> CONTINUE SEMICOLON .)
    BNOP            reduce using rule 250 (jump_statement -> CONTINUE SEMICOLON .)
    MULTOP          reduce using rule 250 (jump_statement -> CONTINUE SEMICOLON .)
    BANDOP          reduce using rule 250 (jump_statement -> CONTINUE SEMICOLON .)
    NEW             reduce using rule 250 (jump_statement -> CONTINUE SEMICOLON .)
    DELETE          reduce using rule 250 (jump_statement -> CONTINUE SEMICOLON .)
    CHAR            reduce using rule 250 (jump_statement -> CONTINUE SEMICOLON .)
    SHORT           reduce using rule 250 (jump_statement -> CONTINUE SEMICOLON .)
    INT             reduce using rule 250 (jump_statement -> CONTINUE SEMICOLON .)
    LONG            reduce using rule 250 (jump_statement -> CONTINUE SEMICOLON .)
    SIGNED          reduce using rule 250 (jump_statement -> CONTINUE SEMICOLON .)
    UNSIGNED        reduce using rule 250 (jump_statement -> CONTINUE SEMICOLON .)
    FLOAT           reduce using rule 250 (jump_statement -> CONTINUE SEMICOLON .)
    DOUBLE          reduce using rule 250 (jump_statement -> CONTINUE SEMICOLON .)
    VOID            reduce using rule 250 (jump_statement -> CONTINUE SEMICOLON .)
    STRING          reduce using rule 250 (jump_statement -> CONTINUE SEMICOLON .)
    AUTO            reduce using rule 250 (jump_statement -> CONTINUE SEMICOLON .)
    TYPE            reduce using rule 250 (jump_statement -> CONTINUE SEMICOLON .)
    CLASS           reduce using rule 250 (jump_statement -> CONTINUE SEMICOLON .)
    STRUCT          reduce using rule 250 (jump_statement -> CONTINUE SEMICOLON .)
    THIS            reduce using rule 250 (jump_statement -> CONTINUE SEMICOLON .)
    LPAREN          reduce using rule 250 (jump_statement -> CONTINUE SEMICOLON .)
    NUMBER          reduce using rule 250 (jump_statement -> CONTINUE SEMICOLON .)
    STRING_L        reduce using rule 250 (jump_statement -> CONTINUE SEMICOLON .)
    SCHAR           reduce using rule 250 (jump_statement -> CONTINUE SEMICOLON .)
    DOUBLEBNOP      reduce using rule 250 (jump_statement -> CONTINUE SEMICOLON .)
    OPERATOR        reduce using rule 250 (jump_statement -> CONTINUE SEMICOLON .)
    ELSE            reduce using rule 250 (jump_statement -> CONTINUE SEMICOLON .)


state 332

    (251) jump_statement -> RETURN expression . SEMICOLON
    (48) expression -> expression . COMMA assignment_expression

    SEMICOLON       shift and go to state 414
    COMMA           shift and go to state 324


state 333

    (252) jump_statement -> RETURN SEMICOLON .

    RCPAREN         reduce using rule 252 (jump_statement -> RETURN SEMICOLON .)
    IDENTIFIER      reduce using rule 252 (jump_statement -> RETURN SEMICOLON .)
    CASE            reduce using rule 252 (jump_statement -> RETURN SEMICOLON .)
    DEFAULT         reduce using rule 252 (jump_statement -> RETURN SEMICOLON .)
    SEMICOLON       reduce using rule 252 (jump_statement -> RETURN SEMICOLON .)
    LCPAREN         reduce using rule 252 (jump_statement -> RETURN SEMICOLON .)
    IF              reduce using rule 252 (jump_statement -> RETURN SEMICOLON .)
    SWITCH          reduce using rule 252 (jump_statement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 252 (jump_statement -> RETURN SEMICOLON .)
    DO              reduce using rule 252 (jump_statement -> RETURN SEMICOLON .)
    FOR             reduce using rule 252 (jump_statement -> RETURN SEMICOLON .)
    BREAK           reduce using rule 252 (jump_statement -> RETURN SEMICOLON .)
    CONTINUE        reduce using rule 252 (jump_statement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 252 (jump_statement -> RETURN SEMICOLON .)
    GOTO            reduce using rule 252 (jump_statement -> RETURN SEMICOLON .)
    TRY             reduce using rule 252 (jump_statement -> RETURN SEMICOLON .)
    THROW           reduce using rule 252 (jump_statement -> RETURN SEMICOLON .)
    CONST           reduce using rule 252 (jump_statement -> RETURN SEMICOLON .)
    TYPEDEF         reduce using rule 252 (jump_statement -> RETURN SEMICOLON .)
    ASM             reduce using rule 252 (jump_statement -> RETURN SEMICOLON .)
    TEMPLATE        reduce using rule 252 (jump_statement -> RETURN SEMICOLON .)
    DPLUSOP         reduce using rule 252 (jump_statement -> RETURN SEMICOLON .)
    DMINUSOP        reduce using rule 252 (jump_statement -> RETURN SEMICOLON .)
    SIZEOF          reduce using rule 252 (jump_statement -> RETURN SEMICOLON .)
    PLUSOP          reduce using rule 252 (jump_statement -> RETURN SEMICOLON .)
    MINUSOP         reduce using rule 252 (jump_statement -> RETURN SEMICOLON .)
    NOTSYM          reduce using rule 252 (jump_statement -> RETURN SEMICOLON .)
    BNOP            reduce using rule 252 (jump_statement -> RETURN SEMICOLON .)
    MULTOP          reduce using rule 252 (jump_statement -> RETURN SEMICOLON .)
    BANDOP          reduce using rule 252 (jump_statement -> RETURN SEMICOLON .)
    NEW             reduce using rule 252 (jump_statement -> RETURN SEMICOLON .)
    DELETE          reduce using rule 252 (jump_statement -> RETURN SEMICOLON .)
    CHAR            reduce using rule 252 (jump_statement -> RETURN SEMICOLON .)
    SHORT           reduce using rule 252 (jump_statement -> RETURN SEMICOLON .)
    INT             reduce using rule 252 (jump_statement -> RETURN SEMICOLON .)
    LONG            reduce using rule 252 (jump_statement -> RETURN SEMICOLON .)
    SIGNED          reduce using rule 252 (jump_statement -> RETURN SEMICOLON .)
    UNSIGNED        reduce using rule 252 (jump_statement -> RETURN SEMICOLON .)
    FLOAT           reduce using rule 252 (jump_statement -> RETURN SEMICOLON .)
    DOUBLE          reduce using rule 252 (jump_statement -> RETURN SEMICOLON .)
    VOID            reduce using rule 252 (jump_statement -> RETURN SEMICOLON .)
    STRING          reduce using rule 252 (jump_statement -> RETURN SEMICOLON .)
    AUTO            reduce using rule 252 (jump_statement -> RETURN SEMICOLON .)
    TYPE            reduce using rule 252 (jump_statement -> RETURN SEMICOLON .)
    CLASS           reduce using rule 252 (jump_statement -> RETURN SEMICOLON .)
    STRUCT          reduce using rule 252 (jump_statement -> RETURN SEMICOLON .)
    THIS            reduce using rule 252 (jump_statement -> RETURN SEMICOLON .)
    LPAREN          reduce using rule 252 (jump_statement -> RETURN SEMICOLON .)
    NUMBER          reduce using rule 252 (jump_statement -> RETURN SEMICOLON .)
    STRING_L        reduce using rule 252 (jump_statement -> RETURN SEMICOLON .)
    SCHAR           reduce using rule 252 (jump_statement -> RETURN SEMICOLON .)
    DOUBLEBNOP      reduce using rule 252 (jump_statement -> RETURN SEMICOLON .)
    OPERATOR        reduce using rule 252 (jump_statement -> RETURN SEMICOLON .)
    ELSE            reduce using rule 252 (jump_statement -> RETURN SEMICOLON .)


state 334

    (253) jump_statement -> GOTO IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 415


state 335

    (257) try_block -> TRY compound_statement . CATCH compound_statement

    CATCH           shift and go to state 416


state 336

    (49) throw_expression -> THROW expression .
    (48) expression -> expression . COMMA assignment_expression

  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 49 (throw_expression -> THROW expression .)
    RPAREN          reduce using rule 49 (throw_expression -> THROW expression .)
    RTEMPLATE       reduce using rule 49 (throw_expression -> THROW expression .)
    COLON           reduce using rule 49 (throw_expression -> THROW expression .)
    RSPAREN         reduce using rule 49 (throw_expression -> THROW expression .)
    COMMA           shift and go to state 324

  ! COMMA           [ reduce using rule 49 (throw_expression -> THROW expression .) ]


state 337

    (293) asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .

    CONST           reduce using rule 293 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    TYPEDEF         reduce using rule 293 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    ASM             reduce using rule 293 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    TEMPLATE        reduce using rule 293 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    CHAR            reduce using rule 293 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    SHORT           reduce using rule 293 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    INT             reduce using rule 293 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    LONG            reduce using rule 293 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    SIGNED          reduce using rule 293 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    UNSIGNED        reduce using rule 293 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    FLOAT           reduce using rule 293 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    DOUBLE          reduce using rule 293 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    VOID            reduce using rule 293 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    STRING          reduce using rule 293 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    AUTO            reduce using rule 293 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    TYPE            reduce using rule 293 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    CLASS           reduce using rule 293 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    STRUCT          reduce using rule 293 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    $end            reduce using rule 293 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    RCPAREN         reduce using rule 293 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 293 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    CASE            reduce using rule 293 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 293 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 293 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    LCPAREN         reduce using rule 293 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    IF              reduce using rule 293 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    SWITCH          reduce using rule 293 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    WHILE           reduce using rule 293 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    DO              reduce using rule 293 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    FOR             reduce using rule 293 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    BREAK           reduce using rule 293 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 293 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    RETURN          reduce using rule 293 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    GOTO            reduce using rule 293 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    TRY             reduce using rule 293 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    THROW           reduce using rule 293 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    DPLUSOP         reduce using rule 293 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    DMINUSOP        reduce using rule 293 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    SIZEOF          reduce using rule 293 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    PLUSOP          reduce using rule 293 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    MINUSOP         reduce using rule 293 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    NOTSYM          reduce using rule 293 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    BNOP            reduce using rule 293 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    MULTOP          reduce using rule 293 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    BANDOP          reduce using rule 293 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    NEW             reduce using rule 293 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    DELETE          reduce using rule 293 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    THIS            reduce using rule 293 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    LPAREN          reduce using rule 293 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    NUMBER          reduce using rule 293 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    STRING_L        reduce using rule 293 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    SCHAR           reduce using rule 293 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    DOUBLEBNOP      reduce using rule 293 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    OPERATOR        reduce using rule 293 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    ELSE            reduce using rule 293 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)


state 338

    (221) access_list -> access_specifier COLON member_access_list .

    RCPAREN         reduce using rule 221 (access_list -> access_specifier COLON member_access_list .)
    PRIVATE         reduce using rule 221 (access_list -> access_specifier COLON member_access_list .)
    PROTECTED       reduce using rule 221 (access_list -> access_specifier COLON member_access_list .)
    PUBLIC          reduce using rule 221 (access_list -> access_specifier COLON member_access_list .)


state 339

    (225) member_declaration -> type_specifier_ member_declarator_list SEMICOLON .

    SEMICOLON       reduce using rule 225 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    CONST           reduce using rule 225 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    TYPEDEF         reduce using rule 225 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    CHAR            reduce using rule 225 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    SHORT           reduce using rule 225 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    INT             reduce using rule 225 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    LONG            reduce using rule 225 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    SIGNED          reduce using rule 225 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    UNSIGNED        reduce using rule 225 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    FLOAT           reduce using rule 225 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    DOUBLE          reduce using rule 225 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    VOID            reduce using rule 225 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    STRING          reduce using rule 225 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    AUTO            reduce using rule 225 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    TYPE            reduce using rule 225 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    CLASS           reduce using rule 225 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    STRUCT          reduce using rule 225 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    IDENTIFIER      reduce using rule 225 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    DOUBLEBNOP      reduce using rule 225 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    MULTOP          reduce using rule 225 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    BANDOP          reduce using rule 225 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    OPERATOR        reduce using rule 225 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    RCPAREN         reduce using rule 225 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    PRIVATE         reduce using rule 225 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    PROTECTED       reduce using rule 225 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    PUBLIC          reduce using rule 225 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)


state 340

    (232) member_declarator_list -> member_declarator_list COMMA member_declarator .

    SEMICOLON       reduce using rule 232 (member_declarator_list -> member_declarator_list COMMA member_declarator .)
    COMMA           reduce using rule 232 (member_declarator_list -> member_declarator_list COMMA member_declarator .)


state 341

    (199) pure_specifier -> EQUAL NUMBER .

    SEMICOLON       reduce using rule 199 (pure_specifier -> EQUAL NUMBER .)
    COMMA           reduce using rule 199 (pure_specifier -> EQUAL NUMBER .)


state 342

    (278) template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .

    CONST           reduce using rule 278 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    TYPEDEF         reduce using rule 278 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    ASM             reduce using rule 278 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    TEMPLATE        reduce using rule 278 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    CHAR            reduce using rule 278 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    SHORT           reduce using rule 278 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    INT             reduce using rule 278 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    LONG            reduce using rule 278 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    SIGNED          reduce using rule 278 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    UNSIGNED        reduce using rule 278 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    FLOAT           reduce using rule 278 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    DOUBLE          reduce using rule 278 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    VOID            reduce using rule 278 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    STRING          reduce using rule 278 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    AUTO            reduce using rule 278 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    TYPE            reduce using rule 278 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    CLASS           reduce using rule 278 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    STRUCT          reduce using rule 278 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    $end            reduce using rule 278 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    RCPAREN         reduce using rule 278 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    IDENTIFIER      reduce using rule 278 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    CASE            reduce using rule 278 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    DEFAULT         reduce using rule 278 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    SEMICOLON       reduce using rule 278 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    LCPAREN         reduce using rule 278 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    IF              reduce using rule 278 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    SWITCH          reduce using rule 278 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    WHILE           reduce using rule 278 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    DO              reduce using rule 278 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    FOR             reduce using rule 278 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    BREAK           reduce using rule 278 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    CONTINUE        reduce using rule 278 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    RETURN          reduce using rule 278 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    GOTO            reduce using rule 278 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    TRY             reduce using rule 278 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    THROW           reduce using rule 278 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    DPLUSOP         reduce using rule 278 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    DMINUSOP        reduce using rule 278 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    SIZEOF          reduce using rule 278 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    PLUSOP          reduce using rule 278 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    MINUSOP         reduce using rule 278 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    NOTSYM          reduce using rule 278 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    BNOP            reduce using rule 278 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    MULTOP          reduce using rule 278 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    BANDOP          reduce using rule 278 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    NEW             reduce using rule 278 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    DELETE          reduce using rule 278 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    THIS            reduce using rule 278 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    LPAREN          reduce using rule 278 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    NUMBER          reduce using rule 278 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    STRING_L        reduce using rule 278 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    SCHAR           reduce using rule 278 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    DOUBLEBNOP      reduce using rule 278 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    OPERATOR        reduce using rule 278 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    ELSE            reduce using rule 278 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)


state 343

    (280) template_argument_list -> template_argument_list COMMA argument_declaration .

    RTEMPLATE       reduce using rule 280 (template_argument_list -> template_argument_list COMMA argument_declaration .)
    COMMA           reduce using rule 280 (template_argument_list -> template_argument_list COMMA argument_declaration .)


state 344

    (127) argument_declaration -> type_specifier_ declarator EQUAL . expression
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (135) operator_function_name -> . OPERATOR operator_name
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression

    THROW           shift and go to state 224
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    THIS            shift and go to state 175
    LPAREN          shift and go to state 144
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    expression                     shift and go to state 417
    assignment_expression          shift and go to state 222
    throw_expression               shift and go to state 223
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    logical_OR_expression          shift and go to state 153
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    cast_expression                shift and go to state 158
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    logical_AND_expression         shift and go to state 163
    primary_expression             shift and go to state 164
    simple_type_name               shift and go to state 192
    name                           shift and go to state 166
    inclusive_OR_expression        shift and go to state 173
    literal                        shift and go to state 174
    exclusive_OR_expression        shift and go to state 176
    operator_function_name         shift and go to state 50
    AND_expression                 shift and go to state 180
    equality_expression            shift and go to state 181
    relational_expression          shift and go to state 182
    shift_expression               shift and go to state 183
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186

state 345

    (131) argument_declaration -> type_specifier_ EQUAL expression .
    (48) expression -> expression . COMMA assignment_expression

  ! shift/reduce conflict for COMMA resolved as shift
    RTEMPLATE       reduce using rule 131 (argument_declaration -> type_specifier_ EQUAL expression .)
    RPAREN          reduce using rule 131 (argument_declaration -> type_specifier_ EQUAL expression .)
    COMMA           shift and go to state 324

  ! COMMA           [ reduce using rule 131 (argument_declaration -> type_specifier_ EQUAL expression .) ]


state 346

    (130) argument_declaration -> type_specifier_ abstract_declarator EQUAL . expression
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (135) operator_function_name -> . OPERATOR operator_name
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression

    THROW           shift and go to state 224
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    THIS            shift and go to state 175
    LPAREN          shift and go to state 144
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    expression                     shift and go to state 418
    assignment_expression          shift and go to state 222
    throw_expression               shift and go to state 223
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    logical_OR_expression          shift and go to state 153
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    cast_expression                shift and go to state 158
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    logical_AND_expression         shift and go to state 163
    primary_expression             shift and go to state 164
    simple_type_name               shift and go to state 192
    name                           shift and go to state 166
    inclusive_OR_expression        shift and go to state 173
    literal                        shift and go to state 174
    exclusive_OR_expression        shift and go to state 176
    operator_function_name         shift and go to state 50
    AND_expression                 shift and go to state 180
    equality_expression            shift and go to state 181
    relational_expression          shift and go to state 182
    shift_expression               shift and go to state 183
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186

state 347

    (114) abstract_declarator -> abstract_declarator LSPAREN . constant_expression RSPAREN
    (116) abstract_declarator -> abstract_declarator LSPAREN . RSPAREN
    (12) constant_expression -> . conditional_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (135) operator_function_name -> . OPERATOR operator_name

    RSPAREN         shift and go to state 420
    LPAREN          shift and go to state 191
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    THIS            shift and go to state 175
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    constant_expression            shift and go to state 419
    conditional_expression         shift and go to state 189
    logical_OR_expression          shift and go to state 153
    logical_AND_expression         shift and go to state 163
    inclusive_OR_expression        shift and go to state 173
    exclusive_OR_expression        shift and go to state 176
    AND_expression                 shift and go to state 180
    equality_expression            shift and go to state 181
    relational_expression          shift and go to state 182
    shift_expression               shift and go to state 183
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186
    cast_expression                shift and go to state 158
    unary_expression               shift and go to state 190
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    primary_expression             shift and go to state 164
    simple_type_name               shift and go to state 192
    name                           shift and go to state 166
    literal                        shift and go to state 174
    operator_function_name         shift and go to state 50

state 348

    (112) abstract_declarator -> unary2_operator abstract_declarator .
    (114) abstract_declarator -> abstract_declarator . LSPAREN constant_expression RSPAREN
    (116) abstract_declarator -> abstract_declarator . LSPAREN RSPAREN

    EQUAL           reduce using rule 112 (abstract_declarator -> unary2_operator abstract_declarator .)
    LSPAREN         reduce using rule 112 (abstract_declarator -> unary2_operator abstract_declarator .)
    RTEMPLATE       reduce using rule 112 (abstract_declarator -> unary2_operator abstract_declarator .)
    COMMA           reduce using rule 112 (abstract_declarator -> unary2_operator abstract_declarator .)
    RPAREN          reduce using rule 112 (abstract_declarator -> unary2_operator abstract_declarator .)

  ! LSPAREN         [ shift and go to state 347 ]


state 349

    (113) abstract_declarator -> LSPAREN constant_expression . RSPAREN

    RSPAREN         shift and go to state 421


state 350

    (115) abstract_declarator -> LSPAREN RSPAREN .

    EQUAL           reduce using rule 115 (abstract_declarator -> LSPAREN RSPAREN .)
    LSPAREN         reduce using rule 115 (abstract_declarator -> LSPAREN RSPAREN .)
    RTEMPLATE       reduce using rule 115 (abstract_declarator -> LSPAREN RSPAREN .)
    COMMA           reduce using rule 115 (abstract_declarator -> LSPAREN RSPAREN .)
    RPAREN          reduce using rule 115 (abstract_declarator -> LSPAREN RSPAREN .)


state 351

    (204) base_list -> base_list COMMA . base_specifier
    (205) base_specifier -> . class_key IDENTIFIER
    (206) base_specifier -> . class_key IDENTIFIER template_class_name
    (207) base_specifier -> . IDENTIFIER
    (208) base_specifier -> . IDENTIFIER template_class_name
    (209) base_specifier -> . access_specifier class_key IDENTIFIER
    (210) base_specifier -> . access_specifier class_key IDENTIFIER template_class_name
    (211) class_key -> . CLASS
    (212) class_key -> . STRUCT
    (218) access_specifier -> . PRIVATE
    (219) access_specifier -> . PROTECTED
    (220) access_specifier -> . PUBLIC

    IDENTIFIER      shift and go to state 252
    CLASS           shift and go to state 35
    STRUCT          shift and go to state 36
    PRIVATE         shift and go to state 128
    PROTECTED       shift and go to state 129
    PUBLIC          shift and go to state 130

    base_specifier                 shift and go to state 422
    class_key                      shift and go to state 251
    access_specifier               shift and go to state 253

state 352

    (205) base_specifier -> class_key IDENTIFIER .
    (206) base_specifier -> class_key IDENTIFIER . template_class_name
    (174) template_class_name -> . LTEMPLATE template_arg_list RTEMPLATE

    COMMA           reduce using rule 205 (base_specifier -> class_key IDENTIFIER .)
    LCPAREN         reduce using rule 205 (base_specifier -> class_key IDENTIFIER .)
    LTEMPLATE       shift and go to state 139

    template_class_name            shift and go to state 423

state 353

    (208) base_specifier -> IDENTIFIER template_class_name .

    COMMA           reduce using rule 208 (base_specifier -> IDENTIFIER template_class_name .)
    LCPAREN         reduce using rule 208 (base_specifier -> IDENTIFIER template_class_name .)


state 354

    (209) base_specifier -> access_specifier class_key . IDENTIFIER
    (210) base_specifier -> access_specifier class_key . IDENTIFIER template_class_name

    IDENTIFIER      shift and go to state 424


state 355

    (174) template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .

    SEMICOLON       reduce using rule 174 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    IDENTIFIER      reduce using rule 174 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    DOUBLEBNOP      reduce using rule 174 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    MULTOP          reduce using rule 174 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    BANDOP          reduce using rule 174 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    OPERATOR        reduce using rule 174 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    EQUAL           reduce using rule 174 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    LSPAREN         reduce using rule 174 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    RTEMPLATE       reduce using rule 174 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    COMMA           reduce using rule 174 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    RPAREN          reduce using rule 174 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    LPAREN          reduce using rule 174 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    MULTEQOP        reduce using rule 174 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    DIVEQOP         reduce using rule 174 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    MODEQOP         reduce using rule 174 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    PLUSEQOP        reduce using rule 174 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    MINUSEQOP       reduce using rule 174 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    LSHIFTEQOP      reduce using rule 174 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    RSHIFTEQOP      reduce using rule 174 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    BANDEQOP        reduce using rule 174 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    BOREQOP         reduce using rule 174 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    DOTSTAR         reduce using rule 174 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    ARROWSTAR       reduce using rule 174 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    DIVOP           reduce using rule 174 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    MODOP           reduce using rule 174 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    PLUSOP          reduce using rule 174 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    MINUSOP         reduce using rule 174 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    LSHIFT          reduce using rule 174 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    RSHIFT          reduce using rule 174 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    LTCOMP          reduce using rule 174 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    GTCOMP          reduce using rule 174 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    LTECOMP         reduce using rule 174 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    GTECOMP         reduce using rule 174 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    EQCOMP          reduce using rule 174 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    NEQCOMP         reduce using rule 174 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    XOROP           reduce using rule 174 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    OROP            reduce using rule 174 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    ANDOP           reduce using rule 174 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    QUESMARK        reduce using rule 174 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    RSPAREN         reduce using rule 174 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    RCPAREN         reduce using rule 174 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    COLON           reduce using rule 174 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    LCPAREN         reduce using rule 174 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)


state 356

    (176) template_arg_list -> template_arg_list COMMA . type_name
    (177) type_name -> . type_specifier_ abstract_declarator
    (178) type_name -> . type_specifier_
    (179) type_specifier_ -> . CONST type_specifier
    (180) type_specifier_ -> . TYPEDEF type_specifier
    (181) type_specifier_ -> . type_specifier
    (182) type_specifier -> . simple_type_name
    (183) type_specifier -> . complex_type_specifier
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (195) complex_type_specifier -> . class_key IDENTIFIER
    (196) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (197) complex_type_specifier -> . TYPE IDENTIFIER
    (198) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (211) class_key -> . CLASS
    (212) class_key -> . STRUCT

    CONST           shift and go to state 14
    TYPEDEF         shift and go to state 16
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    TYPE            shift and go to state 34
    CLASS           shift and go to state 35
    STRUCT          shift and go to state 36

    type_name                      shift and go to state 425
    type_specifier_                shift and go to state 256
    type_specifier                 shift and go to state 15
    simple_type_name               shift and go to state 20
    complex_type_specifier         shift and go to state 21
    class_key                      shift and go to state 57

state 357

    (177) type_name -> type_specifier_ abstract_declarator .
    (114) abstract_declarator -> abstract_declarator . LSPAREN constant_expression RSPAREN
    (116) abstract_declarator -> abstract_declarator . LSPAREN RSPAREN

    RTEMPLATE       reduce using rule 177 (type_name -> type_specifier_ abstract_declarator .)
    COMMA           reduce using rule 177 (type_name -> type_specifier_ abstract_declarator .)
    RPAREN          reduce using rule 177 (type_name -> type_specifier_ abstract_declarator .)
    LSPAREN         shift and go to state 347


state 358

    (111) abstract_declarator -> unary2_operator .
    (112) abstract_declarator -> unary2_operator . abstract_declarator
    (111) abstract_declarator -> . unary2_operator
    (112) abstract_declarator -> . unary2_operator abstract_declarator
    (113) abstract_declarator -> . LSPAREN constant_expression RSPAREN
    (114) abstract_declarator -> . abstract_declarator LSPAREN constant_expression RSPAREN
    (115) abstract_declarator -> . LSPAREN RSPAREN
    (116) abstract_declarator -> . abstract_declarator LSPAREN RSPAREN
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP

    LSPAREN         reduce using rule 111 (abstract_declarator -> unary2_operator .)
    RTEMPLATE       reduce using rule 111 (abstract_declarator -> unary2_operator .)
    COMMA           reduce using rule 111 (abstract_declarator -> unary2_operator .)
    RPAREN          reduce using rule 111 (abstract_declarator -> unary2_operator .)
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53

  ! LSPAREN         [ shift and go to state 248 ]

    unary2_operator                shift and go to state 358
    abstract_declarator            shift and go to state 348

state 359

    (104) primary_expression -> LPAREN expression RPAREN .

    LSPAREN         reduce using rule 104 (primary_expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 104 (primary_expression -> LPAREN expression RPAREN .)
    DOT             reduce using rule 104 (primary_expression -> LPAREN expression RPAREN .)
    ARROW           reduce using rule 104 (primary_expression -> LPAREN expression RPAREN .)
    DPLUSOP         reduce using rule 104 (primary_expression -> LPAREN expression RPAREN .)
    DMINUSOP        reduce using rule 104 (primary_expression -> LPAREN expression RPAREN .)
    LTEMPLATE       reduce using rule 104 (primary_expression -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 104 (primary_expression -> LPAREN expression RPAREN .)
    MULTEQOP        reduce using rule 104 (primary_expression -> LPAREN expression RPAREN .)
    DIVEQOP         reduce using rule 104 (primary_expression -> LPAREN expression RPAREN .)
    MODEQOP         reduce using rule 104 (primary_expression -> LPAREN expression RPAREN .)
    PLUSEQOP        reduce using rule 104 (primary_expression -> LPAREN expression RPAREN .)
    MINUSEQOP       reduce using rule 104 (primary_expression -> LPAREN expression RPAREN .)
    LSHIFTEQOP      reduce using rule 104 (primary_expression -> LPAREN expression RPAREN .)
    RSHIFTEQOP      reduce using rule 104 (primary_expression -> LPAREN expression RPAREN .)
    BANDEQOP        reduce using rule 104 (primary_expression -> LPAREN expression RPAREN .)
    BOREQOP         reduce using rule 104 (primary_expression -> LPAREN expression RPAREN .)
    DOTSTAR         reduce using rule 104 (primary_expression -> LPAREN expression RPAREN .)
    ARROWSTAR       reduce using rule 104 (primary_expression -> LPAREN expression RPAREN .)
    MULTOP          reduce using rule 104 (primary_expression -> LPAREN expression RPAREN .)
    DIVOP           reduce using rule 104 (primary_expression -> LPAREN expression RPAREN .)
    MODOP           reduce using rule 104 (primary_expression -> LPAREN expression RPAREN .)
    PLUSOP          reduce using rule 104 (primary_expression -> LPAREN expression RPAREN .)
    MINUSOP         reduce using rule 104 (primary_expression -> LPAREN expression RPAREN .)
    LSHIFT          reduce using rule 104 (primary_expression -> LPAREN expression RPAREN .)
    RSHIFT          reduce using rule 104 (primary_expression -> LPAREN expression RPAREN .)
    LTCOMP          reduce using rule 104 (primary_expression -> LPAREN expression RPAREN .)
    GTCOMP          reduce using rule 104 (primary_expression -> LPAREN expression RPAREN .)
    LTECOMP         reduce using rule 104 (primary_expression -> LPAREN expression RPAREN .)
    GTECOMP         reduce using rule 104 (primary_expression -> LPAREN expression RPAREN .)
    EQCOMP          reduce using rule 104 (primary_expression -> LPAREN expression RPAREN .)
    NEQCOMP         reduce using rule 104 (primary_expression -> LPAREN expression RPAREN .)
    BANDOP          reduce using rule 104 (primary_expression -> LPAREN expression RPAREN .)
    XOROP           reduce using rule 104 (primary_expression -> LPAREN expression RPAREN .)
    OROP            reduce using rule 104 (primary_expression -> LPAREN expression RPAREN .)
    ANDOP           reduce using rule 104 (primary_expression -> LPAREN expression RPAREN .)
    QUESMARK        reduce using rule 104 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 104 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 104 (primary_expression -> LPAREN expression RPAREN .)
    RSPAREN         reduce using rule 104 (primary_expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 104 (primary_expression -> LPAREN expression RPAREN .)
    RCPAREN         reduce using rule 104 (primary_expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 104 (primary_expression -> LPAREN expression RPAREN .)
    RTEMPLATE       reduce using rule 104 (primary_expression -> LPAREN expression RPAREN .)


state 360

    (110) cast_expression -> LPAREN type_name RPAREN . cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (135) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 191
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    THIS            shift and go to state 175
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    cast_expression                shift and go to state 426
    unary_expression               shift and go to state 190
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    primary_expression             shift and go to state 164
    simple_type_name               shift and go to state 192
    name                           shift and go to state 166
    literal                        shift and go to state 174
    operator_function_name         shift and go to state 50

state 361

    (295) expression_list -> expression_list COMMA assignment_expression .

    RPAREN          reduce using rule 295 (expression_list -> expression_list COMMA assignment_expression .)
    COMMA           reduce using rule 295 (expression_list -> expression_list COMMA assignment_expression .)


state 362

    (125) arg_declaration_list -> argument_declaration COMMA arg_declaration_list .

    RPAREN          reduce using rule 125 (arg_declaration_list -> argument_declaration COMMA arg_declaration_list .)


state 363

    (52) assignment_expression -> unary_expression assignment_operator assignment_expression .

    RPAREN          reduce using rule 52 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COMMA           reduce using rule 52 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    SEMICOLON       reduce using rule 52 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RCPAREN         reduce using rule 52 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RTEMPLATE       reduce using rule 52 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COLON           reduce using rule 52 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RSPAREN         reduce using rule 52 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 364

    (14) conditional_expression -> logical_OR_expression QUESMARK expression . COLON conditional_expression
    (48) expression -> expression . COMMA assignment_expression

    COLON           shift and go to state 427
    COMMA           shift and go to state 324


state 365

    (16) logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .
    (18) logical_AND_expression -> logical_AND_expression . ANDOP inclusive_OR_expression

    QUESMARK        reduce using rule 16 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    OROP            reduce using rule 16 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    RPAREN          reduce using rule 16 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    COMMA           reduce using rule 16 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    RSPAREN         reduce using rule 16 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    SEMICOLON       reduce using rule 16 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    RCPAREN         reduce using rule 16 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    COLON           reduce using rule 16 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    RTEMPLATE       reduce using rule 16 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    ANDOP           shift and go to state 290


state 366

    (92) postfix_expression -> postfix_expression LSPAREN expression . RSPAREN
    (48) expression -> expression . COMMA assignment_expression

    RSPAREN         shift and go to state 428
    COMMA           shift and go to state 324


state 367

    (93) postfix_expression -> postfix_expression LPAREN expression_list . RPAREN
    (295) expression_list -> expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 429
    COMMA           shift and go to state 261


state 368

    (95) postfix_expression -> postfix_expression LPAREN RPAREN .

    LSPAREN         reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LPAREN          reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DOT             reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ARROW           reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DPLUSOP         reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DMINUSOP        reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LTEMPLATE       reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQUAL           reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MULTEQOP        reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIVEQOP         reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MODEQOP         reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUSEQOP        reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUSEQOP       reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LSHIFTEQOP      reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RSHIFTEQOP      reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    BANDEQOP        reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    BOREQOP         reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DOTSTAR         reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ARROWSTAR       reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MULTOP          reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIVOP           reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MODOP           reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUSOP          reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUSOP         reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LSHIFT          reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RSHIFT          reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LTCOMP          reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GTCOMP          reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LTECOMP         reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GTECOMP         reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQCOMP          reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    NEQCOMP         reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    BANDOP          reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    XOROP           reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    OROP            reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ANDOP           reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    QUESMARK        reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RPAREN          reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COMMA           reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RSPAREN         reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    SEMICOLON       reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RCPAREN         reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COLON           reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RTEMPLATE       reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)


state 369

    (94) postfix_expression -> postfix_expression template_class_name LPAREN . expression_list RPAREN
    (294) expression_list -> . assignment_expression
    (295) expression_list -> . expression_list COMMA assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (135) operator_function_name -> . OPERATOR operator_name
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    THIS            shift and go to state 175
    LPAREN          shift and go to state 144
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    postfix_expression             shift and go to state 154
    expression_list                shift and go to state 430
    assignment_expression          shift and go to state 149
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    logical_OR_expression          shift and go to state 153
    unary1_operator                shift and go to state 157
    cast_expression                shift and go to state 158
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    logical_AND_expression         shift and go to state 163
    primary_expression             shift and go to state 164
    simple_type_name               shift and go to state 192
    name                           shift and go to state 166
    inclusive_OR_expression        shift and go to state 173
    literal                        shift and go to state 174
    exclusive_OR_expression        shift and go to state 176
    operator_function_name         shift and go to state 50
    AND_expression                 shift and go to state 180
    equality_expression            shift and go to state 181
    relational_expression          shift and go to state 182
    shift_expression               shift and go to state 183
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186

state 370

    (98) postfix_expression -> postfix_expression DOT name .

    LSPAREN         reduce using rule 98 (postfix_expression -> postfix_expression DOT name .)
    LPAREN          reduce using rule 98 (postfix_expression -> postfix_expression DOT name .)
    DOT             reduce using rule 98 (postfix_expression -> postfix_expression DOT name .)
    ARROW           reduce using rule 98 (postfix_expression -> postfix_expression DOT name .)
    DPLUSOP         reduce using rule 98 (postfix_expression -> postfix_expression DOT name .)
    DMINUSOP        reduce using rule 98 (postfix_expression -> postfix_expression DOT name .)
    LTEMPLATE       reduce using rule 98 (postfix_expression -> postfix_expression DOT name .)
    EQUAL           reduce using rule 98 (postfix_expression -> postfix_expression DOT name .)
    MULTEQOP        reduce using rule 98 (postfix_expression -> postfix_expression DOT name .)
    DIVEQOP         reduce using rule 98 (postfix_expression -> postfix_expression DOT name .)
    MODEQOP         reduce using rule 98 (postfix_expression -> postfix_expression DOT name .)
    PLUSEQOP        reduce using rule 98 (postfix_expression -> postfix_expression DOT name .)
    MINUSEQOP       reduce using rule 98 (postfix_expression -> postfix_expression DOT name .)
    LSHIFTEQOP      reduce using rule 98 (postfix_expression -> postfix_expression DOT name .)
    RSHIFTEQOP      reduce using rule 98 (postfix_expression -> postfix_expression DOT name .)
    BANDEQOP        reduce using rule 98 (postfix_expression -> postfix_expression DOT name .)
    BOREQOP         reduce using rule 98 (postfix_expression -> postfix_expression DOT name .)
    DOTSTAR         reduce using rule 98 (postfix_expression -> postfix_expression DOT name .)
    ARROWSTAR       reduce using rule 98 (postfix_expression -> postfix_expression DOT name .)
    MULTOP          reduce using rule 98 (postfix_expression -> postfix_expression DOT name .)
    DIVOP           reduce using rule 98 (postfix_expression -> postfix_expression DOT name .)
    MODOP           reduce using rule 98 (postfix_expression -> postfix_expression DOT name .)
    PLUSOP          reduce using rule 98 (postfix_expression -> postfix_expression DOT name .)
    MINUSOP         reduce using rule 98 (postfix_expression -> postfix_expression DOT name .)
    LSHIFT          reduce using rule 98 (postfix_expression -> postfix_expression DOT name .)
    RSHIFT          reduce using rule 98 (postfix_expression -> postfix_expression DOT name .)
    LTCOMP          reduce using rule 98 (postfix_expression -> postfix_expression DOT name .)
    GTCOMP          reduce using rule 98 (postfix_expression -> postfix_expression DOT name .)
    LTECOMP         reduce using rule 98 (postfix_expression -> postfix_expression DOT name .)
    GTECOMP         reduce using rule 98 (postfix_expression -> postfix_expression DOT name .)
    EQCOMP          reduce using rule 98 (postfix_expression -> postfix_expression DOT name .)
    NEQCOMP         reduce using rule 98 (postfix_expression -> postfix_expression DOT name .)
    BANDOP          reduce using rule 98 (postfix_expression -> postfix_expression DOT name .)
    XOROP           reduce using rule 98 (postfix_expression -> postfix_expression DOT name .)
    OROP            reduce using rule 98 (postfix_expression -> postfix_expression DOT name .)
    ANDOP           reduce using rule 98 (postfix_expression -> postfix_expression DOT name .)
    QUESMARK        reduce using rule 98 (postfix_expression -> postfix_expression DOT name .)
    RPAREN          reduce using rule 98 (postfix_expression -> postfix_expression DOT name .)
    COMMA           reduce using rule 98 (postfix_expression -> postfix_expression DOT name .)
    RSPAREN         reduce using rule 98 (postfix_expression -> postfix_expression DOT name .)
    SEMICOLON       reduce using rule 98 (postfix_expression -> postfix_expression DOT name .)
    RCPAREN         reduce using rule 98 (postfix_expression -> postfix_expression DOT name .)
    COLON           reduce using rule 98 (postfix_expression -> postfix_expression DOT name .)
    RTEMPLATE       reduce using rule 98 (postfix_expression -> postfix_expression DOT name .)


state 371

    (99) postfix_expression -> postfix_expression ARROW name .

    LSPAREN         reduce using rule 99 (postfix_expression -> postfix_expression ARROW name .)
    LPAREN          reduce using rule 99 (postfix_expression -> postfix_expression ARROW name .)
    DOT             reduce using rule 99 (postfix_expression -> postfix_expression ARROW name .)
    ARROW           reduce using rule 99 (postfix_expression -> postfix_expression ARROW name .)
    DPLUSOP         reduce using rule 99 (postfix_expression -> postfix_expression ARROW name .)
    DMINUSOP        reduce using rule 99 (postfix_expression -> postfix_expression ARROW name .)
    LTEMPLATE       reduce using rule 99 (postfix_expression -> postfix_expression ARROW name .)
    EQUAL           reduce using rule 99 (postfix_expression -> postfix_expression ARROW name .)
    MULTEQOP        reduce using rule 99 (postfix_expression -> postfix_expression ARROW name .)
    DIVEQOP         reduce using rule 99 (postfix_expression -> postfix_expression ARROW name .)
    MODEQOP         reduce using rule 99 (postfix_expression -> postfix_expression ARROW name .)
    PLUSEQOP        reduce using rule 99 (postfix_expression -> postfix_expression ARROW name .)
    MINUSEQOP       reduce using rule 99 (postfix_expression -> postfix_expression ARROW name .)
    LSHIFTEQOP      reduce using rule 99 (postfix_expression -> postfix_expression ARROW name .)
    RSHIFTEQOP      reduce using rule 99 (postfix_expression -> postfix_expression ARROW name .)
    BANDEQOP        reduce using rule 99 (postfix_expression -> postfix_expression ARROW name .)
    BOREQOP         reduce using rule 99 (postfix_expression -> postfix_expression ARROW name .)
    DOTSTAR         reduce using rule 99 (postfix_expression -> postfix_expression ARROW name .)
    ARROWSTAR       reduce using rule 99 (postfix_expression -> postfix_expression ARROW name .)
    MULTOP          reduce using rule 99 (postfix_expression -> postfix_expression ARROW name .)
    DIVOP           reduce using rule 99 (postfix_expression -> postfix_expression ARROW name .)
    MODOP           reduce using rule 99 (postfix_expression -> postfix_expression ARROW name .)
    PLUSOP          reduce using rule 99 (postfix_expression -> postfix_expression ARROW name .)
    MINUSOP         reduce using rule 99 (postfix_expression -> postfix_expression ARROW name .)
    LSHIFT          reduce using rule 99 (postfix_expression -> postfix_expression ARROW name .)
    RSHIFT          reduce using rule 99 (postfix_expression -> postfix_expression ARROW name .)
    LTCOMP          reduce using rule 99 (postfix_expression -> postfix_expression ARROW name .)
    GTCOMP          reduce using rule 99 (postfix_expression -> postfix_expression ARROW name .)
    LTECOMP         reduce using rule 99 (postfix_expression -> postfix_expression ARROW name .)
    GTECOMP         reduce using rule 99 (postfix_expression -> postfix_expression ARROW name .)
    EQCOMP          reduce using rule 99 (postfix_expression -> postfix_expression ARROW name .)
    NEQCOMP         reduce using rule 99 (postfix_expression -> postfix_expression ARROW name .)
    BANDOP          reduce using rule 99 (postfix_expression -> postfix_expression ARROW name .)
    XOROP           reduce using rule 99 (postfix_expression -> postfix_expression ARROW name .)
    OROP            reduce using rule 99 (postfix_expression -> postfix_expression ARROW name .)
    ANDOP           reduce using rule 99 (postfix_expression -> postfix_expression ARROW name .)
    QUESMARK        reduce using rule 99 (postfix_expression -> postfix_expression ARROW name .)
    RPAREN          reduce using rule 99 (postfix_expression -> postfix_expression ARROW name .)
    COMMA           reduce using rule 99 (postfix_expression -> postfix_expression ARROW name .)
    RSPAREN         reduce using rule 99 (postfix_expression -> postfix_expression ARROW name .)
    SEMICOLON       reduce using rule 99 (postfix_expression -> postfix_expression ARROW name .)
    RCPAREN         reduce using rule 99 (postfix_expression -> postfix_expression ARROW name .)
    COLON           reduce using rule 99 (postfix_expression -> postfix_expression ARROW name .)
    RTEMPLATE       reduce using rule 99 (postfix_expression -> postfix_expression ARROW name .)


state 372

    (69) unary_expression -> SIZEOF LPAREN type_name . RPAREN

    RPAREN          shift and go to state 431


state 373

    (18) logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .
    (20) inclusive_OR_expression -> inclusive_OR_expression . OROP exclusive_OR_expression

    ANDOP           reduce using rule 18 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    QUESMARK        reduce using rule 18 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    OROP            reduce using rule 18 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    RPAREN          reduce using rule 18 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    COMMA           reduce using rule 18 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    RSPAREN         reduce using rule 18 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    SEMICOLON       reduce using rule 18 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    RCPAREN         reduce using rule 18 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    COLON           reduce using rule 18 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    RTEMPLATE       reduce using rule 18 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)

  ! OROP            [ shift and go to state 296 ]


state 374

    (96) postfix_expression -> simple_type_name LPAREN expression_list . RPAREN
    (295) expression_list -> expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 432
    COMMA           shift and go to state 261


state 375

    (97) postfix_expression -> simple_type_name LPAREN RPAREN .

    LSPAREN         reduce using rule 97 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    LPAREN          reduce using rule 97 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    DOT             reduce using rule 97 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    ARROW           reduce using rule 97 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    DPLUSOP         reduce using rule 97 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    DMINUSOP        reduce using rule 97 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    LTEMPLATE       reduce using rule 97 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    EQUAL           reduce using rule 97 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    MULTEQOP        reduce using rule 97 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    DIVEQOP         reduce using rule 97 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    MODEQOP         reduce using rule 97 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    PLUSEQOP        reduce using rule 97 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    MINUSEQOP       reduce using rule 97 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    LSHIFTEQOP      reduce using rule 97 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    RSHIFTEQOP      reduce using rule 97 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    BANDEQOP        reduce using rule 97 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    BOREQOP         reduce using rule 97 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    DOTSTAR         reduce using rule 97 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    ARROWSTAR       reduce using rule 97 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    MULTOP          reduce using rule 97 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    DIVOP           reduce using rule 97 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    MODOP           reduce using rule 97 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    PLUSOP          reduce using rule 97 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    MINUSOP         reduce using rule 97 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    LSHIFT          reduce using rule 97 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    RSHIFT          reduce using rule 97 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    LTCOMP          reduce using rule 97 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    GTCOMP          reduce using rule 97 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    LTECOMP         reduce using rule 97 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    GTECOMP         reduce using rule 97 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    EQCOMP          reduce using rule 97 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    NEQCOMP         reduce using rule 97 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    BANDOP          reduce using rule 97 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    XOROP           reduce using rule 97 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    OROP            reduce using rule 97 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    ANDOP           reduce using rule 97 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    QUESMARK        reduce using rule 97 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    RPAREN          reduce using rule 97 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    COMMA           reduce using rule 97 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    RSPAREN         reduce using rule 97 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    SEMICOLON       reduce using rule 97 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    RCPAREN         reduce using rule 97 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    COLON           reduce using rule 97 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    RTEMPLATE       reduce using rule 97 (postfix_expression -> simple_type_name LPAREN RPAREN .)


state 376

    (73) allocation_expression -> NEW new_type_name new_initializer .

    EQUAL           reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    MULTEQOP        reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    DIVEQOP         reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    MODEQOP         reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    PLUSEQOP        reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    MINUSEQOP       reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    LSHIFTEQOP      reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    RSHIFTEQOP      reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    BANDEQOP        reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    BOREQOP         reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    DOTSTAR         reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    ARROWSTAR       reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    MULTOP          reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    DIVOP           reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    MODOP           reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    PLUSOP          reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    MINUSOP         reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    LSHIFT          reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    RSHIFT          reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    LTCOMP          reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    GTCOMP          reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    LTECOMP         reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    GTECOMP         reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    EQCOMP          reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    NEQCOMP         reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    BANDOP          reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    XOROP           reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    OROP            reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    ANDOP           reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    QUESMARK        reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    RPAREN          reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    COMMA           reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    RSPAREN         reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    SEMICOLON       reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    RCPAREN         reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    COLON           reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    RTEMPLATE       reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)


state 377

    (83) new_initializer -> LPAREN . initializer_list RPAREN
    (84) new_initializer -> LPAREN . RPAREN
    (289) initializer_list -> . assignment_expression
    (290) initializer_list -> . initializer_list COMMA assignment_expression
    (291) initializer_list -> . LCPAREN initializer_list RCPAREN
    (292) initializer_list -> . LCPAREN initializer_list COMMA RCPAREN
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (135) operator_function_name -> . OPERATOR operator_name
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 434
    LCPAREN         shift and go to state 315
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    THIS            shift and go to state 175
    LPAREN          shift and go to state 144
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    initializer_list               shift and go to state 433
    assignment_expression          shift and go to state 317
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    logical_OR_expression          shift and go to state 153
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    cast_expression                shift and go to state 158
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    logical_AND_expression         shift and go to state 163
    primary_expression             shift and go to state 164
    simple_type_name               shift and go to state 192
    name                           shift and go to state 166
    inclusive_OR_expression        shift and go to state 173
    literal                        shift and go to state 174
    exclusive_OR_expression        shift and go to state 176
    operator_function_name         shift and go to state 50
    AND_expression                 shift and go to state 180
    equality_expression            shift and go to state 181
    relational_expression          shift and go to state 182
    shift_expression               shift and go to state 183
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186

state 378

    (75) allocation_expression -> NEW LPAREN type_name . RPAREN new_initializer
    (76) allocation_expression -> NEW LPAREN type_name . RPAREN

    RPAREN          shift and go to state 435


state 379

    (77) new_type_name -> type_specifier_ new_declarator .
    (79) new_declarator -> new_declarator . MULTOP
    (81) new_declarator -> new_declarator . LSPAREN expression RSPAREN

  ! shift/reduce conflict for MULTOP resolved as shift
    LPAREN          reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    EQUAL           reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    MULTEQOP        reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    DIVEQOP         reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    MODEQOP         reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    PLUSEQOP        reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    MINUSEQOP       reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    LSHIFTEQOP      reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    RSHIFTEQOP      reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    BANDEQOP        reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    BOREQOP         reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    DOTSTAR         reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    ARROWSTAR       reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    DIVOP           reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    MODOP           reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    PLUSOP          reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    MINUSOP         reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    LSHIFT          reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    RSHIFT          reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    LTCOMP          reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    GTCOMP          reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    LTECOMP         reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    GTECOMP         reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    EQCOMP          reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    NEQCOMP         reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    BANDOP          reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    XOROP           reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    OROP            reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    ANDOP           reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    QUESMARK        reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    RPAREN          reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    COMMA           reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    RSPAREN         reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    SEMICOLON       reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    RCPAREN         reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    COLON           reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    RTEMPLATE       reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    MULTOP          shift and go to state 436
    LSPAREN         shift and go to state 437

  ! MULTOP          [ reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .) ]


state 380

    (80) new_declarator -> MULTOP .

    MULTOP          reduce using rule 80 (new_declarator -> MULTOP .)
    LSPAREN         reduce using rule 80 (new_declarator -> MULTOP .)
    LPAREN          reduce using rule 80 (new_declarator -> MULTOP .)
    EQUAL           reduce using rule 80 (new_declarator -> MULTOP .)
    MULTEQOP        reduce using rule 80 (new_declarator -> MULTOP .)
    DIVEQOP         reduce using rule 80 (new_declarator -> MULTOP .)
    MODEQOP         reduce using rule 80 (new_declarator -> MULTOP .)
    PLUSEQOP        reduce using rule 80 (new_declarator -> MULTOP .)
    MINUSEQOP       reduce using rule 80 (new_declarator -> MULTOP .)
    LSHIFTEQOP      reduce using rule 80 (new_declarator -> MULTOP .)
    RSHIFTEQOP      reduce using rule 80 (new_declarator -> MULTOP .)
    BANDEQOP        reduce using rule 80 (new_declarator -> MULTOP .)
    BOREQOP         reduce using rule 80 (new_declarator -> MULTOP .)
    DOTSTAR         reduce using rule 80 (new_declarator -> MULTOP .)
    ARROWSTAR       reduce using rule 80 (new_declarator -> MULTOP .)
    DIVOP           reduce using rule 80 (new_declarator -> MULTOP .)
    MODOP           reduce using rule 80 (new_declarator -> MULTOP .)
    PLUSOP          reduce using rule 80 (new_declarator -> MULTOP .)
    MINUSOP         reduce using rule 80 (new_declarator -> MULTOP .)
    LSHIFT          reduce using rule 80 (new_declarator -> MULTOP .)
    RSHIFT          reduce using rule 80 (new_declarator -> MULTOP .)
    LTCOMP          reduce using rule 80 (new_declarator -> MULTOP .)
    GTCOMP          reduce using rule 80 (new_declarator -> MULTOP .)
    LTECOMP         reduce using rule 80 (new_declarator -> MULTOP .)
    GTECOMP         reduce using rule 80 (new_declarator -> MULTOP .)
    EQCOMP          reduce using rule 80 (new_declarator -> MULTOP .)
    NEQCOMP         reduce using rule 80 (new_declarator -> MULTOP .)
    BANDOP          reduce using rule 80 (new_declarator -> MULTOP .)
    XOROP           reduce using rule 80 (new_declarator -> MULTOP .)
    OROP            reduce using rule 80 (new_declarator -> MULTOP .)
    ANDOP           reduce using rule 80 (new_declarator -> MULTOP .)
    QUESMARK        reduce using rule 80 (new_declarator -> MULTOP .)
    RPAREN          reduce using rule 80 (new_declarator -> MULTOP .)
    COMMA           reduce using rule 80 (new_declarator -> MULTOP .)
    RSPAREN         reduce using rule 80 (new_declarator -> MULTOP .)
    SEMICOLON       reduce using rule 80 (new_declarator -> MULTOP .)
    RCPAREN         reduce using rule 80 (new_declarator -> MULTOP .)
    COLON           reduce using rule 80 (new_declarator -> MULTOP .)
    RTEMPLATE       reduce using rule 80 (new_declarator -> MULTOP .)


state 381

    (82) new_declarator -> LSPAREN . expression RSPAREN
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (135) operator_function_name -> . OPERATOR operator_name
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression

    THROW           shift and go to state 224
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    THIS            shift and go to state 175
    LPAREN          shift and go to state 144
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    expression                     shift and go to state 438
    assignment_expression          shift and go to state 222
    throw_expression               shift and go to state 223
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    logical_OR_expression          shift and go to state 153
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    cast_expression                shift and go to state 158
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    logical_AND_expression         shift and go to state 163
    primary_expression             shift and go to state 164
    simple_type_name               shift and go to state 192
    name                           shift and go to state 166
    inclusive_OR_expression        shift and go to state 173
    literal                        shift and go to state 174
    exclusive_OR_expression        shift and go to state 176
    operator_function_name         shift and go to state 50
    AND_expression                 shift and go to state 180
    equality_expression            shift and go to state 181
    relational_expression          shift and go to state 182
    shift_expression               shift and go to state 183
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186

state 382

    (20) inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .
    (22) exclusive_OR_expression -> exclusive_OR_expression . XOROP AND_expression

    OROP            reduce using rule 20 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    ANDOP           reduce using rule 20 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    QUESMARK        reduce using rule 20 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    RPAREN          reduce using rule 20 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    COMMA           reduce using rule 20 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    RSPAREN         reduce using rule 20 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    SEMICOLON       reduce using rule 20 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    RCPAREN         reduce using rule 20 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    COLON           reduce using rule 20 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    RTEMPLATE       reduce using rule 20 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    XOROP           shift and go to state 297


state 383

    (22) exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .
    (24) AND_expression -> AND_expression . BANDOP equality_expression

    XOROP           reduce using rule 22 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    OROP            reduce using rule 22 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    ANDOP           reduce using rule 22 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    QUESMARK        reduce using rule 22 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    RPAREN          reduce using rule 22 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    COMMA           reduce using rule 22 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    RSPAREN         reduce using rule 22 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    SEMICOLON       reduce using rule 22 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    RCPAREN         reduce using rule 22 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    COLON           reduce using rule 22 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    RTEMPLATE       reduce using rule 22 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    BANDOP          shift and go to state 298


state 384

    (24) AND_expression -> AND_expression BANDOP equality_expression .
    (26) equality_expression -> equality_expression . EQCOMP relational_expression
    (27) equality_expression -> equality_expression . NEQCOMP relational_expression

    BANDOP          reduce using rule 24 (AND_expression -> AND_expression BANDOP equality_expression .)
    XOROP           reduce using rule 24 (AND_expression -> AND_expression BANDOP equality_expression .)
    OROP            reduce using rule 24 (AND_expression -> AND_expression BANDOP equality_expression .)
    ANDOP           reduce using rule 24 (AND_expression -> AND_expression BANDOP equality_expression .)
    QUESMARK        reduce using rule 24 (AND_expression -> AND_expression BANDOP equality_expression .)
    RPAREN          reduce using rule 24 (AND_expression -> AND_expression BANDOP equality_expression .)
    COMMA           reduce using rule 24 (AND_expression -> AND_expression BANDOP equality_expression .)
    RSPAREN         reduce using rule 24 (AND_expression -> AND_expression BANDOP equality_expression .)
    SEMICOLON       reduce using rule 24 (AND_expression -> AND_expression BANDOP equality_expression .)
    RCPAREN         reduce using rule 24 (AND_expression -> AND_expression BANDOP equality_expression .)
    COLON           reduce using rule 24 (AND_expression -> AND_expression BANDOP equality_expression .)
    RTEMPLATE       reduce using rule 24 (AND_expression -> AND_expression BANDOP equality_expression .)
    EQCOMP          shift and go to state 299
    NEQCOMP         shift and go to state 300


state 385

    (26) equality_expression -> equality_expression EQCOMP relational_expression .
    (29) relational_expression -> relational_expression . LTCOMP shift_expression
    (30) relational_expression -> relational_expression . GTCOMP shift_expression
    (31) relational_expression -> relational_expression . LTECOMP shift_expression
    (32) relational_expression -> relational_expression . GTECOMP shift_expression

    EQCOMP          reduce using rule 26 (equality_expression -> equality_expression EQCOMP relational_expression .)
    NEQCOMP         reduce using rule 26 (equality_expression -> equality_expression EQCOMP relational_expression .)
    BANDOP          reduce using rule 26 (equality_expression -> equality_expression EQCOMP relational_expression .)
    XOROP           reduce using rule 26 (equality_expression -> equality_expression EQCOMP relational_expression .)
    OROP            reduce using rule 26 (equality_expression -> equality_expression EQCOMP relational_expression .)
    ANDOP           reduce using rule 26 (equality_expression -> equality_expression EQCOMP relational_expression .)
    QUESMARK        reduce using rule 26 (equality_expression -> equality_expression EQCOMP relational_expression .)
    RPAREN          reduce using rule 26 (equality_expression -> equality_expression EQCOMP relational_expression .)
    COMMA           reduce using rule 26 (equality_expression -> equality_expression EQCOMP relational_expression .)
    RSPAREN         reduce using rule 26 (equality_expression -> equality_expression EQCOMP relational_expression .)
    SEMICOLON       reduce using rule 26 (equality_expression -> equality_expression EQCOMP relational_expression .)
    RCPAREN         reduce using rule 26 (equality_expression -> equality_expression EQCOMP relational_expression .)
    COLON           reduce using rule 26 (equality_expression -> equality_expression EQCOMP relational_expression .)
    RTEMPLATE       reduce using rule 26 (equality_expression -> equality_expression EQCOMP relational_expression .)
    LTCOMP          shift and go to state 301
    GTCOMP          shift and go to state 302
    LTECOMP         shift and go to state 303
    GTECOMP         shift and go to state 304


state 386

    (27) equality_expression -> equality_expression NEQCOMP relational_expression .
    (29) relational_expression -> relational_expression . LTCOMP shift_expression
    (30) relational_expression -> relational_expression . GTCOMP shift_expression
    (31) relational_expression -> relational_expression . LTECOMP shift_expression
    (32) relational_expression -> relational_expression . GTECOMP shift_expression

    EQCOMP          reduce using rule 27 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    NEQCOMP         reduce using rule 27 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    BANDOP          reduce using rule 27 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    XOROP           reduce using rule 27 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    OROP            reduce using rule 27 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    ANDOP           reduce using rule 27 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    QUESMARK        reduce using rule 27 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    RPAREN          reduce using rule 27 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    COMMA           reduce using rule 27 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    RSPAREN         reduce using rule 27 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    SEMICOLON       reduce using rule 27 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    RCPAREN         reduce using rule 27 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    COLON           reduce using rule 27 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    RTEMPLATE       reduce using rule 27 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    LTCOMP          shift and go to state 301
    GTCOMP          shift and go to state 302
    LTECOMP         shift and go to state 303
    GTECOMP         shift and go to state 304


state 387

    (29) relational_expression -> relational_expression LTCOMP shift_expression .
    (34) shift_expression -> shift_expression . LSHIFT additive_expression
    (35) shift_expression -> shift_expression . RSHIFT additive_expression

    LTCOMP          reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    GTCOMP          reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    LTECOMP         reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    GTECOMP         reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    EQCOMP          reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    NEQCOMP         reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    BANDOP          reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    XOROP           reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    OROP            reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    ANDOP           reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    QUESMARK        reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    RPAREN          reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    COMMA           reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    RSPAREN         reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    SEMICOLON       reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    RCPAREN         reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    COLON           reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    RTEMPLATE       reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    LSHIFT          shift and go to state 305
    RSHIFT          shift and go to state 306


state 388

    (30) relational_expression -> relational_expression GTCOMP shift_expression .
    (34) shift_expression -> shift_expression . LSHIFT additive_expression
    (35) shift_expression -> shift_expression . RSHIFT additive_expression

    LTCOMP          reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    GTCOMP          reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    LTECOMP         reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    GTECOMP         reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    EQCOMP          reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    NEQCOMP         reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    BANDOP          reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    XOROP           reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    OROP            reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    ANDOP           reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    QUESMARK        reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    RPAREN          reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    COMMA           reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    RSPAREN         reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    SEMICOLON       reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    RCPAREN         reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    COLON           reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    RTEMPLATE       reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    LSHIFT          shift and go to state 305
    RSHIFT          shift and go to state 306


state 389

    (31) relational_expression -> relational_expression LTECOMP shift_expression .
    (34) shift_expression -> shift_expression . LSHIFT additive_expression
    (35) shift_expression -> shift_expression . RSHIFT additive_expression

    LTCOMP          reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    GTCOMP          reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    LTECOMP         reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    GTECOMP         reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    EQCOMP          reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    NEQCOMP         reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    BANDOP          reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    XOROP           reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    OROP            reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    ANDOP           reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    QUESMARK        reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    RPAREN          reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    COMMA           reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    RSPAREN         reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    SEMICOLON       reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    RCPAREN         reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    COLON           reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    RTEMPLATE       reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    LSHIFT          shift and go to state 305
    RSHIFT          shift and go to state 306


state 390

    (32) relational_expression -> relational_expression GTECOMP shift_expression .
    (34) shift_expression -> shift_expression . LSHIFT additive_expression
    (35) shift_expression -> shift_expression . RSHIFT additive_expression

    LTCOMP          reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    GTCOMP          reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    LTECOMP         reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    GTECOMP         reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    EQCOMP          reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    NEQCOMP         reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    BANDOP          reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    XOROP           reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    OROP            reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    ANDOP           reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    QUESMARK        reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    RPAREN          reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    COMMA           reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    RSPAREN         reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    SEMICOLON       reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    RCPAREN         reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    COLON           reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    RTEMPLATE       reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    LSHIFT          shift and go to state 305
    RSHIFT          shift and go to state 306


state 391

    (34) shift_expression -> shift_expression LSHIFT additive_expression .
    (37) additive_expression -> additive_expression . PLUSOP multiplicative_expression
    (38) additive_expression -> additive_expression . MINUSOP multiplicative_expression

    LSHIFT          reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RSHIFT          reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LTCOMP          reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    GTCOMP          reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LTECOMP         reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    GTECOMP         reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    EQCOMP          reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    NEQCOMP         reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    BANDOP          reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    XOROP           reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    OROP            reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    ANDOP           reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    QUESMARK        reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RPAREN          reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    COMMA           reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RSPAREN         reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    SEMICOLON       reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RCPAREN         reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    COLON           reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RTEMPLATE       reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    PLUSOP          shift and go to state 307
    MINUSOP         shift and go to state 308


state 392

    (35) shift_expression -> shift_expression RSHIFT additive_expression .
    (37) additive_expression -> additive_expression . PLUSOP multiplicative_expression
    (38) additive_expression -> additive_expression . MINUSOP multiplicative_expression

    LSHIFT          reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RSHIFT          reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LTCOMP          reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    GTCOMP          reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LTECOMP         reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    GTECOMP         reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    EQCOMP          reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    NEQCOMP         reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    BANDOP          reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    XOROP           reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    OROP            reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    ANDOP           reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    QUESMARK        reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RPAREN          reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    COMMA           reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RSPAREN         reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    SEMICOLON       reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RCPAREN         reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    COLON           reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RTEMPLATE       reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    PLUSOP          shift and go to state 307
    MINUSOP         shift and go to state 308


state 393

    (37) additive_expression -> additive_expression PLUSOP multiplicative_expression .
    (40) multiplicative_expression -> multiplicative_expression . MULTOP pm_expression
    (41) multiplicative_expression -> multiplicative_expression . DIVOP pm_expression
    (42) multiplicative_expression -> multiplicative_expression . MODOP pm_expression

    PLUSOP          reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    MINUSOP         reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    LSHIFT          reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    RSHIFT          reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    LTCOMP          reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    GTCOMP          reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    LTECOMP         reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    GTECOMP         reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    EQCOMP          reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    NEQCOMP         reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    BANDOP          reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    XOROP           reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    OROP            reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    ANDOP           reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    QUESMARK        reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    RPAREN          reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    COMMA           reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    RSPAREN         reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    SEMICOLON       reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    RCPAREN         reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    COLON           reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    RTEMPLATE       reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    MULTOP          shift and go to state 309
    DIVOP           shift and go to state 310
    MODOP           shift and go to state 311


state 394

    (38) additive_expression -> additive_expression MINUSOP multiplicative_expression .
    (40) multiplicative_expression -> multiplicative_expression . MULTOP pm_expression
    (41) multiplicative_expression -> multiplicative_expression . DIVOP pm_expression
    (42) multiplicative_expression -> multiplicative_expression . MODOP pm_expression

    PLUSOP          reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    MINUSOP         reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    LSHIFT          reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    RSHIFT          reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    LTCOMP          reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    GTCOMP          reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    LTECOMP         reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    GTECOMP         reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    EQCOMP          reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    NEQCOMP         reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    BANDOP          reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    XOROP           reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    OROP            reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    ANDOP           reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    QUESMARK        reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    RPAREN          reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    COMMA           reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    RSPAREN         reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    SEMICOLON       reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    RCPAREN         reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    COLON           reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    RTEMPLATE       reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    MULTOP          shift and go to state 309
    DIVOP           shift and go to state 310
    MODOP           shift and go to state 311


state 395

    (40) multiplicative_expression -> multiplicative_expression MULTOP pm_expression .
    (44) pm_expression -> pm_expression . DOTSTAR cast_expression
    (45) pm_expression -> pm_expression . ARROWSTAR cast_expression

    MULTOP          reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    DIVOP           reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    MODOP           reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    PLUSOP          reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    MINUSOP         reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    LSHIFT          reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    RSHIFT          reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    LTCOMP          reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    GTCOMP          reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    LTECOMP         reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    GTECOMP         reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    EQCOMP          reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    NEQCOMP         reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    BANDOP          reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    XOROP           reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    OROP            reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    ANDOP           reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    QUESMARK        reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    RPAREN          reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    COMMA           reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    RSPAREN         reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    SEMICOLON       reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    RCPAREN         reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    COLON           reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    RTEMPLATE       reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    DOTSTAR         shift and go to state 312
    ARROWSTAR       shift and go to state 313


state 396

    (41) multiplicative_expression -> multiplicative_expression DIVOP pm_expression .
    (44) pm_expression -> pm_expression . DOTSTAR cast_expression
    (45) pm_expression -> pm_expression . ARROWSTAR cast_expression

    MULTOP          reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    DIVOP           reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    MODOP           reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    PLUSOP          reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    MINUSOP         reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    LSHIFT          reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    RSHIFT          reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    LTCOMP          reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    GTCOMP          reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    LTECOMP         reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    GTECOMP         reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    EQCOMP          reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    NEQCOMP         reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    BANDOP          reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    XOROP           reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    OROP            reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    ANDOP           reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    QUESMARK        reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    RPAREN          reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    COMMA           reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    RSPAREN         reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    SEMICOLON       reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    RCPAREN         reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    COLON           reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    RTEMPLATE       reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    DOTSTAR         shift and go to state 312
    ARROWSTAR       shift and go to state 313


state 397

    (42) multiplicative_expression -> multiplicative_expression MODOP pm_expression .
    (44) pm_expression -> pm_expression . DOTSTAR cast_expression
    (45) pm_expression -> pm_expression . ARROWSTAR cast_expression

    MULTOP          reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    DIVOP           reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    MODOP           reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    PLUSOP          reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    MINUSOP         reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    LSHIFT          reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    RSHIFT          reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    LTCOMP          reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    GTCOMP          reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    LTECOMP         reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    GTECOMP         reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    EQCOMP          reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    NEQCOMP         reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    BANDOP          reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    XOROP           reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    OROP            reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    ANDOP           reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    QUESMARK        reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    RPAREN          reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    COMMA           reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    RSPAREN         reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    SEMICOLON       reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    RCPAREN         reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    COLON           reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    RTEMPLATE       reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    DOTSTAR         shift and go to state 312
    ARROWSTAR       shift and go to state 313


state 398

    (44) pm_expression -> pm_expression DOTSTAR cast_expression .

    DOTSTAR         reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    ARROWSTAR       reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    MULTOP          reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    DIVOP           reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    MODOP           reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    PLUSOP          reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    MINUSOP         reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    LSHIFT          reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    RSHIFT          reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    LTCOMP          reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    GTCOMP          reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    LTECOMP         reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    GTECOMP         reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    EQCOMP          reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    NEQCOMP         reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    BANDOP          reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    XOROP           reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    OROP            reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    ANDOP           reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    QUESMARK        reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    RPAREN          reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    COMMA           reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    RSPAREN         reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    SEMICOLON       reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    RCPAREN         reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    COLON           reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    RTEMPLATE       reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)


state 399

    (45) pm_expression -> pm_expression ARROWSTAR cast_expression .

    DOTSTAR         reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    ARROWSTAR       reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    MULTOP          reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    DIVOP           reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    MODOP           reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    PLUSOP          reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    MINUSOP         reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    LSHIFT          reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    RSHIFT          reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    LTCOMP          reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    GTCOMP          reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    LTECOMP         reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    GTECOMP         reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    EQCOMP          reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    NEQCOMP         reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    BANDOP          reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    XOROP           reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    OROP            reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    ANDOP           reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    QUESMARK        reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    RPAREN          reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    COMMA           reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    RSPAREN         reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    SEMICOLON       reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    RCPAREN         reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    COLON           reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    RTEMPLATE       reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)


state 400

    (291) initializer_list -> LCPAREN initializer_list . RCPAREN
    (292) initializer_list -> LCPAREN initializer_list . COMMA RCPAREN
    (290) initializer_list -> initializer_list . COMMA assignment_expression

    RCPAREN         shift and go to state 439
    COMMA           shift and go to state 440


state 401

    (286) initializer -> EQUAL LCPAREN initializer_list RCPAREN .

    SEMICOLON       reduce using rule 286 (initializer -> EQUAL LCPAREN initializer_list RCPAREN .)
    COMMA           reduce using rule 286 (initializer -> EQUAL LCPAREN initializer_list RCPAREN .)


state 402

    (287) initializer -> EQUAL LCPAREN initializer_list COMMA . RCPAREN
    (290) initializer_list -> initializer_list COMMA . assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (135) operator_function_name -> . OPERATOR operator_name
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RCPAREN         shift and go to state 441
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    THIS            shift and go to state 175
    LPAREN          shift and go to state 144
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    assignment_expression          shift and go to state 442
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    logical_OR_expression          shift and go to state 153
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    cast_expression                shift and go to state 158
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    logical_AND_expression         shift and go to state 163
    primary_expression             shift and go to state 164
    simple_type_name               shift and go to state 192
    name                           shift and go to state 166
    inclusive_OR_expression        shift and go to state 173
    literal                        shift and go to state 174
    exclusive_OR_expression        shift and go to state 176
    operator_function_name         shift and go to state 50
    AND_expression                 shift and go to state 180
    equality_expression            shift and go to state 181
    relational_expression          shift and go to state 182
    shift_expression               shift and go to state 183
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186

state 403

    (258) labeled_statement -> IDENTIFIER COLON statement .

    RCPAREN         reduce using rule 258 (labeled_statement -> IDENTIFIER COLON statement .)
    IDENTIFIER      reduce using rule 258 (labeled_statement -> IDENTIFIER COLON statement .)
    CASE            reduce using rule 258 (labeled_statement -> IDENTIFIER COLON statement .)
    DEFAULT         reduce using rule 258 (labeled_statement -> IDENTIFIER COLON statement .)
    SEMICOLON       reduce using rule 258 (labeled_statement -> IDENTIFIER COLON statement .)
    LCPAREN         reduce using rule 258 (labeled_statement -> IDENTIFIER COLON statement .)
    IF              reduce using rule 258 (labeled_statement -> IDENTIFIER COLON statement .)
    SWITCH          reduce using rule 258 (labeled_statement -> IDENTIFIER COLON statement .)
    WHILE           reduce using rule 258 (labeled_statement -> IDENTIFIER COLON statement .)
    DO              reduce using rule 258 (labeled_statement -> IDENTIFIER COLON statement .)
    FOR             reduce using rule 258 (labeled_statement -> IDENTIFIER COLON statement .)
    BREAK           reduce using rule 258 (labeled_statement -> IDENTIFIER COLON statement .)
    CONTINUE        reduce using rule 258 (labeled_statement -> IDENTIFIER COLON statement .)
    RETURN          reduce using rule 258 (labeled_statement -> IDENTIFIER COLON statement .)
    GOTO            reduce using rule 258 (labeled_statement -> IDENTIFIER COLON statement .)
    TRY             reduce using rule 258 (labeled_statement -> IDENTIFIER COLON statement .)
    THROW           reduce using rule 258 (labeled_statement -> IDENTIFIER COLON statement .)
    CONST           reduce using rule 258 (labeled_statement -> IDENTIFIER COLON statement .)
    TYPEDEF         reduce using rule 258 (labeled_statement -> IDENTIFIER COLON statement .)
    ASM             reduce using rule 258 (labeled_statement -> IDENTIFIER COLON statement .)
    TEMPLATE        reduce using rule 258 (labeled_statement -> IDENTIFIER COLON statement .)
    DPLUSOP         reduce using rule 258 (labeled_statement -> IDENTIFIER COLON statement .)
    DMINUSOP        reduce using rule 258 (labeled_statement -> IDENTIFIER COLON statement .)
    SIZEOF          reduce using rule 258 (labeled_statement -> IDENTIFIER COLON statement .)
    PLUSOP          reduce using rule 258 (labeled_statement -> IDENTIFIER COLON statement .)
    MINUSOP         reduce using rule 258 (labeled_statement -> IDENTIFIER COLON statement .)
    NOTSYM          reduce using rule 258 (labeled_statement -> IDENTIFIER COLON statement .)
    BNOP            reduce using rule 258 (labeled_statement -> IDENTIFIER COLON statement .)
    MULTOP          reduce using rule 258 (labeled_statement -> IDENTIFIER COLON statement .)
    BANDOP          reduce using rule 258 (labeled_statement -> IDENTIFIER COLON statement .)
    NEW             reduce using rule 258 (labeled_statement -> IDENTIFIER COLON statement .)
    DELETE          reduce using rule 258 (labeled_statement -> IDENTIFIER COLON statement .)
    CHAR            reduce using rule 258 (labeled_statement -> IDENTIFIER COLON statement .)
    SHORT           reduce using rule 258 (labeled_statement -> IDENTIFIER COLON statement .)
    INT             reduce using rule 258 (labeled_statement -> IDENTIFIER COLON statement .)
    LONG            reduce using rule 258 (labeled_statement -> IDENTIFIER COLON statement .)
    SIGNED          reduce using rule 258 (labeled_statement -> IDENTIFIER COLON statement .)
    UNSIGNED        reduce using rule 258 (labeled_statement -> IDENTIFIER COLON statement .)
    FLOAT           reduce using rule 258 (labeled_statement -> IDENTIFIER COLON statement .)
    DOUBLE          reduce using rule 258 (labeled_statement -> IDENTIFIER COLON statement .)
    VOID            reduce using rule 258 (labeled_statement -> IDENTIFIER COLON statement .)
    STRING          reduce using rule 258 (labeled_statement -> IDENTIFIER COLON statement .)
    AUTO            reduce using rule 258 (labeled_statement -> IDENTIFIER COLON statement .)
    TYPE            reduce using rule 258 (labeled_statement -> IDENTIFIER COLON statement .)
    CLASS           reduce using rule 258 (labeled_statement -> IDENTIFIER COLON statement .)
    STRUCT          reduce using rule 258 (labeled_statement -> IDENTIFIER COLON statement .)
    THIS            reduce using rule 258 (labeled_statement -> IDENTIFIER COLON statement .)
    LPAREN          reduce using rule 258 (labeled_statement -> IDENTIFIER COLON statement .)
    NUMBER          reduce using rule 258 (labeled_statement -> IDENTIFIER COLON statement .)
    STRING_L        reduce using rule 258 (labeled_statement -> IDENTIFIER COLON statement .)
    SCHAR           reduce using rule 258 (labeled_statement -> IDENTIFIER COLON statement .)
    DOUBLEBNOP      reduce using rule 258 (labeled_statement -> IDENTIFIER COLON statement .)
    OPERATOR        reduce using rule 258 (labeled_statement -> IDENTIFIER COLON statement .)
    ELSE            reduce using rule 258 (labeled_statement -> IDENTIFIER COLON statement .)


state 404

    (259) labeled_statement -> CASE constant_expression COLON . statement
    (241) statement -> . labeled_statement
    (242) statement -> . expression_statement
    (243) statement -> . compound_statement
    (244) statement -> . selection_statement
    (245) statement -> . iteration_statement
    (246) statement -> . jump_statement
    (247) statement -> . declaration_statement
    (248) statement -> . try_block
    (258) labeled_statement -> . IDENTIFIER COLON statement
    (259) labeled_statement -> . CASE constant_expression COLON statement
    (260) labeled_statement -> . DEFAULT COLON statement
    (269) expression_statement -> . expression SEMICOLON
    (270) expression_statement -> . SEMICOLON
    (237) compound_statement -> . LCPAREN statement_list RCPAREN
    (238) compound_statement -> . LCPAREN RCPAREN
    (254) selection_statement -> . IF LPAREN expression RPAREN statement
    (255) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (256) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (261) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (262) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (263) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (264) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (265) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (266) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (249) jump_statement -> . BREAK SEMICOLON
    (250) jump_statement -> . CONTINUE SEMICOLON
    (251) jump_statement -> . RETURN expression SEMICOLON
    (252) jump_statement -> . RETURN SEMICOLON
    (253) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (271) declaration_statement -> . declaration
    (257) try_block -> . TRY compound_statement CATCH compound_statement
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (272) declaration -> . type_specifier_ declarator_list SEMICOLON
    (273) declaration -> . type_specifier_ SEMICOLON
    (274) declaration -> . asm_declaration
    (275) declaration -> . function_definition
    (276) declaration -> . class_define_specifier SEMICOLON
    (277) declaration -> . template_declaration
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (179) type_specifier_ -> . CONST type_specifier
    (180) type_specifier_ -> . TYPEDEF type_specifier
    (181) type_specifier_ -> . type_specifier
    (293) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (235) function_definition -> . type_specifier_ declarator fct_body
    (213) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (214) class_define_specifier -> . class_head LCPAREN RCPAREN
    (278) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (182) type_specifier -> . simple_type_name
    (183) type_specifier -> . complex_type_specifier
    (200) class_head -> . class_key IDENTIFIER base_spec
    (201) class_head -> . class_key IDENTIFIER
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (195) complex_type_specifier -> . class_key IDENTIFIER
    (196) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (197) complex_type_specifier -> . TYPE IDENTIFIER
    (198) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (211) class_key -> . CLASS
    (212) class_key -> . STRUCT
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (135) operator_function_name -> . OPERATOR operator_name
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 206
    CASE            shift and go to state 207
    DEFAULT         shift and go to state 208
    SEMICOLON       shift and go to state 210
    LCPAREN         shift and go to state 73
    IF              shift and go to state 211
    SWITCH          shift and go to state 212
    WHILE           shift and go to state 213
    DO              shift and go to state 214
    FOR             shift and go to state 215
    BREAK           shift and go to state 216
    CONTINUE        shift and go to state 217
    RETURN          shift and go to state 218
    GOTO            shift and go to state 219
    TRY             shift and go to state 221
    THROW           shift and go to state 224
    CONST           shift and go to state 14
    TYPEDEF         shift and go to state 16
    ASM             shift and go to state 17
    TEMPLATE        shift and go to state 19
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    TYPE            shift and go to state 34
    CLASS           shift and go to state 35
    STRUCT          shift and go to state 36
    THIS            shift and go to state 175
    LPAREN          shift and go to state 144
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    statement                      shift and go to state 443
    labeled_statement              shift and go to state 198
    expression_statement           shift and go to state 199
    compound_statement             shift and go to state 200
    selection_statement            shift and go to state 201
    iteration_statement            shift and go to state 202
    jump_statement                 shift and go to state 203
    declaration_statement          shift and go to state 204
    try_block                      shift and go to state 205
    expression                     shift and go to state 209
    declaration                    shift and go to state 220
    assignment_expression          shift and go to state 222
    throw_expression               shift and go to state 223
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    class_define_specifier         shift and go to state 12
    template_declaration           shift and go to state 13
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    type_specifier                 shift and go to state 15
    class_head                     shift and go to state 18
    logical_OR_expression          shift and go to state 153
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    cast_expression                shift and go to state 158
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    simple_type_name               shift and go to state 225
    complex_type_specifier         shift and go to state 21
    class_key                      shift and go to state 22
    logical_AND_expression         shift and go to state 163
    primary_expression             shift and go to state 164
    name                           shift and go to state 166
    inclusive_OR_expression        shift and go to state 173
    literal                        shift and go to state 174
    exclusive_OR_expression        shift and go to state 176
    operator_function_name         shift and go to state 50
    AND_expression                 shift and go to state 180
    equality_expression            shift and go to state 181
    relational_expression          shift and go to state 182
    shift_expression               shift and go to state 183
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186

state 405

    (260) labeled_statement -> DEFAULT COLON statement .

    RCPAREN         reduce using rule 260 (labeled_statement -> DEFAULT COLON statement .)
    IDENTIFIER      reduce using rule 260 (labeled_statement -> DEFAULT COLON statement .)
    CASE            reduce using rule 260 (labeled_statement -> DEFAULT COLON statement .)
    DEFAULT         reduce using rule 260 (labeled_statement -> DEFAULT COLON statement .)
    SEMICOLON       reduce using rule 260 (labeled_statement -> DEFAULT COLON statement .)
    LCPAREN         reduce using rule 260 (labeled_statement -> DEFAULT COLON statement .)
    IF              reduce using rule 260 (labeled_statement -> DEFAULT COLON statement .)
    SWITCH          reduce using rule 260 (labeled_statement -> DEFAULT COLON statement .)
    WHILE           reduce using rule 260 (labeled_statement -> DEFAULT COLON statement .)
    DO              reduce using rule 260 (labeled_statement -> DEFAULT COLON statement .)
    FOR             reduce using rule 260 (labeled_statement -> DEFAULT COLON statement .)
    BREAK           reduce using rule 260 (labeled_statement -> DEFAULT COLON statement .)
    CONTINUE        reduce using rule 260 (labeled_statement -> DEFAULT COLON statement .)
    RETURN          reduce using rule 260 (labeled_statement -> DEFAULT COLON statement .)
    GOTO            reduce using rule 260 (labeled_statement -> DEFAULT COLON statement .)
    TRY             reduce using rule 260 (labeled_statement -> DEFAULT COLON statement .)
    THROW           reduce using rule 260 (labeled_statement -> DEFAULT COLON statement .)
    CONST           reduce using rule 260 (labeled_statement -> DEFAULT COLON statement .)
    TYPEDEF         reduce using rule 260 (labeled_statement -> DEFAULT COLON statement .)
    ASM             reduce using rule 260 (labeled_statement -> DEFAULT COLON statement .)
    TEMPLATE        reduce using rule 260 (labeled_statement -> DEFAULT COLON statement .)
    DPLUSOP         reduce using rule 260 (labeled_statement -> DEFAULT COLON statement .)
    DMINUSOP        reduce using rule 260 (labeled_statement -> DEFAULT COLON statement .)
    SIZEOF          reduce using rule 260 (labeled_statement -> DEFAULT COLON statement .)
    PLUSOP          reduce using rule 260 (labeled_statement -> DEFAULT COLON statement .)
    MINUSOP         reduce using rule 260 (labeled_statement -> DEFAULT COLON statement .)
    NOTSYM          reduce using rule 260 (labeled_statement -> DEFAULT COLON statement .)
    BNOP            reduce using rule 260 (labeled_statement -> DEFAULT COLON statement .)
    MULTOP          reduce using rule 260 (labeled_statement -> DEFAULT COLON statement .)
    BANDOP          reduce using rule 260 (labeled_statement -> DEFAULT COLON statement .)
    NEW             reduce using rule 260 (labeled_statement -> DEFAULT COLON statement .)
    DELETE          reduce using rule 260 (labeled_statement -> DEFAULT COLON statement .)
    CHAR            reduce using rule 260 (labeled_statement -> DEFAULT COLON statement .)
    SHORT           reduce using rule 260 (labeled_statement -> DEFAULT COLON statement .)
    INT             reduce using rule 260 (labeled_statement -> DEFAULT COLON statement .)
    LONG            reduce using rule 260 (labeled_statement -> DEFAULT COLON statement .)
    SIGNED          reduce using rule 260 (labeled_statement -> DEFAULT COLON statement .)
    UNSIGNED        reduce using rule 260 (labeled_statement -> DEFAULT COLON statement .)
    FLOAT           reduce using rule 260 (labeled_statement -> DEFAULT COLON statement .)
    DOUBLE          reduce using rule 260 (labeled_statement -> DEFAULT COLON statement .)
    VOID            reduce using rule 260 (labeled_statement -> DEFAULT COLON statement .)
    STRING          reduce using rule 260 (labeled_statement -> DEFAULT COLON statement .)
    AUTO            reduce using rule 260 (labeled_statement -> DEFAULT COLON statement .)
    TYPE            reduce using rule 260 (labeled_statement -> DEFAULT COLON statement .)
    CLASS           reduce using rule 260 (labeled_statement -> DEFAULT COLON statement .)
    STRUCT          reduce using rule 260 (labeled_statement -> DEFAULT COLON statement .)
    THIS            reduce using rule 260 (labeled_statement -> DEFAULT COLON statement .)
    LPAREN          reduce using rule 260 (labeled_statement -> DEFAULT COLON statement .)
    NUMBER          reduce using rule 260 (labeled_statement -> DEFAULT COLON statement .)
    STRING_L        reduce using rule 260 (labeled_statement -> DEFAULT COLON statement .)
    SCHAR           reduce using rule 260 (labeled_statement -> DEFAULT COLON statement .)
    DOUBLEBNOP      reduce using rule 260 (labeled_statement -> DEFAULT COLON statement .)
    OPERATOR        reduce using rule 260 (labeled_statement -> DEFAULT COLON statement .)
    ELSE            reduce using rule 260 (labeled_statement -> DEFAULT COLON statement .)


state 406

    (48) expression -> expression COMMA assignment_expression .

    SEMICOLON       reduce using rule 48 (expression -> expression COMMA assignment_expression .)
    COMMA           reduce using rule 48 (expression -> expression COMMA assignment_expression .)
    RPAREN          reduce using rule 48 (expression -> expression COMMA assignment_expression .)
    RTEMPLATE       reduce using rule 48 (expression -> expression COMMA assignment_expression .)
    COLON           reduce using rule 48 (expression -> expression COMMA assignment_expression .)
    RSPAREN         reduce using rule 48 (expression -> expression COMMA assignment_expression .)


state 407

    (254) selection_statement -> IF LPAREN expression . RPAREN statement
    (255) selection_statement -> IF LPAREN expression . RPAREN statement ELSE statement
    (48) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 444
    COMMA           shift and go to state 324


state 408

    (256) selection_statement -> SWITCH LPAREN expression . RPAREN statement
    (48) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 445
    COMMA           shift and go to state 324


state 409

    (261) iteration_statement -> WHILE LPAREN expression . RPAREN statement
    (48) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 446
    COMMA           shift and go to state 324


state 410

    (262) iteration_statement -> DO statement WHILE . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 447


state 411

    (263) iteration_statement -> FOR LPAREN for_init_statement . expression SEMICOLON expression RPAREN statement
    (264) iteration_statement -> FOR LPAREN for_init_statement . SEMICOLON expression RPAREN statement
    (265) iteration_statement -> FOR LPAREN for_init_statement . expression SEMICOLON RPAREN statement
    (266) iteration_statement -> FOR LPAREN for_init_statement . SEMICOLON RPAREN statement
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (135) operator_function_name -> . OPERATOR operator_name
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMICOLON       shift and go to state 449
    THROW           shift and go to state 224
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    THIS            shift and go to state 175
    LPAREN          shift and go to state 144
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    expression                     shift and go to state 448
    assignment_expression          shift and go to state 222
    throw_expression               shift and go to state 223
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    logical_OR_expression          shift and go to state 153
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    cast_expression                shift and go to state 158
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    logical_AND_expression         shift and go to state 163
    primary_expression             shift and go to state 164
    simple_type_name               shift and go to state 192
    name                           shift and go to state 166
    inclusive_OR_expression        shift and go to state 173
    literal                        shift and go to state 174
    exclusive_OR_expression        shift and go to state 176
    operator_function_name         shift and go to state 50
    AND_expression                 shift and go to state 180
    equality_expression            shift and go to state 181
    relational_expression          shift and go to state 182
    shift_expression               shift and go to state 183
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186

state 412

    (267) for_init_statement -> expression_statement .

    SEMICOLON       reduce using rule 267 (for_init_statement -> expression_statement .)
    THROW           reduce using rule 267 (for_init_statement -> expression_statement .)
    DPLUSOP         reduce using rule 267 (for_init_statement -> expression_statement .)
    DMINUSOP        reduce using rule 267 (for_init_statement -> expression_statement .)
    SIZEOF          reduce using rule 267 (for_init_statement -> expression_statement .)
    PLUSOP          reduce using rule 267 (for_init_statement -> expression_statement .)
    MINUSOP         reduce using rule 267 (for_init_statement -> expression_statement .)
    NOTSYM          reduce using rule 267 (for_init_statement -> expression_statement .)
    BNOP            reduce using rule 267 (for_init_statement -> expression_statement .)
    MULTOP          reduce using rule 267 (for_init_statement -> expression_statement .)
    BANDOP          reduce using rule 267 (for_init_statement -> expression_statement .)
    NEW             reduce using rule 267 (for_init_statement -> expression_statement .)
    DELETE          reduce using rule 267 (for_init_statement -> expression_statement .)
    THIS            reduce using rule 267 (for_init_statement -> expression_statement .)
    LPAREN          reduce using rule 267 (for_init_statement -> expression_statement .)
    CHAR            reduce using rule 267 (for_init_statement -> expression_statement .)
    SHORT           reduce using rule 267 (for_init_statement -> expression_statement .)
    INT             reduce using rule 267 (for_init_statement -> expression_statement .)
    LONG            reduce using rule 267 (for_init_statement -> expression_statement .)
    SIGNED          reduce using rule 267 (for_init_statement -> expression_statement .)
    UNSIGNED        reduce using rule 267 (for_init_statement -> expression_statement .)
    FLOAT           reduce using rule 267 (for_init_statement -> expression_statement .)
    DOUBLE          reduce using rule 267 (for_init_statement -> expression_statement .)
    VOID            reduce using rule 267 (for_init_statement -> expression_statement .)
    STRING          reduce using rule 267 (for_init_statement -> expression_statement .)
    AUTO            reduce using rule 267 (for_init_statement -> expression_statement .)
    NUMBER          reduce using rule 267 (for_init_statement -> expression_statement .)
    STRING_L        reduce using rule 267 (for_init_statement -> expression_statement .)
    SCHAR           reduce using rule 267 (for_init_statement -> expression_statement .)
    IDENTIFIER      reduce using rule 267 (for_init_statement -> expression_statement .)
    DOUBLEBNOP      reduce using rule 267 (for_init_statement -> expression_statement .)
    OPERATOR        reduce using rule 267 (for_init_statement -> expression_statement .)


state 413

    (268) for_init_statement -> declaration_statement .

    SEMICOLON       reduce using rule 268 (for_init_statement -> declaration_statement .)
    THROW           reduce using rule 268 (for_init_statement -> declaration_statement .)
    DPLUSOP         reduce using rule 268 (for_init_statement -> declaration_statement .)
    DMINUSOP        reduce using rule 268 (for_init_statement -> declaration_statement .)
    SIZEOF          reduce using rule 268 (for_init_statement -> declaration_statement .)
    PLUSOP          reduce using rule 268 (for_init_statement -> declaration_statement .)
    MINUSOP         reduce using rule 268 (for_init_statement -> declaration_statement .)
    NOTSYM          reduce using rule 268 (for_init_statement -> declaration_statement .)
    BNOP            reduce using rule 268 (for_init_statement -> declaration_statement .)
    MULTOP          reduce using rule 268 (for_init_statement -> declaration_statement .)
    BANDOP          reduce using rule 268 (for_init_statement -> declaration_statement .)
    NEW             reduce using rule 268 (for_init_statement -> declaration_statement .)
    DELETE          reduce using rule 268 (for_init_statement -> declaration_statement .)
    THIS            reduce using rule 268 (for_init_statement -> declaration_statement .)
    LPAREN          reduce using rule 268 (for_init_statement -> declaration_statement .)
    CHAR            reduce using rule 268 (for_init_statement -> declaration_statement .)
    SHORT           reduce using rule 268 (for_init_statement -> declaration_statement .)
    INT             reduce using rule 268 (for_init_statement -> declaration_statement .)
    LONG            reduce using rule 268 (for_init_statement -> declaration_statement .)
    SIGNED          reduce using rule 268 (for_init_statement -> declaration_statement .)
    UNSIGNED        reduce using rule 268 (for_init_statement -> declaration_statement .)
    FLOAT           reduce using rule 268 (for_init_statement -> declaration_statement .)
    DOUBLE          reduce using rule 268 (for_init_statement -> declaration_statement .)
    VOID            reduce using rule 268 (for_init_statement -> declaration_statement .)
    STRING          reduce using rule 268 (for_init_statement -> declaration_statement .)
    AUTO            reduce using rule 268 (for_init_statement -> declaration_statement .)
    NUMBER          reduce using rule 268 (for_init_statement -> declaration_statement .)
    STRING_L        reduce using rule 268 (for_init_statement -> declaration_statement .)
    SCHAR           reduce using rule 268 (for_init_statement -> declaration_statement .)
    IDENTIFIER      reduce using rule 268 (for_init_statement -> declaration_statement .)
    DOUBLEBNOP      reduce using rule 268 (for_init_statement -> declaration_statement .)
    OPERATOR        reduce using rule 268 (for_init_statement -> declaration_statement .)


state 414

    (251) jump_statement -> RETURN expression SEMICOLON .

    RCPAREN         reduce using rule 251 (jump_statement -> RETURN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 251 (jump_statement -> RETURN expression SEMICOLON .)
    CASE            reduce using rule 251 (jump_statement -> RETURN expression SEMICOLON .)
    DEFAULT         reduce using rule 251 (jump_statement -> RETURN expression SEMICOLON .)
    SEMICOLON       reduce using rule 251 (jump_statement -> RETURN expression SEMICOLON .)
    LCPAREN         reduce using rule 251 (jump_statement -> RETURN expression SEMICOLON .)
    IF              reduce using rule 251 (jump_statement -> RETURN expression SEMICOLON .)
    SWITCH          reduce using rule 251 (jump_statement -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 251 (jump_statement -> RETURN expression SEMICOLON .)
    DO              reduce using rule 251 (jump_statement -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 251 (jump_statement -> RETURN expression SEMICOLON .)
    BREAK           reduce using rule 251 (jump_statement -> RETURN expression SEMICOLON .)
    CONTINUE        reduce using rule 251 (jump_statement -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 251 (jump_statement -> RETURN expression SEMICOLON .)
    GOTO            reduce using rule 251 (jump_statement -> RETURN expression SEMICOLON .)
    TRY             reduce using rule 251 (jump_statement -> RETURN expression SEMICOLON .)
    THROW           reduce using rule 251 (jump_statement -> RETURN expression SEMICOLON .)
    CONST           reduce using rule 251 (jump_statement -> RETURN expression SEMICOLON .)
    TYPEDEF         reduce using rule 251 (jump_statement -> RETURN expression SEMICOLON .)
    ASM             reduce using rule 251 (jump_statement -> RETURN expression SEMICOLON .)
    TEMPLATE        reduce using rule 251 (jump_statement -> RETURN expression SEMICOLON .)
    DPLUSOP         reduce using rule 251 (jump_statement -> RETURN expression SEMICOLON .)
    DMINUSOP        reduce using rule 251 (jump_statement -> RETURN expression SEMICOLON .)
    SIZEOF          reduce using rule 251 (jump_statement -> RETURN expression SEMICOLON .)
    PLUSOP          reduce using rule 251 (jump_statement -> RETURN expression SEMICOLON .)
    MINUSOP         reduce using rule 251 (jump_statement -> RETURN expression SEMICOLON .)
    NOTSYM          reduce using rule 251 (jump_statement -> RETURN expression SEMICOLON .)
    BNOP            reduce using rule 251 (jump_statement -> RETURN expression SEMICOLON .)
    MULTOP          reduce using rule 251 (jump_statement -> RETURN expression SEMICOLON .)
    BANDOP          reduce using rule 251 (jump_statement -> RETURN expression SEMICOLON .)
    NEW             reduce using rule 251 (jump_statement -> RETURN expression SEMICOLON .)
    DELETE          reduce using rule 251 (jump_statement -> RETURN expression SEMICOLON .)
    CHAR            reduce using rule 251 (jump_statement -> RETURN expression SEMICOLON .)
    SHORT           reduce using rule 251 (jump_statement -> RETURN expression SEMICOLON .)
    INT             reduce using rule 251 (jump_statement -> RETURN expression SEMICOLON .)
    LONG            reduce using rule 251 (jump_statement -> RETURN expression SEMICOLON .)
    SIGNED          reduce using rule 251 (jump_statement -> RETURN expression SEMICOLON .)
    UNSIGNED        reduce using rule 251 (jump_statement -> RETURN expression SEMICOLON .)
    FLOAT           reduce using rule 251 (jump_statement -> RETURN expression SEMICOLON .)
    DOUBLE          reduce using rule 251 (jump_statement -> RETURN expression SEMICOLON .)
    VOID            reduce using rule 251 (jump_statement -> RETURN expression SEMICOLON .)
    STRING          reduce using rule 251 (jump_statement -> RETURN expression SEMICOLON .)
    AUTO            reduce using rule 251 (jump_statement -> RETURN expression SEMICOLON .)
    TYPE            reduce using rule 251 (jump_statement -> RETURN expression SEMICOLON .)
    CLASS           reduce using rule 251 (jump_statement -> RETURN expression SEMICOLON .)
    STRUCT          reduce using rule 251 (jump_statement -> RETURN expression SEMICOLON .)
    THIS            reduce using rule 251 (jump_statement -> RETURN expression SEMICOLON .)
    LPAREN          reduce using rule 251 (jump_statement -> RETURN expression SEMICOLON .)
    NUMBER          reduce using rule 251 (jump_statement -> RETURN expression SEMICOLON .)
    STRING_L        reduce using rule 251 (jump_statement -> RETURN expression SEMICOLON .)
    SCHAR           reduce using rule 251 (jump_statement -> RETURN expression SEMICOLON .)
    DOUBLEBNOP      reduce using rule 251 (jump_statement -> RETURN expression SEMICOLON .)
    OPERATOR        reduce using rule 251 (jump_statement -> RETURN expression SEMICOLON .)
    ELSE            reduce using rule 251 (jump_statement -> RETURN expression SEMICOLON .)


state 415

    (253) jump_statement -> GOTO IDENTIFIER SEMICOLON .

    RCPAREN         reduce using rule 253 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 253 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    CASE            reduce using rule 253 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DEFAULT         reduce using rule 253 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SEMICOLON       reduce using rule 253 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    LCPAREN         reduce using rule 253 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    IF              reduce using rule 253 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SWITCH          reduce using rule 253 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 253 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DO              reduce using rule 253 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    FOR             reduce using rule 253 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    BREAK           reduce using rule 253 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    CONTINUE        reduce using rule 253 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    RETURN          reduce using rule 253 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    GOTO            reduce using rule 253 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    TRY             reduce using rule 253 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    THROW           reduce using rule 253 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    CONST           reduce using rule 253 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    TYPEDEF         reduce using rule 253 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    ASM             reduce using rule 253 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    TEMPLATE        reduce using rule 253 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DPLUSOP         reduce using rule 253 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DMINUSOP        reduce using rule 253 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SIZEOF          reduce using rule 253 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    PLUSOP          reduce using rule 253 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    MINUSOP         reduce using rule 253 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    NOTSYM          reduce using rule 253 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    BNOP            reduce using rule 253 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    MULTOP          reduce using rule 253 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    BANDOP          reduce using rule 253 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    NEW             reduce using rule 253 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DELETE          reduce using rule 253 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    CHAR            reduce using rule 253 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SHORT           reduce using rule 253 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    INT             reduce using rule 253 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    LONG            reduce using rule 253 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SIGNED          reduce using rule 253 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    UNSIGNED        reduce using rule 253 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    FLOAT           reduce using rule 253 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DOUBLE          reduce using rule 253 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    VOID            reduce using rule 253 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    STRING          reduce using rule 253 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    AUTO            reduce using rule 253 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    TYPE            reduce using rule 253 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    CLASS           reduce using rule 253 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    STRUCT          reduce using rule 253 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    THIS            reduce using rule 253 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    LPAREN          reduce using rule 253 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    NUMBER          reduce using rule 253 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    STRING_L        reduce using rule 253 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SCHAR           reduce using rule 253 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DOUBLEBNOP      reduce using rule 253 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    OPERATOR        reduce using rule 253 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    ELSE            reduce using rule 253 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)


state 416

    (257) try_block -> TRY compound_statement CATCH . compound_statement
    (237) compound_statement -> . LCPAREN statement_list RCPAREN
    (238) compound_statement -> . LCPAREN RCPAREN

    LCPAREN         shift and go to state 73

    compound_statement             shift and go to state 450

state 417

    (127) argument_declaration -> type_specifier_ declarator EQUAL expression .
    (48) expression -> expression . COMMA assignment_expression

  ! shift/reduce conflict for COMMA resolved as shift
    RTEMPLATE       reduce using rule 127 (argument_declaration -> type_specifier_ declarator EQUAL expression .)
    RPAREN          reduce using rule 127 (argument_declaration -> type_specifier_ declarator EQUAL expression .)
    COMMA           shift and go to state 324

  ! COMMA           [ reduce using rule 127 (argument_declaration -> type_specifier_ declarator EQUAL expression .) ]


state 418

    (130) argument_declaration -> type_specifier_ abstract_declarator EQUAL expression .
    (48) expression -> expression . COMMA assignment_expression

  ! shift/reduce conflict for COMMA resolved as shift
    RTEMPLATE       reduce using rule 130 (argument_declaration -> type_specifier_ abstract_declarator EQUAL expression .)
    RPAREN          reduce using rule 130 (argument_declaration -> type_specifier_ abstract_declarator EQUAL expression .)
    COMMA           shift and go to state 324

  ! COMMA           [ reduce using rule 130 (argument_declaration -> type_specifier_ abstract_declarator EQUAL expression .) ]


state 419

    (114) abstract_declarator -> abstract_declarator LSPAREN constant_expression . RSPAREN

    RSPAREN         shift and go to state 451


state 420

    (116) abstract_declarator -> abstract_declarator LSPAREN RSPAREN .

    EQUAL           reduce using rule 116 (abstract_declarator -> abstract_declarator LSPAREN RSPAREN .)
    LSPAREN         reduce using rule 116 (abstract_declarator -> abstract_declarator LSPAREN RSPAREN .)
    RTEMPLATE       reduce using rule 116 (abstract_declarator -> abstract_declarator LSPAREN RSPAREN .)
    COMMA           reduce using rule 116 (abstract_declarator -> abstract_declarator LSPAREN RSPAREN .)
    RPAREN          reduce using rule 116 (abstract_declarator -> abstract_declarator LSPAREN RSPAREN .)


state 421

    (113) abstract_declarator -> LSPAREN constant_expression RSPAREN .

    EQUAL           reduce using rule 113 (abstract_declarator -> LSPAREN constant_expression RSPAREN .)
    LSPAREN         reduce using rule 113 (abstract_declarator -> LSPAREN constant_expression RSPAREN .)
    RTEMPLATE       reduce using rule 113 (abstract_declarator -> LSPAREN constant_expression RSPAREN .)
    COMMA           reduce using rule 113 (abstract_declarator -> LSPAREN constant_expression RSPAREN .)
    RPAREN          reduce using rule 113 (abstract_declarator -> LSPAREN constant_expression RSPAREN .)


state 422

    (204) base_list -> base_list COMMA base_specifier .

    COMMA           reduce using rule 204 (base_list -> base_list COMMA base_specifier .)
    LCPAREN         reduce using rule 204 (base_list -> base_list COMMA base_specifier .)


state 423

    (206) base_specifier -> class_key IDENTIFIER template_class_name .

    COMMA           reduce using rule 206 (base_specifier -> class_key IDENTIFIER template_class_name .)
    LCPAREN         reduce using rule 206 (base_specifier -> class_key IDENTIFIER template_class_name .)


state 424

    (209) base_specifier -> access_specifier class_key IDENTIFIER .
    (210) base_specifier -> access_specifier class_key IDENTIFIER . template_class_name
    (174) template_class_name -> . LTEMPLATE template_arg_list RTEMPLATE

    COMMA           reduce using rule 209 (base_specifier -> access_specifier class_key IDENTIFIER .)
    LCPAREN         reduce using rule 209 (base_specifier -> access_specifier class_key IDENTIFIER .)
    LTEMPLATE       shift and go to state 139

    template_class_name            shift and go to state 452

state 425

    (176) template_arg_list -> template_arg_list COMMA type_name .

    RTEMPLATE       reduce using rule 176 (template_arg_list -> template_arg_list COMMA type_name .)
    COMMA           reduce using rule 176 (template_arg_list -> template_arg_list COMMA type_name .)


state 426

    (110) cast_expression -> LPAREN type_name RPAREN cast_expression .

    DOTSTAR         reduce using rule 110 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    ARROWSTAR       reduce using rule 110 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MULTOP          reduce using rule 110 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    DIVOP           reduce using rule 110 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MODOP           reduce using rule 110 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    PLUSOP          reduce using rule 110 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MINUSOP         reduce using rule 110 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LSHIFT          reduce using rule 110 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RSHIFT          reduce using rule 110 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LTCOMP          reduce using rule 110 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    GTCOMP          reduce using rule 110 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LTECOMP         reduce using rule 110 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    GTECOMP         reduce using rule 110 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    EQCOMP          reduce using rule 110 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    NEQCOMP         reduce using rule 110 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    BANDOP          reduce using rule 110 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    XOROP           reduce using rule 110 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    OROP            reduce using rule 110 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    ANDOP           reduce using rule 110 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    QUESMARK        reduce using rule 110 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RPAREN          reduce using rule 110 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    COMMA           reduce using rule 110 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RSPAREN         reduce using rule 110 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    SEMICOLON       reduce using rule 110 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    EQUAL           reduce using rule 110 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MULTEQOP        reduce using rule 110 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    DIVEQOP         reduce using rule 110 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MODEQOP         reduce using rule 110 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    PLUSEQOP        reduce using rule 110 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MINUSEQOP       reduce using rule 110 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LSHIFTEQOP      reduce using rule 110 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RSHIFTEQOP      reduce using rule 110 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    BANDEQOP        reduce using rule 110 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    BOREQOP         reduce using rule 110 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RCPAREN         reduce using rule 110 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    COLON           reduce using rule 110 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RTEMPLATE       reduce using rule 110 (cast_expression -> LPAREN type_name RPAREN cast_expression .)


state 427

    (14) conditional_expression -> logical_OR_expression QUESMARK expression COLON . conditional_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (135) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 191
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    THIS            shift and go to state 175
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    logical_OR_expression          shift and go to state 153
    conditional_expression         shift and go to state 453
    logical_AND_expression         shift and go to state 163
    inclusive_OR_expression        shift and go to state 173
    exclusive_OR_expression        shift and go to state 176
    AND_expression                 shift and go to state 180
    equality_expression            shift and go to state 181
    relational_expression          shift and go to state 182
    shift_expression               shift and go to state 183
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186
    cast_expression                shift and go to state 158
    unary_expression               shift and go to state 190
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    primary_expression             shift and go to state 164
    simple_type_name               shift and go to state 192
    name                           shift and go to state 166
    literal                        shift and go to state 174
    operator_function_name         shift and go to state 50

state 428

    (92) postfix_expression -> postfix_expression LSPAREN expression RSPAREN .

    LSPAREN         reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    LPAREN          reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    DOT             reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    ARROW           reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    DPLUSOP         reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    DMINUSOP        reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    LTEMPLATE       reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    EQUAL           reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    MULTEQOP        reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    DIVEQOP         reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    MODEQOP         reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    PLUSEQOP        reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    MINUSEQOP       reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    LSHIFTEQOP      reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    RSHIFTEQOP      reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    BANDEQOP        reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    BOREQOP         reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    DOTSTAR         reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    ARROWSTAR       reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    MULTOP          reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    DIVOP           reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    MODOP           reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    PLUSOP          reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    MINUSOP         reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    LSHIFT          reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    RSHIFT          reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    LTCOMP          reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    GTCOMP          reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    LTECOMP         reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    GTECOMP         reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    EQCOMP          reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    NEQCOMP         reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    BANDOP          reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    XOROP           reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    OROP            reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    ANDOP           reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    QUESMARK        reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    RPAREN          reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    COMMA           reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    RSPAREN         reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    SEMICOLON       reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    RCPAREN         reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    COLON           reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    RTEMPLATE       reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)


state 429

    (93) postfix_expression -> postfix_expression LPAREN expression_list RPAREN .

    LSPAREN         reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    LPAREN          reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    DOT             reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    ARROW           reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    DPLUSOP         reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    DMINUSOP        reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    LTEMPLATE       reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    EQUAL           reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    MULTEQOP        reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    DIVEQOP         reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    MODEQOP         reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    PLUSEQOP        reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    MINUSEQOP       reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    LSHIFTEQOP      reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    RSHIFTEQOP      reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    BANDEQOP        reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    BOREQOP         reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    DOTSTAR         reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    ARROWSTAR       reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    MULTOP          reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    DIVOP           reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    MODOP           reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    PLUSOP          reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    MINUSOP         reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    LSHIFT          reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    RSHIFT          reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    LTCOMP          reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    GTCOMP          reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    LTECOMP         reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    GTECOMP         reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    EQCOMP          reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    NEQCOMP         reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    BANDOP          reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    XOROP           reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    OROP            reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    ANDOP           reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    QUESMARK        reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    RPAREN          reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    RSPAREN         reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    SEMICOLON       reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    RCPAREN         reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    COLON           reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    RTEMPLATE       reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)


state 430

    (94) postfix_expression -> postfix_expression template_class_name LPAREN expression_list . RPAREN
    (295) expression_list -> expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 454
    COMMA           shift and go to state 261


state 431

    (69) unary_expression -> SIZEOF LPAREN type_name RPAREN .

    EQUAL           reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MULTEQOP        reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    DIVEQOP         reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MODEQOP         reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    PLUSEQOP        reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MINUSEQOP       reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LSHIFTEQOP      reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RSHIFTEQOP      reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    BANDEQOP        reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    BOREQOP         reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    DOTSTAR         reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    ARROWSTAR       reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MULTOP          reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    DIVOP           reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MODOP           reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    PLUSOP          reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MINUSOP         reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LSHIFT          reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RSHIFT          reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LTCOMP          reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    GTCOMP          reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LTECOMP         reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    GTECOMP         reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    EQCOMP          reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    NEQCOMP         reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    BANDOP          reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    XOROP           reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    OROP            reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    ANDOP           reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    QUESMARK        reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RPAREN          reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    COMMA           reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RSPAREN         reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    SEMICOLON       reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RCPAREN         reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    COLON           reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RTEMPLATE       reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)


state 432

    (96) postfix_expression -> simple_type_name LPAREN expression_list RPAREN .

    LSPAREN         reduce using rule 96 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    LPAREN          reduce using rule 96 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    DOT             reduce using rule 96 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    ARROW           reduce using rule 96 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    DPLUSOP         reduce using rule 96 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    DMINUSOP        reduce using rule 96 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    LTEMPLATE       reduce using rule 96 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    EQUAL           reduce using rule 96 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    MULTEQOP        reduce using rule 96 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    DIVEQOP         reduce using rule 96 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    MODEQOP         reduce using rule 96 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    PLUSEQOP        reduce using rule 96 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    MINUSEQOP       reduce using rule 96 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    LSHIFTEQOP      reduce using rule 96 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    RSHIFTEQOP      reduce using rule 96 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    BANDEQOP        reduce using rule 96 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    BOREQOP         reduce using rule 96 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    DOTSTAR         reduce using rule 96 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    ARROWSTAR       reduce using rule 96 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    MULTOP          reduce using rule 96 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    DIVOP           reduce using rule 96 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    MODOP           reduce using rule 96 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    PLUSOP          reduce using rule 96 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    MINUSOP         reduce using rule 96 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    LSHIFT          reduce using rule 96 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    RSHIFT          reduce using rule 96 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    LTCOMP          reduce using rule 96 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    GTCOMP          reduce using rule 96 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    LTECOMP         reduce using rule 96 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    GTECOMP         reduce using rule 96 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    EQCOMP          reduce using rule 96 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    NEQCOMP         reduce using rule 96 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    BANDOP          reduce using rule 96 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    XOROP           reduce using rule 96 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    OROP            reduce using rule 96 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    ANDOP           reduce using rule 96 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    QUESMARK        reduce using rule 96 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    RPAREN          reduce using rule 96 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 96 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    RSPAREN         reduce using rule 96 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    SEMICOLON       reduce using rule 96 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    RCPAREN         reduce using rule 96 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    COLON           reduce using rule 96 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    RTEMPLATE       reduce using rule 96 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)


state 433

    (83) new_initializer -> LPAREN initializer_list . RPAREN
    (290) initializer_list -> initializer_list . COMMA assignment_expression

    RPAREN          shift and go to state 455
    COMMA           shift and go to state 456


state 434

    (84) new_initializer -> LPAREN RPAREN .

    EQUAL           reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    MULTEQOP        reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    DIVEQOP         reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    MODEQOP         reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    PLUSEQOP        reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    MINUSEQOP       reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    LSHIFTEQOP      reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    RSHIFTEQOP      reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    BANDEQOP        reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    BOREQOP         reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    DOTSTAR         reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    ARROWSTAR       reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    MULTOP          reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    DIVOP           reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    MODOP           reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    PLUSOP          reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    MINUSOP         reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    LSHIFT          reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    RSHIFT          reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    LTCOMP          reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    GTCOMP          reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    LTECOMP         reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    GTECOMP         reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    EQCOMP          reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    NEQCOMP         reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    BANDOP          reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    XOROP           reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    OROP            reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    ANDOP           reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    QUESMARK        reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    RPAREN          reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    COMMA           reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    RSPAREN         reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    SEMICOLON       reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    RCPAREN         reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    COLON           reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    RTEMPLATE       reduce using rule 84 (new_initializer -> LPAREN RPAREN .)


state 435

    (75) allocation_expression -> NEW LPAREN type_name RPAREN . new_initializer
    (76) allocation_expression -> NEW LPAREN type_name RPAREN .
    (83) new_initializer -> . LPAREN initializer_list RPAREN
    (84) new_initializer -> . LPAREN RPAREN

    EQUAL           reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    MULTEQOP        reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    DIVEQOP         reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    MODEQOP         reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    PLUSEQOP        reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    MINUSEQOP       reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    LSHIFTEQOP      reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    RSHIFTEQOP      reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    BANDEQOP        reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    BOREQOP         reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    DOTSTAR         reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    ARROWSTAR       reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    MULTOP          reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    DIVOP           reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    MODOP           reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    PLUSOP          reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    MINUSOP         reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    LSHIFT          reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    RSHIFT          reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    LTCOMP          reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    GTCOMP          reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    LTECOMP         reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    GTECOMP         reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    EQCOMP          reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    NEQCOMP         reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    BANDOP          reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    XOROP           reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    OROP            reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    ANDOP           reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    QUESMARK        reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    RPAREN          reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    COMMA           reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    RSPAREN         reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    SEMICOLON       reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    RCPAREN         reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    COLON           reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    RTEMPLATE       reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    LPAREN          shift and go to state 377

    new_initializer                shift and go to state 457

state 436

    (79) new_declarator -> new_declarator MULTOP .

    MULTOP          reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    LSPAREN         reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    LPAREN          reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    EQUAL           reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    MULTEQOP        reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    DIVEQOP         reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    MODEQOP         reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    PLUSEQOP        reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    MINUSEQOP       reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    LSHIFTEQOP      reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    RSHIFTEQOP      reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    BANDEQOP        reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    BOREQOP         reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    DOTSTAR         reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    ARROWSTAR       reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    DIVOP           reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    MODOP           reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    PLUSOP          reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    MINUSOP         reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    LSHIFT          reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    RSHIFT          reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    LTCOMP          reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    GTCOMP          reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    LTECOMP         reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    GTECOMP         reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    EQCOMP          reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    NEQCOMP         reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    BANDOP          reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    XOROP           reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    OROP            reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    ANDOP           reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    QUESMARK        reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    RPAREN          reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    COMMA           reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    RSPAREN         reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    SEMICOLON       reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    RCPAREN         reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    COLON           reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    RTEMPLATE       reduce using rule 79 (new_declarator -> new_declarator MULTOP .)


state 437

    (81) new_declarator -> new_declarator LSPAREN . expression RSPAREN
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (135) operator_function_name -> . OPERATOR operator_name
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression

    THROW           shift and go to state 224
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    THIS            shift and go to state 175
    LPAREN          shift and go to state 144
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    expression                     shift and go to state 458
    assignment_expression          shift and go to state 222
    throw_expression               shift and go to state 223
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    logical_OR_expression          shift and go to state 153
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    cast_expression                shift and go to state 158
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    logical_AND_expression         shift and go to state 163
    primary_expression             shift and go to state 164
    simple_type_name               shift and go to state 192
    name                           shift and go to state 166
    inclusive_OR_expression        shift and go to state 173
    literal                        shift and go to state 174
    exclusive_OR_expression        shift and go to state 176
    operator_function_name         shift and go to state 50
    AND_expression                 shift and go to state 180
    equality_expression            shift and go to state 181
    relational_expression          shift and go to state 182
    shift_expression               shift and go to state 183
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186

state 438

    (82) new_declarator -> LSPAREN expression . RSPAREN
    (48) expression -> expression . COMMA assignment_expression

    RSPAREN         shift and go to state 459
    COMMA           shift and go to state 324


state 439

    (291) initializer_list -> LCPAREN initializer_list RCPAREN .

    RCPAREN         reduce using rule 291 (initializer_list -> LCPAREN initializer_list RCPAREN .)
    COMMA           reduce using rule 291 (initializer_list -> LCPAREN initializer_list RCPAREN .)
    RPAREN          reduce using rule 291 (initializer_list -> LCPAREN initializer_list RCPAREN .)


state 440

    (292) initializer_list -> LCPAREN initializer_list COMMA . RCPAREN
    (290) initializer_list -> initializer_list COMMA . assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (135) operator_function_name -> . OPERATOR operator_name
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RCPAREN         shift and go to state 460
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    THIS            shift and go to state 175
    LPAREN          shift and go to state 144
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    assignment_expression          shift and go to state 442
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    logical_OR_expression          shift and go to state 153
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    cast_expression                shift and go to state 158
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    logical_AND_expression         shift and go to state 163
    primary_expression             shift and go to state 164
    simple_type_name               shift and go to state 192
    name                           shift and go to state 166
    inclusive_OR_expression        shift and go to state 173
    literal                        shift and go to state 174
    exclusive_OR_expression        shift and go to state 176
    operator_function_name         shift and go to state 50
    AND_expression                 shift and go to state 180
    equality_expression            shift and go to state 181
    relational_expression          shift and go to state 182
    shift_expression               shift and go to state 183
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186

state 441

    (287) initializer -> EQUAL LCPAREN initializer_list COMMA RCPAREN .

    SEMICOLON       reduce using rule 287 (initializer -> EQUAL LCPAREN initializer_list COMMA RCPAREN .)
    COMMA           reduce using rule 287 (initializer -> EQUAL LCPAREN initializer_list COMMA RCPAREN .)


state 442

    (290) initializer_list -> initializer_list COMMA assignment_expression .

    RCPAREN         reduce using rule 290 (initializer_list -> initializer_list COMMA assignment_expression .)
    COMMA           reduce using rule 290 (initializer_list -> initializer_list COMMA assignment_expression .)
    RPAREN          reduce using rule 290 (initializer_list -> initializer_list COMMA assignment_expression .)


state 443

    (259) labeled_statement -> CASE constant_expression COLON statement .

    RCPAREN         reduce using rule 259 (labeled_statement -> CASE constant_expression COLON statement .)
    IDENTIFIER      reduce using rule 259 (labeled_statement -> CASE constant_expression COLON statement .)
    CASE            reduce using rule 259 (labeled_statement -> CASE constant_expression COLON statement .)
    DEFAULT         reduce using rule 259 (labeled_statement -> CASE constant_expression COLON statement .)
    SEMICOLON       reduce using rule 259 (labeled_statement -> CASE constant_expression COLON statement .)
    LCPAREN         reduce using rule 259 (labeled_statement -> CASE constant_expression COLON statement .)
    IF              reduce using rule 259 (labeled_statement -> CASE constant_expression COLON statement .)
    SWITCH          reduce using rule 259 (labeled_statement -> CASE constant_expression COLON statement .)
    WHILE           reduce using rule 259 (labeled_statement -> CASE constant_expression COLON statement .)
    DO              reduce using rule 259 (labeled_statement -> CASE constant_expression COLON statement .)
    FOR             reduce using rule 259 (labeled_statement -> CASE constant_expression COLON statement .)
    BREAK           reduce using rule 259 (labeled_statement -> CASE constant_expression COLON statement .)
    CONTINUE        reduce using rule 259 (labeled_statement -> CASE constant_expression COLON statement .)
    RETURN          reduce using rule 259 (labeled_statement -> CASE constant_expression COLON statement .)
    GOTO            reduce using rule 259 (labeled_statement -> CASE constant_expression COLON statement .)
    TRY             reduce using rule 259 (labeled_statement -> CASE constant_expression COLON statement .)
    THROW           reduce using rule 259 (labeled_statement -> CASE constant_expression COLON statement .)
    CONST           reduce using rule 259 (labeled_statement -> CASE constant_expression COLON statement .)
    TYPEDEF         reduce using rule 259 (labeled_statement -> CASE constant_expression COLON statement .)
    ASM             reduce using rule 259 (labeled_statement -> CASE constant_expression COLON statement .)
    TEMPLATE        reduce using rule 259 (labeled_statement -> CASE constant_expression COLON statement .)
    DPLUSOP         reduce using rule 259 (labeled_statement -> CASE constant_expression COLON statement .)
    DMINUSOP        reduce using rule 259 (labeled_statement -> CASE constant_expression COLON statement .)
    SIZEOF          reduce using rule 259 (labeled_statement -> CASE constant_expression COLON statement .)
    PLUSOP          reduce using rule 259 (labeled_statement -> CASE constant_expression COLON statement .)
    MINUSOP         reduce using rule 259 (labeled_statement -> CASE constant_expression COLON statement .)
    NOTSYM          reduce using rule 259 (labeled_statement -> CASE constant_expression COLON statement .)
    BNOP            reduce using rule 259 (labeled_statement -> CASE constant_expression COLON statement .)
    MULTOP          reduce using rule 259 (labeled_statement -> CASE constant_expression COLON statement .)
    BANDOP          reduce using rule 259 (labeled_statement -> CASE constant_expression COLON statement .)
    NEW             reduce using rule 259 (labeled_statement -> CASE constant_expression COLON statement .)
    DELETE          reduce using rule 259 (labeled_statement -> CASE constant_expression COLON statement .)
    CHAR            reduce using rule 259 (labeled_statement -> CASE constant_expression COLON statement .)
    SHORT           reduce using rule 259 (labeled_statement -> CASE constant_expression COLON statement .)
    INT             reduce using rule 259 (labeled_statement -> CASE constant_expression COLON statement .)
    LONG            reduce using rule 259 (labeled_statement -> CASE constant_expression COLON statement .)
    SIGNED          reduce using rule 259 (labeled_statement -> CASE constant_expression COLON statement .)
    UNSIGNED        reduce using rule 259 (labeled_statement -> CASE constant_expression COLON statement .)
    FLOAT           reduce using rule 259 (labeled_statement -> CASE constant_expression COLON statement .)
    DOUBLE          reduce using rule 259 (labeled_statement -> CASE constant_expression COLON statement .)
    VOID            reduce using rule 259 (labeled_statement -> CASE constant_expression COLON statement .)
    STRING          reduce using rule 259 (labeled_statement -> CASE constant_expression COLON statement .)
    AUTO            reduce using rule 259 (labeled_statement -> CASE constant_expression COLON statement .)
    TYPE            reduce using rule 259 (labeled_statement -> CASE constant_expression COLON statement .)
    CLASS           reduce using rule 259 (labeled_statement -> CASE constant_expression COLON statement .)
    STRUCT          reduce using rule 259 (labeled_statement -> CASE constant_expression COLON statement .)
    THIS            reduce using rule 259 (labeled_statement -> CASE constant_expression COLON statement .)
    LPAREN          reduce using rule 259 (labeled_statement -> CASE constant_expression COLON statement .)
    NUMBER          reduce using rule 259 (labeled_statement -> CASE constant_expression COLON statement .)
    STRING_L        reduce using rule 259 (labeled_statement -> CASE constant_expression COLON statement .)
    SCHAR           reduce using rule 259 (labeled_statement -> CASE constant_expression COLON statement .)
    DOUBLEBNOP      reduce using rule 259 (labeled_statement -> CASE constant_expression COLON statement .)
    OPERATOR        reduce using rule 259 (labeled_statement -> CASE constant_expression COLON statement .)
    ELSE            reduce using rule 259 (labeled_statement -> CASE constant_expression COLON statement .)


state 444

    (254) selection_statement -> IF LPAREN expression RPAREN . statement
    (255) selection_statement -> IF LPAREN expression RPAREN . statement ELSE statement
    (241) statement -> . labeled_statement
    (242) statement -> . expression_statement
    (243) statement -> . compound_statement
    (244) statement -> . selection_statement
    (245) statement -> . iteration_statement
    (246) statement -> . jump_statement
    (247) statement -> . declaration_statement
    (248) statement -> . try_block
    (258) labeled_statement -> . IDENTIFIER COLON statement
    (259) labeled_statement -> . CASE constant_expression COLON statement
    (260) labeled_statement -> . DEFAULT COLON statement
    (269) expression_statement -> . expression SEMICOLON
    (270) expression_statement -> . SEMICOLON
    (237) compound_statement -> . LCPAREN statement_list RCPAREN
    (238) compound_statement -> . LCPAREN RCPAREN
    (254) selection_statement -> . IF LPAREN expression RPAREN statement
    (255) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (256) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (261) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (262) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (263) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (264) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (265) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (266) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (249) jump_statement -> . BREAK SEMICOLON
    (250) jump_statement -> . CONTINUE SEMICOLON
    (251) jump_statement -> . RETURN expression SEMICOLON
    (252) jump_statement -> . RETURN SEMICOLON
    (253) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (271) declaration_statement -> . declaration
    (257) try_block -> . TRY compound_statement CATCH compound_statement
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (272) declaration -> . type_specifier_ declarator_list SEMICOLON
    (273) declaration -> . type_specifier_ SEMICOLON
    (274) declaration -> . asm_declaration
    (275) declaration -> . function_definition
    (276) declaration -> . class_define_specifier SEMICOLON
    (277) declaration -> . template_declaration
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (179) type_specifier_ -> . CONST type_specifier
    (180) type_specifier_ -> . TYPEDEF type_specifier
    (181) type_specifier_ -> . type_specifier
    (293) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (235) function_definition -> . type_specifier_ declarator fct_body
    (213) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (214) class_define_specifier -> . class_head LCPAREN RCPAREN
    (278) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (182) type_specifier -> . simple_type_name
    (183) type_specifier -> . complex_type_specifier
    (200) class_head -> . class_key IDENTIFIER base_spec
    (201) class_head -> . class_key IDENTIFIER
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (195) complex_type_specifier -> . class_key IDENTIFIER
    (196) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (197) complex_type_specifier -> . TYPE IDENTIFIER
    (198) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (211) class_key -> . CLASS
    (212) class_key -> . STRUCT
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (135) operator_function_name -> . OPERATOR operator_name
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 206
    CASE            shift and go to state 207
    DEFAULT         shift and go to state 208
    SEMICOLON       shift and go to state 210
    LCPAREN         shift and go to state 73
    IF              shift and go to state 211
    SWITCH          shift and go to state 212
    WHILE           shift and go to state 213
    DO              shift and go to state 214
    FOR             shift and go to state 215
    BREAK           shift and go to state 216
    CONTINUE        shift and go to state 217
    RETURN          shift and go to state 218
    GOTO            shift and go to state 219
    TRY             shift and go to state 221
    THROW           shift and go to state 224
    CONST           shift and go to state 14
    TYPEDEF         shift and go to state 16
    ASM             shift and go to state 17
    TEMPLATE        shift and go to state 19
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    TYPE            shift and go to state 34
    CLASS           shift and go to state 35
    STRUCT          shift and go to state 36
    THIS            shift and go to state 175
    LPAREN          shift and go to state 144
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    expression                     shift and go to state 209
    statement                      shift and go to state 461
    labeled_statement              shift and go to state 198
    expression_statement           shift and go to state 199
    compound_statement             shift and go to state 200
    selection_statement            shift and go to state 201
    iteration_statement            shift and go to state 202
    jump_statement                 shift and go to state 203
    declaration_statement          shift and go to state 204
    try_block                      shift and go to state 205
    declaration                    shift and go to state 220
    assignment_expression          shift and go to state 222
    throw_expression               shift and go to state 223
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    class_define_specifier         shift and go to state 12
    template_declaration           shift and go to state 13
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    type_specifier                 shift and go to state 15
    class_head                     shift and go to state 18
    logical_OR_expression          shift and go to state 153
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    cast_expression                shift and go to state 158
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    simple_type_name               shift and go to state 225
    complex_type_specifier         shift and go to state 21
    class_key                      shift and go to state 22
    logical_AND_expression         shift and go to state 163
    primary_expression             shift and go to state 164
    name                           shift and go to state 166
    inclusive_OR_expression        shift and go to state 173
    literal                        shift and go to state 174
    exclusive_OR_expression        shift and go to state 176
    operator_function_name         shift and go to state 50
    AND_expression                 shift and go to state 180
    equality_expression            shift and go to state 181
    relational_expression          shift and go to state 182
    shift_expression               shift and go to state 183
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186

state 445

    (256) selection_statement -> SWITCH LPAREN expression RPAREN . statement
    (241) statement -> . labeled_statement
    (242) statement -> . expression_statement
    (243) statement -> . compound_statement
    (244) statement -> . selection_statement
    (245) statement -> . iteration_statement
    (246) statement -> . jump_statement
    (247) statement -> . declaration_statement
    (248) statement -> . try_block
    (258) labeled_statement -> . IDENTIFIER COLON statement
    (259) labeled_statement -> . CASE constant_expression COLON statement
    (260) labeled_statement -> . DEFAULT COLON statement
    (269) expression_statement -> . expression SEMICOLON
    (270) expression_statement -> . SEMICOLON
    (237) compound_statement -> . LCPAREN statement_list RCPAREN
    (238) compound_statement -> . LCPAREN RCPAREN
    (254) selection_statement -> . IF LPAREN expression RPAREN statement
    (255) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (256) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (261) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (262) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (263) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (264) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (265) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (266) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (249) jump_statement -> . BREAK SEMICOLON
    (250) jump_statement -> . CONTINUE SEMICOLON
    (251) jump_statement -> . RETURN expression SEMICOLON
    (252) jump_statement -> . RETURN SEMICOLON
    (253) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (271) declaration_statement -> . declaration
    (257) try_block -> . TRY compound_statement CATCH compound_statement
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (272) declaration -> . type_specifier_ declarator_list SEMICOLON
    (273) declaration -> . type_specifier_ SEMICOLON
    (274) declaration -> . asm_declaration
    (275) declaration -> . function_definition
    (276) declaration -> . class_define_specifier SEMICOLON
    (277) declaration -> . template_declaration
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (179) type_specifier_ -> . CONST type_specifier
    (180) type_specifier_ -> . TYPEDEF type_specifier
    (181) type_specifier_ -> . type_specifier
    (293) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (235) function_definition -> . type_specifier_ declarator fct_body
    (213) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (214) class_define_specifier -> . class_head LCPAREN RCPAREN
    (278) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (182) type_specifier -> . simple_type_name
    (183) type_specifier -> . complex_type_specifier
    (200) class_head -> . class_key IDENTIFIER base_spec
    (201) class_head -> . class_key IDENTIFIER
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (195) complex_type_specifier -> . class_key IDENTIFIER
    (196) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (197) complex_type_specifier -> . TYPE IDENTIFIER
    (198) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (211) class_key -> . CLASS
    (212) class_key -> . STRUCT
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (135) operator_function_name -> . OPERATOR operator_name
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 206
    CASE            shift and go to state 207
    DEFAULT         shift and go to state 208
    SEMICOLON       shift and go to state 210
    LCPAREN         shift and go to state 73
    IF              shift and go to state 211
    SWITCH          shift and go to state 212
    WHILE           shift and go to state 213
    DO              shift and go to state 214
    FOR             shift and go to state 215
    BREAK           shift and go to state 216
    CONTINUE        shift and go to state 217
    RETURN          shift and go to state 218
    GOTO            shift and go to state 219
    TRY             shift and go to state 221
    THROW           shift and go to state 224
    CONST           shift and go to state 14
    TYPEDEF         shift and go to state 16
    ASM             shift and go to state 17
    TEMPLATE        shift and go to state 19
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    TYPE            shift and go to state 34
    CLASS           shift and go to state 35
    STRUCT          shift and go to state 36
    THIS            shift and go to state 175
    LPAREN          shift and go to state 144
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    expression                     shift and go to state 209
    statement                      shift and go to state 462
    labeled_statement              shift and go to state 198
    expression_statement           shift and go to state 199
    compound_statement             shift and go to state 200
    selection_statement            shift and go to state 201
    iteration_statement            shift and go to state 202
    jump_statement                 shift and go to state 203
    declaration_statement          shift and go to state 204
    try_block                      shift and go to state 205
    declaration                    shift and go to state 220
    assignment_expression          shift and go to state 222
    throw_expression               shift and go to state 223
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    class_define_specifier         shift and go to state 12
    template_declaration           shift and go to state 13
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    type_specifier                 shift and go to state 15
    class_head                     shift and go to state 18
    logical_OR_expression          shift and go to state 153
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    cast_expression                shift and go to state 158
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    simple_type_name               shift and go to state 225
    complex_type_specifier         shift and go to state 21
    class_key                      shift and go to state 22
    logical_AND_expression         shift and go to state 163
    primary_expression             shift and go to state 164
    name                           shift and go to state 166
    inclusive_OR_expression        shift and go to state 173
    literal                        shift and go to state 174
    exclusive_OR_expression        shift and go to state 176
    operator_function_name         shift and go to state 50
    AND_expression                 shift and go to state 180
    equality_expression            shift and go to state 181
    relational_expression          shift and go to state 182
    shift_expression               shift and go to state 183
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186

state 446

    (261) iteration_statement -> WHILE LPAREN expression RPAREN . statement
    (241) statement -> . labeled_statement
    (242) statement -> . expression_statement
    (243) statement -> . compound_statement
    (244) statement -> . selection_statement
    (245) statement -> . iteration_statement
    (246) statement -> . jump_statement
    (247) statement -> . declaration_statement
    (248) statement -> . try_block
    (258) labeled_statement -> . IDENTIFIER COLON statement
    (259) labeled_statement -> . CASE constant_expression COLON statement
    (260) labeled_statement -> . DEFAULT COLON statement
    (269) expression_statement -> . expression SEMICOLON
    (270) expression_statement -> . SEMICOLON
    (237) compound_statement -> . LCPAREN statement_list RCPAREN
    (238) compound_statement -> . LCPAREN RCPAREN
    (254) selection_statement -> . IF LPAREN expression RPAREN statement
    (255) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (256) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (261) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (262) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (263) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (264) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (265) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (266) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (249) jump_statement -> . BREAK SEMICOLON
    (250) jump_statement -> . CONTINUE SEMICOLON
    (251) jump_statement -> . RETURN expression SEMICOLON
    (252) jump_statement -> . RETURN SEMICOLON
    (253) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (271) declaration_statement -> . declaration
    (257) try_block -> . TRY compound_statement CATCH compound_statement
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (272) declaration -> . type_specifier_ declarator_list SEMICOLON
    (273) declaration -> . type_specifier_ SEMICOLON
    (274) declaration -> . asm_declaration
    (275) declaration -> . function_definition
    (276) declaration -> . class_define_specifier SEMICOLON
    (277) declaration -> . template_declaration
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (179) type_specifier_ -> . CONST type_specifier
    (180) type_specifier_ -> . TYPEDEF type_specifier
    (181) type_specifier_ -> . type_specifier
    (293) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (235) function_definition -> . type_specifier_ declarator fct_body
    (213) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (214) class_define_specifier -> . class_head LCPAREN RCPAREN
    (278) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (182) type_specifier -> . simple_type_name
    (183) type_specifier -> . complex_type_specifier
    (200) class_head -> . class_key IDENTIFIER base_spec
    (201) class_head -> . class_key IDENTIFIER
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (195) complex_type_specifier -> . class_key IDENTIFIER
    (196) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (197) complex_type_specifier -> . TYPE IDENTIFIER
    (198) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (211) class_key -> . CLASS
    (212) class_key -> . STRUCT
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (135) operator_function_name -> . OPERATOR operator_name
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 206
    CASE            shift and go to state 207
    DEFAULT         shift and go to state 208
    SEMICOLON       shift and go to state 210
    LCPAREN         shift and go to state 73
    IF              shift and go to state 211
    SWITCH          shift and go to state 212
    WHILE           shift and go to state 213
    DO              shift and go to state 214
    FOR             shift and go to state 215
    BREAK           shift and go to state 216
    CONTINUE        shift and go to state 217
    RETURN          shift and go to state 218
    GOTO            shift and go to state 219
    TRY             shift and go to state 221
    THROW           shift and go to state 224
    CONST           shift and go to state 14
    TYPEDEF         shift and go to state 16
    ASM             shift and go to state 17
    TEMPLATE        shift and go to state 19
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    TYPE            shift and go to state 34
    CLASS           shift and go to state 35
    STRUCT          shift and go to state 36
    THIS            shift and go to state 175
    LPAREN          shift and go to state 144
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    expression                     shift and go to state 209
    statement                      shift and go to state 463
    labeled_statement              shift and go to state 198
    expression_statement           shift and go to state 199
    compound_statement             shift and go to state 200
    selection_statement            shift and go to state 201
    iteration_statement            shift and go to state 202
    jump_statement                 shift and go to state 203
    declaration_statement          shift and go to state 204
    try_block                      shift and go to state 205
    declaration                    shift and go to state 220
    assignment_expression          shift and go to state 222
    throw_expression               shift and go to state 223
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    class_define_specifier         shift and go to state 12
    template_declaration           shift and go to state 13
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    type_specifier                 shift and go to state 15
    class_head                     shift and go to state 18
    logical_OR_expression          shift and go to state 153
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    cast_expression                shift and go to state 158
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    simple_type_name               shift and go to state 225
    complex_type_specifier         shift and go to state 21
    class_key                      shift and go to state 22
    logical_AND_expression         shift and go to state 163
    primary_expression             shift and go to state 164
    name                           shift and go to state 166
    inclusive_OR_expression        shift and go to state 173
    literal                        shift and go to state 174
    exclusive_OR_expression        shift and go to state 176
    operator_function_name         shift and go to state 50
    AND_expression                 shift and go to state 180
    equality_expression            shift and go to state 181
    relational_expression          shift and go to state 182
    shift_expression               shift and go to state 183
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186

state 447

    (262) iteration_statement -> DO statement WHILE LPAREN . expression RPAREN SEMICOLON
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (135) operator_function_name -> . OPERATOR operator_name
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression

    THROW           shift and go to state 224
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    THIS            shift and go to state 175
    LPAREN          shift and go to state 144
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    expression                     shift and go to state 464
    assignment_expression          shift and go to state 222
    throw_expression               shift and go to state 223
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    logical_OR_expression          shift and go to state 153
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    cast_expression                shift and go to state 158
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    logical_AND_expression         shift and go to state 163
    primary_expression             shift and go to state 164
    simple_type_name               shift and go to state 192
    name                           shift and go to state 166
    inclusive_OR_expression        shift and go to state 173
    literal                        shift and go to state 174
    exclusive_OR_expression        shift and go to state 176
    operator_function_name         shift and go to state 50
    AND_expression                 shift and go to state 180
    equality_expression            shift and go to state 181
    relational_expression          shift and go to state 182
    shift_expression               shift and go to state 183
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186

state 448

    (263) iteration_statement -> FOR LPAREN for_init_statement expression . SEMICOLON expression RPAREN statement
    (265) iteration_statement -> FOR LPAREN for_init_statement expression . SEMICOLON RPAREN statement
    (48) expression -> expression . COMMA assignment_expression

    SEMICOLON       shift and go to state 465
    COMMA           shift and go to state 324


state 449

    (264) iteration_statement -> FOR LPAREN for_init_statement SEMICOLON . expression RPAREN statement
    (266) iteration_statement -> FOR LPAREN for_init_statement SEMICOLON . RPAREN statement
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (135) operator_function_name -> . OPERATOR operator_name
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 467
    THROW           shift and go to state 224
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    THIS            shift and go to state 175
    LPAREN          shift and go to state 144
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    expression                     shift and go to state 466
    assignment_expression          shift and go to state 222
    throw_expression               shift and go to state 223
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    logical_OR_expression          shift and go to state 153
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    cast_expression                shift and go to state 158
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    logical_AND_expression         shift and go to state 163
    primary_expression             shift and go to state 164
    simple_type_name               shift and go to state 192
    name                           shift and go to state 166
    inclusive_OR_expression        shift and go to state 173
    literal                        shift and go to state 174
    exclusive_OR_expression        shift and go to state 176
    operator_function_name         shift and go to state 50
    AND_expression                 shift and go to state 180
    equality_expression            shift and go to state 181
    relational_expression          shift and go to state 182
    shift_expression               shift and go to state 183
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186

state 450

    (257) try_block -> TRY compound_statement CATCH compound_statement .

    RCPAREN         reduce using rule 257 (try_block -> TRY compound_statement CATCH compound_statement .)
    IDENTIFIER      reduce using rule 257 (try_block -> TRY compound_statement CATCH compound_statement .)
    CASE            reduce using rule 257 (try_block -> TRY compound_statement CATCH compound_statement .)
    DEFAULT         reduce using rule 257 (try_block -> TRY compound_statement CATCH compound_statement .)
    SEMICOLON       reduce using rule 257 (try_block -> TRY compound_statement CATCH compound_statement .)
    LCPAREN         reduce using rule 257 (try_block -> TRY compound_statement CATCH compound_statement .)
    IF              reduce using rule 257 (try_block -> TRY compound_statement CATCH compound_statement .)
    SWITCH          reduce using rule 257 (try_block -> TRY compound_statement CATCH compound_statement .)
    WHILE           reduce using rule 257 (try_block -> TRY compound_statement CATCH compound_statement .)
    DO              reduce using rule 257 (try_block -> TRY compound_statement CATCH compound_statement .)
    FOR             reduce using rule 257 (try_block -> TRY compound_statement CATCH compound_statement .)
    BREAK           reduce using rule 257 (try_block -> TRY compound_statement CATCH compound_statement .)
    CONTINUE        reduce using rule 257 (try_block -> TRY compound_statement CATCH compound_statement .)
    RETURN          reduce using rule 257 (try_block -> TRY compound_statement CATCH compound_statement .)
    GOTO            reduce using rule 257 (try_block -> TRY compound_statement CATCH compound_statement .)
    TRY             reduce using rule 257 (try_block -> TRY compound_statement CATCH compound_statement .)
    THROW           reduce using rule 257 (try_block -> TRY compound_statement CATCH compound_statement .)
    CONST           reduce using rule 257 (try_block -> TRY compound_statement CATCH compound_statement .)
    TYPEDEF         reduce using rule 257 (try_block -> TRY compound_statement CATCH compound_statement .)
    ASM             reduce using rule 257 (try_block -> TRY compound_statement CATCH compound_statement .)
    TEMPLATE        reduce using rule 257 (try_block -> TRY compound_statement CATCH compound_statement .)
    DPLUSOP         reduce using rule 257 (try_block -> TRY compound_statement CATCH compound_statement .)
    DMINUSOP        reduce using rule 257 (try_block -> TRY compound_statement CATCH compound_statement .)
    SIZEOF          reduce using rule 257 (try_block -> TRY compound_statement CATCH compound_statement .)
    PLUSOP          reduce using rule 257 (try_block -> TRY compound_statement CATCH compound_statement .)
    MINUSOP         reduce using rule 257 (try_block -> TRY compound_statement CATCH compound_statement .)
    NOTSYM          reduce using rule 257 (try_block -> TRY compound_statement CATCH compound_statement .)
    BNOP            reduce using rule 257 (try_block -> TRY compound_statement CATCH compound_statement .)
    MULTOP          reduce using rule 257 (try_block -> TRY compound_statement CATCH compound_statement .)
    BANDOP          reduce using rule 257 (try_block -> TRY compound_statement CATCH compound_statement .)
    NEW             reduce using rule 257 (try_block -> TRY compound_statement CATCH compound_statement .)
    DELETE          reduce using rule 257 (try_block -> TRY compound_statement CATCH compound_statement .)
    CHAR            reduce using rule 257 (try_block -> TRY compound_statement CATCH compound_statement .)
    SHORT           reduce using rule 257 (try_block -> TRY compound_statement CATCH compound_statement .)
    INT             reduce using rule 257 (try_block -> TRY compound_statement CATCH compound_statement .)
    LONG            reduce using rule 257 (try_block -> TRY compound_statement CATCH compound_statement .)
    SIGNED          reduce using rule 257 (try_block -> TRY compound_statement CATCH compound_statement .)
    UNSIGNED        reduce using rule 257 (try_block -> TRY compound_statement CATCH compound_statement .)
    FLOAT           reduce using rule 257 (try_block -> TRY compound_statement CATCH compound_statement .)
    DOUBLE          reduce using rule 257 (try_block -> TRY compound_statement CATCH compound_statement .)
    VOID            reduce using rule 257 (try_block -> TRY compound_statement CATCH compound_statement .)
    STRING          reduce using rule 257 (try_block -> TRY compound_statement CATCH compound_statement .)
    AUTO            reduce using rule 257 (try_block -> TRY compound_statement CATCH compound_statement .)
    TYPE            reduce using rule 257 (try_block -> TRY compound_statement CATCH compound_statement .)
    CLASS           reduce using rule 257 (try_block -> TRY compound_statement CATCH compound_statement .)
    STRUCT          reduce using rule 257 (try_block -> TRY compound_statement CATCH compound_statement .)
    THIS            reduce using rule 257 (try_block -> TRY compound_statement CATCH compound_statement .)
    LPAREN          reduce using rule 257 (try_block -> TRY compound_statement CATCH compound_statement .)
    NUMBER          reduce using rule 257 (try_block -> TRY compound_statement CATCH compound_statement .)
    STRING_L        reduce using rule 257 (try_block -> TRY compound_statement CATCH compound_statement .)
    SCHAR           reduce using rule 257 (try_block -> TRY compound_statement CATCH compound_statement .)
    DOUBLEBNOP      reduce using rule 257 (try_block -> TRY compound_statement CATCH compound_statement .)
    OPERATOR        reduce using rule 257 (try_block -> TRY compound_statement CATCH compound_statement .)
    ELSE            reduce using rule 257 (try_block -> TRY compound_statement CATCH compound_statement .)


state 451

    (114) abstract_declarator -> abstract_declarator LSPAREN constant_expression RSPAREN .

    EQUAL           reduce using rule 114 (abstract_declarator -> abstract_declarator LSPAREN constant_expression RSPAREN .)
    LSPAREN         reduce using rule 114 (abstract_declarator -> abstract_declarator LSPAREN constant_expression RSPAREN .)
    RTEMPLATE       reduce using rule 114 (abstract_declarator -> abstract_declarator LSPAREN constant_expression RSPAREN .)
    COMMA           reduce using rule 114 (abstract_declarator -> abstract_declarator LSPAREN constant_expression RSPAREN .)
    RPAREN          reduce using rule 114 (abstract_declarator -> abstract_declarator LSPAREN constant_expression RSPAREN .)


state 452

    (210) base_specifier -> access_specifier class_key IDENTIFIER template_class_name .

    COMMA           reduce using rule 210 (base_specifier -> access_specifier class_key IDENTIFIER template_class_name .)
    LCPAREN         reduce using rule 210 (base_specifier -> access_specifier class_key IDENTIFIER template_class_name .)


state 453

    (14) conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .

    RPAREN          reduce using rule 14 (conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .)
    COMMA           reduce using rule 14 (conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .)
    RSPAREN         reduce using rule 14 (conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .)
    SEMICOLON       reduce using rule 14 (conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .)
    RCPAREN         reduce using rule 14 (conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .)
    COLON           reduce using rule 14 (conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .)
    RTEMPLATE       reduce using rule 14 (conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .)


state 454

    (94) postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .

    LSPAREN         reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    LPAREN          reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    DOT             reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    ARROW           reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    DPLUSOP         reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    DMINUSOP        reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    LTEMPLATE       reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    EQUAL           reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    MULTEQOP        reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    DIVEQOP         reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    MODEQOP         reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    PLUSEQOP        reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    MINUSEQOP       reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    LSHIFTEQOP      reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    RSHIFTEQOP      reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    BANDEQOP        reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    BOREQOP         reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    DOTSTAR         reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    ARROWSTAR       reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    MULTOP          reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    DIVOP           reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    MODOP           reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    PLUSOP          reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    MINUSOP         reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    LSHIFT          reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    RSHIFT          reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    LTCOMP          reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    GTCOMP          reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    LTECOMP         reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    GTECOMP         reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    EQCOMP          reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    NEQCOMP         reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    BANDOP          reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    XOROP           reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    OROP            reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    ANDOP           reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    QUESMARK        reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    RPAREN          reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    RSPAREN         reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    SEMICOLON       reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    RCPAREN         reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    COLON           reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    RTEMPLATE       reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)


state 455

    (83) new_initializer -> LPAREN initializer_list RPAREN .

    EQUAL           reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    MULTEQOP        reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    DIVEQOP         reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    MODEQOP         reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    PLUSEQOP        reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    MINUSEQOP       reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    LSHIFTEQOP      reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    RSHIFTEQOP      reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    BANDEQOP        reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    BOREQOP         reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    DOTSTAR         reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    ARROWSTAR       reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    MULTOP          reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    DIVOP           reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    MODOP           reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    PLUSOP          reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    MINUSOP         reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    LSHIFT          reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    RSHIFT          reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    LTCOMP          reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    GTCOMP          reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    LTECOMP         reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    GTECOMP         reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    EQCOMP          reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    NEQCOMP         reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    BANDOP          reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    XOROP           reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    OROP            reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    ANDOP           reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    QUESMARK        reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    RPAREN          reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    COMMA           reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    RSPAREN         reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    SEMICOLON       reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    RCPAREN         reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    COLON           reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    RTEMPLATE       reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)


state 456

    (290) initializer_list -> initializer_list COMMA . assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (135) operator_function_name -> . OPERATOR operator_name
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    THIS            shift and go to state 175
    LPAREN          shift and go to state 144
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    assignment_expression          shift and go to state 442
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    logical_OR_expression          shift and go to state 153
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    cast_expression                shift and go to state 158
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    logical_AND_expression         shift and go to state 163
    primary_expression             shift and go to state 164
    simple_type_name               shift and go to state 192
    name                           shift and go to state 166
    inclusive_OR_expression        shift and go to state 173
    literal                        shift and go to state 174
    exclusive_OR_expression        shift and go to state 176
    operator_function_name         shift and go to state 50
    AND_expression                 shift and go to state 180
    equality_expression            shift and go to state 181
    relational_expression          shift and go to state 182
    shift_expression               shift and go to state 183
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186

state 457

    (75) allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .

    EQUAL           reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    MULTEQOP        reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    DIVEQOP         reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    MODEQOP         reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    PLUSEQOP        reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    MINUSEQOP       reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    LSHIFTEQOP      reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    RSHIFTEQOP      reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    BANDEQOP        reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    BOREQOP         reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    DOTSTAR         reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    ARROWSTAR       reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    MULTOP          reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    DIVOP           reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    MODOP           reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    PLUSOP          reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    MINUSOP         reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    LSHIFT          reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    RSHIFT          reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    LTCOMP          reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    GTCOMP          reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    LTECOMP         reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    GTECOMP         reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    EQCOMP          reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    NEQCOMP         reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    BANDOP          reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    XOROP           reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    OROP            reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    ANDOP           reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    QUESMARK        reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    RPAREN          reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    COMMA           reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    RSPAREN         reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    SEMICOLON       reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    RCPAREN         reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    COLON           reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    RTEMPLATE       reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)


state 458

    (81) new_declarator -> new_declarator LSPAREN expression . RSPAREN
    (48) expression -> expression . COMMA assignment_expression

    RSPAREN         shift and go to state 468
    COMMA           shift and go to state 324


state 459

    (82) new_declarator -> LSPAREN expression RSPAREN .

    MULTOP          reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    LSPAREN         reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    LPAREN          reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    EQUAL           reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    MULTEQOP        reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    DIVEQOP         reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    MODEQOP         reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    PLUSEQOP        reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    MINUSEQOP       reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    LSHIFTEQOP      reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    RSHIFTEQOP      reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    BANDEQOP        reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    BOREQOP         reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    DOTSTAR         reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    ARROWSTAR       reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    DIVOP           reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    MODOP           reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    PLUSOP          reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    MINUSOP         reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    LSHIFT          reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    RSHIFT          reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    LTCOMP          reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    GTCOMP          reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    LTECOMP         reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    GTECOMP         reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    EQCOMP          reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    NEQCOMP         reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    BANDOP          reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    XOROP           reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    OROP            reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    ANDOP           reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    QUESMARK        reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    RPAREN          reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    COMMA           reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    RSPAREN         reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    SEMICOLON       reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    RCPAREN         reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    COLON           reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    RTEMPLATE       reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)


state 460

    (292) initializer_list -> LCPAREN initializer_list COMMA RCPAREN .

    RCPAREN         reduce using rule 292 (initializer_list -> LCPAREN initializer_list COMMA RCPAREN .)
    COMMA           reduce using rule 292 (initializer_list -> LCPAREN initializer_list COMMA RCPAREN .)
    RPAREN          reduce using rule 292 (initializer_list -> LCPAREN initializer_list COMMA RCPAREN .)


state 461

    (254) selection_statement -> IF LPAREN expression RPAREN statement .
    (255) selection_statement -> IF LPAREN expression RPAREN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    RCPAREN         reduce using rule 254 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IDENTIFIER      reduce using rule 254 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CASE            reduce using rule 254 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 254 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 254 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LCPAREN         reduce using rule 254 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 254 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 254 (selection_statement -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 254 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DO              reduce using rule 254 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 254 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 254 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 254 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 254 (selection_statement -> IF LPAREN expression RPAREN statement .)
    GOTO            reduce using rule 254 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TRY             reduce using rule 254 (selection_statement -> IF LPAREN expression RPAREN statement .)
    THROW           reduce using rule 254 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CONST           reduce using rule 254 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TYPEDEF         reduce using rule 254 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ASM             reduce using rule 254 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TEMPLATE        reduce using rule 254 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DPLUSOP         reduce using rule 254 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DMINUSOP        reduce using rule 254 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SIZEOF          reduce using rule 254 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PLUSOP          reduce using rule 254 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MINUSOP         reduce using rule 254 (selection_statement -> IF LPAREN expression RPAREN statement .)
    NOTSYM          reduce using rule 254 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BNOP            reduce using rule 254 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MULTOP          reduce using rule 254 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BANDOP          reduce using rule 254 (selection_statement -> IF LPAREN expression RPAREN statement .)
    NEW             reduce using rule 254 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DELETE          reduce using rule 254 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 254 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SHORT           reduce using rule 254 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INT             reduce using rule 254 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LONG            reduce using rule 254 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SIGNED          reduce using rule 254 (selection_statement -> IF LPAREN expression RPAREN statement .)
    UNSIGNED        reduce using rule 254 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 254 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DOUBLE          reduce using rule 254 (selection_statement -> IF LPAREN expression RPAREN statement .)
    VOID            reduce using rule 254 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STRING          reduce using rule 254 (selection_statement -> IF LPAREN expression RPAREN statement .)
    AUTO            reduce using rule 254 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TYPE            reduce using rule 254 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CLASS           reduce using rule 254 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STRUCT          reduce using rule 254 (selection_statement -> IF LPAREN expression RPAREN statement .)
    THIS            reduce using rule 254 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 254 (selection_statement -> IF LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 254 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STRING_L        reduce using rule 254 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SCHAR           reduce using rule 254 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DOUBLEBNOP      reduce using rule 254 (selection_statement -> IF LPAREN expression RPAREN statement .)
    OPERATOR        reduce using rule 254 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 469

  ! ELSE            [ reduce using rule 254 (selection_statement -> IF LPAREN expression RPAREN statement .) ]


state 462

    (256) selection_statement -> SWITCH LPAREN expression RPAREN statement .

    RCPAREN         reduce using rule 256 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    IDENTIFIER      reduce using rule 256 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CASE            reduce using rule 256 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 256 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 256 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LCPAREN         reduce using rule 256 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    IF              reduce using rule 256 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 256 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 256 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DO              reduce using rule 256 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    FOR             reduce using rule 256 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 256 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 256 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 256 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    GOTO            reduce using rule 256 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    TRY             reduce using rule 256 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    THROW           reduce using rule 256 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CONST           reduce using rule 256 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    TYPEDEF         reduce using rule 256 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    ASM             reduce using rule 256 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    TEMPLATE        reduce using rule 256 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DPLUSOP         reduce using rule 256 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DMINUSOP        reduce using rule 256 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SIZEOF          reduce using rule 256 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    PLUSOP          reduce using rule 256 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    MINUSOP         reduce using rule 256 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    NOTSYM          reduce using rule 256 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    BNOP            reduce using rule 256 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    MULTOP          reduce using rule 256 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    BANDOP          reduce using rule 256 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    NEW             reduce using rule 256 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DELETE          reduce using rule 256 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 256 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SHORT           reduce using rule 256 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    INT             reduce using rule 256 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LONG            reduce using rule 256 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SIGNED          reduce using rule 256 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    UNSIGNED        reduce using rule 256 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 256 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DOUBLE          reduce using rule 256 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    VOID            reduce using rule 256 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    STRING          reduce using rule 256 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    AUTO            reduce using rule 256 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    TYPE            reduce using rule 256 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CLASS           reduce using rule 256 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    STRUCT          reduce using rule 256 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    THIS            reduce using rule 256 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 256 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 256 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    STRING_L        reduce using rule 256 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SCHAR           reduce using rule 256 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DOUBLEBNOP      reduce using rule 256 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    OPERATOR        reduce using rule 256 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 256 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)


state 463

    (261) iteration_statement -> WHILE LPAREN expression RPAREN statement .

    RCPAREN         reduce using rule 261 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    IDENTIFIER      reduce using rule 261 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CASE            reduce using rule 261 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 261 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 261 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LCPAREN         reduce using rule 261 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 261 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 261 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 261 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DO              reduce using rule 261 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 261 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 261 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 261 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 261 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    GOTO            reduce using rule 261 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TRY             reduce using rule 261 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    THROW           reduce using rule 261 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CONST           reduce using rule 261 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TYPEDEF         reduce using rule 261 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ASM             reduce using rule 261 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TEMPLATE        reduce using rule 261 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DPLUSOP         reduce using rule 261 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DMINUSOP        reduce using rule 261 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SIZEOF          reduce using rule 261 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PLUSOP          reduce using rule 261 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MINUSOP         reduce using rule 261 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    NOTSYM          reduce using rule 261 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BNOP            reduce using rule 261 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MULTOP          reduce using rule 261 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BANDOP          reduce using rule 261 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    NEW             reduce using rule 261 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DELETE          reduce using rule 261 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 261 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SHORT           reduce using rule 261 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INT             reduce using rule 261 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LONG            reduce using rule 261 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SIGNED          reduce using rule 261 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    UNSIGNED        reduce using rule 261 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 261 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DOUBLE          reduce using rule 261 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    VOID            reduce using rule 261 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STRING          reduce using rule 261 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    AUTO            reduce using rule 261 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TYPE            reduce using rule 261 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CLASS           reduce using rule 261 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STRUCT          reduce using rule 261 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    THIS            reduce using rule 261 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 261 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 261 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STRING_L        reduce using rule 261 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SCHAR           reduce using rule 261 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DOUBLEBNOP      reduce using rule 261 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    OPERATOR        reduce using rule 261 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 261 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)


state 464

    (262) iteration_statement -> DO statement WHILE LPAREN expression . RPAREN SEMICOLON
    (48) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 470
    COMMA           shift and go to state 324


state 465

    (263) iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON . expression RPAREN statement
    (265) iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON . RPAREN statement
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (135) operator_function_name -> . OPERATOR operator_name
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 472
    THROW           shift and go to state 224
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    THIS            shift and go to state 175
    LPAREN          shift and go to state 144
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    IDENTIFIER      shift and go to state 49
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    expression                     shift and go to state 471
    assignment_expression          shift and go to state 222
    throw_expression               shift and go to state 223
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    logical_OR_expression          shift and go to state 153
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    cast_expression                shift and go to state 158
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    logical_AND_expression         shift and go to state 163
    primary_expression             shift and go to state 164
    simple_type_name               shift and go to state 192
    name                           shift and go to state 166
    inclusive_OR_expression        shift and go to state 173
    literal                        shift and go to state 174
    exclusive_OR_expression        shift and go to state 176
    operator_function_name         shift and go to state 50
    AND_expression                 shift and go to state 180
    equality_expression            shift and go to state 181
    relational_expression          shift and go to state 182
    shift_expression               shift and go to state 183
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186

state 466

    (264) iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression . RPAREN statement
    (48) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 473
    COMMA           shift and go to state 324


state 467

    (266) iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN . statement
    (241) statement -> . labeled_statement
    (242) statement -> . expression_statement
    (243) statement -> . compound_statement
    (244) statement -> . selection_statement
    (245) statement -> . iteration_statement
    (246) statement -> . jump_statement
    (247) statement -> . declaration_statement
    (248) statement -> . try_block
    (258) labeled_statement -> . IDENTIFIER COLON statement
    (259) labeled_statement -> . CASE constant_expression COLON statement
    (260) labeled_statement -> . DEFAULT COLON statement
    (269) expression_statement -> . expression SEMICOLON
    (270) expression_statement -> . SEMICOLON
    (237) compound_statement -> . LCPAREN statement_list RCPAREN
    (238) compound_statement -> . LCPAREN RCPAREN
    (254) selection_statement -> . IF LPAREN expression RPAREN statement
    (255) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (256) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (261) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (262) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (263) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (264) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (265) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (266) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (249) jump_statement -> . BREAK SEMICOLON
    (250) jump_statement -> . CONTINUE SEMICOLON
    (251) jump_statement -> . RETURN expression SEMICOLON
    (252) jump_statement -> . RETURN SEMICOLON
    (253) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (271) declaration_statement -> . declaration
    (257) try_block -> . TRY compound_statement CATCH compound_statement
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (272) declaration -> . type_specifier_ declarator_list SEMICOLON
    (273) declaration -> . type_specifier_ SEMICOLON
    (274) declaration -> . asm_declaration
    (275) declaration -> . function_definition
    (276) declaration -> . class_define_specifier SEMICOLON
    (277) declaration -> . template_declaration
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (179) type_specifier_ -> . CONST type_specifier
    (180) type_specifier_ -> . TYPEDEF type_specifier
    (181) type_specifier_ -> . type_specifier
    (293) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (235) function_definition -> . type_specifier_ declarator fct_body
    (213) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (214) class_define_specifier -> . class_head LCPAREN RCPAREN
    (278) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (182) type_specifier -> . simple_type_name
    (183) type_specifier -> . complex_type_specifier
    (200) class_head -> . class_key IDENTIFIER base_spec
    (201) class_head -> . class_key IDENTIFIER
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (195) complex_type_specifier -> . class_key IDENTIFIER
    (196) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (197) complex_type_specifier -> . TYPE IDENTIFIER
    (198) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (211) class_key -> . CLASS
    (212) class_key -> . STRUCT
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (135) operator_function_name -> . OPERATOR operator_name
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 206
    CASE            shift and go to state 207
    DEFAULT         shift and go to state 208
    SEMICOLON       shift and go to state 210
    LCPAREN         shift and go to state 73
    IF              shift and go to state 211
    SWITCH          shift and go to state 212
    WHILE           shift and go to state 213
    DO              shift and go to state 214
    FOR             shift and go to state 215
    BREAK           shift and go to state 216
    CONTINUE        shift and go to state 217
    RETURN          shift and go to state 218
    GOTO            shift and go to state 219
    TRY             shift and go to state 221
    THROW           shift and go to state 224
    CONST           shift and go to state 14
    TYPEDEF         shift and go to state 16
    ASM             shift and go to state 17
    TEMPLATE        shift and go to state 19
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    TYPE            shift and go to state 34
    CLASS           shift and go to state 35
    STRUCT          shift and go to state 36
    THIS            shift and go to state 175
    LPAREN          shift and go to state 144
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    statement                      shift and go to state 474
    labeled_statement              shift and go to state 198
    expression_statement           shift and go to state 199
    compound_statement             shift and go to state 200
    selection_statement            shift and go to state 201
    iteration_statement            shift and go to state 202
    jump_statement                 shift and go to state 203
    declaration_statement          shift and go to state 204
    try_block                      shift and go to state 205
    expression                     shift and go to state 209
    declaration                    shift and go to state 220
    assignment_expression          shift and go to state 222
    throw_expression               shift and go to state 223
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    class_define_specifier         shift and go to state 12
    template_declaration           shift and go to state 13
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    type_specifier                 shift and go to state 15
    class_head                     shift and go to state 18
    logical_OR_expression          shift and go to state 153
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    cast_expression                shift and go to state 158
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    simple_type_name               shift and go to state 225
    complex_type_specifier         shift and go to state 21
    class_key                      shift and go to state 22
    logical_AND_expression         shift and go to state 163
    primary_expression             shift and go to state 164
    name                           shift and go to state 166
    inclusive_OR_expression        shift and go to state 173
    literal                        shift and go to state 174
    exclusive_OR_expression        shift and go to state 176
    operator_function_name         shift and go to state 50
    AND_expression                 shift and go to state 180
    equality_expression            shift and go to state 181
    relational_expression          shift and go to state 182
    shift_expression               shift and go to state 183
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186

state 468

    (81) new_declarator -> new_declarator LSPAREN expression RSPAREN .

    MULTOP          reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    LSPAREN         reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    LPAREN          reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    EQUAL           reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    MULTEQOP        reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    DIVEQOP         reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    MODEQOP         reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    PLUSEQOP        reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    MINUSEQOP       reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    LSHIFTEQOP      reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    RSHIFTEQOP      reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    BANDEQOP        reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    BOREQOP         reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    DOTSTAR         reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    ARROWSTAR       reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    DIVOP           reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    MODOP           reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    PLUSOP          reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    MINUSOP         reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    LSHIFT          reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    RSHIFT          reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    LTCOMP          reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    GTCOMP          reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    LTECOMP         reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    GTECOMP         reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    EQCOMP          reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    NEQCOMP         reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    BANDOP          reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    XOROP           reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    OROP            reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    ANDOP           reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    QUESMARK        reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    RPAREN          reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    COMMA           reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    RSPAREN         reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    SEMICOLON       reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    RCPAREN         reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    COLON           reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    RTEMPLATE       reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)


state 469

    (255) selection_statement -> IF LPAREN expression RPAREN statement ELSE . statement
    (241) statement -> . labeled_statement
    (242) statement -> . expression_statement
    (243) statement -> . compound_statement
    (244) statement -> . selection_statement
    (245) statement -> . iteration_statement
    (246) statement -> . jump_statement
    (247) statement -> . declaration_statement
    (248) statement -> . try_block
    (258) labeled_statement -> . IDENTIFIER COLON statement
    (259) labeled_statement -> . CASE constant_expression COLON statement
    (260) labeled_statement -> . DEFAULT COLON statement
    (269) expression_statement -> . expression SEMICOLON
    (270) expression_statement -> . SEMICOLON
    (237) compound_statement -> . LCPAREN statement_list RCPAREN
    (238) compound_statement -> . LCPAREN RCPAREN
    (254) selection_statement -> . IF LPAREN expression RPAREN statement
    (255) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (256) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (261) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (262) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (263) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (264) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (265) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (266) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (249) jump_statement -> . BREAK SEMICOLON
    (250) jump_statement -> . CONTINUE SEMICOLON
    (251) jump_statement -> . RETURN expression SEMICOLON
    (252) jump_statement -> . RETURN SEMICOLON
    (253) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (271) declaration_statement -> . declaration
    (257) try_block -> . TRY compound_statement CATCH compound_statement
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (272) declaration -> . type_specifier_ declarator_list SEMICOLON
    (273) declaration -> . type_specifier_ SEMICOLON
    (274) declaration -> . asm_declaration
    (275) declaration -> . function_definition
    (276) declaration -> . class_define_specifier SEMICOLON
    (277) declaration -> . template_declaration
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (179) type_specifier_ -> . CONST type_specifier
    (180) type_specifier_ -> . TYPEDEF type_specifier
    (181) type_specifier_ -> . type_specifier
    (293) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (235) function_definition -> . type_specifier_ declarator fct_body
    (213) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (214) class_define_specifier -> . class_head LCPAREN RCPAREN
    (278) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (182) type_specifier -> . simple_type_name
    (183) type_specifier -> . complex_type_specifier
    (200) class_head -> . class_key IDENTIFIER base_spec
    (201) class_head -> . class_key IDENTIFIER
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (195) complex_type_specifier -> . class_key IDENTIFIER
    (196) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (197) complex_type_specifier -> . TYPE IDENTIFIER
    (198) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (211) class_key -> . CLASS
    (212) class_key -> . STRUCT
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (135) operator_function_name -> . OPERATOR operator_name
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 206
    CASE            shift and go to state 207
    DEFAULT         shift and go to state 208
    SEMICOLON       shift and go to state 210
    LCPAREN         shift and go to state 73
    IF              shift and go to state 211
    SWITCH          shift and go to state 212
    WHILE           shift and go to state 213
    DO              shift and go to state 214
    FOR             shift and go to state 215
    BREAK           shift and go to state 216
    CONTINUE        shift and go to state 217
    RETURN          shift and go to state 218
    GOTO            shift and go to state 219
    TRY             shift and go to state 221
    THROW           shift and go to state 224
    CONST           shift and go to state 14
    TYPEDEF         shift and go to state 16
    ASM             shift and go to state 17
    TEMPLATE        shift and go to state 19
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    TYPE            shift and go to state 34
    CLASS           shift and go to state 35
    STRUCT          shift and go to state 36
    THIS            shift and go to state 175
    LPAREN          shift and go to state 144
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    expression                     shift and go to state 209
    statement                      shift and go to state 475
    labeled_statement              shift and go to state 198
    expression_statement           shift and go to state 199
    compound_statement             shift and go to state 200
    selection_statement            shift and go to state 201
    iteration_statement            shift and go to state 202
    jump_statement                 shift and go to state 203
    declaration_statement          shift and go to state 204
    try_block                      shift and go to state 205
    declaration                    shift and go to state 220
    assignment_expression          shift and go to state 222
    throw_expression               shift and go to state 223
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    class_define_specifier         shift and go to state 12
    template_declaration           shift and go to state 13
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    type_specifier                 shift and go to state 15
    class_head                     shift and go to state 18
    logical_OR_expression          shift and go to state 153
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    cast_expression                shift and go to state 158
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    simple_type_name               shift and go to state 225
    complex_type_specifier         shift and go to state 21
    class_key                      shift and go to state 22
    logical_AND_expression         shift and go to state 163
    primary_expression             shift and go to state 164
    name                           shift and go to state 166
    inclusive_OR_expression        shift and go to state 173
    literal                        shift and go to state 174
    exclusive_OR_expression        shift and go to state 176
    operator_function_name         shift and go to state 50
    AND_expression                 shift and go to state 180
    equality_expression            shift and go to state 181
    relational_expression          shift and go to state 182
    shift_expression               shift and go to state 183
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186

state 470

    (262) iteration_statement -> DO statement WHILE LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 476


state 471

    (263) iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression . RPAREN statement
    (48) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 477
    COMMA           shift and go to state 324


state 472

    (265) iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN . statement
    (241) statement -> . labeled_statement
    (242) statement -> . expression_statement
    (243) statement -> . compound_statement
    (244) statement -> . selection_statement
    (245) statement -> . iteration_statement
    (246) statement -> . jump_statement
    (247) statement -> . declaration_statement
    (248) statement -> . try_block
    (258) labeled_statement -> . IDENTIFIER COLON statement
    (259) labeled_statement -> . CASE constant_expression COLON statement
    (260) labeled_statement -> . DEFAULT COLON statement
    (269) expression_statement -> . expression SEMICOLON
    (270) expression_statement -> . SEMICOLON
    (237) compound_statement -> . LCPAREN statement_list RCPAREN
    (238) compound_statement -> . LCPAREN RCPAREN
    (254) selection_statement -> . IF LPAREN expression RPAREN statement
    (255) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (256) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (261) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (262) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (263) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (264) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (265) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (266) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (249) jump_statement -> . BREAK SEMICOLON
    (250) jump_statement -> . CONTINUE SEMICOLON
    (251) jump_statement -> . RETURN expression SEMICOLON
    (252) jump_statement -> . RETURN SEMICOLON
    (253) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (271) declaration_statement -> . declaration
    (257) try_block -> . TRY compound_statement CATCH compound_statement
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (272) declaration -> . type_specifier_ declarator_list SEMICOLON
    (273) declaration -> . type_specifier_ SEMICOLON
    (274) declaration -> . asm_declaration
    (275) declaration -> . function_definition
    (276) declaration -> . class_define_specifier SEMICOLON
    (277) declaration -> . template_declaration
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (179) type_specifier_ -> . CONST type_specifier
    (180) type_specifier_ -> . TYPEDEF type_specifier
    (181) type_specifier_ -> . type_specifier
    (293) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (235) function_definition -> . type_specifier_ declarator fct_body
    (213) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (214) class_define_specifier -> . class_head LCPAREN RCPAREN
    (278) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (182) type_specifier -> . simple_type_name
    (183) type_specifier -> . complex_type_specifier
    (200) class_head -> . class_key IDENTIFIER base_spec
    (201) class_head -> . class_key IDENTIFIER
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (195) complex_type_specifier -> . class_key IDENTIFIER
    (196) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (197) complex_type_specifier -> . TYPE IDENTIFIER
    (198) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (211) class_key -> . CLASS
    (212) class_key -> . STRUCT
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (135) operator_function_name -> . OPERATOR operator_name
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 206
    CASE            shift and go to state 207
    DEFAULT         shift and go to state 208
    SEMICOLON       shift and go to state 210
    LCPAREN         shift and go to state 73
    IF              shift and go to state 211
    SWITCH          shift and go to state 212
    WHILE           shift and go to state 213
    DO              shift and go to state 214
    FOR             shift and go to state 215
    BREAK           shift and go to state 216
    CONTINUE        shift and go to state 217
    RETURN          shift and go to state 218
    GOTO            shift and go to state 219
    TRY             shift and go to state 221
    THROW           shift and go to state 224
    CONST           shift and go to state 14
    TYPEDEF         shift and go to state 16
    ASM             shift and go to state 17
    TEMPLATE        shift and go to state 19
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    TYPE            shift and go to state 34
    CLASS           shift and go to state 35
    STRUCT          shift and go to state 36
    THIS            shift and go to state 175
    LPAREN          shift and go to state 144
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    expression                     shift and go to state 209
    statement                      shift and go to state 478
    labeled_statement              shift and go to state 198
    expression_statement           shift and go to state 199
    compound_statement             shift and go to state 200
    selection_statement            shift and go to state 201
    iteration_statement            shift and go to state 202
    jump_statement                 shift and go to state 203
    declaration_statement          shift and go to state 204
    try_block                      shift and go to state 205
    declaration                    shift and go to state 220
    assignment_expression          shift and go to state 222
    throw_expression               shift and go to state 223
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    class_define_specifier         shift and go to state 12
    template_declaration           shift and go to state 13
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    type_specifier                 shift and go to state 15
    class_head                     shift and go to state 18
    logical_OR_expression          shift and go to state 153
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    cast_expression                shift and go to state 158
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    simple_type_name               shift and go to state 225
    complex_type_specifier         shift and go to state 21
    class_key                      shift and go to state 22
    logical_AND_expression         shift and go to state 163
    primary_expression             shift and go to state 164
    name                           shift and go to state 166
    inclusive_OR_expression        shift and go to state 173
    literal                        shift and go to state 174
    exclusive_OR_expression        shift and go to state 176
    operator_function_name         shift and go to state 50
    AND_expression                 shift and go to state 180
    equality_expression            shift and go to state 181
    relational_expression          shift and go to state 182
    shift_expression               shift and go to state 183
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186

state 473

    (264) iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN . statement
    (241) statement -> . labeled_statement
    (242) statement -> . expression_statement
    (243) statement -> . compound_statement
    (244) statement -> . selection_statement
    (245) statement -> . iteration_statement
    (246) statement -> . jump_statement
    (247) statement -> . declaration_statement
    (248) statement -> . try_block
    (258) labeled_statement -> . IDENTIFIER COLON statement
    (259) labeled_statement -> . CASE constant_expression COLON statement
    (260) labeled_statement -> . DEFAULT COLON statement
    (269) expression_statement -> . expression SEMICOLON
    (270) expression_statement -> . SEMICOLON
    (237) compound_statement -> . LCPAREN statement_list RCPAREN
    (238) compound_statement -> . LCPAREN RCPAREN
    (254) selection_statement -> . IF LPAREN expression RPAREN statement
    (255) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (256) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (261) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (262) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (263) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (264) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (265) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (266) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (249) jump_statement -> . BREAK SEMICOLON
    (250) jump_statement -> . CONTINUE SEMICOLON
    (251) jump_statement -> . RETURN expression SEMICOLON
    (252) jump_statement -> . RETURN SEMICOLON
    (253) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (271) declaration_statement -> . declaration
    (257) try_block -> . TRY compound_statement CATCH compound_statement
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (272) declaration -> . type_specifier_ declarator_list SEMICOLON
    (273) declaration -> . type_specifier_ SEMICOLON
    (274) declaration -> . asm_declaration
    (275) declaration -> . function_definition
    (276) declaration -> . class_define_specifier SEMICOLON
    (277) declaration -> . template_declaration
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (179) type_specifier_ -> . CONST type_specifier
    (180) type_specifier_ -> . TYPEDEF type_specifier
    (181) type_specifier_ -> . type_specifier
    (293) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (235) function_definition -> . type_specifier_ declarator fct_body
    (213) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (214) class_define_specifier -> . class_head LCPAREN RCPAREN
    (278) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (182) type_specifier -> . simple_type_name
    (183) type_specifier -> . complex_type_specifier
    (200) class_head -> . class_key IDENTIFIER base_spec
    (201) class_head -> . class_key IDENTIFIER
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (195) complex_type_specifier -> . class_key IDENTIFIER
    (196) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (197) complex_type_specifier -> . TYPE IDENTIFIER
    (198) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (211) class_key -> . CLASS
    (212) class_key -> . STRUCT
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (135) operator_function_name -> . OPERATOR operator_name
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 206
    CASE            shift and go to state 207
    DEFAULT         shift and go to state 208
    SEMICOLON       shift and go to state 210
    LCPAREN         shift and go to state 73
    IF              shift and go to state 211
    SWITCH          shift and go to state 212
    WHILE           shift and go to state 213
    DO              shift and go to state 214
    FOR             shift and go to state 215
    BREAK           shift and go to state 216
    CONTINUE        shift and go to state 217
    RETURN          shift and go to state 218
    GOTO            shift and go to state 219
    TRY             shift and go to state 221
    THROW           shift and go to state 224
    CONST           shift and go to state 14
    TYPEDEF         shift and go to state 16
    ASM             shift and go to state 17
    TEMPLATE        shift and go to state 19
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    TYPE            shift and go to state 34
    CLASS           shift and go to state 35
    STRUCT          shift and go to state 36
    THIS            shift and go to state 175
    LPAREN          shift and go to state 144
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    expression                     shift and go to state 209
    statement                      shift and go to state 479
    labeled_statement              shift and go to state 198
    expression_statement           shift and go to state 199
    compound_statement             shift and go to state 200
    selection_statement            shift and go to state 201
    iteration_statement            shift and go to state 202
    jump_statement                 shift and go to state 203
    declaration_statement          shift and go to state 204
    try_block                      shift and go to state 205
    declaration                    shift and go to state 220
    assignment_expression          shift and go to state 222
    throw_expression               shift and go to state 223
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    class_define_specifier         shift and go to state 12
    template_declaration           shift and go to state 13
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    type_specifier                 shift and go to state 15
    class_head                     shift and go to state 18
    logical_OR_expression          shift and go to state 153
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    cast_expression                shift and go to state 158
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    simple_type_name               shift and go to state 225
    complex_type_specifier         shift and go to state 21
    class_key                      shift and go to state 22
    logical_AND_expression         shift and go to state 163
    primary_expression             shift and go to state 164
    name                           shift and go to state 166
    inclusive_OR_expression        shift and go to state 173
    literal                        shift and go to state 174
    exclusive_OR_expression        shift and go to state 176
    operator_function_name         shift and go to state 50
    AND_expression                 shift and go to state 180
    equality_expression            shift and go to state 181
    relational_expression          shift and go to state 182
    shift_expression               shift and go to state 183
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186

state 474

    (266) iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .

    RCPAREN         reduce using rule 266 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    IDENTIFIER      reduce using rule 266 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    CASE            reduce using rule 266 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    DEFAULT         reduce using rule 266 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    SEMICOLON       reduce using rule 266 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    LCPAREN         reduce using rule 266 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    IF              reduce using rule 266 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    SWITCH          reduce using rule 266 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    WHILE           reduce using rule 266 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    DO              reduce using rule 266 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    FOR             reduce using rule 266 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    BREAK           reduce using rule 266 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    CONTINUE        reduce using rule 266 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    RETURN          reduce using rule 266 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    GOTO            reduce using rule 266 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    TRY             reduce using rule 266 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    THROW           reduce using rule 266 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    CONST           reduce using rule 266 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    TYPEDEF         reduce using rule 266 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    ASM             reduce using rule 266 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    TEMPLATE        reduce using rule 266 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    DPLUSOP         reduce using rule 266 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    DMINUSOP        reduce using rule 266 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    SIZEOF          reduce using rule 266 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    PLUSOP          reduce using rule 266 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    MINUSOP         reduce using rule 266 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    NOTSYM          reduce using rule 266 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    BNOP            reduce using rule 266 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    MULTOP          reduce using rule 266 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    BANDOP          reduce using rule 266 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    NEW             reduce using rule 266 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    DELETE          reduce using rule 266 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    CHAR            reduce using rule 266 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    SHORT           reduce using rule 266 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    INT             reduce using rule 266 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    LONG            reduce using rule 266 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    SIGNED          reduce using rule 266 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    UNSIGNED        reduce using rule 266 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    FLOAT           reduce using rule 266 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    DOUBLE          reduce using rule 266 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    VOID            reduce using rule 266 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    STRING          reduce using rule 266 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    AUTO            reduce using rule 266 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    TYPE            reduce using rule 266 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    CLASS           reduce using rule 266 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    STRUCT          reduce using rule 266 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    THIS            reduce using rule 266 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    LPAREN          reduce using rule 266 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    NUMBER          reduce using rule 266 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    STRING_L        reduce using rule 266 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    SCHAR           reduce using rule 266 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    DOUBLEBNOP      reduce using rule 266 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    OPERATOR        reduce using rule 266 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    ELSE            reduce using rule 266 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)


state 475

    (255) selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .

    RCPAREN         reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IDENTIFIER      reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CASE            reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DEFAULT         reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SEMICOLON       reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LCPAREN         reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SWITCH          reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DO              reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CONTINUE        reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    GOTO            reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TRY             reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    THROW           reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CONST           reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TYPEDEF         reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ASM             reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TEMPLATE        reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DPLUSOP         reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DMINUSOP        reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SIZEOF          reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUSOP          reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUSOP         reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NOTSYM          reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BNOP            reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MULTOP          reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BANDOP          reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NEW             reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DELETE          reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CHAR            reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SHORT           reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INT             reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LONG            reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SIGNED          reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    UNSIGNED        reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FLOAT           reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DOUBLE          reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    VOID            reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRING          reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    AUTO            reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TYPE            reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CLASS           reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRUCT          reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    THIS            reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NUMBER          reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRING_L        reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SCHAR           reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DOUBLEBNOP      reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    OPERATOR        reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 255 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)


state 476

    (262) iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .

    RCPAREN         reduce using rule 262 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 262 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    CASE            reduce using rule 262 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 262 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 262 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    LCPAREN         reduce using rule 262 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    IF              reduce using rule 262 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SWITCH          reduce using rule 262 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    WHILE           reduce using rule 262 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DO              reduce using rule 262 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    FOR             reduce using rule 262 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    BREAK           reduce using rule 262 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 262 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    RETURN          reduce using rule 262 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    GOTO            reduce using rule 262 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    TRY             reduce using rule 262 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    THROW           reduce using rule 262 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    CONST           reduce using rule 262 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    TYPEDEF         reduce using rule 262 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    ASM             reduce using rule 262 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    TEMPLATE        reduce using rule 262 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DPLUSOP         reduce using rule 262 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DMINUSOP        reduce using rule 262 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SIZEOF          reduce using rule 262 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    PLUSOP          reduce using rule 262 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    MINUSOP         reduce using rule 262 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    NOTSYM          reduce using rule 262 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    BNOP            reduce using rule 262 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    MULTOP          reduce using rule 262 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    BANDOP          reduce using rule 262 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    NEW             reduce using rule 262 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DELETE          reduce using rule 262 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    CHAR            reduce using rule 262 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SHORT           reduce using rule 262 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    INT             reduce using rule 262 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    LONG            reduce using rule 262 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SIGNED          reduce using rule 262 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    UNSIGNED        reduce using rule 262 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    FLOAT           reduce using rule 262 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DOUBLE          reduce using rule 262 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    VOID            reduce using rule 262 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    STRING          reduce using rule 262 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    AUTO            reduce using rule 262 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    TYPE            reduce using rule 262 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    CLASS           reduce using rule 262 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    STRUCT          reduce using rule 262 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    THIS            reduce using rule 262 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    LPAREN          reduce using rule 262 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    NUMBER          reduce using rule 262 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    STRING_L        reduce using rule 262 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SCHAR           reduce using rule 262 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DOUBLEBNOP      reduce using rule 262 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    OPERATOR        reduce using rule 262 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    ELSE            reduce using rule 262 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)


state 477

    (263) iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN . statement
    (241) statement -> . labeled_statement
    (242) statement -> . expression_statement
    (243) statement -> . compound_statement
    (244) statement -> . selection_statement
    (245) statement -> . iteration_statement
    (246) statement -> . jump_statement
    (247) statement -> . declaration_statement
    (248) statement -> . try_block
    (258) labeled_statement -> . IDENTIFIER COLON statement
    (259) labeled_statement -> . CASE constant_expression COLON statement
    (260) labeled_statement -> . DEFAULT COLON statement
    (269) expression_statement -> . expression SEMICOLON
    (270) expression_statement -> . SEMICOLON
    (237) compound_statement -> . LCPAREN statement_list RCPAREN
    (238) compound_statement -> . LCPAREN RCPAREN
    (254) selection_statement -> . IF LPAREN expression RPAREN statement
    (255) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (256) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (261) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (262) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (263) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (264) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (265) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (266) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (249) jump_statement -> . BREAK SEMICOLON
    (250) jump_statement -> . CONTINUE SEMICOLON
    (251) jump_statement -> . RETURN expression SEMICOLON
    (252) jump_statement -> . RETURN SEMICOLON
    (253) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (271) declaration_statement -> . declaration
    (257) try_block -> . TRY compound_statement CATCH compound_statement
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (272) declaration -> . type_specifier_ declarator_list SEMICOLON
    (273) declaration -> . type_specifier_ SEMICOLON
    (274) declaration -> . asm_declaration
    (275) declaration -> . function_definition
    (276) declaration -> . class_define_specifier SEMICOLON
    (277) declaration -> . template_declaration
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (179) type_specifier_ -> . CONST type_specifier
    (180) type_specifier_ -> . TYPEDEF type_specifier
    (181) type_specifier_ -> . type_specifier
    (293) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (235) function_definition -> . type_specifier_ declarator fct_body
    (213) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (214) class_define_specifier -> . class_head LCPAREN RCPAREN
    (278) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (182) type_specifier -> . simple_type_name
    (183) type_specifier -> . complex_type_specifier
    (200) class_head -> . class_key IDENTIFIER base_spec
    (201) class_head -> . class_key IDENTIFIER
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (97) postfix_expression -> . simple_type_name LPAREN RPAREN
    (98) postfix_expression -> . postfix_expression DOT name
    (99) postfix_expression -> . postfix_expression ARROW name
    (100) postfix_expression -> . postfix_expression DPLUSOP
    (101) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (184) simple_type_name -> . CHAR
    (185) simple_type_name -> . SHORT
    (186) simple_type_name -> . INT
    (187) simple_type_name -> . LONG
    (188) simple_type_name -> . SIGNED
    (189) simple_type_name -> . UNSIGNED
    (190) simple_type_name -> . FLOAT
    (191) simple_type_name -> . DOUBLE
    (192) simple_type_name -> . VOID
    (193) simple_type_name -> . STRING
    (194) simple_type_name -> . AUTO
    (195) complex_type_specifier -> . class_key IDENTIFIER
    (196) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (197) complex_type_specifier -> . TYPE IDENTIFIER
    (198) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (211) class_key -> . CLASS
    (212) class_key -> . STRUCT
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (102) primary_expression -> . literal
    (103) primary_expression -> . THIS
    (104) primary_expression -> . LPAREN expression RPAREN
    (105) primary_expression -> . name
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (106) literal -> . NUMBER
    (107) literal -> . STRING_L
    (108) literal -> . SCHAR
    (132) name -> . IDENTIFIER
    (133) name -> . operator_function_name
    (134) name -> . DOUBLEBNOP IDENTIFIER
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (135) operator_function_name -> . OPERATOR operator_name
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (109) cast_expression -> . unary_expression
    (110) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 206
    CASE            shift and go to state 207
    DEFAULT         shift and go to state 208
    SEMICOLON       shift and go to state 210
    LCPAREN         shift and go to state 73
    IF              shift and go to state 211
    SWITCH          shift and go to state 212
    WHILE           shift and go to state 213
    DO              shift and go to state 214
    FOR             shift and go to state 215
    BREAK           shift and go to state 216
    CONTINUE        shift and go to state 217
    RETURN          shift and go to state 218
    GOTO            shift and go to state 219
    TRY             shift and go to state 221
    THROW           shift and go to state 224
    CONST           shift and go to state 14
    TYPEDEF         shift and go to state 16
    ASM             shift and go to state 17
    TEMPLATE        shift and go to state 19
    DPLUSOP         shift and go to state 155
    DMINUSOP        shift and go to state 156
    SIZEOF          shift and go to state 160
    PLUSOP          shift and go to state 167
    MINUSOP         shift and go to state 168
    NOTSYM          shift and go to state 169
    BNOP            shift and go to state 170
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 171
    DELETE          shift and go to state 172
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    INT             shift and go to state 25
    LONG            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    VOID            shift and go to state 31
    STRING          shift and go to state 32
    AUTO            shift and go to state 33
    TYPE            shift and go to state 34
    CLASS           shift and go to state 35
    STRUCT          shift and go to state 36
    THIS            shift and go to state 175
    LPAREN          shift and go to state 144
    NUMBER          shift and go to state 177
    STRING_L        shift and go to state 178
    SCHAR           shift and go to state 179
    DOUBLEBNOP      shift and go to state 51
    OPERATOR        shift and go to state 54

    expression                     shift and go to state 209
    statement                      shift and go to state 480
    labeled_statement              shift and go to state 198
    expression_statement           shift and go to state 199
    compound_statement             shift and go to state 200
    selection_statement            shift and go to state 201
    iteration_statement            shift and go to state 202
    jump_statement                 shift and go to state 203
    declaration_statement          shift and go to state 204
    try_block                      shift and go to state 205
    declaration                    shift and go to state 220
    assignment_expression          shift and go to state 222
    throw_expression               shift and go to state 223
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    class_define_specifier         shift and go to state 12
    template_declaration           shift and go to state 13
    conditional_expression         shift and go to state 151
    unary_expression               shift and go to state 152
    type_specifier                 shift and go to state 15
    class_head                     shift and go to state 18
    logical_OR_expression          shift and go to state 153
    postfix_expression             shift and go to state 154
    unary1_operator                shift and go to state 157
    cast_expression                shift and go to state 158
    unary2_operator                shift and go to state 159
    allocation_expression          shift and go to state 161
    deallocation_expression        shift and go to state 162
    simple_type_name               shift and go to state 225
    complex_type_specifier         shift and go to state 21
    class_key                      shift and go to state 22
    logical_AND_expression         shift and go to state 163
    primary_expression             shift and go to state 164
    name                           shift and go to state 166
    inclusive_OR_expression        shift and go to state 173
    literal                        shift and go to state 174
    exclusive_OR_expression        shift and go to state 176
    operator_function_name         shift and go to state 50
    AND_expression                 shift and go to state 180
    equality_expression            shift and go to state 181
    relational_expression          shift and go to state 182
    shift_expression               shift and go to state 183
    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 185
    pm_expression                  shift and go to state 186

state 478

    (265) iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .

    RCPAREN         reduce using rule 265 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    IDENTIFIER      reduce using rule 265 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    CASE            reduce using rule 265 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    DEFAULT         reduce using rule 265 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    SEMICOLON       reduce using rule 265 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    LCPAREN         reduce using rule 265 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    IF              reduce using rule 265 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    SWITCH          reduce using rule 265 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    WHILE           reduce using rule 265 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    DO              reduce using rule 265 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    FOR             reduce using rule 265 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    BREAK           reduce using rule 265 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    CONTINUE        reduce using rule 265 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    RETURN          reduce using rule 265 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    GOTO            reduce using rule 265 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    TRY             reduce using rule 265 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    THROW           reduce using rule 265 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    CONST           reduce using rule 265 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    TYPEDEF         reduce using rule 265 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    ASM             reduce using rule 265 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    TEMPLATE        reduce using rule 265 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    DPLUSOP         reduce using rule 265 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    DMINUSOP        reduce using rule 265 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    SIZEOF          reduce using rule 265 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    PLUSOP          reduce using rule 265 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    MINUSOP         reduce using rule 265 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    NOTSYM          reduce using rule 265 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    BNOP            reduce using rule 265 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    MULTOP          reduce using rule 265 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    BANDOP          reduce using rule 265 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    NEW             reduce using rule 265 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    DELETE          reduce using rule 265 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    CHAR            reduce using rule 265 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    SHORT           reduce using rule 265 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    INT             reduce using rule 265 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    LONG            reduce using rule 265 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    SIGNED          reduce using rule 265 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    UNSIGNED        reduce using rule 265 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    FLOAT           reduce using rule 265 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    DOUBLE          reduce using rule 265 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    VOID            reduce using rule 265 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    STRING          reduce using rule 265 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    AUTO            reduce using rule 265 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    TYPE            reduce using rule 265 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    CLASS           reduce using rule 265 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    STRUCT          reduce using rule 265 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    THIS            reduce using rule 265 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    LPAREN          reduce using rule 265 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    NUMBER          reduce using rule 265 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    STRING_L        reduce using rule 265 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    SCHAR           reduce using rule 265 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    DOUBLEBNOP      reduce using rule 265 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    OPERATOR        reduce using rule 265 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    ELSE            reduce using rule 265 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)


state 479

    (264) iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .

    RCPAREN         reduce using rule 264 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    IDENTIFIER      reduce using rule 264 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    CASE            reduce using rule 264 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    DEFAULT         reduce using rule 264 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    SEMICOLON       reduce using rule 264 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    LCPAREN         reduce using rule 264 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    IF              reduce using rule 264 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    SWITCH          reduce using rule 264 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    WHILE           reduce using rule 264 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    DO              reduce using rule 264 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    FOR             reduce using rule 264 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    BREAK           reduce using rule 264 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    CONTINUE        reduce using rule 264 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    RETURN          reduce using rule 264 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    GOTO            reduce using rule 264 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    TRY             reduce using rule 264 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    THROW           reduce using rule 264 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    CONST           reduce using rule 264 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    TYPEDEF         reduce using rule 264 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    ASM             reduce using rule 264 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    TEMPLATE        reduce using rule 264 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    DPLUSOP         reduce using rule 264 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    DMINUSOP        reduce using rule 264 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    SIZEOF          reduce using rule 264 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    PLUSOP          reduce using rule 264 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    MINUSOP         reduce using rule 264 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    NOTSYM          reduce using rule 264 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    BNOP            reduce using rule 264 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    MULTOP          reduce using rule 264 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    BANDOP          reduce using rule 264 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    NEW             reduce using rule 264 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    DELETE          reduce using rule 264 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    CHAR            reduce using rule 264 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    SHORT           reduce using rule 264 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    INT             reduce using rule 264 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    LONG            reduce using rule 264 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    SIGNED          reduce using rule 264 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    UNSIGNED        reduce using rule 264 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    FLOAT           reduce using rule 264 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    DOUBLE          reduce using rule 264 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    VOID            reduce using rule 264 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    STRING          reduce using rule 264 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    AUTO            reduce using rule 264 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    TYPE            reduce using rule 264 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    CLASS           reduce using rule 264 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    STRUCT          reduce using rule 264 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    THIS            reduce using rule 264 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    LPAREN          reduce using rule 264 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    NUMBER          reduce using rule 264 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    STRING_L        reduce using rule 264 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    SCHAR           reduce using rule 264 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    DOUBLEBNOP      reduce using rule 264 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    OPERATOR        reduce using rule 264 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    ELSE            reduce using rule 264 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)


state 480

    (263) iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .

    RCPAREN         reduce using rule 263 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    IDENTIFIER      reduce using rule 263 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    CASE            reduce using rule 263 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    DEFAULT         reduce using rule 263 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    SEMICOLON       reduce using rule 263 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    LCPAREN         reduce using rule 263 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    IF              reduce using rule 263 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    SWITCH          reduce using rule 263 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    WHILE           reduce using rule 263 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    DO              reduce using rule 263 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    FOR             reduce using rule 263 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    BREAK           reduce using rule 263 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    CONTINUE        reduce using rule 263 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    RETURN          reduce using rule 263 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    GOTO            reduce using rule 263 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    TRY             reduce using rule 263 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    THROW           reduce using rule 263 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    CONST           reduce using rule 263 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    TYPEDEF         reduce using rule 263 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    ASM             reduce using rule 263 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    TEMPLATE        reduce using rule 263 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    DPLUSOP         reduce using rule 263 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    DMINUSOP        reduce using rule 263 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    SIZEOF          reduce using rule 263 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    PLUSOP          reduce using rule 263 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    MINUSOP         reduce using rule 263 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    NOTSYM          reduce using rule 263 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    BNOP            reduce using rule 263 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    MULTOP          reduce using rule 263 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    BANDOP          reduce using rule 263 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    NEW             reduce using rule 263 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    DELETE          reduce using rule 263 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    CHAR            reduce using rule 263 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    SHORT           reduce using rule 263 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    INT             reduce using rule 263 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    LONG            reduce using rule 263 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    SIGNED          reduce using rule 263 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    UNSIGNED        reduce using rule 263 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    FLOAT           reduce using rule 263 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    DOUBLE          reduce using rule 263 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    VOID            reduce using rule 263 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    STRING          reduce using rule 263 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    AUTO            reduce using rule 263 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    TYPE            reduce using rule 263 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    CLASS           reduce using rule 263 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    STRUCT          reduce using rule 263 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    THIS            reduce using rule 263 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    LPAREN          reduce using rule 263 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    NUMBER          reduce using rule 263 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    STRING_L        reduce using rule 263 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    SCHAR           reduce using rule 263 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    DOUBLEBNOP      reduce using rule 263 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    OPERATOR        reduce using rule 263 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    ELSE            reduce using rule 263 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MULTOP in state 294 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 336 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 345 resolved as shift
WARNING: shift/reduce conflict for MULTOP in state 379 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 417 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 418 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 461 resolved as shift
