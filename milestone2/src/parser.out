Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     control_line -> control_line control_line_stmt
Rule 2     control_line -> control_line_stmt
Rule 3     include_control -> HASHTAG INCLUDE
Rule 4     control_line_stmt -> include_control LTCOMP STRING_L GTCOMP
Rule 5     control_line_stmt -> include_control STRING_L
Rule 6     program -> control_line translation_unit
Rule 7     program -> translation_unit
Rule 8     translation_unit -> declaration_seq
Rule 9     declaration_seq -> declaration_seq declaration
Rule 10    declaration_seq -> declaration
Rule 11    empty -> <empty>
Rule 12    constant_expression -> conditional_expression
Rule 13    conditional_expression -> logical_OR_expression
Rule 14    conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression
Rule 15    logical_OR_expression -> logical_AND_expression
Rule 16    logical_OR_expression -> logical_OR_expression OROP logical_AND_expression
Rule 17    logical_AND_expression -> inclusive_OR_expression
Rule 18    logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression
Rule 19    inclusive_OR_expression -> exclusive_OR_expression
Rule 20    inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression
Rule 21    exclusive_OR_expression -> AND_expression
Rule 22    exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression
Rule 23    AND_expression -> equality_expression
Rule 24    AND_expression -> AND_expression BANDOP equality_expression
Rule 25    equality_expression -> relational_expression
Rule 26    equality_expression -> equality_expression EQCOMP relational_expression
Rule 27    equality_expression -> equality_expression NEQCOMP relational_expression
Rule 28    relational_expression -> shift_expression
Rule 29    relational_expression -> relational_expression LTCOMP shift_expression
Rule 30    relational_expression -> relational_expression GTCOMP shift_expression
Rule 31    relational_expression -> relational_expression LTECOMP shift_expression
Rule 32    relational_expression -> relational_expression GTECOMP shift_expression
Rule 33    shift_expression -> additive_expression
Rule 34    shift_expression -> shift_expression LSHIFT additive_expression
Rule 35    shift_expression -> shift_expression RSHIFT additive_expression
Rule 36    additive_expression -> multiplicative_expression
Rule 37    additive_expression -> additive_expression PLUSOP multiplicative_expression
Rule 38    additive_expression -> additive_expression MINUSOP multiplicative_expression
Rule 39    multiplicative_expression -> pm_expression
Rule 40    multiplicative_expression -> multiplicative_expression MULTOP pm_expression
Rule 41    multiplicative_expression -> multiplicative_expression DIVOP pm_expression
Rule 42    multiplicative_expression -> multiplicative_expression MODOP pm_expression
Rule 43    pm_expression -> cast_expression
Rule 44    pm_expression -> pm_expression DOTSTAR cast_expression
Rule 45    pm_expression -> pm_expression ARROWSTAR cast_expression
Rule 46    expression -> assignment_expression
Rule 47    expression -> throw_expression
Rule 48    expression -> expression COMMA assignment_expression
Rule 49    throw_expression -> THROW expression
Rule 50    throw_expression -> THROW
Rule 51    assignment_expression -> conditional_expression
Rule 52    assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 53    assignment_operator -> EQUAL
Rule 54    assignment_operator -> MULTEQOP
Rule 55    assignment_operator -> DIVEQOP
Rule 56    assignment_operator -> MODEQOP
Rule 57    assignment_operator -> PLUSEQOP
Rule 58    assignment_operator -> MINUSEQOP
Rule 59    assignment_operator -> LSHIFTEQOP
Rule 60    assignment_operator -> RSHIFTEQOP
Rule 61    assignment_operator -> BANDEQOP
Rule 62    assignment_operator -> BOREQOP
Rule 63    unary_expression -> postfix_expression
Rule 64    unary_expression -> DPLUSOP unary_expression
Rule 65    unary_expression -> DMINUSOP unary_expression
Rule 66    unary_expression -> unary1_operator cast_expression
Rule 67    unary_expression -> unary2_operator cast_expression
Rule 68    unary_expression -> SIZEOF unary_expression
Rule 69    unary_expression -> SIZEOF LPAREN type_name RPAREN
Rule 70    unary_expression -> allocation_expression
Rule 71    unary_expression -> deallocation_expression
Rule 72    deallocation_expression -> DELETE cast_expression
Rule 73    allocation_expression -> NEW new_type_name new_initializer
Rule 74    allocation_expression -> NEW new_type_name
Rule 75    allocation_expression -> NEW LPAREN type_name RPAREN new_initializer
Rule 76    allocation_expression -> NEW LPAREN type_name RPAREN
Rule 77    new_type_name -> type_specifier_ new_declarator
Rule 78    new_type_name -> type_specifier_
Rule 79    new_declarator -> MULTOP new_declarator
Rule 80    new_declarator -> MULTOP
Rule 81    new_declarator -> new_declarator LSPAREN expression RSPAREN
Rule 82    new_declarator -> LSPAREN expression RSPAREN
Rule 83    new_initializer -> LPAREN initializer_list RPAREN
Rule 84    new_initializer -> LPAREN RPAREN
Rule 85    unary1_operator -> PLUSOP
Rule 86    unary1_operator -> MINUSOP
Rule 87    unary1_operator -> NOTSYM
Rule 88    unary1_operator -> BNOP
Rule 89    unary2_operator -> MULTOP
Rule 90    unary2_operator -> BANDOP
Rule 91    postfix_expression -> primary_expression
Rule 92    postfix_expression -> postfix_expression LSPAREN expression RSPAREN
Rule 93    postfix_expression -> postfix_expression LPAREN expression_list RPAREN
Rule 94    postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN
Rule 95    postfix_expression -> postfix_expression LPAREN RPAREN
Rule 96    postfix_expression -> simple_type_name LPAREN expression_list RPAREN
Rule 97    postfix_expression -> simple_type_name LPAREN RPAREN
Rule 98    postfix_expression -> postfix_expression DOT name
Rule 99    postfix_expression -> postfix_expression ARROW name
Rule 100   postfix_expression -> postfix_expression DPLUSOP
Rule 101   postfix_expression -> postfix_expression DMINUSOP
Rule 102   primary_expression -> literal
Rule 103   primary_expression -> THIS
Rule 104   primary_expression -> LPAREN expression RPAREN
Rule 105   primary_expression -> name
Rule 106   literal -> NUMBER
Rule 107   literal -> STRING_L
Rule 108   literal -> SCHAR
Rule 109   cast_expression -> unary_expression
Rule 110   cast_expression -> LPAREN type_name RPAREN cast_expression
Rule 111   abstract_declarator -> unary2_operator
Rule 112   abstract_declarator -> unary2_operator abstract_declarator
Rule 113   abstract_declarator -> LSPAREN constant_expression RSPAREN
Rule 114   abstract_declarator -> abstract_declarator LSPAREN constant_expression RSPAREN
Rule 115   abstract_declarator -> LSPAREN RSPAREN
Rule 116   abstract_declarator -> abstract_declarator LSPAREN RSPAREN
Rule 117   declarator -> name
Rule 118   declarator -> unary2_operator declarator
Rule 119   declarator -> declarator LPAREN argument_declaration_list RPAREN
Rule 120   declarator -> declarator LSPAREN constant_expression RSPAREN
Rule 121   declarator -> declarator LSPAREN RSPAREN
Rule 122   argument_declaration_list -> arg_declaration_list
Rule 123   argument_declaration_list -> empty
Rule 124   arg_declaration_list -> argument_declaration
Rule 125   arg_declaration_list -> argument_declaration COMMA arg_declaration_list
Rule 126   argument_declaration -> type_specifier_ declarator
Rule 127   argument_declaration -> type_specifier_ declarator EQUAL expression
Rule 128   argument_declaration -> type_specifier_ abstract_declarator
Rule 129   argument_declaration -> type_specifier_
Rule 130   argument_declaration -> type_specifier_ abstract_declarator EQUAL expression
Rule 131   argument_declaration -> type_specifier_ EQUAL expression
Rule 132   name -> IDENTIFIER
Rule 133   name -> operator_function_name
Rule 134   name -> DOUBLEBNOP IDENTIFIER
Rule 135   operator_function_name -> OPERATOR operator_name
Rule 136   operator_name -> NEW
Rule 137   operator_name -> DELETE
Rule 138   operator_name -> PLUSOP
Rule 139   operator_name -> MINUSOP
Rule 140   operator_name -> MULTOP
Rule 141   operator_name -> DIVOP
Rule 142   operator_name -> MODOP
Rule 143   operator_name -> XOROP
Rule 144   operator_name -> BANDOP
Rule 145   operator_name -> BNOP
Rule 146   operator_name -> NOTSYM
Rule 147   operator_name -> EQUAL
Rule 148   operator_name -> LTCOMP
Rule 149   operator_name -> GTCOMP
Rule 150   operator_name -> PLUSEQOP
Rule 151   operator_name -> MINUSEQOP
Rule 152   operator_name -> MULTEQOP
Rule 153   operator_name -> DIVEQOP
Rule 154   operator_name -> MODEQOP
Rule 155   operator_name -> XOREQOP
Rule 156   operator_name -> BANDEQOP
Rule 157   operator_name -> LSHIFT
Rule 158   operator_name -> RSHIFT
Rule 159   operator_name -> RSHIFTEQOP
Rule 160   operator_name -> LSHIFTEQOP
Rule 161   operator_name -> EQCOMP
Rule 162   operator_name -> NEQCOMP
Rule 163   operator_name -> LTECOMP
Rule 164   operator_name -> GTECOMP
Rule 165   operator_name -> ANDOP
Rule 166   operator_name -> OROP
Rule 167   operator_name -> DPLUSOP
Rule 168   operator_name -> DMINUSOP
Rule 169   operator_name -> COMMA
Rule 170   operator_name -> ARROWSTAR
Rule 171   operator_name -> ARROW
Rule 172   operator_name -> LPAREN RPAREN
Rule 173   operator_name -> LSPAREN RSPAREN
Rule 174   template_class_name -> LTEMPLATE template_arg_list RTEMPLATE
Rule 175   template_arg_list -> type_name
Rule 176   template_arg_list -> template_arg_list COMMA type_name
Rule 177   type_name -> type_specifier_ abstract_declarator
Rule 178   type_name -> type_specifier_
Rule 179   type_specifier_ -> CONST type_specifier
Rule 180   type_specifier_ -> TYPEDEF type_specifier
Rule 181   type_specifier_ -> type_specifier
Rule 182   type_specifier -> simple_type_name
Rule 183   type_specifier -> complex_type_specifier
Rule 184   simple_type_name -> CHAR
Rule 185   simple_type_name -> SHORT
Rule 186   simple_type_name -> INT
Rule 187   simple_type_name -> LONG
Rule 188   simple_type_name -> SIGNED
Rule 189   simple_type_name -> UNSIGNED
Rule 190   simple_type_name -> FLOAT
Rule 191   simple_type_name -> DOUBLE
Rule 192   simple_type_name -> VOID
Rule 193   simple_type_name -> STRING
Rule 194   simple_type_name -> AUTO
Rule 195   complex_type_specifier -> class_key IDENTIFIER
Rule 196   complex_type_specifier -> class_key IDENTIFIER template_class_name
Rule 197   complex_type_specifier -> TYPE IDENTIFIER
Rule 198   complex_type_specifier -> TYPE IDENTIFIER template_class_name
Rule 199   pure_specifier -> EQUAL NUMBER
Rule 200   class_head -> class_key IDENTIFIER base_spec
Rule 201   class_head -> class_key IDENTIFIER
Rule 202   base_spec -> COLON base_list
Rule 203   base_list -> base_specifier
Rule 204   base_list -> base_list COMMA base_specifier
Rule 205   base_specifier -> class_key IDENTIFIER
Rule 206   base_specifier -> class_key IDENTIFIER template_class_name
Rule 207   base_specifier -> IDENTIFIER
Rule 208   base_specifier -> IDENTIFIER template_class_name
Rule 209   base_specifier -> access_specifier class_key IDENTIFIER
Rule 210   base_specifier -> access_specifier class_key IDENTIFIER template_class_name
Rule 211   class_key -> CLASS
Rule 212   class_key -> STRUCT
Rule 213   class_define_specifier -> class_head LCPAREN member_list RCPAREN
Rule 214   class_define_specifier -> class_head LCPAREN RCPAREN
Rule 215   member_list -> member_access_list
Rule 216   member_list -> access_list
Rule 217   member_list -> member_list access_list
Rule 218   access_specifier -> PRIVATE
Rule 219   access_specifier -> PROTECTED
Rule 220   access_specifier -> PUBLIC
Rule 221   access_list -> access_specifier COLON member_access_list
Rule 222   access_list -> access_specifier COLON
Rule 223   member_access_list -> member_declaration member_access_list
Rule 224   member_access_list -> member_declaration
Rule 225   member_declaration -> type_specifier_ member_declarator_list SEMICOLON
Rule 226   member_declaration -> member_declarator_list SEMICOLON
Rule 227   member_declaration -> type_specifier_ SEMICOLON
Rule 228   member_declaration -> SEMICOLON
Rule 229   member_declaration -> function_definition
Rule 230   member_declaration -> class_define_specifier SEMICOLON
Rule 231   member_declarator_list -> member_declarator
Rule 232   member_declarator_list -> member_declarator_list COMMA member_declarator
Rule 233   member_declarator -> declarator pure_specifier
Rule 234   member_declarator -> declarator
Rule 235   function_definition -> type_specifier_ declarator fct_body
Rule 236   fct_body -> compound_statement
Rule 237   compound_statement -> LCPAREN statement_list RCPAREN
Rule 238   compound_statement -> LCPAREN RCPAREN
Rule 239   statement_list -> statement
Rule 240   statement_list -> statement_list statement
Rule 241   statement -> labeled_statement
Rule 242   statement -> expression_statement
Rule 243   statement -> compound_statement
Rule 244   statement -> selection_statement
Rule 245   statement -> iteration_statement
Rule 246   statement -> jump_statement
Rule 247   statement -> declaration_statement
Rule 248   statement -> try_block
Rule 249   jump_statement -> BREAK SEMICOLON
Rule 250   jump_statement -> CONTINUE SEMICOLON
Rule 251   jump_statement -> RETURN expression SEMICOLON
Rule 252   jump_statement -> RETURN SEMICOLON
Rule 253   jump_statement -> GOTO IDENTIFIER SEMICOLON
Rule 254   selection_statement -> IF LPAREN expression RPAREN statement
Rule 255   selection_statement -> IF LPAREN expression RPAREN statement ELSE statement
Rule 256   selection_statement -> SWITCH LPAREN expression RPAREN statement
Rule 257   try_block -> TRY compound_statement CATCH compound_statement
Rule 258   labeled_statement -> IDENTIFIER COLON statement
Rule 259   labeled_statement -> CASE constant_expression COLON statement
Rule 260   labeled_statement -> DEFAULT COLON statement
Rule 261   iteration_statement -> WHILE LPAREN expression RPAREN statement
Rule 262   iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON
Rule 263   iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
Rule 264   iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
Rule 265   iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
Rule 266   iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement
Rule 267   for_init_statement -> expression_statement
Rule 268   for_init_statement -> declaration_statement
Rule 269   expression_statement -> expression SEMICOLON
Rule 270   expression_statement -> SEMICOLON
Rule 271   declaration_statement -> declaration
Rule 272   declaration -> type_specifier_ declarator_list SEMICOLON
Rule 273   declaration -> type_specifier_ SEMICOLON
Rule 274   declaration -> asm_declaration
Rule 275   declaration -> function_definition
Rule 276   declaration -> class_define_specifier SEMICOLON
Rule 277   declaration -> template_declaration
Rule 278   template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
Rule 279   template_argument_list -> argument_declaration
Rule 280   template_argument_list -> template_argument_list COMMA argument_declaration
Rule 281   declarator_list -> init_declarator
Rule 282   declarator_list -> declarator_list COMMA init_declarator
Rule 283   init_declarator -> declarator initializer
Rule 284   init_declarator -> declarator
Rule 285   initializer -> EQUAL assignment_expression
Rule 286   initializer -> EQUAL LCPAREN initializer_list RCPAREN
Rule 287   initializer -> EQUAL LCPAREN initializer_list COMMA RCPAREN
Rule 288   initializer -> LPAREN expression_list RPAREN
Rule 289   initializer_list -> assignment_expression
Rule 290   initializer_list -> initializer_list COMMA assignment_expression
Rule 291   initializer_list -> LCPAREN initializer_list RCPAREN
Rule 292   initializer_list -> LCPAREN initializer_list COMMA RCPAREN
Rule 293   asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON
Rule 294   expression_list -> assignment_expression
Rule 295   expression_list -> expression_list COMMA assignment_expression

Terminals, with rules where they appear

ANDOP                : 18 165
ARROW                : 99 171
ARROWSTAR            : 45 170
ASM                  : 293
AUTO                 : 194
BANDEQOP             : 61 156
BANDOP               : 24 90 144
BNOP                 : 88 145
BOREQOP              : 62
BREAK                : 249
CASE                 : 259
CATCH                : 257
CHAR                 : 184
CLASS                : 211
COLON                : 14 202 221 222 258 259 260
COMMA                : 48 125 169 176 204 232 280 282 287 290 292 295
CONST                : 179
CONTINUE             : 250
DEFAULT              : 260
DELETE               : 72 137
DIVEQOP              : 55 153
DIVOP                : 41 141
DMINUSOP             : 65 101 168
DO                   : 262
DOT                  : 98
DOTSTAR              : 44
DOUBLE               : 191
DOUBLEBNOP           : 134
DPLUSOP              : 64 100 167
ELSE                 : 255
EQCOMP               : 26 161
EQUAL                : 53 127 130 131 147 199 285 286 287
FLOAT                : 190
FOR                  : 263 264 265 266
GOTO                 : 253
GTCOMP               : 4 30 149
GTECOMP              : 32 164
HASHTAG              : 3
IDENTIFIER           : 132 134 195 196 197 198 200 201 205 206 207 208 209 210 253 258
IF                   : 254 255
INCLUDE              : 3
INT                  : 186
LCPAREN              : 213 214 237 238 286 287 291 292
LONG                 : 187
LPAREN               : 69 75 76 83 84 93 94 95 96 97 104 110 119 172 254 255 256 261 262 263 264 265 266 288 293
LSHIFT               : 34 157
LSHIFTEQOP           : 59 160
LSPAREN              : 81 82 92 113 114 115 116 120 121 173
LTCOMP               : 4 29 148
LTECOMP              : 31 163
LTEMPLATE            : 174 278
MINUSEQOP            : 58 151
MINUSOP              : 38 86 139
MODEQOP              : 56 154
MODOP                : 42 142
MULTEQOP             : 54 152
MULTOP               : 40 79 80 89 140
NEQCOMP              : 27 162
NEW                  : 73 74 75 76 136
NOTSYM               : 87 146
NUMBER               : 106 199
OPERATOR             : 135
OROP                 : 16 20 166
PLUSEQOP             : 57 150
PLUSOP               : 37 85 138
PRIVATE              : 218
PROTECTED            : 219
PUBLIC               : 220
QUESMARK             : 14
RCPAREN              : 213 214 237 238 286 287 291 292
RETURN               : 251 252
RPAREN               : 69 75 76 83 84 93 94 95 96 97 104 110 119 172 254 255 256 261 262 263 264 265 266 288 293
RSHIFT               : 35 158
RSHIFTEQOP           : 60 159
RSPAREN              : 81 82 92 113 114 115 116 120 121 173
RTEMPLATE            : 174 278
SCHAR                : 108
SEMICOLON            : 225 226 227 228 230 249 250 251 252 253 262 263 264 265 266 269 270 272 273 276 293
SHORT                : 185
SIGNED               : 188
SIZEOF               : 68 69
STRING               : 193
STRING_L             : 4 5 107 293
STRUCT               : 212
SWITCH               : 256
TEMPLATE             : 278
THIS                 : 103
THROW                : 49 50
TRY                  : 257
TYPE                 : 197 198
TYPEDEF              : 180
UNSIGNED             : 189
VOID                 : 192
WHILE                : 261 262
XOREQOP              : 155
XOROP                : 22 143
error                : 

Nonterminals, with rules where they appear

AND_expression       : 21 22 24
abstract_declarator  : 112 114 116 128 130 177
access_list          : 216 217
access_specifier     : 209 210 221 222
additive_expression  : 33 34 35 37 38
allocation_expression : 70
arg_declaration_list : 122 125
argument_declaration : 124 125 279 280
argument_declaration_list : 119
asm_declaration      : 274
assignment_expression : 46 48 52 285 289 290 294 295
assignment_operator  : 52
base_list            : 202 204
base_spec            : 200
base_specifier       : 203 204
cast_expression      : 43 44 45 66 67 72 110
class_define_specifier : 230 276
class_head           : 213 214
class_key            : 195 196 200 201 205 206 209 210
complex_type_specifier : 183
compound_statement   : 236 243 257 257
conditional_expression : 12 14 51
constant_expression  : 113 114 120 259
control_line         : 1 6
control_line_stmt    : 1 2
deallocation_expression : 71
declaration          : 9 10 271 278
declaration_seq      : 8 9
declaration_statement : 247 268
declarator           : 118 119 120 121 126 127 233 234 235 283 284
declarator_list      : 272 282
empty                : 123
equality_expression  : 23 24 26 27
exclusive_OR_expression : 19 20 22
expression           : 14 48 49 81 82 92 104 127 130 131 251 254 255 256 261 262 263 263 264 265 269
expression_list      : 93 94 96 288 295
expression_statement : 242 267
fct_body             : 235
for_init_statement   : 263 264 265 266
function_definition  : 229 275
include_control      : 4 5
inclusive_OR_expression : 17 18 20
init_declarator      : 281 282
initializer          : 283
initializer_list     : 83 286 287 290 291 292
iteration_statement  : 245
jump_statement       : 246
labeled_statement    : 241
literal              : 102
logical_AND_expression : 15 16 18
logical_OR_expression : 13 14 16
member_access_list   : 215 221 223
member_declaration   : 223 224
member_declarator    : 231 232
member_declarator_list : 225 226 232
member_list          : 213 217
multiplicative_expression : 36 37 38 40 41 42
name                 : 98 99 105 117
new_declarator       : 77 79 81
new_initializer      : 73 75
new_type_name        : 73 74
operator_function_name : 133
operator_name        : 135
pm_expression        : 39 40 41 42 44 45
postfix_expression   : 63 92 93 94 95 98 99 100 101
primary_expression   : 91
program              : 0
pure_specifier       : 233
relational_expression : 25 26 27 29 30 31 32
selection_statement  : 244
shift_expression     : 28 29 30 31 32 34 35
simple_type_name     : 96 97 182
statement            : 239 240 254 255 255 256 258 259 260 261 262 263 264 265 266
statement_list       : 237 240
template_arg_list    : 174 176
template_argument_list : 278 280
template_class_name  : 94 196 198 206 208 210
template_declaration : 277
throw_expression     : 47
translation_unit     : 6 7
try_block            : 248
type_name            : 69 75 76 110 175 176
type_specifier       : 179 180 181
type_specifier_      : 77 78 126 127 128 129 130 131 177 178 225 227 235 272 273
unary1_operator      : 66
unary2_operator      : 67 111 112 118
unary_expression     : 52 64 65 68 109

