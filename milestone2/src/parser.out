Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DOTSTAR
    OPERATOR

Grammar

Rule 0     S' -> program
Rule 1     control_line -> control_line control_line_stmt
Rule 2     control_line -> control_line_stmt
Rule 3     include_control -> HASHTAG INCLUDE
Rule 4     control_line_stmt -> include_control LTCOMP STRING_L GTCOMP
Rule 5     control_line_stmt -> include_control STRING_L
Rule 6     program -> control_line translation_unit
Rule 7     program -> translation_unit
Rule 8     translation_unit -> declaration_seq
Rule 9     declaration_seq -> declaration_seq declaration
Rule 10    declaration_seq -> declaration
Rule 11    empty -> <empty>
Rule 12    constant_expression -> conditional_expression
Rule 13    conditional_expression -> logical_OR_expression
Rule 14    conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression
Rule 15    logical_OR_expression -> logical_AND_expression
Rule 16    logical_OR_expression -> logical_OR_expression OROP logical_AND_expression
Rule 17    logical_AND_expression -> inclusive_OR_expression
Rule 18    logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression
Rule 19    inclusive_OR_expression -> exclusive_OR_expression
Rule 20    inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression
Rule 21    exclusive_OR_expression -> AND_expression
Rule 22    exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression
Rule 23    AND_expression -> equality_expression
Rule 24    AND_expression -> AND_expression BANDOP equality_expression
Rule 25    equality_expression -> relational_expression
Rule 26    equality_expression -> equality_expression EQCOMP relational_expression
Rule 27    equality_expression -> equality_expression NEQCOMP relational_expression
Rule 28    relational_expression -> shift_expression
Rule 29    relational_expression -> relational_expression LTCOMP shift_expression
Rule 30    relational_expression -> relational_expression GTCOMP shift_expression
Rule 31    relational_expression -> relational_expression LTECOMP shift_expression
Rule 32    relational_expression -> relational_expression GTECOMP shift_expression
Rule 33    shift_expression -> additive_expression
Rule 34    shift_expression -> shift_expression LSHIFT additive_expression
Rule 35    shift_expression -> shift_expression RSHIFT additive_expression
Rule 36    additive_expression -> multiplicative_expression
Rule 37    additive_expression -> additive_expression PLUSOP multiplicative_expression
Rule 38    additive_expression -> additive_expression MINUSOP multiplicative_expression
Rule 39    multiplicative_expression -> cast_expression
Rule 40    multiplicative_expression -> multiplicative_expression MULTOP cast_expression
Rule 41    multiplicative_expression -> multiplicative_expression DIVOP cast_expression
Rule 42    multiplicative_expression -> multiplicative_expression MODOP cast_expression
Rule 43    expression -> assignment_expression
Rule 44    expression -> throw_expression
Rule 45    expression -> expression COMMA assignment_expression
Rule 46    throw_expression -> THROW expression
Rule 47    throw_expression -> THROW
Rule 48    assignment_expression -> conditional_expression
Rule 49    assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 50    assignment_operator -> EQUAL
Rule 51    assignment_operator -> MULTEQOP
Rule 52    assignment_operator -> DIVEQOP
Rule 53    assignment_operator -> MODEQOP
Rule 54    assignment_operator -> PLUSEQOP
Rule 55    assignment_operator -> MINUSEQOP
Rule 56    assignment_operator -> LSHIFTEQOP
Rule 57    assignment_operator -> RSHIFTEQOP
Rule 58    assignment_operator -> BANDEQOP
Rule 59    assignment_operator -> BOREQOP
Rule 60    unary_expression -> postfix_expression
Rule 61    unary_expression -> DPLUSOP unary_expression
Rule 62    unary_expression -> DMINUSOP unary_expression
Rule 63    unary_expression -> unary1_operator cast_expression
Rule 64    unary_expression -> unary2_operator cast_expression
Rule 65    unary_expression -> SIZEOF unary_expression
Rule 66    unary_expression -> SIZEOF LPAREN type_name RPAREN
Rule 67    unary_expression -> allocation_expression
Rule 68    unary_expression -> deallocation_expression
Rule 69    deallocation_expression -> DELETE cast_expression
Rule 70    allocation_expression -> NEW new_type_name new_initializer
Rule 71    allocation_expression -> NEW new_type_name
Rule 72    allocation_expression -> NEW LPAREN type_name RPAREN new_initializer
Rule 73    allocation_expression -> NEW LPAREN type_name RPAREN
Rule 74    new_type_name -> type_specifier_ new_declarator
Rule 75    new_type_name -> type_specifier_
Rule 76    new_declarator -> new_declarator MULTOP
Rule 77    new_declarator -> MULTOP
Rule 78    new_declarator -> new_declarator LSPAREN expression RSPAREN
Rule 79    new_declarator -> LSPAREN expression RSPAREN
Rule 80    new_initializer -> LPAREN initializer_list RPAREN
Rule 81    new_initializer -> LPAREN RPAREN
Rule 82    unary1_operator -> PLUSOP
Rule 83    unary1_operator -> MINUSOP
Rule 84    unary1_operator -> NOTSYM
Rule 85    unary1_operator -> BNOP
Rule 86    unary2_operator -> MULTOP
Rule 87    unary2_operator -> BANDOP
Rule 88    postfix_expression -> primary_expression
Rule 89    postfix_expression -> postfix_expression LSPAREN expression RSPAREN
Rule 90    postfix_expression -> postfix_expression LPAREN expression_list RPAREN
Rule 91    postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN
Rule 92    postfix_expression -> postfix_expression LPAREN RPAREN
Rule 93    postfix_expression -> postfix_expression DOT name
Rule 94    postfix_expression -> postfix_expression ARROW name
Rule 95    postfix_expression -> postfix_expression DPLUSOP
Rule 96    postfix_expression -> postfix_expression DMINUSOP
Rule 97    primary_expression -> name
Rule 98    primary_expression -> literal
Rule 99    primary_expression -> THIS
Rule 100   primary_expression -> LPAREN expression RPAREN
Rule 101   literal -> STRING_L
Rule 102   literal -> NUMBER
Rule 103   literal -> SCHAR
Rule 104   cast_expression -> unary_expression
Rule 105   cast_expression -> LPAREN type_name RPAREN cast_expression
Rule 106   abstract_declarator -> unary2_operator
Rule 107   abstract_declarator -> unary2_operator abstract_declarator
Rule 108   abstract_declarator -> LSPAREN constant_expression RSPAREN
Rule 109   abstract_declarator -> abstract_declarator LSPAREN constant_expression RSPAREN
Rule 110   abstract_declarator -> LSPAREN RSPAREN
Rule 111   abstract_declarator -> abstract_declarator LSPAREN RSPAREN
Rule 112   declarator -> name
Rule 113   declarator -> unary2_operator declarator
Rule 114   declarator -> declarator LSPAREN constant_expression RSPAREN
Rule 115   declarator -> declarator LSPAREN RSPAREN
Rule 116   arg_list -> argument_declaration_list
Rule 117   arg_list -> <empty>
Rule 118   argument_declaration_list -> argument_declaration
Rule 119   argument_declaration_list -> argument_declaration COMMA argument_declaration_list
Rule 120   argument_declaration -> type_specifier_ declarator
Rule 121   argument_declaration -> type_specifier_ declarator EQUAL expression
Rule 122   argument_declaration -> type_specifier_ abstract_declarator
Rule 123   argument_declaration -> type_specifier_
Rule 124   name -> IDENTIFIER
Rule 125   name -> DOUBLEBNOP IDENTIFIER
Rule 126   operator_name -> NEW
Rule 127   operator_name -> DELETE
Rule 128   operator_name -> PLUSOP
Rule 129   operator_name -> MINUSOP
Rule 130   operator_name -> MULTOP
Rule 131   operator_name -> DIVOP
Rule 132   operator_name -> MODOP
Rule 133   operator_name -> XOROP
Rule 134   operator_name -> BANDOP
Rule 135   operator_name -> BNOP
Rule 136   operator_name -> NOTSYM
Rule 137   operator_name -> EQUAL
Rule 138   operator_name -> LTCOMP
Rule 139   operator_name -> GTCOMP
Rule 140   operator_name -> PLUSEQOP
Rule 141   operator_name -> MINUSEQOP
Rule 142   operator_name -> MULTEQOP
Rule 143   operator_name -> DIVEQOP
Rule 144   operator_name -> MODEQOP
Rule 145   operator_name -> XOREQOP
Rule 146   operator_name -> BANDEQOP
Rule 147   operator_name -> LSHIFT
Rule 148   operator_name -> RSHIFT
Rule 149   operator_name -> RSHIFTEQOP
Rule 150   operator_name -> LSHIFTEQOP
Rule 151   operator_name -> EQCOMP
Rule 152   operator_name -> NEQCOMP
Rule 153   operator_name -> LTECOMP
Rule 154   operator_name -> GTECOMP
Rule 155   operator_name -> ANDOP
Rule 156   operator_name -> OROP
Rule 157   operator_name -> DPLUSOP
Rule 158   operator_name -> DMINUSOP
Rule 159   operator_name -> COMMA
Rule 160   operator_name -> ARROWSTAR
Rule 161   operator_name -> ARROW
Rule 162   template_class_name -> LTEMPLATE template_arg_list RTEMPLATE
Rule 163   template_arg_list -> type_name
Rule 164   template_arg_list -> template_arg_list COMMA type_name
Rule 165   type_name -> type_specifier_ abstract_declarator
Rule 166   type_name -> type_specifier_
Rule 167   type_specifier_ -> CONST type_specifier
Rule 168   type_specifier_ -> type_specifier
Rule 169   typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON
Rule 170   typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON
Rule 171   type_specifier -> simple_type_name
Rule 172   type_specifier -> complex_type_specifier
Rule 173   simple_type_name -> CHAR
Rule 174   simple_type_name -> SHORT
Rule 175   simple_type_name -> INT
Rule 176   simple_type_name -> LONG
Rule 177   simple_type_name -> SIGNED
Rule 178   simple_type_name -> UNSIGNED
Rule 179   simple_type_name -> FLOAT
Rule 180   simple_type_name -> DOUBLE
Rule 181   simple_type_name -> VOID
Rule 182   simple_type_name -> STRING
Rule 183   simple_type_name -> AUTO
Rule 184   complex_type_specifier -> class_key IDENTIFIER
Rule 185   complex_type_specifier -> class_key IDENTIFIER template_class_name
Rule 186   complex_type_specifier -> TYPE IDENTIFIER
Rule 187   complex_type_specifier -> TYPE IDENTIFIER template_class_name
Rule 188   pure_specifier -> EQUAL NUMBER
Rule 189   class_head -> class_key IDENTIFIER base_spec
Rule 190   class_head -> class_key IDENTIFIER
Rule 191   base_spec -> COLON base_list
Rule 192   base_list -> base_specifier
Rule 193   base_list -> base_list COMMA base_specifier
Rule 194   base_specifier -> class_key IDENTIFIER
Rule 195   base_specifier -> class_key IDENTIFIER template_class_name
Rule 196   base_specifier -> IDENTIFIER
Rule 197   base_specifier -> IDENTIFIER template_class_name
Rule 198   base_specifier -> access_specifier class_key IDENTIFIER
Rule 199   base_specifier -> access_specifier class_key IDENTIFIER template_class_name
Rule 200   class_key -> CLASS
Rule 201   class_key -> STRUCT
Rule 202   class_define_specifier -> class_head LCPAREN member_list RCPAREN
Rule 203   class_define_specifier -> class_head LCPAREN RCPAREN
Rule 204   member_list -> member_access_list
Rule 205   member_list -> access_list
Rule 206   member_list -> member_list access_list
Rule 207   access_specifier -> PRIVATE
Rule 208   access_specifier -> PROTECTED
Rule 209   access_specifier -> PUBLIC
Rule 210   access_list -> access_specifier COLON member_access_list
Rule 211   access_list -> access_specifier COLON
Rule 212   member_access_list -> member_declaration member_access_list
Rule 213   member_access_list -> member_declaration
Rule 214   member_declaration -> type_specifier_ member_declarator_list SEMICOLON
Rule 215   member_declaration -> member_declarator_list SEMICOLON
Rule 216   member_declaration -> type_specifier_ SEMICOLON
Rule 217   member_declaration -> SEMICOLON
Rule 218   member_declaration -> function_definition
Rule 219   member_declaration -> class_define_specifier SEMICOLON
Rule 220   member_declarator_list -> member_declarator
Rule 221   member_declarator_list -> member_declarator_list COMMA member_declarator
Rule 222   member_declarator -> declarator pure_specifier
Rule 223   member_declarator -> declarator
Rule 224   function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope
Rule 225   function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope
Rule 226   func_push_scope -> LPAREN
Rule 227   fct_body -> compound_statement
Rule 228   compound_statement -> LCPAREN statement_list RCPAREN
Rule 229   compound_statement -> LCPAREN RCPAREN
Rule 230   statement_list -> statement
Rule 231   statement_list -> statement_list statement
Rule 232   statement -> expression_statement
Rule 233   statement -> push_scope compound_statement pop_scope
Rule 234   statement -> selection_statement
Rule 235   statement -> iteration_statement
Rule 236   statement -> jump_statement
Rule 237   statement -> declaration_statement
Rule 238   statement -> try_block
Rule 239   jump_statement -> BREAK SEMICOLON
Rule 240   jump_statement -> CONTINUE SEMICOLON
Rule 241   jump_statement -> RETURN expression SEMICOLON
Rule 242   jump_statement -> RETURN SEMICOLON
Rule 243   jump_statement -> GOTO IDENTIFIER SEMICOLON
Rule 244   selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope
Rule 245   selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope
Rule 246   selection_statement -> SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope
Rule 247   try_block -> TRY push_scope compound_statement pop_scope CATCH push_scope compound_statement pop_scope
Rule 248   labeled_statement_list -> labeled_statement
Rule 249   labeled_statement_list -> labeled_statement_list labeled_statement
Rule 250   labeled_statement -> CASE constant_expression COLON statement_list
Rule 251   labeled_statement -> DEFAULT COLON statement_list
Rule 252   iteration_statement -> WHILE push_scope LPAREN expression RPAREN statement pop_scope
Rule 253   iteration_statement -> DO push_scope statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope
Rule 254   iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope
Rule 255   iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope
Rule 256   iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope
Rule 257   iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN statement pop_scope
Rule 258   for_init_statement -> expression_statement
Rule 259   for_init_statement -> declaration_statement
Rule 260   expression_statement -> expression SEMICOLON
Rule 261   expression_statement -> SEMICOLON
Rule 262   declaration_statement -> declaration
Rule 263   declaration -> type_specifier_ declarator_list SEMICOLON
Rule 264   declaration -> asm_declaration
Rule 265   declaration -> function_definition
Rule 266   declaration -> function_decl
Rule 267   declaration -> class_define_specifier SEMICOLON
Rule 268   declaration -> template_declaration
Rule 269   declaration -> typedef_declarator
Rule 270   template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
Rule 271   template_argument_list -> argument_declaration
Rule 272   template_argument_list -> template_argument_list COMMA argument_declaration
Rule 273   declarator_list -> init_declarator
Rule 274   declarator_list -> declarator_list COMMA init_declarator
Rule 275   init_declarator -> declarator initializer
Rule 276   init_declarator -> declarator
Rule 277   initializer -> EQUAL assignment_expression
Rule 278   initializer -> EQUAL LCPAREN initializer_list RCPAREN
Rule 279   initializer -> EQUAL LCPAREN initializer_list COMMA RCPAREN
Rule 280   initializer -> LPAREN expression_list RPAREN
Rule 281   initializer_list -> assignment_expression
Rule 282   initializer_list -> initializer_list COMMA assignment_expression
Rule 283   initializer_list -> LCPAREN initializer_list RCPAREN
Rule 284   initializer_list -> LCPAREN initializer_list COMMA RCPAREN
Rule 285   asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON
Rule 286   expression_list -> assignment_expression
Rule 287   expression_list -> expression_list COMMA assignment_expression
Rule 288   push_scope -> <empty>
Rule 289   pop_scope -> <empty>

Terminals, with rules where they appear

ANDOP                : 18 155
ARROW                : 94 161
ARROWSTAR            : 160
ASM                  : 285
AUTO                 : 183
BANDEQOP             : 58 146
BANDOP               : 24 87 134
BNOP                 : 85 135
BOREQOP              : 59
BREAK                : 239
CASE                 : 250
CATCH                : 247
CHAR                 : 173
CLASS                : 200
COLON                : 14 191 210 211 250 251
COMMA                : 45 119 159 164 193 221 272 274 279 282 284 287
CONST                : 167
CONTINUE             : 240
DEFAULT              : 251
DELETE               : 69 127
DIVEQOP              : 52 143
DIVOP                : 41 131
DMINUSOP             : 62 96 158
DO                   : 253
DOT                  : 93
DOTSTAR              : 
DOUBLE               : 180
DOUBLEBNOP           : 125
DPLUSOP              : 61 95 157
ELSE                 : 245
EQCOMP               : 26 151
EQUAL                : 50 121 137 188 277 278 279
FLOAT                : 179
FOR                  : 254 255 256 257
GOTO                 : 243
GTCOMP               : 4 30 139
GTECOMP              : 32 154
HASHTAG              : 3
IDENTIFIER           : 124 125 169 170 184 185 186 187 189 190 194 195 196 197 198 199 243
IF                   : 244 245
INCLUDE              : 3
INT                  : 175
LCPAREN              : 202 203 228 229 246 278 279 283 284
LONG                 : 176
LPAREN               : 66 72 73 80 81 90 91 92 100 105 226 244 245 246 252 253 254 255 256 257 280 285
LSHIFT               : 34 147
LSHIFTEQOP           : 56 150
LSPAREN              : 78 79 89 108 109 110 111 114 115
LTCOMP               : 4 29 138
LTECOMP              : 31 153
LTEMPLATE            : 162 270
MINUSEQOP            : 55 141
MINUSOP              : 38 83 129
MODEQOP              : 53 144
MODOP                : 42 132
MULTEQOP             : 51 142
MULTOP               : 40 76 77 86 130
NEQCOMP              : 27 152
NEW                  : 70 71 72 73 126
NOTSYM               : 84 136
NUMBER               : 102 188
OPERATOR             : 
OROP                 : 16 20 156
PLUSEQOP             : 54 140
PLUSOP               : 37 82 128
PRIVATE              : 207
PROTECTED            : 208
PUBLIC               : 209
QUESMARK             : 14
RCPAREN              : 202 203 228 229 246 278 279 283 284
RETURN               : 241 242
RPAREN               : 66 72 73 80 81 90 91 92 100 105 224 225 244 245 246 252 253 254 255 256 257 280 285
RSHIFT               : 35 148
RSHIFTEQOP           : 57 149
RSPAREN              : 78 79 89 108 109 110 111 114 115
RTEMPLATE            : 162 270
SCHAR                : 103
SEMICOLON            : 169 170 214 215 216 217 219 225 239 240 241 242 243 253 254 255 256 257 260 261 263 267 285
SHORT                : 174
SIGNED               : 177
SIZEOF               : 65 66
STRING               : 182
STRING_L             : 4 5 101 285
STRUCT               : 201
SWITCH               : 246
TEMPLATE             : 270
THIS                 : 99
THROW                : 46 47
TRY                  : 247
TYPE                 : 186 187
TYPEDEF              : 169 170
UNSIGNED             : 178
VOID                 : 181
WHILE                : 252 253
XOREQOP              : 145
XOROP                : 22 133
error                : 

Nonterminals, with rules where they appear

AND_expression       : 21 22 24
abstract_declarator  : 107 109 111 122 165 169
access_list          : 205 206
access_specifier     : 198 199 210 211
additive_expression  : 33 34 35 37 38
allocation_expression : 67
arg_list             : 224 225
argument_declaration : 118 119 271 272
argument_declaration_list : 116 119
asm_declaration      : 264
assignment_expression : 43 45 49 277 281 282 286 287
assignment_operator  : 49
base_list            : 191 193
base_spec            : 189
base_specifier       : 192 193
cast_expression      : 39 40 41 42 63 64 69 105
class_define_specifier : 219 267
class_head           : 202 203
class_key            : 184 185 189 190 194 195 198 199
complex_type_specifier : 172
compound_statement   : 227 233 244 245 245 247 247 254 255 256
conditional_expression : 12 14 48
constant_expression  : 108 109 114 250
control_line         : 1 6
control_line_stmt    : 1 2
deallocation_expression : 68
declaration          : 9 10 262 270
declaration_seq      : 8 9
declaration_statement : 237 259
declarator           : 113 114 115 120 121 222 223 224 225 275 276
declarator_list      : 263 274
empty                : 
equality_expression  : 23 24 26 27
exclusive_OR_expression : 19 20 22
expression           : 14 45 46 78 79 89 100 121 241 244 245 246 252 253 254 254 255 256 260
expression_list      : 90 91 280 287
expression_statement : 232 258
fct_body             : 224
for_init_statement   : 254 255 256 257
func_push_scope      : 224 225
function_decl        : 266
function_definition  : 218 265
include_control      : 4 5
inclusive_OR_expression : 17 18 20
init_declarator      : 273 274
initializer          : 275
initializer_list     : 80 278 279 282 283 284
iteration_statement  : 235
jump_statement       : 236
labeled_statement    : 248 249
labeled_statement_list : 246 249
literal              : 98
logical_AND_expression : 15 16 18
logical_OR_expression : 13 14 16
member_access_list   : 204 210 212
member_declaration   : 212 213
member_declarator    : 220 221
member_declarator_list : 214 215 221
member_list          : 202 206
multiplicative_expression : 36 37 38 40 41 42
name                 : 93 94 97 112
new_declarator       : 74 76 78
new_initializer      : 70 72
new_type_name        : 70 71
operator_name        : 
pop_scope            : 224 225 233 244 245 245 246 247 247 252 253 254 255 256 257
postfix_expression   : 60 89 90 91 92 93 94 95 96
primary_expression   : 88
program              : 0
pure_specifier       : 222
push_scope           : 233 244 245 245 246 247 247 252 253 254 255 256 257
relational_expression : 25 26 27 29 30 31 32
selection_statement  : 234
shift_expression     : 28 29 30 31 32 34 35
simple_type_name     : 171
statement            : 230 231 252 253 257
statement_list       : 228 231 250 251
template_arg_list    : 162 164
template_argument_list : 270 272
template_class_name  : 91 185 187 195 197 199
template_declaration : 268
throw_expression     : 44
translation_unit     : 6 7
try_block            : 238
type_name            : 66 72 73 105 163 164
type_specifier       : 167 168
type_specifier_      : 74 75 120 121 122 123 165 166 169 170 214 216 224 225 263
typedef_declarator   : 269
unary1_operator      : 63
unary2_operator      : 64 106 107 113
unary_expression     : 49 61 62 65 104

Parsing method: LALR

state 0

    (0) S' -> . program
    (6) program -> . control_line translation_unit
    (7) program -> . translation_unit
    (1) control_line -> . control_line control_line_stmt
    (2) control_line -> . control_line_stmt
    (8) translation_unit -> . declaration_seq
    (4) control_line_stmt -> . include_control LTCOMP STRING_L GTCOMP
    (5) control_line_stmt -> . include_control STRING_L
    (9) declaration_seq -> . declaration_seq declaration
    (10) declaration_seq -> . declaration
    (3) include_control -> . HASHTAG INCLUDE
    (263) declaration -> . type_specifier_ declarator_list SEMICOLON
    (264) declaration -> . asm_declaration
    (265) declaration -> . function_definition
    (266) declaration -> . function_decl
    (267) declaration -> . class_define_specifier SEMICOLON
    (268) declaration -> . template_declaration
    (269) declaration -> . typedef_declarator
    (167) type_specifier_ -> . CONST type_specifier
    (168) type_specifier_ -> . type_specifier
    (285) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (224) function_definition -> . type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope
    (225) function_decl -> . type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope
    (202) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (203) class_define_specifier -> . class_head LCPAREN RCPAREN
    (270) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (169) typedef_declarator -> . TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON
    (170) typedef_declarator -> . TYPEDEF type_specifier_ IDENTIFIER SEMICOLON
    (171) type_specifier -> . simple_type_name
    (172) type_specifier -> . complex_type_specifier
    (189) class_head -> . class_key IDENTIFIER base_spec
    (190) class_head -> . class_key IDENTIFIER
    (173) simple_type_name -> . CHAR
    (174) simple_type_name -> . SHORT
    (175) simple_type_name -> . INT
    (176) simple_type_name -> . LONG
    (177) simple_type_name -> . SIGNED
    (178) simple_type_name -> . UNSIGNED
    (179) simple_type_name -> . FLOAT
    (180) simple_type_name -> . DOUBLE
    (181) simple_type_name -> . VOID
    (182) simple_type_name -> . STRING
    (183) simple_type_name -> . AUTO
    (184) complex_type_specifier -> . class_key IDENTIFIER
    (185) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (186) complex_type_specifier -> . TYPE IDENTIFIER
    (187) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (200) class_key -> . CLASS
    (201) class_key -> . STRUCT

    HASHTAG         shift and go to state 8
    CONST           shift and go to state 16
    ASM             shift and go to state 18
    TEMPLATE        shift and go to state 20
    TYPEDEF         shift and go to state 21
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38

    program                        shift and go to state 1
    control_line                   shift and go to state 2
    translation_unit               shift and go to state 3
    control_line_stmt              shift and go to state 4
    declaration_seq                shift and go to state 5
    include_control                shift and go to state 6
    declaration                    shift and go to state 7
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    function_decl                  shift and go to state 12
    class_define_specifier         shift and go to state 13
    template_declaration           shift and go to state 14
    typedef_declarator             shift and go to state 15
    type_specifier                 shift and go to state 17
    class_head                     shift and go to state 19
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 24

state 1

    (0) S' -> program .



state 2

    (6) program -> control_line . translation_unit
    (1) control_line -> control_line . control_line_stmt
    (8) translation_unit -> . declaration_seq
    (4) control_line_stmt -> . include_control LTCOMP STRING_L GTCOMP
    (5) control_line_stmt -> . include_control STRING_L
    (9) declaration_seq -> . declaration_seq declaration
    (10) declaration_seq -> . declaration
    (3) include_control -> . HASHTAG INCLUDE
    (263) declaration -> . type_specifier_ declarator_list SEMICOLON
    (264) declaration -> . asm_declaration
    (265) declaration -> . function_definition
    (266) declaration -> . function_decl
    (267) declaration -> . class_define_specifier SEMICOLON
    (268) declaration -> . template_declaration
    (269) declaration -> . typedef_declarator
    (167) type_specifier_ -> . CONST type_specifier
    (168) type_specifier_ -> . type_specifier
    (285) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (224) function_definition -> . type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope
    (225) function_decl -> . type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope
    (202) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (203) class_define_specifier -> . class_head LCPAREN RCPAREN
    (270) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (169) typedef_declarator -> . TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON
    (170) typedef_declarator -> . TYPEDEF type_specifier_ IDENTIFIER SEMICOLON
    (171) type_specifier -> . simple_type_name
    (172) type_specifier -> . complex_type_specifier
    (189) class_head -> . class_key IDENTIFIER base_spec
    (190) class_head -> . class_key IDENTIFIER
    (173) simple_type_name -> . CHAR
    (174) simple_type_name -> . SHORT
    (175) simple_type_name -> . INT
    (176) simple_type_name -> . LONG
    (177) simple_type_name -> . SIGNED
    (178) simple_type_name -> . UNSIGNED
    (179) simple_type_name -> . FLOAT
    (180) simple_type_name -> . DOUBLE
    (181) simple_type_name -> . VOID
    (182) simple_type_name -> . STRING
    (183) simple_type_name -> . AUTO
    (184) complex_type_specifier -> . class_key IDENTIFIER
    (185) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (186) complex_type_specifier -> . TYPE IDENTIFIER
    (187) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (200) class_key -> . CLASS
    (201) class_key -> . STRUCT

    HASHTAG         shift and go to state 8
    CONST           shift and go to state 16
    ASM             shift and go to state 18
    TEMPLATE        shift and go to state 20
    TYPEDEF         shift and go to state 21
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38

    translation_unit               shift and go to state 39
    control_line_stmt              shift and go to state 40
    declaration_seq                shift and go to state 5
    include_control                shift and go to state 6
    declaration                    shift and go to state 7
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    function_decl                  shift and go to state 12
    class_define_specifier         shift and go to state 13
    template_declaration           shift and go to state 14
    typedef_declarator             shift and go to state 15
    type_specifier                 shift and go to state 17
    class_head                     shift and go to state 19
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 24

state 3

    (7) program -> translation_unit .

    $end            reduce using rule 7 (program -> translation_unit .)


state 4

    (2) control_line -> control_line_stmt .

    HASHTAG         reduce using rule 2 (control_line -> control_line_stmt .)
    CONST           reduce using rule 2 (control_line -> control_line_stmt .)
    ASM             reduce using rule 2 (control_line -> control_line_stmt .)
    TEMPLATE        reduce using rule 2 (control_line -> control_line_stmt .)
    TYPEDEF         reduce using rule 2 (control_line -> control_line_stmt .)
    CHAR            reduce using rule 2 (control_line -> control_line_stmt .)
    SHORT           reduce using rule 2 (control_line -> control_line_stmt .)
    INT             reduce using rule 2 (control_line -> control_line_stmt .)
    LONG            reduce using rule 2 (control_line -> control_line_stmt .)
    SIGNED          reduce using rule 2 (control_line -> control_line_stmt .)
    UNSIGNED        reduce using rule 2 (control_line -> control_line_stmt .)
    FLOAT           reduce using rule 2 (control_line -> control_line_stmt .)
    DOUBLE          reduce using rule 2 (control_line -> control_line_stmt .)
    VOID            reduce using rule 2 (control_line -> control_line_stmt .)
    STRING          reduce using rule 2 (control_line -> control_line_stmt .)
    AUTO            reduce using rule 2 (control_line -> control_line_stmt .)
    TYPE            reduce using rule 2 (control_line -> control_line_stmt .)
    CLASS           reduce using rule 2 (control_line -> control_line_stmt .)
    STRUCT          reduce using rule 2 (control_line -> control_line_stmt .)


state 5

    (8) translation_unit -> declaration_seq .
    (9) declaration_seq -> declaration_seq . declaration
    (263) declaration -> . type_specifier_ declarator_list SEMICOLON
    (264) declaration -> . asm_declaration
    (265) declaration -> . function_definition
    (266) declaration -> . function_decl
    (267) declaration -> . class_define_specifier SEMICOLON
    (268) declaration -> . template_declaration
    (269) declaration -> . typedef_declarator
    (167) type_specifier_ -> . CONST type_specifier
    (168) type_specifier_ -> . type_specifier
    (285) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (224) function_definition -> . type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope
    (225) function_decl -> . type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope
    (202) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (203) class_define_specifier -> . class_head LCPAREN RCPAREN
    (270) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (169) typedef_declarator -> . TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON
    (170) typedef_declarator -> . TYPEDEF type_specifier_ IDENTIFIER SEMICOLON
    (171) type_specifier -> . simple_type_name
    (172) type_specifier -> . complex_type_specifier
    (189) class_head -> . class_key IDENTIFIER base_spec
    (190) class_head -> . class_key IDENTIFIER
    (173) simple_type_name -> . CHAR
    (174) simple_type_name -> . SHORT
    (175) simple_type_name -> . INT
    (176) simple_type_name -> . LONG
    (177) simple_type_name -> . SIGNED
    (178) simple_type_name -> . UNSIGNED
    (179) simple_type_name -> . FLOAT
    (180) simple_type_name -> . DOUBLE
    (181) simple_type_name -> . VOID
    (182) simple_type_name -> . STRING
    (183) simple_type_name -> . AUTO
    (184) complex_type_specifier -> . class_key IDENTIFIER
    (185) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (186) complex_type_specifier -> . TYPE IDENTIFIER
    (187) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (200) class_key -> . CLASS
    (201) class_key -> . STRUCT

    $end            reduce using rule 8 (translation_unit -> declaration_seq .)
    CONST           shift and go to state 16
    ASM             shift and go to state 18
    TEMPLATE        shift and go to state 20
    TYPEDEF         shift and go to state 21
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38

    declaration                    shift and go to state 41
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    function_decl                  shift and go to state 12
    class_define_specifier         shift and go to state 13
    template_declaration           shift and go to state 14
    typedef_declarator             shift and go to state 15
    type_specifier                 shift and go to state 17
    class_head                     shift and go to state 19
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 24

state 6

    (4) control_line_stmt -> include_control . LTCOMP STRING_L GTCOMP
    (5) control_line_stmt -> include_control . STRING_L

    LTCOMP          shift and go to state 42
    STRING_L        shift and go to state 43


state 7

    (10) declaration_seq -> declaration .

    CONST           reduce using rule 10 (declaration_seq -> declaration .)
    ASM             reduce using rule 10 (declaration_seq -> declaration .)
    TEMPLATE        reduce using rule 10 (declaration_seq -> declaration .)
    TYPEDEF         reduce using rule 10 (declaration_seq -> declaration .)
    CHAR            reduce using rule 10 (declaration_seq -> declaration .)
    SHORT           reduce using rule 10 (declaration_seq -> declaration .)
    INT             reduce using rule 10 (declaration_seq -> declaration .)
    LONG            reduce using rule 10 (declaration_seq -> declaration .)
    SIGNED          reduce using rule 10 (declaration_seq -> declaration .)
    UNSIGNED        reduce using rule 10 (declaration_seq -> declaration .)
    FLOAT           reduce using rule 10 (declaration_seq -> declaration .)
    DOUBLE          reduce using rule 10 (declaration_seq -> declaration .)
    VOID            reduce using rule 10 (declaration_seq -> declaration .)
    STRING          reduce using rule 10 (declaration_seq -> declaration .)
    AUTO            reduce using rule 10 (declaration_seq -> declaration .)
    TYPE            reduce using rule 10 (declaration_seq -> declaration .)
    CLASS           reduce using rule 10 (declaration_seq -> declaration .)
    STRUCT          reduce using rule 10 (declaration_seq -> declaration .)
    $end            reduce using rule 10 (declaration_seq -> declaration .)


state 8

    (3) include_control -> HASHTAG . INCLUDE

    INCLUDE         shift and go to state 44


state 9

    (263) declaration -> type_specifier_ . declarator_list SEMICOLON
    (224) function_definition -> type_specifier_ . declarator func_push_scope arg_list RPAREN fct_body pop_scope
    (225) function_decl -> type_specifier_ . declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope
    (273) declarator_list -> . init_declarator
    (274) declarator_list -> . declarator_list COMMA init_declarator
    (112) declarator -> . name
    (113) declarator -> . unary2_operator declarator
    (114) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (115) declarator -> . declarator LSPAREN RSPAREN
    (275) init_declarator -> . declarator initializer
    (276) init_declarator -> . declarator
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP

    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53

    declarator_list                shift and go to state 45
    declarator                     shift and go to state 46
    init_declarator                shift and go to state 47
    name                           shift and go to state 48
    unary2_operator                shift and go to state 49

state 10

    (264) declaration -> asm_declaration .

    CONST           reduce using rule 264 (declaration -> asm_declaration .)
    ASM             reduce using rule 264 (declaration -> asm_declaration .)
    TEMPLATE        reduce using rule 264 (declaration -> asm_declaration .)
    TYPEDEF         reduce using rule 264 (declaration -> asm_declaration .)
    CHAR            reduce using rule 264 (declaration -> asm_declaration .)
    SHORT           reduce using rule 264 (declaration -> asm_declaration .)
    INT             reduce using rule 264 (declaration -> asm_declaration .)
    LONG            reduce using rule 264 (declaration -> asm_declaration .)
    SIGNED          reduce using rule 264 (declaration -> asm_declaration .)
    UNSIGNED        reduce using rule 264 (declaration -> asm_declaration .)
    FLOAT           reduce using rule 264 (declaration -> asm_declaration .)
    DOUBLE          reduce using rule 264 (declaration -> asm_declaration .)
    VOID            reduce using rule 264 (declaration -> asm_declaration .)
    STRING          reduce using rule 264 (declaration -> asm_declaration .)
    AUTO            reduce using rule 264 (declaration -> asm_declaration .)
    TYPE            reduce using rule 264 (declaration -> asm_declaration .)
    CLASS           reduce using rule 264 (declaration -> asm_declaration .)
    STRUCT          reduce using rule 264 (declaration -> asm_declaration .)
    $end            reduce using rule 264 (declaration -> asm_declaration .)
    RCPAREN         reduce using rule 264 (declaration -> asm_declaration .)
    SEMICOLON       reduce using rule 264 (declaration -> asm_declaration .)
    IF              reduce using rule 264 (declaration -> asm_declaration .)
    SWITCH          reduce using rule 264 (declaration -> asm_declaration .)
    WHILE           reduce using rule 264 (declaration -> asm_declaration .)
    DO              reduce using rule 264 (declaration -> asm_declaration .)
    FOR             reduce using rule 264 (declaration -> asm_declaration .)
    BREAK           reduce using rule 264 (declaration -> asm_declaration .)
    CONTINUE        reduce using rule 264 (declaration -> asm_declaration .)
    RETURN          reduce using rule 264 (declaration -> asm_declaration .)
    GOTO            reduce using rule 264 (declaration -> asm_declaration .)
    TRY             reduce using rule 264 (declaration -> asm_declaration .)
    THROW           reduce using rule 264 (declaration -> asm_declaration .)
    DPLUSOP         reduce using rule 264 (declaration -> asm_declaration .)
    DMINUSOP        reduce using rule 264 (declaration -> asm_declaration .)
    SIZEOF          reduce using rule 264 (declaration -> asm_declaration .)
    PLUSOP          reduce using rule 264 (declaration -> asm_declaration .)
    MINUSOP         reduce using rule 264 (declaration -> asm_declaration .)
    NOTSYM          reduce using rule 264 (declaration -> asm_declaration .)
    BNOP            reduce using rule 264 (declaration -> asm_declaration .)
    MULTOP          reduce using rule 264 (declaration -> asm_declaration .)
    BANDOP          reduce using rule 264 (declaration -> asm_declaration .)
    NEW             reduce using rule 264 (declaration -> asm_declaration .)
    DELETE          reduce using rule 264 (declaration -> asm_declaration .)
    THIS            reduce using rule 264 (declaration -> asm_declaration .)
    LPAREN          reduce using rule 264 (declaration -> asm_declaration .)
    IDENTIFIER      reduce using rule 264 (declaration -> asm_declaration .)
    DOUBLEBNOP      reduce using rule 264 (declaration -> asm_declaration .)
    STRING_L        reduce using rule 264 (declaration -> asm_declaration .)
    NUMBER          reduce using rule 264 (declaration -> asm_declaration .)
    SCHAR           reduce using rule 264 (declaration -> asm_declaration .)
    LCPAREN         reduce using rule 264 (declaration -> asm_declaration .)
    CASE            reduce using rule 264 (declaration -> asm_declaration .)
    DEFAULT         reduce using rule 264 (declaration -> asm_declaration .)


state 11

    (265) declaration -> function_definition .

    CONST           reduce using rule 265 (declaration -> function_definition .)
    ASM             reduce using rule 265 (declaration -> function_definition .)
    TEMPLATE        reduce using rule 265 (declaration -> function_definition .)
    TYPEDEF         reduce using rule 265 (declaration -> function_definition .)
    CHAR            reduce using rule 265 (declaration -> function_definition .)
    SHORT           reduce using rule 265 (declaration -> function_definition .)
    INT             reduce using rule 265 (declaration -> function_definition .)
    LONG            reduce using rule 265 (declaration -> function_definition .)
    SIGNED          reduce using rule 265 (declaration -> function_definition .)
    UNSIGNED        reduce using rule 265 (declaration -> function_definition .)
    FLOAT           reduce using rule 265 (declaration -> function_definition .)
    DOUBLE          reduce using rule 265 (declaration -> function_definition .)
    VOID            reduce using rule 265 (declaration -> function_definition .)
    STRING          reduce using rule 265 (declaration -> function_definition .)
    AUTO            reduce using rule 265 (declaration -> function_definition .)
    TYPE            reduce using rule 265 (declaration -> function_definition .)
    CLASS           reduce using rule 265 (declaration -> function_definition .)
    STRUCT          reduce using rule 265 (declaration -> function_definition .)
    $end            reduce using rule 265 (declaration -> function_definition .)
    RCPAREN         reduce using rule 265 (declaration -> function_definition .)
    SEMICOLON       reduce using rule 265 (declaration -> function_definition .)
    IF              reduce using rule 265 (declaration -> function_definition .)
    SWITCH          reduce using rule 265 (declaration -> function_definition .)
    WHILE           reduce using rule 265 (declaration -> function_definition .)
    DO              reduce using rule 265 (declaration -> function_definition .)
    FOR             reduce using rule 265 (declaration -> function_definition .)
    BREAK           reduce using rule 265 (declaration -> function_definition .)
    CONTINUE        reduce using rule 265 (declaration -> function_definition .)
    RETURN          reduce using rule 265 (declaration -> function_definition .)
    GOTO            reduce using rule 265 (declaration -> function_definition .)
    TRY             reduce using rule 265 (declaration -> function_definition .)
    THROW           reduce using rule 265 (declaration -> function_definition .)
    DPLUSOP         reduce using rule 265 (declaration -> function_definition .)
    DMINUSOP        reduce using rule 265 (declaration -> function_definition .)
    SIZEOF          reduce using rule 265 (declaration -> function_definition .)
    PLUSOP          reduce using rule 265 (declaration -> function_definition .)
    MINUSOP         reduce using rule 265 (declaration -> function_definition .)
    NOTSYM          reduce using rule 265 (declaration -> function_definition .)
    BNOP            reduce using rule 265 (declaration -> function_definition .)
    MULTOP          reduce using rule 265 (declaration -> function_definition .)
    BANDOP          reduce using rule 265 (declaration -> function_definition .)
    NEW             reduce using rule 265 (declaration -> function_definition .)
    DELETE          reduce using rule 265 (declaration -> function_definition .)
    THIS            reduce using rule 265 (declaration -> function_definition .)
    LPAREN          reduce using rule 265 (declaration -> function_definition .)
    IDENTIFIER      reduce using rule 265 (declaration -> function_definition .)
    DOUBLEBNOP      reduce using rule 265 (declaration -> function_definition .)
    STRING_L        reduce using rule 265 (declaration -> function_definition .)
    NUMBER          reduce using rule 265 (declaration -> function_definition .)
    SCHAR           reduce using rule 265 (declaration -> function_definition .)
    LCPAREN         reduce using rule 265 (declaration -> function_definition .)
    CASE            reduce using rule 265 (declaration -> function_definition .)
    DEFAULT         reduce using rule 265 (declaration -> function_definition .)


state 12

    (266) declaration -> function_decl .

    CONST           reduce using rule 266 (declaration -> function_decl .)
    ASM             reduce using rule 266 (declaration -> function_decl .)
    TEMPLATE        reduce using rule 266 (declaration -> function_decl .)
    TYPEDEF         reduce using rule 266 (declaration -> function_decl .)
    CHAR            reduce using rule 266 (declaration -> function_decl .)
    SHORT           reduce using rule 266 (declaration -> function_decl .)
    INT             reduce using rule 266 (declaration -> function_decl .)
    LONG            reduce using rule 266 (declaration -> function_decl .)
    SIGNED          reduce using rule 266 (declaration -> function_decl .)
    UNSIGNED        reduce using rule 266 (declaration -> function_decl .)
    FLOAT           reduce using rule 266 (declaration -> function_decl .)
    DOUBLE          reduce using rule 266 (declaration -> function_decl .)
    VOID            reduce using rule 266 (declaration -> function_decl .)
    STRING          reduce using rule 266 (declaration -> function_decl .)
    AUTO            reduce using rule 266 (declaration -> function_decl .)
    TYPE            reduce using rule 266 (declaration -> function_decl .)
    CLASS           reduce using rule 266 (declaration -> function_decl .)
    STRUCT          reduce using rule 266 (declaration -> function_decl .)
    $end            reduce using rule 266 (declaration -> function_decl .)
    RCPAREN         reduce using rule 266 (declaration -> function_decl .)
    SEMICOLON       reduce using rule 266 (declaration -> function_decl .)
    IF              reduce using rule 266 (declaration -> function_decl .)
    SWITCH          reduce using rule 266 (declaration -> function_decl .)
    WHILE           reduce using rule 266 (declaration -> function_decl .)
    DO              reduce using rule 266 (declaration -> function_decl .)
    FOR             reduce using rule 266 (declaration -> function_decl .)
    BREAK           reduce using rule 266 (declaration -> function_decl .)
    CONTINUE        reduce using rule 266 (declaration -> function_decl .)
    RETURN          reduce using rule 266 (declaration -> function_decl .)
    GOTO            reduce using rule 266 (declaration -> function_decl .)
    TRY             reduce using rule 266 (declaration -> function_decl .)
    THROW           reduce using rule 266 (declaration -> function_decl .)
    DPLUSOP         reduce using rule 266 (declaration -> function_decl .)
    DMINUSOP        reduce using rule 266 (declaration -> function_decl .)
    SIZEOF          reduce using rule 266 (declaration -> function_decl .)
    PLUSOP          reduce using rule 266 (declaration -> function_decl .)
    MINUSOP         reduce using rule 266 (declaration -> function_decl .)
    NOTSYM          reduce using rule 266 (declaration -> function_decl .)
    BNOP            reduce using rule 266 (declaration -> function_decl .)
    MULTOP          reduce using rule 266 (declaration -> function_decl .)
    BANDOP          reduce using rule 266 (declaration -> function_decl .)
    NEW             reduce using rule 266 (declaration -> function_decl .)
    DELETE          reduce using rule 266 (declaration -> function_decl .)
    THIS            reduce using rule 266 (declaration -> function_decl .)
    LPAREN          reduce using rule 266 (declaration -> function_decl .)
    IDENTIFIER      reduce using rule 266 (declaration -> function_decl .)
    DOUBLEBNOP      reduce using rule 266 (declaration -> function_decl .)
    STRING_L        reduce using rule 266 (declaration -> function_decl .)
    NUMBER          reduce using rule 266 (declaration -> function_decl .)
    SCHAR           reduce using rule 266 (declaration -> function_decl .)
    LCPAREN         reduce using rule 266 (declaration -> function_decl .)
    CASE            reduce using rule 266 (declaration -> function_decl .)
    DEFAULT         reduce using rule 266 (declaration -> function_decl .)


state 13

    (267) declaration -> class_define_specifier . SEMICOLON

    SEMICOLON       shift and go to state 54


state 14

    (268) declaration -> template_declaration .

    CONST           reduce using rule 268 (declaration -> template_declaration .)
    ASM             reduce using rule 268 (declaration -> template_declaration .)
    TEMPLATE        reduce using rule 268 (declaration -> template_declaration .)
    TYPEDEF         reduce using rule 268 (declaration -> template_declaration .)
    CHAR            reduce using rule 268 (declaration -> template_declaration .)
    SHORT           reduce using rule 268 (declaration -> template_declaration .)
    INT             reduce using rule 268 (declaration -> template_declaration .)
    LONG            reduce using rule 268 (declaration -> template_declaration .)
    SIGNED          reduce using rule 268 (declaration -> template_declaration .)
    UNSIGNED        reduce using rule 268 (declaration -> template_declaration .)
    FLOAT           reduce using rule 268 (declaration -> template_declaration .)
    DOUBLE          reduce using rule 268 (declaration -> template_declaration .)
    VOID            reduce using rule 268 (declaration -> template_declaration .)
    STRING          reduce using rule 268 (declaration -> template_declaration .)
    AUTO            reduce using rule 268 (declaration -> template_declaration .)
    TYPE            reduce using rule 268 (declaration -> template_declaration .)
    CLASS           reduce using rule 268 (declaration -> template_declaration .)
    STRUCT          reduce using rule 268 (declaration -> template_declaration .)
    $end            reduce using rule 268 (declaration -> template_declaration .)
    RCPAREN         reduce using rule 268 (declaration -> template_declaration .)
    SEMICOLON       reduce using rule 268 (declaration -> template_declaration .)
    IF              reduce using rule 268 (declaration -> template_declaration .)
    SWITCH          reduce using rule 268 (declaration -> template_declaration .)
    WHILE           reduce using rule 268 (declaration -> template_declaration .)
    DO              reduce using rule 268 (declaration -> template_declaration .)
    FOR             reduce using rule 268 (declaration -> template_declaration .)
    BREAK           reduce using rule 268 (declaration -> template_declaration .)
    CONTINUE        reduce using rule 268 (declaration -> template_declaration .)
    RETURN          reduce using rule 268 (declaration -> template_declaration .)
    GOTO            reduce using rule 268 (declaration -> template_declaration .)
    TRY             reduce using rule 268 (declaration -> template_declaration .)
    THROW           reduce using rule 268 (declaration -> template_declaration .)
    DPLUSOP         reduce using rule 268 (declaration -> template_declaration .)
    DMINUSOP        reduce using rule 268 (declaration -> template_declaration .)
    SIZEOF          reduce using rule 268 (declaration -> template_declaration .)
    PLUSOP          reduce using rule 268 (declaration -> template_declaration .)
    MINUSOP         reduce using rule 268 (declaration -> template_declaration .)
    NOTSYM          reduce using rule 268 (declaration -> template_declaration .)
    BNOP            reduce using rule 268 (declaration -> template_declaration .)
    MULTOP          reduce using rule 268 (declaration -> template_declaration .)
    BANDOP          reduce using rule 268 (declaration -> template_declaration .)
    NEW             reduce using rule 268 (declaration -> template_declaration .)
    DELETE          reduce using rule 268 (declaration -> template_declaration .)
    THIS            reduce using rule 268 (declaration -> template_declaration .)
    LPAREN          reduce using rule 268 (declaration -> template_declaration .)
    IDENTIFIER      reduce using rule 268 (declaration -> template_declaration .)
    DOUBLEBNOP      reduce using rule 268 (declaration -> template_declaration .)
    STRING_L        reduce using rule 268 (declaration -> template_declaration .)
    NUMBER          reduce using rule 268 (declaration -> template_declaration .)
    SCHAR           reduce using rule 268 (declaration -> template_declaration .)
    LCPAREN         reduce using rule 268 (declaration -> template_declaration .)
    CASE            reduce using rule 268 (declaration -> template_declaration .)
    DEFAULT         reduce using rule 268 (declaration -> template_declaration .)


state 15

    (269) declaration -> typedef_declarator .

    CONST           reduce using rule 269 (declaration -> typedef_declarator .)
    ASM             reduce using rule 269 (declaration -> typedef_declarator .)
    TEMPLATE        reduce using rule 269 (declaration -> typedef_declarator .)
    TYPEDEF         reduce using rule 269 (declaration -> typedef_declarator .)
    CHAR            reduce using rule 269 (declaration -> typedef_declarator .)
    SHORT           reduce using rule 269 (declaration -> typedef_declarator .)
    INT             reduce using rule 269 (declaration -> typedef_declarator .)
    LONG            reduce using rule 269 (declaration -> typedef_declarator .)
    SIGNED          reduce using rule 269 (declaration -> typedef_declarator .)
    UNSIGNED        reduce using rule 269 (declaration -> typedef_declarator .)
    FLOAT           reduce using rule 269 (declaration -> typedef_declarator .)
    DOUBLE          reduce using rule 269 (declaration -> typedef_declarator .)
    VOID            reduce using rule 269 (declaration -> typedef_declarator .)
    STRING          reduce using rule 269 (declaration -> typedef_declarator .)
    AUTO            reduce using rule 269 (declaration -> typedef_declarator .)
    TYPE            reduce using rule 269 (declaration -> typedef_declarator .)
    CLASS           reduce using rule 269 (declaration -> typedef_declarator .)
    STRUCT          reduce using rule 269 (declaration -> typedef_declarator .)
    $end            reduce using rule 269 (declaration -> typedef_declarator .)
    RCPAREN         reduce using rule 269 (declaration -> typedef_declarator .)
    SEMICOLON       reduce using rule 269 (declaration -> typedef_declarator .)
    IF              reduce using rule 269 (declaration -> typedef_declarator .)
    SWITCH          reduce using rule 269 (declaration -> typedef_declarator .)
    WHILE           reduce using rule 269 (declaration -> typedef_declarator .)
    DO              reduce using rule 269 (declaration -> typedef_declarator .)
    FOR             reduce using rule 269 (declaration -> typedef_declarator .)
    BREAK           reduce using rule 269 (declaration -> typedef_declarator .)
    CONTINUE        reduce using rule 269 (declaration -> typedef_declarator .)
    RETURN          reduce using rule 269 (declaration -> typedef_declarator .)
    GOTO            reduce using rule 269 (declaration -> typedef_declarator .)
    TRY             reduce using rule 269 (declaration -> typedef_declarator .)
    THROW           reduce using rule 269 (declaration -> typedef_declarator .)
    DPLUSOP         reduce using rule 269 (declaration -> typedef_declarator .)
    DMINUSOP        reduce using rule 269 (declaration -> typedef_declarator .)
    SIZEOF          reduce using rule 269 (declaration -> typedef_declarator .)
    PLUSOP          reduce using rule 269 (declaration -> typedef_declarator .)
    MINUSOP         reduce using rule 269 (declaration -> typedef_declarator .)
    NOTSYM          reduce using rule 269 (declaration -> typedef_declarator .)
    BNOP            reduce using rule 269 (declaration -> typedef_declarator .)
    MULTOP          reduce using rule 269 (declaration -> typedef_declarator .)
    BANDOP          reduce using rule 269 (declaration -> typedef_declarator .)
    NEW             reduce using rule 269 (declaration -> typedef_declarator .)
    DELETE          reduce using rule 269 (declaration -> typedef_declarator .)
    THIS            reduce using rule 269 (declaration -> typedef_declarator .)
    LPAREN          reduce using rule 269 (declaration -> typedef_declarator .)
    IDENTIFIER      reduce using rule 269 (declaration -> typedef_declarator .)
    DOUBLEBNOP      reduce using rule 269 (declaration -> typedef_declarator .)
    STRING_L        reduce using rule 269 (declaration -> typedef_declarator .)
    NUMBER          reduce using rule 269 (declaration -> typedef_declarator .)
    SCHAR           reduce using rule 269 (declaration -> typedef_declarator .)
    LCPAREN         reduce using rule 269 (declaration -> typedef_declarator .)
    CASE            reduce using rule 269 (declaration -> typedef_declarator .)
    DEFAULT         reduce using rule 269 (declaration -> typedef_declarator .)


state 16

    (167) type_specifier_ -> CONST . type_specifier
    (171) type_specifier -> . simple_type_name
    (172) type_specifier -> . complex_type_specifier
    (173) simple_type_name -> . CHAR
    (174) simple_type_name -> . SHORT
    (175) simple_type_name -> . INT
    (176) simple_type_name -> . LONG
    (177) simple_type_name -> . SIGNED
    (178) simple_type_name -> . UNSIGNED
    (179) simple_type_name -> . FLOAT
    (180) simple_type_name -> . DOUBLE
    (181) simple_type_name -> . VOID
    (182) simple_type_name -> . STRING
    (183) simple_type_name -> . AUTO
    (184) complex_type_specifier -> . class_key IDENTIFIER
    (185) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (186) complex_type_specifier -> . TYPE IDENTIFIER
    (187) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (200) class_key -> . CLASS
    (201) class_key -> . STRUCT

    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38

    type_specifier                 shift and go to state 55
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 56

state 17

    (168) type_specifier_ -> type_specifier .

    IDENTIFIER      reduce using rule 168 (type_specifier_ -> type_specifier .)
    DOUBLEBNOP      reduce using rule 168 (type_specifier_ -> type_specifier .)
    MULTOP          reduce using rule 168 (type_specifier_ -> type_specifier .)
    BANDOP          reduce using rule 168 (type_specifier_ -> type_specifier .)
    LSPAREN         reduce using rule 168 (type_specifier_ -> type_specifier .)
    SEMICOLON       reduce using rule 168 (type_specifier_ -> type_specifier .)
    RTEMPLATE       reduce using rule 168 (type_specifier_ -> type_specifier .)
    COMMA           reduce using rule 168 (type_specifier_ -> type_specifier .)
    RPAREN          reduce using rule 168 (type_specifier_ -> type_specifier .)
    LPAREN          reduce using rule 168 (type_specifier_ -> type_specifier .)
    DIVOP           reduce using rule 168 (type_specifier_ -> type_specifier .)
    MODOP           reduce using rule 168 (type_specifier_ -> type_specifier .)
    PLUSOP          reduce using rule 168 (type_specifier_ -> type_specifier .)
    MINUSOP         reduce using rule 168 (type_specifier_ -> type_specifier .)
    LSHIFT          reduce using rule 168 (type_specifier_ -> type_specifier .)
    RSHIFT          reduce using rule 168 (type_specifier_ -> type_specifier .)
    LTCOMP          reduce using rule 168 (type_specifier_ -> type_specifier .)
    GTCOMP          reduce using rule 168 (type_specifier_ -> type_specifier .)
    LTECOMP         reduce using rule 168 (type_specifier_ -> type_specifier .)
    GTECOMP         reduce using rule 168 (type_specifier_ -> type_specifier .)
    EQCOMP          reduce using rule 168 (type_specifier_ -> type_specifier .)
    NEQCOMP         reduce using rule 168 (type_specifier_ -> type_specifier .)
    XOROP           reduce using rule 168 (type_specifier_ -> type_specifier .)
    OROP            reduce using rule 168 (type_specifier_ -> type_specifier .)
    ANDOP           reduce using rule 168 (type_specifier_ -> type_specifier .)
    QUESMARK        reduce using rule 168 (type_specifier_ -> type_specifier .)
    RSPAREN         reduce using rule 168 (type_specifier_ -> type_specifier .)
    EQUAL           reduce using rule 168 (type_specifier_ -> type_specifier .)
    MULTEQOP        reduce using rule 168 (type_specifier_ -> type_specifier .)
    DIVEQOP         reduce using rule 168 (type_specifier_ -> type_specifier .)
    MODEQOP         reduce using rule 168 (type_specifier_ -> type_specifier .)
    PLUSEQOP        reduce using rule 168 (type_specifier_ -> type_specifier .)
    MINUSEQOP       reduce using rule 168 (type_specifier_ -> type_specifier .)
    LSHIFTEQOP      reduce using rule 168 (type_specifier_ -> type_specifier .)
    RSHIFTEQOP      reduce using rule 168 (type_specifier_ -> type_specifier .)
    BANDEQOP        reduce using rule 168 (type_specifier_ -> type_specifier .)
    BOREQOP         reduce using rule 168 (type_specifier_ -> type_specifier .)
    RCPAREN         reduce using rule 168 (type_specifier_ -> type_specifier .)
    COLON           reduce using rule 168 (type_specifier_ -> type_specifier .)


state 18

    (285) asm_declaration -> ASM . LPAREN STRING_L RPAREN SEMICOLON

    LPAREN          shift and go to state 57


state 19

    (202) class_define_specifier -> class_head . LCPAREN member_list RCPAREN
    (203) class_define_specifier -> class_head . LCPAREN RCPAREN

    LCPAREN         shift and go to state 58


state 20

    (270) template_declaration -> TEMPLATE . LTEMPLATE template_argument_list RTEMPLATE declaration

    LTEMPLATE       shift and go to state 59


state 21

    (169) typedef_declarator -> TYPEDEF . type_specifier_ abstract_declarator IDENTIFIER SEMICOLON
    (170) typedef_declarator -> TYPEDEF . type_specifier_ IDENTIFIER SEMICOLON
    (167) type_specifier_ -> . CONST type_specifier
    (168) type_specifier_ -> . type_specifier
    (171) type_specifier -> . simple_type_name
    (172) type_specifier -> . complex_type_specifier
    (173) simple_type_name -> . CHAR
    (174) simple_type_name -> . SHORT
    (175) simple_type_name -> . INT
    (176) simple_type_name -> . LONG
    (177) simple_type_name -> . SIGNED
    (178) simple_type_name -> . UNSIGNED
    (179) simple_type_name -> . FLOAT
    (180) simple_type_name -> . DOUBLE
    (181) simple_type_name -> . VOID
    (182) simple_type_name -> . STRING
    (183) simple_type_name -> . AUTO
    (184) complex_type_specifier -> . class_key IDENTIFIER
    (185) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (186) complex_type_specifier -> . TYPE IDENTIFIER
    (187) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (200) class_key -> . CLASS
    (201) class_key -> . STRUCT

    CONST           shift and go to state 16
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38

    type_specifier_                shift and go to state 60
    type_specifier                 shift and go to state 17
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 56

state 22

    (171) type_specifier -> simple_type_name .

    IDENTIFIER      reduce using rule 171 (type_specifier -> simple_type_name .)
    DOUBLEBNOP      reduce using rule 171 (type_specifier -> simple_type_name .)
    MULTOP          reduce using rule 171 (type_specifier -> simple_type_name .)
    BANDOP          reduce using rule 171 (type_specifier -> simple_type_name .)
    LSPAREN         reduce using rule 171 (type_specifier -> simple_type_name .)
    SEMICOLON       reduce using rule 171 (type_specifier -> simple_type_name .)
    RTEMPLATE       reduce using rule 171 (type_specifier -> simple_type_name .)
    COMMA           reduce using rule 171 (type_specifier -> simple_type_name .)
    RPAREN          reduce using rule 171 (type_specifier -> simple_type_name .)
    LPAREN          reduce using rule 171 (type_specifier -> simple_type_name .)
    DIVOP           reduce using rule 171 (type_specifier -> simple_type_name .)
    MODOP           reduce using rule 171 (type_specifier -> simple_type_name .)
    PLUSOP          reduce using rule 171 (type_specifier -> simple_type_name .)
    MINUSOP         reduce using rule 171 (type_specifier -> simple_type_name .)
    LSHIFT          reduce using rule 171 (type_specifier -> simple_type_name .)
    RSHIFT          reduce using rule 171 (type_specifier -> simple_type_name .)
    LTCOMP          reduce using rule 171 (type_specifier -> simple_type_name .)
    GTCOMP          reduce using rule 171 (type_specifier -> simple_type_name .)
    LTECOMP         reduce using rule 171 (type_specifier -> simple_type_name .)
    GTECOMP         reduce using rule 171 (type_specifier -> simple_type_name .)
    EQCOMP          reduce using rule 171 (type_specifier -> simple_type_name .)
    NEQCOMP         reduce using rule 171 (type_specifier -> simple_type_name .)
    XOROP           reduce using rule 171 (type_specifier -> simple_type_name .)
    OROP            reduce using rule 171 (type_specifier -> simple_type_name .)
    ANDOP           reduce using rule 171 (type_specifier -> simple_type_name .)
    QUESMARK        reduce using rule 171 (type_specifier -> simple_type_name .)
    RSPAREN         reduce using rule 171 (type_specifier -> simple_type_name .)
    EQUAL           reduce using rule 171 (type_specifier -> simple_type_name .)
    MULTEQOP        reduce using rule 171 (type_specifier -> simple_type_name .)
    DIVEQOP         reduce using rule 171 (type_specifier -> simple_type_name .)
    MODEQOP         reduce using rule 171 (type_specifier -> simple_type_name .)
    PLUSEQOP        reduce using rule 171 (type_specifier -> simple_type_name .)
    MINUSEQOP       reduce using rule 171 (type_specifier -> simple_type_name .)
    LSHIFTEQOP      reduce using rule 171 (type_specifier -> simple_type_name .)
    RSHIFTEQOP      reduce using rule 171 (type_specifier -> simple_type_name .)
    BANDEQOP        reduce using rule 171 (type_specifier -> simple_type_name .)
    BOREQOP         reduce using rule 171 (type_specifier -> simple_type_name .)
    RCPAREN         reduce using rule 171 (type_specifier -> simple_type_name .)
    COLON           reduce using rule 171 (type_specifier -> simple_type_name .)


state 23

    (172) type_specifier -> complex_type_specifier .

    IDENTIFIER      reduce using rule 172 (type_specifier -> complex_type_specifier .)
    DOUBLEBNOP      reduce using rule 172 (type_specifier -> complex_type_specifier .)
    MULTOP          reduce using rule 172 (type_specifier -> complex_type_specifier .)
    BANDOP          reduce using rule 172 (type_specifier -> complex_type_specifier .)
    LSPAREN         reduce using rule 172 (type_specifier -> complex_type_specifier .)
    SEMICOLON       reduce using rule 172 (type_specifier -> complex_type_specifier .)
    RTEMPLATE       reduce using rule 172 (type_specifier -> complex_type_specifier .)
    COMMA           reduce using rule 172 (type_specifier -> complex_type_specifier .)
    RPAREN          reduce using rule 172 (type_specifier -> complex_type_specifier .)
    LPAREN          reduce using rule 172 (type_specifier -> complex_type_specifier .)
    DIVOP           reduce using rule 172 (type_specifier -> complex_type_specifier .)
    MODOP           reduce using rule 172 (type_specifier -> complex_type_specifier .)
    PLUSOP          reduce using rule 172 (type_specifier -> complex_type_specifier .)
    MINUSOP         reduce using rule 172 (type_specifier -> complex_type_specifier .)
    LSHIFT          reduce using rule 172 (type_specifier -> complex_type_specifier .)
    RSHIFT          reduce using rule 172 (type_specifier -> complex_type_specifier .)
    LTCOMP          reduce using rule 172 (type_specifier -> complex_type_specifier .)
    GTCOMP          reduce using rule 172 (type_specifier -> complex_type_specifier .)
    LTECOMP         reduce using rule 172 (type_specifier -> complex_type_specifier .)
    GTECOMP         reduce using rule 172 (type_specifier -> complex_type_specifier .)
    EQCOMP          reduce using rule 172 (type_specifier -> complex_type_specifier .)
    NEQCOMP         reduce using rule 172 (type_specifier -> complex_type_specifier .)
    XOROP           reduce using rule 172 (type_specifier -> complex_type_specifier .)
    OROP            reduce using rule 172 (type_specifier -> complex_type_specifier .)
    ANDOP           reduce using rule 172 (type_specifier -> complex_type_specifier .)
    QUESMARK        reduce using rule 172 (type_specifier -> complex_type_specifier .)
    RSPAREN         reduce using rule 172 (type_specifier -> complex_type_specifier .)
    EQUAL           reduce using rule 172 (type_specifier -> complex_type_specifier .)
    MULTEQOP        reduce using rule 172 (type_specifier -> complex_type_specifier .)
    DIVEQOP         reduce using rule 172 (type_specifier -> complex_type_specifier .)
    MODEQOP         reduce using rule 172 (type_specifier -> complex_type_specifier .)
    PLUSEQOP        reduce using rule 172 (type_specifier -> complex_type_specifier .)
    MINUSEQOP       reduce using rule 172 (type_specifier -> complex_type_specifier .)
    LSHIFTEQOP      reduce using rule 172 (type_specifier -> complex_type_specifier .)
    RSHIFTEQOP      reduce using rule 172 (type_specifier -> complex_type_specifier .)
    BANDEQOP        reduce using rule 172 (type_specifier -> complex_type_specifier .)
    BOREQOP         reduce using rule 172 (type_specifier -> complex_type_specifier .)
    RCPAREN         reduce using rule 172 (type_specifier -> complex_type_specifier .)
    COLON           reduce using rule 172 (type_specifier -> complex_type_specifier .)


state 24

    (189) class_head -> class_key . IDENTIFIER base_spec
    (190) class_head -> class_key . IDENTIFIER
    (184) complex_type_specifier -> class_key . IDENTIFIER
    (185) complex_type_specifier -> class_key . IDENTIFIER template_class_name

    IDENTIFIER      shift and go to state 61


state 25

    (173) simple_type_name -> CHAR .

    IDENTIFIER      reduce using rule 173 (simple_type_name -> CHAR .)
    DOUBLEBNOP      reduce using rule 173 (simple_type_name -> CHAR .)
    MULTOP          reduce using rule 173 (simple_type_name -> CHAR .)
    BANDOP          reduce using rule 173 (simple_type_name -> CHAR .)
    LSPAREN         reduce using rule 173 (simple_type_name -> CHAR .)
    SEMICOLON       reduce using rule 173 (simple_type_name -> CHAR .)
    RTEMPLATE       reduce using rule 173 (simple_type_name -> CHAR .)
    COMMA           reduce using rule 173 (simple_type_name -> CHAR .)
    RPAREN          reduce using rule 173 (simple_type_name -> CHAR .)
    LPAREN          reduce using rule 173 (simple_type_name -> CHAR .)
    DIVOP           reduce using rule 173 (simple_type_name -> CHAR .)
    MODOP           reduce using rule 173 (simple_type_name -> CHAR .)
    PLUSOP          reduce using rule 173 (simple_type_name -> CHAR .)
    MINUSOP         reduce using rule 173 (simple_type_name -> CHAR .)
    LSHIFT          reduce using rule 173 (simple_type_name -> CHAR .)
    RSHIFT          reduce using rule 173 (simple_type_name -> CHAR .)
    LTCOMP          reduce using rule 173 (simple_type_name -> CHAR .)
    GTCOMP          reduce using rule 173 (simple_type_name -> CHAR .)
    LTECOMP         reduce using rule 173 (simple_type_name -> CHAR .)
    GTECOMP         reduce using rule 173 (simple_type_name -> CHAR .)
    EQCOMP          reduce using rule 173 (simple_type_name -> CHAR .)
    NEQCOMP         reduce using rule 173 (simple_type_name -> CHAR .)
    XOROP           reduce using rule 173 (simple_type_name -> CHAR .)
    OROP            reduce using rule 173 (simple_type_name -> CHAR .)
    ANDOP           reduce using rule 173 (simple_type_name -> CHAR .)
    QUESMARK        reduce using rule 173 (simple_type_name -> CHAR .)
    RSPAREN         reduce using rule 173 (simple_type_name -> CHAR .)
    EQUAL           reduce using rule 173 (simple_type_name -> CHAR .)
    MULTEQOP        reduce using rule 173 (simple_type_name -> CHAR .)
    DIVEQOP         reduce using rule 173 (simple_type_name -> CHAR .)
    MODEQOP         reduce using rule 173 (simple_type_name -> CHAR .)
    PLUSEQOP        reduce using rule 173 (simple_type_name -> CHAR .)
    MINUSEQOP       reduce using rule 173 (simple_type_name -> CHAR .)
    LSHIFTEQOP      reduce using rule 173 (simple_type_name -> CHAR .)
    RSHIFTEQOP      reduce using rule 173 (simple_type_name -> CHAR .)
    BANDEQOP        reduce using rule 173 (simple_type_name -> CHAR .)
    BOREQOP         reduce using rule 173 (simple_type_name -> CHAR .)
    RCPAREN         reduce using rule 173 (simple_type_name -> CHAR .)
    COLON           reduce using rule 173 (simple_type_name -> CHAR .)


state 26

    (174) simple_type_name -> SHORT .

    IDENTIFIER      reduce using rule 174 (simple_type_name -> SHORT .)
    DOUBLEBNOP      reduce using rule 174 (simple_type_name -> SHORT .)
    MULTOP          reduce using rule 174 (simple_type_name -> SHORT .)
    BANDOP          reduce using rule 174 (simple_type_name -> SHORT .)
    LSPAREN         reduce using rule 174 (simple_type_name -> SHORT .)
    SEMICOLON       reduce using rule 174 (simple_type_name -> SHORT .)
    RTEMPLATE       reduce using rule 174 (simple_type_name -> SHORT .)
    COMMA           reduce using rule 174 (simple_type_name -> SHORT .)
    RPAREN          reduce using rule 174 (simple_type_name -> SHORT .)
    LPAREN          reduce using rule 174 (simple_type_name -> SHORT .)
    DIVOP           reduce using rule 174 (simple_type_name -> SHORT .)
    MODOP           reduce using rule 174 (simple_type_name -> SHORT .)
    PLUSOP          reduce using rule 174 (simple_type_name -> SHORT .)
    MINUSOP         reduce using rule 174 (simple_type_name -> SHORT .)
    LSHIFT          reduce using rule 174 (simple_type_name -> SHORT .)
    RSHIFT          reduce using rule 174 (simple_type_name -> SHORT .)
    LTCOMP          reduce using rule 174 (simple_type_name -> SHORT .)
    GTCOMP          reduce using rule 174 (simple_type_name -> SHORT .)
    LTECOMP         reduce using rule 174 (simple_type_name -> SHORT .)
    GTECOMP         reduce using rule 174 (simple_type_name -> SHORT .)
    EQCOMP          reduce using rule 174 (simple_type_name -> SHORT .)
    NEQCOMP         reduce using rule 174 (simple_type_name -> SHORT .)
    XOROP           reduce using rule 174 (simple_type_name -> SHORT .)
    OROP            reduce using rule 174 (simple_type_name -> SHORT .)
    ANDOP           reduce using rule 174 (simple_type_name -> SHORT .)
    QUESMARK        reduce using rule 174 (simple_type_name -> SHORT .)
    RSPAREN         reduce using rule 174 (simple_type_name -> SHORT .)
    EQUAL           reduce using rule 174 (simple_type_name -> SHORT .)
    MULTEQOP        reduce using rule 174 (simple_type_name -> SHORT .)
    DIVEQOP         reduce using rule 174 (simple_type_name -> SHORT .)
    MODEQOP         reduce using rule 174 (simple_type_name -> SHORT .)
    PLUSEQOP        reduce using rule 174 (simple_type_name -> SHORT .)
    MINUSEQOP       reduce using rule 174 (simple_type_name -> SHORT .)
    LSHIFTEQOP      reduce using rule 174 (simple_type_name -> SHORT .)
    RSHIFTEQOP      reduce using rule 174 (simple_type_name -> SHORT .)
    BANDEQOP        reduce using rule 174 (simple_type_name -> SHORT .)
    BOREQOP         reduce using rule 174 (simple_type_name -> SHORT .)
    RCPAREN         reduce using rule 174 (simple_type_name -> SHORT .)
    COLON           reduce using rule 174 (simple_type_name -> SHORT .)


state 27

    (175) simple_type_name -> INT .

    IDENTIFIER      reduce using rule 175 (simple_type_name -> INT .)
    DOUBLEBNOP      reduce using rule 175 (simple_type_name -> INT .)
    MULTOP          reduce using rule 175 (simple_type_name -> INT .)
    BANDOP          reduce using rule 175 (simple_type_name -> INT .)
    LSPAREN         reduce using rule 175 (simple_type_name -> INT .)
    SEMICOLON       reduce using rule 175 (simple_type_name -> INT .)
    RTEMPLATE       reduce using rule 175 (simple_type_name -> INT .)
    COMMA           reduce using rule 175 (simple_type_name -> INT .)
    RPAREN          reduce using rule 175 (simple_type_name -> INT .)
    LPAREN          reduce using rule 175 (simple_type_name -> INT .)
    DIVOP           reduce using rule 175 (simple_type_name -> INT .)
    MODOP           reduce using rule 175 (simple_type_name -> INT .)
    PLUSOP          reduce using rule 175 (simple_type_name -> INT .)
    MINUSOP         reduce using rule 175 (simple_type_name -> INT .)
    LSHIFT          reduce using rule 175 (simple_type_name -> INT .)
    RSHIFT          reduce using rule 175 (simple_type_name -> INT .)
    LTCOMP          reduce using rule 175 (simple_type_name -> INT .)
    GTCOMP          reduce using rule 175 (simple_type_name -> INT .)
    LTECOMP         reduce using rule 175 (simple_type_name -> INT .)
    GTECOMP         reduce using rule 175 (simple_type_name -> INT .)
    EQCOMP          reduce using rule 175 (simple_type_name -> INT .)
    NEQCOMP         reduce using rule 175 (simple_type_name -> INT .)
    XOROP           reduce using rule 175 (simple_type_name -> INT .)
    OROP            reduce using rule 175 (simple_type_name -> INT .)
    ANDOP           reduce using rule 175 (simple_type_name -> INT .)
    QUESMARK        reduce using rule 175 (simple_type_name -> INT .)
    RSPAREN         reduce using rule 175 (simple_type_name -> INT .)
    EQUAL           reduce using rule 175 (simple_type_name -> INT .)
    MULTEQOP        reduce using rule 175 (simple_type_name -> INT .)
    DIVEQOP         reduce using rule 175 (simple_type_name -> INT .)
    MODEQOP         reduce using rule 175 (simple_type_name -> INT .)
    PLUSEQOP        reduce using rule 175 (simple_type_name -> INT .)
    MINUSEQOP       reduce using rule 175 (simple_type_name -> INT .)
    LSHIFTEQOP      reduce using rule 175 (simple_type_name -> INT .)
    RSHIFTEQOP      reduce using rule 175 (simple_type_name -> INT .)
    BANDEQOP        reduce using rule 175 (simple_type_name -> INT .)
    BOREQOP         reduce using rule 175 (simple_type_name -> INT .)
    RCPAREN         reduce using rule 175 (simple_type_name -> INT .)
    COLON           reduce using rule 175 (simple_type_name -> INT .)


state 28

    (176) simple_type_name -> LONG .

    IDENTIFIER      reduce using rule 176 (simple_type_name -> LONG .)
    DOUBLEBNOP      reduce using rule 176 (simple_type_name -> LONG .)
    MULTOP          reduce using rule 176 (simple_type_name -> LONG .)
    BANDOP          reduce using rule 176 (simple_type_name -> LONG .)
    LSPAREN         reduce using rule 176 (simple_type_name -> LONG .)
    SEMICOLON       reduce using rule 176 (simple_type_name -> LONG .)
    RTEMPLATE       reduce using rule 176 (simple_type_name -> LONG .)
    COMMA           reduce using rule 176 (simple_type_name -> LONG .)
    RPAREN          reduce using rule 176 (simple_type_name -> LONG .)
    LPAREN          reduce using rule 176 (simple_type_name -> LONG .)
    DIVOP           reduce using rule 176 (simple_type_name -> LONG .)
    MODOP           reduce using rule 176 (simple_type_name -> LONG .)
    PLUSOP          reduce using rule 176 (simple_type_name -> LONG .)
    MINUSOP         reduce using rule 176 (simple_type_name -> LONG .)
    LSHIFT          reduce using rule 176 (simple_type_name -> LONG .)
    RSHIFT          reduce using rule 176 (simple_type_name -> LONG .)
    LTCOMP          reduce using rule 176 (simple_type_name -> LONG .)
    GTCOMP          reduce using rule 176 (simple_type_name -> LONG .)
    LTECOMP         reduce using rule 176 (simple_type_name -> LONG .)
    GTECOMP         reduce using rule 176 (simple_type_name -> LONG .)
    EQCOMP          reduce using rule 176 (simple_type_name -> LONG .)
    NEQCOMP         reduce using rule 176 (simple_type_name -> LONG .)
    XOROP           reduce using rule 176 (simple_type_name -> LONG .)
    OROP            reduce using rule 176 (simple_type_name -> LONG .)
    ANDOP           reduce using rule 176 (simple_type_name -> LONG .)
    QUESMARK        reduce using rule 176 (simple_type_name -> LONG .)
    RSPAREN         reduce using rule 176 (simple_type_name -> LONG .)
    EQUAL           reduce using rule 176 (simple_type_name -> LONG .)
    MULTEQOP        reduce using rule 176 (simple_type_name -> LONG .)
    DIVEQOP         reduce using rule 176 (simple_type_name -> LONG .)
    MODEQOP         reduce using rule 176 (simple_type_name -> LONG .)
    PLUSEQOP        reduce using rule 176 (simple_type_name -> LONG .)
    MINUSEQOP       reduce using rule 176 (simple_type_name -> LONG .)
    LSHIFTEQOP      reduce using rule 176 (simple_type_name -> LONG .)
    RSHIFTEQOP      reduce using rule 176 (simple_type_name -> LONG .)
    BANDEQOP        reduce using rule 176 (simple_type_name -> LONG .)
    BOREQOP         reduce using rule 176 (simple_type_name -> LONG .)
    RCPAREN         reduce using rule 176 (simple_type_name -> LONG .)
    COLON           reduce using rule 176 (simple_type_name -> LONG .)


state 29

    (177) simple_type_name -> SIGNED .

    IDENTIFIER      reduce using rule 177 (simple_type_name -> SIGNED .)
    DOUBLEBNOP      reduce using rule 177 (simple_type_name -> SIGNED .)
    MULTOP          reduce using rule 177 (simple_type_name -> SIGNED .)
    BANDOP          reduce using rule 177 (simple_type_name -> SIGNED .)
    LSPAREN         reduce using rule 177 (simple_type_name -> SIGNED .)
    SEMICOLON       reduce using rule 177 (simple_type_name -> SIGNED .)
    RTEMPLATE       reduce using rule 177 (simple_type_name -> SIGNED .)
    COMMA           reduce using rule 177 (simple_type_name -> SIGNED .)
    RPAREN          reduce using rule 177 (simple_type_name -> SIGNED .)
    LPAREN          reduce using rule 177 (simple_type_name -> SIGNED .)
    DIVOP           reduce using rule 177 (simple_type_name -> SIGNED .)
    MODOP           reduce using rule 177 (simple_type_name -> SIGNED .)
    PLUSOP          reduce using rule 177 (simple_type_name -> SIGNED .)
    MINUSOP         reduce using rule 177 (simple_type_name -> SIGNED .)
    LSHIFT          reduce using rule 177 (simple_type_name -> SIGNED .)
    RSHIFT          reduce using rule 177 (simple_type_name -> SIGNED .)
    LTCOMP          reduce using rule 177 (simple_type_name -> SIGNED .)
    GTCOMP          reduce using rule 177 (simple_type_name -> SIGNED .)
    LTECOMP         reduce using rule 177 (simple_type_name -> SIGNED .)
    GTECOMP         reduce using rule 177 (simple_type_name -> SIGNED .)
    EQCOMP          reduce using rule 177 (simple_type_name -> SIGNED .)
    NEQCOMP         reduce using rule 177 (simple_type_name -> SIGNED .)
    XOROP           reduce using rule 177 (simple_type_name -> SIGNED .)
    OROP            reduce using rule 177 (simple_type_name -> SIGNED .)
    ANDOP           reduce using rule 177 (simple_type_name -> SIGNED .)
    QUESMARK        reduce using rule 177 (simple_type_name -> SIGNED .)
    RSPAREN         reduce using rule 177 (simple_type_name -> SIGNED .)
    EQUAL           reduce using rule 177 (simple_type_name -> SIGNED .)
    MULTEQOP        reduce using rule 177 (simple_type_name -> SIGNED .)
    DIVEQOP         reduce using rule 177 (simple_type_name -> SIGNED .)
    MODEQOP         reduce using rule 177 (simple_type_name -> SIGNED .)
    PLUSEQOP        reduce using rule 177 (simple_type_name -> SIGNED .)
    MINUSEQOP       reduce using rule 177 (simple_type_name -> SIGNED .)
    LSHIFTEQOP      reduce using rule 177 (simple_type_name -> SIGNED .)
    RSHIFTEQOP      reduce using rule 177 (simple_type_name -> SIGNED .)
    BANDEQOP        reduce using rule 177 (simple_type_name -> SIGNED .)
    BOREQOP         reduce using rule 177 (simple_type_name -> SIGNED .)
    RCPAREN         reduce using rule 177 (simple_type_name -> SIGNED .)
    COLON           reduce using rule 177 (simple_type_name -> SIGNED .)


state 30

    (178) simple_type_name -> UNSIGNED .

    IDENTIFIER      reduce using rule 178 (simple_type_name -> UNSIGNED .)
    DOUBLEBNOP      reduce using rule 178 (simple_type_name -> UNSIGNED .)
    MULTOP          reduce using rule 178 (simple_type_name -> UNSIGNED .)
    BANDOP          reduce using rule 178 (simple_type_name -> UNSIGNED .)
    LSPAREN         reduce using rule 178 (simple_type_name -> UNSIGNED .)
    SEMICOLON       reduce using rule 178 (simple_type_name -> UNSIGNED .)
    RTEMPLATE       reduce using rule 178 (simple_type_name -> UNSIGNED .)
    COMMA           reduce using rule 178 (simple_type_name -> UNSIGNED .)
    RPAREN          reduce using rule 178 (simple_type_name -> UNSIGNED .)
    LPAREN          reduce using rule 178 (simple_type_name -> UNSIGNED .)
    DIVOP           reduce using rule 178 (simple_type_name -> UNSIGNED .)
    MODOP           reduce using rule 178 (simple_type_name -> UNSIGNED .)
    PLUSOP          reduce using rule 178 (simple_type_name -> UNSIGNED .)
    MINUSOP         reduce using rule 178 (simple_type_name -> UNSIGNED .)
    LSHIFT          reduce using rule 178 (simple_type_name -> UNSIGNED .)
    RSHIFT          reduce using rule 178 (simple_type_name -> UNSIGNED .)
    LTCOMP          reduce using rule 178 (simple_type_name -> UNSIGNED .)
    GTCOMP          reduce using rule 178 (simple_type_name -> UNSIGNED .)
    LTECOMP         reduce using rule 178 (simple_type_name -> UNSIGNED .)
    GTECOMP         reduce using rule 178 (simple_type_name -> UNSIGNED .)
    EQCOMP          reduce using rule 178 (simple_type_name -> UNSIGNED .)
    NEQCOMP         reduce using rule 178 (simple_type_name -> UNSIGNED .)
    XOROP           reduce using rule 178 (simple_type_name -> UNSIGNED .)
    OROP            reduce using rule 178 (simple_type_name -> UNSIGNED .)
    ANDOP           reduce using rule 178 (simple_type_name -> UNSIGNED .)
    QUESMARK        reduce using rule 178 (simple_type_name -> UNSIGNED .)
    RSPAREN         reduce using rule 178 (simple_type_name -> UNSIGNED .)
    EQUAL           reduce using rule 178 (simple_type_name -> UNSIGNED .)
    MULTEQOP        reduce using rule 178 (simple_type_name -> UNSIGNED .)
    DIVEQOP         reduce using rule 178 (simple_type_name -> UNSIGNED .)
    MODEQOP         reduce using rule 178 (simple_type_name -> UNSIGNED .)
    PLUSEQOP        reduce using rule 178 (simple_type_name -> UNSIGNED .)
    MINUSEQOP       reduce using rule 178 (simple_type_name -> UNSIGNED .)
    LSHIFTEQOP      reduce using rule 178 (simple_type_name -> UNSIGNED .)
    RSHIFTEQOP      reduce using rule 178 (simple_type_name -> UNSIGNED .)
    BANDEQOP        reduce using rule 178 (simple_type_name -> UNSIGNED .)
    BOREQOP         reduce using rule 178 (simple_type_name -> UNSIGNED .)
    RCPAREN         reduce using rule 178 (simple_type_name -> UNSIGNED .)
    COLON           reduce using rule 178 (simple_type_name -> UNSIGNED .)


state 31

    (179) simple_type_name -> FLOAT .

    IDENTIFIER      reduce using rule 179 (simple_type_name -> FLOAT .)
    DOUBLEBNOP      reduce using rule 179 (simple_type_name -> FLOAT .)
    MULTOP          reduce using rule 179 (simple_type_name -> FLOAT .)
    BANDOP          reduce using rule 179 (simple_type_name -> FLOAT .)
    LSPAREN         reduce using rule 179 (simple_type_name -> FLOAT .)
    SEMICOLON       reduce using rule 179 (simple_type_name -> FLOAT .)
    RTEMPLATE       reduce using rule 179 (simple_type_name -> FLOAT .)
    COMMA           reduce using rule 179 (simple_type_name -> FLOAT .)
    RPAREN          reduce using rule 179 (simple_type_name -> FLOAT .)
    LPAREN          reduce using rule 179 (simple_type_name -> FLOAT .)
    DIVOP           reduce using rule 179 (simple_type_name -> FLOAT .)
    MODOP           reduce using rule 179 (simple_type_name -> FLOAT .)
    PLUSOP          reduce using rule 179 (simple_type_name -> FLOAT .)
    MINUSOP         reduce using rule 179 (simple_type_name -> FLOAT .)
    LSHIFT          reduce using rule 179 (simple_type_name -> FLOAT .)
    RSHIFT          reduce using rule 179 (simple_type_name -> FLOAT .)
    LTCOMP          reduce using rule 179 (simple_type_name -> FLOAT .)
    GTCOMP          reduce using rule 179 (simple_type_name -> FLOAT .)
    LTECOMP         reduce using rule 179 (simple_type_name -> FLOAT .)
    GTECOMP         reduce using rule 179 (simple_type_name -> FLOAT .)
    EQCOMP          reduce using rule 179 (simple_type_name -> FLOAT .)
    NEQCOMP         reduce using rule 179 (simple_type_name -> FLOAT .)
    XOROP           reduce using rule 179 (simple_type_name -> FLOAT .)
    OROP            reduce using rule 179 (simple_type_name -> FLOAT .)
    ANDOP           reduce using rule 179 (simple_type_name -> FLOAT .)
    QUESMARK        reduce using rule 179 (simple_type_name -> FLOAT .)
    RSPAREN         reduce using rule 179 (simple_type_name -> FLOAT .)
    EQUAL           reduce using rule 179 (simple_type_name -> FLOAT .)
    MULTEQOP        reduce using rule 179 (simple_type_name -> FLOAT .)
    DIVEQOP         reduce using rule 179 (simple_type_name -> FLOAT .)
    MODEQOP         reduce using rule 179 (simple_type_name -> FLOAT .)
    PLUSEQOP        reduce using rule 179 (simple_type_name -> FLOAT .)
    MINUSEQOP       reduce using rule 179 (simple_type_name -> FLOAT .)
    LSHIFTEQOP      reduce using rule 179 (simple_type_name -> FLOAT .)
    RSHIFTEQOP      reduce using rule 179 (simple_type_name -> FLOAT .)
    BANDEQOP        reduce using rule 179 (simple_type_name -> FLOAT .)
    BOREQOP         reduce using rule 179 (simple_type_name -> FLOAT .)
    RCPAREN         reduce using rule 179 (simple_type_name -> FLOAT .)
    COLON           reduce using rule 179 (simple_type_name -> FLOAT .)


state 32

    (180) simple_type_name -> DOUBLE .

    IDENTIFIER      reduce using rule 180 (simple_type_name -> DOUBLE .)
    DOUBLEBNOP      reduce using rule 180 (simple_type_name -> DOUBLE .)
    MULTOP          reduce using rule 180 (simple_type_name -> DOUBLE .)
    BANDOP          reduce using rule 180 (simple_type_name -> DOUBLE .)
    LSPAREN         reduce using rule 180 (simple_type_name -> DOUBLE .)
    SEMICOLON       reduce using rule 180 (simple_type_name -> DOUBLE .)
    RTEMPLATE       reduce using rule 180 (simple_type_name -> DOUBLE .)
    COMMA           reduce using rule 180 (simple_type_name -> DOUBLE .)
    RPAREN          reduce using rule 180 (simple_type_name -> DOUBLE .)
    LPAREN          reduce using rule 180 (simple_type_name -> DOUBLE .)
    DIVOP           reduce using rule 180 (simple_type_name -> DOUBLE .)
    MODOP           reduce using rule 180 (simple_type_name -> DOUBLE .)
    PLUSOP          reduce using rule 180 (simple_type_name -> DOUBLE .)
    MINUSOP         reduce using rule 180 (simple_type_name -> DOUBLE .)
    LSHIFT          reduce using rule 180 (simple_type_name -> DOUBLE .)
    RSHIFT          reduce using rule 180 (simple_type_name -> DOUBLE .)
    LTCOMP          reduce using rule 180 (simple_type_name -> DOUBLE .)
    GTCOMP          reduce using rule 180 (simple_type_name -> DOUBLE .)
    LTECOMP         reduce using rule 180 (simple_type_name -> DOUBLE .)
    GTECOMP         reduce using rule 180 (simple_type_name -> DOUBLE .)
    EQCOMP          reduce using rule 180 (simple_type_name -> DOUBLE .)
    NEQCOMP         reduce using rule 180 (simple_type_name -> DOUBLE .)
    XOROP           reduce using rule 180 (simple_type_name -> DOUBLE .)
    OROP            reduce using rule 180 (simple_type_name -> DOUBLE .)
    ANDOP           reduce using rule 180 (simple_type_name -> DOUBLE .)
    QUESMARK        reduce using rule 180 (simple_type_name -> DOUBLE .)
    RSPAREN         reduce using rule 180 (simple_type_name -> DOUBLE .)
    EQUAL           reduce using rule 180 (simple_type_name -> DOUBLE .)
    MULTEQOP        reduce using rule 180 (simple_type_name -> DOUBLE .)
    DIVEQOP         reduce using rule 180 (simple_type_name -> DOUBLE .)
    MODEQOP         reduce using rule 180 (simple_type_name -> DOUBLE .)
    PLUSEQOP        reduce using rule 180 (simple_type_name -> DOUBLE .)
    MINUSEQOP       reduce using rule 180 (simple_type_name -> DOUBLE .)
    LSHIFTEQOP      reduce using rule 180 (simple_type_name -> DOUBLE .)
    RSHIFTEQOP      reduce using rule 180 (simple_type_name -> DOUBLE .)
    BANDEQOP        reduce using rule 180 (simple_type_name -> DOUBLE .)
    BOREQOP         reduce using rule 180 (simple_type_name -> DOUBLE .)
    RCPAREN         reduce using rule 180 (simple_type_name -> DOUBLE .)
    COLON           reduce using rule 180 (simple_type_name -> DOUBLE .)


state 33

    (181) simple_type_name -> VOID .

    IDENTIFIER      reduce using rule 181 (simple_type_name -> VOID .)
    DOUBLEBNOP      reduce using rule 181 (simple_type_name -> VOID .)
    MULTOP          reduce using rule 181 (simple_type_name -> VOID .)
    BANDOP          reduce using rule 181 (simple_type_name -> VOID .)
    LSPAREN         reduce using rule 181 (simple_type_name -> VOID .)
    SEMICOLON       reduce using rule 181 (simple_type_name -> VOID .)
    RTEMPLATE       reduce using rule 181 (simple_type_name -> VOID .)
    COMMA           reduce using rule 181 (simple_type_name -> VOID .)
    RPAREN          reduce using rule 181 (simple_type_name -> VOID .)
    LPAREN          reduce using rule 181 (simple_type_name -> VOID .)
    DIVOP           reduce using rule 181 (simple_type_name -> VOID .)
    MODOP           reduce using rule 181 (simple_type_name -> VOID .)
    PLUSOP          reduce using rule 181 (simple_type_name -> VOID .)
    MINUSOP         reduce using rule 181 (simple_type_name -> VOID .)
    LSHIFT          reduce using rule 181 (simple_type_name -> VOID .)
    RSHIFT          reduce using rule 181 (simple_type_name -> VOID .)
    LTCOMP          reduce using rule 181 (simple_type_name -> VOID .)
    GTCOMP          reduce using rule 181 (simple_type_name -> VOID .)
    LTECOMP         reduce using rule 181 (simple_type_name -> VOID .)
    GTECOMP         reduce using rule 181 (simple_type_name -> VOID .)
    EQCOMP          reduce using rule 181 (simple_type_name -> VOID .)
    NEQCOMP         reduce using rule 181 (simple_type_name -> VOID .)
    XOROP           reduce using rule 181 (simple_type_name -> VOID .)
    OROP            reduce using rule 181 (simple_type_name -> VOID .)
    ANDOP           reduce using rule 181 (simple_type_name -> VOID .)
    QUESMARK        reduce using rule 181 (simple_type_name -> VOID .)
    RSPAREN         reduce using rule 181 (simple_type_name -> VOID .)
    EQUAL           reduce using rule 181 (simple_type_name -> VOID .)
    MULTEQOP        reduce using rule 181 (simple_type_name -> VOID .)
    DIVEQOP         reduce using rule 181 (simple_type_name -> VOID .)
    MODEQOP         reduce using rule 181 (simple_type_name -> VOID .)
    PLUSEQOP        reduce using rule 181 (simple_type_name -> VOID .)
    MINUSEQOP       reduce using rule 181 (simple_type_name -> VOID .)
    LSHIFTEQOP      reduce using rule 181 (simple_type_name -> VOID .)
    RSHIFTEQOP      reduce using rule 181 (simple_type_name -> VOID .)
    BANDEQOP        reduce using rule 181 (simple_type_name -> VOID .)
    BOREQOP         reduce using rule 181 (simple_type_name -> VOID .)
    RCPAREN         reduce using rule 181 (simple_type_name -> VOID .)
    COLON           reduce using rule 181 (simple_type_name -> VOID .)


state 34

    (182) simple_type_name -> STRING .

    IDENTIFIER      reduce using rule 182 (simple_type_name -> STRING .)
    DOUBLEBNOP      reduce using rule 182 (simple_type_name -> STRING .)
    MULTOP          reduce using rule 182 (simple_type_name -> STRING .)
    BANDOP          reduce using rule 182 (simple_type_name -> STRING .)
    LSPAREN         reduce using rule 182 (simple_type_name -> STRING .)
    SEMICOLON       reduce using rule 182 (simple_type_name -> STRING .)
    RTEMPLATE       reduce using rule 182 (simple_type_name -> STRING .)
    COMMA           reduce using rule 182 (simple_type_name -> STRING .)
    RPAREN          reduce using rule 182 (simple_type_name -> STRING .)
    LPAREN          reduce using rule 182 (simple_type_name -> STRING .)
    DIVOP           reduce using rule 182 (simple_type_name -> STRING .)
    MODOP           reduce using rule 182 (simple_type_name -> STRING .)
    PLUSOP          reduce using rule 182 (simple_type_name -> STRING .)
    MINUSOP         reduce using rule 182 (simple_type_name -> STRING .)
    LSHIFT          reduce using rule 182 (simple_type_name -> STRING .)
    RSHIFT          reduce using rule 182 (simple_type_name -> STRING .)
    LTCOMP          reduce using rule 182 (simple_type_name -> STRING .)
    GTCOMP          reduce using rule 182 (simple_type_name -> STRING .)
    LTECOMP         reduce using rule 182 (simple_type_name -> STRING .)
    GTECOMP         reduce using rule 182 (simple_type_name -> STRING .)
    EQCOMP          reduce using rule 182 (simple_type_name -> STRING .)
    NEQCOMP         reduce using rule 182 (simple_type_name -> STRING .)
    XOROP           reduce using rule 182 (simple_type_name -> STRING .)
    OROP            reduce using rule 182 (simple_type_name -> STRING .)
    ANDOP           reduce using rule 182 (simple_type_name -> STRING .)
    QUESMARK        reduce using rule 182 (simple_type_name -> STRING .)
    RSPAREN         reduce using rule 182 (simple_type_name -> STRING .)
    EQUAL           reduce using rule 182 (simple_type_name -> STRING .)
    MULTEQOP        reduce using rule 182 (simple_type_name -> STRING .)
    DIVEQOP         reduce using rule 182 (simple_type_name -> STRING .)
    MODEQOP         reduce using rule 182 (simple_type_name -> STRING .)
    PLUSEQOP        reduce using rule 182 (simple_type_name -> STRING .)
    MINUSEQOP       reduce using rule 182 (simple_type_name -> STRING .)
    LSHIFTEQOP      reduce using rule 182 (simple_type_name -> STRING .)
    RSHIFTEQOP      reduce using rule 182 (simple_type_name -> STRING .)
    BANDEQOP        reduce using rule 182 (simple_type_name -> STRING .)
    BOREQOP         reduce using rule 182 (simple_type_name -> STRING .)
    RCPAREN         reduce using rule 182 (simple_type_name -> STRING .)
    COLON           reduce using rule 182 (simple_type_name -> STRING .)


state 35

    (183) simple_type_name -> AUTO .

    IDENTIFIER      reduce using rule 183 (simple_type_name -> AUTO .)
    DOUBLEBNOP      reduce using rule 183 (simple_type_name -> AUTO .)
    MULTOP          reduce using rule 183 (simple_type_name -> AUTO .)
    BANDOP          reduce using rule 183 (simple_type_name -> AUTO .)
    LSPAREN         reduce using rule 183 (simple_type_name -> AUTO .)
    SEMICOLON       reduce using rule 183 (simple_type_name -> AUTO .)
    RTEMPLATE       reduce using rule 183 (simple_type_name -> AUTO .)
    COMMA           reduce using rule 183 (simple_type_name -> AUTO .)
    RPAREN          reduce using rule 183 (simple_type_name -> AUTO .)
    LPAREN          reduce using rule 183 (simple_type_name -> AUTO .)
    DIVOP           reduce using rule 183 (simple_type_name -> AUTO .)
    MODOP           reduce using rule 183 (simple_type_name -> AUTO .)
    PLUSOP          reduce using rule 183 (simple_type_name -> AUTO .)
    MINUSOP         reduce using rule 183 (simple_type_name -> AUTO .)
    LSHIFT          reduce using rule 183 (simple_type_name -> AUTO .)
    RSHIFT          reduce using rule 183 (simple_type_name -> AUTO .)
    LTCOMP          reduce using rule 183 (simple_type_name -> AUTO .)
    GTCOMP          reduce using rule 183 (simple_type_name -> AUTO .)
    LTECOMP         reduce using rule 183 (simple_type_name -> AUTO .)
    GTECOMP         reduce using rule 183 (simple_type_name -> AUTO .)
    EQCOMP          reduce using rule 183 (simple_type_name -> AUTO .)
    NEQCOMP         reduce using rule 183 (simple_type_name -> AUTO .)
    XOROP           reduce using rule 183 (simple_type_name -> AUTO .)
    OROP            reduce using rule 183 (simple_type_name -> AUTO .)
    ANDOP           reduce using rule 183 (simple_type_name -> AUTO .)
    QUESMARK        reduce using rule 183 (simple_type_name -> AUTO .)
    RSPAREN         reduce using rule 183 (simple_type_name -> AUTO .)
    EQUAL           reduce using rule 183 (simple_type_name -> AUTO .)
    MULTEQOP        reduce using rule 183 (simple_type_name -> AUTO .)
    DIVEQOP         reduce using rule 183 (simple_type_name -> AUTO .)
    MODEQOP         reduce using rule 183 (simple_type_name -> AUTO .)
    PLUSEQOP        reduce using rule 183 (simple_type_name -> AUTO .)
    MINUSEQOP       reduce using rule 183 (simple_type_name -> AUTO .)
    LSHIFTEQOP      reduce using rule 183 (simple_type_name -> AUTO .)
    RSHIFTEQOP      reduce using rule 183 (simple_type_name -> AUTO .)
    BANDEQOP        reduce using rule 183 (simple_type_name -> AUTO .)
    BOREQOP         reduce using rule 183 (simple_type_name -> AUTO .)
    RCPAREN         reduce using rule 183 (simple_type_name -> AUTO .)
    COLON           reduce using rule 183 (simple_type_name -> AUTO .)


state 36

    (186) complex_type_specifier -> TYPE . IDENTIFIER
    (187) complex_type_specifier -> TYPE . IDENTIFIER template_class_name

    IDENTIFIER      shift and go to state 62


state 37

    (200) class_key -> CLASS .

    IDENTIFIER      reduce using rule 200 (class_key -> CLASS .)


state 38

    (201) class_key -> STRUCT .

    IDENTIFIER      reduce using rule 201 (class_key -> STRUCT .)


state 39

    (6) program -> control_line translation_unit .

    $end            reduce using rule 6 (program -> control_line translation_unit .)


state 40

    (1) control_line -> control_line control_line_stmt .

    HASHTAG         reduce using rule 1 (control_line -> control_line control_line_stmt .)
    CONST           reduce using rule 1 (control_line -> control_line control_line_stmt .)
    ASM             reduce using rule 1 (control_line -> control_line control_line_stmt .)
    TEMPLATE        reduce using rule 1 (control_line -> control_line control_line_stmt .)
    TYPEDEF         reduce using rule 1 (control_line -> control_line control_line_stmt .)
    CHAR            reduce using rule 1 (control_line -> control_line control_line_stmt .)
    SHORT           reduce using rule 1 (control_line -> control_line control_line_stmt .)
    INT             reduce using rule 1 (control_line -> control_line control_line_stmt .)
    LONG            reduce using rule 1 (control_line -> control_line control_line_stmt .)
    SIGNED          reduce using rule 1 (control_line -> control_line control_line_stmt .)
    UNSIGNED        reduce using rule 1 (control_line -> control_line control_line_stmt .)
    FLOAT           reduce using rule 1 (control_line -> control_line control_line_stmt .)
    DOUBLE          reduce using rule 1 (control_line -> control_line control_line_stmt .)
    VOID            reduce using rule 1 (control_line -> control_line control_line_stmt .)
    STRING          reduce using rule 1 (control_line -> control_line control_line_stmt .)
    AUTO            reduce using rule 1 (control_line -> control_line control_line_stmt .)
    TYPE            reduce using rule 1 (control_line -> control_line control_line_stmt .)
    CLASS           reduce using rule 1 (control_line -> control_line control_line_stmt .)
    STRUCT          reduce using rule 1 (control_line -> control_line control_line_stmt .)


state 41

    (9) declaration_seq -> declaration_seq declaration .

    CONST           reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    ASM             reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    TEMPLATE        reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    TYPEDEF         reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    CHAR            reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    SHORT           reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    INT             reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    LONG            reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    SIGNED          reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    UNSIGNED        reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    FLOAT           reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    DOUBLE          reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    VOID            reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    STRING          reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    AUTO            reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    TYPE            reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    CLASS           reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    STRUCT          reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    $end            reduce using rule 9 (declaration_seq -> declaration_seq declaration .)


state 42

    (4) control_line_stmt -> include_control LTCOMP . STRING_L GTCOMP

    STRING_L        shift and go to state 63


state 43

    (5) control_line_stmt -> include_control STRING_L .

    HASHTAG         reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    CONST           reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    ASM             reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    TEMPLATE        reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    TYPEDEF         reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    CHAR            reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    SHORT           reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    INT             reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    LONG            reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    SIGNED          reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    UNSIGNED        reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    FLOAT           reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    DOUBLE          reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    VOID            reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    STRING          reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    AUTO            reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    TYPE            reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    CLASS           reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    STRUCT          reduce using rule 5 (control_line_stmt -> include_control STRING_L .)


state 44

    (3) include_control -> HASHTAG INCLUDE .

    LTCOMP          reduce using rule 3 (include_control -> HASHTAG INCLUDE .)
    STRING_L        reduce using rule 3 (include_control -> HASHTAG INCLUDE .)


state 45

    (263) declaration -> type_specifier_ declarator_list . SEMICOLON
    (274) declarator_list -> declarator_list . COMMA init_declarator

    SEMICOLON       shift and go to state 64
    COMMA           shift and go to state 65


state 46

    (224) function_definition -> type_specifier_ declarator . func_push_scope arg_list RPAREN fct_body pop_scope
    (225) function_decl -> type_specifier_ declarator . func_push_scope arg_list RPAREN SEMICOLON pop_scope
    (114) declarator -> declarator . LSPAREN constant_expression RSPAREN
    (115) declarator -> declarator . LSPAREN RSPAREN
    (275) init_declarator -> declarator . initializer
    (276) init_declarator -> declarator .
    (226) func_push_scope -> . LPAREN
    (277) initializer -> . EQUAL assignment_expression
    (278) initializer -> . EQUAL LCPAREN initializer_list RCPAREN
    (279) initializer -> . EQUAL LCPAREN initializer_list COMMA RCPAREN
    (280) initializer -> . LPAREN expression_list RPAREN

    LSPAREN         shift and go to state 67
    SEMICOLON       reduce using rule 276 (init_declarator -> declarator .)
    COMMA           reduce using rule 276 (init_declarator -> declarator .)
    LPAREN          shift and go to state 69
    EQUAL           shift and go to state 70

    func_push_scope                shift and go to state 66
    initializer                    shift and go to state 68

state 47

    (273) declarator_list -> init_declarator .

    SEMICOLON       reduce using rule 273 (declarator_list -> init_declarator .)
    COMMA           reduce using rule 273 (declarator_list -> init_declarator .)


state 48

    (112) declarator -> name .

    LSPAREN         reduce using rule 112 (declarator -> name .)
    LPAREN          reduce using rule 112 (declarator -> name .)
    EQUAL           reduce using rule 112 (declarator -> name .)
    SEMICOLON       reduce using rule 112 (declarator -> name .)
    COMMA           reduce using rule 112 (declarator -> name .)
    RTEMPLATE       reduce using rule 112 (declarator -> name .)
    RPAREN          reduce using rule 112 (declarator -> name .)


state 49

    (113) declarator -> unary2_operator . declarator
    (112) declarator -> . name
    (113) declarator -> . unary2_operator declarator
    (114) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (115) declarator -> . declarator LSPAREN RSPAREN
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP

    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53

    unary2_operator                shift and go to state 49
    declarator                     shift and go to state 71
    name                           shift and go to state 48

state 50

    (124) name -> IDENTIFIER .

    LSPAREN         reduce using rule 124 (name -> IDENTIFIER .)
    LPAREN          reduce using rule 124 (name -> IDENTIFIER .)
    EQUAL           reduce using rule 124 (name -> IDENTIFIER .)
    SEMICOLON       reduce using rule 124 (name -> IDENTIFIER .)
    COMMA           reduce using rule 124 (name -> IDENTIFIER .)
    DOT             reduce using rule 124 (name -> IDENTIFIER .)
    ARROW           reduce using rule 124 (name -> IDENTIFIER .)
    DPLUSOP         reduce using rule 124 (name -> IDENTIFIER .)
    DMINUSOP        reduce using rule 124 (name -> IDENTIFIER .)
    LTEMPLATE       reduce using rule 124 (name -> IDENTIFIER .)
    MULTOP          reduce using rule 124 (name -> IDENTIFIER .)
    DIVOP           reduce using rule 124 (name -> IDENTIFIER .)
    MODOP           reduce using rule 124 (name -> IDENTIFIER .)
    PLUSOP          reduce using rule 124 (name -> IDENTIFIER .)
    MINUSOP         reduce using rule 124 (name -> IDENTIFIER .)
    LSHIFT          reduce using rule 124 (name -> IDENTIFIER .)
    RSHIFT          reduce using rule 124 (name -> IDENTIFIER .)
    LTCOMP          reduce using rule 124 (name -> IDENTIFIER .)
    GTCOMP          reduce using rule 124 (name -> IDENTIFIER .)
    LTECOMP         reduce using rule 124 (name -> IDENTIFIER .)
    GTECOMP         reduce using rule 124 (name -> IDENTIFIER .)
    EQCOMP          reduce using rule 124 (name -> IDENTIFIER .)
    NEQCOMP         reduce using rule 124 (name -> IDENTIFIER .)
    BANDOP          reduce using rule 124 (name -> IDENTIFIER .)
    XOROP           reduce using rule 124 (name -> IDENTIFIER .)
    OROP            reduce using rule 124 (name -> IDENTIFIER .)
    ANDOP           reduce using rule 124 (name -> IDENTIFIER .)
    QUESMARK        reduce using rule 124 (name -> IDENTIFIER .)
    RSPAREN         reduce using rule 124 (name -> IDENTIFIER .)
    MULTEQOP        reduce using rule 124 (name -> IDENTIFIER .)
    DIVEQOP         reduce using rule 124 (name -> IDENTIFIER .)
    MODEQOP         reduce using rule 124 (name -> IDENTIFIER .)
    PLUSEQOP        reduce using rule 124 (name -> IDENTIFIER .)
    MINUSEQOP       reduce using rule 124 (name -> IDENTIFIER .)
    LSHIFTEQOP      reduce using rule 124 (name -> IDENTIFIER .)
    RSHIFTEQOP      reduce using rule 124 (name -> IDENTIFIER .)
    BANDEQOP        reduce using rule 124 (name -> IDENTIFIER .)
    BOREQOP         reduce using rule 124 (name -> IDENTIFIER .)
    RPAREN          reduce using rule 124 (name -> IDENTIFIER .)
    RTEMPLATE       reduce using rule 124 (name -> IDENTIFIER .)
    RCPAREN         reduce using rule 124 (name -> IDENTIFIER .)
    COLON           reduce using rule 124 (name -> IDENTIFIER .)


state 51

    (125) name -> DOUBLEBNOP . IDENTIFIER

    IDENTIFIER      shift and go to state 72


state 52

    (86) unary2_operator -> MULTOP .

    IDENTIFIER      reduce using rule 86 (unary2_operator -> MULTOP .)
    DOUBLEBNOP      reduce using rule 86 (unary2_operator -> MULTOP .)
    MULTOP          reduce using rule 86 (unary2_operator -> MULTOP .)
    BANDOP          reduce using rule 86 (unary2_operator -> MULTOP .)
    LSPAREN         reduce using rule 86 (unary2_operator -> MULTOP .)
    LPAREN          reduce using rule 86 (unary2_operator -> MULTOP .)
    DPLUSOP         reduce using rule 86 (unary2_operator -> MULTOP .)
    DMINUSOP        reduce using rule 86 (unary2_operator -> MULTOP .)
    SIZEOF          reduce using rule 86 (unary2_operator -> MULTOP .)
    PLUSOP          reduce using rule 86 (unary2_operator -> MULTOP .)
    MINUSOP         reduce using rule 86 (unary2_operator -> MULTOP .)
    NOTSYM          reduce using rule 86 (unary2_operator -> MULTOP .)
    BNOP            reduce using rule 86 (unary2_operator -> MULTOP .)
    NEW             reduce using rule 86 (unary2_operator -> MULTOP .)
    DELETE          reduce using rule 86 (unary2_operator -> MULTOP .)
    THIS            reduce using rule 86 (unary2_operator -> MULTOP .)
    STRING_L        reduce using rule 86 (unary2_operator -> MULTOP .)
    NUMBER          reduce using rule 86 (unary2_operator -> MULTOP .)
    SCHAR           reduce using rule 86 (unary2_operator -> MULTOP .)
    RTEMPLATE       reduce using rule 86 (unary2_operator -> MULTOP .)
    COMMA           reduce using rule 86 (unary2_operator -> MULTOP .)
    RPAREN          reduce using rule 86 (unary2_operator -> MULTOP .)


state 53

    (87) unary2_operator -> BANDOP .

    IDENTIFIER      reduce using rule 87 (unary2_operator -> BANDOP .)
    DOUBLEBNOP      reduce using rule 87 (unary2_operator -> BANDOP .)
    MULTOP          reduce using rule 87 (unary2_operator -> BANDOP .)
    BANDOP          reduce using rule 87 (unary2_operator -> BANDOP .)
    LSPAREN         reduce using rule 87 (unary2_operator -> BANDOP .)
    LPAREN          reduce using rule 87 (unary2_operator -> BANDOP .)
    DPLUSOP         reduce using rule 87 (unary2_operator -> BANDOP .)
    DMINUSOP        reduce using rule 87 (unary2_operator -> BANDOP .)
    SIZEOF          reduce using rule 87 (unary2_operator -> BANDOP .)
    PLUSOP          reduce using rule 87 (unary2_operator -> BANDOP .)
    MINUSOP         reduce using rule 87 (unary2_operator -> BANDOP .)
    NOTSYM          reduce using rule 87 (unary2_operator -> BANDOP .)
    BNOP            reduce using rule 87 (unary2_operator -> BANDOP .)
    NEW             reduce using rule 87 (unary2_operator -> BANDOP .)
    DELETE          reduce using rule 87 (unary2_operator -> BANDOP .)
    THIS            reduce using rule 87 (unary2_operator -> BANDOP .)
    STRING_L        reduce using rule 87 (unary2_operator -> BANDOP .)
    NUMBER          reduce using rule 87 (unary2_operator -> BANDOP .)
    SCHAR           reduce using rule 87 (unary2_operator -> BANDOP .)
    RTEMPLATE       reduce using rule 87 (unary2_operator -> BANDOP .)
    COMMA           reduce using rule 87 (unary2_operator -> BANDOP .)
    RPAREN          reduce using rule 87 (unary2_operator -> BANDOP .)


state 54

    (267) declaration -> class_define_specifier SEMICOLON .

    CONST           reduce using rule 267 (declaration -> class_define_specifier SEMICOLON .)
    ASM             reduce using rule 267 (declaration -> class_define_specifier SEMICOLON .)
    TEMPLATE        reduce using rule 267 (declaration -> class_define_specifier SEMICOLON .)
    TYPEDEF         reduce using rule 267 (declaration -> class_define_specifier SEMICOLON .)
    CHAR            reduce using rule 267 (declaration -> class_define_specifier SEMICOLON .)
    SHORT           reduce using rule 267 (declaration -> class_define_specifier SEMICOLON .)
    INT             reduce using rule 267 (declaration -> class_define_specifier SEMICOLON .)
    LONG            reduce using rule 267 (declaration -> class_define_specifier SEMICOLON .)
    SIGNED          reduce using rule 267 (declaration -> class_define_specifier SEMICOLON .)
    UNSIGNED        reduce using rule 267 (declaration -> class_define_specifier SEMICOLON .)
    FLOAT           reduce using rule 267 (declaration -> class_define_specifier SEMICOLON .)
    DOUBLE          reduce using rule 267 (declaration -> class_define_specifier SEMICOLON .)
    VOID            reduce using rule 267 (declaration -> class_define_specifier SEMICOLON .)
    STRING          reduce using rule 267 (declaration -> class_define_specifier SEMICOLON .)
    AUTO            reduce using rule 267 (declaration -> class_define_specifier SEMICOLON .)
    TYPE            reduce using rule 267 (declaration -> class_define_specifier SEMICOLON .)
    CLASS           reduce using rule 267 (declaration -> class_define_specifier SEMICOLON .)
    STRUCT          reduce using rule 267 (declaration -> class_define_specifier SEMICOLON .)
    $end            reduce using rule 267 (declaration -> class_define_specifier SEMICOLON .)
    RCPAREN         reduce using rule 267 (declaration -> class_define_specifier SEMICOLON .)
    SEMICOLON       reduce using rule 267 (declaration -> class_define_specifier SEMICOLON .)
    IF              reduce using rule 267 (declaration -> class_define_specifier SEMICOLON .)
    SWITCH          reduce using rule 267 (declaration -> class_define_specifier SEMICOLON .)
    WHILE           reduce using rule 267 (declaration -> class_define_specifier SEMICOLON .)
    DO              reduce using rule 267 (declaration -> class_define_specifier SEMICOLON .)
    FOR             reduce using rule 267 (declaration -> class_define_specifier SEMICOLON .)
    BREAK           reduce using rule 267 (declaration -> class_define_specifier SEMICOLON .)
    CONTINUE        reduce using rule 267 (declaration -> class_define_specifier SEMICOLON .)
    RETURN          reduce using rule 267 (declaration -> class_define_specifier SEMICOLON .)
    GOTO            reduce using rule 267 (declaration -> class_define_specifier SEMICOLON .)
    TRY             reduce using rule 267 (declaration -> class_define_specifier SEMICOLON .)
    THROW           reduce using rule 267 (declaration -> class_define_specifier SEMICOLON .)
    DPLUSOP         reduce using rule 267 (declaration -> class_define_specifier SEMICOLON .)
    DMINUSOP        reduce using rule 267 (declaration -> class_define_specifier SEMICOLON .)
    SIZEOF          reduce using rule 267 (declaration -> class_define_specifier SEMICOLON .)
    PLUSOP          reduce using rule 267 (declaration -> class_define_specifier SEMICOLON .)
    MINUSOP         reduce using rule 267 (declaration -> class_define_specifier SEMICOLON .)
    NOTSYM          reduce using rule 267 (declaration -> class_define_specifier SEMICOLON .)
    BNOP            reduce using rule 267 (declaration -> class_define_specifier SEMICOLON .)
    MULTOP          reduce using rule 267 (declaration -> class_define_specifier SEMICOLON .)
    BANDOP          reduce using rule 267 (declaration -> class_define_specifier SEMICOLON .)
    NEW             reduce using rule 267 (declaration -> class_define_specifier SEMICOLON .)
    DELETE          reduce using rule 267 (declaration -> class_define_specifier SEMICOLON .)
    THIS            reduce using rule 267 (declaration -> class_define_specifier SEMICOLON .)
    LPAREN          reduce using rule 267 (declaration -> class_define_specifier SEMICOLON .)
    IDENTIFIER      reduce using rule 267 (declaration -> class_define_specifier SEMICOLON .)
    DOUBLEBNOP      reduce using rule 267 (declaration -> class_define_specifier SEMICOLON .)
    STRING_L        reduce using rule 267 (declaration -> class_define_specifier SEMICOLON .)
    NUMBER          reduce using rule 267 (declaration -> class_define_specifier SEMICOLON .)
    SCHAR           reduce using rule 267 (declaration -> class_define_specifier SEMICOLON .)
    LCPAREN         reduce using rule 267 (declaration -> class_define_specifier SEMICOLON .)
    CASE            reduce using rule 267 (declaration -> class_define_specifier SEMICOLON .)
    DEFAULT         reduce using rule 267 (declaration -> class_define_specifier SEMICOLON .)


state 55

    (167) type_specifier_ -> CONST type_specifier .

    IDENTIFIER      reduce using rule 167 (type_specifier_ -> CONST type_specifier .)
    DOUBLEBNOP      reduce using rule 167 (type_specifier_ -> CONST type_specifier .)
    MULTOP          reduce using rule 167 (type_specifier_ -> CONST type_specifier .)
    BANDOP          reduce using rule 167 (type_specifier_ -> CONST type_specifier .)
    LSPAREN         reduce using rule 167 (type_specifier_ -> CONST type_specifier .)
    SEMICOLON       reduce using rule 167 (type_specifier_ -> CONST type_specifier .)
    RTEMPLATE       reduce using rule 167 (type_specifier_ -> CONST type_specifier .)
    COMMA           reduce using rule 167 (type_specifier_ -> CONST type_specifier .)
    RPAREN          reduce using rule 167 (type_specifier_ -> CONST type_specifier .)
    LPAREN          reduce using rule 167 (type_specifier_ -> CONST type_specifier .)
    DIVOP           reduce using rule 167 (type_specifier_ -> CONST type_specifier .)
    MODOP           reduce using rule 167 (type_specifier_ -> CONST type_specifier .)
    PLUSOP          reduce using rule 167 (type_specifier_ -> CONST type_specifier .)
    MINUSOP         reduce using rule 167 (type_specifier_ -> CONST type_specifier .)
    LSHIFT          reduce using rule 167 (type_specifier_ -> CONST type_specifier .)
    RSHIFT          reduce using rule 167 (type_specifier_ -> CONST type_specifier .)
    LTCOMP          reduce using rule 167 (type_specifier_ -> CONST type_specifier .)
    GTCOMP          reduce using rule 167 (type_specifier_ -> CONST type_specifier .)
    LTECOMP         reduce using rule 167 (type_specifier_ -> CONST type_specifier .)
    GTECOMP         reduce using rule 167 (type_specifier_ -> CONST type_specifier .)
    EQCOMP          reduce using rule 167 (type_specifier_ -> CONST type_specifier .)
    NEQCOMP         reduce using rule 167 (type_specifier_ -> CONST type_specifier .)
    XOROP           reduce using rule 167 (type_specifier_ -> CONST type_specifier .)
    OROP            reduce using rule 167 (type_specifier_ -> CONST type_specifier .)
    ANDOP           reduce using rule 167 (type_specifier_ -> CONST type_specifier .)
    QUESMARK        reduce using rule 167 (type_specifier_ -> CONST type_specifier .)
    RSPAREN         reduce using rule 167 (type_specifier_ -> CONST type_specifier .)
    EQUAL           reduce using rule 167 (type_specifier_ -> CONST type_specifier .)
    MULTEQOP        reduce using rule 167 (type_specifier_ -> CONST type_specifier .)
    DIVEQOP         reduce using rule 167 (type_specifier_ -> CONST type_specifier .)
    MODEQOP         reduce using rule 167 (type_specifier_ -> CONST type_specifier .)
    PLUSEQOP        reduce using rule 167 (type_specifier_ -> CONST type_specifier .)
    MINUSEQOP       reduce using rule 167 (type_specifier_ -> CONST type_specifier .)
    LSHIFTEQOP      reduce using rule 167 (type_specifier_ -> CONST type_specifier .)
    RSHIFTEQOP      reduce using rule 167 (type_specifier_ -> CONST type_specifier .)
    BANDEQOP        reduce using rule 167 (type_specifier_ -> CONST type_specifier .)
    BOREQOP         reduce using rule 167 (type_specifier_ -> CONST type_specifier .)
    RCPAREN         reduce using rule 167 (type_specifier_ -> CONST type_specifier .)
    COLON           reduce using rule 167 (type_specifier_ -> CONST type_specifier .)


state 56

    (184) complex_type_specifier -> class_key . IDENTIFIER
    (185) complex_type_specifier -> class_key . IDENTIFIER template_class_name

    IDENTIFIER      shift and go to state 73


state 57

    (285) asm_declaration -> ASM LPAREN . STRING_L RPAREN SEMICOLON

    STRING_L        shift and go to state 74


state 58

    (202) class_define_specifier -> class_head LCPAREN . member_list RCPAREN
    (203) class_define_specifier -> class_head LCPAREN . RCPAREN
    (204) member_list -> . member_access_list
    (205) member_list -> . access_list
    (206) member_list -> . member_list access_list
    (212) member_access_list -> . member_declaration member_access_list
    (213) member_access_list -> . member_declaration
    (210) access_list -> . access_specifier COLON member_access_list
    (211) access_list -> . access_specifier COLON
    (214) member_declaration -> . type_specifier_ member_declarator_list SEMICOLON
    (215) member_declaration -> . member_declarator_list SEMICOLON
    (216) member_declaration -> . type_specifier_ SEMICOLON
    (217) member_declaration -> . SEMICOLON
    (218) member_declaration -> . function_definition
    (219) member_declaration -> . class_define_specifier SEMICOLON
    (207) access_specifier -> . PRIVATE
    (208) access_specifier -> . PROTECTED
    (209) access_specifier -> . PUBLIC
    (167) type_specifier_ -> . CONST type_specifier
    (168) type_specifier_ -> . type_specifier
    (220) member_declarator_list -> . member_declarator
    (221) member_declarator_list -> . member_declarator_list COMMA member_declarator
    (224) function_definition -> . type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope
    (202) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (203) class_define_specifier -> . class_head LCPAREN RCPAREN
    (171) type_specifier -> . simple_type_name
    (172) type_specifier -> . complex_type_specifier
    (222) member_declarator -> . declarator pure_specifier
    (223) member_declarator -> . declarator
    (189) class_head -> . class_key IDENTIFIER base_spec
    (190) class_head -> . class_key IDENTIFIER
    (173) simple_type_name -> . CHAR
    (174) simple_type_name -> . SHORT
    (175) simple_type_name -> . INT
    (176) simple_type_name -> . LONG
    (177) simple_type_name -> . SIGNED
    (178) simple_type_name -> . UNSIGNED
    (179) simple_type_name -> . FLOAT
    (180) simple_type_name -> . DOUBLE
    (181) simple_type_name -> . VOID
    (182) simple_type_name -> . STRING
    (183) simple_type_name -> . AUTO
    (184) complex_type_specifier -> . class_key IDENTIFIER
    (185) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (186) complex_type_specifier -> . TYPE IDENTIFIER
    (187) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (112) declarator -> . name
    (113) declarator -> . unary2_operator declarator
    (114) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (115) declarator -> . declarator LSPAREN RSPAREN
    (200) class_key -> . CLASS
    (201) class_key -> . STRUCT
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP

    RCPAREN         shift and go to state 76
    SEMICOLON       shift and go to state 83
    PRIVATE         shift and go to state 86
    PROTECTED       shift and go to state 87
    PUBLIC          shift and go to state 88
    CONST           shift and go to state 16
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53

    class_head                     shift and go to state 19
    member_list                    shift and go to state 75
    member_access_list             shift and go to state 77
    access_list                    shift and go to state 78
    member_declaration             shift and go to state 79
    access_specifier               shift and go to state 80
    type_specifier_                shift and go to state 81
    member_declarator_list         shift and go to state 82
    function_definition            shift and go to state 84
    class_define_specifier         shift and go to state 85
    type_specifier                 shift and go to state 17
    member_declarator              shift and go to state 89
    declarator                     shift and go to state 90
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 24
    name                           shift and go to state 48
    unary2_operator                shift and go to state 49

state 59

    (270) template_declaration -> TEMPLATE LTEMPLATE . template_argument_list RTEMPLATE declaration
    (271) template_argument_list -> . argument_declaration
    (272) template_argument_list -> . template_argument_list COMMA argument_declaration
    (120) argument_declaration -> . type_specifier_ declarator
    (121) argument_declaration -> . type_specifier_ declarator EQUAL expression
    (122) argument_declaration -> . type_specifier_ abstract_declarator
    (123) argument_declaration -> . type_specifier_
    (167) type_specifier_ -> . CONST type_specifier
    (168) type_specifier_ -> . type_specifier
    (171) type_specifier -> . simple_type_name
    (172) type_specifier -> . complex_type_specifier
    (173) simple_type_name -> . CHAR
    (174) simple_type_name -> . SHORT
    (175) simple_type_name -> . INT
    (176) simple_type_name -> . LONG
    (177) simple_type_name -> . SIGNED
    (178) simple_type_name -> . UNSIGNED
    (179) simple_type_name -> . FLOAT
    (180) simple_type_name -> . DOUBLE
    (181) simple_type_name -> . VOID
    (182) simple_type_name -> . STRING
    (183) simple_type_name -> . AUTO
    (184) complex_type_specifier -> . class_key IDENTIFIER
    (185) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (186) complex_type_specifier -> . TYPE IDENTIFIER
    (187) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (200) class_key -> . CLASS
    (201) class_key -> . STRUCT

    CONST           shift and go to state 16
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38

    template_argument_list         shift and go to state 91
    argument_declaration           shift and go to state 92
    type_specifier_                shift and go to state 93
    type_specifier                 shift and go to state 17
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 56

state 60

    (169) typedef_declarator -> TYPEDEF type_specifier_ . abstract_declarator IDENTIFIER SEMICOLON
    (170) typedef_declarator -> TYPEDEF type_specifier_ . IDENTIFIER SEMICOLON
    (106) abstract_declarator -> . unary2_operator
    (107) abstract_declarator -> . unary2_operator abstract_declarator
    (108) abstract_declarator -> . LSPAREN constant_expression RSPAREN
    (109) abstract_declarator -> . abstract_declarator LSPAREN constant_expression RSPAREN
    (110) abstract_declarator -> . LSPAREN RSPAREN
    (111) abstract_declarator -> . abstract_declarator LSPAREN RSPAREN
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP

    IDENTIFIER      shift and go to state 95
    LSPAREN         shift and go to state 97
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53

    abstract_declarator            shift and go to state 94
    unary2_operator                shift and go to state 96

state 61

    (189) class_head -> class_key IDENTIFIER . base_spec
    (190) class_head -> class_key IDENTIFIER .
    (184) complex_type_specifier -> class_key IDENTIFIER .
    (185) complex_type_specifier -> class_key IDENTIFIER . template_class_name
    (191) base_spec -> . COLON base_list
    (162) template_class_name -> . LTEMPLATE template_arg_list RTEMPLATE

    LCPAREN         reduce using rule 190 (class_head -> class_key IDENTIFIER .)
    IDENTIFIER      reduce using rule 184 (complex_type_specifier -> class_key IDENTIFIER .)
    DOUBLEBNOP      reduce using rule 184 (complex_type_specifier -> class_key IDENTIFIER .)
    MULTOP          reduce using rule 184 (complex_type_specifier -> class_key IDENTIFIER .)
    BANDOP          reduce using rule 184 (complex_type_specifier -> class_key IDENTIFIER .)
    SEMICOLON       reduce using rule 184 (complex_type_specifier -> class_key IDENTIFIER .)
    COLON           shift and go to state 100
    LTEMPLATE       shift and go to state 101

    base_spec                      shift and go to state 98
    template_class_name            shift and go to state 99

state 62

    (186) complex_type_specifier -> TYPE IDENTIFIER .
    (187) complex_type_specifier -> TYPE IDENTIFIER . template_class_name
    (162) template_class_name -> . LTEMPLATE template_arg_list RTEMPLATE

    IDENTIFIER      reduce using rule 186 (complex_type_specifier -> TYPE IDENTIFIER .)
    DOUBLEBNOP      reduce using rule 186 (complex_type_specifier -> TYPE IDENTIFIER .)
    MULTOP          reduce using rule 186 (complex_type_specifier -> TYPE IDENTIFIER .)
    BANDOP          reduce using rule 186 (complex_type_specifier -> TYPE IDENTIFIER .)
    LSPAREN         reduce using rule 186 (complex_type_specifier -> TYPE IDENTIFIER .)
    SEMICOLON       reduce using rule 186 (complex_type_specifier -> TYPE IDENTIFIER .)
    RTEMPLATE       reduce using rule 186 (complex_type_specifier -> TYPE IDENTIFIER .)
    COMMA           reduce using rule 186 (complex_type_specifier -> TYPE IDENTIFIER .)
    RPAREN          reduce using rule 186 (complex_type_specifier -> TYPE IDENTIFIER .)
    LPAREN          reduce using rule 186 (complex_type_specifier -> TYPE IDENTIFIER .)
    DIVOP           reduce using rule 186 (complex_type_specifier -> TYPE IDENTIFIER .)
    MODOP           reduce using rule 186 (complex_type_specifier -> TYPE IDENTIFIER .)
    PLUSOP          reduce using rule 186 (complex_type_specifier -> TYPE IDENTIFIER .)
    MINUSOP         reduce using rule 186 (complex_type_specifier -> TYPE IDENTIFIER .)
    LSHIFT          reduce using rule 186 (complex_type_specifier -> TYPE IDENTIFIER .)
    RSHIFT          reduce using rule 186 (complex_type_specifier -> TYPE IDENTIFIER .)
    LTCOMP          reduce using rule 186 (complex_type_specifier -> TYPE IDENTIFIER .)
    GTCOMP          reduce using rule 186 (complex_type_specifier -> TYPE IDENTIFIER .)
    LTECOMP         reduce using rule 186 (complex_type_specifier -> TYPE IDENTIFIER .)
    GTECOMP         reduce using rule 186 (complex_type_specifier -> TYPE IDENTIFIER .)
    EQCOMP          reduce using rule 186 (complex_type_specifier -> TYPE IDENTIFIER .)
    NEQCOMP         reduce using rule 186 (complex_type_specifier -> TYPE IDENTIFIER .)
    XOROP           reduce using rule 186 (complex_type_specifier -> TYPE IDENTIFIER .)
    OROP            reduce using rule 186 (complex_type_specifier -> TYPE IDENTIFIER .)
    ANDOP           reduce using rule 186 (complex_type_specifier -> TYPE IDENTIFIER .)
    QUESMARK        reduce using rule 186 (complex_type_specifier -> TYPE IDENTIFIER .)
    RSPAREN         reduce using rule 186 (complex_type_specifier -> TYPE IDENTIFIER .)
    EQUAL           reduce using rule 186 (complex_type_specifier -> TYPE IDENTIFIER .)
    MULTEQOP        reduce using rule 186 (complex_type_specifier -> TYPE IDENTIFIER .)
    DIVEQOP         reduce using rule 186 (complex_type_specifier -> TYPE IDENTIFIER .)
    MODEQOP         reduce using rule 186 (complex_type_specifier -> TYPE IDENTIFIER .)
    PLUSEQOP        reduce using rule 186 (complex_type_specifier -> TYPE IDENTIFIER .)
    MINUSEQOP       reduce using rule 186 (complex_type_specifier -> TYPE IDENTIFIER .)
    LSHIFTEQOP      reduce using rule 186 (complex_type_specifier -> TYPE IDENTIFIER .)
    RSHIFTEQOP      reduce using rule 186 (complex_type_specifier -> TYPE IDENTIFIER .)
    BANDEQOP        reduce using rule 186 (complex_type_specifier -> TYPE IDENTIFIER .)
    BOREQOP         reduce using rule 186 (complex_type_specifier -> TYPE IDENTIFIER .)
    RCPAREN         reduce using rule 186 (complex_type_specifier -> TYPE IDENTIFIER .)
    COLON           reduce using rule 186 (complex_type_specifier -> TYPE IDENTIFIER .)
    LTEMPLATE       shift and go to state 101

    template_class_name            shift and go to state 102

state 63

    (4) control_line_stmt -> include_control LTCOMP STRING_L . GTCOMP

    GTCOMP          shift and go to state 103


state 64

    (263) declaration -> type_specifier_ declarator_list SEMICOLON .

    CONST           reduce using rule 263 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    ASM             reduce using rule 263 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    TEMPLATE        reduce using rule 263 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    TYPEDEF         reduce using rule 263 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    CHAR            reduce using rule 263 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    SHORT           reduce using rule 263 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    INT             reduce using rule 263 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    LONG            reduce using rule 263 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    SIGNED          reduce using rule 263 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    UNSIGNED        reduce using rule 263 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    FLOAT           reduce using rule 263 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    DOUBLE          reduce using rule 263 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    VOID            reduce using rule 263 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    STRING          reduce using rule 263 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    AUTO            reduce using rule 263 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    TYPE            reduce using rule 263 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    CLASS           reduce using rule 263 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    STRUCT          reduce using rule 263 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    $end            reduce using rule 263 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    RCPAREN         reduce using rule 263 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    SEMICOLON       reduce using rule 263 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    IF              reduce using rule 263 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    SWITCH          reduce using rule 263 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    WHILE           reduce using rule 263 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    DO              reduce using rule 263 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    FOR             reduce using rule 263 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    BREAK           reduce using rule 263 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    CONTINUE        reduce using rule 263 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    RETURN          reduce using rule 263 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    GOTO            reduce using rule 263 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    TRY             reduce using rule 263 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    THROW           reduce using rule 263 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    DPLUSOP         reduce using rule 263 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    DMINUSOP        reduce using rule 263 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    SIZEOF          reduce using rule 263 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    PLUSOP          reduce using rule 263 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    MINUSOP         reduce using rule 263 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    NOTSYM          reduce using rule 263 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    BNOP            reduce using rule 263 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    MULTOP          reduce using rule 263 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    BANDOP          reduce using rule 263 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    NEW             reduce using rule 263 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    DELETE          reduce using rule 263 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    THIS            reduce using rule 263 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    LPAREN          reduce using rule 263 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    IDENTIFIER      reduce using rule 263 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    DOUBLEBNOP      reduce using rule 263 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    STRING_L        reduce using rule 263 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    NUMBER          reduce using rule 263 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    SCHAR           reduce using rule 263 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    LCPAREN         reduce using rule 263 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    CASE            reduce using rule 263 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    DEFAULT         reduce using rule 263 (declaration -> type_specifier_ declarator_list SEMICOLON .)


state 65

    (274) declarator_list -> declarator_list COMMA . init_declarator
    (275) init_declarator -> . declarator initializer
    (276) init_declarator -> . declarator
    (112) declarator -> . name
    (113) declarator -> . unary2_operator declarator
    (114) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (115) declarator -> . declarator LSPAREN RSPAREN
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP

    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53

    init_declarator                shift and go to state 104
    declarator                     shift and go to state 105
    name                           shift and go to state 48
    unary2_operator                shift and go to state 49

state 66

    (224) function_definition -> type_specifier_ declarator func_push_scope . arg_list RPAREN fct_body pop_scope
    (225) function_decl -> type_specifier_ declarator func_push_scope . arg_list RPAREN SEMICOLON pop_scope
    (116) arg_list -> . argument_declaration_list
    (117) arg_list -> .
    (118) argument_declaration_list -> . argument_declaration
    (119) argument_declaration_list -> . argument_declaration COMMA argument_declaration_list
    (120) argument_declaration -> . type_specifier_ declarator
    (121) argument_declaration -> . type_specifier_ declarator EQUAL expression
    (122) argument_declaration -> . type_specifier_ abstract_declarator
    (123) argument_declaration -> . type_specifier_
    (167) type_specifier_ -> . CONST type_specifier
    (168) type_specifier_ -> . type_specifier
    (171) type_specifier -> . simple_type_name
    (172) type_specifier -> . complex_type_specifier
    (173) simple_type_name -> . CHAR
    (174) simple_type_name -> . SHORT
    (175) simple_type_name -> . INT
    (176) simple_type_name -> . LONG
    (177) simple_type_name -> . SIGNED
    (178) simple_type_name -> . UNSIGNED
    (179) simple_type_name -> . FLOAT
    (180) simple_type_name -> . DOUBLE
    (181) simple_type_name -> . VOID
    (182) simple_type_name -> . STRING
    (183) simple_type_name -> . AUTO
    (184) complex_type_specifier -> . class_key IDENTIFIER
    (185) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (186) complex_type_specifier -> . TYPE IDENTIFIER
    (187) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (200) class_key -> . CLASS
    (201) class_key -> . STRUCT

    RPAREN          reduce using rule 117 (arg_list -> .)
    CONST           shift and go to state 16
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38

    type_specifier_                shift and go to state 93
    arg_list                       shift and go to state 106
    argument_declaration_list      shift and go to state 107
    argument_declaration           shift and go to state 108
    type_specifier                 shift and go to state 17
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 56

state 67

    (114) declarator -> declarator LSPAREN . constant_expression RSPAREN
    (115) declarator -> declarator LSPAREN . RSPAREN
    (12) constant_expression -> . conditional_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR

    RSPAREN         shift and go to state 110
    LPAREN          shift and go to state 126
    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    THIS            shift and go to state 142
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    constant_expression            shift and go to state 109
    conditional_expression         shift and go to state 111
    logical_OR_expression          shift and go to state 112
    logical_AND_expression         shift and go to state 113
    inclusive_OR_expression        shift and go to state 114
    exclusive_OR_expression        shift and go to state 115
    AND_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121
    cast_expression                shift and go to state 124
    unary_expression               shift and go to state 125
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    literal                        shift and go to state 141

state 68

    (275) init_declarator -> declarator initializer .

    SEMICOLON       reduce using rule 275 (init_declarator -> declarator initializer .)
    COMMA           reduce using rule 275 (init_declarator -> declarator initializer .)


state 69

    (226) func_push_scope -> LPAREN .
    (280) initializer -> LPAREN . expression_list RPAREN
    (286) expression_list -> . assignment_expression
    (287) expression_list -> . expression_list COMMA assignment_expression
    (48) assignment_expression -> . conditional_expression
    (49) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression

    CONST           reduce using rule 226 (func_push_scope -> LPAREN .)
    CHAR            reduce using rule 226 (func_push_scope -> LPAREN .)
    SHORT           reduce using rule 226 (func_push_scope -> LPAREN .)
    INT             reduce using rule 226 (func_push_scope -> LPAREN .)
    LONG            reduce using rule 226 (func_push_scope -> LPAREN .)
    SIGNED          reduce using rule 226 (func_push_scope -> LPAREN .)
    UNSIGNED        reduce using rule 226 (func_push_scope -> LPAREN .)
    FLOAT           reduce using rule 226 (func_push_scope -> LPAREN .)
    DOUBLE          reduce using rule 226 (func_push_scope -> LPAREN .)
    VOID            reduce using rule 226 (func_push_scope -> LPAREN .)
    STRING          reduce using rule 226 (func_push_scope -> LPAREN .)
    AUTO            reduce using rule 226 (func_push_scope -> LPAREN .)
    TYPE            reduce using rule 226 (func_push_scope -> LPAREN .)
    CLASS           reduce using rule 226 (func_push_scope -> LPAREN .)
    STRUCT          reduce using rule 226 (func_push_scope -> LPAREN .)
    RPAREN          reduce using rule 226 (func_push_scope -> LPAREN .)
    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    THIS            shift and go to state 142
    LPAREN          shift and go to state 146
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    expression_list                shift and go to state 147
    assignment_expression          shift and go to state 148
    conditional_expression         shift and go to state 149
    unary_expression               shift and go to state 150
    logical_OR_expression          shift and go to state 112
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    cast_expression                shift and go to state 124
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    logical_AND_expression         shift and go to state 113
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    inclusive_OR_expression        shift and go to state 114
    literal                        shift and go to state 141
    exclusive_OR_expression        shift and go to state 115
    AND_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 70

    (277) initializer -> EQUAL . assignment_expression
    (278) initializer -> EQUAL . LCPAREN initializer_list RCPAREN
    (279) initializer -> EQUAL . LCPAREN initializer_list COMMA RCPAREN
    (48) assignment_expression -> . conditional_expression
    (49) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LCPAREN         shift and go to state 152
    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    THIS            shift and go to state 142
    LPAREN          shift and go to state 146
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    assignment_expression          shift and go to state 151
    conditional_expression         shift and go to state 149
    unary_expression               shift and go to state 150
    logical_OR_expression          shift and go to state 112
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    cast_expression                shift and go to state 124
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    logical_AND_expression         shift and go to state 113
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    inclusive_OR_expression        shift and go to state 114
    literal                        shift and go to state 141
    exclusive_OR_expression        shift and go to state 115
    AND_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 71

    (113) declarator -> unary2_operator declarator .
    (114) declarator -> declarator . LSPAREN constant_expression RSPAREN
    (115) declarator -> declarator . LSPAREN RSPAREN

    LSPAREN         reduce using rule 113 (declarator -> unary2_operator declarator .)
    LPAREN          reduce using rule 113 (declarator -> unary2_operator declarator .)
    EQUAL           reduce using rule 113 (declarator -> unary2_operator declarator .)
    SEMICOLON       reduce using rule 113 (declarator -> unary2_operator declarator .)
    COMMA           reduce using rule 113 (declarator -> unary2_operator declarator .)
    RTEMPLATE       reduce using rule 113 (declarator -> unary2_operator declarator .)
    RPAREN          reduce using rule 113 (declarator -> unary2_operator declarator .)

  ! LSPAREN         [ shift and go to state 67 ]


state 72

    (125) name -> DOUBLEBNOP IDENTIFIER .

    LSPAREN         reduce using rule 125 (name -> DOUBLEBNOP IDENTIFIER .)
    LPAREN          reduce using rule 125 (name -> DOUBLEBNOP IDENTIFIER .)
    EQUAL           reduce using rule 125 (name -> DOUBLEBNOP IDENTIFIER .)
    SEMICOLON       reduce using rule 125 (name -> DOUBLEBNOP IDENTIFIER .)
    COMMA           reduce using rule 125 (name -> DOUBLEBNOP IDENTIFIER .)
    DOT             reduce using rule 125 (name -> DOUBLEBNOP IDENTIFIER .)
    ARROW           reduce using rule 125 (name -> DOUBLEBNOP IDENTIFIER .)
    DPLUSOP         reduce using rule 125 (name -> DOUBLEBNOP IDENTIFIER .)
    DMINUSOP        reduce using rule 125 (name -> DOUBLEBNOP IDENTIFIER .)
    LTEMPLATE       reduce using rule 125 (name -> DOUBLEBNOP IDENTIFIER .)
    MULTOP          reduce using rule 125 (name -> DOUBLEBNOP IDENTIFIER .)
    DIVOP           reduce using rule 125 (name -> DOUBLEBNOP IDENTIFIER .)
    MODOP           reduce using rule 125 (name -> DOUBLEBNOP IDENTIFIER .)
    PLUSOP          reduce using rule 125 (name -> DOUBLEBNOP IDENTIFIER .)
    MINUSOP         reduce using rule 125 (name -> DOUBLEBNOP IDENTIFIER .)
    LSHIFT          reduce using rule 125 (name -> DOUBLEBNOP IDENTIFIER .)
    RSHIFT          reduce using rule 125 (name -> DOUBLEBNOP IDENTIFIER .)
    LTCOMP          reduce using rule 125 (name -> DOUBLEBNOP IDENTIFIER .)
    GTCOMP          reduce using rule 125 (name -> DOUBLEBNOP IDENTIFIER .)
    LTECOMP         reduce using rule 125 (name -> DOUBLEBNOP IDENTIFIER .)
    GTECOMP         reduce using rule 125 (name -> DOUBLEBNOP IDENTIFIER .)
    EQCOMP          reduce using rule 125 (name -> DOUBLEBNOP IDENTIFIER .)
    NEQCOMP         reduce using rule 125 (name -> DOUBLEBNOP IDENTIFIER .)
    BANDOP          reduce using rule 125 (name -> DOUBLEBNOP IDENTIFIER .)
    XOROP           reduce using rule 125 (name -> DOUBLEBNOP IDENTIFIER .)
    OROP            reduce using rule 125 (name -> DOUBLEBNOP IDENTIFIER .)
    ANDOP           reduce using rule 125 (name -> DOUBLEBNOP IDENTIFIER .)
    QUESMARK        reduce using rule 125 (name -> DOUBLEBNOP IDENTIFIER .)
    RSPAREN         reduce using rule 125 (name -> DOUBLEBNOP IDENTIFIER .)
    MULTEQOP        reduce using rule 125 (name -> DOUBLEBNOP IDENTIFIER .)
    DIVEQOP         reduce using rule 125 (name -> DOUBLEBNOP IDENTIFIER .)
    MODEQOP         reduce using rule 125 (name -> DOUBLEBNOP IDENTIFIER .)
    PLUSEQOP        reduce using rule 125 (name -> DOUBLEBNOP IDENTIFIER .)
    MINUSEQOP       reduce using rule 125 (name -> DOUBLEBNOP IDENTIFIER .)
    LSHIFTEQOP      reduce using rule 125 (name -> DOUBLEBNOP IDENTIFIER .)
    RSHIFTEQOP      reduce using rule 125 (name -> DOUBLEBNOP IDENTIFIER .)
    BANDEQOP        reduce using rule 125 (name -> DOUBLEBNOP IDENTIFIER .)
    BOREQOP         reduce using rule 125 (name -> DOUBLEBNOP IDENTIFIER .)
    RPAREN          reduce using rule 125 (name -> DOUBLEBNOP IDENTIFIER .)
    RTEMPLATE       reduce using rule 125 (name -> DOUBLEBNOP IDENTIFIER .)
    RCPAREN         reduce using rule 125 (name -> DOUBLEBNOP IDENTIFIER .)
    COLON           reduce using rule 125 (name -> DOUBLEBNOP IDENTIFIER .)


state 73

    (184) complex_type_specifier -> class_key IDENTIFIER .
    (185) complex_type_specifier -> class_key IDENTIFIER . template_class_name
    (162) template_class_name -> . LTEMPLATE template_arg_list RTEMPLATE

    IDENTIFIER      reduce using rule 184 (complex_type_specifier -> class_key IDENTIFIER .)
    DOUBLEBNOP      reduce using rule 184 (complex_type_specifier -> class_key IDENTIFIER .)
    MULTOP          reduce using rule 184 (complex_type_specifier -> class_key IDENTIFIER .)
    BANDOP          reduce using rule 184 (complex_type_specifier -> class_key IDENTIFIER .)
    LSPAREN         reduce using rule 184 (complex_type_specifier -> class_key IDENTIFIER .)
    SEMICOLON       reduce using rule 184 (complex_type_specifier -> class_key IDENTIFIER .)
    RTEMPLATE       reduce using rule 184 (complex_type_specifier -> class_key IDENTIFIER .)
    COMMA           reduce using rule 184 (complex_type_specifier -> class_key IDENTIFIER .)
    RPAREN          reduce using rule 184 (complex_type_specifier -> class_key IDENTIFIER .)
    LPAREN          reduce using rule 184 (complex_type_specifier -> class_key IDENTIFIER .)
    DIVOP           reduce using rule 184 (complex_type_specifier -> class_key IDENTIFIER .)
    MODOP           reduce using rule 184 (complex_type_specifier -> class_key IDENTIFIER .)
    PLUSOP          reduce using rule 184 (complex_type_specifier -> class_key IDENTIFIER .)
    MINUSOP         reduce using rule 184 (complex_type_specifier -> class_key IDENTIFIER .)
    LSHIFT          reduce using rule 184 (complex_type_specifier -> class_key IDENTIFIER .)
    RSHIFT          reduce using rule 184 (complex_type_specifier -> class_key IDENTIFIER .)
    LTCOMP          reduce using rule 184 (complex_type_specifier -> class_key IDENTIFIER .)
    GTCOMP          reduce using rule 184 (complex_type_specifier -> class_key IDENTIFIER .)
    LTECOMP         reduce using rule 184 (complex_type_specifier -> class_key IDENTIFIER .)
    GTECOMP         reduce using rule 184 (complex_type_specifier -> class_key IDENTIFIER .)
    EQCOMP          reduce using rule 184 (complex_type_specifier -> class_key IDENTIFIER .)
    NEQCOMP         reduce using rule 184 (complex_type_specifier -> class_key IDENTIFIER .)
    XOROP           reduce using rule 184 (complex_type_specifier -> class_key IDENTIFIER .)
    OROP            reduce using rule 184 (complex_type_specifier -> class_key IDENTIFIER .)
    ANDOP           reduce using rule 184 (complex_type_specifier -> class_key IDENTIFIER .)
    QUESMARK        reduce using rule 184 (complex_type_specifier -> class_key IDENTIFIER .)
    RSPAREN         reduce using rule 184 (complex_type_specifier -> class_key IDENTIFIER .)
    EQUAL           reduce using rule 184 (complex_type_specifier -> class_key IDENTIFIER .)
    MULTEQOP        reduce using rule 184 (complex_type_specifier -> class_key IDENTIFIER .)
    DIVEQOP         reduce using rule 184 (complex_type_specifier -> class_key IDENTIFIER .)
    MODEQOP         reduce using rule 184 (complex_type_specifier -> class_key IDENTIFIER .)
    PLUSEQOP        reduce using rule 184 (complex_type_specifier -> class_key IDENTIFIER .)
    MINUSEQOP       reduce using rule 184 (complex_type_specifier -> class_key IDENTIFIER .)
    LSHIFTEQOP      reduce using rule 184 (complex_type_specifier -> class_key IDENTIFIER .)
    RSHIFTEQOP      reduce using rule 184 (complex_type_specifier -> class_key IDENTIFIER .)
    BANDEQOP        reduce using rule 184 (complex_type_specifier -> class_key IDENTIFIER .)
    BOREQOP         reduce using rule 184 (complex_type_specifier -> class_key IDENTIFIER .)
    RCPAREN         reduce using rule 184 (complex_type_specifier -> class_key IDENTIFIER .)
    COLON           reduce using rule 184 (complex_type_specifier -> class_key IDENTIFIER .)
    LTEMPLATE       shift and go to state 101

    template_class_name            shift and go to state 99

state 74

    (285) asm_declaration -> ASM LPAREN STRING_L . RPAREN SEMICOLON

    RPAREN          shift and go to state 153


state 75

    (202) class_define_specifier -> class_head LCPAREN member_list . RCPAREN
    (206) member_list -> member_list . access_list
    (210) access_list -> . access_specifier COLON member_access_list
    (211) access_list -> . access_specifier COLON
    (207) access_specifier -> . PRIVATE
    (208) access_specifier -> . PROTECTED
    (209) access_specifier -> . PUBLIC

    RCPAREN         shift and go to state 154
    PRIVATE         shift and go to state 86
    PROTECTED       shift and go to state 87
    PUBLIC          shift and go to state 88

    access_list                    shift and go to state 155
    access_specifier               shift and go to state 80

state 76

    (203) class_define_specifier -> class_head LCPAREN RCPAREN .

    SEMICOLON       reduce using rule 203 (class_define_specifier -> class_head LCPAREN RCPAREN .)


state 77

    (204) member_list -> member_access_list .

    RCPAREN         reduce using rule 204 (member_list -> member_access_list .)
    PRIVATE         reduce using rule 204 (member_list -> member_access_list .)
    PROTECTED       reduce using rule 204 (member_list -> member_access_list .)
    PUBLIC          reduce using rule 204 (member_list -> member_access_list .)


state 78

    (205) member_list -> access_list .

    RCPAREN         reduce using rule 205 (member_list -> access_list .)
    PRIVATE         reduce using rule 205 (member_list -> access_list .)
    PROTECTED       reduce using rule 205 (member_list -> access_list .)
    PUBLIC          reduce using rule 205 (member_list -> access_list .)


state 79

    (212) member_access_list -> member_declaration . member_access_list
    (213) member_access_list -> member_declaration .
    (212) member_access_list -> . member_declaration member_access_list
    (213) member_access_list -> . member_declaration
    (214) member_declaration -> . type_specifier_ member_declarator_list SEMICOLON
    (215) member_declaration -> . member_declarator_list SEMICOLON
    (216) member_declaration -> . type_specifier_ SEMICOLON
    (217) member_declaration -> . SEMICOLON
    (218) member_declaration -> . function_definition
    (219) member_declaration -> . class_define_specifier SEMICOLON
    (167) type_specifier_ -> . CONST type_specifier
    (168) type_specifier_ -> . type_specifier
    (220) member_declarator_list -> . member_declarator
    (221) member_declarator_list -> . member_declarator_list COMMA member_declarator
    (224) function_definition -> . type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope
    (202) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (203) class_define_specifier -> . class_head LCPAREN RCPAREN
    (171) type_specifier -> . simple_type_name
    (172) type_specifier -> . complex_type_specifier
    (222) member_declarator -> . declarator pure_specifier
    (223) member_declarator -> . declarator
    (189) class_head -> . class_key IDENTIFIER base_spec
    (190) class_head -> . class_key IDENTIFIER
    (173) simple_type_name -> . CHAR
    (174) simple_type_name -> . SHORT
    (175) simple_type_name -> . INT
    (176) simple_type_name -> . LONG
    (177) simple_type_name -> . SIGNED
    (178) simple_type_name -> . UNSIGNED
    (179) simple_type_name -> . FLOAT
    (180) simple_type_name -> . DOUBLE
    (181) simple_type_name -> . VOID
    (182) simple_type_name -> . STRING
    (183) simple_type_name -> . AUTO
    (184) complex_type_specifier -> . class_key IDENTIFIER
    (185) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (186) complex_type_specifier -> . TYPE IDENTIFIER
    (187) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (112) declarator -> . name
    (113) declarator -> . unary2_operator declarator
    (114) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (115) declarator -> . declarator LSPAREN RSPAREN
    (200) class_key -> . CLASS
    (201) class_key -> . STRUCT
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP

    RCPAREN         reduce using rule 213 (member_access_list -> member_declaration .)
    PRIVATE         reduce using rule 213 (member_access_list -> member_declaration .)
    PROTECTED       reduce using rule 213 (member_access_list -> member_declaration .)
    PUBLIC          reduce using rule 213 (member_access_list -> member_declaration .)
    SEMICOLON       shift and go to state 83
    CONST           shift and go to state 16
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53

    member_declaration             shift and go to state 79
    member_access_list             shift and go to state 156
    type_specifier_                shift and go to state 81
    member_declarator_list         shift and go to state 82
    function_definition            shift and go to state 84
    class_define_specifier         shift and go to state 85
    type_specifier                 shift and go to state 17
    member_declarator              shift and go to state 89
    declarator                     shift and go to state 90
    class_head                     shift and go to state 19
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 24
    name                           shift and go to state 48
    unary2_operator                shift and go to state 49

state 80

    (210) access_list -> access_specifier . COLON member_access_list
    (211) access_list -> access_specifier . COLON

    COLON           shift and go to state 157


state 81

    (214) member_declaration -> type_specifier_ . member_declarator_list SEMICOLON
    (216) member_declaration -> type_specifier_ . SEMICOLON
    (224) function_definition -> type_specifier_ . declarator func_push_scope arg_list RPAREN fct_body pop_scope
    (220) member_declarator_list -> . member_declarator
    (221) member_declarator_list -> . member_declarator_list COMMA member_declarator
    (112) declarator -> . name
    (113) declarator -> . unary2_operator declarator
    (114) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (115) declarator -> . declarator LSPAREN RSPAREN
    (222) member_declarator -> . declarator pure_specifier
    (223) member_declarator -> . declarator
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP

    SEMICOLON       shift and go to state 159
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53

    member_declarator_list         shift and go to state 158
    declarator                     shift and go to state 160
    member_declarator              shift and go to state 89
    name                           shift and go to state 48
    unary2_operator                shift and go to state 49

state 82

    (215) member_declaration -> member_declarator_list . SEMICOLON
    (221) member_declarator_list -> member_declarator_list . COMMA member_declarator

    SEMICOLON       shift and go to state 161
    COMMA           shift and go to state 162


state 83

    (217) member_declaration -> SEMICOLON .

    SEMICOLON       reduce using rule 217 (member_declaration -> SEMICOLON .)
    CONST           reduce using rule 217 (member_declaration -> SEMICOLON .)
    CHAR            reduce using rule 217 (member_declaration -> SEMICOLON .)
    SHORT           reduce using rule 217 (member_declaration -> SEMICOLON .)
    INT             reduce using rule 217 (member_declaration -> SEMICOLON .)
    LONG            reduce using rule 217 (member_declaration -> SEMICOLON .)
    SIGNED          reduce using rule 217 (member_declaration -> SEMICOLON .)
    UNSIGNED        reduce using rule 217 (member_declaration -> SEMICOLON .)
    FLOAT           reduce using rule 217 (member_declaration -> SEMICOLON .)
    DOUBLE          reduce using rule 217 (member_declaration -> SEMICOLON .)
    VOID            reduce using rule 217 (member_declaration -> SEMICOLON .)
    STRING          reduce using rule 217 (member_declaration -> SEMICOLON .)
    AUTO            reduce using rule 217 (member_declaration -> SEMICOLON .)
    TYPE            reduce using rule 217 (member_declaration -> SEMICOLON .)
    CLASS           reduce using rule 217 (member_declaration -> SEMICOLON .)
    STRUCT          reduce using rule 217 (member_declaration -> SEMICOLON .)
    IDENTIFIER      reduce using rule 217 (member_declaration -> SEMICOLON .)
    DOUBLEBNOP      reduce using rule 217 (member_declaration -> SEMICOLON .)
    MULTOP          reduce using rule 217 (member_declaration -> SEMICOLON .)
    BANDOP          reduce using rule 217 (member_declaration -> SEMICOLON .)
    RCPAREN         reduce using rule 217 (member_declaration -> SEMICOLON .)
    PRIVATE         reduce using rule 217 (member_declaration -> SEMICOLON .)
    PROTECTED       reduce using rule 217 (member_declaration -> SEMICOLON .)
    PUBLIC          reduce using rule 217 (member_declaration -> SEMICOLON .)


state 84

    (218) member_declaration -> function_definition .

    SEMICOLON       reduce using rule 218 (member_declaration -> function_definition .)
    CONST           reduce using rule 218 (member_declaration -> function_definition .)
    CHAR            reduce using rule 218 (member_declaration -> function_definition .)
    SHORT           reduce using rule 218 (member_declaration -> function_definition .)
    INT             reduce using rule 218 (member_declaration -> function_definition .)
    LONG            reduce using rule 218 (member_declaration -> function_definition .)
    SIGNED          reduce using rule 218 (member_declaration -> function_definition .)
    UNSIGNED        reduce using rule 218 (member_declaration -> function_definition .)
    FLOAT           reduce using rule 218 (member_declaration -> function_definition .)
    DOUBLE          reduce using rule 218 (member_declaration -> function_definition .)
    VOID            reduce using rule 218 (member_declaration -> function_definition .)
    STRING          reduce using rule 218 (member_declaration -> function_definition .)
    AUTO            reduce using rule 218 (member_declaration -> function_definition .)
    TYPE            reduce using rule 218 (member_declaration -> function_definition .)
    CLASS           reduce using rule 218 (member_declaration -> function_definition .)
    STRUCT          reduce using rule 218 (member_declaration -> function_definition .)
    IDENTIFIER      reduce using rule 218 (member_declaration -> function_definition .)
    DOUBLEBNOP      reduce using rule 218 (member_declaration -> function_definition .)
    MULTOP          reduce using rule 218 (member_declaration -> function_definition .)
    BANDOP          reduce using rule 218 (member_declaration -> function_definition .)
    RCPAREN         reduce using rule 218 (member_declaration -> function_definition .)
    PRIVATE         reduce using rule 218 (member_declaration -> function_definition .)
    PROTECTED       reduce using rule 218 (member_declaration -> function_definition .)
    PUBLIC          reduce using rule 218 (member_declaration -> function_definition .)


state 85

    (219) member_declaration -> class_define_specifier . SEMICOLON

    SEMICOLON       shift and go to state 163


state 86

    (207) access_specifier -> PRIVATE .

    COLON           reduce using rule 207 (access_specifier -> PRIVATE .)
    CLASS           reduce using rule 207 (access_specifier -> PRIVATE .)
    STRUCT          reduce using rule 207 (access_specifier -> PRIVATE .)


state 87

    (208) access_specifier -> PROTECTED .

    COLON           reduce using rule 208 (access_specifier -> PROTECTED .)
    CLASS           reduce using rule 208 (access_specifier -> PROTECTED .)
    STRUCT          reduce using rule 208 (access_specifier -> PROTECTED .)


state 88

    (209) access_specifier -> PUBLIC .

    COLON           reduce using rule 209 (access_specifier -> PUBLIC .)
    CLASS           reduce using rule 209 (access_specifier -> PUBLIC .)
    STRUCT          reduce using rule 209 (access_specifier -> PUBLIC .)


state 89

    (220) member_declarator_list -> member_declarator .

    SEMICOLON       reduce using rule 220 (member_declarator_list -> member_declarator .)
    COMMA           reduce using rule 220 (member_declarator_list -> member_declarator .)


state 90

    (222) member_declarator -> declarator . pure_specifier
    (223) member_declarator -> declarator .
    (114) declarator -> declarator . LSPAREN constant_expression RSPAREN
    (115) declarator -> declarator . LSPAREN RSPAREN
    (188) pure_specifier -> . EQUAL NUMBER

    SEMICOLON       reduce using rule 223 (member_declarator -> declarator .)
    COMMA           reduce using rule 223 (member_declarator -> declarator .)
    LSPAREN         shift and go to state 67
    EQUAL           shift and go to state 165

    pure_specifier                 shift and go to state 164

state 91

    (270) template_declaration -> TEMPLATE LTEMPLATE template_argument_list . RTEMPLATE declaration
    (272) template_argument_list -> template_argument_list . COMMA argument_declaration

    RTEMPLATE       shift and go to state 166
    COMMA           shift and go to state 167


state 92

    (271) template_argument_list -> argument_declaration .

    RTEMPLATE       reduce using rule 271 (template_argument_list -> argument_declaration .)
    COMMA           reduce using rule 271 (template_argument_list -> argument_declaration .)


state 93

    (120) argument_declaration -> type_specifier_ . declarator
    (121) argument_declaration -> type_specifier_ . declarator EQUAL expression
    (122) argument_declaration -> type_specifier_ . abstract_declarator
    (123) argument_declaration -> type_specifier_ .
    (112) declarator -> . name
    (113) declarator -> . unary2_operator declarator
    (114) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (115) declarator -> . declarator LSPAREN RSPAREN
    (106) abstract_declarator -> . unary2_operator
    (107) abstract_declarator -> . unary2_operator abstract_declarator
    (108) abstract_declarator -> . LSPAREN constant_expression RSPAREN
    (109) abstract_declarator -> . abstract_declarator LSPAREN constant_expression RSPAREN
    (110) abstract_declarator -> . LSPAREN RSPAREN
    (111) abstract_declarator -> . abstract_declarator LSPAREN RSPAREN
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP

    RTEMPLATE       reduce using rule 123 (argument_declaration -> type_specifier_ .)
    COMMA           reduce using rule 123 (argument_declaration -> type_specifier_ .)
    RPAREN          reduce using rule 123 (argument_declaration -> type_specifier_ .)
    LSPAREN         shift and go to state 97
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53

    declarator                     shift and go to state 168
    abstract_declarator            shift and go to state 169
    name                           shift and go to state 48
    unary2_operator                shift and go to state 170

state 94

    (169) typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator . IDENTIFIER SEMICOLON
    (109) abstract_declarator -> abstract_declarator . LSPAREN constant_expression RSPAREN
    (111) abstract_declarator -> abstract_declarator . LSPAREN RSPAREN

    IDENTIFIER      shift and go to state 171
    LSPAREN         shift and go to state 172


state 95

    (170) typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 173


state 96

    (106) abstract_declarator -> unary2_operator .
    (107) abstract_declarator -> unary2_operator . abstract_declarator
    (106) abstract_declarator -> . unary2_operator
    (107) abstract_declarator -> . unary2_operator abstract_declarator
    (108) abstract_declarator -> . LSPAREN constant_expression RSPAREN
    (109) abstract_declarator -> . abstract_declarator LSPAREN constant_expression RSPAREN
    (110) abstract_declarator -> . LSPAREN RSPAREN
    (111) abstract_declarator -> . abstract_declarator LSPAREN RSPAREN
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP

    IDENTIFIER      reduce using rule 106 (abstract_declarator -> unary2_operator .)
    LSPAREN         reduce using rule 106 (abstract_declarator -> unary2_operator .)
    RTEMPLATE       reduce using rule 106 (abstract_declarator -> unary2_operator .)
    COMMA           reduce using rule 106 (abstract_declarator -> unary2_operator .)
    RPAREN          reduce using rule 106 (abstract_declarator -> unary2_operator .)
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53

  ! LSPAREN         [ shift and go to state 97 ]

    unary2_operator                shift and go to state 96
    abstract_declarator            shift and go to state 174

state 97

    (108) abstract_declarator -> LSPAREN . constant_expression RSPAREN
    (110) abstract_declarator -> LSPAREN . RSPAREN
    (12) constant_expression -> . conditional_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR

    RSPAREN         shift and go to state 176
    LPAREN          shift and go to state 126
    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    THIS            shift and go to state 142
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    constant_expression            shift and go to state 175
    conditional_expression         shift and go to state 111
    logical_OR_expression          shift and go to state 112
    logical_AND_expression         shift and go to state 113
    inclusive_OR_expression        shift and go to state 114
    exclusive_OR_expression        shift and go to state 115
    AND_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121
    cast_expression                shift and go to state 124
    unary_expression               shift and go to state 125
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    literal                        shift and go to state 141

state 98

    (189) class_head -> class_key IDENTIFIER base_spec .

    LCPAREN         reduce using rule 189 (class_head -> class_key IDENTIFIER base_spec .)


state 99

    (185) complex_type_specifier -> class_key IDENTIFIER template_class_name .

    IDENTIFIER      reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    DOUBLEBNOP      reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    MULTOP          reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    BANDOP          reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    LSPAREN         reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    SEMICOLON       reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    RTEMPLATE       reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    COMMA           reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    RPAREN          reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    LPAREN          reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    DIVOP           reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    MODOP           reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    PLUSOP          reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    MINUSOP         reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    LSHIFT          reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    RSHIFT          reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    LTCOMP          reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    GTCOMP          reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    LTECOMP         reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    GTECOMP         reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    EQCOMP          reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    NEQCOMP         reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    XOROP           reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    OROP            reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    ANDOP           reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    QUESMARK        reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    RSPAREN         reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    EQUAL           reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    MULTEQOP        reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    DIVEQOP         reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    MODEQOP         reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    PLUSEQOP        reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    MINUSEQOP       reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    LSHIFTEQOP      reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    RSHIFTEQOP      reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    BANDEQOP        reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    BOREQOP         reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    RCPAREN         reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    COLON           reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)


state 100

    (191) base_spec -> COLON . base_list
    (192) base_list -> . base_specifier
    (193) base_list -> . base_list COMMA base_specifier
    (194) base_specifier -> . class_key IDENTIFIER
    (195) base_specifier -> . class_key IDENTIFIER template_class_name
    (196) base_specifier -> . IDENTIFIER
    (197) base_specifier -> . IDENTIFIER template_class_name
    (198) base_specifier -> . access_specifier class_key IDENTIFIER
    (199) base_specifier -> . access_specifier class_key IDENTIFIER template_class_name
    (200) class_key -> . CLASS
    (201) class_key -> . STRUCT
    (207) access_specifier -> . PRIVATE
    (208) access_specifier -> . PROTECTED
    (209) access_specifier -> . PUBLIC

    IDENTIFIER      shift and go to state 180
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38
    PRIVATE         shift and go to state 86
    PROTECTED       shift and go to state 87
    PUBLIC          shift and go to state 88

    base_list                      shift and go to state 177
    base_specifier                 shift and go to state 178
    class_key                      shift and go to state 179
    access_specifier               shift and go to state 181

state 101

    (162) template_class_name -> LTEMPLATE . template_arg_list RTEMPLATE
    (163) template_arg_list -> . type_name
    (164) template_arg_list -> . template_arg_list COMMA type_name
    (165) type_name -> . type_specifier_ abstract_declarator
    (166) type_name -> . type_specifier_
    (167) type_specifier_ -> . CONST type_specifier
    (168) type_specifier_ -> . type_specifier
    (171) type_specifier -> . simple_type_name
    (172) type_specifier -> . complex_type_specifier
    (173) simple_type_name -> . CHAR
    (174) simple_type_name -> . SHORT
    (175) simple_type_name -> . INT
    (176) simple_type_name -> . LONG
    (177) simple_type_name -> . SIGNED
    (178) simple_type_name -> . UNSIGNED
    (179) simple_type_name -> . FLOAT
    (180) simple_type_name -> . DOUBLE
    (181) simple_type_name -> . VOID
    (182) simple_type_name -> . STRING
    (183) simple_type_name -> . AUTO
    (184) complex_type_specifier -> . class_key IDENTIFIER
    (185) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (186) complex_type_specifier -> . TYPE IDENTIFIER
    (187) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (200) class_key -> . CLASS
    (201) class_key -> . STRUCT

    CONST           shift and go to state 16
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38

    template_arg_list              shift and go to state 182
    type_name                      shift and go to state 183
    type_specifier_                shift and go to state 184
    type_specifier                 shift and go to state 17
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 56

state 102

    (187) complex_type_specifier -> TYPE IDENTIFIER template_class_name .

    IDENTIFIER      reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    DOUBLEBNOP      reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    MULTOP          reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    BANDOP          reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    LSPAREN         reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    SEMICOLON       reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    RTEMPLATE       reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    COMMA           reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    RPAREN          reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    LPAREN          reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    DIVOP           reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    MODOP           reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    PLUSOP          reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    MINUSOP         reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    LSHIFT          reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    RSHIFT          reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    LTCOMP          reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    GTCOMP          reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    LTECOMP         reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    GTECOMP         reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    EQCOMP          reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    NEQCOMP         reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    XOROP           reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    OROP            reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    ANDOP           reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    QUESMARK        reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    RSPAREN         reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    EQUAL           reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    MULTEQOP        reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    DIVEQOP         reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    MODEQOP         reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    PLUSEQOP        reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    MINUSEQOP       reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    LSHIFTEQOP      reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    RSHIFTEQOP      reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    BANDEQOP        reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    BOREQOP         reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    RCPAREN         reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    COLON           reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)


state 103

    (4) control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .

    HASHTAG         reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    CONST           reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    ASM             reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    TEMPLATE        reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    TYPEDEF         reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    CHAR            reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    SHORT           reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    INT             reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    LONG            reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    SIGNED          reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    UNSIGNED        reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    FLOAT           reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    DOUBLE          reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    VOID            reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    STRING          reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    AUTO            reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    TYPE            reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    CLASS           reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    STRUCT          reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)


state 104

    (274) declarator_list -> declarator_list COMMA init_declarator .

    SEMICOLON       reduce using rule 274 (declarator_list -> declarator_list COMMA init_declarator .)
    COMMA           reduce using rule 274 (declarator_list -> declarator_list COMMA init_declarator .)


state 105

    (275) init_declarator -> declarator . initializer
    (276) init_declarator -> declarator .
    (114) declarator -> declarator . LSPAREN constant_expression RSPAREN
    (115) declarator -> declarator . LSPAREN RSPAREN
    (277) initializer -> . EQUAL assignment_expression
    (278) initializer -> . EQUAL LCPAREN initializer_list RCPAREN
    (279) initializer -> . EQUAL LCPAREN initializer_list COMMA RCPAREN
    (280) initializer -> . LPAREN expression_list RPAREN

    SEMICOLON       reduce using rule 276 (init_declarator -> declarator .)
    COMMA           reduce using rule 276 (init_declarator -> declarator .)
    LSPAREN         shift and go to state 67
    EQUAL           shift and go to state 70
    LPAREN          shift and go to state 185

    initializer                    shift and go to state 68

state 106

    (224) function_definition -> type_specifier_ declarator func_push_scope arg_list . RPAREN fct_body pop_scope
    (225) function_decl -> type_specifier_ declarator func_push_scope arg_list . RPAREN SEMICOLON pop_scope

    RPAREN          shift and go to state 186


state 107

    (116) arg_list -> argument_declaration_list .

    RPAREN          reduce using rule 116 (arg_list -> argument_declaration_list .)


state 108

    (118) argument_declaration_list -> argument_declaration .
    (119) argument_declaration_list -> argument_declaration . COMMA argument_declaration_list

    RPAREN          reduce using rule 118 (argument_declaration_list -> argument_declaration .)
    COMMA           shift and go to state 187


state 109

    (114) declarator -> declarator LSPAREN constant_expression . RSPAREN

    RSPAREN         shift and go to state 188


state 110

    (115) declarator -> declarator LSPAREN RSPAREN .

    LSPAREN         reduce using rule 115 (declarator -> declarator LSPAREN RSPAREN .)
    LPAREN          reduce using rule 115 (declarator -> declarator LSPAREN RSPAREN .)
    EQUAL           reduce using rule 115 (declarator -> declarator LSPAREN RSPAREN .)
    SEMICOLON       reduce using rule 115 (declarator -> declarator LSPAREN RSPAREN .)
    COMMA           reduce using rule 115 (declarator -> declarator LSPAREN RSPAREN .)
    RTEMPLATE       reduce using rule 115 (declarator -> declarator LSPAREN RSPAREN .)
    RPAREN          reduce using rule 115 (declarator -> declarator LSPAREN RSPAREN .)


state 111

    (12) constant_expression -> conditional_expression .

    RSPAREN         reduce using rule 12 (constant_expression -> conditional_expression .)
    COLON           reduce using rule 12 (constant_expression -> conditional_expression .)


state 112

    (13) conditional_expression -> logical_OR_expression .
    (14) conditional_expression -> logical_OR_expression . QUESMARK expression COLON conditional_expression
    (16) logical_OR_expression -> logical_OR_expression . OROP logical_AND_expression

    RSPAREN         reduce using rule 13 (conditional_expression -> logical_OR_expression .)
    RPAREN          reduce using rule 13 (conditional_expression -> logical_OR_expression .)
    COMMA           reduce using rule 13 (conditional_expression -> logical_OR_expression .)
    SEMICOLON       reduce using rule 13 (conditional_expression -> logical_OR_expression .)
    RCPAREN         reduce using rule 13 (conditional_expression -> logical_OR_expression .)
    COLON           reduce using rule 13 (conditional_expression -> logical_OR_expression .)
    RTEMPLATE       reduce using rule 13 (conditional_expression -> logical_OR_expression .)
    QUESMARK        shift and go to state 189
    OROP            shift and go to state 190


state 113

    (15) logical_OR_expression -> logical_AND_expression .
    (18) logical_AND_expression -> logical_AND_expression . ANDOP inclusive_OR_expression

    QUESMARK        reduce using rule 15 (logical_OR_expression -> logical_AND_expression .)
    OROP            reduce using rule 15 (logical_OR_expression -> logical_AND_expression .)
    RSPAREN         reduce using rule 15 (logical_OR_expression -> logical_AND_expression .)
    RPAREN          reduce using rule 15 (logical_OR_expression -> logical_AND_expression .)
    COMMA           reduce using rule 15 (logical_OR_expression -> logical_AND_expression .)
    SEMICOLON       reduce using rule 15 (logical_OR_expression -> logical_AND_expression .)
    RCPAREN         reduce using rule 15 (logical_OR_expression -> logical_AND_expression .)
    COLON           reduce using rule 15 (logical_OR_expression -> logical_AND_expression .)
    RTEMPLATE       reduce using rule 15 (logical_OR_expression -> logical_AND_expression .)
    ANDOP           shift and go to state 191


state 114

    (17) logical_AND_expression -> inclusive_OR_expression .
    (20) inclusive_OR_expression -> inclusive_OR_expression . OROP exclusive_OR_expression

    ANDOP           reduce using rule 17 (logical_AND_expression -> inclusive_OR_expression .)
    QUESMARK        reduce using rule 17 (logical_AND_expression -> inclusive_OR_expression .)
    OROP            reduce using rule 17 (logical_AND_expression -> inclusive_OR_expression .)
    RSPAREN         reduce using rule 17 (logical_AND_expression -> inclusive_OR_expression .)
    RPAREN          reduce using rule 17 (logical_AND_expression -> inclusive_OR_expression .)
    COMMA           reduce using rule 17 (logical_AND_expression -> inclusive_OR_expression .)
    SEMICOLON       reduce using rule 17 (logical_AND_expression -> inclusive_OR_expression .)
    RCPAREN         reduce using rule 17 (logical_AND_expression -> inclusive_OR_expression .)
    COLON           reduce using rule 17 (logical_AND_expression -> inclusive_OR_expression .)
    RTEMPLATE       reduce using rule 17 (logical_AND_expression -> inclusive_OR_expression .)

  ! OROP            [ shift and go to state 192 ]


state 115

    (19) inclusive_OR_expression -> exclusive_OR_expression .
    (22) exclusive_OR_expression -> exclusive_OR_expression . XOROP AND_expression

    OROP            reduce using rule 19 (inclusive_OR_expression -> exclusive_OR_expression .)
    ANDOP           reduce using rule 19 (inclusive_OR_expression -> exclusive_OR_expression .)
    QUESMARK        reduce using rule 19 (inclusive_OR_expression -> exclusive_OR_expression .)
    RSPAREN         reduce using rule 19 (inclusive_OR_expression -> exclusive_OR_expression .)
    RPAREN          reduce using rule 19 (inclusive_OR_expression -> exclusive_OR_expression .)
    COMMA           reduce using rule 19 (inclusive_OR_expression -> exclusive_OR_expression .)
    SEMICOLON       reduce using rule 19 (inclusive_OR_expression -> exclusive_OR_expression .)
    RCPAREN         reduce using rule 19 (inclusive_OR_expression -> exclusive_OR_expression .)
    COLON           reduce using rule 19 (inclusive_OR_expression -> exclusive_OR_expression .)
    RTEMPLATE       reduce using rule 19 (inclusive_OR_expression -> exclusive_OR_expression .)
    XOROP           shift and go to state 193


state 116

    (21) exclusive_OR_expression -> AND_expression .
    (24) AND_expression -> AND_expression . BANDOP equality_expression

    XOROP           reduce using rule 21 (exclusive_OR_expression -> AND_expression .)
    OROP            reduce using rule 21 (exclusive_OR_expression -> AND_expression .)
    ANDOP           reduce using rule 21 (exclusive_OR_expression -> AND_expression .)
    QUESMARK        reduce using rule 21 (exclusive_OR_expression -> AND_expression .)
    RSPAREN         reduce using rule 21 (exclusive_OR_expression -> AND_expression .)
    RPAREN          reduce using rule 21 (exclusive_OR_expression -> AND_expression .)
    COMMA           reduce using rule 21 (exclusive_OR_expression -> AND_expression .)
    SEMICOLON       reduce using rule 21 (exclusive_OR_expression -> AND_expression .)
    RCPAREN         reduce using rule 21 (exclusive_OR_expression -> AND_expression .)
    COLON           reduce using rule 21 (exclusive_OR_expression -> AND_expression .)
    RTEMPLATE       reduce using rule 21 (exclusive_OR_expression -> AND_expression .)
    BANDOP          shift and go to state 194


state 117

    (23) AND_expression -> equality_expression .
    (26) equality_expression -> equality_expression . EQCOMP relational_expression
    (27) equality_expression -> equality_expression . NEQCOMP relational_expression

    BANDOP          reduce using rule 23 (AND_expression -> equality_expression .)
    XOROP           reduce using rule 23 (AND_expression -> equality_expression .)
    OROP            reduce using rule 23 (AND_expression -> equality_expression .)
    ANDOP           reduce using rule 23 (AND_expression -> equality_expression .)
    QUESMARK        reduce using rule 23 (AND_expression -> equality_expression .)
    RSPAREN         reduce using rule 23 (AND_expression -> equality_expression .)
    RPAREN          reduce using rule 23 (AND_expression -> equality_expression .)
    COMMA           reduce using rule 23 (AND_expression -> equality_expression .)
    SEMICOLON       reduce using rule 23 (AND_expression -> equality_expression .)
    RCPAREN         reduce using rule 23 (AND_expression -> equality_expression .)
    COLON           reduce using rule 23 (AND_expression -> equality_expression .)
    RTEMPLATE       reduce using rule 23 (AND_expression -> equality_expression .)
    EQCOMP          shift and go to state 195
    NEQCOMP         shift and go to state 196


state 118

    (25) equality_expression -> relational_expression .
    (29) relational_expression -> relational_expression . LTCOMP shift_expression
    (30) relational_expression -> relational_expression . GTCOMP shift_expression
    (31) relational_expression -> relational_expression . LTECOMP shift_expression
    (32) relational_expression -> relational_expression . GTECOMP shift_expression

    EQCOMP          reduce using rule 25 (equality_expression -> relational_expression .)
    NEQCOMP         reduce using rule 25 (equality_expression -> relational_expression .)
    BANDOP          reduce using rule 25 (equality_expression -> relational_expression .)
    XOROP           reduce using rule 25 (equality_expression -> relational_expression .)
    OROP            reduce using rule 25 (equality_expression -> relational_expression .)
    ANDOP           reduce using rule 25 (equality_expression -> relational_expression .)
    QUESMARK        reduce using rule 25 (equality_expression -> relational_expression .)
    RSPAREN         reduce using rule 25 (equality_expression -> relational_expression .)
    RPAREN          reduce using rule 25 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 25 (equality_expression -> relational_expression .)
    SEMICOLON       reduce using rule 25 (equality_expression -> relational_expression .)
    RCPAREN         reduce using rule 25 (equality_expression -> relational_expression .)
    COLON           reduce using rule 25 (equality_expression -> relational_expression .)
    RTEMPLATE       reduce using rule 25 (equality_expression -> relational_expression .)
    LTCOMP          shift and go to state 197
    GTCOMP          shift and go to state 198
    LTECOMP         shift and go to state 199
    GTECOMP         shift and go to state 200


state 119

    (28) relational_expression -> shift_expression .
    (34) shift_expression -> shift_expression . LSHIFT additive_expression
    (35) shift_expression -> shift_expression . RSHIFT additive_expression

    LTCOMP          reduce using rule 28 (relational_expression -> shift_expression .)
    GTCOMP          reduce using rule 28 (relational_expression -> shift_expression .)
    LTECOMP         reduce using rule 28 (relational_expression -> shift_expression .)
    GTECOMP         reduce using rule 28 (relational_expression -> shift_expression .)
    EQCOMP          reduce using rule 28 (relational_expression -> shift_expression .)
    NEQCOMP         reduce using rule 28 (relational_expression -> shift_expression .)
    BANDOP          reduce using rule 28 (relational_expression -> shift_expression .)
    XOROP           reduce using rule 28 (relational_expression -> shift_expression .)
    OROP            reduce using rule 28 (relational_expression -> shift_expression .)
    ANDOP           reduce using rule 28 (relational_expression -> shift_expression .)
    QUESMARK        reduce using rule 28 (relational_expression -> shift_expression .)
    RSPAREN         reduce using rule 28 (relational_expression -> shift_expression .)
    RPAREN          reduce using rule 28 (relational_expression -> shift_expression .)
    COMMA           reduce using rule 28 (relational_expression -> shift_expression .)
    SEMICOLON       reduce using rule 28 (relational_expression -> shift_expression .)
    RCPAREN         reduce using rule 28 (relational_expression -> shift_expression .)
    COLON           reduce using rule 28 (relational_expression -> shift_expression .)
    RTEMPLATE       reduce using rule 28 (relational_expression -> shift_expression .)
    LSHIFT          shift and go to state 201
    RSHIFT          shift and go to state 202


state 120

    (33) shift_expression -> additive_expression .
    (37) additive_expression -> additive_expression . PLUSOP multiplicative_expression
    (38) additive_expression -> additive_expression . MINUSOP multiplicative_expression

    LSHIFT          reduce using rule 33 (shift_expression -> additive_expression .)
    RSHIFT          reduce using rule 33 (shift_expression -> additive_expression .)
    LTCOMP          reduce using rule 33 (shift_expression -> additive_expression .)
    GTCOMP          reduce using rule 33 (shift_expression -> additive_expression .)
    LTECOMP         reduce using rule 33 (shift_expression -> additive_expression .)
    GTECOMP         reduce using rule 33 (shift_expression -> additive_expression .)
    EQCOMP          reduce using rule 33 (shift_expression -> additive_expression .)
    NEQCOMP         reduce using rule 33 (shift_expression -> additive_expression .)
    BANDOP          reduce using rule 33 (shift_expression -> additive_expression .)
    XOROP           reduce using rule 33 (shift_expression -> additive_expression .)
    OROP            reduce using rule 33 (shift_expression -> additive_expression .)
    ANDOP           reduce using rule 33 (shift_expression -> additive_expression .)
    QUESMARK        reduce using rule 33 (shift_expression -> additive_expression .)
    RSPAREN         reduce using rule 33 (shift_expression -> additive_expression .)
    RPAREN          reduce using rule 33 (shift_expression -> additive_expression .)
    COMMA           reduce using rule 33 (shift_expression -> additive_expression .)
    SEMICOLON       reduce using rule 33 (shift_expression -> additive_expression .)
    RCPAREN         reduce using rule 33 (shift_expression -> additive_expression .)
    COLON           reduce using rule 33 (shift_expression -> additive_expression .)
    RTEMPLATE       reduce using rule 33 (shift_expression -> additive_expression .)
    PLUSOP          shift and go to state 203
    MINUSOP         shift and go to state 204


state 121

    (36) additive_expression -> multiplicative_expression .
    (40) multiplicative_expression -> multiplicative_expression . MULTOP cast_expression
    (41) multiplicative_expression -> multiplicative_expression . DIVOP cast_expression
    (42) multiplicative_expression -> multiplicative_expression . MODOP cast_expression

    PLUSOP          reduce using rule 36 (additive_expression -> multiplicative_expression .)
    MINUSOP         reduce using rule 36 (additive_expression -> multiplicative_expression .)
    LSHIFT          reduce using rule 36 (additive_expression -> multiplicative_expression .)
    RSHIFT          reduce using rule 36 (additive_expression -> multiplicative_expression .)
    LTCOMP          reduce using rule 36 (additive_expression -> multiplicative_expression .)
    GTCOMP          reduce using rule 36 (additive_expression -> multiplicative_expression .)
    LTECOMP         reduce using rule 36 (additive_expression -> multiplicative_expression .)
    GTECOMP         reduce using rule 36 (additive_expression -> multiplicative_expression .)
    EQCOMP          reduce using rule 36 (additive_expression -> multiplicative_expression .)
    NEQCOMP         reduce using rule 36 (additive_expression -> multiplicative_expression .)
    BANDOP          reduce using rule 36 (additive_expression -> multiplicative_expression .)
    XOROP           reduce using rule 36 (additive_expression -> multiplicative_expression .)
    OROP            reduce using rule 36 (additive_expression -> multiplicative_expression .)
    ANDOP           reduce using rule 36 (additive_expression -> multiplicative_expression .)
    QUESMARK        reduce using rule 36 (additive_expression -> multiplicative_expression .)
    RSPAREN         reduce using rule 36 (additive_expression -> multiplicative_expression .)
    RPAREN          reduce using rule 36 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 36 (additive_expression -> multiplicative_expression .)
    SEMICOLON       reduce using rule 36 (additive_expression -> multiplicative_expression .)
    RCPAREN         reduce using rule 36 (additive_expression -> multiplicative_expression .)
    COLON           reduce using rule 36 (additive_expression -> multiplicative_expression .)
    RTEMPLATE       reduce using rule 36 (additive_expression -> multiplicative_expression .)
    MULTOP          shift and go to state 205
    DIVOP           shift and go to state 206
    MODOP           shift and go to state 207


state 122

    (82) unary1_operator -> PLUSOP .

    LPAREN          reduce using rule 82 (unary1_operator -> PLUSOP .)
    DPLUSOP         reduce using rule 82 (unary1_operator -> PLUSOP .)
    DMINUSOP        reduce using rule 82 (unary1_operator -> PLUSOP .)
    SIZEOF          reduce using rule 82 (unary1_operator -> PLUSOP .)
    PLUSOP          reduce using rule 82 (unary1_operator -> PLUSOP .)
    MINUSOP         reduce using rule 82 (unary1_operator -> PLUSOP .)
    NOTSYM          reduce using rule 82 (unary1_operator -> PLUSOP .)
    BNOP            reduce using rule 82 (unary1_operator -> PLUSOP .)
    MULTOP          reduce using rule 82 (unary1_operator -> PLUSOP .)
    BANDOP          reduce using rule 82 (unary1_operator -> PLUSOP .)
    NEW             reduce using rule 82 (unary1_operator -> PLUSOP .)
    DELETE          reduce using rule 82 (unary1_operator -> PLUSOP .)
    THIS            reduce using rule 82 (unary1_operator -> PLUSOP .)
    IDENTIFIER      reduce using rule 82 (unary1_operator -> PLUSOP .)
    DOUBLEBNOP      reduce using rule 82 (unary1_operator -> PLUSOP .)
    STRING_L        reduce using rule 82 (unary1_operator -> PLUSOP .)
    NUMBER          reduce using rule 82 (unary1_operator -> PLUSOP .)
    SCHAR           reduce using rule 82 (unary1_operator -> PLUSOP .)


state 123

    (83) unary1_operator -> MINUSOP .

    LPAREN          reduce using rule 83 (unary1_operator -> MINUSOP .)
    DPLUSOP         reduce using rule 83 (unary1_operator -> MINUSOP .)
    DMINUSOP        reduce using rule 83 (unary1_operator -> MINUSOP .)
    SIZEOF          reduce using rule 83 (unary1_operator -> MINUSOP .)
    PLUSOP          reduce using rule 83 (unary1_operator -> MINUSOP .)
    MINUSOP         reduce using rule 83 (unary1_operator -> MINUSOP .)
    NOTSYM          reduce using rule 83 (unary1_operator -> MINUSOP .)
    BNOP            reduce using rule 83 (unary1_operator -> MINUSOP .)
    MULTOP          reduce using rule 83 (unary1_operator -> MINUSOP .)
    BANDOP          reduce using rule 83 (unary1_operator -> MINUSOP .)
    NEW             reduce using rule 83 (unary1_operator -> MINUSOP .)
    DELETE          reduce using rule 83 (unary1_operator -> MINUSOP .)
    THIS            reduce using rule 83 (unary1_operator -> MINUSOP .)
    IDENTIFIER      reduce using rule 83 (unary1_operator -> MINUSOP .)
    DOUBLEBNOP      reduce using rule 83 (unary1_operator -> MINUSOP .)
    STRING_L        reduce using rule 83 (unary1_operator -> MINUSOP .)
    NUMBER          reduce using rule 83 (unary1_operator -> MINUSOP .)
    SCHAR           reduce using rule 83 (unary1_operator -> MINUSOP .)


state 124

    (39) multiplicative_expression -> cast_expression .

    MULTOP          reduce using rule 39 (multiplicative_expression -> cast_expression .)
    DIVOP           reduce using rule 39 (multiplicative_expression -> cast_expression .)
    MODOP           reduce using rule 39 (multiplicative_expression -> cast_expression .)
    PLUSOP          reduce using rule 39 (multiplicative_expression -> cast_expression .)
    MINUSOP         reduce using rule 39 (multiplicative_expression -> cast_expression .)
    LSHIFT          reduce using rule 39 (multiplicative_expression -> cast_expression .)
    RSHIFT          reduce using rule 39 (multiplicative_expression -> cast_expression .)
    LTCOMP          reduce using rule 39 (multiplicative_expression -> cast_expression .)
    GTCOMP          reduce using rule 39 (multiplicative_expression -> cast_expression .)
    LTECOMP         reduce using rule 39 (multiplicative_expression -> cast_expression .)
    GTECOMP         reduce using rule 39 (multiplicative_expression -> cast_expression .)
    EQCOMP          reduce using rule 39 (multiplicative_expression -> cast_expression .)
    NEQCOMP         reduce using rule 39 (multiplicative_expression -> cast_expression .)
    BANDOP          reduce using rule 39 (multiplicative_expression -> cast_expression .)
    XOROP           reduce using rule 39 (multiplicative_expression -> cast_expression .)
    OROP            reduce using rule 39 (multiplicative_expression -> cast_expression .)
    ANDOP           reduce using rule 39 (multiplicative_expression -> cast_expression .)
    QUESMARK        reduce using rule 39 (multiplicative_expression -> cast_expression .)
    RSPAREN         reduce using rule 39 (multiplicative_expression -> cast_expression .)
    RPAREN          reduce using rule 39 (multiplicative_expression -> cast_expression .)
    COMMA           reduce using rule 39 (multiplicative_expression -> cast_expression .)
    SEMICOLON       reduce using rule 39 (multiplicative_expression -> cast_expression .)
    RCPAREN         reduce using rule 39 (multiplicative_expression -> cast_expression .)
    COLON           reduce using rule 39 (multiplicative_expression -> cast_expression .)
    RTEMPLATE       reduce using rule 39 (multiplicative_expression -> cast_expression .)


state 125

    (104) cast_expression -> unary_expression .

    MULTOP          reduce using rule 104 (cast_expression -> unary_expression .)
    DIVOP           reduce using rule 104 (cast_expression -> unary_expression .)
    MODOP           reduce using rule 104 (cast_expression -> unary_expression .)
    PLUSOP          reduce using rule 104 (cast_expression -> unary_expression .)
    MINUSOP         reduce using rule 104 (cast_expression -> unary_expression .)
    LSHIFT          reduce using rule 104 (cast_expression -> unary_expression .)
    RSHIFT          reduce using rule 104 (cast_expression -> unary_expression .)
    LTCOMP          reduce using rule 104 (cast_expression -> unary_expression .)
    GTCOMP          reduce using rule 104 (cast_expression -> unary_expression .)
    LTECOMP         reduce using rule 104 (cast_expression -> unary_expression .)
    GTECOMP         reduce using rule 104 (cast_expression -> unary_expression .)
    EQCOMP          reduce using rule 104 (cast_expression -> unary_expression .)
    NEQCOMP         reduce using rule 104 (cast_expression -> unary_expression .)
    BANDOP          reduce using rule 104 (cast_expression -> unary_expression .)
    XOROP           reduce using rule 104 (cast_expression -> unary_expression .)
    OROP            reduce using rule 104 (cast_expression -> unary_expression .)
    ANDOP           reduce using rule 104 (cast_expression -> unary_expression .)
    QUESMARK        reduce using rule 104 (cast_expression -> unary_expression .)
    RSPAREN         reduce using rule 104 (cast_expression -> unary_expression .)
    EQUAL           reduce using rule 104 (cast_expression -> unary_expression .)
    MULTEQOP        reduce using rule 104 (cast_expression -> unary_expression .)
    DIVEQOP         reduce using rule 104 (cast_expression -> unary_expression .)
    MODEQOP         reduce using rule 104 (cast_expression -> unary_expression .)
    PLUSEQOP        reduce using rule 104 (cast_expression -> unary_expression .)
    MINUSEQOP       reduce using rule 104 (cast_expression -> unary_expression .)
    LSHIFTEQOP      reduce using rule 104 (cast_expression -> unary_expression .)
    RSHIFTEQOP      reduce using rule 104 (cast_expression -> unary_expression .)
    BANDEQOP        reduce using rule 104 (cast_expression -> unary_expression .)
    BOREQOP         reduce using rule 104 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 104 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 104 (cast_expression -> unary_expression .)
    SEMICOLON       reduce using rule 104 (cast_expression -> unary_expression .)
    RCPAREN         reduce using rule 104 (cast_expression -> unary_expression .)
    COLON           reduce using rule 104 (cast_expression -> unary_expression .)
    RTEMPLATE       reduce using rule 104 (cast_expression -> unary_expression .)


state 126

    (105) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (100) primary_expression -> LPAREN . expression RPAREN
    (165) type_name -> . type_specifier_ abstract_declarator
    (166) type_name -> . type_specifier_
    (43) expression -> . assignment_expression
    (44) expression -> . throw_expression
    (45) expression -> . expression COMMA assignment_expression
    (167) type_specifier_ -> . CONST type_specifier
    (168) type_specifier_ -> . type_specifier
    (48) assignment_expression -> . conditional_expression
    (49) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (46) throw_expression -> . THROW expression
    (47) throw_expression -> . THROW
    (171) type_specifier -> . simple_type_name
    (172) type_specifier -> . complex_type_specifier
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (173) simple_type_name -> . CHAR
    (174) simple_type_name -> . SHORT
    (175) simple_type_name -> . INT
    (176) simple_type_name -> . LONG
    (177) simple_type_name -> . SIGNED
    (178) simple_type_name -> . UNSIGNED
    (179) simple_type_name -> . FLOAT
    (180) simple_type_name -> . DOUBLE
    (181) simple_type_name -> . VOID
    (182) simple_type_name -> . STRING
    (183) simple_type_name -> . AUTO
    (184) complex_type_specifier -> . class_key IDENTIFIER
    (185) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (186) complex_type_specifier -> . TYPE IDENTIFIER
    (187) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (200) class_key -> . CLASS
    (201) class_key -> . STRUCT
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression

    CONST           shift and go to state 16
    THROW           shift and go to state 212
    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38
    THIS            shift and go to state 142
    LPAREN          shift and go to state 146
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    type_name                      shift and go to state 208
    cast_expression                shift and go to state 124
    expression                     shift and go to state 209
    type_specifier_                shift and go to state 184
    assignment_expression          shift and go to state 210
    throw_expression               shift and go to state 211
    type_specifier                 shift and go to state 17
    conditional_expression         shift and go to state 149
    unary_expression               shift and go to state 150
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    logical_OR_expression          shift and go to state 112
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    class_key                      shift and go to state 56
    logical_AND_expression         shift and go to state 113
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    inclusive_OR_expression        shift and go to state 114
    literal                        shift and go to state 141
    exclusive_OR_expression        shift and go to state 115
    AND_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 127

    (60) unary_expression -> postfix_expression .
    (89) postfix_expression -> postfix_expression . LSPAREN expression RSPAREN
    (90) postfix_expression -> postfix_expression . LPAREN expression_list RPAREN
    (91) postfix_expression -> postfix_expression . template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> postfix_expression . LPAREN RPAREN
    (93) postfix_expression -> postfix_expression . DOT name
    (94) postfix_expression -> postfix_expression . ARROW name
    (95) postfix_expression -> postfix_expression . DPLUSOP
    (96) postfix_expression -> postfix_expression . DMINUSOP
    (162) template_class_name -> . LTEMPLATE template_arg_list RTEMPLATE

    MULTOP          reduce using rule 60 (unary_expression -> postfix_expression .)
    DIVOP           reduce using rule 60 (unary_expression -> postfix_expression .)
    MODOP           reduce using rule 60 (unary_expression -> postfix_expression .)
    PLUSOP          reduce using rule 60 (unary_expression -> postfix_expression .)
    MINUSOP         reduce using rule 60 (unary_expression -> postfix_expression .)
    LSHIFT          reduce using rule 60 (unary_expression -> postfix_expression .)
    RSHIFT          reduce using rule 60 (unary_expression -> postfix_expression .)
    LTCOMP          reduce using rule 60 (unary_expression -> postfix_expression .)
    GTCOMP          reduce using rule 60 (unary_expression -> postfix_expression .)
    LTECOMP         reduce using rule 60 (unary_expression -> postfix_expression .)
    GTECOMP         reduce using rule 60 (unary_expression -> postfix_expression .)
    EQCOMP          reduce using rule 60 (unary_expression -> postfix_expression .)
    NEQCOMP         reduce using rule 60 (unary_expression -> postfix_expression .)
    BANDOP          reduce using rule 60 (unary_expression -> postfix_expression .)
    XOROP           reduce using rule 60 (unary_expression -> postfix_expression .)
    OROP            reduce using rule 60 (unary_expression -> postfix_expression .)
    ANDOP           reduce using rule 60 (unary_expression -> postfix_expression .)
    QUESMARK        reduce using rule 60 (unary_expression -> postfix_expression .)
    RSPAREN         reduce using rule 60 (unary_expression -> postfix_expression .)
    EQUAL           reduce using rule 60 (unary_expression -> postfix_expression .)
    MULTEQOP        reduce using rule 60 (unary_expression -> postfix_expression .)
    DIVEQOP         reduce using rule 60 (unary_expression -> postfix_expression .)
    MODEQOP         reduce using rule 60 (unary_expression -> postfix_expression .)
    PLUSEQOP        reduce using rule 60 (unary_expression -> postfix_expression .)
    MINUSEQOP       reduce using rule 60 (unary_expression -> postfix_expression .)
    LSHIFTEQOP      reduce using rule 60 (unary_expression -> postfix_expression .)
    RSHIFTEQOP      reduce using rule 60 (unary_expression -> postfix_expression .)
    BANDEQOP        reduce using rule 60 (unary_expression -> postfix_expression .)
    BOREQOP         reduce using rule 60 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 60 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 60 (unary_expression -> postfix_expression .)
    SEMICOLON       reduce using rule 60 (unary_expression -> postfix_expression .)
    RCPAREN         reduce using rule 60 (unary_expression -> postfix_expression .)
    COLON           reduce using rule 60 (unary_expression -> postfix_expression .)
    RTEMPLATE       reduce using rule 60 (unary_expression -> postfix_expression .)
    LSPAREN         shift and go to state 213
    LPAREN          shift and go to state 214
    DOT             shift and go to state 216
    ARROW           shift and go to state 217
    DPLUSOP         shift and go to state 218
    DMINUSOP        shift and go to state 219
    LTEMPLATE       shift and go to state 101

    template_class_name            shift and go to state 215

state 128

    (61) unary_expression -> DPLUSOP . unary_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR

    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    THIS            shift and go to state 142
    LPAREN          shift and go to state 221
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    unary_expression               shift and go to state 220
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    literal                        shift and go to state 141

state 129

    (62) unary_expression -> DMINUSOP . unary_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR

    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    THIS            shift and go to state 142
    LPAREN          shift and go to state 221
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    unary_expression               shift and go to state 222
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    literal                        shift and go to state 141

state 130

    (63) unary_expression -> unary1_operator . cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR

    LPAREN          shift and go to state 126
    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    THIS            shift and go to state 142
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    unary1_operator                shift and go to state 130
    cast_expression                shift and go to state 223
    unary_expression               shift and go to state 125
    postfix_expression             shift and go to state 127
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    literal                        shift and go to state 141

state 131

    (64) unary_expression -> unary2_operator . cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR

    LPAREN          shift and go to state 126
    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    THIS            shift and go to state 142
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    unary2_operator                shift and go to state 131
    cast_expression                shift and go to state 224
    unary_expression               shift and go to state 125
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    literal                        shift and go to state 141

state 132

    (65) unary_expression -> SIZEOF . unary_expression
    (66) unary_expression -> SIZEOF . LPAREN type_name RPAREN
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR

    LPAREN          shift and go to state 226
    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    THIS            shift and go to state 142
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    unary_expression               shift and go to state 225
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    literal                        shift and go to state 141

state 133

    (67) unary_expression -> allocation_expression .

    MULTOP          reduce using rule 67 (unary_expression -> allocation_expression .)
    DIVOP           reduce using rule 67 (unary_expression -> allocation_expression .)
    MODOP           reduce using rule 67 (unary_expression -> allocation_expression .)
    PLUSOP          reduce using rule 67 (unary_expression -> allocation_expression .)
    MINUSOP         reduce using rule 67 (unary_expression -> allocation_expression .)
    LSHIFT          reduce using rule 67 (unary_expression -> allocation_expression .)
    RSHIFT          reduce using rule 67 (unary_expression -> allocation_expression .)
    LTCOMP          reduce using rule 67 (unary_expression -> allocation_expression .)
    GTCOMP          reduce using rule 67 (unary_expression -> allocation_expression .)
    LTECOMP         reduce using rule 67 (unary_expression -> allocation_expression .)
    GTECOMP         reduce using rule 67 (unary_expression -> allocation_expression .)
    EQCOMP          reduce using rule 67 (unary_expression -> allocation_expression .)
    NEQCOMP         reduce using rule 67 (unary_expression -> allocation_expression .)
    BANDOP          reduce using rule 67 (unary_expression -> allocation_expression .)
    XOROP           reduce using rule 67 (unary_expression -> allocation_expression .)
    OROP            reduce using rule 67 (unary_expression -> allocation_expression .)
    ANDOP           reduce using rule 67 (unary_expression -> allocation_expression .)
    QUESMARK        reduce using rule 67 (unary_expression -> allocation_expression .)
    RSPAREN         reduce using rule 67 (unary_expression -> allocation_expression .)
    EQUAL           reduce using rule 67 (unary_expression -> allocation_expression .)
    MULTEQOP        reduce using rule 67 (unary_expression -> allocation_expression .)
    DIVEQOP         reduce using rule 67 (unary_expression -> allocation_expression .)
    MODEQOP         reduce using rule 67 (unary_expression -> allocation_expression .)
    PLUSEQOP        reduce using rule 67 (unary_expression -> allocation_expression .)
    MINUSEQOP       reduce using rule 67 (unary_expression -> allocation_expression .)
    LSHIFTEQOP      reduce using rule 67 (unary_expression -> allocation_expression .)
    RSHIFTEQOP      reduce using rule 67 (unary_expression -> allocation_expression .)
    BANDEQOP        reduce using rule 67 (unary_expression -> allocation_expression .)
    BOREQOP         reduce using rule 67 (unary_expression -> allocation_expression .)
    RPAREN          reduce using rule 67 (unary_expression -> allocation_expression .)
    COMMA           reduce using rule 67 (unary_expression -> allocation_expression .)
    SEMICOLON       reduce using rule 67 (unary_expression -> allocation_expression .)
    RCPAREN         reduce using rule 67 (unary_expression -> allocation_expression .)
    COLON           reduce using rule 67 (unary_expression -> allocation_expression .)
    RTEMPLATE       reduce using rule 67 (unary_expression -> allocation_expression .)


state 134

    (68) unary_expression -> deallocation_expression .

    MULTOP          reduce using rule 68 (unary_expression -> deallocation_expression .)
    DIVOP           reduce using rule 68 (unary_expression -> deallocation_expression .)
    MODOP           reduce using rule 68 (unary_expression -> deallocation_expression .)
    PLUSOP          reduce using rule 68 (unary_expression -> deallocation_expression .)
    MINUSOP         reduce using rule 68 (unary_expression -> deallocation_expression .)
    LSHIFT          reduce using rule 68 (unary_expression -> deallocation_expression .)
    RSHIFT          reduce using rule 68 (unary_expression -> deallocation_expression .)
    LTCOMP          reduce using rule 68 (unary_expression -> deallocation_expression .)
    GTCOMP          reduce using rule 68 (unary_expression -> deallocation_expression .)
    LTECOMP         reduce using rule 68 (unary_expression -> deallocation_expression .)
    GTECOMP         reduce using rule 68 (unary_expression -> deallocation_expression .)
    EQCOMP          reduce using rule 68 (unary_expression -> deallocation_expression .)
    NEQCOMP         reduce using rule 68 (unary_expression -> deallocation_expression .)
    BANDOP          reduce using rule 68 (unary_expression -> deallocation_expression .)
    XOROP           reduce using rule 68 (unary_expression -> deallocation_expression .)
    OROP            reduce using rule 68 (unary_expression -> deallocation_expression .)
    ANDOP           reduce using rule 68 (unary_expression -> deallocation_expression .)
    QUESMARK        reduce using rule 68 (unary_expression -> deallocation_expression .)
    RSPAREN         reduce using rule 68 (unary_expression -> deallocation_expression .)
    EQUAL           reduce using rule 68 (unary_expression -> deallocation_expression .)
    MULTEQOP        reduce using rule 68 (unary_expression -> deallocation_expression .)
    DIVEQOP         reduce using rule 68 (unary_expression -> deallocation_expression .)
    MODEQOP         reduce using rule 68 (unary_expression -> deallocation_expression .)
    PLUSEQOP        reduce using rule 68 (unary_expression -> deallocation_expression .)
    MINUSEQOP       reduce using rule 68 (unary_expression -> deallocation_expression .)
    LSHIFTEQOP      reduce using rule 68 (unary_expression -> deallocation_expression .)
    RSHIFTEQOP      reduce using rule 68 (unary_expression -> deallocation_expression .)
    BANDEQOP        reduce using rule 68 (unary_expression -> deallocation_expression .)
    BOREQOP         reduce using rule 68 (unary_expression -> deallocation_expression .)
    RPAREN          reduce using rule 68 (unary_expression -> deallocation_expression .)
    COMMA           reduce using rule 68 (unary_expression -> deallocation_expression .)
    SEMICOLON       reduce using rule 68 (unary_expression -> deallocation_expression .)
    RCPAREN         reduce using rule 68 (unary_expression -> deallocation_expression .)
    COLON           reduce using rule 68 (unary_expression -> deallocation_expression .)
    RTEMPLATE       reduce using rule 68 (unary_expression -> deallocation_expression .)


state 135

    (88) postfix_expression -> primary_expression .

    LSPAREN         reduce using rule 88 (postfix_expression -> primary_expression .)
    LPAREN          reduce using rule 88 (postfix_expression -> primary_expression .)
    DOT             reduce using rule 88 (postfix_expression -> primary_expression .)
    ARROW           reduce using rule 88 (postfix_expression -> primary_expression .)
    DPLUSOP         reduce using rule 88 (postfix_expression -> primary_expression .)
    DMINUSOP        reduce using rule 88 (postfix_expression -> primary_expression .)
    LTEMPLATE       reduce using rule 88 (postfix_expression -> primary_expression .)
    MULTOP          reduce using rule 88 (postfix_expression -> primary_expression .)
    DIVOP           reduce using rule 88 (postfix_expression -> primary_expression .)
    MODOP           reduce using rule 88 (postfix_expression -> primary_expression .)
    PLUSOP          reduce using rule 88 (postfix_expression -> primary_expression .)
    MINUSOP         reduce using rule 88 (postfix_expression -> primary_expression .)
    LSHIFT          reduce using rule 88 (postfix_expression -> primary_expression .)
    RSHIFT          reduce using rule 88 (postfix_expression -> primary_expression .)
    LTCOMP          reduce using rule 88 (postfix_expression -> primary_expression .)
    GTCOMP          reduce using rule 88 (postfix_expression -> primary_expression .)
    LTECOMP         reduce using rule 88 (postfix_expression -> primary_expression .)
    GTECOMP         reduce using rule 88 (postfix_expression -> primary_expression .)
    EQCOMP          reduce using rule 88 (postfix_expression -> primary_expression .)
    NEQCOMP         reduce using rule 88 (postfix_expression -> primary_expression .)
    BANDOP          reduce using rule 88 (postfix_expression -> primary_expression .)
    XOROP           reduce using rule 88 (postfix_expression -> primary_expression .)
    OROP            reduce using rule 88 (postfix_expression -> primary_expression .)
    ANDOP           reduce using rule 88 (postfix_expression -> primary_expression .)
    QUESMARK        reduce using rule 88 (postfix_expression -> primary_expression .)
    RSPAREN         reduce using rule 88 (postfix_expression -> primary_expression .)
    EQUAL           reduce using rule 88 (postfix_expression -> primary_expression .)
    MULTEQOP        reduce using rule 88 (postfix_expression -> primary_expression .)
    DIVEQOP         reduce using rule 88 (postfix_expression -> primary_expression .)
    MODEQOP         reduce using rule 88 (postfix_expression -> primary_expression .)
    PLUSEQOP        reduce using rule 88 (postfix_expression -> primary_expression .)
    MINUSEQOP       reduce using rule 88 (postfix_expression -> primary_expression .)
    LSHIFTEQOP      reduce using rule 88 (postfix_expression -> primary_expression .)
    RSHIFTEQOP      reduce using rule 88 (postfix_expression -> primary_expression .)
    BANDEQOP        reduce using rule 88 (postfix_expression -> primary_expression .)
    BOREQOP         reduce using rule 88 (postfix_expression -> primary_expression .)
    RPAREN          reduce using rule 88 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 88 (postfix_expression -> primary_expression .)
    SEMICOLON       reduce using rule 88 (postfix_expression -> primary_expression .)
    RCPAREN         reduce using rule 88 (postfix_expression -> primary_expression .)
    COLON           reduce using rule 88 (postfix_expression -> primary_expression .)
    RTEMPLATE       reduce using rule 88 (postfix_expression -> primary_expression .)


state 136

    (97) primary_expression -> name .

    LSPAREN         reduce using rule 97 (primary_expression -> name .)
    LPAREN          reduce using rule 97 (primary_expression -> name .)
    DOT             reduce using rule 97 (primary_expression -> name .)
    ARROW           reduce using rule 97 (primary_expression -> name .)
    DPLUSOP         reduce using rule 97 (primary_expression -> name .)
    DMINUSOP        reduce using rule 97 (primary_expression -> name .)
    LTEMPLATE       reduce using rule 97 (primary_expression -> name .)
    MULTOP          reduce using rule 97 (primary_expression -> name .)
    DIVOP           reduce using rule 97 (primary_expression -> name .)
    MODOP           reduce using rule 97 (primary_expression -> name .)
    PLUSOP          reduce using rule 97 (primary_expression -> name .)
    MINUSOP         reduce using rule 97 (primary_expression -> name .)
    LSHIFT          reduce using rule 97 (primary_expression -> name .)
    RSHIFT          reduce using rule 97 (primary_expression -> name .)
    LTCOMP          reduce using rule 97 (primary_expression -> name .)
    GTCOMP          reduce using rule 97 (primary_expression -> name .)
    LTECOMP         reduce using rule 97 (primary_expression -> name .)
    GTECOMP         reduce using rule 97 (primary_expression -> name .)
    EQCOMP          reduce using rule 97 (primary_expression -> name .)
    NEQCOMP         reduce using rule 97 (primary_expression -> name .)
    BANDOP          reduce using rule 97 (primary_expression -> name .)
    XOROP           reduce using rule 97 (primary_expression -> name .)
    OROP            reduce using rule 97 (primary_expression -> name .)
    ANDOP           reduce using rule 97 (primary_expression -> name .)
    QUESMARK        reduce using rule 97 (primary_expression -> name .)
    RSPAREN         reduce using rule 97 (primary_expression -> name .)
    EQUAL           reduce using rule 97 (primary_expression -> name .)
    MULTEQOP        reduce using rule 97 (primary_expression -> name .)
    DIVEQOP         reduce using rule 97 (primary_expression -> name .)
    MODEQOP         reduce using rule 97 (primary_expression -> name .)
    PLUSEQOP        reduce using rule 97 (primary_expression -> name .)
    MINUSEQOP       reduce using rule 97 (primary_expression -> name .)
    LSHIFTEQOP      reduce using rule 97 (primary_expression -> name .)
    RSHIFTEQOP      reduce using rule 97 (primary_expression -> name .)
    BANDEQOP        reduce using rule 97 (primary_expression -> name .)
    BOREQOP         reduce using rule 97 (primary_expression -> name .)
    RPAREN          reduce using rule 97 (primary_expression -> name .)
    COMMA           reduce using rule 97 (primary_expression -> name .)
    SEMICOLON       reduce using rule 97 (primary_expression -> name .)
    RCPAREN         reduce using rule 97 (primary_expression -> name .)
    COLON           reduce using rule 97 (primary_expression -> name .)
    RTEMPLATE       reduce using rule 97 (primary_expression -> name .)


state 137

    (84) unary1_operator -> NOTSYM .

    LPAREN          reduce using rule 84 (unary1_operator -> NOTSYM .)
    DPLUSOP         reduce using rule 84 (unary1_operator -> NOTSYM .)
    DMINUSOP        reduce using rule 84 (unary1_operator -> NOTSYM .)
    SIZEOF          reduce using rule 84 (unary1_operator -> NOTSYM .)
    PLUSOP          reduce using rule 84 (unary1_operator -> NOTSYM .)
    MINUSOP         reduce using rule 84 (unary1_operator -> NOTSYM .)
    NOTSYM          reduce using rule 84 (unary1_operator -> NOTSYM .)
    BNOP            reduce using rule 84 (unary1_operator -> NOTSYM .)
    MULTOP          reduce using rule 84 (unary1_operator -> NOTSYM .)
    BANDOP          reduce using rule 84 (unary1_operator -> NOTSYM .)
    NEW             reduce using rule 84 (unary1_operator -> NOTSYM .)
    DELETE          reduce using rule 84 (unary1_operator -> NOTSYM .)
    THIS            reduce using rule 84 (unary1_operator -> NOTSYM .)
    IDENTIFIER      reduce using rule 84 (unary1_operator -> NOTSYM .)
    DOUBLEBNOP      reduce using rule 84 (unary1_operator -> NOTSYM .)
    STRING_L        reduce using rule 84 (unary1_operator -> NOTSYM .)
    NUMBER          reduce using rule 84 (unary1_operator -> NOTSYM .)
    SCHAR           reduce using rule 84 (unary1_operator -> NOTSYM .)


state 138

    (85) unary1_operator -> BNOP .

    LPAREN          reduce using rule 85 (unary1_operator -> BNOP .)
    DPLUSOP         reduce using rule 85 (unary1_operator -> BNOP .)
    DMINUSOP        reduce using rule 85 (unary1_operator -> BNOP .)
    SIZEOF          reduce using rule 85 (unary1_operator -> BNOP .)
    PLUSOP          reduce using rule 85 (unary1_operator -> BNOP .)
    MINUSOP         reduce using rule 85 (unary1_operator -> BNOP .)
    NOTSYM          reduce using rule 85 (unary1_operator -> BNOP .)
    BNOP            reduce using rule 85 (unary1_operator -> BNOP .)
    MULTOP          reduce using rule 85 (unary1_operator -> BNOP .)
    BANDOP          reduce using rule 85 (unary1_operator -> BNOP .)
    NEW             reduce using rule 85 (unary1_operator -> BNOP .)
    DELETE          reduce using rule 85 (unary1_operator -> BNOP .)
    THIS            reduce using rule 85 (unary1_operator -> BNOP .)
    IDENTIFIER      reduce using rule 85 (unary1_operator -> BNOP .)
    DOUBLEBNOP      reduce using rule 85 (unary1_operator -> BNOP .)
    STRING_L        reduce using rule 85 (unary1_operator -> BNOP .)
    NUMBER          reduce using rule 85 (unary1_operator -> BNOP .)
    SCHAR           reduce using rule 85 (unary1_operator -> BNOP .)


state 139

    (70) allocation_expression -> NEW . new_type_name new_initializer
    (71) allocation_expression -> NEW . new_type_name
    (72) allocation_expression -> NEW . LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> NEW . LPAREN type_name RPAREN
    (74) new_type_name -> . type_specifier_ new_declarator
    (75) new_type_name -> . type_specifier_
    (167) type_specifier_ -> . CONST type_specifier
    (168) type_specifier_ -> . type_specifier
    (171) type_specifier -> . simple_type_name
    (172) type_specifier -> . complex_type_specifier
    (173) simple_type_name -> . CHAR
    (174) simple_type_name -> . SHORT
    (175) simple_type_name -> . INT
    (176) simple_type_name -> . LONG
    (177) simple_type_name -> . SIGNED
    (178) simple_type_name -> . UNSIGNED
    (179) simple_type_name -> . FLOAT
    (180) simple_type_name -> . DOUBLE
    (181) simple_type_name -> . VOID
    (182) simple_type_name -> . STRING
    (183) simple_type_name -> . AUTO
    (184) complex_type_specifier -> . class_key IDENTIFIER
    (185) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (186) complex_type_specifier -> . TYPE IDENTIFIER
    (187) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (200) class_key -> . CLASS
    (201) class_key -> . STRUCT

    LPAREN          shift and go to state 228
    CONST           shift and go to state 16
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38

    new_type_name                  shift and go to state 227
    type_specifier_                shift and go to state 229
    type_specifier                 shift and go to state 17
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 56

state 140

    (69) deallocation_expression -> DELETE . cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR

    LPAREN          shift and go to state 126
    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    THIS            shift and go to state 142
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    cast_expression                shift and go to state 230
    unary_expression               shift and go to state 125
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    literal                        shift and go to state 141

state 141

    (98) primary_expression -> literal .

    LSPAREN         reduce using rule 98 (primary_expression -> literal .)
    LPAREN          reduce using rule 98 (primary_expression -> literal .)
    DOT             reduce using rule 98 (primary_expression -> literal .)
    ARROW           reduce using rule 98 (primary_expression -> literal .)
    DPLUSOP         reduce using rule 98 (primary_expression -> literal .)
    DMINUSOP        reduce using rule 98 (primary_expression -> literal .)
    LTEMPLATE       reduce using rule 98 (primary_expression -> literal .)
    MULTOP          reduce using rule 98 (primary_expression -> literal .)
    DIVOP           reduce using rule 98 (primary_expression -> literal .)
    MODOP           reduce using rule 98 (primary_expression -> literal .)
    PLUSOP          reduce using rule 98 (primary_expression -> literal .)
    MINUSOP         reduce using rule 98 (primary_expression -> literal .)
    LSHIFT          reduce using rule 98 (primary_expression -> literal .)
    RSHIFT          reduce using rule 98 (primary_expression -> literal .)
    LTCOMP          reduce using rule 98 (primary_expression -> literal .)
    GTCOMP          reduce using rule 98 (primary_expression -> literal .)
    LTECOMP         reduce using rule 98 (primary_expression -> literal .)
    GTECOMP         reduce using rule 98 (primary_expression -> literal .)
    EQCOMP          reduce using rule 98 (primary_expression -> literal .)
    NEQCOMP         reduce using rule 98 (primary_expression -> literal .)
    BANDOP          reduce using rule 98 (primary_expression -> literal .)
    XOROP           reduce using rule 98 (primary_expression -> literal .)
    OROP            reduce using rule 98 (primary_expression -> literal .)
    ANDOP           reduce using rule 98 (primary_expression -> literal .)
    QUESMARK        reduce using rule 98 (primary_expression -> literal .)
    RSPAREN         reduce using rule 98 (primary_expression -> literal .)
    EQUAL           reduce using rule 98 (primary_expression -> literal .)
    MULTEQOP        reduce using rule 98 (primary_expression -> literal .)
    DIVEQOP         reduce using rule 98 (primary_expression -> literal .)
    MODEQOP         reduce using rule 98 (primary_expression -> literal .)
    PLUSEQOP        reduce using rule 98 (primary_expression -> literal .)
    MINUSEQOP       reduce using rule 98 (primary_expression -> literal .)
    LSHIFTEQOP      reduce using rule 98 (primary_expression -> literal .)
    RSHIFTEQOP      reduce using rule 98 (primary_expression -> literal .)
    BANDEQOP        reduce using rule 98 (primary_expression -> literal .)
    BOREQOP         reduce using rule 98 (primary_expression -> literal .)
    RPAREN          reduce using rule 98 (primary_expression -> literal .)
    COMMA           reduce using rule 98 (primary_expression -> literal .)
    SEMICOLON       reduce using rule 98 (primary_expression -> literal .)
    RCPAREN         reduce using rule 98 (primary_expression -> literal .)
    COLON           reduce using rule 98 (primary_expression -> literal .)
    RTEMPLATE       reduce using rule 98 (primary_expression -> literal .)


state 142

    (99) primary_expression -> THIS .

    LSPAREN         reduce using rule 99 (primary_expression -> THIS .)
    LPAREN          reduce using rule 99 (primary_expression -> THIS .)
    DOT             reduce using rule 99 (primary_expression -> THIS .)
    ARROW           reduce using rule 99 (primary_expression -> THIS .)
    DPLUSOP         reduce using rule 99 (primary_expression -> THIS .)
    DMINUSOP        reduce using rule 99 (primary_expression -> THIS .)
    LTEMPLATE       reduce using rule 99 (primary_expression -> THIS .)
    MULTOP          reduce using rule 99 (primary_expression -> THIS .)
    DIVOP           reduce using rule 99 (primary_expression -> THIS .)
    MODOP           reduce using rule 99 (primary_expression -> THIS .)
    PLUSOP          reduce using rule 99 (primary_expression -> THIS .)
    MINUSOP         reduce using rule 99 (primary_expression -> THIS .)
    LSHIFT          reduce using rule 99 (primary_expression -> THIS .)
    RSHIFT          reduce using rule 99 (primary_expression -> THIS .)
    LTCOMP          reduce using rule 99 (primary_expression -> THIS .)
    GTCOMP          reduce using rule 99 (primary_expression -> THIS .)
    LTECOMP         reduce using rule 99 (primary_expression -> THIS .)
    GTECOMP         reduce using rule 99 (primary_expression -> THIS .)
    EQCOMP          reduce using rule 99 (primary_expression -> THIS .)
    NEQCOMP         reduce using rule 99 (primary_expression -> THIS .)
    BANDOP          reduce using rule 99 (primary_expression -> THIS .)
    XOROP           reduce using rule 99 (primary_expression -> THIS .)
    OROP            reduce using rule 99 (primary_expression -> THIS .)
    ANDOP           reduce using rule 99 (primary_expression -> THIS .)
    QUESMARK        reduce using rule 99 (primary_expression -> THIS .)
    RSPAREN         reduce using rule 99 (primary_expression -> THIS .)
    EQUAL           reduce using rule 99 (primary_expression -> THIS .)
    MULTEQOP        reduce using rule 99 (primary_expression -> THIS .)
    DIVEQOP         reduce using rule 99 (primary_expression -> THIS .)
    MODEQOP         reduce using rule 99 (primary_expression -> THIS .)
    PLUSEQOP        reduce using rule 99 (primary_expression -> THIS .)
    MINUSEQOP       reduce using rule 99 (primary_expression -> THIS .)
    LSHIFTEQOP      reduce using rule 99 (primary_expression -> THIS .)
    RSHIFTEQOP      reduce using rule 99 (primary_expression -> THIS .)
    BANDEQOP        reduce using rule 99 (primary_expression -> THIS .)
    BOREQOP         reduce using rule 99 (primary_expression -> THIS .)
    RPAREN          reduce using rule 99 (primary_expression -> THIS .)
    COMMA           reduce using rule 99 (primary_expression -> THIS .)
    SEMICOLON       reduce using rule 99 (primary_expression -> THIS .)
    RCPAREN         reduce using rule 99 (primary_expression -> THIS .)
    COLON           reduce using rule 99 (primary_expression -> THIS .)
    RTEMPLATE       reduce using rule 99 (primary_expression -> THIS .)


state 143

    (101) literal -> STRING_L .

    LSPAREN         reduce using rule 101 (literal -> STRING_L .)
    LPAREN          reduce using rule 101 (literal -> STRING_L .)
    DOT             reduce using rule 101 (literal -> STRING_L .)
    ARROW           reduce using rule 101 (literal -> STRING_L .)
    DPLUSOP         reduce using rule 101 (literal -> STRING_L .)
    DMINUSOP        reduce using rule 101 (literal -> STRING_L .)
    LTEMPLATE       reduce using rule 101 (literal -> STRING_L .)
    MULTOP          reduce using rule 101 (literal -> STRING_L .)
    DIVOP           reduce using rule 101 (literal -> STRING_L .)
    MODOP           reduce using rule 101 (literal -> STRING_L .)
    PLUSOP          reduce using rule 101 (literal -> STRING_L .)
    MINUSOP         reduce using rule 101 (literal -> STRING_L .)
    LSHIFT          reduce using rule 101 (literal -> STRING_L .)
    RSHIFT          reduce using rule 101 (literal -> STRING_L .)
    LTCOMP          reduce using rule 101 (literal -> STRING_L .)
    GTCOMP          reduce using rule 101 (literal -> STRING_L .)
    LTECOMP         reduce using rule 101 (literal -> STRING_L .)
    GTECOMP         reduce using rule 101 (literal -> STRING_L .)
    EQCOMP          reduce using rule 101 (literal -> STRING_L .)
    NEQCOMP         reduce using rule 101 (literal -> STRING_L .)
    BANDOP          reduce using rule 101 (literal -> STRING_L .)
    XOROP           reduce using rule 101 (literal -> STRING_L .)
    OROP            reduce using rule 101 (literal -> STRING_L .)
    ANDOP           reduce using rule 101 (literal -> STRING_L .)
    QUESMARK        reduce using rule 101 (literal -> STRING_L .)
    RSPAREN         reduce using rule 101 (literal -> STRING_L .)
    EQUAL           reduce using rule 101 (literal -> STRING_L .)
    MULTEQOP        reduce using rule 101 (literal -> STRING_L .)
    DIVEQOP         reduce using rule 101 (literal -> STRING_L .)
    MODEQOP         reduce using rule 101 (literal -> STRING_L .)
    PLUSEQOP        reduce using rule 101 (literal -> STRING_L .)
    MINUSEQOP       reduce using rule 101 (literal -> STRING_L .)
    LSHIFTEQOP      reduce using rule 101 (literal -> STRING_L .)
    RSHIFTEQOP      reduce using rule 101 (literal -> STRING_L .)
    BANDEQOP        reduce using rule 101 (literal -> STRING_L .)
    BOREQOP         reduce using rule 101 (literal -> STRING_L .)
    RPAREN          reduce using rule 101 (literal -> STRING_L .)
    COMMA           reduce using rule 101 (literal -> STRING_L .)
    SEMICOLON       reduce using rule 101 (literal -> STRING_L .)
    RCPAREN         reduce using rule 101 (literal -> STRING_L .)
    COLON           reduce using rule 101 (literal -> STRING_L .)
    RTEMPLATE       reduce using rule 101 (literal -> STRING_L .)


state 144

    (102) literal -> NUMBER .

    LSPAREN         reduce using rule 102 (literal -> NUMBER .)
    LPAREN          reduce using rule 102 (literal -> NUMBER .)
    DOT             reduce using rule 102 (literal -> NUMBER .)
    ARROW           reduce using rule 102 (literal -> NUMBER .)
    DPLUSOP         reduce using rule 102 (literal -> NUMBER .)
    DMINUSOP        reduce using rule 102 (literal -> NUMBER .)
    LTEMPLATE       reduce using rule 102 (literal -> NUMBER .)
    MULTOP          reduce using rule 102 (literal -> NUMBER .)
    DIVOP           reduce using rule 102 (literal -> NUMBER .)
    MODOP           reduce using rule 102 (literal -> NUMBER .)
    PLUSOP          reduce using rule 102 (literal -> NUMBER .)
    MINUSOP         reduce using rule 102 (literal -> NUMBER .)
    LSHIFT          reduce using rule 102 (literal -> NUMBER .)
    RSHIFT          reduce using rule 102 (literal -> NUMBER .)
    LTCOMP          reduce using rule 102 (literal -> NUMBER .)
    GTCOMP          reduce using rule 102 (literal -> NUMBER .)
    LTECOMP         reduce using rule 102 (literal -> NUMBER .)
    GTECOMP         reduce using rule 102 (literal -> NUMBER .)
    EQCOMP          reduce using rule 102 (literal -> NUMBER .)
    NEQCOMP         reduce using rule 102 (literal -> NUMBER .)
    BANDOP          reduce using rule 102 (literal -> NUMBER .)
    XOROP           reduce using rule 102 (literal -> NUMBER .)
    OROP            reduce using rule 102 (literal -> NUMBER .)
    ANDOP           reduce using rule 102 (literal -> NUMBER .)
    QUESMARK        reduce using rule 102 (literal -> NUMBER .)
    RSPAREN         reduce using rule 102 (literal -> NUMBER .)
    EQUAL           reduce using rule 102 (literal -> NUMBER .)
    MULTEQOP        reduce using rule 102 (literal -> NUMBER .)
    DIVEQOP         reduce using rule 102 (literal -> NUMBER .)
    MODEQOP         reduce using rule 102 (literal -> NUMBER .)
    PLUSEQOP        reduce using rule 102 (literal -> NUMBER .)
    MINUSEQOP       reduce using rule 102 (literal -> NUMBER .)
    LSHIFTEQOP      reduce using rule 102 (literal -> NUMBER .)
    RSHIFTEQOP      reduce using rule 102 (literal -> NUMBER .)
    BANDEQOP        reduce using rule 102 (literal -> NUMBER .)
    BOREQOP         reduce using rule 102 (literal -> NUMBER .)
    RPAREN          reduce using rule 102 (literal -> NUMBER .)
    COMMA           reduce using rule 102 (literal -> NUMBER .)
    SEMICOLON       reduce using rule 102 (literal -> NUMBER .)
    RCPAREN         reduce using rule 102 (literal -> NUMBER .)
    COLON           reduce using rule 102 (literal -> NUMBER .)
    RTEMPLATE       reduce using rule 102 (literal -> NUMBER .)


state 145

    (103) literal -> SCHAR .

    LSPAREN         reduce using rule 103 (literal -> SCHAR .)
    LPAREN          reduce using rule 103 (literal -> SCHAR .)
    DOT             reduce using rule 103 (literal -> SCHAR .)
    ARROW           reduce using rule 103 (literal -> SCHAR .)
    DPLUSOP         reduce using rule 103 (literal -> SCHAR .)
    DMINUSOP        reduce using rule 103 (literal -> SCHAR .)
    LTEMPLATE       reduce using rule 103 (literal -> SCHAR .)
    MULTOP          reduce using rule 103 (literal -> SCHAR .)
    DIVOP           reduce using rule 103 (literal -> SCHAR .)
    MODOP           reduce using rule 103 (literal -> SCHAR .)
    PLUSOP          reduce using rule 103 (literal -> SCHAR .)
    MINUSOP         reduce using rule 103 (literal -> SCHAR .)
    LSHIFT          reduce using rule 103 (literal -> SCHAR .)
    RSHIFT          reduce using rule 103 (literal -> SCHAR .)
    LTCOMP          reduce using rule 103 (literal -> SCHAR .)
    GTCOMP          reduce using rule 103 (literal -> SCHAR .)
    LTECOMP         reduce using rule 103 (literal -> SCHAR .)
    GTECOMP         reduce using rule 103 (literal -> SCHAR .)
    EQCOMP          reduce using rule 103 (literal -> SCHAR .)
    NEQCOMP         reduce using rule 103 (literal -> SCHAR .)
    BANDOP          reduce using rule 103 (literal -> SCHAR .)
    XOROP           reduce using rule 103 (literal -> SCHAR .)
    OROP            reduce using rule 103 (literal -> SCHAR .)
    ANDOP           reduce using rule 103 (literal -> SCHAR .)
    QUESMARK        reduce using rule 103 (literal -> SCHAR .)
    RSPAREN         reduce using rule 103 (literal -> SCHAR .)
    EQUAL           reduce using rule 103 (literal -> SCHAR .)
    MULTEQOP        reduce using rule 103 (literal -> SCHAR .)
    DIVEQOP         reduce using rule 103 (literal -> SCHAR .)
    MODEQOP         reduce using rule 103 (literal -> SCHAR .)
    PLUSEQOP        reduce using rule 103 (literal -> SCHAR .)
    MINUSEQOP       reduce using rule 103 (literal -> SCHAR .)
    LSHIFTEQOP      reduce using rule 103 (literal -> SCHAR .)
    RSHIFTEQOP      reduce using rule 103 (literal -> SCHAR .)
    BANDEQOP        reduce using rule 103 (literal -> SCHAR .)
    BOREQOP         reduce using rule 103 (literal -> SCHAR .)
    RPAREN          reduce using rule 103 (literal -> SCHAR .)
    COMMA           reduce using rule 103 (literal -> SCHAR .)
    SEMICOLON       reduce using rule 103 (literal -> SCHAR .)
    RCPAREN         reduce using rule 103 (literal -> SCHAR .)
    COLON           reduce using rule 103 (literal -> SCHAR .)
    RTEMPLATE       reduce using rule 103 (literal -> SCHAR .)


state 146

    (100) primary_expression -> LPAREN . expression RPAREN
    (105) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (43) expression -> . assignment_expression
    (44) expression -> . throw_expression
    (45) expression -> . expression COMMA assignment_expression
    (165) type_name -> . type_specifier_ abstract_declarator
    (166) type_name -> . type_specifier_
    (48) assignment_expression -> . conditional_expression
    (49) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (46) throw_expression -> . THROW expression
    (47) throw_expression -> . THROW
    (167) type_specifier_ -> . CONST type_specifier
    (168) type_specifier_ -> . type_specifier
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (171) type_specifier -> . simple_type_name
    (172) type_specifier -> . complex_type_specifier
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (173) simple_type_name -> . CHAR
    (174) simple_type_name -> . SHORT
    (175) simple_type_name -> . INT
    (176) simple_type_name -> . LONG
    (177) simple_type_name -> . SIGNED
    (178) simple_type_name -> . UNSIGNED
    (179) simple_type_name -> . FLOAT
    (180) simple_type_name -> . DOUBLE
    (181) simple_type_name -> . VOID
    (182) simple_type_name -> . STRING
    (183) simple_type_name -> . AUTO
    (184) complex_type_specifier -> . class_key IDENTIFIER
    (185) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (186) complex_type_specifier -> . TYPE IDENTIFIER
    (187) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (200) class_key -> . CLASS
    (201) class_key -> . STRUCT
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression

    THROW           shift and go to state 212
    CONST           shift and go to state 16
    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    THIS            shift and go to state 142
    LPAREN          shift and go to state 146
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    expression                     shift and go to state 209
    type_name                      shift and go to state 208
    cast_expression                shift and go to state 124
    assignment_expression          shift and go to state 210
    throw_expression               shift and go to state 211
    type_specifier_                shift and go to state 184
    conditional_expression         shift and go to state 149
    unary_expression               shift and go to state 150
    type_specifier                 shift and go to state 17
    logical_OR_expression          shift and go to state 112
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    logical_AND_expression         shift and go to state 113
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    class_key                      shift and go to state 56
    inclusive_OR_expression        shift and go to state 114
    literal                        shift and go to state 141
    exclusive_OR_expression        shift and go to state 115
    AND_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 147

    (280) initializer -> LPAREN expression_list . RPAREN
    (287) expression_list -> expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 231
    COMMA           shift and go to state 232


state 148

    (286) expression_list -> assignment_expression .

    RPAREN          reduce using rule 286 (expression_list -> assignment_expression .)
    COMMA           reduce using rule 286 (expression_list -> assignment_expression .)


state 149

    (48) assignment_expression -> conditional_expression .

    RPAREN          reduce using rule 48 (assignment_expression -> conditional_expression .)
    COMMA           reduce using rule 48 (assignment_expression -> conditional_expression .)
    SEMICOLON       reduce using rule 48 (assignment_expression -> conditional_expression .)
    RCPAREN         reduce using rule 48 (assignment_expression -> conditional_expression .)
    COLON           reduce using rule 48 (assignment_expression -> conditional_expression .)
    RSPAREN         reduce using rule 48 (assignment_expression -> conditional_expression .)
    RTEMPLATE       reduce using rule 48 (assignment_expression -> conditional_expression .)


state 150

    (49) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (104) cast_expression -> unary_expression .
    (50) assignment_operator -> . EQUAL
    (51) assignment_operator -> . MULTEQOP
    (52) assignment_operator -> . DIVEQOP
    (53) assignment_operator -> . MODEQOP
    (54) assignment_operator -> . PLUSEQOP
    (55) assignment_operator -> . MINUSEQOP
    (56) assignment_operator -> . LSHIFTEQOP
    (57) assignment_operator -> . RSHIFTEQOP
    (58) assignment_operator -> . BANDEQOP
    (59) assignment_operator -> . BOREQOP

    MULTOP          reduce using rule 104 (cast_expression -> unary_expression .)
    DIVOP           reduce using rule 104 (cast_expression -> unary_expression .)
    MODOP           reduce using rule 104 (cast_expression -> unary_expression .)
    PLUSOP          reduce using rule 104 (cast_expression -> unary_expression .)
    MINUSOP         reduce using rule 104 (cast_expression -> unary_expression .)
    LSHIFT          reduce using rule 104 (cast_expression -> unary_expression .)
    RSHIFT          reduce using rule 104 (cast_expression -> unary_expression .)
    LTCOMP          reduce using rule 104 (cast_expression -> unary_expression .)
    GTCOMP          reduce using rule 104 (cast_expression -> unary_expression .)
    LTECOMP         reduce using rule 104 (cast_expression -> unary_expression .)
    GTECOMP         reduce using rule 104 (cast_expression -> unary_expression .)
    EQCOMP          reduce using rule 104 (cast_expression -> unary_expression .)
    NEQCOMP         reduce using rule 104 (cast_expression -> unary_expression .)
    BANDOP          reduce using rule 104 (cast_expression -> unary_expression .)
    XOROP           reduce using rule 104 (cast_expression -> unary_expression .)
    OROP            reduce using rule 104 (cast_expression -> unary_expression .)
    ANDOP           reduce using rule 104 (cast_expression -> unary_expression .)
    QUESMARK        reduce using rule 104 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 104 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 104 (cast_expression -> unary_expression .)
    SEMICOLON       reduce using rule 104 (cast_expression -> unary_expression .)
    RCPAREN         reduce using rule 104 (cast_expression -> unary_expression .)
    COLON           reduce using rule 104 (cast_expression -> unary_expression .)
    RSPAREN         reduce using rule 104 (cast_expression -> unary_expression .)
    RTEMPLATE       reduce using rule 104 (cast_expression -> unary_expression .)
    EQUAL           shift and go to state 234
    MULTEQOP        shift and go to state 235
    DIVEQOP         shift and go to state 236
    MODEQOP         shift and go to state 237
    PLUSEQOP        shift and go to state 238
    MINUSEQOP       shift and go to state 239
    LSHIFTEQOP      shift and go to state 240
    RSHIFTEQOP      shift and go to state 241
    BANDEQOP        shift and go to state 242
    BOREQOP         shift and go to state 243

    assignment_operator            shift and go to state 233

state 151

    (277) initializer -> EQUAL assignment_expression .

    SEMICOLON       reduce using rule 277 (initializer -> EQUAL assignment_expression .)
    COMMA           reduce using rule 277 (initializer -> EQUAL assignment_expression .)


state 152

    (278) initializer -> EQUAL LCPAREN . initializer_list RCPAREN
    (279) initializer -> EQUAL LCPAREN . initializer_list COMMA RCPAREN
    (281) initializer_list -> . assignment_expression
    (282) initializer_list -> . initializer_list COMMA assignment_expression
    (283) initializer_list -> . LCPAREN initializer_list RCPAREN
    (284) initializer_list -> . LCPAREN initializer_list COMMA RCPAREN
    (48) assignment_expression -> . conditional_expression
    (49) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LCPAREN         shift and go to state 244
    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    THIS            shift and go to state 142
    LPAREN          shift and go to state 146
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    initializer_list               shift and go to state 245
    assignment_expression          shift and go to state 246
    conditional_expression         shift and go to state 149
    unary_expression               shift and go to state 150
    logical_OR_expression          shift and go to state 112
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    cast_expression                shift and go to state 124
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    logical_AND_expression         shift and go to state 113
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    inclusive_OR_expression        shift and go to state 114
    literal                        shift and go to state 141
    exclusive_OR_expression        shift and go to state 115
    AND_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 153

    (285) asm_declaration -> ASM LPAREN STRING_L RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 247


state 154

    (202) class_define_specifier -> class_head LCPAREN member_list RCPAREN .

    SEMICOLON       reduce using rule 202 (class_define_specifier -> class_head LCPAREN member_list RCPAREN .)


state 155

    (206) member_list -> member_list access_list .

    RCPAREN         reduce using rule 206 (member_list -> member_list access_list .)
    PRIVATE         reduce using rule 206 (member_list -> member_list access_list .)
    PROTECTED       reduce using rule 206 (member_list -> member_list access_list .)
    PUBLIC          reduce using rule 206 (member_list -> member_list access_list .)


state 156

    (212) member_access_list -> member_declaration member_access_list .

    RCPAREN         reduce using rule 212 (member_access_list -> member_declaration member_access_list .)
    PRIVATE         reduce using rule 212 (member_access_list -> member_declaration member_access_list .)
    PROTECTED       reduce using rule 212 (member_access_list -> member_declaration member_access_list .)
    PUBLIC          reduce using rule 212 (member_access_list -> member_declaration member_access_list .)


state 157

    (210) access_list -> access_specifier COLON . member_access_list
    (211) access_list -> access_specifier COLON .
    (212) member_access_list -> . member_declaration member_access_list
    (213) member_access_list -> . member_declaration
    (214) member_declaration -> . type_specifier_ member_declarator_list SEMICOLON
    (215) member_declaration -> . member_declarator_list SEMICOLON
    (216) member_declaration -> . type_specifier_ SEMICOLON
    (217) member_declaration -> . SEMICOLON
    (218) member_declaration -> . function_definition
    (219) member_declaration -> . class_define_specifier SEMICOLON
    (167) type_specifier_ -> . CONST type_specifier
    (168) type_specifier_ -> . type_specifier
    (220) member_declarator_list -> . member_declarator
    (221) member_declarator_list -> . member_declarator_list COMMA member_declarator
    (224) function_definition -> . type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope
    (202) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (203) class_define_specifier -> . class_head LCPAREN RCPAREN
    (171) type_specifier -> . simple_type_name
    (172) type_specifier -> . complex_type_specifier
    (222) member_declarator -> . declarator pure_specifier
    (223) member_declarator -> . declarator
    (189) class_head -> . class_key IDENTIFIER base_spec
    (190) class_head -> . class_key IDENTIFIER
    (173) simple_type_name -> . CHAR
    (174) simple_type_name -> . SHORT
    (175) simple_type_name -> . INT
    (176) simple_type_name -> . LONG
    (177) simple_type_name -> . SIGNED
    (178) simple_type_name -> . UNSIGNED
    (179) simple_type_name -> . FLOAT
    (180) simple_type_name -> . DOUBLE
    (181) simple_type_name -> . VOID
    (182) simple_type_name -> . STRING
    (183) simple_type_name -> . AUTO
    (184) complex_type_specifier -> . class_key IDENTIFIER
    (185) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (186) complex_type_specifier -> . TYPE IDENTIFIER
    (187) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (112) declarator -> . name
    (113) declarator -> . unary2_operator declarator
    (114) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (115) declarator -> . declarator LSPAREN RSPAREN
    (200) class_key -> . CLASS
    (201) class_key -> . STRUCT
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP

    RCPAREN         reduce using rule 211 (access_list -> access_specifier COLON .)
    PRIVATE         reduce using rule 211 (access_list -> access_specifier COLON .)
    PROTECTED       reduce using rule 211 (access_list -> access_specifier COLON .)
    PUBLIC          reduce using rule 211 (access_list -> access_specifier COLON .)
    SEMICOLON       shift and go to state 83
    CONST           shift and go to state 16
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53

    member_access_list             shift and go to state 248
    member_declaration             shift and go to state 79
    type_specifier_                shift and go to state 81
    member_declarator_list         shift and go to state 82
    function_definition            shift and go to state 84
    class_define_specifier         shift and go to state 85
    type_specifier                 shift and go to state 17
    member_declarator              shift and go to state 89
    declarator                     shift and go to state 90
    class_head                     shift and go to state 19
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 24
    name                           shift and go to state 48
    unary2_operator                shift and go to state 49

state 158

    (214) member_declaration -> type_specifier_ member_declarator_list . SEMICOLON
    (221) member_declarator_list -> member_declarator_list . COMMA member_declarator

    SEMICOLON       shift and go to state 249
    COMMA           shift and go to state 162


state 159

    (216) member_declaration -> type_specifier_ SEMICOLON .

    SEMICOLON       reduce using rule 216 (member_declaration -> type_specifier_ SEMICOLON .)
    CONST           reduce using rule 216 (member_declaration -> type_specifier_ SEMICOLON .)
    CHAR            reduce using rule 216 (member_declaration -> type_specifier_ SEMICOLON .)
    SHORT           reduce using rule 216 (member_declaration -> type_specifier_ SEMICOLON .)
    INT             reduce using rule 216 (member_declaration -> type_specifier_ SEMICOLON .)
    LONG            reduce using rule 216 (member_declaration -> type_specifier_ SEMICOLON .)
    SIGNED          reduce using rule 216 (member_declaration -> type_specifier_ SEMICOLON .)
    UNSIGNED        reduce using rule 216 (member_declaration -> type_specifier_ SEMICOLON .)
    FLOAT           reduce using rule 216 (member_declaration -> type_specifier_ SEMICOLON .)
    DOUBLE          reduce using rule 216 (member_declaration -> type_specifier_ SEMICOLON .)
    VOID            reduce using rule 216 (member_declaration -> type_specifier_ SEMICOLON .)
    STRING          reduce using rule 216 (member_declaration -> type_specifier_ SEMICOLON .)
    AUTO            reduce using rule 216 (member_declaration -> type_specifier_ SEMICOLON .)
    TYPE            reduce using rule 216 (member_declaration -> type_specifier_ SEMICOLON .)
    CLASS           reduce using rule 216 (member_declaration -> type_specifier_ SEMICOLON .)
    STRUCT          reduce using rule 216 (member_declaration -> type_specifier_ SEMICOLON .)
    IDENTIFIER      reduce using rule 216 (member_declaration -> type_specifier_ SEMICOLON .)
    DOUBLEBNOP      reduce using rule 216 (member_declaration -> type_specifier_ SEMICOLON .)
    MULTOP          reduce using rule 216 (member_declaration -> type_specifier_ SEMICOLON .)
    BANDOP          reduce using rule 216 (member_declaration -> type_specifier_ SEMICOLON .)
    RCPAREN         reduce using rule 216 (member_declaration -> type_specifier_ SEMICOLON .)
    PRIVATE         reduce using rule 216 (member_declaration -> type_specifier_ SEMICOLON .)
    PROTECTED       reduce using rule 216 (member_declaration -> type_specifier_ SEMICOLON .)
    PUBLIC          reduce using rule 216 (member_declaration -> type_specifier_ SEMICOLON .)


state 160

    (224) function_definition -> type_specifier_ declarator . func_push_scope arg_list RPAREN fct_body pop_scope
    (114) declarator -> declarator . LSPAREN constant_expression RSPAREN
    (115) declarator -> declarator . LSPAREN RSPAREN
    (222) member_declarator -> declarator . pure_specifier
    (223) member_declarator -> declarator .
    (226) func_push_scope -> . LPAREN
    (188) pure_specifier -> . EQUAL NUMBER

    LSPAREN         shift and go to state 67
    SEMICOLON       reduce using rule 223 (member_declarator -> declarator .)
    COMMA           reduce using rule 223 (member_declarator -> declarator .)
    LPAREN          shift and go to state 251
    EQUAL           shift and go to state 165

    func_push_scope                shift and go to state 250
    pure_specifier                 shift and go to state 164

state 161

    (215) member_declaration -> member_declarator_list SEMICOLON .

    SEMICOLON       reduce using rule 215 (member_declaration -> member_declarator_list SEMICOLON .)
    CONST           reduce using rule 215 (member_declaration -> member_declarator_list SEMICOLON .)
    CHAR            reduce using rule 215 (member_declaration -> member_declarator_list SEMICOLON .)
    SHORT           reduce using rule 215 (member_declaration -> member_declarator_list SEMICOLON .)
    INT             reduce using rule 215 (member_declaration -> member_declarator_list SEMICOLON .)
    LONG            reduce using rule 215 (member_declaration -> member_declarator_list SEMICOLON .)
    SIGNED          reduce using rule 215 (member_declaration -> member_declarator_list SEMICOLON .)
    UNSIGNED        reduce using rule 215 (member_declaration -> member_declarator_list SEMICOLON .)
    FLOAT           reduce using rule 215 (member_declaration -> member_declarator_list SEMICOLON .)
    DOUBLE          reduce using rule 215 (member_declaration -> member_declarator_list SEMICOLON .)
    VOID            reduce using rule 215 (member_declaration -> member_declarator_list SEMICOLON .)
    STRING          reduce using rule 215 (member_declaration -> member_declarator_list SEMICOLON .)
    AUTO            reduce using rule 215 (member_declaration -> member_declarator_list SEMICOLON .)
    TYPE            reduce using rule 215 (member_declaration -> member_declarator_list SEMICOLON .)
    CLASS           reduce using rule 215 (member_declaration -> member_declarator_list SEMICOLON .)
    STRUCT          reduce using rule 215 (member_declaration -> member_declarator_list SEMICOLON .)
    IDENTIFIER      reduce using rule 215 (member_declaration -> member_declarator_list SEMICOLON .)
    DOUBLEBNOP      reduce using rule 215 (member_declaration -> member_declarator_list SEMICOLON .)
    MULTOP          reduce using rule 215 (member_declaration -> member_declarator_list SEMICOLON .)
    BANDOP          reduce using rule 215 (member_declaration -> member_declarator_list SEMICOLON .)
    RCPAREN         reduce using rule 215 (member_declaration -> member_declarator_list SEMICOLON .)
    PRIVATE         reduce using rule 215 (member_declaration -> member_declarator_list SEMICOLON .)
    PROTECTED       reduce using rule 215 (member_declaration -> member_declarator_list SEMICOLON .)
    PUBLIC          reduce using rule 215 (member_declaration -> member_declarator_list SEMICOLON .)


state 162

    (221) member_declarator_list -> member_declarator_list COMMA . member_declarator
    (222) member_declarator -> . declarator pure_specifier
    (223) member_declarator -> . declarator
    (112) declarator -> . name
    (113) declarator -> . unary2_operator declarator
    (114) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (115) declarator -> . declarator LSPAREN RSPAREN
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP

    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53

    member_declarator              shift and go to state 252
    declarator                     shift and go to state 90
    name                           shift and go to state 48
    unary2_operator                shift and go to state 49

state 163

    (219) member_declaration -> class_define_specifier SEMICOLON .

    SEMICOLON       reduce using rule 219 (member_declaration -> class_define_specifier SEMICOLON .)
    CONST           reduce using rule 219 (member_declaration -> class_define_specifier SEMICOLON .)
    CHAR            reduce using rule 219 (member_declaration -> class_define_specifier SEMICOLON .)
    SHORT           reduce using rule 219 (member_declaration -> class_define_specifier SEMICOLON .)
    INT             reduce using rule 219 (member_declaration -> class_define_specifier SEMICOLON .)
    LONG            reduce using rule 219 (member_declaration -> class_define_specifier SEMICOLON .)
    SIGNED          reduce using rule 219 (member_declaration -> class_define_specifier SEMICOLON .)
    UNSIGNED        reduce using rule 219 (member_declaration -> class_define_specifier SEMICOLON .)
    FLOAT           reduce using rule 219 (member_declaration -> class_define_specifier SEMICOLON .)
    DOUBLE          reduce using rule 219 (member_declaration -> class_define_specifier SEMICOLON .)
    VOID            reduce using rule 219 (member_declaration -> class_define_specifier SEMICOLON .)
    STRING          reduce using rule 219 (member_declaration -> class_define_specifier SEMICOLON .)
    AUTO            reduce using rule 219 (member_declaration -> class_define_specifier SEMICOLON .)
    TYPE            reduce using rule 219 (member_declaration -> class_define_specifier SEMICOLON .)
    CLASS           reduce using rule 219 (member_declaration -> class_define_specifier SEMICOLON .)
    STRUCT          reduce using rule 219 (member_declaration -> class_define_specifier SEMICOLON .)
    IDENTIFIER      reduce using rule 219 (member_declaration -> class_define_specifier SEMICOLON .)
    DOUBLEBNOP      reduce using rule 219 (member_declaration -> class_define_specifier SEMICOLON .)
    MULTOP          reduce using rule 219 (member_declaration -> class_define_specifier SEMICOLON .)
    BANDOP          reduce using rule 219 (member_declaration -> class_define_specifier SEMICOLON .)
    RCPAREN         reduce using rule 219 (member_declaration -> class_define_specifier SEMICOLON .)
    PRIVATE         reduce using rule 219 (member_declaration -> class_define_specifier SEMICOLON .)
    PROTECTED       reduce using rule 219 (member_declaration -> class_define_specifier SEMICOLON .)
    PUBLIC          reduce using rule 219 (member_declaration -> class_define_specifier SEMICOLON .)


state 164

    (222) member_declarator -> declarator pure_specifier .

    SEMICOLON       reduce using rule 222 (member_declarator -> declarator pure_specifier .)
    COMMA           reduce using rule 222 (member_declarator -> declarator pure_specifier .)


state 165

    (188) pure_specifier -> EQUAL . NUMBER

    NUMBER          shift and go to state 253


state 166

    (270) template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE . declaration
    (263) declaration -> . type_specifier_ declarator_list SEMICOLON
    (264) declaration -> . asm_declaration
    (265) declaration -> . function_definition
    (266) declaration -> . function_decl
    (267) declaration -> . class_define_specifier SEMICOLON
    (268) declaration -> . template_declaration
    (269) declaration -> . typedef_declarator
    (167) type_specifier_ -> . CONST type_specifier
    (168) type_specifier_ -> . type_specifier
    (285) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (224) function_definition -> . type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope
    (225) function_decl -> . type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope
    (202) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (203) class_define_specifier -> . class_head LCPAREN RCPAREN
    (270) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (169) typedef_declarator -> . TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON
    (170) typedef_declarator -> . TYPEDEF type_specifier_ IDENTIFIER SEMICOLON
    (171) type_specifier -> . simple_type_name
    (172) type_specifier -> . complex_type_specifier
    (189) class_head -> . class_key IDENTIFIER base_spec
    (190) class_head -> . class_key IDENTIFIER
    (173) simple_type_name -> . CHAR
    (174) simple_type_name -> . SHORT
    (175) simple_type_name -> . INT
    (176) simple_type_name -> . LONG
    (177) simple_type_name -> . SIGNED
    (178) simple_type_name -> . UNSIGNED
    (179) simple_type_name -> . FLOAT
    (180) simple_type_name -> . DOUBLE
    (181) simple_type_name -> . VOID
    (182) simple_type_name -> . STRING
    (183) simple_type_name -> . AUTO
    (184) complex_type_specifier -> . class_key IDENTIFIER
    (185) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (186) complex_type_specifier -> . TYPE IDENTIFIER
    (187) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (200) class_key -> . CLASS
    (201) class_key -> . STRUCT

    CONST           shift and go to state 16
    ASM             shift and go to state 18
    TEMPLATE        shift and go to state 20
    TYPEDEF         shift and go to state 21
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38

    declaration                    shift and go to state 254
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    function_decl                  shift and go to state 12
    class_define_specifier         shift and go to state 13
    template_declaration           shift and go to state 14
    typedef_declarator             shift and go to state 15
    type_specifier                 shift and go to state 17
    class_head                     shift and go to state 19
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 24

state 167

    (272) template_argument_list -> template_argument_list COMMA . argument_declaration
    (120) argument_declaration -> . type_specifier_ declarator
    (121) argument_declaration -> . type_specifier_ declarator EQUAL expression
    (122) argument_declaration -> . type_specifier_ abstract_declarator
    (123) argument_declaration -> . type_specifier_
    (167) type_specifier_ -> . CONST type_specifier
    (168) type_specifier_ -> . type_specifier
    (171) type_specifier -> . simple_type_name
    (172) type_specifier -> . complex_type_specifier
    (173) simple_type_name -> . CHAR
    (174) simple_type_name -> . SHORT
    (175) simple_type_name -> . INT
    (176) simple_type_name -> . LONG
    (177) simple_type_name -> . SIGNED
    (178) simple_type_name -> . UNSIGNED
    (179) simple_type_name -> . FLOAT
    (180) simple_type_name -> . DOUBLE
    (181) simple_type_name -> . VOID
    (182) simple_type_name -> . STRING
    (183) simple_type_name -> . AUTO
    (184) complex_type_specifier -> . class_key IDENTIFIER
    (185) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (186) complex_type_specifier -> . TYPE IDENTIFIER
    (187) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (200) class_key -> . CLASS
    (201) class_key -> . STRUCT

    CONST           shift and go to state 16
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38

    argument_declaration           shift and go to state 255
    type_specifier_                shift and go to state 93
    type_specifier                 shift and go to state 17
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 56

state 168

    (120) argument_declaration -> type_specifier_ declarator .
    (121) argument_declaration -> type_specifier_ declarator . EQUAL expression
    (114) declarator -> declarator . LSPAREN constant_expression RSPAREN
    (115) declarator -> declarator . LSPAREN RSPAREN

    RTEMPLATE       reduce using rule 120 (argument_declaration -> type_specifier_ declarator .)
    COMMA           reduce using rule 120 (argument_declaration -> type_specifier_ declarator .)
    RPAREN          reduce using rule 120 (argument_declaration -> type_specifier_ declarator .)
    EQUAL           shift and go to state 256
    LSPAREN         shift and go to state 67


state 169

    (122) argument_declaration -> type_specifier_ abstract_declarator .
    (109) abstract_declarator -> abstract_declarator . LSPAREN constant_expression RSPAREN
    (111) abstract_declarator -> abstract_declarator . LSPAREN RSPAREN

    RTEMPLATE       reduce using rule 122 (argument_declaration -> type_specifier_ abstract_declarator .)
    COMMA           reduce using rule 122 (argument_declaration -> type_specifier_ abstract_declarator .)
    RPAREN          reduce using rule 122 (argument_declaration -> type_specifier_ abstract_declarator .)
    LSPAREN         shift and go to state 172


state 170

    (113) declarator -> unary2_operator . declarator
    (106) abstract_declarator -> unary2_operator .
    (107) abstract_declarator -> unary2_operator . abstract_declarator
    (112) declarator -> . name
    (113) declarator -> . unary2_operator declarator
    (114) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (115) declarator -> . declarator LSPAREN RSPAREN
    (106) abstract_declarator -> . unary2_operator
    (107) abstract_declarator -> . unary2_operator abstract_declarator
    (108) abstract_declarator -> . LSPAREN constant_expression RSPAREN
    (109) abstract_declarator -> . abstract_declarator LSPAREN constant_expression RSPAREN
    (110) abstract_declarator -> . LSPAREN RSPAREN
    (111) abstract_declarator -> . abstract_declarator LSPAREN RSPAREN
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP

    LSPAREN         reduce using rule 106 (abstract_declarator -> unary2_operator .)
    RTEMPLATE       reduce using rule 106 (abstract_declarator -> unary2_operator .)
    COMMA           reduce using rule 106 (abstract_declarator -> unary2_operator .)
    RPAREN          reduce using rule 106 (abstract_declarator -> unary2_operator .)
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53

  ! LSPAREN         [ shift and go to state 97 ]

    unary2_operator                shift and go to state 170
    declarator                     shift and go to state 71
    abstract_declarator            shift and go to state 174
    name                           shift and go to state 48

state 171

    (169) typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 257


state 172

    (109) abstract_declarator -> abstract_declarator LSPAREN . constant_expression RSPAREN
    (111) abstract_declarator -> abstract_declarator LSPAREN . RSPAREN
    (12) constant_expression -> . conditional_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR

    RSPAREN         shift and go to state 259
    LPAREN          shift and go to state 126
    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    THIS            shift and go to state 142
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    constant_expression            shift and go to state 258
    conditional_expression         shift and go to state 111
    logical_OR_expression          shift and go to state 112
    logical_AND_expression         shift and go to state 113
    inclusive_OR_expression        shift and go to state 114
    exclusive_OR_expression        shift and go to state 115
    AND_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121
    cast_expression                shift and go to state 124
    unary_expression               shift and go to state 125
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    literal                        shift and go to state 141

state 173

    (170) typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .

    CONST           reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    ASM             reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    TEMPLATE        reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    TYPEDEF         reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    CHAR            reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    SHORT           reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    INT             reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    LONG            reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    SIGNED          reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    UNSIGNED        reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    FLOAT           reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    DOUBLE          reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    VOID            reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    STRING          reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    AUTO            reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    TYPE            reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    CLASS           reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    STRUCT          reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    $end            reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    RCPAREN         reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    SEMICOLON       reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    IF              reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    SWITCH          reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    DO              reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    FOR             reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    BREAK           reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    CONTINUE        reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    RETURN          reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    GOTO            reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    TRY             reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    THROW           reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    DPLUSOP         reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    DMINUSOP        reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    SIZEOF          reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    PLUSOP          reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    MINUSOP         reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    NOTSYM          reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    BNOP            reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    MULTOP          reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    BANDOP          reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    NEW             reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    DELETE          reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    THIS            reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    LPAREN          reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    DOUBLEBNOP      reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    STRING_L        reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    NUMBER          reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    SCHAR           reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    LCPAREN         reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    CASE            reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    DEFAULT         reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)


state 174

    (107) abstract_declarator -> unary2_operator abstract_declarator .
    (109) abstract_declarator -> abstract_declarator . LSPAREN constant_expression RSPAREN
    (111) abstract_declarator -> abstract_declarator . LSPAREN RSPAREN

    IDENTIFIER      reduce using rule 107 (abstract_declarator -> unary2_operator abstract_declarator .)
    LSPAREN         reduce using rule 107 (abstract_declarator -> unary2_operator abstract_declarator .)
    RTEMPLATE       reduce using rule 107 (abstract_declarator -> unary2_operator abstract_declarator .)
    COMMA           reduce using rule 107 (abstract_declarator -> unary2_operator abstract_declarator .)
    RPAREN          reduce using rule 107 (abstract_declarator -> unary2_operator abstract_declarator .)

  ! LSPAREN         [ shift and go to state 172 ]


state 175

    (108) abstract_declarator -> LSPAREN constant_expression . RSPAREN

    RSPAREN         shift and go to state 260


state 176

    (110) abstract_declarator -> LSPAREN RSPAREN .

    IDENTIFIER      reduce using rule 110 (abstract_declarator -> LSPAREN RSPAREN .)
    LSPAREN         reduce using rule 110 (abstract_declarator -> LSPAREN RSPAREN .)
    RTEMPLATE       reduce using rule 110 (abstract_declarator -> LSPAREN RSPAREN .)
    COMMA           reduce using rule 110 (abstract_declarator -> LSPAREN RSPAREN .)
    RPAREN          reduce using rule 110 (abstract_declarator -> LSPAREN RSPAREN .)


state 177

    (191) base_spec -> COLON base_list .
    (193) base_list -> base_list . COMMA base_specifier

    LCPAREN         reduce using rule 191 (base_spec -> COLON base_list .)
    COMMA           shift and go to state 261


state 178

    (192) base_list -> base_specifier .

    COMMA           reduce using rule 192 (base_list -> base_specifier .)
    LCPAREN         reduce using rule 192 (base_list -> base_specifier .)


state 179

    (194) base_specifier -> class_key . IDENTIFIER
    (195) base_specifier -> class_key . IDENTIFIER template_class_name

    IDENTIFIER      shift and go to state 262


state 180

    (196) base_specifier -> IDENTIFIER .
    (197) base_specifier -> IDENTIFIER . template_class_name
    (162) template_class_name -> . LTEMPLATE template_arg_list RTEMPLATE

    COMMA           reduce using rule 196 (base_specifier -> IDENTIFIER .)
    LCPAREN         reduce using rule 196 (base_specifier -> IDENTIFIER .)
    LTEMPLATE       shift and go to state 101

    template_class_name            shift and go to state 263

state 181

    (198) base_specifier -> access_specifier . class_key IDENTIFIER
    (199) base_specifier -> access_specifier . class_key IDENTIFIER template_class_name
    (200) class_key -> . CLASS
    (201) class_key -> . STRUCT

    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38

    class_key                      shift and go to state 264

state 182

    (162) template_class_name -> LTEMPLATE template_arg_list . RTEMPLATE
    (164) template_arg_list -> template_arg_list . COMMA type_name

    RTEMPLATE       shift and go to state 265
    COMMA           shift and go to state 266


state 183

    (163) template_arg_list -> type_name .

    RTEMPLATE       reduce using rule 163 (template_arg_list -> type_name .)
    COMMA           reduce using rule 163 (template_arg_list -> type_name .)


state 184

    (165) type_name -> type_specifier_ . abstract_declarator
    (166) type_name -> type_specifier_ .
    (106) abstract_declarator -> . unary2_operator
    (107) abstract_declarator -> . unary2_operator abstract_declarator
    (108) abstract_declarator -> . LSPAREN constant_expression RSPAREN
    (109) abstract_declarator -> . abstract_declarator LSPAREN constant_expression RSPAREN
    (110) abstract_declarator -> . LSPAREN RSPAREN
    (111) abstract_declarator -> . abstract_declarator LSPAREN RSPAREN
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP

    RTEMPLATE       reduce using rule 166 (type_name -> type_specifier_ .)
    COMMA           reduce using rule 166 (type_name -> type_specifier_ .)
    RPAREN          reduce using rule 166 (type_name -> type_specifier_ .)
    LSPAREN         shift and go to state 97
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53

    abstract_declarator            shift and go to state 267
    unary2_operator                shift and go to state 96

state 185

    (280) initializer -> LPAREN . expression_list RPAREN
    (286) expression_list -> . assignment_expression
    (287) expression_list -> . expression_list COMMA assignment_expression
    (48) assignment_expression -> . conditional_expression
    (49) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    THIS            shift and go to state 142
    LPAREN          shift and go to state 146
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    expression_list                shift and go to state 147
    assignment_expression          shift and go to state 148
    conditional_expression         shift and go to state 149
    unary_expression               shift and go to state 150
    logical_OR_expression          shift and go to state 112
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    cast_expression                shift and go to state 124
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    logical_AND_expression         shift and go to state 113
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    inclusive_OR_expression        shift and go to state 114
    literal                        shift and go to state 141
    exclusive_OR_expression        shift and go to state 115
    AND_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 186

    (224) function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN . fct_body pop_scope
    (225) function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN . SEMICOLON pop_scope
    (227) fct_body -> . compound_statement
    (228) compound_statement -> . LCPAREN statement_list RCPAREN
    (229) compound_statement -> . LCPAREN RCPAREN

    SEMICOLON       shift and go to state 269
    LCPAREN         shift and go to state 271

    fct_body                       shift and go to state 268
    compound_statement             shift and go to state 270

state 187

    (119) argument_declaration_list -> argument_declaration COMMA . argument_declaration_list
    (118) argument_declaration_list -> . argument_declaration
    (119) argument_declaration_list -> . argument_declaration COMMA argument_declaration_list
    (120) argument_declaration -> . type_specifier_ declarator
    (121) argument_declaration -> . type_specifier_ declarator EQUAL expression
    (122) argument_declaration -> . type_specifier_ abstract_declarator
    (123) argument_declaration -> . type_specifier_
    (167) type_specifier_ -> . CONST type_specifier
    (168) type_specifier_ -> . type_specifier
    (171) type_specifier -> . simple_type_name
    (172) type_specifier -> . complex_type_specifier
    (173) simple_type_name -> . CHAR
    (174) simple_type_name -> . SHORT
    (175) simple_type_name -> . INT
    (176) simple_type_name -> . LONG
    (177) simple_type_name -> . SIGNED
    (178) simple_type_name -> . UNSIGNED
    (179) simple_type_name -> . FLOAT
    (180) simple_type_name -> . DOUBLE
    (181) simple_type_name -> . VOID
    (182) simple_type_name -> . STRING
    (183) simple_type_name -> . AUTO
    (184) complex_type_specifier -> . class_key IDENTIFIER
    (185) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (186) complex_type_specifier -> . TYPE IDENTIFIER
    (187) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (200) class_key -> . CLASS
    (201) class_key -> . STRUCT

    CONST           shift and go to state 16
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38

    argument_declaration           shift and go to state 108
    argument_declaration_list      shift and go to state 272
    type_specifier_                shift and go to state 93
    type_specifier                 shift and go to state 17
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 56

state 188

    (114) declarator -> declarator LSPAREN constant_expression RSPAREN .

    LSPAREN         reduce using rule 114 (declarator -> declarator LSPAREN constant_expression RSPAREN .)
    LPAREN          reduce using rule 114 (declarator -> declarator LSPAREN constant_expression RSPAREN .)
    EQUAL           reduce using rule 114 (declarator -> declarator LSPAREN constant_expression RSPAREN .)
    SEMICOLON       reduce using rule 114 (declarator -> declarator LSPAREN constant_expression RSPAREN .)
    COMMA           reduce using rule 114 (declarator -> declarator LSPAREN constant_expression RSPAREN .)
    RTEMPLATE       reduce using rule 114 (declarator -> declarator LSPAREN constant_expression RSPAREN .)
    RPAREN          reduce using rule 114 (declarator -> declarator LSPAREN constant_expression RSPAREN .)


state 189

    (14) conditional_expression -> logical_OR_expression QUESMARK . expression COLON conditional_expression
    (43) expression -> . assignment_expression
    (44) expression -> . throw_expression
    (45) expression -> . expression COMMA assignment_expression
    (48) assignment_expression -> . conditional_expression
    (49) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (46) throw_expression -> . THROW expression
    (47) throw_expression -> . THROW
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression

    THROW           shift and go to state 212
    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    THIS            shift and go to state 142
    LPAREN          shift and go to state 146
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    logical_OR_expression          shift and go to state 112
    expression                     shift and go to state 273
    conditional_expression         shift and go to state 149
    assignment_expression          shift and go to state 210
    throw_expression               shift and go to state 211
    unary_expression               shift and go to state 150
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    cast_expression                shift and go to state 124
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    logical_AND_expression         shift and go to state 113
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    inclusive_OR_expression        shift and go to state 114
    literal                        shift and go to state 141
    exclusive_OR_expression        shift and go to state 115
    AND_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 190

    (16) logical_OR_expression -> logical_OR_expression OROP . logical_AND_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR

    LPAREN          shift and go to state 126
    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    THIS            shift and go to state 142
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    logical_AND_expression         shift and go to state 274
    inclusive_OR_expression        shift and go to state 114
    exclusive_OR_expression        shift and go to state 115
    AND_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121
    cast_expression                shift and go to state 124
    unary_expression               shift and go to state 125
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    literal                        shift and go to state 141

state 191

    (18) logical_AND_expression -> logical_AND_expression ANDOP . inclusive_OR_expression
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR

    LPAREN          shift and go to state 126
    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    THIS            shift and go to state 142
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    inclusive_OR_expression        shift and go to state 275
    exclusive_OR_expression        shift and go to state 115
    AND_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121
    cast_expression                shift and go to state 124
    unary_expression               shift and go to state 125
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    literal                        shift and go to state 141

state 192

    (20) inclusive_OR_expression -> inclusive_OR_expression OROP . exclusive_OR_expression
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR

    LPAREN          shift and go to state 126
    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    THIS            shift and go to state 142
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    exclusive_OR_expression        shift and go to state 276
    AND_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121
    cast_expression                shift and go to state 124
    unary_expression               shift and go to state 125
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    literal                        shift and go to state 141

state 193

    (22) exclusive_OR_expression -> exclusive_OR_expression XOROP . AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR

    LPAREN          shift and go to state 126
    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    THIS            shift and go to state 142
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    AND_expression                 shift and go to state 277
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121
    cast_expression                shift and go to state 124
    unary_expression               shift and go to state 125
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    literal                        shift and go to state 141

state 194

    (24) AND_expression -> AND_expression BANDOP . equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR

    LPAREN          shift and go to state 126
    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    THIS            shift and go to state 142
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    equality_expression            shift and go to state 278
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121
    cast_expression                shift and go to state 124
    unary_expression               shift and go to state 125
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    literal                        shift and go to state 141

state 195

    (26) equality_expression -> equality_expression EQCOMP . relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR

    LPAREN          shift and go to state 126
    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    THIS            shift and go to state 142
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    relational_expression          shift and go to state 279
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121
    cast_expression                shift and go to state 124
    unary_expression               shift and go to state 125
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    literal                        shift and go to state 141

state 196

    (27) equality_expression -> equality_expression NEQCOMP . relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR

    LPAREN          shift and go to state 126
    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    THIS            shift and go to state 142
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    relational_expression          shift and go to state 280
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121
    cast_expression                shift and go to state 124
    unary_expression               shift and go to state 125
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    literal                        shift and go to state 141

state 197

    (29) relational_expression -> relational_expression LTCOMP . shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR

    LPAREN          shift and go to state 126
    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    THIS            shift and go to state 142
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    shift_expression               shift and go to state 281
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121
    cast_expression                shift and go to state 124
    unary_expression               shift and go to state 125
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    literal                        shift and go to state 141

state 198

    (30) relational_expression -> relational_expression GTCOMP . shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR

    LPAREN          shift and go to state 126
    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    THIS            shift and go to state 142
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    shift_expression               shift and go to state 282
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121
    cast_expression                shift and go to state 124
    unary_expression               shift and go to state 125
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    literal                        shift and go to state 141

state 199

    (31) relational_expression -> relational_expression LTECOMP . shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR

    LPAREN          shift and go to state 126
    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    THIS            shift and go to state 142
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    shift_expression               shift and go to state 283
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121
    cast_expression                shift and go to state 124
    unary_expression               shift and go to state 125
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    literal                        shift and go to state 141

state 200

    (32) relational_expression -> relational_expression GTECOMP . shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR

    LPAREN          shift and go to state 126
    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    THIS            shift and go to state 142
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    shift_expression               shift and go to state 284
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121
    cast_expression                shift and go to state 124
    unary_expression               shift and go to state 125
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    literal                        shift and go to state 141

state 201

    (34) shift_expression -> shift_expression LSHIFT . additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR

    LPAREN          shift and go to state 126
    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    THIS            shift and go to state 142
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    additive_expression            shift and go to state 285
    multiplicative_expression      shift and go to state 121
    cast_expression                shift and go to state 124
    unary_expression               shift and go to state 125
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    literal                        shift and go to state 141

state 202

    (35) shift_expression -> shift_expression RSHIFT . additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR

    LPAREN          shift and go to state 126
    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    THIS            shift and go to state 142
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    additive_expression            shift and go to state 286
    multiplicative_expression      shift and go to state 121
    cast_expression                shift and go to state 124
    unary_expression               shift and go to state 125
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    literal                        shift and go to state 141

state 203

    (37) additive_expression -> additive_expression PLUSOP . multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR

    LPAREN          shift and go to state 126
    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    THIS            shift and go to state 142
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    multiplicative_expression      shift and go to state 287
    cast_expression                shift and go to state 124
    unary_expression               shift and go to state 125
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    literal                        shift and go to state 141

state 204

    (38) additive_expression -> additive_expression MINUSOP . multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR

    LPAREN          shift and go to state 126
    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    THIS            shift and go to state 142
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    multiplicative_expression      shift and go to state 288
    cast_expression                shift and go to state 124
    unary_expression               shift and go to state 125
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    literal                        shift and go to state 141

state 205

    (40) multiplicative_expression -> multiplicative_expression MULTOP . cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR

    LPAREN          shift and go to state 126
    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    THIS            shift and go to state 142
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    cast_expression                shift and go to state 289
    unary_expression               shift and go to state 125
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    literal                        shift and go to state 141

state 206

    (41) multiplicative_expression -> multiplicative_expression DIVOP . cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR

    LPAREN          shift and go to state 126
    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    THIS            shift and go to state 142
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    cast_expression                shift and go to state 290
    unary_expression               shift and go to state 125
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    literal                        shift and go to state 141

state 207

    (42) multiplicative_expression -> multiplicative_expression MODOP . cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR

    LPAREN          shift and go to state 126
    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    THIS            shift and go to state 142
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    cast_expression                shift and go to state 291
    unary_expression               shift and go to state 125
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    literal                        shift and go to state 141

state 208

    (105) cast_expression -> LPAREN type_name . RPAREN cast_expression

    RPAREN          shift and go to state 292


state 209

    (100) primary_expression -> LPAREN expression . RPAREN
    (45) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 293
    COMMA           shift and go to state 294


state 210

    (43) expression -> assignment_expression .

    RPAREN          reduce using rule 43 (expression -> assignment_expression .)
    COMMA           reduce using rule 43 (expression -> assignment_expression .)
    COLON           reduce using rule 43 (expression -> assignment_expression .)
    RSPAREN         reduce using rule 43 (expression -> assignment_expression .)
    RTEMPLATE       reduce using rule 43 (expression -> assignment_expression .)
    SEMICOLON       reduce using rule 43 (expression -> assignment_expression .)


state 211

    (44) expression -> throw_expression .

    RPAREN          reduce using rule 44 (expression -> throw_expression .)
    COMMA           reduce using rule 44 (expression -> throw_expression .)
    COLON           reduce using rule 44 (expression -> throw_expression .)
    RSPAREN         reduce using rule 44 (expression -> throw_expression .)
    RTEMPLATE       reduce using rule 44 (expression -> throw_expression .)
    SEMICOLON       reduce using rule 44 (expression -> throw_expression .)


state 212

    (46) throw_expression -> THROW . expression
    (47) throw_expression -> THROW .
    (43) expression -> . assignment_expression
    (44) expression -> . throw_expression
    (45) expression -> . expression COMMA assignment_expression
    (48) assignment_expression -> . conditional_expression
    (49) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (46) throw_expression -> . THROW expression
    (47) throw_expression -> . THROW
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          reduce using rule 47 (throw_expression -> THROW .)
    COMMA           reduce using rule 47 (throw_expression -> THROW .)
    COLON           reduce using rule 47 (throw_expression -> THROW .)
    RSPAREN         reduce using rule 47 (throw_expression -> THROW .)
    RTEMPLATE       reduce using rule 47 (throw_expression -> THROW .)
    SEMICOLON       reduce using rule 47 (throw_expression -> THROW .)
    THROW           shift and go to state 212
    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    THIS            shift and go to state 142
    LPAREN          shift and go to state 146
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    expression                     shift and go to state 295
    assignment_expression          shift and go to state 210
    throw_expression               shift and go to state 211
    conditional_expression         shift and go to state 149
    unary_expression               shift and go to state 150
    logical_OR_expression          shift and go to state 112
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    cast_expression                shift and go to state 124
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    logical_AND_expression         shift and go to state 113
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    inclusive_OR_expression        shift and go to state 114
    literal                        shift and go to state 141
    exclusive_OR_expression        shift and go to state 115
    AND_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 213

    (89) postfix_expression -> postfix_expression LSPAREN . expression RSPAREN
    (43) expression -> . assignment_expression
    (44) expression -> . throw_expression
    (45) expression -> . expression COMMA assignment_expression
    (48) assignment_expression -> . conditional_expression
    (49) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (46) throw_expression -> . THROW expression
    (47) throw_expression -> . THROW
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression

    THROW           shift and go to state 212
    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    THIS            shift and go to state 142
    LPAREN          shift and go to state 146
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    postfix_expression             shift and go to state 127
    expression                     shift and go to state 296
    assignment_expression          shift and go to state 210
    throw_expression               shift and go to state 211
    conditional_expression         shift and go to state 149
    unary_expression               shift and go to state 150
    logical_OR_expression          shift and go to state 112
    unary1_operator                shift and go to state 130
    cast_expression                shift and go to state 124
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    logical_AND_expression         shift and go to state 113
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    inclusive_OR_expression        shift and go to state 114
    literal                        shift and go to state 141
    exclusive_OR_expression        shift and go to state 115
    AND_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 214

    (90) postfix_expression -> postfix_expression LPAREN . expression_list RPAREN
    (92) postfix_expression -> postfix_expression LPAREN . RPAREN
    (286) expression_list -> . assignment_expression
    (287) expression_list -> . expression_list COMMA assignment_expression
    (48) assignment_expression -> . conditional_expression
    (49) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 298
    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    THIS            shift and go to state 142
    LPAREN          shift and go to state 146
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    postfix_expression             shift and go to state 127
    expression_list                shift and go to state 297
    assignment_expression          shift and go to state 148
    conditional_expression         shift and go to state 149
    unary_expression               shift and go to state 150
    logical_OR_expression          shift and go to state 112
    unary1_operator                shift and go to state 130
    cast_expression                shift and go to state 124
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    logical_AND_expression         shift and go to state 113
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    inclusive_OR_expression        shift and go to state 114
    literal                        shift and go to state 141
    exclusive_OR_expression        shift and go to state 115
    AND_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 215

    (91) postfix_expression -> postfix_expression template_class_name . LPAREN expression_list RPAREN

    LPAREN          shift and go to state 299


state 216

    (93) postfix_expression -> postfix_expression DOT . name
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER

    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51

    name                           shift and go to state 300

state 217

    (94) postfix_expression -> postfix_expression ARROW . name
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER

    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51

    name                           shift and go to state 301

state 218

    (95) postfix_expression -> postfix_expression DPLUSOP .

    LSPAREN         reduce using rule 95 (postfix_expression -> postfix_expression DPLUSOP .)
    LPAREN          reduce using rule 95 (postfix_expression -> postfix_expression DPLUSOP .)
    DOT             reduce using rule 95 (postfix_expression -> postfix_expression DPLUSOP .)
    ARROW           reduce using rule 95 (postfix_expression -> postfix_expression DPLUSOP .)
    DPLUSOP         reduce using rule 95 (postfix_expression -> postfix_expression DPLUSOP .)
    DMINUSOP        reduce using rule 95 (postfix_expression -> postfix_expression DPLUSOP .)
    LTEMPLATE       reduce using rule 95 (postfix_expression -> postfix_expression DPLUSOP .)
    MULTOP          reduce using rule 95 (postfix_expression -> postfix_expression DPLUSOP .)
    DIVOP           reduce using rule 95 (postfix_expression -> postfix_expression DPLUSOP .)
    MODOP           reduce using rule 95 (postfix_expression -> postfix_expression DPLUSOP .)
    PLUSOP          reduce using rule 95 (postfix_expression -> postfix_expression DPLUSOP .)
    MINUSOP         reduce using rule 95 (postfix_expression -> postfix_expression DPLUSOP .)
    LSHIFT          reduce using rule 95 (postfix_expression -> postfix_expression DPLUSOP .)
    RSHIFT          reduce using rule 95 (postfix_expression -> postfix_expression DPLUSOP .)
    LTCOMP          reduce using rule 95 (postfix_expression -> postfix_expression DPLUSOP .)
    GTCOMP          reduce using rule 95 (postfix_expression -> postfix_expression DPLUSOP .)
    LTECOMP         reduce using rule 95 (postfix_expression -> postfix_expression DPLUSOP .)
    GTECOMP         reduce using rule 95 (postfix_expression -> postfix_expression DPLUSOP .)
    EQCOMP          reduce using rule 95 (postfix_expression -> postfix_expression DPLUSOP .)
    NEQCOMP         reduce using rule 95 (postfix_expression -> postfix_expression DPLUSOP .)
    BANDOP          reduce using rule 95 (postfix_expression -> postfix_expression DPLUSOP .)
    XOROP           reduce using rule 95 (postfix_expression -> postfix_expression DPLUSOP .)
    OROP            reduce using rule 95 (postfix_expression -> postfix_expression DPLUSOP .)
    ANDOP           reduce using rule 95 (postfix_expression -> postfix_expression DPLUSOP .)
    QUESMARK        reduce using rule 95 (postfix_expression -> postfix_expression DPLUSOP .)
    RSPAREN         reduce using rule 95 (postfix_expression -> postfix_expression DPLUSOP .)
    EQUAL           reduce using rule 95 (postfix_expression -> postfix_expression DPLUSOP .)
    MULTEQOP        reduce using rule 95 (postfix_expression -> postfix_expression DPLUSOP .)
    DIVEQOP         reduce using rule 95 (postfix_expression -> postfix_expression DPLUSOP .)
    MODEQOP         reduce using rule 95 (postfix_expression -> postfix_expression DPLUSOP .)
    PLUSEQOP        reduce using rule 95 (postfix_expression -> postfix_expression DPLUSOP .)
    MINUSEQOP       reduce using rule 95 (postfix_expression -> postfix_expression DPLUSOP .)
    LSHIFTEQOP      reduce using rule 95 (postfix_expression -> postfix_expression DPLUSOP .)
    RSHIFTEQOP      reduce using rule 95 (postfix_expression -> postfix_expression DPLUSOP .)
    BANDEQOP        reduce using rule 95 (postfix_expression -> postfix_expression DPLUSOP .)
    BOREQOP         reduce using rule 95 (postfix_expression -> postfix_expression DPLUSOP .)
    RPAREN          reduce using rule 95 (postfix_expression -> postfix_expression DPLUSOP .)
    COMMA           reduce using rule 95 (postfix_expression -> postfix_expression DPLUSOP .)
    SEMICOLON       reduce using rule 95 (postfix_expression -> postfix_expression DPLUSOP .)
    RCPAREN         reduce using rule 95 (postfix_expression -> postfix_expression DPLUSOP .)
    COLON           reduce using rule 95 (postfix_expression -> postfix_expression DPLUSOP .)
    RTEMPLATE       reduce using rule 95 (postfix_expression -> postfix_expression DPLUSOP .)


state 219

    (96) postfix_expression -> postfix_expression DMINUSOP .

    LSPAREN         reduce using rule 96 (postfix_expression -> postfix_expression DMINUSOP .)
    LPAREN          reduce using rule 96 (postfix_expression -> postfix_expression DMINUSOP .)
    DOT             reduce using rule 96 (postfix_expression -> postfix_expression DMINUSOP .)
    ARROW           reduce using rule 96 (postfix_expression -> postfix_expression DMINUSOP .)
    DPLUSOP         reduce using rule 96 (postfix_expression -> postfix_expression DMINUSOP .)
    DMINUSOP        reduce using rule 96 (postfix_expression -> postfix_expression DMINUSOP .)
    LTEMPLATE       reduce using rule 96 (postfix_expression -> postfix_expression DMINUSOP .)
    MULTOP          reduce using rule 96 (postfix_expression -> postfix_expression DMINUSOP .)
    DIVOP           reduce using rule 96 (postfix_expression -> postfix_expression DMINUSOP .)
    MODOP           reduce using rule 96 (postfix_expression -> postfix_expression DMINUSOP .)
    PLUSOP          reduce using rule 96 (postfix_expression -> postfix_expression DMINUSOP .)
    MINUSOP         reduce using rule 96 (postfix_expression -> postfix_expression DMINUSOP .)
    LSHIFT          reduce using rule 96 (postfix_expression -> postfix_expression DMINUSOP .)
    RSHIFT          reduce using rule 96 (postfix_expression -> postfix_expression DMINUSOP .)
    LTCOMP          reduce using rule 96 (postfix_expression -> postfix_expression DMINUSOP .)
    GTCOMP          reduce using rule 96 (postfix_expression -> postfix_expression DMINUSOP .)
    LTECOMP         reduce using rule 96 (postfix_expression -> postfix_expression DMINUSOP .)
    GTECOMP         reduce using rule 96 (postfix_expression -> postfix_expression DMINUSOP .)
    EQCOMP          reduce using rule 96 (postfix_expression -> postfix_expression DMINUSOP .)
    NEQCOMP         reduce using rule 96 (postfix_expression -> postfix_expression DMINUSOP .)
    BANDOP          reduce using rule 96 (postfix_expression -> postfix_expression DMINUSOP .)
    XOROP           reduce using rule 96 (postfix_expression -> postfix_expression DMINUSOP .)
    OROP            reduce using rule 96 (postfix_expression -> postfix_expression DMINUSOP .)
    ANDOP           reduce using rule 96 (postfix_expression -> postfix_expression DMINUSOP .)
    QUESMARK        reduce using rule 96 (postfix_expression -> postfix_expression DMINUSOP .)
    RSPAREN         reduce using rule 96 (postfix_expression -> postfix_expression DMINUSOP .)
    EQUAL           reduce using rule 96 (postfix_expression -> postfix_expression DMINUSOP .)
    MULTEQOP        reduce using rule 96 (postfix_expression -> postfix_expression DMINUSOP .)
    DIVEQOP         reduce using rule 96 (postfix_expression -> postfix_expression DMINUSOP .)
    MODEQOP         reduce using rule 96 (postfix_expression -> postfix_expression DMINUSOP .)
    PLUSEQOP        reduce using rule 96 (postfix_expression -> postfix_expression DMINUSOP .)
    MINUSEQOP       reduce using rule 96 (postfix_expression -> postfix_expression DMINUSOP .)
    LSHIFTEQOP      reduce using rule 96 (postfix_expression -> postfix_expression DMINUSOP .)
    RSHIFTEQOP      reduce using rule 96 (postfix_expression -> postfix_expression DMINUSOP .)
    BANDEQOP        reduce using rule 96 (postfix_expression -> postfix_expression DMINUSOP .)
    BOREQOP         reduce using rule 96 (postfix_expression -> postfix_expression DMINUSOP .)
    RPAREN          reduce using rule 96 (postfix_expression -> postfix_expression DMINUSOP .)
    COMMA           reduce using rule 96 (postfix_expression -> postfix_expression DMINUSOP .)
    SEMICOLON       reduce using rule 96 (postfix_expression -> postfix_expression DMINUSOP .)
    RCPAREN         reduce using rule 96 (postfix_expression -> postfix_expression DMINUSOP .)
    COLON           reduce using rule 96 (postfix_expression -> postfix_expression DMINUSOP .)
    RTEMPLATE       reduce using rule 96 (postfix_expression -> postfix_expression DMINUSOP .)


state 220

    (61) unary_expression -> DPLUSOP unary_expression .

    MULTOP          reduce using rule 61 (unary_expression -> DPLUSOP unary_expression .)
    DIVOP           reduce using rule 61 (unary_expression -> DPLUSOP unary_expression .)
    MODOP           reduce using rule 61 (unary_expression -> DPLUSOP unary_expression .)
    PLUSOP          reduce using rule 61 (unary_expression -> DPLUSOP unary_expression .)
    MINUSOP         reduce using rule 61 (unary_expression -> DPLUSOP unary_expression .)
    LSHIFT          reduce using rule 61 (unary_expression -> DPLUSOP unary_expression .)
    RSHIFT          reduce using rule 61 (unary_expression -> DPLUSOP unary_expression .)
    LTCOMP          reduce using rule 61 (unary_expression -> DPLUSOP unary_expression .)
    GTCOMP          reduce using rule 61 (unary_expression -> DPLUSOP unary_expression .)
    LTECOMP         reduce using rule 61 (unary_expression -> DPLUSOP unary_expression .)
    GTECOMP         reduce using rule 61 (unary_expression -> DPLUSOP unary_expression .)
    EQCOMP          reduce using rule 61 (unary_expression -> DPLUSOP unary_expression .)
    NEQCOMP         reduce using rule 61 (unary_expression -> DPLUSOP unary_expression .)
    BANDOP          reduce using rule 61 (unary_expression -> DPLUSOP unary_expression .)
    XOROP           reduce using rule 61 (unary_expression -> DPLUSOP unary_expression .)
    OROP            reduce using rule 61 (unary_expression -> DPLUSOP unary_expression .)
    ANDOP           reduce using rule 61 (unary_expression -> DPLUSOP unary_expression .)
    QUESMARK        reduce using rule 61 (unary_expression -> DPLUSOP unary_expression .)
    RSPAREN         reduce using rule 61 (unary_expression -> DPLUSOP unary_expression .)
    EQUAL           reduce using rule 61 (unary_expression -> DPLUSOP unary_expression .)
    MULTEQOP        reduce using rule 61 (unary_expression -> DPLUSOP unary_expression .)
    DIVEQOP         reduce using rule 61 (unary_expression -> DPLUSOP unary_expression .)
    MODEQOP         reduce using rule 61 (unary_expression -> DPLUSOP unary_expression .)
    PLUSEQOP        reduce using rule 61 (unary_expression -> DPLUSOP unary_expression .)
    MINUSEQOP       reduce using rule 61 (unary_expression -> DPLUSOP unary_expression .)
    LSHIFTEQOP      reduce using rule 61 (unary_expression -> DPLUSOP unary_expression .)
    RSHIFTEQOP      reduce using rule 61 (unary_expression -> DPLUSOP unary_expression .)
    BANDEQOP        reduce using rule 61 (unary_expression -> DPLUSOP unary_expression .)
    BOREQOP         reduce using rule 61 (unary_expression -> DPLUSOP unary_expression .)
    RPAREN          reduce using rule 61 (unary_expression -> DPLUSOP unary_expression .)
    COMMA           reduce using rule 61 (unary_expression -> DPLUSOP unary_expression .)
    SEMICOLON       reduce using rule 61 (unary_expression -> DPLUSOP unary_expression .)
    RCPAREN         reduce using rule 61 (unary_expression -> DPLUSOP unary_expression .)
    COLON           reduce using rule 61 (unary_expression -> DPLUSOP unary_expression .)
    RTEMPLATE       reduce using rule 61 (unary_expression -> DPLUSOP unary_expression .)


state 221

    (100) primary_expression -> LPAREN . expression RPAREN
    (43) expression -> . assignment_expression
    (44) expression -> . throw_expression
    (45) expression -> . expression COMMA assignment_expression
    (48) assignment_expression -> . conditional_expression
    (49) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (46) throw_expression -> . THROW expression
    (47) throw_expression -> . THROW
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression

    THROW           shift and go to state 212
    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    THIS            shift and go to state 142
    LPAREN          shift and go to state 146
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    expression                     shift and go to state 209
    assignment_expression          shift and go to state 210
    throw_expression               shift and go to state 211
    conditional_expression         shift and go to state 149
    unary_expression               shift and go to state 150
    logical_OR_expression          shift and go to state 112
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    cast_expression                shift and go to state 124
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    logical_AND_expression         shift and go to state 113
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    inclusive_OR_expression        shift and go to state 114
    literal                        shift and go to state 141
    exclusive_OR_expression        shift and go to state 115
    AND_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 222

    (62) unary_expression -> DMINUSOP unary_expression .

    MULTOP          reduce using rule 62 (unary_expression -> DMINUSOP unary_expression .)
    DIVOP           reduce using rule 62 (unary_expression -> DMINUSOP unary_expression .)
    MODOP           reduce using rule 62 (unary_expression -> DMINUSOP unary_expression .)
    PLUSOP          reduce using rule 62 (unary_expression -> DMINUSOP unary_expression .)
    MINUSOP         reduce using rule 62 (unary_expression -> DMINUSOP unary_expression .)
    LSHIFT          reduce using rule 62 (unary_expression -> DMINUSOP unary_expression .)
    RSHIFT          reduce using rule 62 (unary_expression -> DMINUSOP unary_expression .)
    LTCOMP          reduce using rule 62 (unary_expression -> DMINUSOP unary_expression .)
    GTCOMP          reduce using rule 62 (unary_expression -> DMINUSOP unary_expression .)
    LTECOMP         reduce using rule 62 (unary_expression -> DMINUSOP unary_expression .)
    GTECOMP         reduce using rule 62 (unary_expression -> DMINUSOP unary_expression .)
    EQCOMP          reduce using rule 62 (unary_expression -> DMINUSOP unary_expression .)
    NEQCOMP         reduce using rule 62 (unary_expression -> DMINUSOP unary_expression .)
    BANDOP          reduce using rule 62 (unary_expression -> DMINUSOP unary_expression .)
    XOROP           reduce using rule 62 (unary_expression -> DMINUSOP unary_expression .)
    OROP            reduce using rule 62 (unary_expression -> DMINUSOP unary_expression .)
    ANDOP           reduce using rule 62 (unary_expression -> DMINUSOP unary_expression .)
    QUESMARK        reduce using rule 62 (unary_expression -> DMINUSOP unary_expression .)
    RSPAREN         reduce using rule 62 (unary_expression -> DMINUSOP unary_expression .)
    EQUAL           reduce using rule 62 (unary_expression -> DMINUSOP unary_expression .)
    MULTEQOP        reduce using rule 62 (unary_expression -> DMINUSOP unary_expression .)
    DIVEQOP         reduce using rule 62 (unary_expression -> DMINUSOP unary_expression .)
    MODEQOP         reduce using rule 62 (unary_expression -> DMINUSOP unary_expression .)
    PLUSEQOP        reduce using rule 62 (unary_expression -> DMINUSOP unary_expression .)
    MINUSEQOP       reduce using rule 62 (unary_expression -> DMINUSOP unary_expression .)
    LSHIFTEQOP      reduce using rule 62 (unary_expression -> DMINUSOP unary_expression .)
    RSHIFTEQOP      reduce using rule 62 (unary_expression -> DMINUSOP unary_expression .)
    BANDEQOP        reduce using rule 62 (unary_expression -> DMINUSOP unary_expression .)
    BOREQOP         reduce using rule 62 (unary_expression -> DMINUSOP unary_expression .)
    RPAREN          reduce using rule 62 (unary_expression -> DMINUSOP unary_expression .)
    COMMA           reduce using rule 62 (unary_expression -> DMINUSOP unary_expression .)
    SEMICOLON       reduce using rule 62 (unary_expression -> DMINUSOP unary_expression .)
    RCPAREN         reduce using rule 62 (unary_expression -> DMINUSOP unary_expression .)
    COLON           reduce using rule 62 (unary_expression -> DMINUSOP unary_expression .)
    RTEMPLATE       reduce using rule 62 (unary_expression -> DMINUSOP unary_expression .)


state 223

    (63) unary_expression -> unary1_operator cast_expression .

    MULTOP          reduce using rule 63 (unary_expression -> unary1_operator cast_expression .)
    DIVOP           reduce using rule 63 (unary_expression -> unary1_operator cast_expression .)
    MODOP           reduce using rule 63 (unary_expression -> unary1_operator cast_expression .)
    PLUSOP          reduce using rule 63 (unary_expression -> unary1_operator cast_expression .)
    MINUSOP         reduce using rule 63 (unary_expression -> unary1_operator cast_expression .)
    LSHIFT          reduce using rule 63 (unary_expression -> unary1_operator cast_expression .)
    RSHIFT          reduce using rule 63 (unary_expression -> unary1_operator cast_expression .)
    LTCOMP          reduce using rule 63 (unary_expression -> unary1_operator cast_expression .)
    GTCOMP          reduce using rule 63 (unary_expression -> unary1_operator cast_expression .)
    LTECOMP         reduce using rule 63 (unary_expression -> unary1_operator cast_expression .)
    GTECOMP         reduce using rule 63 (unary_expression -> unary1_operator cast_expression .)
    EQCOMP          reduce using rule 63 (unary_expression -> unary1_operator cast_expression .)
    NEQCOMP         reduce using rule 63 (unary_expression -> unary1_operator cast_expression .)
    BANDOP          reduce using rule 63 (unary_expression -> unary1_operator cast_expression .)
    XOROP           reduce using rule 63 (unary_expression -> unary1_operator cast_expression .)
    OROP            reduce using rule 63 (unary_expression -> unary1_operator cast_expression .)
    ANDOP           reduce using rule 63 (unary_expression -> unary1_operator cast_expression .)
    QUESMARK        reduce using rule 63 (unary_expression -> unary1_operator cast_expression .)
    RSPAREN         reduce using rule 63 (unary_expression -> unary1_operator cast_expression .)
    EQUAL           reduce using rule 63 (unary_expression -> unary1_operator cast_expression .)
    MULTEQOP        reduce using rule 63 (unary_expression -> unary1_operator cast_expression .)
    DIVEQOP         reduce using rule 63 (unary_expression -> unary1_operator cast_expression .)
    MODEQOP         reduce using rule 63 (unary_expression -> unary1_operator cast_expression .)
    PLUSEQOP        reduce using rule 63 (unary_expression -> unary1_operator cast_expression .)
    MINUSEQOP       reduce using rule 63 (unary_expression -> unary1_operator cast_expression .)
    LSHIFTEQOP      reduce using rule 63 (unary_expression -> unary1_operator cast_expression .)
    RSHIFTEQOP      reduce using rule 63 (unary_expression -> unary1_operator cast_expression .)
    BANDEQOP        reduce using rule 63 (unary_expression -> unary1_operator cast_expression .)
    BOREQOP         reduce using rule 63 (unary_expression -> unary1_operator cast_expression .)
    RPAREN          reduce using rule 63 (unary_expression -> unary1_operator cast_expression .)
    COMMA           reduce using rule 63 (unary_expression -> unary1_operator cast_expression .)
    SEMICOLON       reduce using rule 63 (unary_expression -> unary1_operator cast_expression .)
    RCPAREN         reduce using rule 63 (unary_expression -> unary1_operator cast_expression .)
    COLON           reduce using rule 63 (unary_expression -> unary1_operator cast_expression .)
    RTEMPLATE       reduce using rule 63 (unary_expression -> unary1_operator cast_expression .)


state 224

    (64) unary_expression -> unary2_operator cast_expression .

    MULTOP          reduce using rule 64 (unary_expression -> unary2_operator cast_expression .)
    DIVOP           reduce using rule 64 (unary_expression -> unary2_operator cast_expression .)
    MODOP           reduce using rule 64 (unary_expression -> unary2_operator cast_expression .)
    PLUSOP          reduce using rule 64 (unary_expression -> unary2_operator cast_expression .)
    MINUSOP         reduce using rule 64 (unary_expression -> unary2_operator cast_expression .)
    LSHIFT          reduce using rule 64 (unary_expression -> unary2_operator cast_expression .)
    RSHIFT          reduce using rule 64 (unary_expression -> unary2_operator cast_expression .)
    LTCOMP          reduce using rule 64 (unary_expression -> unary2_operator cast_expression .)
    GTCOMP          reduce using rule 64 (unary_expression -> unary2_operator cast_expression .)
    LTECOMP         reduce using rule 64 (unary_expression -> unary2_operator cast_expression .)
    GTECOMP         reduce using rule 64 (unary_expression -> unary2_operator cast_expression .)
    EQCOMP          reduce using rule 64 (unary_expression -> unary2_operator cast_expression .)
    NEQCOMP         reduce using rule 64 (unary_expression -> unary2_operator cast_expression .)
    BANDOP          reduce using rule 64 (unary_expression -> unary2_operator cast_expression .)
    XOROP           reduce using rule 64 (unary_expression -> unary2_operator cast_expression .)
    OROP            reduce using rule 64 (unary_expression -> unary2_operator cast_expression .)
    ANDOP           reduce using rule 64 (unary_expression -> unary2_operator cast_expression .)
    QUESMARK        reduce using rule 64 (unary_expression -> unary2_operator cast_expression .)
    RSPAREN         reduce using rule 64 (unary_expression -> unary2_operator cast_expression .)
    EQUAL           reduce using rule 64 (unary_expression -> unary2_operator cast_expression .)
    MULTEQOP        reduce using rule 64 (unary_expression -> unary2_operator cast_expression .)
    DIVEQOP         reduce using rule 64 (unary_expression -> unary2_operator cast_expression .)
    MODEQOP         reduce using rule 64 (unary_expression -> unary2_operator cast_expression .)
    PLUSEQOP        reduce using rule 64 (unary_expression -> unary2_operator cast_expression .)
    MINUSEQOP       reduce using rule 64 (unary_expression -> unary2_operator cast_expression .)
    LSHIFTEQOP      reduce using rule 64 (unary_expression -> unary2_operator cast_expression .)
    RSHIFTEQOP      reduce using rule 64 (unary_expression -> unary2_operator cast_expression .)
    BANDEQOP        reduce using rule 64 (unary_expression -> unary2_operator cast_expression .)
    BOREQOP         reduce using rule 64 (unary_expression -> unary2_operator cast_expression .)
    RPAREN          reduce using rule 64 (unary_expression -> unary2_operator cast_expression .)
    COMMA           reduce using rule 64 (unary_expression -> unary2_operator cast_expression .)
    SEMICOLON       reduce using rule 64 (unary_expression -> unary2_operator cast_expression .)
    RCPAREN         reduce using rule 64 (unary_expression -> unary2_operator cast_expression .)
    COLON           reduce using rule 64 (unary_expression -> unary2_operator cast_expression .)
    RTEMPLATE       reduce using rule 64 (unary_expression -> unary2_operator cast_expression .)


state 225

    (65) unary_expression -> SIZEOF unary_expression .

    MULTOP          reduce using rule 65 (unary_expression -> SIZEOF unary_expression .)
    DIVOP           reduce using rule 65 (unary_expression -> SIZEOF unary_expression .)
    MODOP           reduce using rule 65 (unary_expression -> SIZEOF unary_expression .)
    PLUSOP          reduce using rule 65 (unary_expression -> SIZEOF unary_expression .)
    MINUSOP         reduce using rule 65 (unary_expression -> SIZEOF unary_expression .)
    LSHIFT          reduce using rule 65 (unary_expression -> SIZEOF unary_expression .)
    RSHIFT          reduce using rule 65 (unary_expression -> SIZEOF unary_expression .)
    LTCOMP          reduce using rule 65 (unary_expression -> SIZEOF unary_expression .)
    GTCOMP          reduce using rule 65 (unary_expression -> SIZEOF unary_expression .)
    LTECOMP         reduce using rule 65 (unary_expression -> SIZEOF unary_expression .)
    GTECOMP         reduce using rule 65 (unary_expression -> SIZEOF unary_expression .)
    EQCOMP          reduce using rule 65 (unary_expression -> SIZEOF unary_expression .)
    NEQCOMP         reduce using rule 65 (unary_expression -> SIZEOF unary_expression .)
    BANDOP          reduce using rule 65 (unary_expression -> SIZEOF unary_expression .)
    XOROP           reduce using rule 65 (unary_expression -> SIZEOF unary_expression .)
    OROP            reduce using rule 65 (unary_expression -> SIZEOF unary_expression .)
    ANDOP           reduce using rule 65 (unary_expression -> SIZEOF unary_expression .)
    QUESMARK        reduce using rule 65 (unary_expression -> SIZEOF unary_expression .)
    RSPAREN         reduce using rule 65 (unary_expression -> SIZEOF unary_expression .)
    EQUAL           reduce using rule 65 (unary_expression -> SIZEOF unary_expression .)
    MULTEQOP        reduce using rule 65 (unary_expression -> SIZEOF unary_expression .)
    DIVEQOP         reduce using rule 65 (unary_expression -> SIZEOF unary_expression .)
    MODEQOP         reduce using rule 65 (unary_expression -> SIZEOF unary_expression .)
    PLUSEQOP        reduce using rule 65 (unary_expression -> SIZEOF unary_expression .)
    MINUSEQOP       reduce using rule 65 (unary_expression -> SIZEOF unary_expression .)
    LSHIFTEQOP      reduce using rule 65 (unary_expression -> SIZEOF unary_expression .)
    RSHIFTEQOP      reduce using rule 65 (unary_expression -> SIZEOF unary_expression .)
    BANDEQOP        reduce using rule 65 (unary_expression -> SIZEOF unary_expression .)
    BOREQOP         reduce using rule 65 (unary_expression -> SIZEOF unary_expression .)
    RPAREN          reduce using rule 65 (unary_expression -> SIZEOF unary_expression .)
    COMMA           reduce using rule 65 (unary_expression -> SIZEOF unary_expression .)
    SEMICOLON       reduce using rule 65 (unary_expression -> SIZEOF unary_expression .)
    RCPAREN         reduce using rule 65 (unary_expression -> SIZEOF unary_expression .)
    COLON           reduce using rule 65 (unary_expression -> SIZEOF unary_expression .)
    RTEMPLATE       reduce using rule 65 (unary_expression -> SIZEOF unary_expression .)


state 226

    (66) unary_expression -> SIZEOF LPAREN . type_name RPAREN
    (100) primary_expression -> LPAREN . expression RPAREN
    (165) type_name -> . type_specifier_ abstract_declarator
    (166) type_name -> . type_specifier_
    (43) expression -> . assignment_expression
    (44) expression -> . throw_expression
    (45) expression -> . expression COMMA assignment_expression
    (167) type_specifier_ -> . CONST type_specifier
    (168) type_specifier_ -> . type_specifier
    (48) assignment_expression -> . conditional_expression
    (49) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (46) throw_expression -> . THROW expression
    (47) throw_expression -> . THROW
    (171) type_specifier -> . simple_type_name
    (172) type_specifier -> . complex_type_specifier
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (173) simple_type_name -> . CHAR
    (174) simple_type_name -> . SHORT
    (175) simple_type_name -> . INT
    (176) simple_type_name -> . LONG
    (177) simple_type_name -> . SIGNED
    (178) simple_type_name -> . UNSIGNED
    (179) simple_type_name -> . FLOAT
    (180) simple_type_name -> . DOUBLE
    (181) simple_type_name -> . VOID
    (182) simple_type_name -> . STRING
    (183) simple_type_name -> . AUTO
    (184) complex_type_specifier -> . class_key IDENTIFIER
    (185) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (186) complex_type_specifier -> . TYPE IDENTIFIER
    (187) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (200) class_key -> . CLASS
    (201) class_key -> . STRUCT
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression

    CONST           shift and go to state 16
    THROW           shift and go to state 212
    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38
    THIS            shift and go to state 142
    LPAREN          shift and go to state 146
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    type_name                      shift and go to state 302
    expression                     shift and go to state 209
    type_specifier_                shift and go to state 184
    assignment_expression          shift and go to state 210
    throw_expression               shift and go to state 211
    type_specifier                 shift and go to state 17
    conditional_expression         shift and go to state 149
    unary_expression               shift and go to state 150
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    logical_OR_expression          shift and go to state 112
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    cast_expression                shift and go to state 124
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    class_key                      shift and go to state 56
    logical_AND_expression         shift and go to state 113
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    inclusive_OR_expression        shift and go to state 114
    literal                        shift and go to state 141
    exclusive_OR_expression        shift and go to state 115
    AND_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 227

    (70) allocation_expression -> NEW new_type_name . new_initializer
    (71) allocation_expression -> NEW new_type_name .
    (80) new_initializer -> . LPAREN initializer_list RPAREN
    (81) new_initializer -> . LPAREN RPAREN

    MULTOP          reduce using rule 71 (allocation_expression -> NEW new_type_name .)
    DIVOP           reduce using rule 71 (allocation_expression -> NEW new_type_name .)
    MODOP           reduce using rule 71 (allocation_expression -> NEW new_type_name .)
    PLUSOP          reduce using rule 71 (allocation_expression -> NEW new_type_name .)
    MINUSOP         reduce using rule 71 (allocation_expression -> NEW new_type_name .)
    LSHIFT          reduce using rule 71 (allocation_expression -> NEW new_type_name .)
    RSHIFT          reduce using rule 71 (allocation_expression -> NEW new_type_name .)
    LTCOMP          reduce using rule 71 (allocation_expression -> NEW new_type_name .)
    GTCOMP          reduce using rule 71 (allocation_expression -> NEW new_type_name .)
    LTECOMP         reduce using rule 71 (allocation_expression -> NEW new_type_name .)
    GTECOMP         reduce using rule 71 (allocation_expression -> NEW new_type_name .)
    EQCOMP          reduce using rule 71 (allocation_expression -> NEW new_type_name .)
    NEQCOMP         reduce using rule 71 (allocation_expression -> NEW new_type_name .)
    BANDOP          reduce using rule 71 (allocation_expression -> NEW new_type_name .)
    XOROP           reduce using rule 71 (allocation_expression -> NEW new_type_name .)
    OROP            reduce using rule 71 (allocation_expression -> NEW new_type_name .)
    ANDOP           reduce using rule 71 (allocation_expression -> NEW new_type_name .)
    QUESMARK        reduce using rule 71 (allocation_expression -> NEW new_type_name .)
    RSPAREN         reduce using rule 71 (allocation_expression -> NEW new_type_name .)
    EQUAL           reduce using rule 71 (allocation_expression -> NEW new_type_name .)
    MULTEQOP        reduce using rule 71 (allocation_expression -> NEW new_type_name .)
    DIVEQOP         reduce using rule 71 (allocation_expression -> NEW new_type_name .)
    MODEQOP         reduce using rule 71 (allocation_expression -> NEW new_type_name .)
    PLUSEQOP        reduce using rule 71 (allocation_expression -> NEW new_type_name .)
    MINUSEQOP       reduce using rule 71 (allocation_expression -> NEW new_type_name .)
    LSHIFTEQOP      reduce using rule 71 (allocation_expression -> NEW new_type_name .)
    RSHIFTEQOP      reduce using rule 71 (allocation_expression -> NEW new_type_name .)
    BANDEQOP        reduce using rule 71 (allocation_expression -> NEW new_type_name .)
    BOREQOP         reduce using rule 71 (allocation_expression -> NEW new_type_name .)
    RPAREN          reduce using rule 71 (allocation_expression -> NEW new_type_name .)
    COMMA           reduce using rule 71 (allocation_expression -> NEW new_type_name .)
    SEMICOLON       reduce using rule 71 (allocation_expression -> NEW new_type_name .)
    RCPAREN         reduce using rule 71 (allocation_expression -> NEW new_type_name .)
    COLON           reduce using rule 71 (allocation_expression -> NEW new_type_name .)
    RTEMPLATE       reduce using rule 71 (allocation_expression -> NEW new_type_name .)
    LPAREN          shift and go to state 304

    new_initializer                shift and go to state 303

state 228

    (72) allocation_expression -> NEW LPAREN . type_name RPAREN new_initializer
    (73) allocation_expression -> NEW LPAREN . type_name RPAREN
    (165) type_name -> . type_specifier_ abstract_declarator
    (166) type_name -> . type_specifier_
    (167) type_specifier_ -> . CONST type_specifier
    (168) type_specifier_ -> . type_specifier
    (171) type_specifier -> . simple_type_name
    (172) type_specifier -> . complex_type_specifier
    (173) simple_type_name -> . CHAR
    (174) simple_type_name -> . SHORT
    (175) simple_type_name -> . INT
    (176) simple_type_name -> . LONG
    (177) simple_type_name -> . SIGNED
    (178) simple_type_name -> . UNSIGNED
    (179) simple_type_name -> . FLOAT
    (180) simple_type_name -> . DOUBLE
    (181) simple_type_name -> . VOID
    (182) simple_type_name -> . STRING
    (183) simple_type_name -> . AUTO
    (184) complex_type_specifier -> . class_key IDENTIFIER
    (185) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (186) complex_type_specifier -> . TYPE IDENTIFIER
    (187) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (200) class_key -> . CLASS
    (201) class_key -> . STRUCT

    CONST           shift and go to state 16
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38

    type_name                      shift and go to state 305
    type_specifier_                shift and go to state 184
    type_specifier                 shift and go to state 17
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 56

state 229

    (74) new_type_name -> type_specifier_ . new_declarator
    (75) new_type_name -> type_specifier_ .
    (76) new_declarator -> . new_declarator MULTOP
    (77) new_declarator -> . MULTOP
    (78) new_declarator -> . new_declarator LSPAREN expression RSPAREN
    (79) new_declarator -> . LSPAREN expression RSPAREN

  ! shift/reduce conflict for MULTOP resolved as shift
    LPAREN          reduce using rule 75 (new_type_name -> type_specifier_ .)
    DIVOP           reduce using rule 75 (new_type_name -> type_specifier_ .)
    MODOP           reduce using rule 75 (new_type_name -> type_specifier_ .)
    PLUSOP          reduce using rule 75 (new_type_name -> type_specifier_ .)
    MINUSOP         reduce using rule 75 (new_type_name -> type_specifier_ .)
    LSHIFT          reduce using rule 75 (new_type_name -> type_specifier_ .)
    RSHIFT          reduce using rule 75 (new_type_name -> type_specifier_ .)
    LTCOMP          reduce using rule 75 (new_type_name -> type_specifier_ .)
    GTCOMP          reduce using rule 75 (new_type_name -> type_specifier_ .)
    LTECOMP         reduce using rule 75 (new_type_name -> type_specifier_ .)
    GTECOMP         reduce using rule 75 (new_type_name -> type_specifier_ .)
    EQCOMP          reduce using rule 75 (new_type_name -> type_specifier_ .)
    NEQCOMP         reduce using rule 75 (new_type_name -> type_specifier_ .)
    BANDOP          reduce using rule 75 (new_type_name -> type_specifier_ .)
    XOROP           reduce using rule 75 (new_type_name -> type_specifier_ .)
    OROP            reduce using rule 75 (new_type_name -> type_specifier_ .)
    ANDOP           reduce using rule 75 (new_type_name -> type_specifier_ .)
    QUESMARK        reduce using rule 75 (new_type_name -> type_specifier_ .)
    RSPAREN         reduce using rule 75 (new_type_name -> type_specifier_ .)
    EQUAL           reduce using rule 75 (new_type_name -> type_specifier_ .)
    MULTEQOP        reduce using rule 75 (new_type_name -> type_specifier_ .)
    DIVEQOP         reduce using rule 75 (new_type_name -> type_specifier_ .)
    MODEQOP         reduce using rule 75 (new_type_name -> type_specifier_ .)
    PLUSEQOP        reduce using rule 75 (new_type_name -> type_specifier_ .)
    MINUSEQOP       reduce using rule 75 (new_type_name -> type_specifier_ .)
    LSHIFTEQOP      reduce using rule 75 (new_type_name -> type_specifier_ .)
    RSHIFTEQOP      reduce using rule 75 (new_type_name -> type_specifier_ .)
    BANDEQOP        reduce using rule 75 (new_type_name -> type_specifier_ .)
    BOREQOP         reduce using rule 75 (new_type_name -> type_specifier_ .)
    RPAREN          reduce using rule 75 (new_type_name -> type_specifier_ .)
    COMMA           reduce using rule 75 (new_type_name -> type_specifier_ .)
    SEMICOLON       reduce using rule 75 (new_type_name -> type_specifier_ .)
    RCPAREN         reduce using rule 75 (new_type_name -> type_specifier_ .)
    COLON           reduce using rule 75 (new_type_name -> type_specifier_ .)
    RTEMPLATE       reduce using rule 75 (new_type_name -> type_specifier_ .)
    MULTOP          shift and go to state 307
    LSPAREN         shift and go to state 308

  ! MULTOP          [ reduce using rule 75 (new_type_name -> type_specifier_ .) ]

    new_declarator                 shift and go to state 306

state 230

    (69) deallocation_expression -> DELETE cast_expression .

    MULTOP          reduce using rule 69 (deallocation_expression -> DELETE cast_expression .)
    DIVOP           reduce using rule 69 (deallocation_expression -> DELETE cast_expression .)
    MODOP           reduce using rule 69 (deallocation_expression -> DELETE cast_expression .)
    PLUSOP          reduce using rule 69 (deallocation_expression -> DELETE cast_expression .)
    MINUSOP         reduce using rule 69 (deallocation_expression -> DELETE cast_expression .)
    LSHIFT          reduce using rule 69 (deallocation_expression -> DELETE cast_expression .)
    RSHIFT          reduce using rule 69 (deallocation_expression -> DELETE cast_expression .)
    LTCOMP          reduce using rule 69 (deallocation_expression -> DELETE cast_expression .)
    GTCOMP          reduce using rule 69 (deallocation_expression -> DELETE cast_expression .)
    LTECOMP         reduce using rule 69 (deallocation_expression -> DELETE cast_expression .)
    GTECOMP         reduce using rule 69 (deallocation_expression -> DELETE cast_expression .)
    EQCOMP          reduce using rule 69 (deallocation_expression -> DELETE cast_expression .)
    NEQCOMP         reduce using rule 69 (deallocation_expression -> DELETE cast_expression .)
    BANDOP          reduce using rule 69 (deallocation_expression -> DELETE cast_expression .)
    XOROP           reduce using rule 69 (deallocation_expression -> DELETE cast_expression .)
    OROP            reduce using rule 69 (deallocation_expression -> DELETE cast_expression .)
    ANDOP           reduce using rule 69 (deallocation_expression -> DELETE cast_expression .)
    QUESMARK        reduce using rule 69 (deallocation_expression -> DELETE cast_expression .)
    RSPAREN         reduce using rule 69 (deallocation_expression -> DELETE cast_expression .)
    EQUAL           reduce using rule 69 (deallocation_expression -> DELETE cast_expression .)
    MULTEQOP        reduce using rule 69 (deallocation_expression -> DELETE cast_expression .)
    DIVEQOP         reduce using rule 69 (deallocation_expression -> DELETE cast_expression .)
    MODEQOP         reduce using rule 69 (deallocation_expression -> DELETE cast_expression .)
    PLUSEQOP        reduce using rule 69 (deallocation_expression -> DELETE cast_expression .)
    MINUSEQOP       reduce using rule 69 (deallocation_expression -> DELETE cast_expression .)
    LSHIFTEQOP      reduce using rule 69 (deallocation_expression -> DELETE cast_expression .)
    RSHIFTEQOP      reduce using rule 69 (deallocation_expression -> DELETE cast_expression .)
    BANDEQOP        reduce using rule 69 (deallocation_expression -> DELETE cast_expression .)
    BOREQOP         reduce using rule 69 (deallocation_expression -> DELETE cast_expression .)
    RPAREN          reduce using rule 69 (deallocation_expression -> DELETE cast_expression .)
    COMMA           reduce using rule 69 (deallocation_expression -> DELETE cast_expression .)
    SEMICOLON       reduce using rule 69 (deallocation_expression -> DELETE cast_expression .)
    RCPAREN         reduce using rule 69 (deallocation_expression -> DELETE cast_expression .)
    COLON           reduce using rule 69 (deallocation_expression -> DELETE cast_expression .)
    RTEMPLATE       reduce using rule 69 (deallocation_expression -> DELETE cast_expression .)


state 231

    (280) initializer -> LPAREN expression_list RPAREN .

    SEMICOLON       reduce using rule 280 (initializer -> LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 280 (initializer -> LPAREN expression_list RPAREN .)


state 232

    (287) expression_list -> expression_list COMMA . assignment_expression
    (48) assignment_expression -> . conditional_expression
    (49) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    THIS            shift and go to state 142
    LPAREN          shift and go to state 146
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    assignment_expression          shift and go to state 309
    conditional_expression         shift and go to state 149
    unary_expression               shift and go to state 150
    logical_OR_expression          shift and go to state 112
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    cast_expression                shift and go to state 124
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    logical_AND_expression         shift and go to state 113
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    inclusive_OR_expression        shift and go to state 114
    literal                        shift and go to state 141
    exclusive_OR_expression        shift and go to state 115
    AND_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 233

    (49) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (48) assignment_expression -> . conditional_expression
    (49) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    THIS            shift and go to state 142
    LPAREN          shift and go to state 146
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    unary_expression               shift and go to state 150
    assignment_expression          shift and go to state 310
    conditional_expression         shift and go to state 149
    logical_OR_expression          shift and go to state 112
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    cast_expression                shift and go to state 124
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    logical_AND_expression         shift and go to state 113
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    inclusive_OR_expression        shift and go to state 114
    literal                        shift and go to state 141
    exclusive_OR_expression        shift and go to state 115
    AND_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 234

    (50) assignment_operator -> EQUAL .

    DPLUSOP         reduce using rule 50 (assignment_operator -> EQUAL .)
    DMINUSOP        reduce using rule 50 (assignment_operator -> EQUAL .)
    SIZEOF          reduce using rule 50 (assignment_operator -> EQUAL .)
    PLUSOP          reduce using rule 50 (assignment_operator -> EQUAL .)
    MINUSOP         reduce using rule 50 (assignment_operator -> EQUAL .)
    NOTSYM          reduce using rule 50 (assignment_operator -> EQUAL .)
    BNOP            reduce using rule 50 (assignment_operator -> EQUAL .)
    MULTOP          reduce using rule 50 (assignment_operator -> EQUAL .)
    BANDOP          reduce using rule 50 (assignment_operator -> EQUAL .)
    NEW             reduce using rule 50 (assignment_operator -> EQUAL .)
    DELETE          reduce using rule 50 (assignment_operator -> EQUAL .)
    THIS            reduce using rule 50 (assignment_operator -> EQUAL .)
    LPAREN          reduce using rule 50 (assignment_operator -> EQUAL .)
    IDENTIFIER      reduce using rule 50 (assignment_operator -> EQUAL .)
    DOUBLEBNOP      reduce using rule 50 (assignment_operator -> EQUAL .)
    STRING_L        reduce using rule 50 (assignment_operator -> EQUAL .)
    NUMBER          reduce using rule 50 (assignment_operator -> EQUAL .)
    SCHAR           reduce using rule 50 (assignment_operator -> EQUAL .)


state 235

    (51) assignment_operator -> MULTEQOP .

    DPLUSOP         reduce using rule 51 (assignment_operator -> MULTEQOP .)
    DMINUSOP        reduce using rule 51 (assignment_operator -> MULTEQOP .)
    SIZEOF          reduce using rule 51 (assignment_operator -> MULTEQOP .)
    PLUSOP          reduce using rule 51 (assignment_operator -> MULTEQOP .)
    MINUSOP         reduce using rule 51 (assignment_operator -> MULTEQOP .)
    NOTSYM          reduce using rule 51 (assignment_operator -> MULTEQOP .)
    BNOP            reduce using rule 51 (assignment_operator -> MULTEQOP .)
    MULTOP          reduce using rule 51 (assignment_operator -> MULTEQOP .)
    BANDOP          reduce using rule 51 (assignment_operator -> MULTEQOP .)
    NEW             reduce using rule 51 (assignment_operator -> MULTEQOP .)
    DELETE          reduce using rule 51 (assignment_operator -> MULTEQOP .)
    THIS            reduce using rule 51 (assignment_operator -> MULTEQOP .)
    LPAREN          reduce using rule 51 (assignment_operator -> MULTEQOP .)
    IDENTIFIER      reduce using rule 51 (assignment_operator -> MULTEQOP .)
    DOUBLEBNOP      reduce using rule 51 (assignment_operator -> MULTEQOP .)
    STRING_L        reduce using rule 51 (assignment_operator -> MULTEQOP .)
    NUMBER          reduce using rule 51 (assignment_operator -> MULTEQOP .)
    SCHAR           reduce using rule 51 (assignment_operator -> MULTEQOP .)


state 236

    (52) assignment_operator -> DIVEQOP .

    DPLUSOP         reduce using rule 52 (assignment_operator -> DIVEQOP .)
    DMINUSOP        reduce using rule 52 (assignment_operator -> DIVEQOP .)
    SIZEOF          reduce using rule 52 (assignment_operator -> DIVEQOP .)
    PLUSOP          reduce using rule 52 (assignment_operator -> DIVEQOP .)
    MINUSOP         reduce using rule 52 (assignment_operator -> DIVEQOP .)
    NOTSYM          reduce using rule 52 (assignment_operator -> DIVEQOP .)
    BNOP            reduce using rule 52 (assignment_operator -> DIVEQOP .)
    MULTOP          reduce using rule 52 (assignment_operator -> DIVEQOP .)
    BANDOP          reduce using rule 52 (assignment_operator -> DIVEQOP .)
    NEW             reduce using rule 52 (assignment_operator -> DIVEQOP .)
    DELETE          reduce using rule 52 (assignment_operator -> DIVEQOP .)
    THIS            reduce using rule 52 (assignment_operator -> DIVEQOP .)
    LPAREN          reduce using rule 52 (assignment_operator -> DIVEQOP .)
    IDENTIFIER      reduce using rule 52 (assignment_operator -> DIVEQOP .)
    DOUBLEBNOP      reduce using rule 52 (assignment_operator -> DIVEQOP .)
    STRING_L        reduce using rule 52 (assignment_operator -> DIVEQOP .)
    NUMBER          reduce using rule 52 (assignment_operator -> DIVEQOP .)
    SCHAR           reduce using rule 52 (assignment_operator -> DIVEQOP .)


state 237

    (53) assignment_operator -> MODEQOP .

    DPLUSOP         reduce using rule 53 (assignment_operator -> MODEQOP .)
    DMINUSOP        reduce using rule 53 (assignment_operator -> MODEQOP .)
    SIZEOF          reduce using rule 53 (assignment_operator -> MODEQOP .)
    PLUSOP          reduce using rule 53 (assignment_operator -> MODEQOP .)
    MINUSOP         reduce using rule 53 (assignment_operator -> MODEQOP .)
    NOTSYM          reduce using rule 53 (assignment_operator -> MODEQOP .)
    BNOP            reduce using rule 53 (assignment_operator -> MODEQOP .)
    MULTOP          reduce using rule 53 (assignment_operator -> MODEQOP .)
    BANDOP          reduce using rule 53 (assignment_operator -> MODEQOP .)
    NEW             reduce using rule 53 (assignment_operator -> MODEQOP .)
    DELETE          reduce using rule 53 (assignment_operator -> MODEQOP .)
    THIS            reduce using rule 53 (assignment_operator -> MODEQOP .)
    LPAREN          reduce using rule 53 (assignment_operator -> MODEQOP .)
    IDENTIFIER      reduce using rule 53 (assignment_operator -> MODEQOP .)
    DOUBLEBNOP      reduce using rule 53 (assignment_operator -> MODEQOP .)
    STRING_L        reduce using rule 53 (assignment_operator -> MODEQOP .)
    NUMBER          reduce using rule 53 (assignment_operator -> MODEQOP .)
    SCHAR           reduce using rule 53 (assignment_operator -> MODEQOP .)


state 238

    (54) assignment_operator -> PLUSEQOP .

    DPLUSOP         reduce using rule 54 (assignment_operator -> PLUSEQOP .)
    DMINUSOP        reduce using rule 54 (assignment_operator -> PLUSEQOP .)
    SIZEOF          reduce using rule 54 (assignment_operator -> PLUSEQOP .)
    PLUSOP          reduce using rule 54 (assignment_operator -> PLUSEQOP .)
    MINUSOP         reduce using rule 54 (assignment_operator -> PLUSEQOP .)
    NOTSYM          reduce using rule 54 (assignment_operator -> PLUSEQOP .)
    BNOP            reduce using rule 54 (assignment_operator -> PLUSEQOP .)
    MULTOP          reduce using rule 54 (assignment_operator -> PLUSEQOP .)
    BANDOP          reduce using rule 54 (assignment_operator -> PLUSEQOP .)
    NEW             reduce using rule 54 (assignment_operator -> PLUSEQOP .)
    DELETE          reduce using rule 54 (assignment_operator -> PLUSEQOP .)
    THIS            reduce using rule 54 (assignment_operator -> PLUSEQOP .)
    LPAREN          reduce using rule 54 (assignment_operator -> PLUSEQOP .)
    IDENTIFIER      reduce using rule 54 (assignment_operator -> PLUSEQOP .)
    DOUBLEBNOP      reduce using rule 54 (assignment_operator -> PLUSEQOP .)
    STRING_L        reduce using rule 54 (assignment_operator -> PLUSEQOP .)
    NUMBER          reduce using rule 54 (assignment_operator -> PLUSEQOP .)
    SCHAR           reduce using rule 54 (assignment_operator -> PLUSEQOP .)


state 239

    (55) assignment_operator -> MINUSEQOP .

    DPLUSOP         reduce using rule 55 (assignment_operator -> MINUSEQOP .)
    DMINUSOP        reduce using rule 55 (assignment_operator -> MINUSEQOP .)
    SIZEOF          reduce using rule 55 (assignment_operator -> MINUSEQOP .)
    PLUSOP          reduce using rule 55 (assignment_operator -> MINUSEQOP .)
    MINUSOP         reduce using rule 55 (assignment_operator -> MINUSEQOP .)
    NOTSYM          reduce using rule 55 (assignment_operator -> MINUSEQOP .)
    BNOP            reduce using rule 55 (assignment_operator -> MINUSEQOP .)
    MULTOP          reduce using rule 55 (assignment_operator -> MINUSEQOP .)
    BANDOP          reduce using rule 55 (assignment_operator -> MINUSEQOP .)
    NEW             reduce using rule 55 (assignment_operator -> MINUSEQOP .)
    DELETE          reduce using rule 55 (assignment_operator -> MINUSEQOP .)
    THIS            reduce using rule 55 (assignment_operator -> MINUSEQOP .)
    LPAREN          reduce using rule 55 (assignment_operator -> MINUSEQOP .)
    IDENTIFIER      reduce using rule 55 (assignment_operator -> MINUSEQOP .)
    DOUBLEBNOP      reduce using rule 55 (assignment_operator -> MINUSEQOP .)
    STRING_L        reduce using rule 55 (assignment_operator -> MINUSEQOP .)
    NUMBER          reduce using rule 55 (assignment_operator -> MINUSEQOP .)
    SCHAR           reduce using rule 55 (assignment_operator -> MINUSEQOP .)


state 240

    (56) assignment_operator -> LSHIFTEQOP .

    DPLUSOP         reduce using rule 56 (assignment_operator -> LSHIFTEQOP .)
    DMINUSOP        reduce using rule 56 (assignment_operator -> LSHIFTEQOP .)
    SIZEOF          reduce using rule 56 (assignment_operator -> LSHIFTEQOP .)
    PLUSOP          reduce using rule 56 (assignment_operator -> LSHIFTEQOP .)
    MINUSOP         reduce using rule 56 (assignment_operator -> LSHIFTEQOP .)
    NOTSYM          reduce using rule 56 (assignment_operator -> LSHIFTEQOP .)
    BNOP            reduce using rule 56 (assignment_operator -> LSHIFTEQOP .)
    MULTOP          reduce using rule 56 (assignment_operator -> LSHIFTEQOP .)
    BANDOP          reduce using rule 56 (assignment_operator -> LSHIFTEQOP .)
    NEW             reduce using rule 56 (assignment_operator -> LSHIFTEQOP .)
    DELETE          reduce using rule 56 (assignment_operator -> LSHIFTEQOP .)
    THIS            reduce using rule 56 (assignment_operator -> LSHIFTEQOP .)
    LPAREN          reduce using rule 56 (assignment_operator -> LSHIFTEQOP .)
    IDENTIFIER      reduce using rule 56 (assignment_operator -> LSHIFTEQOP .)
    DOUBLEBNOP      reduce using rule 56 (assignment_operator -> LSHIFTEQOP .)
    STRING_L        reduce using rule 56 (assignment_operator -> LSHIFTEQOP .)
    NUMBER          reduce using rule 56 (assignment_operator -> LSHIFTEQOP .)
    SCHAR           reduce using rule 56 (assignment_operator -> LSHIFTEQOP .)


state 241

    (57) assignment_operator -> RSHIFTEQOP .

    DPLUSOP         reduce using rule 57 (assignment_operator -> RSHIFTEQOP .)
    DMINUSOP        reduce using rule 57 (assignment_operator -> RSHIFTEQOP .)
    SIZEOF          reduce using rule 57 (assignment_operator -> RSHIFTEQOP .)
    PLUSOP          reduce using rule 57 (assignment_operator -> RSHIFTEQOP .)
    MINUSOP         reduce using rule 57 (assignment_operator -> RSHIFTEQOP .)
    NOTSYM          reduce using rule 57 (assignment_operator -> RSHIFTEQOP .)
    BNOP            reduce using rule 57 (assignment_operator -> RSHIFTEQOP .)
    MULTOP          reduce using rule 57 (assignment_operator -> RSHIFTEQOP .)
    BANDOP          reduce using rule 57 (assignment_operator -> RSHIFTEQOP .)
    NEW             reduce using rule 57 (assignment_operator -> RSHIFTEQOP .)
    DELETE          reduce using rule 57 (assignment_operator -> RSHIFTEQOP .)
    THIS            reduce using rule 57 (assignment_operator -> RSHIFTEQOP .)
    LPAREN          reduce using rule 57 (assignment_operator -> RSHIFTEQOP .)
    IDENTIFIER      reduce using rule 57 (assignment_operator -> RSHIFTEQOP .)
    DOUBLEBNOP      reduce using rule 57 (assignment_operator -> RSHIFTEQOP .)
    STRING_L        reduce using rule 57 (assignment_operator -> RSHIFTEQOP .)
    NUMBER          reduce using rule 57 (assignment_operator -> RSHIFTEQOP .)
    SCHAR           reduce using rule 57 (assignment_operator -> RSHIFTEQOP .)


state 242

    (58) assignment_operator -> BANDEQOP .

    DPLUSOP         reduce using rule 58 (assignment_operator -> BANDEQOP .)
    DMINUSOP        reduce using rule 58 (assignment_operator -> BANDEQOP .)
    SIZEOF          reduce using rule 58 (assignment_operator -> BANDEQOP .)
    PLUSOP          reduce using rule 58 (assignment_operator -> BANDEQOP .)
    MINUSOP         reduce using rule 58 (assignment_operator -> BANDEQOP .)
    NOTSYM          reduce using rule 58 (assignment_operator -> BANDEQOP .)
    BNOP            reduce using rule 58 (assignment_operator -> BANDEQOP .)
    MULTOP          reduce using rule 58 (assignment_operator -> BANDEQOP .)
    BANDOP          reduce using rule 58 (assignment_operator -> BANDEQOP .)
    NEW             reduce using rule 58 (assignment_operator -> BANDEQOP .)
    DELETE          reduce using rule 58 (assignment_operator -> BANDEQOP .)
    THIS            reduce using rule 58 (assignment_operator -> BANDEQOP .)
    LPAREN          reduce using rule 58 (assignment_operator -> BANDEQOP .)
    IDENTIFIER      reduce using rule 58 (assignment_operator -> BANDEQOP .)
    DOUBLEBNOP      reduce using rule 58 (assignment_operator -> BANDEQOP .)
    STRING_L        reduce using rule 58 (assignment_operator -> BANDEQOP .)
    NUMBER          reduce using rule 58 (assignment_operator -> BANDEQOP .)
    SCHAR           reduce using rule 58 (assignment_operator -> BANDEQOP .)


state 243

    (59) assignment_operator -> BOREQOP .

    DPLUSOP         reduce using rule 59 (assignment_operator -> BOREQOP .)
    DMINUSOP        reduce using rule 59 (assignment_operator -> BOREQOP .)
    SIZEOF          reduce using rule 59 (assignment_operator -> BOREQOP .)
    PLUSOP          reduce using rule 59 (assignment_operator -> BOREQOP .)
    MINUSOP         reduce using rule 59 (assignment_operator -> BOREQOP .)
    NOTSYM          reduce using rule 59 (assignment_operator -> BOREQOP .)
    BNOP            reduce using rule 59 (assignment_operator -> BOREQOP .)
    MULTOP          reduce using rule 59 (assignment_operator -> BOREQOP .)
    BANDOP          reduce using rule 59 (assignment_operator -> BOREQOP .)
    NEW             reduce using rule 59 (assignment_operator -> BOREQOP .)
    DELETE          reduce using rule 59 (assignment_operator -> BOREQOP .)
    THIS            reduce using rule 59 (assignment_operator -> BOREQOP .)
    LPAREN          reduce using rule 59 (assignment_operator -> BOREQOP .)
    IDENTIFIER      reduce using rule 59 (assignment_operator -> BOREQOP .)
    DOUBLEBNOP      reduce using rule 59 (assignment_operator -> BOREQOP .)
    STRING_L        reduce using rule 59 (assignment_operator -> BOREQOP .)
    NUMBER          reduce using rule 59 (assignment_operator -> BOREQOP .)
    SCHAR           reduce using rule 59 (assignment_operator -> BOREQOP .)


state 244

    (283) initializer_list -> LCPAREN . initializer_list RCPAREN
    (284) initializer_list -> LCPAREN . initializer_list COMMA RCPAREN
    (281) initializer_list -> . assignment_expression
    (282) initializer_list -> . initializer_list COMMA assignment_expression
    (283) initializer_list -> . LCPAREN initializer_list RCPAREN
    (284) initializer_list -> . LCPAREN initializer_list COMMA RCPAREN
    (48) assignment_expression -> . conditional_expression
    (49) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LCPAREN         shift and go to state 244
    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    THIS            shift and go to state 142
    LPAREN          shift and go to state 146
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    initializer_list               shift and go to state 311
    assignment_expression          shift and go to state 246
    conditional_expression         shift and go to state 149
    unary_expression               shift and go to state 150
    logical_OR_expression          shift and go to state 112
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    cast_expression                shift and go to state 124
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    logical_AND_expression         shift and go to state 113
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    inclusive_OR_expression        shift and go to state 114
    literal                        shift and go to state 141
    exclusive_OR_expression        shift and go to state 115
    AND_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 245

    (278) initializer -> EQUAL LCPAREN initializer_list . RCPAREN
    (279) initializer -> EQUAL LCPAREN initializer_list . COMMA RCPAREN
    (282) initializer_list -> initializer_list . COMMA assignment_expression

    RCPAREN         shift and go to state 312
    COMMA           shift and go to state 313


state 246

    (281) initializer_list -> assignment_expression .

    RCPAREN         reduce using rule 281 (initializer_list -> assignment_expression .)
    COMMA           reduce using rule 281 (initializer_list -> assignment_expression .)
    RPAREN          reduce using rule 281 (initializer_list -> assignment_expression .)


state 247

    (285) asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .

    CONST           reduce using rule 285 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    ASM             reduce using rule 285 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    TEMPLATE        reduce using rule 285 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    TYPEDEF         reduce using rule 285 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    CHAR            reduce using rule 285 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    SHORT           reduce using rule 285 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    INT             reduce using rule 285 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    LONG            reduce using rule 285 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    SIGNED          reduce using rule 285 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    UNSIGNED        reduce using rule 285 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    FLOAT           reduce using rule 285 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    DOUBLE          reduce using rule 285 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    VOID            reduce using rule 285 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    STRING          reduce using rule 285 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    AUTO            reduce using rule 285 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    TYPE            reduce using rule 285 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    CLASS           reduce using rule 285 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    STRUCT          reduce using rule 285 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    $end            reduce using rule 285 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    RCPAREN         reduce using rule 285 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 285 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    IF              reduce using rule 285 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    SWITCH          reduce using rule 285 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    WHILE           reduce using rule 285 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    DO              reduce using rule 285 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    FOR             reduce using rule 285 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    BREAK           reduce using rule 285 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 285 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    RETURN          reduce using rule 285 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    GOTO            reduce using rule 285 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    TRY             reduce using rule 285 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    THROW           reduce using rule 285 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    DPLUSOP         reduce using rule 285 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    DMINUSOP        reduce using rule 285 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    SIZEOF          reduce using rule 285 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    PLUSOP          reduce using rule 285 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    MINUSOP         reduce using rule 285 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    NOTSYM          reduce using rule 285 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    BNOP            reduce using rule 285 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    MULTOP          reduce using rule 285 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    BANDOP          reduce using rule 285 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    NEW             reduce using rule 285 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    DELETE          reduce using rule 285 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    THIS            reduce using rule 285 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    LPAREN          reduce using rule 285 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 285 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    DOUBLEBNOP      reduce using rule 285 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    STRING_L        reduce using rule 285 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    NUMBER          reduce using rule 285 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    SCHAR           reduce using rule 285 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    LCPAREN         reduce using rule 285 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    CASE            reduce using rule 285 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 285 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)


state 248

    (210) access_list -> access_specifier COLON member_access_list .

    RCPAREN         reduce using rule 210 (access_list -> access_specifier COLON member_access_list .)
    PRIVATE         reduce using rule 210 (access_list -> access_specifier COLON member_access_list .)
    PROTECTED       reduce using rule 210 (access_list -> access_specifier COLON member_access_list .)
    PUBLIC          reduce using rule 210 (access_list -> access_specifier COLON member_access_list .)


state 249

    (214) member_declaration -> type_specifier_ member_declarator_list SEMICOLON .

    SEMICOLON       reduce using rule 214 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    CONST           reduce using rule 214 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    CHAR            reduce using rule 214 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    SHORT           reduce using rule 214 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    INT             reduce using rule 214 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    LONG            reduce using rule 214 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    SIGNED          reduce using rule 214 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    UNSIGNED        reduce using rule 214 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    FLOAT           reduce using rule 214 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    DOUBLE          reduce using rule 214 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    VOID            reduce using rule 214 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    STRING          reduce using rule 214 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    AUTO            reduce using rule 214 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    TYPE            reduce using rule 214 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    CLASS           reduce using rule 214 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    STRUCT          reduce using rule 214 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    IDENTIFIER      reduce using rule 214 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    DOUBLEBNOP      reduce using rule 214 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    MULTOP          reduce using rule 214 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    BANDOP          reduce using rule 214 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    RCPAREN         reduce using rule 214 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    PRIVATE         reduce using rule 214 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    PROTECTED       reduce using rule 214 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    PUBLIC          reduce using rule 214 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)


state 250

    (224) function_definition -> type_specifier_ declarator func_push_scope . arg_list RPAREN fct_body pop_scope
    (116) arg_list -> . argument_declaration_list
    (117) arg_list -> .
    (118) argument_declaration_list -> . argument_declaration
    (119) argument_declaration_list -> . argument_declaration COMMA argument_declaration_list
    (120) argument_declaration -> . type_specifier_ declarator
    (121) argument_declaration -> . type_specifier_ declarator EQUAL expression
    (122) argument_declaration -> . type_specifier_ abstract_declarator
    (123) argument_declaration -> . type_specifier_
    (167) type_specifier_ -> . CONST type_specifier
    (168) type_specifier_ -> . type_specifier
    (171) type_specifier -> . simple_type_name
    (172) type_specifier -> . complex_type_specifier
    (173) simple_type_name -> . CHAR
    (174) simple_type_name -> . SHORT
    (175) simple_type_name -> . INT
    (176) simple_type_name -> . LONG
    (177) simple_type_name -> . SIGNED
    (178) simple_type_name -> . UNSIGNED
    (179) simple_type_name -> . FLOAT
    (180) simple_type_name -> . DOUBLE
    (181) simple_type_name -> . VOID
    (182) simple_type_name -> . STRING
    (183) simple_type_name -> . AUTO
    (184) complex_type_specifier -> . class_key IDENTIFIER
    (185) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (186) complex_type_specifier -> . TYPE IDENTIFIER
    (187) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (200) class_key -> . CLASS
    (201) class_key -> . STRUCT

    RPAREN          reduce using rule 117 (arg_list -> .)
    CONST           shift and go to state 16
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38

    type_specifier_                shift and go to state 93
    arg_list                       shift and go to state 314
    argument_declaration_list      shift and go to state 107
    argument_declaration           shift and go to state 108
    type_specifier                 shift and go to state 17
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 56

state 251

    (226) func_push_scope -> LPAREN .

    CONST           reduce using rule 226 (func_push_scope -> LPAREN .)
    CHAR            reduce using rule 226 (func_push_scope -> LPAREN .)
    SHORT           reduce using rule 226 (func_push_scope -> LPAREN .)
    INT             reduce using rule 226 (func_push_scope -> LPAREN .)
    LONG            reduce using rule 226 (func_push_scope -> LPAREN .)
    SIGNED          reduce using rule 226 (func_push_scope -> LPAREN .)
    UNSIGNED        reduce using rule 226 (func_push_scope -> LPAREN .)
    FLOAT           reduce using rule 226 (func_push_scope -> LPAREN .)
    DOUBLE          reduce using rule 226 (func_push_scope -> LPAREN .)
    VOID            reduce using rule 226 (func_push_scope -> LPAREN .)
    STRING          reduce using rule 226 (func_push_scope -> LPAREN .)
    AUTO            reduce using rule 226 (func_push_scope -> LPAREN .)
    TYPE            reduce using rule 226 (func_push_scope -> LPAREN .)
    CLASS           reduce using rule 226 (func_push_scope -> LPAREN .)
    STRUCT          reduce using rule 226 (func_push_scope -> LPAREN .)
    RPAREN          reduce using rule 226 (func_push_scope -> LPAREN .)


state 252

    (221) member_declarator_list -> member_declarator_list COMMA member_declarator .

    SEMICOLON       reduce using rule 221 (member_declarator_list -> member_declarator_list COMMA member_declarator .)
    COMMA           reduce using rule 221 (member_declarator_list -> member_declarator_list COMMA member_declarator .)


state 253

    (188) pure_specifier -> EQUAL NUMBER .

    SEMICOLON       reduce using rule 188 (pure_specifier -> EQUAL NUMBER .)
    COMMA           reduce using rule 188 (pure_specifier -> EQUAL NUMBER .)


state 254

    (270) template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .

    CONST           reduce using rule 270 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    ASM             reduce using rule 270 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    TEMPLATE        reduce using rule 270 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    TYPEDEF         reduce using rule 270 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    CHAR            reduce using rule 270 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    SHORT           reduce using rule 270 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    INT             reduce using rule 270 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    LONG            reduce using rule 270 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    SIGNED          reduce using rule 270 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    UNSIGNED        reduce using rule 270 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    FLOAT           reduce using rule 270 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    DOUBLE          reduce using rule 270 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    VOID            reduce using rule 270 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    STRING          reduce using rule 270 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    AUTO            reduce using rule 270 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    TYPE            reduce using rule 270 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    CLASS           reduce using rule 270 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    STRUCT          reduce using rule 270 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    $end            reduce using rule 270 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    RCPAREN         reduce using rule 270 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    SEMICOLON       reduce using rule 270 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    IF              reduce using rule 270 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    SWITCH          reduce using rule 270 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    WHILE           reduce using rule 270 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    DO              reduce using rule 270 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    FOR             reduce using rule 270 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    BREAK           reduce using rule 270 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    CONTINUE        reduce using rule 270 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    RETURN          reduce using rule 270 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    GOTO            reduce using rule 270 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    TRY             reduce using rule 270 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    THROW           reduce using rule 270 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    DPLUSOP         reduce using rule 270 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    DMINUSOP        reduce using rule 270 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    SIZEOF          reduce using rule 270 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    PLUSOP          reduce using rule 270 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    MINUSOP         reduce using rule 270 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    NOTSYM          reduce using rule 270 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    BNOP            reduce using rule 270 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    MULTOP          reduce using rule 270 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    BANDOP          reduce using rule 270 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    NEW             reduce using rule 270 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    DELETE          reduce using rule 270 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    THIS            reduce using rule 270 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    LPAREN          reduce using rule 270 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    IDENTIFIER      reduce using rule 270 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    DOUBLEBNOP      reduce using rule 270 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    STRING_L        reduce using rule 270 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    NUMBER          reduce using rule 270 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    SCHAR           reduce using rule 270 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    LCPAREN         reduce using rule 270 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    CASE            reduce using rule 270 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    DEFAULT         reduce using rule 270 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)


state 255

    (272) template_argument_list -> template_argument_list COMMA argument_declaration .

    RTEMPLATE       reduce using rule 272 (template_argument_list -> template_argument_list COMMA argument_declaration .)
    COMMA           reduce using rule 272 (template_argument_list -> template_argument_list COMMA argument_declaration .)


state 256

    (121) argument_declaration -> type_specifier_ declarator EQUAL . expression
    (43) expression -> . assignment_expression
    (44) expression -> . throw_expression
    (45) expression -> . expression COMMA assignment_expression
    (48) assignment_expression -> . conditional_expression
    (49) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (46) throw_expression -> . THROW expression
    (47) throw_expression -> . THROW
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression

    THROW           shift and go to state 212
    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    THIS            shift and go to state 142
    LPAREN          shift and go to state 146
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    expression                     shift and go to state 315
    assignment_expression          shift and go to state 210
    throw_expression               shift and go to state 211
    conditional_expression         shift and go to state 149
    unary_expression               shift and go to state 150
    logical_OR_expression          shift and go to state 112
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    cast_expression                shift and go to state 124
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    logical_AND_expression         shift and go to state 113
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    inclusive_OR_expression        shift and go to state 114
    literal                        shift and go to state 141
    exclusive_OR_expression        shift and go to state 115
    AND_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 257

    (169) typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .

    CONST           reduce using rule 169 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    ASM             reduce using rule 169 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    TEMPLATE        reduce using rule 169 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    TYPEDEF         reduce using rule 169 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    CHAR            reduce using rule 169 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    SHORT           reduce using rule 169 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    INT             reduce using rule 169 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    LONG            reduce using rule 169 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    SIGNED          reduce using rule 169 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    UNSIGNED        reduce using rule 169 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    FLOAT           reduce using rule 169 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    DOUBLE          reduce using rule 169 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    VOID            reduce using rule 169 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    STRING          reduce using rule 169 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    AUTO            reduce using rule 169 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    TYPE            reduce using rule 169 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    CLASS           reduce using rule 169 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    STRUCT          reduce using rule 169 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    $end            reduce using rule 169 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    RCPAREN         reduce using rule 169 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    SEMICOLON       reduce using rule 169 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    IF              reduce using rule 169 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    SWITCH          reduce using rule 169 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 169 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    DO              reduce using rule 169 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    FOR             reduce using rule 169 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    BREAK           reduce using rule 169 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    CONTINUE        reduce using rule 169 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    RETURN          reduce using rule 169 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    GOTO            reduce using rule 169 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    TRY             reduce using rule 169 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    THROW           reduce using rule 169 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    DPLUSOP         reduce using rule 169 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    DMINUSOP        reduce using rule 169 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    SIZEOF          reduce using rule 169 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    PLUSOP          reduce using rule 169 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    MINUSOP         reduce using rule 169 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    NOTSYM          reduce using rule 169 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    BNOP            reduce using rule 169 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    MULTOP          reduce using rule 169 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    BANDOP          reduce using rule 169 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    NEW             reduce using rule 169 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    DELETE          reduce using rule 169 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    THIS            reduce using rule 169 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    LPAREN          reduce using rule 169 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 169 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    DOUBLEBNOP      reduce using rule 169 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    STRING_L        reduce using rule 169 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    NUMBER          reduce using rule 169 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    SCHAR           reduce using rule 169 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    LCPAREN         reduce using rule 169 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    CASE            reduce using rule 169 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    DEFAULT         reduce using rule 169 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)


state 258

    (109) abstract_declarator -> abstract_declarator LSPAREN constant_expression . RSPAREN

    RSPAREN         shift and go to state 316


state 259

    (111) abstract_declarator -> abstract_declarator LSPAREN RSPAREN .

    IDENTIFIER      reduce using rule 111 (abstract_declarator -> abstract_declarator LSPAREN RSPAREN .)
    LSPAREN         reduce using rule 111 (abstract_declarator -> abstract_declarator LSPAREN RSPAREN .)
    RTEMPLATE       reduce using rule 111 (abstract_declarator -> abstract_declarator LSPAREN RSPAREN .)
    COMMA           reduce using rule 111 (abstract_declarator -> abstract_declarator LSPAREN RSPAREN .)
    RPAREN          reduce using rule 111 (abstract_declarator -> abstract_declarator LSPAREN RSPAREN .)


state 260

    (108) abstract_declarator -> LSPAREN constant_expression RSPAREN .

    IDENTIFIER      reduce using rule 108 (abstract_declarator -> LSPAREN constant_expression RSPAREN .)
    LSPAREN         reduce using rule 108 (abstract_declarator -> LSPAREN constant_expression RSPAREN .)
    RTEMPLATE       reduce using rule 108 (abstract_declarator -> LSPAREN constant_expression RSPAREN .)
    COMMA           reduce using rule 108 (abstract_declarator -> LSPAREN constant_expression RSPAREN .)
    RPAREN          reduce using rule 108 (abstract_declarator -> LSPAREN constant_expression RSPAREN .)


state 261

    (193) base_list -> base_list COMMA . base_specifier
    (194) base_specifier -> . class_key IDENTIFIER
    (195) base_specifier -> . class_key IDENTIFIER template_class_name
    (196) base_specifier -> . IDENTIFIER
    (197) base_specifier -> . IDENTIFIER template_class_name
    (198) base_specifier -> . access_specifier class_key IDENTIFIER
    (199) base_specifier -> . access_specifier class_key IDENTIFIER template_class_name
    (200) class_key -> . CLASS
    (201) class_key -> . STRUCT
    (207) access_specifier -> . PRIVATE
    (208) access_specifier -> . PROTECTED
    (209) access_specifier -> . PUBLIC

    IDENTIFIER      shift and go to state 180
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38
    PRIVATE         shift and go to state 86
    PROTECTED       shift and go to state 87
    PUBLIC          shift and go to state 88

    base_specifier                 shift and go to state 317
    class_key                      shift and go to state 179
    access_specifier               shift and go to state 181

state 262

    (194) base_specifier -> class_key IDENTIFIER .
    (195) base_specifier -> class_key IDENTIFIER . template_class_name
    (162) template_class_name -> . LTEMPLATE template_arg_list RTEMPLATE

    COMMA           reduce using rule 194 (base_specifier -> class_key IDENTIFIER .)
    LCPAREN         reduce using rule 194 (base_specifier -> class_key IDENTIFIER .)
    LTEMPLATE       shift and go to state 101

    template_class_name            shift and go to state 318

state 263

    (197) base_specifier -> IDENTIFIER template_class_name .

    COMMA           reduce using rule 197 (base_specifier -> IDENTIFIER template_class_name .)
    LCPAREN         reduce using rule 197 (base_specifier -> IDENTIFIER template_class_name .)


state 264

    (198) base_specifier -> access_specifier class_key . IDENTIFIER
    (199) base_specifier -> access_specifier class_key . IDENTIFIER template_class_name

    IDENTIFIER      shift and go to state 319


state 265

    (162) template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .

    IDENTIFIER      reduce using rule 162 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    DOUBLEBNOP      reduce using rule 162 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    MULTOP          reduce using rule 162 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    BANDOP          reduce using rule 162 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    SEMICOLON       reduce using rule 162 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    LSPAREN         reduce using rule 162 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    RTEMPLATE       reduce using rule 162 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    COMMA           reduce using rule 162 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    RPAREN          reduce using rule 162 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    LPAREN          reduce using rule 162 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    DIVOP           reduce using rule 162 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    MODOP           reduce using rule 162 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    PLUSOP          reduce using rule 162 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    MINUSOP         reduce using rule 162 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    LSHIFT          reduce using rule 162 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    RSHIFT          reduce using rule 162 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    LTCOMP          reduce using rule 162 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    GTCOMP          reduce using rule 162 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    LTECOMP         reduce using rule 162 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    GTECOMP         reduce using rule 162 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    EQCOMP          reduce using rule 162 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    NEQCOMP         reduce using rule 162 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    XOROP           reduce using rule 162 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    OROP            reduce using rule 162 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    ANDOP           reduce using rule 162 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    QUESMARK        reduce using rule 162 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    RSPAREN         reduce using rule 162 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    EQUAL           reduce using rule 162 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    MULTEQOP        reduce using rule 162 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    DIVEQOP         reduce using rule 162 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    MODEQOP         reduce using rule 162 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    PLUSEQOP        reduce using rule 162 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    MINUSEQOP       reduce using rule 162 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    LSHIFTEQOP      reduce using rule 162 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    RSHIFTEQOP      reduce using rule 162 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    BANDEQOP        reduce using rule 162 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    BOREQOP         reduce using rule 162 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    RCPAREN         reduce using rule 162 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    COLON           reduce using rule 162 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    LCPAREN         reduce using rule 162 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)


state 266

    (164) template_arg_list -> template_arg_list COMMA . type_name
    (165) type_name -> . type_specifier_ abstract_declarator
    (166) type_name -> . type_specifier_
    (167) type_specifier_ -> . CONST type_specifier
    (168) type_specifier_ -> . type_specifier
    (171) type_specifier -> . simple_type_name
    (172) type_specifier -> . complex_type_specifier
    (173) simple_type_name -> . CHAR
    (174) simple_type_name -> . SHORT
    (175) simple_type_name -> . INT
    (176) simple_type_name -> . LONG
    (177) simple_type_name -> . SIGNED
    (178) simple_type_name -> . UNSIGNED
    (179) simple_type_name -> . FLOAT
    (180) simple_type_name -> . DOUBLE
    (181) simple_type_name -> . VOID
    (182) simple_type_name -> . STRING
    (183) simple_type_name -> . AUTO
    (184) complex_type_specifier -> . class_key IDENTIFIER
    (185) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (186) complex_type_specifier -> . TYPE IDENTIFIER
    (187) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (200) class_key -> . CLASS
    (201) class_key -> . STRUCT

    CONST           shift and go to state 16
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38

    type_name                      shift and go to state 320
    type_specifier_                shift and go to state 184
    type_specifier                 shift and go to state 17
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 56

state 267

    (165) type_name -> type_specifier_ abstract_declarator .
    (109) abstract_declarator -> abstract_declarator . LSPAREN constant_expression RSPAREN
    (111) abstract_declarator -> abstract_declarator . LSPAREN RSPAREN

    RTEMPLATE       reduce using rule 165 (type_name -> type_specifier_ abstract_declarator .)
    COMMA           reduce using rule 165 (type_name -> type_specifier_ abstract_declarator .)
    RPAREN          reduce using rule 165 (type_name -> type_specifier_ abstract_declarator .)
    LSPAREN         shift and go to state 172


state 268

    (224) function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body . pop_scope
    (289) pop_scope -> .

    CONST           reduce using rule 289 (pop_scope -> .)
    ASM             reduce using rule 289 (pop_scope -> .)
    TEMPLATE        reduce using rule 289 (pop_scope -> .)
    TYPEDEF         reduce using rule 289 (pop_scope -> .)
    CHAR            reduce using rule 289 (pop_scope -> .)
    SHORT           reduce using rule 289 (pop_scope -> .)
    INT             reduce using rule 289 (pop_scope -> .)
    LONG            reduce using rule 289 (pop_scope -> .)
    SIGNED          reduce using rule 289 (pop_scope -> .)
    UNSIGNED        reduce using rule 289 (pop_scope -> .)
    FLOAT           reduce using rule 289 (pop_scope -> .)
    DOUBLE          reduce using rule 289 (pop_scope -> .)
    VOID            reduce using rule 289 (pop_scope -> .)
    STRING          reduce using rule 289 (pop_scope -> .)
    AUTO            reduce using rule 289 (pop_scope -> .)
    TYPE            reduce using rule 289 (pop_scope -> .)
    CLASS           reduce using rule 289 (pop_scope -> .)
    STRUCT          reduce using rule 289 (pop_scope -> .)
    $end            reduce using rule 289 (pop_scope -> .)
    SEMICOLON       reduce using rule 289 (pop_scope -> .)
    IDENTIFIER      reduce using rule 289 (pop_scope -> .)
    DOUBLEBNOP      reduce using rule 289 (pop_scope -> .)
    MULTOP          reduce using rule 289 (pop_scope -> .)
    BANDOP          reduce using rule 289 (pop_scope -> .)
    RCPAREN         reduce using rule 289 (pop_scope -> .)
    PRIVATE         reduce using rule 289 (pop_scope -> .)
    PROTECTED       reduce using rule 289 (pop_scope -> .)
    PUBLIC          reduce using rule 289 (pop_scope -> .)
    IF              reduce using rule 289 (pop_scope -> .)
    SWITCH          reduce using rule 289 (pop_scope -> .)
    WHILE           reduce using rule 289 (pop_scope -> .)
    DO              reduce using rule 289 (pop_scope -> .)
    FOR             reduce using rule 289 (pop_scope -> .)
    BREAK           reduce using rule 289 (pop_scope -> .)
    CONTINUE        reduce using rule 289 (pop_scope -> .)
    RETURN          reduce using rule 289 (pop_scope -> .)
    GOTO            reduce using rule 289 (pop_scope -> .)
    TRY             reduce using rule 289 (pop_scope -> .)
    THROW           reduce using rule 289 (pop_scope -> .)
    DPLUSOP         reduce using rule 289 (pop_scope -> .)
    DMINUSOP        reduce using rule 289 (pop_scope -> .)
    SIZEOF          reduce using rule 289 (pop_scope -> .)
    PLUSOP          reduce using rule 289 (pop_scope -> .)
    MINUSOP         reduce using rule 289 (pop_scope -> .)
    NOTSYM          reduce using rule 289 (pop_scope -> .)
    BNOP            reduce using rule 289 (pop_scope -> .)
    NEW             reduce using rule 289 (pop_scope -> .)
    DELETE          reduce using rule 289 (pop_scope -> .)
    THIS            reduce using rule 289 (pop_scope -> .)
    LPAREN          reduce using rule 289 (pop_scope -> .)
    STRING_L        reduce using rule 289 (pop_scope -> .)
    NUMBER          reduce using rule 289 (pop_scope -> .)
    SCHAR           reduce using rule 289 (pop_scope -> .)
    LCPAREN         reduce using rule 289 (pop_scope -> .)
    CASE            reduce using rule 289 (pop_scope -> .)
    DEFAULT         reduce using rule 289 (pop_scope -> .)

    pop_scope                      shift and go to state 321

state 269

    (225) function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON . pop_scope
    (289) pop_scope -> .

    CONST           reduce using rule 289 (pop_scope -> .)
    ASM             reduce using rule 289 (pop_scope -> .)
    TEMPLATE        reduce using rule 289 (pop_scope -> .)
    TYPEDEF         reduce using rule 289 (pop_scope -> .)
    CHAR            reduce using rule 289 (pop_scope -> .)
    SHORT           reduce using rule 289 (pop_scope -> .)
    INT             reduce using rule 289 (pop_scope -> .)
    LONG            reduce using rule 289 (pop_scope -> .)
    SIGNED          reduce using rule 289 (pop_scope -> .)
    UNSIGNED        reduce using rule 289 (pop_scope -> .)
    FLOAT           reduce using rule 289 (pop_scope -> .)
    DOUBLE          reduce using rule 289 (pop_scope -> .)
    VOID            reduce using rule 289 (pop_scope -> .)
    STRING          reduce using rule 289 (pop_scope -> .)
    AUTO            reduce using rule 289 (pop_scope -> .)
    TYPE            reduce using rule 289 (pop_scope -> .)
    CLASS           reduce using rule 289 (pop_scope -> .)
    STRUCT          reduce using rule 289 (pop_scope -> .)
    $end            reduce using rule 289 (pop_scope -> .)
    RCPAREN         reduce using rule 289 (pop_scope -> .)
    SEMICOLON       reduce using rule 289 (pop_scope -> .)
    IF              reduce using rule 289 (pop_scope -> .)
    SWITCH          reduce using rule 289 (pop_scope -> .)
    WHILE           reduce using rule 289 (pop_scope -> .)
    DO              reduce using rule 289 (pop_scope -> .)
    FOR             reduce using rule 289 (pop_scope -> .)
    BREAK           reduce using rule 289 (pop_scope -> .)
    CONTINUE        reduce using rule 289 (pop_scope -> .)
    RETURN          reduce using rule 289 (pop_scope -> .)
    GOTO            reduce using rule 289 (pop_scope -> .)
    TRY             reduce using rule 289 (pop_scope -> .)
    THROW           reduce using rule 289 (pop_scope -> .)
    DPLUSOP         reduce using rule 289 (pop_scope -> .)
    DMINUSOP        reduce using rule 289 (pop_scope -> .)
    SIZEOF          reduce using rule 289 (pop_scope -> .)
    PLUSOP          reduce using rule 289 (pop_scope -> .)
    MINUSOP         reduce using rule 289 (pop_scope -> .)
    NOTSYM          reduce using rule 289 (pop_scope -> .)
    BNOP            reduce using rule 289 (pop_scope -> .)
    MULTOP          reduce using rule 289 (pop_scope -> .)
    BANDOP          reduce using rule 289 (pop_scope -> .)
    NEW             reduce using rule 289 (pop_scope -> .)
    DELETE          reduce using rule 289 (pop_scope -> .)
    THIS            reduce using rule 289 (pop_scope -> .)
    LPAREN          reduce using rule 289 (pop_scope -> .)
    IDENTIFIER      reduce using rule 289 (pop_scope -> .)
    DOUBLEBNOP      reduce using rule 289 (pop_scope -> .)
    STRING_L        reduce using rule 289 (pop_scope -> .)
    NUMBER          reduce using rule 289 (pop_scope -> .)
    SCHAR           reduce using rule 289 (pop_scope -> .)
    LCPAREN         reduce using rule 289 (pop_scope -> .)
    CASE            reduce using rule 289 (pop_scope -> .)
    DEFAULT         reduce using rule 289 (pop_scope -> .)

    pop_scope                      shift and go to state 322

state 270

    (227) fct_body -> compound_statement .

    CONST           reduce using rule 227 (fct_body -> compound_statement .)
    ASM             reduce using rule 227 (fct_body -> compound_statement .)
    TEMPLATE        reduce using rule 227 (fct_body -> compound_statement .)
    TYPEDEF         reduce using rule 227 (fct_body -> compound_statement .)
    CHAR            reduce using rule 227 (fct_body -> compound_statement .)
    SHORT           reduce using rule 227 (fct_body -> compound_statement .)
    INT             reduce using rule 227 (fct_body -> compound_statement .)
    LONG            reduce using rule 227 (fct_body -> compound_statement .)
    SIGNED          reduce using rule 227 (fct_body -> compound_statement .)
    UNSIGNED        reduce using rule 227 (fct_body -> compound_statement .)
    FLOAT           reduce using rule 227 (fct_body -> compound_statement .)
    DOUBLE          reduce using rule 227 (fct_body -> compound_statement .)
    VOID            reduce using rule 227 (fct_body -> compound_statement .)
    STRING          reduce using rule 227 (fct_body -> compound_statement .)
    AUTO            reduce using rule 227 (fct_body -> compound_statement .)
    TYPE            reduce using rule 227 (fct_body -> compound_statement .)
    CLASS           reduce using rule 227 (fct_body -> compound_statement .)
    STRUCT          reduce using rule 227 (fct_body -> compound_statement .)
    $end            reduce using rule 227 (fct_body -> compound_statement .)
    RCPAREN         reduce using rule 227 (fct_body -> compound_statement .)
    SEMICOLON       reduce using rule 227 (fct_body -> compound_statement .)
    IF              reduce using rule 227 (fct_body -> compound_statement .)
    SWITCH          reduce using rule 227 (fct_body -> compound_statement .)
    WHILE           reduce using rule 227 (fct_body -> compound_statement .)
    DO              reduce using rule 227 (fct_body -> compound_statement .)
    FOR             reduce using rule 227 (fct_body -> compound_statement .)
    BREAK           reduce using rule 227 (fct_body -> compound_statement .)
    CONTINUE        reduce using rule 227 (fct_body -> compound_statement .)
    RETURN          reduce using rule 227 (fct_body -> compound_statement .)
    GOTO            reduce using rule 227 (fct_body -> compound_statement .)
    TRY             reduce using rule 227 (fct_body -> compound_statement .)
    THROW           reduce using rule 227 (fct_body -> compound_statement .)
    DPLUSOP         reduce using rule 227 (fct_body -> compound_statement .)
    DMINUSOP        reduce using rule 227 (fct_body -> compound_statement .)
    SIZEOF          reduce using rule 227 (fct_body -> compound_statement .)
    PLUSOP          reduce using rule 227 (fct_body -> compound_statement .)
    MINUSOP         reduce using rule 227 (fct_body -> compound_statement .)
    NOTSYM          reduce using rule 227 (fct_body -> compound_statement .)
    BNOP            reduce using rule 227 (fct_body -> compound_statement .)
    MULTOP          reduce using rule 227 (fct_body -> compound_statement .)
    BANDOP          reduce using rule 227 (fct_body -> compound_statement .)
    NEW             reduce using rule 227 (fct_body -> compound_statement .)
    DELETE          reduce using rule 227 (fct_body -> compound_statement .)
    THIS            reduce using rule 227 (fct_body -> compound_statement .)
    LPAREN          reduce using rule 227 (fct_body -> compound_statement .)
    IDENTIFIER      reduce using rule 227 (fct_body -> compound_statement .)
    DOUBLEBNOP      reduce using rule 227 (fct_body -> compound_statement .)
    STRING_L        reduce using rule 227 (fct_body -> compound_statement .)
    NUMBER          reduce using rule 227 (fct_body -> compound_statement .)
    SCHAR           reduce using rule 227 (fct_body -> compound_statement .)
    LCPAREN         reduce using rule 227 (fct_body -> compound_statement .)
    CASE            reduce using rule 227 (fct_body -> compound_statement .)
    DEFAULT         reduce using rule 227 (fct_body -> compound_statement .)
    PRIVATE         reduce using rule 227 (fct_body -> compound_statement .)
    PROTECTED       reduce using rule 227 (fct_body -> compound_statement .)
    PUBLIC          reduce using rule 227 (fct_body -> compound_statement .)


state 271

    (228) compound_statement -> LCPAREN . statement_list RCPAREN
    (229) compound_statement -> LCPAREN . RCPAREN
    (230) statement_list -> . statement
    (231) statement_list -> . statement_list statement
    (232) statement -> . expression_statement
    (233) statement -> . push_scope compound_statement pop_scope
    (234) statement -> . selection_statement
    (235) statement -> . iteration_statement
    (236) statement -> . jump_statement
    (237) statement -> . declaration_statement
    (238) statement -> . try_block
    (260) expression_statement -> . expression SEMICOLON
    (261) expression_statement -> . SEMICOLON
    (288) push_scope -> .
    (244) selection_statement -> . IF LPAREN expression RPAREN push_scope compound_statement pop_scope
    (245) selection_statement -> . IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope
    (246) selection_statement -> . SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope
    (252) iteration_statement -> . WHILE push_scope LPAREN expression RPAREN statement pop_scope
    (253) iteration_statement -> . DO push_scope statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope
    (254) iteration_statement -> . FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope
    (255) iteration_statement -> . FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope
    (256) iteration_statement -> . FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope
    (257) iteration_statement -> . FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN statement pop_scope
    (239) jump_statement -> . BREAK SEMICOLON
    (240) jump_statement -> . CONTINUE SEMICOLON
    (241) jump_statement -> . RETURN expression SEMICOLON
    (242) jump_statement -> . RETURN SEMICOLON
    (243) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (262) declaration_statement -> . declaration
    (247) try_block -> . TRY push_scope compound_statement pop_scope CATCH push_scope compound_statement pop_scope
    (43) expression -> . assignment_expression
    (44) expression -> . throw_expression
    (45) expression -> . expression COMMA assignment_expression
    (263) declaration -> . type_specifier_ declarator_list SEMICOLON
    (264) declaration -> . asm_declaration
    (265) declaration -> . function_definition
    (266) declaration -> . function_decl
    (267) declaration -> . class_define_specifier SEMICOLON
    (268) declaration -> . template_declaration
    (269) declaration -> . typedef_declarator
    (48) assignment_expression -> . conditional_expression
    (49) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (46) throw_expression -> . THROW expression
    (47) throw_expression -> . THROW
    (167) type_specifier_ -> . CONST type_specifier
    (168) type_specifier_ -> . type_specifier
    (285) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (224) function_definition -> . type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope
    (225) function_decl -> . type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope
    (202) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (203) class_define_specifier -> . class_head LCPAREN RCPAREN
    (270) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (169) typedef_declarator -> . TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON
    (170) typedef_declarator -> . TYPEDEF type_specifier_ IDENTIFIER SEMICOLON
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (171) type_specifier -> . simple_type_name
    (172) type_specifier -> . complex_type_specifier
    (189) class_head -> . class_key IDENTIFIER base_spec
    (190) class_head -> . class_key IDENTIFIER
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (173) simple_type_name -> . CHAR
    (174) simple_type_name -> . SHORT
    (175) simple_type_name -> . INT
    (176) simple_type_name -> . LONG
    (177) simple_type_name -> . SIGNED
    (178) simple_type_name -> . UNSIGNED
    (179) simple_type_name -> . FLOAT
    (180) simple_type_name -> . DOUBLE
    (181) simple_type_name -> . VOID
    (182) simple_type_name -> . STRING
    (183) simple_type_name -> . AUTO
    (184) complex_type_specifier -> . class_key IDENTIFIER
    (185) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (186) complex_type_specifier -> . TYPE IDENTIFIER
    (187) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (200) class_key -> . CLASS
    (201) class_key -> . STRUCT
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RCPAREN         shift and go to state 324
    SEMICOLON       shift and go to state 334
    LCPAREN         reduce using rule 288 (push_scope -> .)
    IF              shift and go to state 335
    SWITCH          shift and go to state 336
    WHILE           shift and go to state 337
    DO              shift and go to state 338
    FOR             shift and go to state 339
    BREAK           shift and go to state 340
    CONTINUE        shift and go to state 341
    RETURN          shift and go to state 342
    GOTO            shift and go to state 343
    TRY             shift and go to state 345
    THROW           shift and go to state 212
    CONST           shift and go to state 16
    ASM             shift and go to state 18
    TEMPLATE        shift and go to state 20
    TYPEDEF         shift and go to state 21
    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38
    THIS            shift and go to state 142
    LPAREN          shift and go to state 146
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    statement_list                 shift and go to state 323
    statement                      shift and go to state 325
    expression_statement           shift and go to state 326
    push_scope                     shift and go to state 327
    selection_statement            shift and go to state 328
    iteration_statement            shift and go to state 329
    jump_statement                 shift and go to state 330
    declaration_statement          shift and go to state 331
    try_block                      shift and go to state 332
    expression                     shift and go to state 333
    declaration                    shift and go to state 344
    assignment_expression          shift and go to state 210
    throw_expression               shift and go to state 211
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    function_decl                  shift and go to state 12
    class_define_specifier         shift and go to state 13
    template_declaration           shift and go to state 14
    typedef_declarator             shift and go to state 15
    conditional_expression         shift and go to state 149
    unary_expression               shift and go to state 150
    type_specifier                 shift and go to state 17
    class_head                     shift and go to state 19
    logical_OR_expression          shift and go to state 112
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    cast_expression                shift and go to state 124
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 24
    logical_AND_expression         shift and go to state 113
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    inclusive_OR_expression        shift and go to state 114
    literal                        shift and go to state 141
    exclusive_OR_expression        shift and go to state 115
    AND_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 272

    (119) argument_declaration_list -> argument_declaration COMMA argument_declaration_list .

    RPAREN          reduce using rule 119 (argument_declaration_list -> argument_declaration COMMA argument_declaration_list .)


state 273

    (14) conditional_expression -> logical_OR_expression QUESMARK expression . COLON conditional_expression
    (45) expression -> expression . COMMA assignment_expression

    COLON           shift and go to state 346
    COMMA           shift and go to state 294


state 274

    (16) logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .
    (18) logical_AND_expression -> logical_AND_expression . ANDOP inclusive_OR_expression

    QUESMARK        reduce using rule 16 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    OROP            reduce using rule 16 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    RSPAREN         reduce using rule 16 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    RPAREN          reduce using rule 16 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    COMMA           reduce using rule 16 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    SEMICOLON       reduce using rule 16 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    RCPAREN         reduce using rule 16 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    COLON           reduce using rule 16 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    RTEMPLATE       reduce using rule 16 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    ANDOP           shift and go to state 191


state 275

    (18) logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .
    (20) inclusive_OR_expression -> inclusive_OR_expression . OROP exclusive_OR_expression

    ANDOP           reduce using rule 18 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    QUESMARK        reduce using rule 18 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    OROP            reduce using rule 18 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    RSPAREN         reduce using rule 18 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    RPAREN          reduce using rule 18 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    COMMA           reduce using rule 18 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    SEMICOLON       reduce using rule 18 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    RCPAREN         reduce using rule 18 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    COLON           reduce using rule 18 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    RTEMPLATE       reduce using rule 18 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)

  ! OROP            [ shift and go to state 192 ]


state 276

    (20) inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .
    (22) exclusive_OR_expression -> exclusive_OR_expression . XOROP AND_expression

    OROP            reduce using rule 20 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    ANDOP           reduce using rule 20 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    QUESMARK        reduce using rule 20 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    RSPAREN         reduce using rule 20 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    RPAREN          reduce using rule 20 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    COMMA           reduce using rule 20 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    SEMICOLON       reduce using rule 20 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    RCPAREN         reduce using rule 20 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    COLON           reduce using rule 20 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    RTEMPLATE       reduce using rule 20 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    XOROP           shift and go to state 193


state 277

    (22) exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .
    (24) AND_expression -> AND_expression . BANDOP equality_expression

    XOROP           reduce using rule 22 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    OROP            reduce using rule 22 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    ANDOP           reduce using rule 22 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    QUESMARK        reduce using rule 22 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    RSPAREN         reduce using rule 22 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    RPAREN          reduce using rule 22 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    COMMA           reduce using rule 22 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    SEMICOLON       reduce using rule 22 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    RCPAREN         reduce using rule 22 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    COLON           reduce using rule 22 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    RTEMPLATE       reduce using rule 22 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    BANDOP          shift and go to state 194


state 278

    (24) AND_expression -> AND_expression BANDOP equality_expression .
    (26) equality_expression -> equality_expression . EQCOMP relational_expression
    (27) equality_expression -> equality_expression . NEQCOMP relational_expression

    BANDOP          reduce using rule 24 (AND_expression -> AND_expression BANDOP equality_expression .)
    XOROP           reduce using rule 24 (AND_expression -> AND_expression BANDOP equality_expression .)
    OROP            reduce using rule 24 (AND_expression -> AND_expression BANDOP equality_expression .)
    ANDOP           reduce using rule 24 (AND_expression -> AND_expression BANDOP equality_expression .)
    QUESMARK        reduce using rule 24 (AND_expression -> AND_expression BANDOP equality_expression .)
    RSPAREN         reduce using rule 24 (AND_expression -> AND_expression BANDOP equality_expression .)
    RPAREN          reduce using rule 24 (AND_expression -> AND_expression BANDOP equality_expression .)
    COMMA           reduce using rule 24 (AND_expression -> AND_expression BANDOP equality_expression .)
    SEMICOLON       reduce using rule 24 (AND_expression -> AND_expression BANDOP equality_expression .)
    RCPAREN         reduce using rule 24 (AND_expression -> AND_expression BANDOP equality_expression .)
    COLON           reduce using rule 24 (AND_expression -> AND_expression BANDOP equality_expression .)
    RTEMPLATE       reduce using rule 24 (AND_expression -> AND_expression BANDOP equality_expression .)
    EQCOMP          shift and go to state 195
    NEQCOMP         shift and go to state 196


state 279

    (26) equality_expression -> equality_expression EQCOMP relational_expression .
    (29) relational_expression -> relational_expression . LTCOMP shift_expression
    (30) relational_expression -> relational_expression . GTCOMP shift_expression
    (31) relational_expression -> relational_expression . LTECOMP shift_expression
    (32) relational_expression -> relational_expression . GTECOMP shift_expression

    EQCOMP          reduce using rule 26 (equality_expression -> equality_expression EQCOMP relational_expression .)
    NEQCOMP         reduce using rule 26 (equality_expression -> equality_expression EQCOMP relational_expression .)
    BANDOP          reduce using rule 26 (equality_expression -> equality_expression EQCOMP relational_expression .)
    XOROP           reduce using rule 26 (equality_expression -> equality_expression EQCOMP relational_expression .)
    OROP            reduce using rule 26 (equality_expression -> equality_expression EQCOMP relational_expression .)
    ANDOP           reduce using rule 26 (equality_expression -> equality_expression EQCOMP relational_expression .)
    QUESMARK        reduce using rule 26 (equality_expression -> equality_expression EQCOMP relational_expression .)
    RSPAREN         reduce using rule 26 (equality_expression -> equality_expression EQCOMP relational_expression .)
    RPAREN          reduce using rule 26 (equality_expression -> equality_expression EQCOMP relational_expression .)
    COMMA           reduce using rule 26 (equality_expression -> equality_expression EQCOMP relational_expression .)
    SEMICOLON       reduce using rule 26 (equality_expression -> equality_expression EQCOMP relational_expression .)
    RCPAREN         reduce using rule 26 (equality_expression -> equality_expression EQCOMP relational_expression .)
    COLON           reduce using rule 26 (equality_expression -> equality_expression EQCOMP relational_expression .)
    RTEMPLATE       reduce using rule 26 (equality_expression -> equality_expression EQCOMP relational_expression .)
    LTCOMP          shift and go to state 197
    GTCOMP          shift and go to state 198
    LTECOMP         shift and go to state 199
    GTECOMP         shift and go to state 200


state 280

    (27) equality_expression -> equality_expression NEQCOMP relational_expression .
    (29) relational_expression -> relational_expression . LTCOMP shift_expression
    (30) relational_expression -> relational_expression . GTCOMP shift_expression
    (31) relational_expression -> relational_expression . LTECOMP shift_expression
    (32) relational_expression -> relational_expression . GTECOMP shift_expression

    EQCOMP          reduce using rule 27 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    NEQCOMP         reduce using rule 27 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    BANDOP          reduce using rule 27 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    XOROP           reduce using rule 27 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    OROP            reduce using rule 27 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    ANDOP           reduce using rule 27 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    QUESMARK        reduce using rule 27 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    RSPAREN         reduce using rule 27 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    RPAREN          reduce using rule 27 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    COMMA           reduce using rule 27 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    SEMICOLON       reduce using rule 27 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    RCPAREN         reduce using rule 27 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    COLON           reduce using rule 27 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    RTEMPLATE       reduce using rule 27 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    LTCOMP          shift and go to state 197
    GTCOMP          shift and go to state 198
    LTECOMP         shift and go to state 199
    GTECOMP         shift and go to state 200


state 281

    (29) relational_expression -> relational_expression LTCOMP shift_expression .
    (34) shift_expression -> shift_expression . LSHIFT additive_expression
    (35) shift_expression -> shift_expression . RSHIFT additive_expression

    LTCOMP          reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    GTCOMP          reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    LTECOMP         reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    GTECOMP         reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    EQCOMP          reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    NEQCOMP         reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    BANDOP          reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    XOROP           reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    OROP            reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    ANDOP           reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    QUESMARK        reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    RSPAREN         reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    RPAREN          reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    COMMA           reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    SEMICOLON       reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    RCPAREN         reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    COLON           reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    RTEMPLATE       reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    LSHIFT          shift and go to state 201
    RSHIFT          shift and go to state 202


state 282

    (30) relational_expression -> relational_expression GTCOMP shift_expression .
    (34) shift_expression -> shift_expression . LSHIFT additive_expression
    (35) shift_expression -> shift_expression . RSHIFT additive_expression

    LTCOMP          reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    GTCOMP          reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    LTECOMP         reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    GTECOMP         reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    EQCOMP          reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    NEQCOMP         reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    BANDOP          reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    XOROP           reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    OROP            reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    ANDOP           reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    QUESMARK        reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    RSPAREN         reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    RPAREN          reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    COMMA           reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    SEMICOLON       reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    RCPAREN         reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    COLON           reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    RTEMPLATE       reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    LSHIFT          shift and go to state 201
    RSHIFT          shift and go to state 202


state 283

    (31) relational_expression -> relational_expression LTECOMP shift_expression .
    (34) shift_expression -> shift_expression . LSHIFT additive_expression
    (35) shift_expression -> shift_expression . RSHIFT additive_expression

    LTCOMP          reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    GTCOMP          reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    LTECOMP         reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    GTECOMP         reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    EQCOMP          reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    NEQCOMP         reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    BANDOP          reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    XOROP           reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    OROP            reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    ANDOP           reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    QUESMARK        reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    RSPAREN         reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    RPAREN          reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    COMMA           reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    SEMICOLON       reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    RCPAREN         reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    COLON           reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    RTEMPLATE       reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    LSHIFT          shift and go to state 201
    RSHIFT          shift and go to state 202


state 284

    (32) relational_expression -> relational_expression GTECOMP shift_expression .
    (34) shift_expression -> shift_expression . LSHIFT additive_expression
    (35) shift_expression -> shift_expression . RSHIFT additive_expression

    LTCOMP          reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    GTCOMP          reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    LTECOMP         reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    GTECOMP         reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    EQCOMP          reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    NEQCOMP         reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    BANDOP          reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    XOROP           reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    OROP            reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    ANDOP           reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    QUESMARK        reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    RSPAREN         reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    RPAREN          reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    COMMA           reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    SEMICOLON       reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    RCPAREN         reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    COLON           reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    RTEMPLATE       reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    LSHIFT          shift and go to state 201
    RSHIFT          shift and go to state 202


state 285

    (34) shift_expression -> shift_expression LSHIFT additive_expression .
    (37) additive_expression -> additive_expression . PLUSOP multiplicative_expression
    (38) additive_expression -> additive_expression . MINUSOP multiplicative_expression

    LSHIFT          reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RSHIFT          reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LTCOMP          reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    GTCOMP          reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LTECOMP         reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    GTECOMP         reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    EQCOMP          reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    NEQCOMP         reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    BANDOP          reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    XOROP           reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    OROP            reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    ANDOP           reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    QUESMARK        reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RSPAREN         reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RPAREN          reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    COMMA           reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    SEMICOLON       reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RCPAREN         reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    COLON           reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RTEMPLATE       reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    PLUSOP          shift and go to state 203
    MINUSOP         shift and go to state 204


state 286

    (35) shift_expression -> shift_expression RSHIFT additive_expression .
    (37) additive_expression -> additive_expression . PLUSOP multiplicative_expression
    (38) additive_expression -> additive_expression . MINUSOP multiplicative_expression

    LSHIFT          reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RSHIFT          reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LTCOMP          reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    GTCOMP          reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LTECOMP         reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    GTECOMP         reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    EQCOMP          reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    NEQCOMP         reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    BANDOP          reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    XOROP           reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    OROP            reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    ANDOP           reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    QUESMARK        reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RSPAREN         reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RPAREN          reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    COMMA           reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    SEMICOLON       reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RCPAREN         reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    COLON           reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RTEMPLATE       reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    PLUSOP          shift and go to state 203
    MINUSOP         shift and go to state 204


state 287

    (37) additive_expression -> additive_expression PLUSOP multiplicative_expression .
    (40) multiplicative_expression -> multiplicative_expression . MULTOP cast_expression
    (41) multiplicative_expression -> multiplicative_expression . DIVOP cast_expression
    (42) multiplicative_expression -> multiplicative_expression . MODOP cast_expression

    PLUSOP          reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    MINUSOP         reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    LSHIFT          reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    RSHIFT          reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    LTCOMP          reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    GTCOMP          reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    LTECOMP         reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    GTECOMP         reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    EQCOMP          reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    NEQCOMP         reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    BANDOP          reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    XOROP           reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    OROP            reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    ANDOP           reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    QUESMARK        reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    RSPAREN         reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    RPAREN          reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    COMMA           reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    SEMICOLON       reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    RCPAREN         reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    COLON           reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    RTEMPLATE       reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    MULTOP          shift and go to state 205
    DIVOP           shift and go to state 206
    MODOP           shift and go to state 207


state 288

    (38) additive_expression -> additive_expression MINUSOP multiplicative_expression .
    (40) multiplicative_expression -> multiplicative_expression . MULTOP cast_expression
    (41) multiplicative_expression -> multiplicative_expression . DIVOP cast_expression
    (42) multiplicative_expression -> multiplicative_expression . MODOP cast_expression

    PLUSOP          reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    MINUSOP         reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    LSHIFT          reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    RSHIFT          reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    LTCOMP          reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    GTCOMP          reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    LTECOMP         reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    GTECOMP         reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    EQCOMP          reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    NEQCOMP         reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    BANDOP          reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    XOROP           reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    OROP            reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    ANDOP           reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    QUESMARK        reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    RSPAREN         reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    RPAREN          reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    COMMA           reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    SEMICOLON       reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    RCPAREN         reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    COLON           reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    RTEMPLATE       reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    MULTOP          shift and go to state 205
    DIVOP           shift and go to state 206
    MODOP           shift and go to state 207


state 289

    (40) multiplicative_expression -> multiplicative_expression MULTOP cast_expression .

    MULTOP          reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP cast_expression .)
    DIVOP           reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP cast_expression .)
    MODOP           reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP cast_expression .)
    PLUSOP          reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP cast_expression .)
    MINUSOP         reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP cast_expression .)
    LSHIFT          reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP cast_expression .)
    RSHIFT          reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP cast_expression .)
    LTCOMP          reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP cast_expression .)
    GTCOMP          reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP cast_expression .)
    LTECOMP         reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP cast_expression .)
    GTECOMP         reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP cast_expression .)
    EQCOMP          reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP cast_expression .)
    NEQCOMP         reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP cast_expression .)
    BANDOP          reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP cast_expression .)
    XOROP           reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP cast_expression .)
    OROP            reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP cast_expression .)
    ANDOP           reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP cast_expression .)
    QUESMARK        reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP cast_expression .)
    RSPAREN         reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP cast_expression .)
    RPAREN          reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP cast_expression .)
    COMMA           reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP cast_expression .)
    SEMICOLON       reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP cast_expression .)
    RCPAREN         reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP cast_expression .)
    COLON           reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP cast_expression .)
    RTEMPLATE       reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP cast_expression .)


state 290

    (41) multiplicative_expression -> multiplicative_expression DIVOP cast_expression .

    MULTOP          reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP cast_expression .)
    DIVOP           reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP cast_expression .)
    MODOP           reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP cast_expression .)
    PLUSOP          reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP cast_expression .)
    MINUSOP         reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP cast_expression .)
    LSHIFT          reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP cast_expression .)
    RSHIFT          reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP cast_expression .)
    LTCOMP          reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP cast_expression .)
    GTCOMP          reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP cast_expression .)
    LTECOMP         reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP cast_expression .)
    GTECOMP         reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP cast_expression .)
    EQCOMP          reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP cast_expression .)
    NEQCOMP         reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP cast_expression .)
    BANDOP          reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP cast_expression .)
    XOROP           reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP cast_expression .)
    OROP            reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP cast_expression .)
    ANDOP           reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP cast_expression .)
    QUESMARK        reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP cast_expression .)
    RSPAREN         reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP cast_expression .)
    RPAREN          reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP cast_expression .)
    COMMA           reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP cast_expression .)
    SEMICOLON       reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP cast_expression .)
    RCPAREN         reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP cast_expression .)
    COLON           reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP cast_expression .)
    RTEMPLATE       reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP cast_expression .)


state 291

    (42) multiplicative_expression -> multiplicative_expression MODOP cast_expression .

    MULTOP          reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP cast_expression .)
    DIVOP           reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP cast_expression .)
    MODOP           reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP cast_expression .)
    PLUSOP          reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP cast_expression .)
    MINUSOP         reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP cast_expression .)
    LSHIFT          reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP cast_expression .)
    RSHIFT          reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP cast_expression .)
    LTCOMP          reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP cast_expression .)
    GTCOMP          reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP cast_expression .)
    LTECOMP         reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP cast_expression .)
    GTECOMP         reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP cast_expression .)
    EQCOMP          reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP cast_expression .)
    NEQCOMP         reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP cast_expression .)
    BANDOP          reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP cast_expression .)
    XOROP           reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP cast_expression .)
    OROP            reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP cast_expression .)
    ANDOP           reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP cast_expression .)
    QUESMARK        reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP cast_expression .)
    RSPAREN         reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP cast_expression .)
    RPAREN          reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP cast_expression .)
    COMMA           reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP cast_expression .)
    SEMICOLON       reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP cast_expression .)
    RCPAREN         reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP cast_expression .)
    COLON           reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP cast_expression .)
    RTEMPLATE       reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP cast_expression .)


state 292

    (105) cast_expression -> LPAREN type_name RPAREN . cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR

    LPAREN          shift and go to state 126
    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    THIS            shift and go to state 142
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    cast_expression                shift and go to state 347
    unary_expression               shift and go to state 125
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    literal                        shift and go to state 141

state 293

    (100) primary_expression -> LPAREN expression RPAREN .

    LSPAREN         reduce using rule 100 (primary_expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 100 (primary_expression -> LPAREN expression RPAREN .)
    DOT             reduce using rule 100 (primary_expression -> LPAREN expression RPAREN .)
    ARROW           reduce using rule 100 (primary_expression -> LPAREN expression RPAREN .)
    DPLUSOP         reduce using rule 100 (primary_expression -> LPAREN expression RPAREN .)
    DMINUSOP        reduce using rule 100 (primary_expression -> LPAREN expression RPAREN .)
    LTEMPLATE       reduce using rule 100 (primary_expression -> LPAREN expression RPAREN .)
    MULTOP          reduce using rule 100 (primary_expression -> LPAREN expression RPAREN .)
    DIVOP           reduce using rule 100 (primary_expression -> LPAREN expression RPAREN .)
    MODOP           reduce using rule 100 (primary_expression -> LPAREN expression RPAREN .)
    PLUSOP          reduce using rule 100 (primary_expression -> LPAREN expression RPAREN .)
    MINUSOP         reduce using rule 100 (primary_expression -> LPAREN expression RPAREN .)
    LSHIFT          reduce using rule 100 (primary_expression -> LPAREN expression RPAREN .)
    RSHIFT          reduce using rule 100 (primary_expression -> LPAREN expression RPAREN .)
    LTCOMP          reduce using rule 100 (primary_expression -> LPAREN expression RPAREN .)
    GTCOMP          reduce using rule 100 (primary_expression -> LPAREN expression RPAREN .)
    LTECOMP         reduce using rule 100 (primary_expression -> LPAREN expression RPAREN .)
    GTECOMP         reduce using rule 100 (primary_expression -> LPAREN expression RPAREN .)
    EQCOMP          reduce using rule 100 (primary_expression -> LPAREN expression RPAREN .)
    NEQCOMP         reduce using rule 100 (primary_expression -> LPAREN expression RPAREN .)
    BANDOP          reduce using rule 100 (primary_expression -> LPAREN expression RPAREN .)
    XOROP           reduce using rule 100 (primary_expression -> LPAREN expression RPAREN .)
    OROP            reduce using rule 100 (primary_expression -> LPAREN expression RPAREN .)
    ANDOP           reduce using rule 100 (primary_expression -> LPAREN expression RPAREN .)
    QUESMARK        reduce using rule 100 (primary_expression -> LPAREN expression RPAREN .)
    RSPAREN         reduce using rule 100 (primary_expression -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 100 (primary_expression -> LPAREN expression RPAREN .)
    MULTEQOP        reduce using rule 100 (primary_expression -> LPAREN expression RPAREN .)
    DIVEQOP         reduce using rule 100 (primary_expression -> LPAREN expression RPAREN .)
    MODEQOP         reduce using rule 100 (primary_expression -> LPAREN expression RPAREN .)
    PLUSEQOP        reduce using rule 100 (primary_expression -> LPAREN expression RPAREN .)
    MINUSEQOP       reduce using rule 100 (primary_expression -> LPAREN expression RPAREN .)
    LSHIFTEQOP      reduce using rule 100 (primary_expression -> LPAREN expression RPAREN .)
    RSHIFTEQOP      reduce using rule 100 (primary_expression -> LPAREN expression RPAREN .)
    BANDEQOP        reduce using rule 100 (primary_expression -> LPAREN expression RPAREN .)
    BOREQOP         reduce using rule 100 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 100 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 100 (primary_expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 100 (primary_expression -> LPAREN expression RPAREN .)
    RCPAREN         reduce using rule 100 (primary_expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 100 (primary_expression -> LPAREN expression RPAREN .)
    RTEMPLATE       reduce using rule 100 (primary_expression -> LPAREN expression RPAREN .)


state 294

    (45) expression -> expression COMMA . assignment_expression
    (48) assignment_expression -> . conditional_expression
    (49) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    THIS            shift and go to state 142
    LPAREN          shift and go to state 146
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    assignment_expression          shift and go to state 348
    conditional_expression         shift and go to state 149
    unary_expression               shift and go to state 150
    logical_OR_expression          shift and go to state 112
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    cast_expression                shift and go to state 124
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    logical_AND_expression         shift and go to state 113
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    inclusive_OR_expression        shift and go to state 114
    literal                        shift and go to state 141
    exclusive_OR_expression        shift and go to state 115
    AND_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 295

    (46) throw_expression -> THROW expression .
    (45) expression -> expression . COMMA assignment_expression

  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 46 (throw_expression -> THROW expression .)
    COLON           reduce using rule 46 (throw_expression -> THROW expression .)
    RSPAREN         reduce using rule 46 (throw_expression -> THROW expression .)
    RTEMPLATE       reduce using rule 46 (throw_expression -> THROW expression .)
    SEMICOLON       reduce using rule 46 (throw_expression -> THROW expression .)
    COMMA           shift and go to state 294

  ! COMMA           [ reduce using rule 46 (throw_expression -> THROW expression .) ]


state 296

    (89) postfix_expression -> postfix_expression LSPAREN expression . RSPAREN
    (45) expression -> expression . COMMA assignment_expression

    RSPAREN         shift and go to state 349
    COMMA           shift and go to state 294


state 297

    (90) postfix_expression -> postfix_expression LPAREN expression_list . RPAREN
    (287) expression_list -> expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 350
    COMMA           shift and go to state 232


state 298

    (92) postfix_expression -> postfix_expression LPAREN RPAREN .

    LSPAREN         reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LPAREN          reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DOT             reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ARROW           reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DPLUSOP         reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DMINUSOP        reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LTEMPLATE       reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MULTOP          reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIVOP           reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MODOP           reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUSOP          reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUSOP         reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LSHIFT          reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RSHIFT          reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LTCOMP          reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GTCOMP          reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LTECOMP         reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GTECOMP         reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQCOMP          reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    NEQCOMP         reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    BANDOP          reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    XOROP           reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    OROP            reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ANDOP           reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    QUESMARK        reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RSPAREN         reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQUAL           reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MULTEQOP        reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIVEQOP         reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MODEQOP         reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUSEQOP        reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUSEQOP       reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LSHIFTEQOP      reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RSHIFTEQOP      reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    BANDEQOP        reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    BOREQOP         reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RPAREN          reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COMMA           reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    SEMICOLON       reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RCPAREN         reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COLON           reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RTEMPLATE       reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)


state 299

    (91) postfix_expression -> postfix_expression template_class_name LPAREN . expression_list RPAREN
    (286) expression_list -> . assignment_expression
    (287) expression_list -> . expression_list COMMA assignment_expression
    (48) assignment_expression -> . conditional_expression
    (49) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    THIS            shift and go to state 142
    LPAREN          shift and go to state 146
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    postfix_expression             shift and go to state 127
    expression_list                shift and go to state 351
    assignment_expression          shift and go to state 148
    conditional_expression         shift and go to state 149
    unary_expression               shift and go to state 150
    logical_OR_expression          shift and go to state 112
    unary1_operator                shift and go to state 130
    cast_expression                shift and go to state 124
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    logical_AND_expression         shift and go to state 113
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    inclusive_OR_expression        shift and go to state 114
    literal                        shift and go to state 141
    exclusive_OR_expression        shift and go to state 115
    AND_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 300

    (93) postfix_expression -> postfix_expression DOT name .

    LSPAREN         reduce using rule 93 (postfix_expression -> postfix_expression DOT name .)
    LPAREN          reduce using rule 93 (postfix_expression -> postfix_expression DOT name .)
    DOT             reduce using rule 93 (postfix_expression -> postfix_expression DOT name .)
    ARROW           reduce using rule 93 (postfix_expression -> postfix_expression DOT name .)
    DPLUSOP         reduce using rule 93 (postfix_expression -> postfix_expression DOT name .)
    DMINUSOP        reduce using rule 93 (postfix_expression -> postfix_expression DOT name .)
    LTEMPLATE       reduce using rule 93 (postfix_expression -> postfix_expression DOT name .)
    MULTOP          reduce using rule 93 (postfix_expression -> postfix_expression DOT name .)
    DIVOP           reduce using rule 93 (postfix_expression -> postfix_expression DOT name .)
    MODOP           reduce using rule 93 (postfix_expression -> postfix_expression DOT name .)
    PLUSOP          reduce using rule 93 (postfix_expression -> postfix_expression DOT name .)
    MINUSOP         reduce using rule 93 (postfix_expression -> postfix_expression DOT name .)
    LSHIFT          reduce using rule 93 (postfix_expression -> postfix_expression DOT name .)
    RSHIFT          reduce using rule 93 (postfix_expression -> postfix_expression DOT name .)
    LTCOMP          reduce using rule 93 (postfix_expression -> postfix_expression DOT name .)
    GTCOMP          reduce using rule 93 (postfix_expression -> postfix_expression DOT name .)
    LTECOMP         reduce using rule 93 (postfix_expression -> postfix_expression DOT name .)
    GTECOMP         reduce using rule 93 (postfix_expression -> postfix_expression DOT name .)
    EQCOMP          reduce using rule 93 (postfix_expression -> postfix_expression DOT name .)
    NEQCOMP         reduce using rule 93 (postfix_expression -> postfix_expression DOT name .)
    BANDOP          reduce using rule 93 (postfix_expression -> postfix_expression DOT name .)
    XOROP           reduce using rule 93 (postfix_expression -> postfix_expression DOT name .)
    OROP            reduce using rule 93 (postfix_expression -> postfix_expression DOT name .)
    ANDOP           reduce using rule 93 (postfix_expression -> postfix_expression DOT name .)
    QUESMARK        reduce using rule 93 (postfix_expression -> postfix_expression DOT name .)
    RSPAREN         reduce using rule 93 (postfix_expression -> postfix_expression DOT name .)
    EQUAL           reduce using rule 93 (postfix_expression -> postfix_expression DOT name .)
    MULTEQOP        reduce using rule 93 (postfix_expression -> postfix_expression DOT name .)
    DIVEQOP         reduce using rule 93 (postfix_expression -> postfix_expression DOT name .)
    MODEQOP         reduce using rule 93 (postfix_expression -> postfix_expression DOT name .)
    PLUSEQOP        reduce using rule 93 (postfix_expression -> postfix_expression DOT name .)
    MINUSEQOP       reduce using rule 93 (postfix_expression -> postfix_expression DOT name .)
    LSHIFTEQOP      reduce using rule 93 (postfix_expression -> postfix_expression DOT name .)
    RSHIFTEQOP      reduce using rule 93 (postfix_expression -> postfix_expression DOT name .)
    BANDEQOP        reduce using rule 93 (postfix_expression -> postfix_expression DOT name .)
    BOREQOP         reduce using rule 93 (postfix_expression -> postfix_expression DOT name .)
    RPAREN          reduce using rule 93 (postfix_expression -> postfix_expression DOT name .)
    COMMA           reduce using rule 93 (postfix_expression -> postfix_expression DOT name .)
    SEMICOLON       reduce using rule 93 (postfix_expression -> postfix_expression DOT name .)
    RCPAREN         reduce using rule 93 (postfix_expression -> postfix_expression DOT name .)
    COLON           reduce using rule 93 (postfix_expression -> postfix_expression DOT name .)
    RTEMPLATE       reduce using rule 93 (postfix_expression -> postfix_expression DOT name .)


state 301

    (94) postfix_expression -> postfix_expression ARROW name .

    LSPAREN         reduce using rule 94 (postfix_expression -> postfix_expression ARROW name .)
    LPAREN          reduce using rule 94 (postfix_expression -> postfix_expression ARROW name .)
    DOT             reduce using rule 94 (postfix_expression -> postfix_expression ARROW name .)
    ARROW           reduce using rule 94 (postfix_expression -> postfix_expression ARROW name .)
    DPLUSOP         reduce using rule 94 (postfix_expression -> postfix_expression ARROW name .)
    DMINUSOP        reduce using rule 94 (postfix_expression -> postfix_expression ARROW name .)
    LTEMPLATE       reduce using rule 94 (postfix_expression -> postfix_expression ARROW name .)
    MULTOP          reduce using rule 94 (postfix_expression -> postfix_expression ARROW name .)
    DIVOP           reduce using rule 94 (postfix_expression -> postfix_expression ARROW name .)
    MODOP           reduce using rule 94 (postfix_expression -> postfix_expression ARROW name .)
    PLUSOP          reduce using rule 94 (postfix_expression -> postfix_expression ARROW name .)
    MINUSOP         reduce using rule 94 (postfix_expression -> postfix_expression ARROW name .)
    LSHIFT          reduce using rule 94 (postfix_expression -> postfix_expression ARROW name .)
    RSHIFT          reduce using rule 94 (postfix_expression -> postfix_expression ARROW name .)
    LTCOMP          reduce using rule 94 (postfix_expression -> postfix_expression ARROW name .)
    GTCOMP          reduce using rule 94 (postfix_expression -> postfix_expression ARROW name .)
    LTECOMP         reduce using rule 94 (postfix_expression -> postfix_expression ARROW name .)
    GTECOMP         reduce using rule 94 (postfix_expression -> postfix_expression ARROW name .)
    EQCOMP          reduce using rule 94 (postfix_expression -> postfix_expression ARROW name .)
    NEQCOMP         reduce using rule 94 (postfix_expression -> postfix_expression ARROW name .)
    BANDOP          reduce using rule 94 (postfix_expression -> postfix_expression ARROW name .)
    XOROP           reduce using rule 94 (postfix_expression -> postfix_expression ARROW name .)
    OROP            reduce using rule 94 (postfix_expression -> postfix_expression ARROW name .)
    ANDOP           reduce using rule 94 (postfix_expression -> postfix_expression ARROW name .)
    QUESMARK        reduce using rule 94 (postfix_expression -> postfix_expression ARROW name .)
    RSPAREN         reduce using rule 94 (postfix_expression -> postfix_expression ARROW name .)
    EQUAL           reduce using rule 94 (postfix_expression -> postfix_expression ARROW name .)
    MULTEQOP        reduce using rule 94 (postfix_expression -> postfix_expression ARROW name .)
    DIVEQOP         reduce using rule 94 (postfix_expression -> postfix_expression ARROW name .)
    MODEQOP         reduce using rule 94 (postfix_expression -> postfix_expression ARROW name .)
    PLUSEQOP        reduce using rule 94 (postfix_expression -> postfix_expression ARROW name .)
    MINUSEQOP       reduce using rule 94 (postfix_expression -> postfix_expression ARROW name .)
    LSHIFTEQOP      reduce using rule 94 (postfix_expression -> postfix_expression ARROW name .)
    RSHIFTEQOP      reduce using rule 94 (postfix_expression -> postfix_expression ARROW name .)
    BANDEQOP        reduce using rule 94 (postfix_expression -> postfix_expression ARROW name .)
    BOREQOP         reduce using rule 94 (postfix_expression -> postfix_expression ARROW name .)
    RPAREN          reduce using rule 94 (postfix_expression -> postfix_expression ARROW name .)
    COMMA           reduce using rule 94 (postfix_expression -> postfix_expression ARROW name .)
    SEMICOLON       reduce using rule 94 (postfix_expression -> postfix_expression ARROW name .)
    RCPAREN         reduce using rule 94 (postfix_expression -> postfix_expression ARROW name .)
    COLON           reduce using rule 94 (postfix_expression -> postfix_expression ARROW name .)
    RTEMPLATE       reduce using rule 94 (postfix_expression -> postfix_expression ARROW name .)


state 302

    (66) unary_expression -> SIZEOF LPAREN type_name . RPAREN

    RPAREN          shift and go to state 352


state 303

    (70) allocation_expression -> NEW new_type_name new_initializer .

    MULTOP          reduce using rule 70 (allocation_expression -> NEW new_type_name new_initializer .)
    DIVOP           reduce using rule 70 (allocation_expression -> NEW new_type_name new_initializer .)
    MODOP           reduce using rule 70 (allocation_expression -> NEW new_type_name new_initializer .)
    PLUSOP          reduce using rule 70 (allocation_expression -> NEW new_type_name new_initializer .)
    MINUSOP         reduce using rule 70 (allocation_expression -> NEW new_type_name new_initializer .)
    LSHIFT          reduce using rule 70 (allocation_expression -> NEW new_type_name new_initializer .)
    RSHIFT          reduce using rule 70 (allocation_expression -> NEW new_type_name new_initializer .)
    LTCOMP          reduce using rule 70 (allocation_expression -> NEW new_type_name new_initializer .)
    GTCOMP          reduce using rule 70 (allocation_expression -> NEW new_type_name new_initializer .)
    LTECOMP         reduce using rule 70 (allocation_expression -> NEW new_type_name new_initializer .)
    GTECOMP         reduce using rule 70 (allocation_expression -> NEW new_type_name new_initializer .)
    EQCOMP          reduce using rule 70 (allocation_expression -> NEW new_type_name new_initializer .)
    NEQCOMP         reduce using rule 70 (allocation_expression -> NEW new_type_name new_initializer .)
    BANDOP          reduce using rule 70 (allocation_expression -> NEW new_type_name new_initializer .)
    XOROP           reduce using rule 70 (allocation_expression -> NEW new_type_name new_initializer .)
    OROP            reduce using rule 70 (allocation_expression -> NEW new_type_name new_initializer .)
    ANDOP           reduce using rule 70 (allocation_expression -> NEW new_type_name new_initializer .)
    QUESMARK        reduce using rule 70 (allocation_expression -> NEW new_type_name new_initializer .)
    RSPAREN         reduce using rule 70 (allocation_expression -> NEW new_type_name new_initializer .)
    EQUAL           reduce using rule 70 (allocation_expression -> NEW new_type_name new_initializer .)
    MULTEQOP        reduce using rule 70 (allocation_expression -> NEW new_type_name new_initializer .)
    DIVEQOP         reduce using rule 70 (allocation_expression -> NEW new_type_name new_initializer .)
    MODEQOP         reduce using rule 70 (allocation_expression -> NEW new_type_name new_initializer .)
    PLUSEQOP        reduce using rule 70 (allocation_expression -> NEW new_type_name new_initializer .)
    MINUSEQOP       reduce using rule 70 (allocation_expression -> NEW new_type_name new_initializer .)
    LSHIFTEQOP      reduce using rule 70 (allocation_expression -> NEW new_type_name new_initializer .)
    RSHIFTEQOP      reduce using rule 70 (allocation_expression -> NEW new_type_name new_initializer .)
    BANDEQOP        reduce using rule 70 (allocation_expression -> NEW new_type_name new_initializer .)
    BOREQOP         reduce using rule 70 (allocation_expression -> NEW new_type_name new_initializer .)
    RPAREN          reduce using rule 70 (allocation_expression -> NEW new_type_name new_initializer .)
    COMMA           reduce using rule 70 (allocation_expression -> NEW new_type_name new_initializer .)
    SEMICOLON       reduce using rule 70 (allocation_expression -> NEW new_type_name new_initializer .)
    RCPAREN         reduce using rule 70 (allocation_expression -> NEW new_type_name new_initializer .)
    COLON           reduce using rule 70 (allocation_expression -> NEW new_type_name new_initializer .)
    RTEMPLATE       reduce using rule 70 (allocation_expression -> NEW new_type_name new_initializer .)


state 304

    (80) new_initializer -> LPAREN . initializer_list RPAREN
    (81) new_initializer -> LPAREN . RPAREN
    (281) initializer_list -> . assignment_expression
    (282) initializer_list -> . initializer_list COMMA assignment_expression
    (283) initializer_list -> . LCPAREN initializer_list RCPAREN
    (284) initializer_list -> . LCPAREN initializer_list COMMA RCPAREN
    (48) assignment_expression -> . conditional_expression
    (49) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 354
    LCPAREN         shift and go to state 244
    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    THIS            shift and go to state 142
    LPAREN          shift and go to state 146
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    initializer_list               shift and go to state 353
    assignment_expression          shift and go to state 246
    conditional_expression         shift and go to state 149
    unary_expression               shift and go to state 150
    logical_OR_expression          shift and go to state 112
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    cast_expression                shift and go to state 124
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    logical_AND_expression         shift and go to state 113
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    inclusive_OR_expression        shift and go to state 114
    literal                        shift and go to state 141
    exclusive_OR_expression        shift and go to state 115
    AND_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 305

    (72) allocation_expression -> NEW LPAREN type_name . RPAREN new_initializer
    (73) allocation_expression -> NEW LPAREN type_name . RPAREN

    RPAREN          shift and go to state 355


state 306

    (74) new_type_name -> type_specifier_ new_declarator .
    (76) new_declarator -> new_declarator . MULTOP
    (78) new_declarator -> new_declarator . LSPAREN expression RSPAREN

  ! shift/reduce conflict for MULTOP resolved as shift
    LPAREN          reduce using rule 74 (new_type_name -> type_specifier_ new_declarator .)
    DIVOP           reduce using rule 74 (new_type_name -> type_specifier_ new_declarator .)
    MODOP           reduce using rule 74 (new_type_name -> type_specifier_ new_declarator .)
    PLUSOP          reduce using rule 74 (new_type_name -> type_specifier_ new_declarator .)
    MINUSOP         reduce using rule 74 (new_type_name -> type_specifier_ new_declarator .)
    LSHIFT          reduce using rule 74 (new_type_name -> type_specifier_ new_declarator .)
    RSHIFT          reduce using rule 74 (new_type_name -> type_specifier_ new_declarator .)
    LTCOMP          reduce using rule 74 (new_type_name -> type_specifier_ new_declarator .)
    GTCOMP          reduce using rule 74 (new_type_name -> type_specifier_ new_declarator .)
    LTECOMP         reduce using rule 74 (new_type_name -> type_specifier_ new_declarator .)
    GTECOMP         reduce using rule 74 (new_type_name -> type_specifier_ new_declarator .)
    EQCOMP          reduce using rule 74 (new_type_name -> type_specifier_ new_declarator .)
    NEQCOMP         reduce using rule 74 (new_type_name -> type_specifier_ new_declarator .)
    BANDOP          reduce using rule 74 (new_type_name -> type_specifier_ new_declarator .)
    XOROP           reduce using rule 74 (new_type_name -> type_specifier_ new_declarator .)
    OROP            reduce using rule 74 (new_type_name -> type_specifier_ new_declarator .)
    ANDOP           reduce using rule 74 (new_type_name -> type_specifier_ new_declarator .)
    QUESMARK        reduce using rule 74 (new_type_name -> type_specifier_ new_declarator .)
    RSPAREN         reduce using rule 74 (new_type_name -> type_specifier_ new_declarator .)
    EQUAL           reduce using rule 74 (new_type_name -> type_specifier_ new_declarator .)
    MULTEQOP        reduce using rule 74 (new_type_name -> type_specifier_ new_declarator .)
    DIVEQOP         reduce using rule 74 (new_type_name -> type_specifier_ new_declarator .)
    MODEQOP         reduce using rule 74 (new_type_name -> type_specifier_ new_declarator .)
    PLUSEQOP        reduce using rule 74 (new_type_name -> type_specifier_ new_declarator .)
    MINUSEQOP       reduce using rule 74 (new_type_name -> type_specifier_ new_declarator .)
    LSHIFTEQOP      reduce using rule 74 (new_type_name -> type_specifier_ new_declarator .)
    RSHIFTEQOP      reduce using rule 74 (new_type_name -> type_specifier_ new_declarator .)
    BANDEQOP        reduce using rule 74 (new_type_name -> type_specifier_ new_declarator .)
    BOREQOP         reduce using rule 74 (new_type_name -> type_specifier_ new_declarator .)
    RPAREN          reduce using rule 74 (new_type_name -> type_specifier_ new_declarator .)
    COMMA           reduce using rule 74 (new_type_name -> type_specifier_ new_declarator .)
    SEMICOLON       reduce using rule 74 (new_type_name -> type_specifier_ new_declarator .)
    RCPAREN         reduce using rule 74 (new_type_name -> type_specifier_ new_declarator .)
    COLON           reduce using rule 74 (new_type_name -> type_specifier_ new_declarator .)
    RTEMPLATE       reduce using rule 74 (new_type_name -> type_specifier_ new_declarator .)
    MULTOP          shift and go to state 356
    LSPAREN         shift and go to state 357

  ! MULTOP          [ reduce using rule 74 (new_type_name -> type_specifier_ new_declarator .) ]


state 307

    (77) new_declarator -> MULTOP .

    MULTOP          reduce using rule 77 (new_declarator -> MULTOP .)
    LSPAREN         reduce using rule 77 (new_declarator -> MULTOP .)
    LPAREN          reduce using rule 77 (new_declarator -> MULTOP .)
    DIVOP           reduce using rule 77 (new_declarator -> MULTOP .)
    MODOP           reduce using rule 77 (new_declarator -> MULTOP .)
    PLUSOP          reduce using rule 77 (new_declarator -> MULTOP .)
    MINUSOP         reduce using rule 77 (new_declarator -> MULTOP .)
    LSHIFT          reduce using rule 77 (new_declarator -> MULTOP .)
    RSHIFT          reduce using rule 77 (new_declarator -> MULTOP .)
    LTCOMP          reduce using rule 77 (new_declarator -> MULTOP .)
    GTCOMP          reduce using rule 77 (new_declarator -> MULTOP .)
    LTECOMP         reduce using rule 77 (new_declarator -> MULTOP .)
    GTECOMP         reduce using rule 77 (new_declarator -> MULTOP .)
    EQCOMP          reduce using rule 77 (new_declarator -> MULTOP .)
    NEQCOMP         reduce using rule 77 (new_declarator -> MULTOP .)
    BANDOP          reduce using rule 77 (new_declarator -> MULTOP .)
    XOROP           reduce using rule 77 (new_declarator -> MULTOP .)
    OROP            reduce using rule 77 (new_declarator -> MULTOP .)
    ANDOP           reduce using rule 77 (new_declarator -> MULTOP .)
    QUESMARK        reduce using rule 77 (new_declarator -> MULTOP .)
    RSPAREN         reduce using rule 77 (new_declarator -> MULTOP .)
    EQUAL           reduce using rule 77 (new_declarator -> MULTOP .)
    MULTEQOP        reduce using rule 77 (new_declarator -> MULTOP .)
    DIVEQOP         reduce using rule 77 (new_declarator -> MULTOP .)
    MODEQOP         reduce using rule 77 (new_declarator -> MULTOP .)
    PLUSEQOP        reduce using rule 77 (new_declarator -> MULTOP .)
    MINUSEQOP       reduce using rule 77 (new_declarator -> MULTOP .)
    LSHIFTEQOP      reduce using rule 77 (new_declarator -> MULTOP .)
    RSHIFTEQOP      reduce using rule 77 (new_declarator -> MULTOP .)
    BANDEQOP        reduce using rule 77 (new_declarator -> MULTOP .)
    BOREQOP         reduce using rule 77 (new_declarator -> MULTOP .)
    RPAREN          reduce using rule 77 (new_declarator -> MULTOP .)
    COMMA           reduce using rule 77 (new_declarator -> MULTOP .)
    SEMICOLON       reduce using rule 77 (new_declarator -> MULTOP .)
    RCPAREN         reduce using rule 77 (new_declarator -> MULTOP .)
    COLON           reduce using rule 77 (new_declarator -> MULTOP .)
    RTEMPLATE       reduce using rule 77 (new_declarator -> MULTOP .)


state 308

    (79) new_declarator -> LSPAREN . expression RSPAREN
    (43) expression -> . assignment_expression
    (44) expression -> . throw_expression
    (45) expression -> . expression COMMA assignment_expression
    (48) assignment_expression -> . conditional_expression
    (49) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (46) throw_expression -> . THROW expression
    (47) throw_expression -> . THROW
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression

    THROW           shift and go to state 212
    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    THIS            shift and go to state 142
    LPAREN          shift and go to state 146
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    expression                     shift and go to state 358
    assignment_expression          shift and go to state 210
    throw_expression               shift and go to state 211
    conditional_expression         shift and go to state 149
    unary_expression               shift and go to state 150
    logical_OR_expression          shift and go to state 112
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    cast_expression                shift and go to state 124
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    logical_AND_expression         shift and go to state 113
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    inclusive_OR_expression        shift and go to state 114
    literal                        shift and go to state 141
    exclusive_OR_expression        shift and go to state 115
    AND_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 309

    (287) expression_list -> expression_list COMMA assignment_expression .

    RPAREN          reduce using rule 287 (expression_list -> expression_list COMMA assignment_expression .)
    COMMA           reduce using rule 287 (expression_list -> expression_list COMMA assignment_expression .)


state 310

    (49) assignment_expression -> unary_expression assignment_operator assignment_expression .

    RPAREN          reduce using rule 49 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COMMA           reduce using rule 49 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    SEMICOLON       reduce using rule 49 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RCPAREN         reduce using rule 49 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COLON           reduce using rule 49 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RSPAREN         reduce using rule 49 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RTEMPLATE       reduce using rule 49 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 311

    (283) initializer_list -> LCPAREN initializer_list . RCPAREN
    (284) initializer_list -> LCPAREN initializer_list . COMMA RCPAREN
    (282) initializer_list -> initializer_list . COMMA assignment_expression

    RCPAREN         shift and go to state 359
    COMMA           shift and go to state 360


state 312

    (278) initializer -> EQUAL LCPAREN initializer_list RCPAREN .

    SEMICOLON       reduce using rule 278 (initializer -> EQUAL LCPAREN initializer_list RCPAREN .)
    COMMA           reduce using rule 278 (initializer -> EQUAL LCPAREN initializer_list RCPAREN .)


state 313

    (279) initializer -> EQUAL LCPAREN initializer_list COMMA . RCPAREN
    (282) initializer_list -> initializer_list COMMA . assignment_expression
    (48) assignment_expression -> . conditional_expression
    (49) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RCPAREN         shift and go to state 361
    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    THIS            shift and go to state 142
    LPAREN          shift and go to state 146
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    assignment_expression          shift and go to state 362
    conditional_expression         shift and go to state 149
    unary_expression               shift and go to state 150
    logical_OR_expression          shift and go to state 112
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    cast_expression                shift and go to state 124
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    logical_AND_expression         shift and go to state 113
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    inclusive_OR_expression        shift and go to state 114
    literal                        shift and go to state 141
    exclusive_OR_expression        shift and go to state 115
    AND_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 314

    (224) function_definition -> type_specifier_ declarator func_push_scope arg_list . RPAREN fct_body pop_scope

    RPAREN          shift and go to state 363


state 315

    (121) argument_declaration -> type_specifier_ declarator EQUAL expression .
    (45) expression -> expression . COMMA assignment_expression

  ! shift/reduce conflict for COMMA resolved as shift
    RTEMPLATE       reduce using rule 121 (argument_declaration -> type_specifier_ declarator EQUAL expression .)
    RPAREN          reduce using rule 121 (argument_declaration -> type_specifier_ declarator EQUAL expression .)
    COMMA           shift and go to state 294

  ! COMMA           [ reduce using rule 121 (argument_declaration -> type_specifier_ declarator EQUAL expression .) ]


state 316

    (109) abstract_declarator -> abstract_declarator LSPAREN constant_expression RSPAREN .

    IDENTIFIER      reduce using rule 109 (abstract_declarator -> abstract_declarator LSPAREN constant_expression RSPAREN .)
    LSPAREN         reduce using rule 109 (abstract_declarator -> abstract_declarator LSPAREN constant_expression RSPAREN .)
    RTEMPLATE       reduce using rule 109 (abstract_declarator -> abstract_declarator LSPAREN constant_expression RSPAREN .)
    COMMA           reduce using rule 109 (abstract_declarator -> abstract_declarator LSPAREN constant_expression RSPAREN .)
    RPAREN          reduce using rule 109 (abstract_declarator -> abstract_declarator LSPAREN constant_expression RSPAREN .)


state 317

    (193) base_list -> base_list COMMA base_specifier .

    COMMA           reduce using rule 193 (base_list -> base_list COMMA base_specifier .)
    LCPAREN         reduce using rule 193 (base_list -> base_list COMMA base_specifier .)


state 318

    (195) base_specifier -> class_key IDENTIFIER template_class_name .

    COMMA           reduce using rule 195 (base_specifier -> class_key IDENTIFIER template_class_name .)
    LCPAREN         reduce using rule 195 (base_specifier -> class_key IDENTIFIER template_class_name .)


state 319

    (198) base_specifier -> access_specifier class_key IDENTIFIER .
    (199) base_specifier -> access_specifier class_key IDENTIFIER . template_class_name
    (162) template_class_name -> . LTEMPLATE template_arg_list RTEMPLATE

    COMMA           reduce using rule 198 (base_specifier -> access_specifier class_key IDENTIFIER .)
    LCPAREN         reduce using rule 198 (base_specifier -> access_specifier class_key IDENTIFIER .)
    LTEMPLATE       shift and go to state 101

    template_class_name            shift and go to state 364

state 320

    (164) template_arg_list -> template_arg_list COMMA type_name .

    RTEMPLATE       reduce using rule 164 (template_arg_list -> template_arg_list COMMA type_name .)
    COMMA           reduce using rule 164 (template_arg_list -> template_arg_list COMMA type_name .)


state 321

    (224) function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .

    CONST           reduce using rule 224 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    ASM             reduce using rule 224 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    TEMPLATE        reduce using rule 224 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    TYPEDEF         reduce using rule 224 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    CHAR            reduce using rule 224 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    SHORT           reduce using rule 224 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    INT             reduce using rule 224 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    LONG            reduce using rule 224 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    SIGNED          reduce using rule 224 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    UNSIGNED        reduce using rule 224 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    FLOAT           reduce using rule 224 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    DOUBLE          reduce using rule 224 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    VOID            reduce using rule 224 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    STRING          reduce using rule 224 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    AUTO            reduce using rule 224 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    TYPE            reduce using rule 224 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    CLASS           reduce using rule 224 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    STRUCT          reduce using rule 224 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    $end            reduce using rule 224 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    SEMICOLON       reduce using rule 224 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    IDENTIFIER      reduce using rule 224 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    DOUBLEBNOP      reduce using rule 224 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    MULTOP          reduce using rule 224 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    BANDOP          reduce using rule 224 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    RCPAREN         reduce using rule 224 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    PRIVATE         reduce using rule 224 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    PROTECTED       reduce using rule 224 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    PUBLIC          reduce using rule 224 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    IF              reduce using rule 224 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    SWITCH          reduce using rule 224 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    WHILE           reduce using rule 224 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    DO              reduce using rule 224 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    FOR             reduce using rule 224 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    BREAK           reduce using rule 224 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    CONTINUE        reduce using rule 224 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    RETURN          reduce using rule 224 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    GOTO            reduce using rule 224 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    TRY             reduce using rule 224 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    THROW           reduce using rule 224 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    DPLUSOP         reduce using rule 224 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    DMINUSOP        reduce using rule 224 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    SIZEOF          reduce using rule 224 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    PLUSOP          reduce using rule 224 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    MINUSOP         reduce using rule 224 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    NOTSYM          reduce using rule 224 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    BNOP            reduce using rule 224 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    NEW             reduce using rule 224 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    DELETE          reduce using rule 224 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    THIS            reduce using rule 224 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    LPAREN          reduce using rule 224 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    STRING_L        reduce using rule 224 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    NUMBER          reduce using rule 224 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    SCHAR           reduce using rule 224 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    LCPAREN         reduce using rule 224 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    CASE            reduce using rule 224 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)
    DEFAULT         reduce using rule 224 (function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope .)


state 322

    (225) function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .

    CONST           reduce using rule 225 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    ASM             reduce using rule 225 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    TEMPLATE        reduce using rule 225 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    TYPEDEF         reduce using rule 225 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    CHAR            reduce using rule 225 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    SHORT           reduce using rule 225 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    INT             reduce using rule 225 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    LONG            reduce using rule 225 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    SIGNED          reduce using rule 225 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    UNSIGNED        reduce using rule 225 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    FLOAT           reduce using rule 225 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    DOUBLE          reduce using rule 225 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    VOID            reduce using rule 225 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    STRING          reduce using rule 225 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    AUTO            reduce using rule 225 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    TYPE            reduce using rule 225 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    CLASS           reduce using rule 225 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    STRUCT          reduce using rule 225 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    $end            reduce using rule 225 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    RCPAREN         reduce using rule 225 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    SEMICOLON       reduce using rule 225 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    IF              reduce using rule 225 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    SWITCH          reduce using rule 225 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    WHILE           reduce using rule 225 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    DO              reduce using rule 225 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    FOR             reduce using rule 225 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    BREAK           reduce using rule 225 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    CONTINUE        reduce using rule 225 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    RETURN          reduce using rule 225 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    GOTO            reduce using rule 225 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    TRY             reduce using rule 225 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    THROW           reduce using rule 225 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    DPLUSOP         reduce using rule 225 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    DMINUSOP        reduce using rule 225 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    SIZEOF          reduce using rule 225 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    PLUSOP          reduce using rule 225 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    MINUSOP         reduce using rule 225 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    NOTSYM          reduce using rule 225 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    BNOP            reduce using rule 225 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    MULTOP          reduce using rule 225 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    BANDOP          reduce using rule 225 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    NEW             reduce using rule 225 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    DELETE          reduce using rule 225 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    THIS            reduce using rule 225 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    LPAREN          reduce using rule 225 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    IDENTIFIER      reduce using rule 225 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    DOUBLEBNOP      reduce using rule 225 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    STRING_L        reduce using rule 225 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    NUMBER          reduce using rule 225 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    SCHAR           reduce using rule 225 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    LCPAREN         reduce using rule 225 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    CASE            reduce using rule 225 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)
    DEFAULT         reduce using rule 225 (function_decl -> type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope .)


state 323

    (228) compound_statement -> LCPAREN statement_list . RCPAREN
    (231) statement_list -> statement_list . statement
    (232) statement -> . expression_statement
    (233) statement -> . push_scope compound_statement pop_scope
    (234) statement -> . selection_statement
    (235) statement -> . iteration_statement
    (236) statement -> . jump_statement
    (237) statement -> . declaration_statement
    (238) statement -> . try_block
    (260) expression_statement -> . expression SEMICOLON
    (261) expression_statement -> . SEMICOLON
    (288) push_scope -> .
    (244) selection_statement -> . IF LPAREN expression RPAREN push_scope compound_statement pop_scope
    (245) selection_statement -> . IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope
    (246) selection_statement -> . SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope
    (252) iteration_statement -> . WHILE push_scope LPAREN expression RPAREN statement pop_scope
    (253) iteration_statement -> . DO push_scope statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope
    (254) iteration_statement -> . FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope
    (255) iteration_statement -> . FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope
    (256) iteration_statement -> . FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope
    (257) iteration_statement -> . FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN statement pop_scope
    (239) jump_statement -> . BREAK SEMICOLON
    (240) jump_statement -> . CONTINUE SEMICOLON
    (241) jump_statement -> . RETURN expression SEMICOLON
    (242) jump_statement -> . RETURN SEMICOLON
    (243) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (262) declaration_statement -> . declaration
    (247) try_block -> . TRY push_scope compound_statement pop_scope CATCH push_scope compound_statement pop_scope
    (43) expression -> . assignment_expression
    (44) expression -> . throw_expression
    (45) expression -> . expression COMMA assignment_expression
    (263) declaration -> . type_specifier_ declarator_list SEMICOLON
    (264) declaration -> . asm_declaration
    (265) declaration -> . function_definition
    (266) declaration -> . function_decl
    (267) declaration -> . class_define_specifier SEMICOLON
    (268) declaration -> . template_declaration
    (269) declaration -> . typedef_declarator
    (48) assignment_expression -> . conditional_expression
    (49) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (46) throw_expression -> . THROW expression
    (47) throw_expression -> . THROW
    (167) type_specifier_ -> . CONST type_specifier
    (168) type_specifier_ -> . type_specifier
    (285) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (224) function_definition -> . type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope
    (225) function_decl -> . type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope
    (202) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (203) class_define_specifier -> . class_head LCPAREN RCPAREN
    (270) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (169) typedef_declarator -> . TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON
    (170) typedef_declarator -> . TYPEDEF type_specifier_ IDENTIFIER SEMICOLON
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (171) type_specifier -> . simple_type_name
    (172) type_specifier -> . complex_type_specifier
    (189) class_head -> . class_key IDENTIFIER base_spec
    (190) class_head -> . class_key IDENTIFIER
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (173) simple_type_name -> . CHAR
    (174) simple_type_name -> . SHORT
    (175) simple_type_name -> . INT
    (176) simple_type_name -> . LONG
    (177) simple_type_name -> . SIGNED
    (178) simple_type_name -> . UNSIGNED
    (179) simple_type_name -> . FLOAT
    (180) simple_type_name -> . DOUBLE
    (181) simple_type_name -> . VOID
    (182) simple_type_name -> . STRING
    (183) simple_type_name -> . AUTO
    (184) complex_type_specifier -> . class_key IDENTIFIER
    (185) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (186) complex_type_specifier -> . TYPE IDENTIFIER
    (187) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (200) class_key -> . CLASS
    (201) class_key -> . STRUCT
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RCPAREN         shift and go to state 365
    SEMICOLON       shift and go to state 334
    LCPAREN         reduce using rule 288 (push_scope -> .)
    IF              shift and go to state 335
    SWITCH          shift and go to state 336
    WHILE           shift and go to state 337
    DO              shift and go to state 338
    FOR             shift and go to state 339
    BREAK           shift and go to state 340
    CONTINUE        shift and go to state 341
    RETURN          shift and go to state 342
    GOTO            shift and go to state 343
    TRY             shift and go to state 345
    THROW           shift and go to state 212
    CONST           shift and go to state 16
    ASM             shift and go to state 18
    TEMPLATE        shift and go to state 20
    TYPEDEF         shift and go to state 21
    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38
    THIS            shift and go to state 142
    LPAREN          shift and go to state 146
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    statement                      shift and go to state 366
    expression_statement           shift and go to state 326
    push_scope                     shift and go to state 327
    selection_statement            shift and go to state 328
    iteration_statement            shift and go to state 329
    jump_statement                 shift and go to state 330
    declaration_statement          shift and go to state 331
    try_block                      shift and go to state 332
    expression                     shift and go to state 333
    declaration                    shift and go to state 344
    assignment_expression          shift and go to state 210
    throw_expression               shift and go to state 211
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    function_decl                  shift and go to state 12
    class_define_specifier         shift and go to state 13
    template_declaration           shift and go to state 14
    typedef_declarator             shift and go to state 15
    conditional_expression         shift and go to state 149
    unary_expression               shift and go to state 150
    type_specifier                 shift and go to state 17
    class_head                     shift and go to state 19
    logical_OR_expression          shift and go to state 112
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    cast_expression                shift and go to state 124
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 24
    logical_AND_expression         shift and go to state 113
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    inclusive_OR_expression        shift and go to state 114
    literal                        shift and go to state 141
    exclusive_OR_expression        shift and go to state 115
    AND_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 324

    (229) compound_statement -> LCPAREN RCPAREN .

    CONST           reduce using rule 229 (compound_statement -> LCPAREN RCPAREN .)
    ASM             reduce using rule 229 (compound_statement -> LCPAREN RCPAREN .)
    TEMPLATE        reduce using rule 229 (compound_statement -> LCPAREN RCPAREN .)
    TYPEDEF         reduce using rule 229 (compound_statement -> LCPAREN RCPAREN .)
    CHAR            reduce using rule 229 (compound_statement -> LCPAREN RCPAREN .)
    SHORT           reduce using rule 229 (compound_statement -> LCPAREN RCPAREN .)
    INT             reduce using rule 229 (compound_statement -> LCPAREN RCPAREN .)
    LONG            reduce using rule 229 (compound_statement -> LCPAREN RCPAREN .)
    SIGNED          reduce using rule 229 (compound_statement -> LCPAREN RCPAREN .)
    UNSIGNED        reduce using rule 229 (compound_statement -> LCPAREN RCPAREN .)
    FLOAT           reduce using rule 229 (compound_statement -> LCPAREN RCPAREN .)
    DOUBLE          reduce using rule 229 (compound_statement -> LCPAREN RCPAREN .)
    VOID            reduce using rule 229 (compound_statement -> LCPAREN RCPAREN .)
    STRING          reduce using rule 229 (compound_statement -> LCPAREN RCPAREN .)
    AUTO            reduce using rule 229 (compound_statement -> LCPAREN RCPAREN .)
    TYPE            reduce using rule 229 (compound_statement -> LCPAREN RCPAREN .)
    CLASS           reduce using rule 229 (compound_statement -> LCPAREN RCPAREN .)
    STRUCT          reduce using rule 229 (compound_statement -> LCPAREN RCPAREN .)
    $end            reduce using rule 229 (compound_statement -> LCPAREN RCPAREN .)
    RCPAREN         reduce using rule 229 (compound_statement -> LCPAREN RCPAREN .)
    SEMICOLON       reduce using rule 229 (compound_statement -> LCPAREN RCPAREN .)
    IF              reduce using rule 229 (compound_statement -> LCPAREN RCPAREN .)
    SWITCH          reduce using rule 229 (compound_statement -> LCPAREN RCPAREN .)
    WHILE           reduce using rule 229 (compound_statement -> LCPAREN RCPAREN .)
    DO              reduce using rule 229 (compound_statement -> LCPAREN RCPAREN .)
    FOR             reduce using rule 229 (compound_statement -> LCPAREN RCPAREN .)
    BREAK           reduce using rule 229 (compound_statement -> LCPAREN RCPAREN .)
    CONTINUE        reduce using rule 229 (compound_statement -> LCPAREN RCPAREN .)
    RETURN          reduce using rule 229 (compound_statement -> LCPAREN RCPAREN .)
    GOTO            reduce using rule 229 (compound_statement -> LCPAREN RCPAREN .)
    TRY             reduce using rule 229 (compound_statement -> LCPAREN RCPAREN .)
    THROW           reduce using rule 229 (compound_statement -> LCPAREN RCPAREN .)
    DPLUSOP         reduce using rule 229 (compound_statement -> LCPAREN RCPAREN .)
    DMINUSOP        reduce using rule 229 (compound_statement -> LCPAREN RCPAREN .)
    SIZEOF          reduce using rule 229 (compound_statement -> LCPAREN RCPAREN .)
    PLUSOP          reduce using rule 229 (compound_statement -> LCPAREN RCPAREN .)
    MINUSOP         reduce using rule 229 (compound_statement -> LCPAREN RCPAREN .)
    NOTSYM          reduce using rule 229 (compound_statement -> LCPAREN RCPAREN .)
    BNOP            reduce using rule 229 (compound_statement -> LCPAREN RCPAREN .)
    MULTOP          reduce using rule 229 (compound_statement -> LCPAREN RCPAREN .)
    BANDOP          reduce using rule 229 (compound_statement -> LCPAREN RCPAREN .)
    NEW             reduce using rule 229 (compound_statement -> LCPAREN RCPAREN .)
    DELETE          reduce using rule 229 (compound_statement -> LCPAREN RCPAREN .)
    THIS            reduce using rule 229 (compound_statement -> LCPAREN RCPAREN .)
    LPAREN          reduce using rule 229 (compound_statement -> LCPAREN RCPAREN .)
    IDENTIFIER      reduce using rule 229 (compound_statement -> LCPAREN RCPAREN .)
    DOUBLEBNOP      reduce using rule 229 (compound_statement -> LCPAREN RCPAREN .)
    STRING_L        reduce using rule 229 (compound_statement -> LCPAREN RCPAREN .)
    NUMBER          reduce using rule 229 (compound_statement -> LCPAREN RCPAREN .)
    SCHAR           reduce using rule 229 (compound_statement -> LCPAREN RCPAREN .)
    LCPAREN         reduce using rule 229 (compound_statement -> LCPAREN RCPAREN .)
    CASE            reduce using rule 229 (compound_statement -> LCPAREN RCPAREN .)
    DEFAULT         reduce using rule 229 (compound_statement -> LCPAREN RCPAREN .)
    PRIVATE         reduce using rule 229 (compound_statement -> LCPAREN RCPAREN .)
    PROTECTED       reduce using rule 229 (compound_statement -> LCPAREN RCPAREN .)
    PUBLIC          reduce using rule 229 (compound_statement -> LCPAREN RCPAREN .)
    CATCH           reduce using rule 229 (compound_statement -> LCPAREN RCPAREN .)
    ELSE            reduce using rule 229 (compound_statement -> LCPAREN RCPAREN .)


state 325

    (230) statement_list -> statement .

    RCPAREN         reduce using rule 230 (statement_list -> statement .)
    SEMICOLON       reduce using rule 230 (statement_list -> statement .)
    IF              reduce using rule 230 (statement_list -> statement .)
    SWITCH          reduce using rule 230 (statement_list -> statement .)
    WHILE           reduce using rule 230 (statement_list -> statement .)
    DO              reduce using rule 230 (statement_list -> statement .)
    FOR             reduce using rule 230 (statement_list -> statement .)
    BREAK           reduce using rule 230 (statement_list -> statement .)
    CONTINUE        reduce using rule 230 (statement_list -> statement .)
    RETURN          reduce using rule 230 (statement_list -> statement .)
    GOTO            reduce using rule 230 (statement_list -> statement .)
    TRY             reduce using rule 230 (statement_list -> statement .)
    THROW           reduce using rule 230 (statement_list -> statement .)
    CONST           reduce using rule 230 (statement_list -> statement .)
    ASM             reduce using rule 230 (statement_list -> statement .)
    TEMPLATE        reduce using rule 230 (statement_list -> statement .)
    TYPEDEF         reduce using rule 230 (statement_list -> statement .)
    DPLUSOP         reduce using rule 230 (statement_list -> statement .)
    DMINUSOP        reduce using rule 230 (statement_list -> statement .)
    SIZEOF          reduce using rule 230 (statement_list -> statement .)
    PLUSOP          reduce using rule 230 (statement_list -> statement .)
    MINUSOP         reduce using rule 230 (statement_list -> statement .)
    NOTSYM          reduce using rule 230 (statement_list -> statement .)
    BNOP            reduce using rule 230 (statement_list -> statement .)
    MULTOP          reduce using rule 230 (statement_list -> statement .)
    BANDOP          reduce using rule 230 (statement_list -> statement .)
    NEW             reduce using rule 230 (statement_list -> statement .)
    DELETE          reduce using rule 230 (statement_list -> statement .)
    CHAR            reduce using rule 230 (statement_list -> statement .)
    SHORT           reduce using rule 230 (statement_list -> statement .)
    INT             reduce using rule 230 (statement_list -> statement .)
    LONG            reduce using rule 230 (statement_list -> statement .)
    SIGNED          reduce using rule 230 (statement_list -> statement .)
    UNSIGNED        reduce using rule 230 (statement_list -> statement .)
    FLOAT           reduce using rule 230 (statement_list -> statement .)
    DOUBLE          reduce using rule 230 (statement_list -> statement .)
    VOID            reduce using rule 230 (statement_list -> statement .)
    STRING          reduce using rule 230 (statement_list -> statement .)
    AUTO            reduce using rule 230 (statement_list -> statement .)
    TYPE            reduce using rule 230 (statement_list -> statement .)
    CLASS           reduce using rule 230 (statement_list -> statement .)
    STRUCT          reduce using rule 230 (statement_list -> statement .)
    THIS            reduce using rule 230 (statement_list -> statement .)
    LPAREN          reduce using rule 230 (statement_list -> statement .)
    IDENTIFIER      reduce using rule 230 (statement_list -> statement .)
    DOUBLEBNOP      reduce using rule 230 (statement_list -> statement .)
    STRING_L        reduce using rule 230 (statement_list -> statement .)
    NUMBER          reduce using rule 230 (statement_list -> statement .)
    SCHAR           reduce using rule 230 (statement_list -> statement .)
    LCPAREN         reduce using rule 230 (statement_list -> statement .)
    CASE            reduce using rule 230 (statement_list -> statement .)
    DEFAULT         reduce using rule 230 (statement_list -> statement .)


state 326

    (232) statement -> expression_statement .

    RCPAREN         reduce using rule 232 (statement -> expression_statement .)
    SEMICOLON       reduce using rule 232 (statement -> expression_statement .)
    IF              reduce using rule 232 (statement -> expression_statement .)
    SWITCH          reduce using rule 232 (statement -> expression_statement .)
    WHILE           reduce using rule 232 (statement -> expression_statement .)
    DO              reduce using rule 232 (statement -> expression_statement .)
    FOR             reduce using rule 232 (statement -> expression_statement .)
    BREAK           reduce using rule 232 (statement -> expression_statement .)
    CONTINUE        reduce using rule 232 (statement -> expression_statement .)
    RETURN          reduce using rule 232 (statement -> expression_statement .)
    GOTO            reduce using rule 232 (statement -> expression_statement .)
    TRY             reduce using rule 232 (statement -> expression_statement .)
    THROW           reduce using rule 232 (statement -> expression_statement .)
    CONST           reduce using rule 232 (statement -> expression_statement .)
    ASM             reduce using rule 232 (statement -> expression_statement .)
    TEMPLATE        reduce using rule 232 (statement -> expression_statement .)
    TYPEDEF         reduce using rule 232 (statement -> expression_statement .)
    DPLUSOP         reduce using rule 232 (statement -> expression_statement .)
    DMINUSOP        reduce using rule 232 (statement -> expression_statement .)
    SIZEOF          reduce using rule 232 (statement -> expression_statement .)
    PLUSOP          reduce using rule 232 (statement -> expression_statement .)
    MINUSOP         reduce using rule 232 (statement -> expression_statement .)
    NOTSYM          reduce using rule 232 (statement -> expression_statement .)
    BNOP            reduce using rule 232 (statement -> expression_statement .)
    MULTOP          reduce using rule 232 (statement -> expression_statement .)
    BANDOP          reduce using rule 232 (statement -> expression_statement .)
    NEW             reduce using rule 232 (statement -> expression_statement .)
    DELETE          reduce using rule 232 (statement -> expression_statement .)
    CHAR            reduce using rule 232 (statement -> expression_statement .)
    SHORT           reduce using rule 232 (statement -> expression_statement .)
    INT             reduce using rule 232 (statement -> expression_statement .)
    LONG            reduce using rule 232 (statement -> expression_statement .)
    SIGNED          reduce using rule 232 (statement -> expression_statement .)
    UNSIGNED        reduce using rule 232 (statement -> expression_statement .)
    FLOAT           reduce using rule 232 (statement -> expression_statement .)
    DOUBLE          reduce using rule 232 (statement -> expression_statement .)
    VOID            reduce using rule 232 (statement -> expression_statement .)
    STRING          reduce using rule 232 (statement -> expression_statement .)
    AUTO            reduce using rule 232 (statement -> expression_statement .)
    TYPE            reduce using rule 232 (statement -> expression_statement .)
    CLASS           reduce using rule 232 (statement -> expression_statement .)
    STRUCT          reduce using rule 232 (statement -> expression_statement .)
    THIS            reduce using rule 232 (statement -> expression_statement .)
    LPAREN          reduce using rule 232 (statement -> expression_statement .)
    IDENTIFIER      reduce using rule 232 (statement -> expression_statement .)
    DOUBLEBNOP      reduce using rule 232 (statement -> expression_statement .)
    STRING_L        reduce using rule 232 (statement -> expression_statement .)
    NUMBER          reduce using rule 232 (statement -> expression_statement .)
    SCHAR           reduce using rule 232 (statement -> expression_statement .)
    LCPAREN         reduce using rule 232 (statement -> expression_statement .)
    CASE            reduce using rule 232 (statement -> expression_statement .)
    DEFAULT         reduce using rule 232 (statement -> expression_statement .)


state 327

    (233) statement -> push_scope . compound_statement pop_scope
    (228) compound_statement -> . LCPAREN statement_list RCPAREN
    (229) compound_statement -> . LCPAREN RCPAREN

    LCPAREN         shift and go to state 271

    compound_statement             shift and go to state 367

state 328

    (234) statement -> selection_statement .

    RCPAREN         reduce using rule 234 (statement -> selection_statement .)
    SEMICOLON       reduce using rule 234 (statement -> selection_statement .)
    IF              reduce using rule 234 (statement -> selection_statement .)
    SWITCH          reduce using rule 234 (statement -> selection_statement .)
    WHILE           reduce using rule 234 (statement -> selection_statement .)
    DO              reduce using rule 234 (statement -> selection_statement .)
    FOR             reduce using rule 234 (statement -> selection_statement .)
    BREAK           reduce using rule 234 (statement -> selection_statement .)
    CONTINUE        reduce using rule 234 (statement -> selection_statement .)
    RETURN          reduce using rule 234 (statement -> selection_statement .)
    GOTO            reduce using rule 234 (statement -> selection_statement .)
    TRY             reduce using rule 234 (statement -> selection_statement .)
    THROW           reduce using rule 234 (statement -> selection_statement .)
    CONST           reduce using rule 234 (statement -> selection_statement .)
    ASM             reduce using rule 234 (statement -> selection_statement .)
    TEMPLATE        reduce using rule 234 (statement -> selection_statement .)
    TYPEDEF         reduce using rule 234 (statement -> selection_statement .)
    DPLUSOP         reduce using rule 234 (statement -> selection_statement .)
    DMINUSOP        reduce using rule 234 (statement -> selection_statement .)
    SIZEOF          reduce using rule 234 (statement -> selection_statement .)
    PLUSOP          reduce using rule 234 (statement -> selection_statement .)
    MINUSOP         reduce using rule 234 (statement -> selection_statement .)
    NOTSYM          reduce using rule 234 (statement -> selection_statement .)
    BNOP            reduce using rule 234 (statement -> selection_statement .)
    MULTOP          reduce using rule 234 (statement -> selection_statement .)
    BANDOP          reduce using rule 234 (statement -> selection_statement .)
    NEW             reduce using rule 234 (statement -> selection_statement .)
    DELETE          reduce using rule 234 (statement -> selection_statement .)
    CHAR            reduce using rule 234 (statement -> selection_statement .)
    SHORT           reduce using rule 234 (statement -> selection_statement .)
    INT             reduce using rule 234 (statement -> selection_statement .)
    LONG            reduce using rule 234 (statement -> selection_statement .)
    SIGNED          reduce using rule 234 (statement -> selection_statement .)
    UNSIGNED        reduce using rule 234 (statement -> selection_statement .)
    FLOAT           reduce using rule 234 (statement -> selection_statement .)
    DOUBLE          reduce using rule 234 (statement -> selection_statement .)
    VOID            reduce using rule 234 (statement -> selection_statement .)
    STRING          reduce using rule 234 (statement -> selection_statement .)
    AUTO            reduce using rule 234 (statement -> selection_statement .)
    TYPE            reduce using rule 234 (statement -> selection_statement .)
    CLASS           reduce using rule 234 (statement -> selection_statement .)
    STRUCT          reduce using rule 234 (statement -> selection_statement .)
    THIS            reduce using rule 234 (statement -> selection_statement .)
    LPAREN          reduce using rule 234 (statement -> selection_statement .)
    IDENTIFIER      reduce using rule 234 (statement -> selection_statement .)
    DOUBLEBNOP      reduce using rule 234 (statement -> selection_statement .)
    STRING_L        reduce using rule 234 (statement -> selection_statement .)
    NUMBER          reduce using rule 234 (statement -> selection_statement .)
    SCHAR           reduce using rule 234 (statement -> selection_statement .)
    LCPAREN         reduce using rule 234 (statement -> selection_statement .)
    CASE            reduce using rule 234 (statement -> selection_statement .)
    DEFAULT         reduce using rule 234 (statement -> selection_statement .)


state 329

    (235) statement -> iteration_statement .

    RCPAREN         reduce using rule 235 (statement -> iteration_statement .)
    SEMICOLON       reduce using rule 235 (statement -> iteration_statement .)
    IF              reduce using rule 235 (statement -> iteration_statement .)
    SWITCH          reduce using rule 235 (statement -> iteration_statement .)
    WHILE           reduce using rule 235 (statement -> iteration_statement .)
    DO              reduce using rule 235 (statement -> iteration_statement .)
    FOR             reduce using rule 235 (statement -> iteration_statement .)
    BREAK           reduce using rule 235 (statement -> iteration_statement .)
    CONTINUE        reduce using rule 235 (statement -> iteration_statement .)
    RETURN          reduce using rule 235 (statement -> iteration_statement .)
    GOTO            reduce using rule 235 (statement -> iteration_statement .)
    TRY             reduce using rule 235 (statement -> iteration_statement .)
    THROW           reduce using rule 235 (statement -> iteration_statement .)
    CONST           reduce using rule 235 (statement -> iteration_statement .)
    ASM             reduce using rule 235 (statement -> iteration_statement .)
    TEMPLATE        reduce using rule 235 (statement -> iteration_statement .)
    TYPEDEF         reduce using rule 235 (statement -> iteration_statement .)
    DPLUSOP         reduce using rule 235 (statement -> iteration_statement .)
    DMINUSOP        reduce using rule 235 (statement -> iteration_statement .)
    SIZEOF          reduce using rule 235 (statement -> iteration_statement .)
    PLUSOP          reduce using rule 235 (statement -> iteration_statement .)
    MINUSOP         reduce using rule 235 (statement -> iteration_statement .)
    NOTSYM          reduce using rule 235 (statement -> iteration_statement .)
    BNOP            reduce using rule 235 (statement -> iteration_statement .)
    MULTOP          reduce using rule 235 (statement -> iteration_statement .)
    BANDOP          reduce using rule 235 (statement -> iteration_statement .)
    NEW             reduce using rule 235 (statement -> iteration_statement .)
    DELETE          reduce using rule 235 (statement -> iteration_statement .)
    CHAR            reduce using rule 235 (statement -> iteration_statement .)
    SHORT           reduce using rule 235 (statement -> iteration_statement .)
    INT             reduce using rule 235 (statement -> iteration_statement .)
    LONG            reduce using rule 235 (statement -> iteration_statement .)
    SIGNED          reduce using rule 235 (statement -> iteration_statement .)
    UNSIGNED        reduce using rule 235 (statement -> iteration_statement .)
    FLOAT           reduce using rule 235 (statement -> iteration_statement .)
    DOUBLE          reduce using rule 235 (statement -> iteration_statement .)
    VOID            reduce using rule 235 (statement -> iteration_statement .)
    STRING          reduce using rule 235 (statement -> iteration_statement .)
    AUTO            reduce using rule 235 (statement -> iteration_statement .)
    TYPE            reduce using rule 235 (statement -> iteration_statement .)
    CLASS           reduce using rule 235 (statement -> iteration_statement .)
    STRUCT          reduce using rule 235 (statement -> iteration_statement .)
    THIS            reduce using rule 235 (statement -> iteration_statement .)
    LPAREN          reduce using rule 235 (statement -> iteration_statement .)
    IDENTIFIER      reduce using rule 235 (statement -> iteration_statement .)
    DOUBLEBNOP      reduce using rule 235 (statement -> iteration_statement .)
    STRING_L        reduce using rule 235 (statement -> iteration_statement .)
    NUMBER          reduce using rule 235 (statement -> iteration_statement .)
    SCHAR           reduce using rule 235 (statement -> iteration_statement .)
    LCPAREN         reduce using rule 235 (statement -> iteration_statement .)
    CASE            reduce using rule 235 (statement -> iteration_statement .)
    DEFAULT         reduce using rule 235 (statement -> iteration_statement .)


state 330

    (236) statement -> jump_statement .

    RCPAREN         reduce using rule 236 (statement -> jump_statement .)
    SEMICOLON       reduce using rule 236 (statement -> jump_statement .)
    IF              reduce using rule 236 (statement -> jump_statement .)
    SWITCH          reduce using rule 236 (statement -> jump_statement .)
    WHILE           reduce using rule 236 (statement -> jump_statement .)
    DO              reduce using rule 236 (statement -> jump_statement .)
    FOR             reduce using rule 236 (statement -> jump_statement .)
    BREAK           reduce using rule 236 (statement -> jump_statement .)
    CONTINUE        reduce using rule 236 (statement -> jump_statement .)
    RETURN          reduce using rule 236 (statement -> jump_statement .)
    GOTO            reduce using rule 236 (statement -> jump_statement .)
    TRY             reduce using rule 236 (statement -> jump_statement .)
    THROW           reduce using rule 236 (statement -> jump_statement .)
    CONST           reduce using rule 236 (statement -> jump_statement .)
    ASM             reduce using rule 236 (statement -> jump_statement .)
    TEMPLATE        reduce using rule 236 (statement -> jump_statement .)
    TYPEDEF         reduce using rule 236 (statement -> jump_statement .)
    DPLUSOP         reduce using rule 236 (statement -> jump_statement .)
    DMINUSOP        reduce using rule 236 (statement -> jump_statement .)
    SIZEOF          reduce using rule 236 (statement -> jump_statement .)
    PLUSOP          reduce using rule 236 (statement -> jump_statement .)
    MINUSOP         reduce using rule 236 (statement -> jump_statement .)
    NOTSYM          reduce using rule 236 (statement -> jump_statement .)
    BNOP            reduce using rule 236 (statement -> jump_statement .)
    MULTOP          reduce using rule 236 (statement -> jump_statement .)
    BANDOP          reduce using rule 236 (statement -> jump_statement .)
    NEW             reduce using rule 236 (statement -> jump_statement .)
    DELETE          reduce using rule 236 (statement -> jump_statement .)
    CHAR            reduce using rule 236 (statement -> jump_statement .)
    SHORT           reduce using rule 236 (statement -> jump_statement .)
    INT             reduce using rule 236 (statement -> jump_statement .)
    LONG            reduce using rule 236 (statement -> jump_statement .)
    SIGNED          reduce using rule 236 (statement -> jump_statement .)
    UNSIGNED        reduce using rule 236 (statement -> jump_statement .)
    FLOAT           reduce using rule 236 (statement -> jump_statement .)
    DOUBLE          reduce using rule 236 (statement -> jump_statement .)
    VOID            reduce using rule 236 (statement -> jump_statement .)
    STRING          reduce using rule 236 (statement -> jump_statement .)
    AUTO            reduce using rule 236 (statement -> jump_statement .)
    TYPE            reduce using rule 236 (statement -> jump_statement .)
    CLASS           reduce using rule 236 (statement -> jump_statement .)
    STRUCT          reduce using rule 236 (statement -> jump_statement .)
    THIS            reduce using rule 236 (statement -> jump_statement .)
    LPAREN          reduce using rule 236 (statement -> jump_statement .)
    IDENTIFIER      reduce using rule 236 (statement -> jump_statement .)
    DOUBLEBNOP      reduce using rule 236 (statement -> jump_statement .)
    STRING_L        reduce using rule 236 (statement -> jump_statement .)
    NUMBER          reduce using rule 236 (statement -> jump_statement .)
    SCHAR           reduce using rule 236 (statement -> jump_statement .)
    LCPAREN         reduce using rule 236 (statement -> jump_statement .)
    CASE            reduce using rule 236 (statement -> jump_statement .)
    DEFAULT         reduce using rule 236 (statement -> jump_statement .)


state 331

    (237) statement -> declaration_statement .

    RCPAREN         reduce using rule 237 (statement -> declaration_statement .)
    SEMICOLON       reduce using rule 237 (statement -> declaration_statement .)
    IF              reduce using rule 237 (statement -> declaration_statement .)
    SWITCH          reduce using rule 237 (statement -> declaration_statement .)
    WHILE           reduce using rule 237 (statement -> declaration_statement .)
    DO              reduce using rule 237 (statement -> declaration_statement .)
    FOR             reduce using rule 237 (statement -> declaration_statement .)
    BREAK           reduce using rule 237 (statement -> declaration_statement .)
    CONTINUE        reduce using rule 237 (statement -> declaration_statement .)
    RETURN          reduce using rule 237 (statement -> declaration_statement .)
    GOTO            reduce using rule 237 (statement -> declaration_statement .)
    TRY             reduce using rule 237 (statement -> declaration_statement .)
    THROW           reduce using rule 237 (statement -> declaration_statement .)
    CONST           reduce using rule 237 (statement -> declaration_statement .)
    ASM             reduce using rule 237 (statement -> declaration_statement .)
    TEMPLATE        reduce using rule 237 (statement -> declaration_statement .)
    TYPEDEF         reduce using rule 237 (statement -> declaration_statement .)
    DPLUSOP         reduce using rule 237 (statement -> declaration_statement .)
    DMINUSOP        reduce using rule 237 (statement -> declaration_statement .)
    SIZEOF          reduce using rule 237 (statement -> declaration_statement .)
    PLUSOP          reduce using rule 237 (statement -> declaration_statement .)
    MINUSOP         reduce using rule 237 (statement -> declaration_statement .)
    NOTSYM          reduce using rule 237 (statement -> declaration_statement .)
    BNOP            reduce using rule 237 (statement -> declaration_statement .)
    MULTOP          reduce using rule 237 (statement -> declaration_statement .)
    BANDOP          reduce using rule 237 (statement -> declaration_statement .)
    NEW             reduce using rule 237 (statement -> declaration_statement .)
    DELETE          reduce using rule 237 (statement -> declaration_statement .)
    CHAR            reduce using rule 237 (statement -> declaration_statement .)
    SHORT           reduce using rule 237 (statement -> declaration_statement .)
    INT             reduce using rule 237 (statement -> declaration_statement .)
    LONG            reduce using rule 237 (statement -> declaration_statement .)
    SIGNED          reduce using rule 237 (statement -> declaration_statement .)
    UNSIGNED        reduce using rule 237 (statement -> declaration_statement .)
    FLOAT           reduce using rule 237 (statement -> declaration_statement .)
    DOUBLE          reduce using rule 237 (statement -> declaration_statement .)
    VOID            reduce using rule 237 (statement -> declaration_statement .)
    STRING          reduce using rule 237 (statement -> declaration_statement .)
    AUTO            reduce using rule 237 (statement -> declaration_statement .)
    TYPE            reduce using rule 237 (statement -> declaration_statement .)
    CLASS           reduce using rule 237 (statement -> declaration_statement .)
    STRUCT          reduce using rule 237 (statement -> declaration_statement .)
    THIS            reduce using rule 237 (statement -> declaration_statement .)
    LPAREN          reduce using rule 237 (statement -> declaration_statement .)
    IDENTIFIER      reduce using rule 237 (statement -> declaration_statement .)
    DOUBLEBNOP      reduce using rule 237 (statement -> declaration_statement .)
    STRING_L        reduce using rule 237 (statement -> declaration_statement .)
    NUMBER          reduce using rule 237 (statement -> declaration_statement .)
    SCHAR           reduce using rule 237 (statement -> declaration_statement .)
    LCPAREN         reduce using rule 237 (statement -> declaration_statement .)
    CASE            reduce using rule 237 (statement -> declaration_statement .)
    DEFAULT         reduce using rule 237 (statement -> declaration_statement .)


state 332

    (238) statement -> try_block .

    RCPAREN         reduce using rule 238 (statement -> try_block .)
    SEMICOLON       reduce using rule 238 (statement -> try_block .)
    IF              reduce using rule 238 (statement -> try_block .)
    SWITCH          reduce using rule 238 (statement -> try_block .)
    WHILE           reduce using rule 238 (statement -> try_block .)
    DO              reduce using rule 238 (statement -> try_block .)
    FOR             reduce using rule 238 (statement -> try_block .)
    BREAK           reduce using rule 238 (statement -> try_block .)
    CONTINUE        reduce using rule 238 (statement -> try_block .)
    RETURN          reduce using rule 238 (statement -> try_block .)
    GOTO            reduce using rule 238 (statement -> try_block .)
    TRY             reduce using rule 238 (statement -> try_block .)
    THROW           reduce using rule 238 (statement -> try_block .)
    CONST           reduce using rule 238 (statement -> try_block .)
    ASM             reduce using rule 238 (statement -> try_block .)
    TEMPLATE        reduce using rule 238 (statement -> try_block .)
    TYPEDEF         reduce using rule 238 (statement -> try_block .)
    DPLUSOP         reduce using rule 238 (statement -> try_block .)
    DMINUSOP        reduce using rule 238 (statement -> try_block .)
    SIZEOF          reduce using rule 238 (statement -> try_block .)
    PLUSOP          reduce using rule 238 (statement -> try_block .)
    MINUSOP         reduce using rule 238 (statement -> try_block .)
    NOTSYM          reduce using rule 238 (statement -> try_block .)
    BNOP            reduce using rule 238 (statement -> try_block .)
    MULTOP          reduce using rule 238 (statement -> try_block .)
    BANDOP          reduce using rule 238 (statement -> try_block .)
    NEW             reduce using rule 238 (statement -> try_block .)
    DELETE          reduce using rule 238 (statement -> try_block .)
    CHAR            reduce using rule 238 (statement -> try_block .)
    SHORT           reduce using rule 238 (statement -> try_block .)
    INT             reduce using rule 238 (statement -> try_block .)
    LONG            reduce using rule 238 (statement -> try_block .)
    SIGNED          reduce using rule 238 (statement -> try_block .)
    UNSIGNED        reduce using rule 238 (statement -> try_block .)
    FLOAT           reduce using rule 238 (statement -> try_block .)
    DOUBLE          reduce using rule 238 (statement -> try_block .)
    VOID            reduce using rule 238 (statement -> try_block .)
    STRING          reduce using rule 238 (statement -> try_block .)
    AUTO            reduce using rule 238 (statement -> try_block .)
    TYPE            reduce using rule 238 (statement -> try_block .)
    CLASS           reduce using rule 238 (statement -> try_block .)
    STRUCT          reduce using rule 238 (statement -> try_block .)
    THIS            reduce using rule 238 (statement -> try_block .)
    LPAREN          reduce using rule 238 (statement -> try_block .)
    IDENTIFIER      reduce using rule 238 (statement -> try_block .)
    DOUBLEBNOP      reduce using rule 238 (statement -> try_block .)
    STRING_L        reduce using rule 238 (statement -> try_block .)
    NUMBER          reduce using rule 238 (statement -> try_block .)
    SCHAR           reduce using rule 238 (statement -> try_block .)
    LCPAREN         reduce using rule 238 (statement -> try_block .)
    CASE            reduce using rule 238 (statement -> try_block .)
    DEFAULT         reduce using rule 238 (statement -> try_block .)


state 333

    (260) expression_statement -> expression . SEMICOLON
    (45) expression -> expression . COMMA assignment_expression

    SEMICOLON       shift and go to state 368
    COMMA           shift and go to state 294


state 334

    (261) expression_statement -> SEMICOLON .

    RCPAREN         reduce using rule 261 (expression_statement -> SEMICOLON .)
    SEMICOLON       reduce using rule 261 (expression_statement -> SEMICOLON .)
    IF              reduce using rule 261 (expression_statement -> SEMICOLON .)
    SWITCH          reduce using rule 261 (expression_statement -> SEMICOLON .)
    WHILE           reduce using rule 261 (expression_statement -> SEMICOLON .)
    DO              reduce using rule 261 (expression_statement -> SEMICOLON .)
    FOR             reduce using rule 261 (expression_statement -> SEMICOLON .)
    BREAK           reduce using rule 261 (expression_statement -> SEMICOLON .)
    CONTINUE        reduce using rule 261 (expression_statement -> SEMICOLON .)
    RETURN          reduce using rule 261 (expression_statement -> SEMICOLON .)
    GOTO            reduce using rule 261 (expression_statement -> SEMICOLON .)
    TRY             reduce using rule 261 (expression_statement -> SEMICOLON .)
    THROW           reduce using rule 261 (expression_statement -> SEMICOLON .)
    CONST           reduce using rule 261 (expression_statement -> SEMICOLON .)
    ASM             reduce using rule 261 (expression_statement -> SEMICOLON .)
    TEMPLATE        reduce using rule 261 (expression_statement -> SEMICOLON .)
    TYPEDEF         reduce using rule 261 (expression_statement -> SEMICOLON .)
    DPLUSOP         reduce using rule 261 (expression_statement -> SEMICOLON .)
    DMINUSOP        reduce using rule 261 (expression_statement -> SEMICOLON .)
    SIZEOF          reduce using rule 261 (expression_statement -> SEMICOLON .)
    PLUSOP          reduce using rule 261 (expression_statement -> SEMICOLON .)
    MINUSOP         reduce using rule 261 (expression_statement -> SEMICOLON .)
    NOTSYM          reduce using rule 261 (expression_statement -> SEMICOLON .)
    BNOP            reduce using rule 261 (expression_statement -> SEMICOLON .)
    MULTOP          reduce using rule 261 (expression_statement -> SEMICOLON .)
    BANDOP          reduce using rule 261 (expression_statement -> SEMICOLON .)
    NEW             reduce using rule 261 (expression_statement -> SEMICOLON .)
    DELETE          reduce using rule 261 (expression_statement -> SEMICOLON .)
    CHAR            reduce using rule 261 (expression_statement -> SEMICOLON .)
    SHORT           reduce using rule 261 (expression_statement -> SEMICOLON .)
    INT             reduce using rule 261 (expression_statement -> SEMICOLON .)
    LONG            reduce using rule 261 (expression_statement -> SEMICOLON .)
    SIGNED          reduce using rule 261 (expression_statement -> SEMICOLON .)
    UNSIGNED        reduce using rule 261 (expression_statement -> SEMICOLON .)
    FLOAT           reduce using rule 261 (expression_statement -> SEMICOLON .)
    DOUBLE          reduce using rule 261 (expression_statement -> SEMICOLON .)
    VOID            reduce using rule 261 (expression_statement -> SEMICOLON .)
    STRING          reduce using rule 261 (expression_statement -> SEMICOLON .)
    AUTO            reduce using rule 261 (expression_statement -> SEMICOLON .)
    TYPE            reduce using rule 261 (expression_statement -> SEMICOLON .)
    CLASS           reduce using rule 261 (expression_statement -> SEMICOLON .)
    STRUCT          reduce using rule 261 (expression_statement -> SEMICOLON .)
    THIS            reduce using rule 261 (expression_statement -> SEMICOLON .)
    LPAREN          reduce using rule 261 (expression_statement -> SEMICOLON .)
    IDENTIFIER      reduce using rule 261 (expression_statement -> SEMICOLON .)
    DOUBLEBNOP      reduce using rule 261 (expression_statement -> SEMICOLON .)
    STRING_L        reduce using rule 261 (expression_statement -> SEMICOLON .)
    NUMBER          reduce using rule 261 (expression_statement -> SEMICOLON .)
    SCHAR           reduce using rule 261 (expression_statement -> SEMICOLON .)
    LCPAREN         reduce using rule 261 (expression_statement -> SEMICOLON .)
    CASE            reduce using rule 261 (expression_statement -> SEMICOLON .)
    DEFAULT         reduce using rule 261 (expression_statement -> SEMICOLON .)


state 335

    (244) selection_statement -> IF . LPAREN expression RPAREN push_scope compound_statement pop_scope
    (245) selection_statement -> IF . LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope

    LPAREN          shift and go to state 369


state 336

    (246) selection_statement -> SWITCH . LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope

    LPAREN          shift and go to state 370


state 337

    (252) iteration_statement -> WHILE . push_scope LPAREN expression RPAREN statement pop_scope
    (288) push_scope -> .

    LPAREN          reduce using rule 288 (push_scope -> .)

    push_scope                     shift and go to state 371

state 338

    (253) iteration_statement -> DO . push_scope statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope
    (288) push_scope -> .

    SEMICOLON       reduce using rule 288 (push_scope -> .)
    IF              reduce using rule 288 (push_scope -> .)
    SWITCH          reduce using rule 288 (push_scope -> .)
    WHILE           reduce using rule 288 (push_scope -> .)
    DO              reduce using rule 288 (push_scope -> .)
    FOR             reduce using rule 288 (push_scope -> .)
    BREAK           reduce using rule 288 (push_scope -> .)
    CONTINUE        reduce using rule 288 (push_scope -> .)
    RETURN          reduce using rule 288 (push_scope -> .)
    GOTO            reduce using rule 288 (push_scope -> .)
    TRY             reduce using rule 288 (push_scope -> .)
    THROW           reduce using rule 288 (push_scope -> .)
    CONST           reduce using rule 288 (push_scope -> .)
    ASM             reduce using rule 288 (push_scope -> .)
    TEMPLATE        reduce using rule 288 (push_scope -> .)
    TYPEDEF         reduce using rule 288 (push_scope -> .)
    DPLUSOP         reduce using rule 288 (push_scope -> .)
    DMINUSOP        reduce using rule 288 (push_scope -> .)
    SIZEOF          reduce using rule 288 (push_scope -> .)
    PLUSOP          reduce using rule 288 (push_scope -> .)
    MINUSOP         reduce using rule 288 (push_scope -> .)
    NOTSYM          reduce using rule 288 (push_scope -> .)
    BNOP            reduce using rule 288 (push_scope -> .)
    MULTOP          reduce using rule 288 (push_scope -> .)
    BANDOP          reduce using rule 288 (push_scope -> .)
    NEW             reduce using rule 288 (push_scope -> .)
    DELETE          reduce using rule 288 (push_scope -> .)
    CHAR            reduce using rule 288 (push_scope -> .)
    SHORT           reduce using rule 288 (push_scope -> .)
    INT             reduce using rule 288 (push_scope -> .)
    LONG            reduce using rule 288 (push_scope -> .)
    SIGNED          reduce using rule 288 (push_scope -> .)
    UNSIGNED        reduce using rule 288 (push_scope -> .)
    FLOAT           reduce using rule 288 (push_scope -> .)
    DOUBLE          reduce using rule 288 (push_scope -> .)
    VOID            reduce using rule 288 (push_scope -> .)
    STRING          reduce using rule 288 (push_scope -> .)
    AUTO            reduce using rule 288 (push_scope -> .)
    TYPE            reduce using rule 288 (push_scope -> .)
    CLASS           reduce using rule 288 (push_scope -> .)
    STRUCT          reduce using rule 288 (push_scope -> .)
    THIS            reduce using rule 288 (push_scope -> .)
    LPAREN          reduce using rule 288 (push_scope -> .)
    IDENTIFIER      reduce using rule 288 (push_scope -> .)
    DOUBLEBNOP      reduce using rule 288 (push_scope -> .)
    STRING_L        reduce using rule 288 (push_scope -> .)
    NUMBER          reduce using rule 288 (push_scope -> .)
    SCHAR           reduce using rule 288 (push_scope -> .)
    LCPAREN         reduce using rule 288 (push_scope -> .)

    push_scope                     shift and go to state 372

state 339

    (254) iteration_statement -> FOR . LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope
    (255) iteration_statement -> FOR . LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope
    (256) iteration_statement -> FOR . LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope
    (257) iteration_statement -> FOR . LPAREN push_scope for_init_statement SEMICOLON RPAREN statement pop_scope

    LPAREN          shift and go to state 373


state 340

    (239) jump_statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 374


state 341

    (240) jump_statement -> CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 375


state 342

    (241) jump_statement -> RETURN . expression SEMICOLON
    (242) jump_statement -> RETURN . SEMICOLON
    (43) expression -> . assignment_expression
    (44) expression -> . throw_expression
    (45) expression -> . expression COMMA assignment_expression
    (48) assignment_expression -> . conditional_expression
    (49) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (46) throw_expression -> . THROW expression
    (47) throw_expression -> . THROW
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMICOLON       shift and go to state 377
    THROW           shift and go to state 212
    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    THIS            shift and go to state 142
    LPAREN          shift and go to state 146
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    expression                     shift and go to state 376
    assignment_expression          shift and go to state 210
    throw_expression               shift and go to state 211
    conditional_expression         shift and go to state 149
    unary_expression               shift and go to state 150
    logical_OR_expression          shift and go to state 112
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    cast_expression                shift and go to state 124
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    logical_AND_expression         shift and go to state 113
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    inclusive_OR_expression        shift and go to state 114
    literal                        shift and go to state 141
    exclusive_OR_expression        shift and go to state 115
    AND_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 343

    (243) jump_statement -> GOTO . IDENTIFIER SEMICOLON

    IDENTIFIER      shift and go to state 378


state 344

    (262) declaration_statement -> declaration .

    RCPAREN         reduce using rule 262 (declaration_statement -> declaration .)
    SEMICOLON       reduce using rule 262 (declaration_statement -> declaration .)
    IF              reduce using rule 262 (declaration_statement -> declaration .)
    SWITCH          reduce using rule 262 (declaration_statement -> declaration .)
    WHILE           reduce using rule 262 (declaration_statement -> declaration .)
    DO              reduce using rule 262 (declaration_statement -> declaration .)
    FOR             reduce using rule 262 (declaration_statement -> declaration .)
    BREAK           reduce using rule 262 (declaration_statement -> declaration .)
    CONTINUE        reduce using rule 262 (declaration_statement -> declaration .)
    RETURN          reduce using rule 262 (declaration_statement -> declaration .)
    GOTO            reduce using rule 262 (declaration_statement -> declaration .)
    TRY             reduce using rule 262 (declaration_statement -> declaration .)
    THROW           reduce using rule 262 (declaration_statement -> declaration .)
    CONST           reduce using rule 262 (declaration_statement -> declaration .)
    ASM             reduce using rule 262 (declaration_statement -> declaration .)
    TEMPLATE        reduce using rule 262 (declaration_statement -> declaration .)
    TYPEDEF         reduce using rule 262 (declaration_statement -> declaration .)
    DPLUSOP         reduce using rule 262 (declaration_statement -> declaration .)
    DMINUSOP        reduce using rule 262 (declaration_statement -> declaration .)
    SIZEOF          reduce using rule 262 (declaration_statement -> declaration .)
    PLUSOP          reduce using rule 262 (declaration_statement -> declaration .)
    MINUSOP         reduce using rule 262 (declaration_statement -> declaration .)
    NOTSYM          reduce using rule 262 (declaration_statement -> declaration .)
    BNOP            reduce using rule 262 (declaration_statement -> declaration .)
    MULTOP          reduce using rule 262 (declaration_statement -> declaration .)
    BANDOP          reduce using rule 262 (declaration_statement -> declaration .)
    NEW             reduce using rule 262 (declaration_statement -> declaration .)
    DELETE          reduce using rule 262 (declaration_statement -> declaration .)
    CHAR            reduce using rule 262 (declaration_statement -> declaration .)
    SHORT           reduce using rule 262 (declaration_statement -> declaration .)
    INT             reduce using rule 262 (declaration_statement -> declaration .)
    LONG            reduce using rule 262 (declaration_statement -> declaration .)
    SIGNED          reduce using rule 262 (declaration_statement -> declaration .)
    UNSIGNED        reduce using rule 262 (declaration_statement -> declaration .)
    FLOAT           reduce using rule 262 (declaration_statement -> declaration .)
    DOUBLE          reduce using rule 262 (declaration_statement -> declaration .)
    VOID            reduce using rule 262 (declaration_statement -> declaration .)
    STRING          reduce using rule 262 (declaration_statement -> declaration .)
    AUTO            reduce using rule 262 (declaration_statement -> declaration .)
    TYPE            reduce using rule 262 (declaration_statement -> declaration .)
    CLASS           reduce using rule 262 (declaration_statement -> declaration .)
    STRUCT          reduce using rule 262 (declaration_statement -> declaration .)
    THIS            reduce using rule 262 (declaration_statement -> declaration .)
    LPAREN          reduce using rule 262 (declaration_statement -> declaration .)
    IDENTIFIER      reduce using rule 262 (declaration_statement -> declaration .)
    DOUBLEBNOP      reduce using rule 262 (declaration_statement -> declaration .)
    STRING_L        reduce using rule 262 (declaration_statement -> declaration .)
    NUMBER          reduce using rule 262 (declaration_statement -> declaration .)
    SCHAR           reduce using rule 262 (declaration_statement -> declaration .)
    LCPAREN         reduce using rule 262 (declaration_statement -> declaration .)
    CASE            reduce using rule 262 (declaration_statement -> declaration .)
    DEFAULT         reduce using rule 262 (declaration_statement -> declaration .)


state 345

    (247) try_block -> TRY . push_scope compound_statement pop_scope CATCH push_scope compound_statement pop_scope
    (288) push_scope -> .

    LCPAREN         reduce using rule 288 (push_scope -> .)

    push_scope                     shift and go to state 379

state 346

    (14) conditional_expression -> logical_OR_expression QUESMARK expression COLON . conditional_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR

    LPAREN          shift and go to state 126
    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    THIS            shift and go to state 142
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    logical_OR_expression          shift and go to state 112
    conditional_expression         shift and go to state 380
    logical_AND_expression         shift and go to state 113
    inclusive_OR_expression        shift and go to state 114
    exclusive_OR_expression        shift and go to state 115
    AND_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121
    cast_expression                shift and go to state 124
    unary_expression               shift and go to state 125
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    literal                        shift and go to state 141

state 347

    (105) cast_expression -> LPAREN type_name RPAREN cast_expression .

    MULTOP          reduce using rule 105 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    DIVOP           reduce using rule 105 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MODOP           reduce using rule 105 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    PLUSOP          reduce using rule 105 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MINUSOP         reduce using rule 105 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LSHIFT          reduce using rule 105 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RSHIFT          reduce using rule 105 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LTCOMP          reduce using rule 105 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    GTCOMP          reduce using rule 105 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LTECOMP         reduce using rule 105 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    GTECOMP         reduce using rule 105 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    EQCOMP          reduce using rule 105 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    NEQCOMP         reduce using rule 105 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    BANDOP          reduce using rule 105 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    XOROP           reduce using rule 105 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    OROP            reduce using rule 105 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    ANDOP           reduce using rule 105 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    QUESMARK        reduce using rule 105 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RSPAREN         reduce using rule 105 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RPAREN          reduce using rule 105 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    COMMA           reduce using rule 105 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    SEMICOLON       reduce using rule 105 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    EQUAL           reduce using rule 105 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MULTEQOP        reduce using rule 105 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    DIVEQOP         reduce using rule 105 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MODEQOP         reduce using rule 105 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    PLUSEQOP        reduce using rule 105 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MINUSEQOP       reduce using rule 105 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LSHIFTEQOP      reduce using rule 105 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RSHIFTEQOP      reduce using rule 105 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    BANDEQOP        reduce using rule 105 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    BOREQOP         reduce using rule 105 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RCPAREN         reduce using rule 105 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    COLON           reduce using rule 105 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RTEMPLATE       reduce using rule 105 (cast_expression -> LPAREN type_name RPAREN cast_expression .)


state 348

    (45) expression -> expression COMMA assignment_expression .

    RPAREN          reduce using rule 45 (expression -> expression COMMA assignment_expression .)
    COMMA           reduce using rule 45 (expression -> expression COMMA assignment_expression .)
    COLON           reduce using rule 45 (expression -> expression COMMA assignment_expression .)
    RSPAREN         reduce using rule 45 (expression -> expression COMMA assignment_expression .)
    RTEMPLATE       reduce using rule 45 (expression -> expression COMMA assignment_expression .)
    SEMICOLON       reduce using rule 45 (expression -> expression COMMA assignment_expression .)


state 349

    (89) postfix_expression -> postfix_expression LSPAREN expression RSPAREN .

    LSPAREN         reduce using rule 89 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    LPAREN          reduce using rule 89 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    DOT             reduce using rule 89 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    ARROW           reduce using rule 89 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    DPLUSOP         reduce using rule 89 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    DMINUSOP        reduce using rule 89 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    LTEMPLATE       reduce using rule 89 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    MULTOP          reduce using rule 89 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    DIVOP           reduce using rule 89 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    MODOP           reduce using rule 89 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    PLUSOP          reduce using rule 89 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    MINUSOP         reduce using rule 89 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    LSHIFT          reduce using rule 89 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    RSHIFT          reduce using rule 89 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    LTCOMP          reduce using rule 89 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    GTCOMP          reduce using rule 89 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    LTECOMP         reduce using rule 89 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    GTECOMP         reduce using rule 89 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    EQCOMP          reduce using rule 89 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    NEQCOMP         reduce using rule 89 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    BANDOP          reduce using rule 89 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    XOROP           reduce using rule 89 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    OROP            reduce using rule 89 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    ANDOP           reduce using rule 89 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    QUESMARK        reduce using rule 89 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    RSPAREN         reduce using rule 89 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    EQUAL           reduce using rule 89 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    MULTEQOP        reduce using rule 89 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    DIVEQOP         reduce using rule 89 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    MODEQOP         reduce using rule 89 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    PLUSEQOP        reduce using rule 89 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    MINUSEQOP       reduce using rule 89 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    LSHIFTEQOP      reduce using rule 89 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    RSHIFTEQOP      reduce using rule 89 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    BANDEQOP        reduce using rule 89 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    BOREQOP         reduce using rule 89 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    RPAREN          reduce using rule 89 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    COMMA           reduce using rule 89 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    SEMICOLON       reduce using rule 89 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    RCPAREN         reduce using rule 89 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    COLON           reduce using rule 89 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    RTEMPLATE       reduce using rule 89 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)


state 350

    (90) postfix_expression -> postfix_expression LPAREN expression_list RPAREN .

    LSPAREN         reduce using rule 90 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    LPAREN          reduce using rule 90 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    DOT             reduce using rule 90 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    ARROW           reduce using rule 90 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    DPLUSOP         reduce using rule 90 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    DMINUSOP        reduce using rule 90 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    LTEMPLATE       reduce using rule 90 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    MULTOP          reduce using rule 90 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    DIVOP           reduce using rule 90 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    MODOP           reduce using rule 90 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    PLUSOP          reduce using rule 90 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    MINUSOP         reduce using rule 90 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    LSHIFT          reduce using rule 90 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    RSHIFT          reduce using rule 90 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    LTCOMP          reduce using rule 90 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    GTCOMP          reduce using rule 90 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    LTECOMP         reduce using rule 90 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    GTECOMP         reduce using rule 90 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    EQCOMP          reduce using rule 90 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    NEQCOMP         reduce using rule 90 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    BANDOP          reduce using rule 90 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    XOROP           reduce using rule 90 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    OROP            reduce using rule 90 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    ANDOP           reduce using rule 90 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    QUESMARK        reduce using rule 90 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    RSPAREN         reduce using rule 90 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    EQUAL           reduce using rule 90 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    MULTEQOP        reduce using rule 90 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    DIVEQOP         reduce using rule 90 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    MODEQOP         reduce using rule 90 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    PLUSEQOP        reduce using rule 90 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    MINUSEQOP       reduce using rule 90 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    LSHIFTEQOP      reduce using rule 90 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    RSHIFTEQOP      reduce using rule 90 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    BANDEQOP        reduce using rule 90 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    BOREQOP         reduce using rule 90 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    RPAREN          reduce using rule 90 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 90 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    SEMICOLON       reduce using rule 90 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    RCPAREN         reduce using rule 90 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    COLON           reduce using rule 90 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    RTEMPLATE       reduce using rule 90 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)


state 351

    (91) postfix_expression -> postfix_expression template_class_name LPAREN expression_list . RPAREN
    (287) expression_list -> expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 381
    COMMA           shift and go to state 232


state 352

    (66) unary_expression -> SIZEOF LPAREN type_name RPAREN .

    MULTOP          reduce using rule 66 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    DIVOP           reduce using rule 66 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MODOP           reduce using rule 66 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    PLUSOP          reduce using rule 66 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MINUSOP         reduce using rule 66 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LSHIFT          reduce using rule 66 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RSHIFT          reduce using rule 66 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LTCOMP          reduce using rule 66 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    GTCOMP          reduce using rule 66 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LTECOMP         reduce using rule 66 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    GTECOMP         reduce using rule 66 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    EQCOMP          reduce using rule 66 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    NEQCOMP         reduce using rule 66 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    BANDOP          reduce using rule 66 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    XOROP           reduce using rule 66 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    OROP            reduce using rule 66 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    ANDOP           reduce using rule 66 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    QUESMARK        reduce using rule 66 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RSPAREN         reduce using rule 66 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    EQUAL           reduce using rule 66 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MULTEQOP        reduce using rule 66 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    DIVEQOP         reduce using rule 66 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MODEQOP         reduce using rule 66 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    PLUSEQOP        reduce using rule 66 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MINUSEQOP       reduce using rule 66 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LSHIFTEQOP      reduce using rule 66 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RSHIFTEQOP      reduce using rule 66 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    BANDEQOP        reduce using rule 66 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    BOREQOP         reduce using rule 66 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RPAREN          reduce using rule 66 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    COMMA           reduce using rule 66 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    SEMICOLON       reduce using rule 66 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RCPAREN         reduce using rule 66 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    COLON           reduce using rule 66 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RTEMPLATE       reduce using rule 66 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)


state 353

    (80) new_initializer -> LPAREN initializer_list . RPAREN
    (282) initializer_list -> initializer_list . COMMA assignment_expression

    RPAREN          shift and go to state 382
    COMMA           shift and go to state 383


state 354

    (81) new_initializer -> LPAREN RPAREN .

    MULTOP          reduce using rule 81 (new_initializer -> LPAREN RPAREN .)
    DIVOP           reduce using rule 81 (new_initializer -> LPAREN RPAREN .)
    MODOP           reduce using rule 81 (new_initializer -> LPAREN RPAREN .)
    PLUSOP          reduce using rule 81 (new_initializer -> LPAREN RPAREN .)
    MINUSOP         reduce using rule 81 (new_initializer -> LPAREN RPAREN .)
    LSHIFT          reduce using rule 81 (new_initializer -> LPAREN RPAREN .)
    RSHIFT          reduce using rule 81 (new_initializer -> LPAREN RPAREN .)
    LTCOMP          reduce using rule 81 (new_initializer -> LPAREN RPAREN .)
    GTCOMP          reduce using rule 81 (new_initializer -> LPAREN RPAREN .)
    LTECOMP         reduce using rule 81 (new_initializer -> LPAREN RPAREN .)
    GTECOMP         reduce using rule 81 (new_initializer -> LPAREN RPAREN .)
    EQCOMP          reduce using rule 81 (new_initializer -> LPAREN RPAREN .)
    NEQCOMP         reduce using rule 81 (new_initializer -> LPAREN RPAREN .)
    BANDOP          reduce using rule 81 (new_initializer -> LPAREN RPAREN .)
    XOROP           reduce using rule 81 (new_initializer -> LPAREN RPAREN .)
    OROP            reduce using rule 81 (new_initializer -> LPAREN RPAREN .)
    ANDOP           reduce using rule 81 (new_initializer -> LPAREN RPAREN .)
    QUESMARK        reduce using rule 81 (new_initializer -> LPAREN RPAREN .)
    RSPAREN         reduce using rule 81 (new_initializer -> LPAREN RPAREN .)
    EQUAL           reduce using rule 81 (new_initializer -> LPAREN RPAREN .)
    MULTEQOP        reduce using rule 81 (new_initializer -> LPAREN RPAREN .)
    DIVEQOP         reduce using rule 81 (new_initializer -> LPAREN RPAREN .)
    MODEQOP         reduce using rule 81 (new_initializer -> LPAREN RPAREN .)
    PLUSEQOP        reduce using rule 81 (new_initializer -> LPAREN RPAREN .)
    MINUSEQOP       reduce using rule 81 (new_initializer -> LPAREN RPAREN .)
    LSHIFTEQOP      reduce using rule 81 (new_initializer -> LPAREN RPAREN .)
    RSHIFTEQOP      reduce using rule 81 (new_initializer -> LPAREN RPAREN .)
    BANDEQOP        reduce using rule 81 (new_initializer -> LPAREN RPAREN .)
    BOREQOP         reduce using rule 81 (new_initializer -> LPAREN RPAREN .)
    RPAREN          reduce using rule 81 (new_initializer -> LPAREN RPAREN .)
    COMMA           reduce using rule 81 (new_initializer -> LPAREN RPAREN .)
    SEMICOLON       reduce using rule 81 (new_initializer -> LPAREN RPAREN .)
    RCPAREN         reduce using rule 81 (new_initializer -> LPAREN RPAREN .)
    COLON           reduce using rule 81 (new_initializer -> LPAREN RPAREN .)
    RTEMPLATE       reduce using rule 81 (new_initializer -> LPAREN RPAREN .)


state 355

    (72) allocation_expression -> NEW LPAREN type_name RPAREN . new_initializer
    (73) allocation_expression -> NEW LPAREN type_name RPAREN .
    (80) new_initializer -> . LPAREN initializer_list RPAREN
    (81) new_initializer -> . LPAREN RPAREN

    MULTOP          reduce using rule 73 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    DIVOP           reduce using rule 73 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    MODOP           reduce using rule 73 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    PLUSOP          reduce using rule 73 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    MINUSOP         reduce using rule 73 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    LSHIFT          reduce using rule 73 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    RSHIFT          reduce using rule 73 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    LTCOMP          reduce using rule 73 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    GTCOMP          reduce using rule 73 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    LTECOMP         reduce using rule 73 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    GTECOMP         reduce using rule 73 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    EQCOMP          reduce using rule 73 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    NEQCOMP         reduce using rule 73 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    BANDOP          reduce using rule 73 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    XOROP           reduce using rule 73 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    OROP            reduce using rule 73 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    ANDOP           reduce using rule 73 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    QUESMARK        reduce using rule 73 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    RSPAREN         reduce using rule 73 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    EQUAL           reduce using rule 73 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    MULTEQOP        reduce using rule 73 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    DIVEQOP         reduce using rule 73 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    MODEQOP         reduce using rule 73 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    PLUSEQOP        reduce using rule 73 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    MINUSEQOP       reduce using rule 73 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    LSHIFTEQOP      reduce using rule 73 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    RSHIFTEQOP      reduce using rule 73 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    BANDEQOP        reduce using rule 73 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    BOREQOP         reduce using rule 73 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    RPAREN          reduce using rule 73 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    COMMA           reduce using rule 73 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    SEMICOLON       reduce using rule 73 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    RCPAREN         reduce using rule 73 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    COLON           reduce using rule 73 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    RTEMPLATE       reduce using rule 73 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    LPAREN          shift and go to state 304

    new_initializer                shift and go to state 384

state 356

    (76) new_declarator -> new_declarator MULTOP .

    MULTOP          reduce using rule 76 (new_declarator -> new_declarator MULTOP .)
    LSPAREN         reduce using rule 76 (new_declarator -> new_declarator MULTOP .)
    LPAREN          reduce using rule 76 (new_declarator -> new_declarator MULTOP .)
    DIVOP           reduce using rule 76 (new_declarator -> new_declarator MULTOP .)
    MODOP           reduce using rule 76 (new_declarator -> new_declarator MULTOP .)
    PLUSOP          reduce using rule 76 (new_declarator -> new_declarator MULTOP .)
    MINUSOP         reduce using rule 76 (new_declarator -> new_declarator MULTOP .)
    LSHIFT          reduce using rule 76 (new_declarator -> new_declarator MULTOP .)
    RSHIFT          reduce using rule 76 (new_declarator -> new_declarator MULTOP .)
    LTCOMP          reduce using rule 76 (new_declarator -> new_declarator MULTOP .)
    GTCOMP          reduce using rule 76 (new_declarator -> new_declarator MULTOP .)
    LTECOMP         reduce using rule 76 (new_declarator -> new_declarator MULTOP .)
    GTECOMP         reduce using rule 76 (new_declarator -> new_declarator MULTOP .)
    EQCOMP          reduce using rule 76 (new_declarator -> new_declarator MULTOP .)
    NEQCOMP         reduce using rule 76 (new_declarator -> new_declarator MULTOP .)
    BANDOP          reduce using rule 76 (new_declarator -> new_declarator MULTOP .)
    XOROP           reduce using rule 76 (new_declarator -> new_declarator MULTOP .)
    OROP            reduce using rule 76 (new_declarator -> new_declarator MULTOP .)
    ANDOP           reduce using rule 76 (new_declarator -> new_declarator MULTOP .)
    QUESMARK        reduce using rule 76 (new_declarator -> new_declarator MULTOP .)
    RSPAREN         reduce using rule 76 (new_declarator -> new_declarator MULTOP .)
    EQUAL           reduce using rule 76 (new_declarator -> new_declarator MULTOP .)
    MULTEQOP        reduce using rule 76 (new_declarator -> new_declarator MULTOP .)
    DIVEQOP         reduce using rule 76 (new_declarator -> new_declarator MULTOP .)
    MODEQOP         reduce using rule 76 (new_declarator -> new_declarator MULTOP .)
    PLUSEQOP        reduce using rule 76 (new_declarator -> new_declarator MULTOP .)
    MINUSEQOP       reduce using rule 76 (new_declarator -> new_declarator MULTOP .)
    LSHIFTEQOP      reduce using rule 76 (new_declarator -> new_declarator MULTOP .)
    RSHIFTEQOP      reduce using rule 76 (new_declarator -> new_declarator MULTOP .)
    BANDEQOP        reduce using rule 76 (new_declarator -> new_declarator MULTOP .)
    BOREQOP         reduce using rule 76 (new_declarator -> new_declarator MULTOP .)
    RPAREN          reduce using rule 76 (new_declarator -> new_declarator MULTOP .)
    COMMA           reduce using rule 76 (new_declarator -> new_declarator MULTOP .)
    SEMICOLON       reduce using rule 76 (new_declarator -> new_declarator MULTOP .)
    RCPAREN         reduce using rule 76 (new_declarator -> new_declarator MULTOP .)
    COLON           reduce using rule 76 (new_declarator -> new_declarator MULTOP .)
    RTEMPLATE       reduce using rule 76 (new_declarator -> new_declarator MULTOP .)


state 357

    (78) new_declarator -> new_declarator LSPAREN . expression RSPAREN
    (43) expression -> . assignment_expression
    (44) expression -> . throw_expression
    (45) expression -> . expression COMMA assignment_expression
    (48) assignment_expression -> . conditional_expression
    (49) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (46) throw_expression -> . THROW expression
    (47) throw_expression -> . THROW
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression

    THROW           shift and go to state 212
    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    THIS            shift and go to state 142
    LPAREN          shift and go to state 146
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    expression                     shift and go to state 385
    assignment_expression          shift and go to state 210
    throw_expression               shift and go to state 211
    conditional_expression         shift and go to state 149
    unary_expression               shift and go to state 150
    logical_OR_expression          shift and go to state 112
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    cast_expression                shift and go to state 124
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    logical_AND_expression         shift and go to state 113
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    inclusive_OR_expression        shift and go to state 114
    literal                        shift and go to state 141
    exclusive_OR_expression        shift and go to state 115
    AND_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 358

    (79) new_declarator -> LSPAREN expression . RSPAREN
    (45) expression -> expression . COMMA assignment_expression

    RSPAREN         shift and go to state 386
    COMMA           shift and go to state 294


state 359

    (283) initializer_list -> LCPAREN initializer_list RCPAREN .

    RCPAREN         reduce using rule 283 (initializer_list -> LCPAREN initializer_list RCPAREN .)
    COMMA           reduce using rule 283 (initializer_list -> LCPAREN initializer_list RCPAREN .)
    RPAREN          reduce using rule 283 (initializer_list -> LCPAREN initializer_list RCPAREN .)


state 360

    (284) initializer_list -> LCPAREN initializer_list COMMA . RCPAREN
    (282) initializer_list -> initializer_list COMMA . assignment_expression
    (48) assignment_expression -> . conditional_expression
    (49) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RCPAREN         shift and go to state 387
    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    THIS            shift and go to state 142
    LPAREN          shift and go to state 146
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    assignment_expression          shift and go to state 362
    conditional_expression         shift and go to state 149
    unary_expression               shift and go to state 150
    logical_OR_expression          shift and go to state 112
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    cast_expression                shift and go to state 124
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    logical_AND_expression         shift and go to state 113
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    inclusive_OR_expression        shift and go to state 114
    literal                        shift and go to state 141
    exclusive_OR_expression        shift and go to state 115
    AND_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 361

    (279) initializer -> EQUAL LCPAREN initializer_list COMMA RCPAREN .

    SEMICOLON       reduce using rule 279 (initializer -> EQUAL LCPAREN initializer_list COMMA RCPAREN .)
    COMMA           reduce using rule 279 (initializer -> EQUAL LCPAREN initializer_list COMMA RCPAREN .)


state 362

    (282) initializer_list -> initializer_list COMMA assignment_expression .

    RCPAREN         reduce using rule 282 (initializer_list -> initializer_list COMMA assignment_expression .)
    COMMA           reduce using rule 282 (initializer_list -> initializer_list COMMA assignment_expression .)
    RPAREN          reduce using rule 282 (initializer_list -> initializer_list COMMA assignment_expression .)


state 363

    (224) function_definition -> type_specifier_ declarator func_push_scope arg_list RPAREN . fct_body pop_scope
    (227) fct_body -> . compound_statement
    (228) compound_statement -> . LCPAREN statement_list RCPAREN
    (229) compound_statement -> . LCPAREN RCPAREN

    LCPAREN         shift and go to state 271

    fct_body                       shift and go to state 268
    compound_statement             shift and go to state 270

state 364

    (199) base_specifier -> access_specifier class_key IDENTIFIER template_class_name .

    COMMA           reduce using rule 199 (base_specifier -> access_specifier class_key IDENTIFIER template_class_name .)
    LCPAREN         reduce using rule 199 (base_specifier -> access_specifier class_key IDENTIFIER template_class_name .)


state 365

    (228) compound_statement -> LCPAREN statement_list RCPAREN .

    CONST           reduce using rule 228 (compound_statement -> LCPAREN statement_list RCPAREN .)
    ASM             reduce using rule 228 (compound_statement -> LCPAREN statement_list RCPAREN .)
    TEMPLATE        reduce using rule 228 (compound_statement -> LCPAREN statement_list RCPAREN .)
    TYPEDEF         reduce using rule 228 (compound_statement -> LCPAREN statement_list RCPAREN .)
    CHAR            reduce using rule 228 (compound_statement -> LCPAREN statement_list RCPAREN .)
    SHORT           reduce using rule 228 (compound_statement -> LCPAREN statement_list RCPAREN .)
    INT             reduce using rule 228 (compound_statement -> LCPAREN statement_list RCPAREN .)
    LONG            reduce using rule 228 (compound_statement -> LCPAREN statement_list RCPAREN .)
    SIGNED          reduce using rule 228 (compound_statement -> LCPAREN statement_list RCPAREN .)
    UNSIGNED        reduce using rule 228 (compound_statement -> LCPAREN statement_list RCPAREN .)
    FLOAT           reduce using rule 228 (compound_statement -> LCPAREN statement_list RCPAREN .)
    DOUBLE          reduce using rule 228 (compound_statement -> LCPAREN statement_list RCPAREN .)
    VOID            reduce using rule 228 (compound_statement -> LCPAREN statement_list RCPAREN .)
    STRING          reduce using rule 228 (compound_statement -> LCPAREN statement_list RCPAREN .)
    AUTO            reduce using rule 228 (compound_statement -> LCPAREN statement_list RCPAREN .)
    TYPE            reduce using rule 228 (compound_statement -> LCPAREN statement_list RCPAREN .)
    CLASS           reduce using rule 228 (compound_statement -> LCPAREN statement_list RCPAREN .)
    STRUCT          reduce using rule 228 (compound_statement -> LCPAREN statement_list RCPAREN .)
    $end            reduce using rule 228 (compound_statement -> LCPAREN statement_list RCPAREN .)
    RCPAREN         reduce using rule 228 (compound_statement -> LCPAREN statement_list RCPAREN .)
    SEMICOLON       reduce using rule 228 (compound_statement -> LCPAREN statement_list RCPAREN .)
    IF              reduce using rule 228 (compound_statement -> LCPAREN statement_list RCPAREN .)
    SWITCH          reduce using rule 228 (compound_statement -> LCPAREN statement_list RCPAREN .)
    WHILE           reduce using rule 228 (compound_statement -> LCPAREN statement_list RCPAREN .)
    DO              reduce using rule 228 (compound_statement -> LCPAREN statement_list RCPAREN .)
    FOR             reduce using rule 228 (compound_statement -> LCPAREN statement_list RCPAREN .)
    BREAK           reduce using rule 228 (compound_statement -> LCPAREN statement_list RCPAREN .)
    CONTINUE        reduce using rule 228 (compound_statement -> LCPAREN statement_list RCPAREN .)
    RETURN          reduce using rule 228 (compound_statement -> LCPAREN statement_list RCPAREN .)
    GOTO            reduce using rule 228 (compound_statement -> LCPAREN statement_list RCPAREN .)
    TRY             reduce using rule 228 (compound_statement -> LCPAREN statement_list RCPAREN .)
    THROW           reduce using rule 228 (compound_statement -> LCPAREN statement_list RCPAREN .)
    DPLUSOP         reduce using rule 228 (compound_statement -> LCPAREN statement_list RCPAREN .)
    DMINUSOP        reduce using rule 228 (compound_statement -> LCPAREN statement_list RCPAREN .)
    SIZEOF          reduce using rule 228 (compound_statement -> LCPAREN statement_list RCPAREN .)
    PLUSOP          reduce using rule 228 (compound_statement -> LCPAREN statement_list RCPAREN .)
    MINUSOP         reduce using rule 228 (compound_statement -> LCPAREN statement_list RCPAREN .)
    NOTSYM          reduce using rule 228 (compound_statement -> LCPAREN statement_list RCPAREN .)
    BNOP            reduce using rule 228 (compound_statement -> LCPAREN statement_list RCPAREN .)
    MULTOP          reduce using rule 228 (compound_statement -> LCPAREN statement_list RCPAREN .)
    BANDOP          reduce using rule 228 (compound_statement -> LCPAREN statement_list RCPAREN .)
    NEW             reduce using rule 228 (compound_statement -> LCPAREN statement_list RCPAREN .)
    DELETE          reduce using rule 228 (compound_statement -> LCPAREN statement_list RCPAREN .)
    THIS            reduce using rule 228 (compound_statement -> LCPAREN statement_list RCPAREN .)
    LPAREN          reduce using rule 228 (compound_statement -> LCPAREN statement_list RCPAREN .)
    IDENTIFIER      reduce using rule 228 (compound_statement -> LCPAREN statement_list RCPAREN .)
    DOUBLEBNOP      reduce using rule 228 (compound_statement -> LCPAREN statement_list RCPAREN .)
    STRING_L        reduce using rule 228 (compound_statement -> LCPAREN statement_list RCPAREN .)
    NUMBER          reduce using rule 228 (compound_statement -> LCPAREN statement_list RCPAREN .)
    SCHAR           reduce using rule 228 (compound_statement -> LCPAREN statement_list RCPAREN .)
    LCPAREN         reduce using rule 228 (compound_statement -> LCPAREN statement_list RCPAREN .)
    CASE            reduce using rule 228 (compound_statement -> LCPAREN statement_list RCPAREN .)
    DEFAULT         reduce using rule 228 (compound_statement -> LCPAREN statement_list RCPAREN .)
    PRIVATE         reduce using rule 228 (compound_statement -> LCPAREN statement_list RCPAREN .)
    PROTECTED       reduce using rule 228 (compound_statement -> LCPAREN statement_list RCPAREN .)
    PUBLIC          reduce using rule 228 (compound_statement -> LCPAREN statement_list RCPAREN .)
    CATCH           reduce using rule 228 (compound_statement -> LCPAREN statement_list RCPAREN .)
    ELSE            reduce using rule 228 (compound_statement -> LCPAREN statement_list RCPAREN .)


state 366

    (231) statement_list -> statement_list statement .

    RCPAREN         reduce using rule 231 (statement_list -> statement_list statement .)
    SEMICOLON       reduce using rule 231 (statement_list -> statement_list statement .)
    IF              reduce using rule 231 (statement_list -> statement_list statement .)
    SWITCH          reduce using rule 231 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 231 (statement_list -> statement_list statement .)
    DO              reduce using rule 231 (statement_list -> statement_list statement .)
    FOR             reduce using rule 231 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 231 (statement_list -> statement_list statement .)
    CONTINUE        reduce using rule 231 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 231 (statement_list -> statement_list statement .)
    GOTO            reduce using rule 231 (statement_list -> statement_list statement .)
    TRY             reduce using rule 231 (statement_list -> statement_list statement .)
    THROW           reduce using rule 231 (statement_list -> statement_list statement .)
    CONST           reduce using rule 231 (statement_list -> statement_list statement .)
    ASM             reduce using rule 231 (statement_list -> statement_list statement .)
    TEMPLATE        reduce using rule 231 (statement_list -> statement_list statement .)
    TYPEDEF         reduce using rule 231 (statement_list -> statement_list statement .)
    DPLUSOP         reduce using rule 231 (statement_list -> statement_list statement .)
    DMINUSOP        reduce using rule 231 (statement_list -> statement_list statement .)
    SIZEOF          reduce using rule 231 (statement_list -> statement_list statement .)
    PLUSOP          reduce using rule 231 (statement_list -> statement_list statement .)
    MINUSOP         reduce using rule 231 (statement_list -> statement_list statement .)
    NOTSYM          reduce using rule 231 (statement_list -> statement_list statement .)
    BNOP            reduce using rule 231 (statement_list -> statement_list statement .)
    MULTOP          reduce using rule 231 (statement_list -> statement_list statement .)
    BANDOP          reduce using rule 231 (statement_list -> statement_list statement .)
    NEW             reduce using rule 231 (statement_list -> statement_list statement .)
    DELETE          reduce using rule 231 (statement_list -> statement_list statement .)
    CHAR            reduce using rule 231 (statement_list -> statement_list statement .)
    SHORT           reduce using rule 231 (statement_list -> statement_list statement .)
    INT             reduce using rule 231 (statement_list -> statement_list statement .)
    LONG            reduce using rule 231 (statement_list -> statement_list statement .)
    SIGNED          reduce using rule 231 (statement_list -> statement_list statement .)
    UNSIGNED        reduce using rule 231 (statement_list -> statement_list statement .)
    FLOAT           reduce using rule 231 (statement_list -> statement_list statement .)
    DOUBLE          reduce using rule 231 (statement_list -> statement_list statement .)
    VOID            reduce using rule 231 (statement_list -> statement_list statement .)
    STRING          reduce using rule 231 (statement_list -> statement_list statement .)
    AUTO            reduce using rule 231 (statement_list -> statement_list statement .)
    TYPE            reduce using rule 231 (statement_list -> statement_list statement .)
    CLASS           reduce using rule 231 (statement_list -> statement_list statement .)
    STRUCT          reduce using rule 231 (statement_list -> statement_list statement .)
    THIS            reduce using rule 231 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 231 (statement_list -> statement_list statement .)
    IDENTIFIER      reduce using rule 231 (statement_list -> statement_list statement .)
    DOUBLEBNOP      reduce using rule 231 (statement_list -> statement_list statement .)
    STRING_L        reduce using rule 231 (statement_list -> statement_list statement .)
    NUMBER          reduce using rule 231 (statement_list -> statement_list statement .)
    SCHAR           reduce using rule 231 (statement_list -> statement_list statement .)
    LCPAREN         reduce using rule 231 (statement_list -> statement_list statement .)
    CASE            reduce using rule 231 (statement_list -> statement_list statement .)
    DEFAULT         reduce using rule 231 (statement_list -> statement_list statement .)


state 367

    (233) statement -> push_scope compound_statement . pop_scope
    (289) pop_scope -> .

    RCPAREN         reduce using rule 289 (pop_scope -> .)
    SEMICOLON       reduce using rule 289 (pop_scope -> .)
    IF              reduce using rule 289 (pop_scope -> .)
    SWITCH          reduce using rule 289 (pop_scope -> .)
    WHILE           reduce using rule 289 (pop_scope -> .)
    DO              reduce using rule 289 (pop_scope -> .)
    FOR             reduce using rule 289 (pop_scope -> .)
    BREAK           reduce using rule 289 (pop_scope -> .)
    CONTINUE        reduce using rule 289 (pop_scope -> .)
    RETURN          reduce using rule 289 (pop_scope -> .)
    GOTO            reduce using rule 289 (pop_scope -> .)
    TRY             reduce using rule 289 (pop_scope -> .)
    THROW           reduce using rule 289 (pop_scope -> .)
    CONST           reduce using rule 289 (pop_scope -> .)
    ASM             reduce using rule 289 (pop_scope -> .)
    TEMPLATE        reduce using rule 289 (pop_scope -> .)
    TYPEDEF         reduce using rule 289 (pop_scope -> .)
    DPLUSOP         reduce using rule 289 (pop_scope -> .)
    DMINUSOP        reduce using rule 289 (pop_scope -> .)
    SIZEOF          reduce using rule 289 (pop_scope -> .)
    PLUSOP          reduce using rule 289 (pop_scope -> .)
    MINUSOP         reduce using rule 289 (pop_scope -> .)
    NOTSYM          reduce using rule 289 (pop_scope -> .)
    BNOP            reduce using rule 289 (pop_scope -> .)
    MULTOP          reduce using rule 289 (pop_scope -> .)
    BANDOP          reduce using rule 289 (pop_scope -> .)
    NEW             reduce using rule 289 (pop_scope -> .)
    DELETE          reduce using rule 289 (pop_scope -> .)
    CHAR            reduce using rule 289 (pop_scope -> .)
    SHORT           reduce using rule 289 (pop_scope -> .)
    INT             reduce using rule 289 (pop_scope -> .)
    LONG            reduce using rule 289 (pop_scope -> .)
    SIGNED          reduce using rule 289 (pop_scope -> .)
    UNSIGNED        reduce using rule 289 (pop_scope -> .)
    FLOAT           reduce using rule 289 (pop_scope -> .)
    DOUBLE          reduce using rule 289 (pop_scope -> .)
    VOID            reduce using rule 289 (pop_scope -> .)
    STRING          reduce using rule 289 (pop_scope -> .)
    AUTO            reduce using rule 289 (pop_scope -> .)
    TYPE            reduce using rule 289 (pop_scope -> .)
    CLASS           reduce using rule 289 (pop_scope -> .)
    STRUCT          reduce using rule 289 (pop_scope -> .)
    THIS            reduce using rule 289 (pop_scope -> .)
    LPAREN          reduce using rule 289 (pop_scope -> .)
    IDENTIFIER      reduce using rule 289 (pop_scope -> .)
    DOUBLEBNOP      reduce using rule 289 (pop_scope -> .)
    STRING_L        reduce using rule 289 (pop_scope -> .)
    NUMBER          reduce using rule 289 (pop_scope -> .)
    SCHAR           reduce using rule 289 (pop_scope -> .)
    LCPAREN         reduce using rule 289 (pop_scope -> .)
    CASE            reduce using rule 289 (pop_scope -> .)
    DEFAULT         reduce using rule 289 (pop_scope -> .)

    pop_scope                      shift and go to state 388

state 368

    (260) expression_statement -> expression SEMICOLON .

    RCPAREN         reduce using rule 260 (expression_statement -> expression SEMICOLON .)
    SEMICOLON       reduce using rule 260 (expression_statement -> expression SEMICOLON .)
    IF              reduce using rule 260 (expression_statement -> expression SEMICOLON .)
    SWITCH          reduce using rule 260 (expression_statement -> expression SEMICOLON .)
    WHILE           reduce using rule 260 (expression_statement -> expression SEMICOLON .)
    DO              reduce using rule 260 (expression_statement -> expression SEMICOLON .)
    FOR             reduce using rule 260 (expression_statement -> expression SEMICOLON .)
    BREAK           reduce using rule 260 (expression_statement -> expression SEMICOLON .)
    CONTINUE        reduce using rule 260 (expression_statement -> expression SEMICOLON .)
    RETURN          reduce using rule 260 (expression_statement -> expression SEMICOLON .)
    GOTO            reduce using rule 260 (expression_statement -> expression SEMICOLON .)
    TRY             reduce using rule 260 (expression_statement -> expression SEMICOLON .)
    THROW           reduce using rule 260 (expression_statement -> expression SEMICOLON .)
    CONST           reduce using rule 260 (expression_statement -> expression SEMICOLON .)
    ASM             reduce using rule 260 (expression_statement -> expression SEMICOLON .)
    TEMPLATE        reduce using rule 260 (expression_statement -> expression SEMICOLON .)
    TYPEDEF         reduce using rule 260 (expression_statement -> expression SEMICOLON .)
    DPLUSOP         reduce using rule 260 (expression_statement -> expression SEMICOLON .)
    DMINUSOP        reduce using rule 260 (expression_statement -> expression SEMICOLON .)
    SIZEOF          reduce using rule 260 (expression_statement -> expression SEMICOLON .)
    PLUSOP          reduce using rule 260 (expression_statement -> expression SEMICOLON .)
    MINUSOP         reduce using rule 260 (expression_statement -> expression SEMICOLON .)
    NOTSYM          reduce using rule 260 (expression_statement -> expression SEMICOLON .)
    BNOP            reduce using rule 260 (expression_statement -> expression SEMICOLON .)
    MULTOP          reduce using rule 260 (expression_statement -> expression SEMICOLON .)
    BANDOP          reduce using rule 260 (expression_statement -> expression SEMICOLON .)
    NEW             reduce using rule 260 (expression_statement -> expression SEMICOLON .)
    DELETE          reduce using rule 260 (expression_statement -> expression SEMICOLON .)
    CHAR            reduce using rule 260 (expression_statement -> expression SEMICOLON .)
    SHORT           reduce using rule 260 (expression_statement -> expression SEMICOLON .)
    INT             reduce using rule 260 (expression_statement -> expression SEMICOLON .)
    LONG            reduce using rule 260 (expression_statement -> expression SEMICOLON .)
    SIGNED          reduce using rule 260 (expression_statement -> expression SEMICOLON .)
    UNSIGNED        reduce using rule 260 (expression_statement -> expression SEMICOLON .)
    FLOAT           reduce using rule 260 (expression_statement -> expression SEMICOLON .)
    DOUBLE          reduce using rule 260 (expression_statement -> expression SEMICOLON .)
    VOID            reduce using rule 260 (expression_statement -> expression SEMICOLON .)
    STRING          reduce using rule 260 (expression_statement -> expression SEMICOLON .)
    AUTO            reduce using rule 260 (expression_statement -> expression SEMICOLON .)
    TYPE            reduce using rule 260 (expression_statement -> expression SEMICOLON .)
    CLASS           reduce using rule 260 (expression_statement -> expression SEMICOLON .)
    STRUCT          reduce using rule 260 (expression_statement -> expression SEMICOLON .)
    THIS            reduce using rule 260 (expression_statement -> expression SEMICOLON .)
    LPAREN          reduce using rule 260 (expression_statement -> expression SEMICOLON .)
    IDENTIFIER      reduce using rule 260 (expression_statement -> expression SEMICOLON .)
    DOUBLEBNOP      reduce using rule 260 (expression_statement -> expression SEMICOLON .)
    STRING_L        reduce using rule 260 (expression_statement -> expression SEMICOLON .)
    NUMBER          reduce using rule 260 (expression_statement -> expression SEMICOLON .)
    SCHAR           reduce using rule 260 (expression_statement -> expression SEMICOLON .)
    LCPAREN         reduce using rule 260 (expression_statement -> expression SEMICOLON .)
    CASE            reduce using rule 260 (expression_statement -> expression SEMICOLON .)
    DEFAULT         reduce using rule 260 (expression_statement -> expression SEMICOLON .)


state 369

    (244) selection_statement -> IF LPAREN . expression RPAREN push_scope compound_statement pop_scope
    (245) selection_statement -> IF LPAREN . expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope
    (43) expression -> . assignment_expression
    (44) expression -> . throw_expression
    (45) expression -> . expression COMMA assignment_expression
    (48) assignment_expression -> . conditional_expression
    (49) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (46) throw_expression -> . THROW expression
    (47) throw_expression -> . THROW
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression

    THROW           shift and go to state 212
    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    THIS            shift and go to state 142
    LPAREN          shift and go to state 146
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    expression                     shift and go to state 389
    assignment_expression          shift and go to state 210
    throw_expression               shift and go to state 211
    conditional_expression         shift and go to state 149
    unary_expression               shift and go to state 150
    logical_OR_expression          shift and go to state 112
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    cast_expression                shift and go to state 124
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    logical_AND_expression         shift and go to state 113
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    inclusive_OR_expression        shift and go to state 114
    literal                        shift and go to state 141
    exclusive_OR_expression        shift and go to state 115
    AND_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 370

    (246) selection_statement -> SWITCH LPAREN . expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope
    (43) expression -> . assignment_expression
    (44) expression -> . throw_expression
    (45) expression -> . expression COMMA assignment_expression
    (48) assignment_expression -> . conditional_expression
    (49) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (46) throw_expression -> . THROW expression
    (47) throw_expression -> . THROW
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression

    THROW           shift and go to state 212
    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    THIS            shift and go to state 142
    LPAREN          shift and go to state 146
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    expression                     shift and go to state 390
    assignment_expression          shift and go to state 210
    throw_expression               shift and go to state 211
    conditional_expression         shift and go to state 149
    unary_expression               shift and go to state 150
    logical_OR_expression          shift and go to state 112
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    cast_expression                shift and go to state 124
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    logical_AND_expression         shift and go to state 113
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    inclusive_OR_expression        shift and go to state 114
    literal                        shift and go to state 141
    exclusive_OR_expression        shift and go to state 115
    AND_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 371

    (252) iteration_statement -> WHILE push_scope . LPAREN expression RPAREN statement pop_scope

    LPAREN          shift and go to state 391


state 372

    (253) iteration_statement -> DO push_scope . statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope
    (232) statement -> . expression_statement
    (233) statement -> . push_scope compound_statement pop_scope
    (234) statement -> . selection_statement
    (235) statement -> . iteration_statement
    (236) statement -> . jump_statement
    (237) statement -> . declaration_statement
    (238) statement -> . try_block
    (260) expression_statement -> . expression SEMICOLON
    (261) expression_statement -> . SEMICOLON
    (288) push_scope -> .
    (244) selection_statement -> . IF LPAREN expression RPAREN push_scope compound_statement pop_scope
    (245) selection_statement -> . IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope
    (246) selection_statement -> . SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope
    (252) iteration_statement -> . WHILE push_scope LPAREN expression RPAREN statement pop_scope
    (253) iteration_statement -> . DO push_scope statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope
    (254) iteration_statement -> . FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope
    (255) iteration_statement -> . FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope
    (256) iteration_statement -> . FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope
    (257) iteration_statement -> . FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN statement pop_scope
    (239) jump_statement -> . BREAK SEMICOLON
    (240) jump_statement -> . CONTINUE SEMICOLON
    (241) jump_statement -> . RETURN expression SEMICOLON
    (242) jump_statement -> . RETURN SEMICOLON
    (243) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (262) declaration_statement -> . declaration
    (247) try_block -> . TRY push_scope compound_statement pop_scope CATCH push_scope compound_statement pop_scope
    (43) expression -> . assignment_expression
    (44) expression -> . throw_expression
    (45) expression -> . expression COMMA assignment_expression
    (263) declaration -> . type_specifier_ declarator_list SEMICOLON
    (264) declaration -> . asm_declaration
    (265) declaration -> . function_definition
    (266) declaration -> . function_decl
    (267) declaration -> . class_define_specifier SEMICOLON
    (268) declaration -> . template_declaration
    (269) declaration -> . typedef_declarator
    (48) assignment_expression -> . conditional_expression
    (49) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (46) throw_expression -> . THROW expression
    (47) throw_expression -> . THROW
    (167) type_specifier_ -> . CONST type_specifier
    (168) type_specifier_ -> . type_specifier
    (285) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (224) function_definition -> . type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope
    (225) function_decl -> . type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope
    (202) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (203) class_define_specifier -> . class_head LCPAREN RCPAREN
    (270) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (169) typedef_declarator -> . TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON
    (170) typedef_declarator -> . TYPEDEF type_specifier_ IDENTIFIER SEMICOLON
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (171) type_specifier -> . simple_type_name
    (172) type_specifier -> . complex_type_specifier
    (189) class_head -> . class_key IDENTIFIER base_spec
    (190) class_head -> . class_key IDENTIFIER
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (173) simple_type_name -> . CHAR
    (174) simple_type_name -> . SHORT
    (175) simple_type_name -> . INT
    (176) simple_type_name -> . LONG
    (177) simple_type_name -> . SIGNED
    (178) simple_type_name -> . UNSIGNED
    (179) simple_type_name -> . FLOAT
    (180) simple_type_name -> . DOUBLE
    (181) simple_type_name -> . VOID
    (182) simple_type_name -> . STRING
    (183) simple_type_name -> . AUTO
    (184) complex_type_specifier -> . class_key IDENTIFIER
    (185) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (186) complex_type_specifier -> . TYPE IDENTIFIER
    (187) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (200) class_key -> . CLASS
    (201) class_key -> . STRUCT
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMICOLON       shift and go to state 334
    LCPAREN         reduce using rule 288 (push_scope -> .)
    IF              shift and go to state 335
    SWITCH          shift and go to state 336
    WHILE           shift and go to state 337
    DO              shift and go to state 338
    FOR             shift and go to state 339
    BREAK           shift and go to state 340
    CONTINUE        shift and go to state 341
    RETURN          shift and go to state 342
    GOTO            shift and go to state 343
    TRY             shift and go to state 345
    THROW           shift and go to state 212
    CONST           shift and go to state 16
    ASM             shift and go to state 18
    TEMPLATE        shift and go to state 20
    TYPEDEF         shift and go to state 21
    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38
    THIS            shift and go to state 142
    LPAREN          shift and go to state 146
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    push_scope                     shift and go to state 327
    statement                      shift and go to state 392
    expression                     shift and go to state 333
    expression_statement           shift and go to state 326
    selection_statement            shift and go to state 328
    iteration_statement            shift and go to state 329
    jump_statement                 shift and go to state 330
    declaration_statement          shift and go to state 331
    try_block                      shift and go to state 332
    declaration                    shift and go to state 344
    assignment_expression          shift and go to state 210
    throw_expression               shift and go to state 211
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    function_decl                  shift and go to state 12
    class_define_specifier         shift and go to state 13
    template_declaration           shift and go to state 14
    typedef_declarator             shift and go to state 15
    conditional_expression         shift and go to state 149
    unary_expression               shift and go to state 150
    type_specifier                 shift and go to state 17
    class_head                     shift and go to state 19
    logical_OR_expression          shift and go to state 112
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    cast_expression                shift and go to state 124
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 24
    logical_AND_expression         shift and go to state 113
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    inclusive_OR_expression        shift and go to state 114
    literal                        shift and go to state 141
    exclusive_OR_expression        shift and go to state 115
    AND_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 373

    (254) iteration_statement -> FOR LPAREN . push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope
    (255) iteration_statement -> FOR LPAREN . push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope
    (256) iteration_statement -> FOR LPAREN . push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope
    (257) iteration_statement -> FOR LPAREN . push_scope for_init_statement SEMICOLON RPAREN statement pop_scope
    (288) push_scope -> .

    SEMICOLON       reduce using rule 288 (push_scope -> .)
    THROW           reduce using rule 288 (push_scope -> .)
    CONST           reduce using rule 288 (push_scope -> .)
    ASM             reduce using rule 288 (push_scope -> .)
    TEMPLATE        reduce using rule 288 (push_scope -> .)
    TYPEDEF         reduce using rule 288 (push_scope -> .)
    DPLUSOP         reduce using rule 288 (push_scope -> .)
    DMINUSOP        reduce using rule 288 (push_scope -> .)
    SIZEOF          reduce using rule 288 (push_scope -> .)
    PLUSOP          reduce using rule 288 (push_scope -> .)
    MINUSOP         reduce using rule 288 (push_scope -> .)
    NOTSYM          reduce using rule 288 (push_scope -> .)
    BNOP            reduce using rule 288 (push_scope -> .)
    MULTOP          reduce using rule 288 (push_scope -> .)
    BANDOP          reduce using rule 288 (push_scope -> .)
    NEW             reduce using rule 288 (push_scope -> .)
    DELETE          reduce using rule 288 (push_scope -> .)
    CHAR            reduce using rule 288 (push_scope -> .)
    SHORT           reduce using rule 288 (push_scope -> .)
    INT             reduce using rule 288 (push_scope -> .)
    LONG            reduce using rule 288 (push_scope -> .)
    SIGNED          reduce using rule 288 (push_scope -> .)
    UNSIGNED        reduce using rule 288 (push_scope -> .)
    FLOAT           reduce using rule 288 (push_scope -> .)
    DOUBLE          reduce using rule 288 (push_scope -> .)
    VOID            reduce using rule 288 (push_scope -> .)
    STRING          reduce using rule 288 (push_scope -> .)
    AUTO            reduce using rule 288 (push_scope -> .)
    TYPE            reduce using rule 288 (push_scope -> .)
    CLASS           reduce using rule 288 (push_scope -> .)
    STRUCT          reduce using rule 288 (push_scope -> .)
    THIS            reduce using rule 288 (push_scope -> .)
    LPAREN          reduce using rule 288 (push_scope -> .)
    IDENTIFIER      reduce using rule 288 (push_scope -> .)
    DOUBLEBNOP      reduce using rule 288 (push_scope -> .)
    STRING_L        reduce using rule 288 (push_scope -> .)
    NUMBER          reduce using rule 288 (push_scope -> .)
    SCHAR           reduce using rule 288 (push_scope -> .)

    push_scope                     shift and go to state 393

state 374

    (239) jump_statement -> BREAK SEMICOLON .

    RCPAREN         reduce using rule 239 (jump_statement -> BREAK SEMICOLON .)
    SEMICOLON       reduce using rule 239 (jump_statement -> BREAK SEMICOLON .)
    IF              reduce using rule 239 (jump_statement -> BREAK SEMICOLON .)
    SWITCH          reduce using rule 239 (jump_statement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 239 (jump_statement -> BREAK SEMICOLON .)
    DO              reduce using rule 239 (jump_statement -> BREAK SEMICOLON .)
    FOR             reduce using rule 239 (jump_statement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 239 (jump_statement -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 239 (jump_statement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 239 (jump_statement -> BREAK SEMICOLON .)
    GOTO            reduce using rule 239 (jump_statement -> BREAK SEMICOLON .)
    TRY             reduce using rule 239 (jump_statement -> BREAK SEMICOLON .)
    THROW           reduce using rule 239 (jump_statement -> BREAK SEMICOLON .)
    CONST           reduce using rule 239 (jump_statement -> BREAK SEMICOLON .)
    ASM             reduce using rule 239 (jump_statement -> BREAK SEMICOLON .)
    TEMPLATE        reduce using rule 239 (jump_statement -> BREAK SEMICOLON .)
    TYPEDEF         reduce using rule 239 (jump_statement -> BREAK SEMICOLON .)
    DPLUSOP         reduce using rule 239 (jump_statement -> BREAK SEMICOLON .)
    DMINUSOP        reduce using rule 239 (jump_statement -> BREAK SEMICOLON .)
    SIZEOF          reduce using rule 239 (jump_statement -> BREAK SEMICOLON .)
    PLUSOP          reduce using rule 239 (jump_statement -> BREAK SEMICOLON .)
    MINUSOP         reduce using rule 239 (jump_statement -> BREAK SEMICOLON .)
    NOTSYM          reduce using rule 239 (jump_statement -> BREAK SEMICOLON .)
    BNOP            reduce using rule 239 (jump_statement -> BREAK SEMICOLON .)
    MULTOP          reduce using rule 239 (jump_statement -> BREAK SEMICOLON .)
    BANDOP          reduce using rule 239 (jump_statement -> BREAK SEMICOLON .)
    NEW             reduce using rule 239 (jump_statement -> BREAK SEMICOLON .)
    DELETE          reduce using rule 239 (jump_statement -> BREAK SEMICOLON .)
    CHAR            reduce using rule 239 (jump_statement -> BREAK SEMICOLON .)
    SHORT           reduce using rule 239 (jump_statement -> BREAK SEMICOLON .)
    INT             reduce using rule 239 (jump_statement -> BREAK SEMICOLON .)
    LONG            reduce using rule 239 (jump_statement -> BREAK SEMICOLON .)
    SIGNED          reduce using rule 239 (jump_statement -> BREAK SEMICOLON .)
    UNSIGNED        reduce using rule 239 (jump_statement -> BREAK SEMICOLON .)
    FLOAT           reduce using rule 239 (jump_statement -> BREAK SEMICOLON .)
    DOUBLE          reduce using rule 239 (jump_statement -> BREAK SEMICOLON .)
    VOID            reduce using rule 239 (jump_statement -> BREAK SEMICOLON .)
    STRING          reduce using rule 239 (jump_statement -> BREAK SEMICOLON .)
    AUTO            reduce using rule 239 (jump_statement -> BREAK SEMICOLON .)
    TYPE            reduce using rule 239 (jump_statement -> BREAK SEMICOLON .)
    CLASS           reduce using rule 239 (jump_statement -> BREAK SEMICOLON .)
    STRUCT          reduce using rule 239 (jump_statement -> BREAK SEMICOLON .)
    THIS            reduce using rule 239 (jump_statement -> BREAK SEMICOLON .)
    LPAREN          reduce using rule 239 (jump_statement -> BREAK SEMICOLON .)
    IDENTIFIER      reduce using rule 239 (jump_statement -> BREAK SEMICOLON .)
    DOUBLEBNOP      reduce using rule 239 (jump_statement -> BREAK SEMICOLON .)
    STRING_L        reduce using rule 239 (jump_statement -> BREAK SEMICOLON .)
    NUMBER          reduce using rule 239 (jump_statement -> BREAK SEMICOLON .)
    SCHAR           reduce using rule 239 (jump_statement -> BREAK SEMICOLON .)
    LCPAREN         reduce using rule 239 (jump_statement -> BREAK SEMICOLON .)
    CASE            reduce using rule 239 (jump_statement -> BREAK SEMICOLON .)
    DEFAULT         reduce using rule 239 (jump_statement -> BREAK SEMICOLON .)


state 375

    (240) jump_statement -> CONTINUE SEMICOLON .

    RCPAREN         reduce using rule 240 (jump_statement -> CONTINUE SEMICOLON .)
    SEMICOLON       reduce using rule 240 (jump_statement -> CONTINUE SEMICOLON .)
    IF              reduce using rule 240 (jump_statement -> CONTINUE SEMICOLON .)
    SWITCH          reduce using rule 240 (jump_statement -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 240 (jump_statement -> CONTINUE SEMICOLON .)
    DO              reduce using rule 240 (jump_statement -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 240 (jump_statement -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 240 (jump_statement -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 240 (jump_statement -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 240 (jump_statement -> CONTINUE SEMICOLON .)
    GOTO            reduce using rule 240 (jump_statement -> CONTINUE SEMICOLON .)
    TRY             reduce using rule 240 (jump_statement -> CONTINUE SEMICOLON .)
    THROW           reduce using rule 240 (jump_statement -> CONTINUE SEMICOLON .)
    CONST           reduce using rule 240 (jump_statement -> CONTINUE SEMICOLON .)
    ASM             reduce using rule 240 (jump_statement -> CONTINUE SEMICOLON .)
    TEMPLATE        reduce using rule 240 (jump_statement -> CONTINUE SEMICOLON .)
    TYPEDEF         reduce using rule 240 (jump_statement -> CONTINUE SEMICOLON .)
    DPLUSOP         reduce using rule 240 (jump_statement -> CONTINUE SEMICOLON .)
    DMINUSOP        reduce using rule 240 (jump_statement -> CONTINUE SEMICOLON .)
    SIZEOF          reduce using rule 240 (jump_statement -> CONTINUE SEMICOLON .)
    PLUSOP          reduce using rule 240 (jump_statement -> CONTINUE SEMICOLON .)
    MINUSOP         reduce using rule 240 (jump_statement -> CONTINUE SEMICOLON .)
    NOTSYM          reduce using rule 240 (jump_statement -> CONTINUE SEMICOLON .)
    BNOP            reduce using rule 240 (jump_statement -> CONTINUE SEMICOLON .)
    MULTOP          reduce using rule 240 (jump_statement -> CONTINUE SEMICOLON .)
    BANDOP          reduce using rule 240 (jump_statement -> CONTINUE SEMICOLON .)
    NEW             reduce using rule 240 (jump_statement -> CONTINUE SEMICOLON .)
    DELETE          reduce using rule 240 (jump_statement -> CONTINUE SEMICOLON .)
    CHAR            reduce using rule 240 (jump_statement -> CONTINUE SEMICOLON .)
    SHORT           reduce using rule 240 (jump_statement -> CONTINUE SEMICOLON .)
    INT             reduce using rule 240 (jump_statement -> CONTINUE SEMICOLON .)
    LONG            reduce using rule 240 (jump_statement -> CONTINUE SEMICOLON .)
    SIGNED          reduce using rule 240 (jump_statement -> CONTINUE SEMICOLON .)
    UNSIGNED        reduce using rule 240 (jump_statement -> CONTINUE SEMICOLON .)
    FLOAT           reduce using rule 240 (jump_statement -> CONTINUE SEMICOLON .)
    DOUBLE          reduce using rule 240 (jump_statement -> CONTINUE SEMICOLON .)
    VOID            reduce using rule 240 (jump_statement -> CONTINUE SEMICOLON .)
    STRING          reduce using rule 240 (jump_statement -> CONTINUE SEMICOLON .)
    AUTO            reduce using rule 240 (jump_statement -> CONTINUE SEMICOLON .)
    TYPE            reduce using rule 240 (jump_statement -> CONTINUE SEMICOLON .)
    CLASS           reduce using rule 240 (jump_statement -> CONTINUE SEMICOLON .)
    STRUCT          reduce using rule 240 (jump_statement -> CONTINUE SEMICOLON .)
    THIS            reduce using rule 240 (jump_statement -> CONTINUE SEMICOLON .)
    LPAREN          reduce using rule 240 (jump_statement -> CONTINUE SEMICOLON .)
    IDENTIFIER      reduce using rule 240 (jump_statement -> CONTINUE SEMICOLON .)
    DOUBLEBNOP      reduce using rule 240 (jump_statement -> CONTINUE SEMICOLON .)
    STRING_L        reduce using rule 240 (jump_statement -> CONTINUE SEMICOLON .)
    NUMBER          reduce using rule 240 (jump_statement -> CONTINUE SEMICOLON .)
    SCHAR           reduce using rule 240 (jump_statement -> CONTINUE SEMICOLON .)
    LCPAREN         reduce using rule 240 (jump_statement -> CONTINUE SEMICOLON .)
    CASE            reduce using rule 240 (jump_statement -> CONTINUE SEMICOLON .)
    DEFAULT         reduce using rule 240 (jump_statement -> CONTINUE SEMICOLON .)


state 376

    (241) jump_statement -> RETURN expression . SEMICOLON
    (45) expression -> expression . COMMA assignment_expression

    SEMICOLON       shift and go to state 394
    COMMA           shift and go to state 294


state 377

    (242) jump_statement -> RETURN SEMICOLON .

    RCPAREN         reduce using rule 242 (jump_statement -> RETURN SEMICOLON .)
    SEMICOLON       reduce using rule 242 (jump_statement -> RETURN SEMICOLON .)
    IF              reduce using rule 242 (jump_statement -> RETURN SEMICOLON .)
    SWITCH          reduce using rule 242 (jump_statement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 242 (jump_statement -> RETURN SEMICOLON .)
    DO              reduce using rule 242 (jump_statement -> RETURN SEMICOLON .)
    FOR             reduce using rule 242 (jump_statement -> RETURN SEMICOLON .)
    BREAK           reduce using rule 242 (jump_statement -> RETURN SEMICOLON .)
    CONTINUE        reduce using rule 242 (jump_statement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 242 (jump_statement -> RETURN SEMICOLON .)
    GOTO            reduce using rule 242 (jump_statement -> RETURN SEMICOLON .)
    TRY             reduce using rule 242 (jump_statement -> RETURN SEMICOLON .)
    THROW           reduce using rule 242 (jump_statement -> RETURN SEMICOLON .)
    CONST           reduce using rule 242 (jump_statement -> RETURN SEMICOLON .)
    ASM             reduce using rule 242 (jump_statement -> RETURN SEMICOLON .)
    TEMPLATE        reduce using rule 242 (jump_statement -> RETURN SEMICOLON .)
    TYPEDEF         reduce using rule 242 (jump_statement -> RETURN SEMICOLON .)
    DPLUSOP         reduce using rule 242 (jump_statement -> RETURN SEMICOLON .)
    DMINUSOP        reduce using rule 242 (jump_statement -> RETURN SEMICOLON .)
    SIZEOF          reduce using rule 242 (jump_statement -> RETURN SEMICOLON .)
    PLUSOP          reduce using rule 242 (jump_statement -> RETURN SEMICOLON .)
    MINUSOP         reduce using rule 242 (jump_statement -> RETURN SEMICOLON .)
    NOTSYM          reduce using rule 242 (jump_statement -> RETURN SEMICOLON .)
    BNOP            reduce using rule 242 (jump_statement -> RETURN SEMICOLON .)
    MULTOP          reduce using rule 242 (jump_statement -> RETURN SEMICOLON .)
    BANDOP          reduce using rule 242 (jump_statement -> RETURN SEMICOLON .)
    NEW             reduce using rule 242 (jump_statement -> RETURN SEMICOLON .)
    DELETE          reduce using rule 242 (jump_statement -> RETURN SEMICOLON .)
    CHAR            reduce using rule 242 (jump_statement -> RETURN SEMICOLON .)
    SHORT           reduce using rule 242 (jump_statement -> RETURN SEMICOLON .)
    INT             reduce using rule 242 (jump_statement -> RETURN SEMICOLON .)
    LONG            reduce using rule 242 (jump_statement -> RETURN SEMICOLON .)
    SIGNED          reduce using rule 242 (jump_statement -> RETURN SEMICOLON .)
    UNSIGNED        reduce using rule 242 (jump_statement -> RETURN SEMICOLON .)
    FLOAT           reduce using rule 242 (jump_statement -> RETURN SEMICOLON .)
    DOUBLE          reduce using rule 242 (jump_statement -> RETURN SEMICOLON .)
    VOID            reduce using rule 242 (jump_statement -> RETURN SEMICOLON .)
    STRING          reduce using rule 242 (jump_statement -> RETURN SEMICOLON .)
    AUTO            reduce using rule 242 (jump_statement -> RETURN SEMICOLON .)
    TYPE            reduce using rule 242 (jump_statement -> RETURN SEMICOLON .)
    CLASS           reduce using rule 242 (jump_statement -> RETURN SEMICOLON .)
    STRUCT          reduce using rule 242 (jump_statement -> RETURN SEMICOLON .)
    THIS            reduce using rule 242 (jump_statement -> RETURN SEMICOLON .)
    LPAREN          reduce using rule 242 (jump_statement -> RETURN SEMICOLON .)
    IDENTIFIER      reduce using rule 242 (jump_statement -> RETURN SEMICOLON .)
    DOUBLEBNOP      reduce using rule 242 (jump_statement -> RETURN SEMICOLON .)
    STRING_L        reduce using rule 242 (jump_statement -> RETURN SEMICOLON .)
    NUMBER          reduce using rule 242 (jump_statement -> RETURN SEMICOLON .)
    SCHAR           reduce using rule 242 (jump_statement -> RETURN SEMICOLON .)
    LCPAREN         reduce using rule 242 (jump_statement -> RETURN SEMICOLON .)
    CASE            reduce using rule 242 (jump_statement -> RETURN SEMICOLON .)
    DEFAULT         reduce using rule 242 (jump_statement -> RETURN SEMICOLON .)


state 378

    (243) jump_statement -> GOTO IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 395


state 379

    (247) try_block -> TRY push_scope . compound_statement pop_scope CATCH push_scope compound_statement pop_scope
    (228) compound_statement -> . LCPAREN statement_list RCPAREN
    (229) compound_statement -> . LCPAREN RCPAREN

    LCPAREN         shift and go to state 271

    compound_statement             shift and go to state 396

state 380

    (14) conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .

    RSPAREN         reduce using rule 14 (conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .)
    RPAREN          reduce using rule 14 (conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .)
    COMMA           reduce using rule 14 (conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .)
    SEMICOLON       reduce using rule 14 (conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .)
    RCPAREN         reduce using rule 14 (conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .)
    COLON           reduce using rule 14 (conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .)
    RTEMPLATE       reduce using rule 14 (conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .)


state 381

    (91) postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .

    LSPAREN         reduce using rule 91 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    LPAREN          reduce using rule 91 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    DOT             reduce using rule 91 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    ARROW           reduce using rule 91 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    DPLUSOP         reduce using rule 91 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    DMINUSOP        reduce using rule 91 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    LTEMPLATE       reduce using rule 91 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    MULTOP          reduce using rule 91 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    DIVOP           reduce using rule 91 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    MODOP           reduce using rule 91 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    PLUSOP          reduce using rule 91 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    MINUSOP         reduce using rule 91 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    LSHIFT          reduce using rule 91 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    RSHIFT          reduce using rule 91 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    LTCOMP          reduce using rule 91 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    GTCOMP          reduce using rule 91 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    LTECOMP         reduce using rule 91 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    GTECOMP         reduce using rule 91 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    EQCOMP          reduce using rule 91 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    NEQCOMP         reduce using rule 91 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    BANDOP          reduce using rule 91 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    XOROP           reduce using rule 91 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    OROP            reduce using rule 91 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    ANDOP           reduce using rule 91 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    QUESMARK        reduce using rule 91 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    RSPAREN         reduce using rule 91 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    EQUAL           reduce using rule 91 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    MULTEQOP        reduce using rule 91 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    DIVEQOP         reduce using rule 91 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    MODEQOP         reduce using rule 91 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    PLUSEQOP        reduce using rule 91 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    MINUSEQOP       reduce using rule 91 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    LSHIFTEQOP      reduce using rule 91 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    RSHIFTEQOP      reduce using rule 91 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    BANDEQOP        reduce using rule 91 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    BOREQOP         reduce using rule 91 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    RPAREN          reduce using rule 91 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 91 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    SEMICOLON       reduce using rule 91 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    RCPAREN         reduce using rule 91 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    COLON           reduce using rule 91 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    RTEMPLATE       reduce using rule 91 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)


state 382

    (80) new_initializer -> LPAREN initializer_list RPAREN .

    MULTOP          reduce using rule 80 (new_initializer -> LPAREN initializer_list RPAREN .)
    DIVOP           reduce using rule 80 (new_initializer -> LPAREN initializer_list RPAREN .)
    MODOP           reduce using rule 80 (new_initializer -> LPAREN initializer_list RPAREN .)
    PLUSOP          reduce using rule 80 (new_initializer -> LPAREN initializer_list RPAREN .)
    MINUSOP         reduce using rule 80 (new_initializer -> LPAREN initializer_list RPAREN .)
    LSHIFT          reduce using rule 80 (new_initializer -> LPAREN initializer_list RPAREN .)
    RSHIFT          reduce using rule 80 (new_initializer -> LPAREN initializer_list RPAREN .)
    LTCOMP          reduce using rule 80 (new_initializer -> LPAREN initializer_list RPAREN .)
    GTCOMP          reduce using rule 80 (new_initializer -> LPAREN initializer_list RPAREN .)
    LTECOMP         reduce using rule 80 (new_initializer -> LPAREN initializer_list RPAREN .)
    GTECOMP         reduce using rule 80 (new_initializer -> LPAREN initializer_list RPAREN .)
    EQCOMP          reduce using rule 80 (new_initializer -> LPAREN initializer_list RPAREN .)
    NEQCOMP         reduce using rule 80 (new_initializer -> LPAREN initializer_list RPAREN .)
    BANDOP          reduce using rule 80 (new_initializer -> LPAREN initializer_list RPAREN .)
    XOROP           reduce using rule 80 (new_initializer -> LPAREN initializer_list RPAREN .)
    OROP            reduce using rule 80 (new_initializer -> LPAREN initializer_list RPAREN .)
    ANDOP           reduce using rule 80 (new_initializer -> LPAREN initializer_list RPAREN .)
    QUESMARK        reduce using rule 80 (new_initializer -> LPAREN initializer_list RPAREN .)
    RSPAREN         reduce using rule 80 (new_initializer -> LPAREN initializer_list RPAREN .)
    EQUAL           reduce using rule 80 (new_initializer -> LPAREN initializer_list RPAREN .)
    MULTEQOP        reduce using rule 80 (new_initializer -> LPAREN initializer_list RPAREN .)
    DIVEQOP         reduce using rule 80 (new_initializer -> LPAREN initializer_list RPAREN .)
    MODEQOP         reduce using rule 80 (new_initializer -> LPAREN initializer_list RPAREN .)
    PLUSEQOP        reduce using rule 80 (new_initializer -> LPAREN initializer_list RPAREN .)
    MINUSEQOP       reduce using rule 80 (new_initializer -> LPAREN initializer_list RPAREN .)
    LSHIFTEQOP      reduce using rule 80 (new_initializer -> LPAREN initializer_list RPAREN .)
    RSHIFTEQOP      reduce using rule 80 (new_initializer -> LPAREN initializer_list RPAREN .)
    BANDEQOP        reduce using rule 80 (new_initializer -> LPAREN initializer_list RPAREN .)
    BOREQOP         reduce using rule 80 (new_initializer -> LPAREN initializer_list RPAREN .)
    RPAREN          reduce using rule 80 (new_initializer -> LPAREN initializer_list RPAREN .)
    COMMA           reduce using rule 80 (new_initializer -> LPAREN initializer_list RPAREN .)
    SEMICOLON       reduce using rule 80 (new_initializer -> LPAREN initializer_list RPAREN .)
    RCPAREN         reduce using rule 80 (new_initializer -> LPAREN initializer_list RPAREN .)
    COLON           reduce using rule 80 (new_initializer -> LPAREN initializer_list RPAREN .)
    RTEMPLATE       reduce using rule 80 (new_initializer -> LPAREN initializer_list RPAREN .)


state 383

    (282) initializer_list -> initializer_list COMMA . assignment_expression
    (48) assignment_expression -> . conditional_expression
    (49) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    THIS            shift and go to state 142
    LPAREN          shift and go to state 146
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    assignment_expression          shift and go to state 362
    conditional_expression         shift and go to state 149
    unary_expression               shift and go to state 150
    logical_OR_expression          shift and go to state 112
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    cast_expression                shift and go to state 124
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    logical_AND_expression         shift and go to state 113
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    inclusive_OR_expression        shift and go to state 114
    literal                        shift and go to state 141
    exclusive_OR_expression        shift and go to state 115
    AND_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 384

    (72) allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .

    MULTOP          reduce using rule 72 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    DIVOP           reduce using rule 72 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    MODOP           reduce using rule 72 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    PLUSOP          reduce using rule 72 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    MINUSOP         reduce using rule 72 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    LSHIFT          reduce using rule 72 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    RSHIFT          reduce using rule 72 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    LTCOMP          reduce using rule 72 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    GTCOMP          reduce using rule 72 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    LTECOMP         reduce using rule 72 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    GTECOMP         reduce using rule 72 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    EQCOMP          reduce using rule 72 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    NEQCOMP         reduce using rule 72 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    BANDOP          reduce using rule 72 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    XOROP           reduce using rule 72 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    OROP            reduce using rule 72 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    ANDOP           reduce using rule 72 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    QUESMARK        reduce using rule 72 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    RSPAREN         reduce using rule 72 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    EQUAL           reduce using rule 72 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    MULTEQOP        reduce using rule 72 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    DIVEQOP         reduce using rule 72 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    MODEQOP         reduce using rule 72 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    PLUSEQOP        reduce using rule 72 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    MINUSEQOP       reduce using rule 72 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    LSHIFTEQOP      reduce using rule 72 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    RSHIFTEQOP      reduce using rule 72 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    BANDEQOP        reduce using rule 72 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    BOREQOP         reduce using rule 72 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    RPAREN          reduce using rule 72 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    COMMA           reduce using rule 72 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    SEMICOLON       reduce using rule 72 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    RCPAREN         reduce using rule 72 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    COLON           reduce using rule 72 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    RTEMPLATE       reduce using rule 72 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)


state 385

    (78) new_declarator -> new_declarator LSPAREN expression . RSPAREN
    (45) expression -> expression . COMMA assignment_expression

    RSPAREN         shift and go to state 397
    COMMA           shift and go to state 294


state 386

    (79) new_declarator -> LSPAREN expression RSPAREN .

    MULTOP          reduce using rule 79 (new_declarator -> LSPAREN expression RSPAREN .)
    LSPAREN         reduce using rule 79 (new_declarator -> LSPAREN expression RSPAREN .)
    LPAREN          reduce using rule 79 (new_declarator -> LSPAREN expression RSPAREN .)
    DIVOP           reduce using rule 79 (new_declarator -> LSPAREN expression RSPAREN .)
    MODOP           reduce using rule 79 (new_declarator -> LSPAREN expression RSPAREN .)
    PLUSOP          reduce using rule 79 (new_declarator -> LSPAREN expression RSPAREN .)
    MINUSOP         reduce using rule 79 (new_declarator -> LSPAREN expression RSPAREN .)
    LSHIFT          reduce using rule 79 (new_declarator -> LSPAREN expression RSPAREN .)
    RSHIFT          reduce using rule 79 (new_declarator -> LSPAREN expression RSPAREN .)
    LTCOMP          reduce using rule 79 (new_declarator -> LSPAREN expression RSPAREN .)
    GTCOMP          reduce using rule 79 (new_declarator -> LSPAREN expression RSPAREN .)
    LTECOMP         reduce using rule 79 (new_declarator -> LSPAREN expression RSPAREN .)
    GTECOMP         reduce using rule 79 (new_declarator -> LSPAREN expression RSPAREN .)
    EQCOMP          reduce using rule 79 (new_declarator -> LSPAREN expression RSPAREN .)
    NEQCOMP         reduce using rule 79 (new_declarator -> LSPAREN expression RSPAREN .)
    BANDOP          reduce using rule 79 (new_declarator -> LSPAREN expression RSPAREN .)
    XOROP           reduce using rule 79 (new_declarator -> LSPAREN expression RSPAREN .)
    OROP            reduce using rule 79 (new_declarator -> LSPAREN expression RSPAREN .)
    ANDOP           reduce using rule 79 (new_declarator -> LSPAREN expression RSPAREN .)
    QUESMARK        reduce using rule 79 (new_declarator -> LSPAREN expression RSPAREN .)
    RSPAREN         reduce using rule 79 (new_declarator -> LSPAREN expression RSPAREN .)
    EQUAL           reduce using rule 79 (new_declarator -> LSPAREN expression RSPAREN .)
    MULTEQOP        reduce using rule 79 (new_declarator -> LSPAREN expression RSPAREN .)
    DIVEQOP         reduce using rule 79 (new_declarator -> LSPAREN expression RSPAREN .)
    MODEQOP         reduce using rule 79 (new_declarator -> LSPAREN expression RSPAREN .)
    PLUSEQOP        reduce using rule 79 (new_declarator -> LSPAREN expression RSPAREN .)
    MINUSEQOP       reduce using rule 79 (new_declarator -> LSPAREN expression RSPAREN .)
    LSHIFTEQOP      reduce using rule 79 (new_declarator -> LSPAREN expression RSPAREN .)
    RSHIFTEQOP      reduce using rule 79 (new_declarator -> LSPAREN expression RSPAREN .)
    BANDEQOP        reduce using rule 79 (new_declarator -> LSPAREN expression RSPAREN .)
    BOREQOP         reduce using rule 79 (new_declarator -> LSPAREN expression RSPAREN .)
    RPAREN          reduce using rule 79 (new_declarator -> LSPAREN expression RSPAREN .)
    COMMA           reduce using rule 79 (new_declarator -> LSPAREN expression RSPAREN .)
    SEMICOLON       reduce using rule 79 (new_declarator -> LSPAREN expression RSPAREN .)
    RCPAREN         reduce using rule 79 (new_declarator -> LSPAREN expression RSPAREN .)
    COLON           reduce using rule 79 (new_declarator -> LSPAREN expression RSPAREN .)
    RTEMPLATE       reduce using rule 79 (new_declarator -> LSPAREN expression RSPAREN .)


state 387

    (284) initializer_list -> LCPAREN initializer_list COMMA RCPAREN .

    RCPAREN         reduce using rule 284 (initializer_list -> LCPAREN initializer_list COMMA RCPAREN .)
    COMMA           reduce using rule 284 (initializer_list -> LCPAREN initializer_list COMMA RCPAREN .)
    RPAREN          reduce using rule 284 (initializer_list -> LCPAREN initializer_list COMMA RCPAREN .)


state 388

    (233) statement -> push_scope compound_statement pop_scope .

    RCPAREN         reduce using rule 233 (statement -> push_scope compound_statement pop_scope .)
    SEMICOLON       reduce using rule 233 (statement -> push_scope compound_statement pop_scope .)
    IF              reduce using rule 233 (statement -> push_scope compound_statement pop_scope .)
    SWITCH          reduce using rule 233 (statement -> push_scope compound_statement pop_scope .)
    WHILE           reduce using rule 233 (statement -> push_scope compound_statement pop_scope .)
    DO              reduce using rule 233 (statement -> push_scope compound_statement pop_scope .)
    FOR             reduce using rule 233 (statement -> push_scope compound_statement pop_scope .)
    BREAK           reduce using rule 233 (statement -> push_scope compound_statement pop_scope .)
    CONTINUE        reduce using rule 233 (statement -> push_scope compound_statement pop_scope .)
    RETURN          reduce using rule 233 (statement -> push_scope compound_statement pop_scope .)
    GOTO            reduce using rule 233 (statement -> push_scope compound_statement pop_scope .)
    TRY             reduce using rule 233 (statement -> push_scope compound_statement pop_scope .)
    THROW           reduce using rule 233 (statement -> push_scope compound_statement pop_scope .)
    CONST           reduce using rule 233 (statement -> push_scope compound_statement pop_scope .)
    ASM             reduce using rule 233 (statement -> push_scope compound_statement pop_scope .)
    TEMPLATE        reduce using rule 233 (statement -> push_scope compound_statement pop_scope .)
    TYPEDEF         reduce using rule 233 (statement -> push_scope compound_statement pop_scope .)
    DPLUSOP         reduce using rule 233 (statement -> push_scope compound_statement pop_scope .)
    DMINUSOP        reduce using rule 233 (statement -> push_scope compound_statement pop_scope .)
    SIZEOF          reduce using rule 233 (statement -> push_scope compound_statement pop_scope .)
    PLUSOP          reduce using rule 233 (statement -> push_scope compound_statement pop_scope .)
    MINUSOP         reduce using rule 233 (statement -> push_scope compound_statement pop_scope .)
    NOTSYM          reduce using rule 233 (statement -> push_scope compound_statement pop_scope .)
    BNOP            reduce using rule 233 (statement -> push_scope compound_statement pop_scope .)
    MULTOP          reduce using rule 233 (statement -> push_scope compound_statement pop_scope .)
    BANDOP          reduce using rule 233 (statement -> push_scope compound_statement pop_scope .)
    NEW             reduce using rule 233 (statement -> push_scope compound_statement pop_scope .)
    DELETE          reduce using rule 233 (statement -> push_scope compound_statement pop_scope .)
    CHAR            reduce using rule 233 (statement -> push_scope compound_statement pop_scope .)
    SHORT           reduce using rule 233 (statement -> push_scope compound_statement pop_scope .)
    INT             reduce using rule 233 (statement -> push_scope compound_statement pop_scope .)
    LONG            reduce using rule 233 (statement -> push_scope compound_statement pop_scope .)
    SIGNED          reduce using rule 233 (statement -> push_scope compound_statement pop_scope .)
    UNSIGNED        reduce using rule 233 (statement -> push_scope compound_statement pop_scope .)
    FLOAT           reduce using rule 233 (statement -> push_scope compound_statement pop_scope .)
    DOUBLE          reduce using rule 233 (statement -> push_scope compound_statement pop_scope .)
    VOID            reduce using rule 233 (statement -> push_scope compound_statement pop_scope .)
    STRING          reduce using rule 233 (statement -> push_scope compound_statement pop_scope .)
    AUTO            reduce using rule 233 (statement -> push_scope compound_statement pop_scope .)
    TYPE            reduce using rule 233 (statement -> push_scope compound_statement pop_scope .)
    CLASS           reduce using rule 233 (statement -> push_scope compound_statement pop_scope .)
    STRUCT          reduce using rule 233 (statement -> push_scope compound_statement pop_scope .)
    THIS            reduce using rule 233 (statement -> push_scope compound_statement pop_scope .)
    LPAREN          reduce using rule 233 (statement -> push_scope compound_statement pop_scope .)
    IDENTIFIER      reduce using rule 233 (statement -> push_scope compound_statement pop_scope .)
    DOUBLEBNOP      reduce using rule 233 (statement -> push_scope compound_statement pop_scope .)
    STRING_L        reduce using rule 233 (statement -> push_scope compound_statement pop_scope .)
    NUMBER          reduce using rule 233 (statement -> push_scope compound_statement pop_scope .)
    SCHAR           reduce using rule 233 (statement -> push_scope compound_statement pop_scope .)
    LCPAREN         reduce using rule 233 (statement -> push_scope compound_statement pop_scope .)
    CASE            reduce using rule 233 (statement -> push_scope compound_statement pop_scope .)
    DEFAULT         reduce using rule 233 (statement -> push_scope compound_statement pop_scope .)


state 389

    (244) selection_statement -> IF LPAREN expression . RPAREN push_scope compound_statement pop_scope
    (245) selection_statement -> IF LPAREN expression . RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope
    (45) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 398
    COMMA           shift and go to state 294


state 390

    (246) selection_statement -> SWITCH LPAREN expression . RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope
    (45) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 399
    COMMA           shift and go to state 294


state 391

    (252) iteration_statement -> WHILE push_scope LPAREN . expression RPAREN statement pop_scope
    (43) expression -> . assignment_expression
    (44) expression -> . throw_expression
    (45) expression -> . expression COMMA assignment_expression
    (48) assignment_expression -> . conditional_expression
    (49) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (46) throw_expression -> . THROW expression
    (47) throw_expression -> . THROW
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression

    THROW           shift and go to state 212
    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    THIS            shift and go to state 142
    LPAREN          shift and go to state 146
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    expression                     shift and go to state 400
    assignment_expression          shift and go to state 210
    throw_expression               shift and go to state 211
    conditional_expression         shift and go to state 149
    unary_expression               shift and go to state 150
    logical_OR_expression          shift and go to state 112
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    cast_expression                shift and go to state 124
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    logical_AND_expression         shift and go to state 113
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    inclusive_OR_expression        shift and go to state 114
    literal                        shift and go to state 141
    exclusive_OR_expression        shift and go to state 115
    AND_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 392

    (253) iteration_statement -> DO push_scope statement . WHILE LPAREN expression RPAREN SEMICOLON pop_scope

    WHILE           shift and go to state 401


state 393

    (254) iteration_statement -> FOR LPAREN push_scope . for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope
    (255) iteration_statement -> FOR LPAREN push_scope . for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope
    (256) iteration_statement -> FOR LPAREN push_scope . for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope
    (257) iteration_statement -> FOR LPAREN push_scope . for_init_statement SEMICOLON RPAREN statement pop_scope
    (258) for_init_statement -> . expression_statement
    (259) for_init_statement -> . declaration_statement
    (260) expression_statement -> . expression SEMICOLON
    (261) expression_statement -> . SEMICOLON
    (262) declaration_statement -> . declaration
    (43) expression -> . assignment_expression
    (44) expression -> . throw_expression
    (45) expression -> . expression COMMA assignment_expression
    (263) declaration -> . type_specifier_ declarator_list SEMICOLON
    (264) declaration -> . asm_declaration
    (265) declaration -> . function_definition
    (266) declaration -> . function_decl
    (267) declaration -> . class_define_specifier SEMICOLON
    (268) declaration -> . template_declaration
    (269) declaration -> . typedef_declarator
    (48) assignment_expression -> . conditional_expression
    (49) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (46) throw_expression -> . THROW expression
    (47) throw_expression -> . THROW
    (167) type_specifier_ -> . CONST type_specifier
    (168) type_specifier_ -> . type_specifier
    (285) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (224) function_definition -> . type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope
    (225) function_decl -> . type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope
    (202) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (203) class_define_specifier -> . class_head LCPAREN RCPAREN
    (270) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (169) typedef_declarator -> . TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON
    (170) typedef_declarator -> . TYPEDEF type_specifier_ IDENTIFIER SEMICOLON
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (171) type_specifier -> . simple_type_name
    (172) type_specifier -> . complex_type_specifier
    (189) class_head -> . class_key IDENTIFIER base_spec
    (190) class_head -> . class_key IDENTIFIER
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (173) simple_type_name -> . CHAR
    (174) simple_type_name -> . SHORT
    (175) simple_type_name -> . INT
    (176) simple_type_name -> . LONG
    (177) simple_type_name -> . SIGNED
    (178) simple_type_name -> . UNSIGNED
    (179) simple_type_name -> . FLOAT
    (180) simple_type_name -> . DOUBLE
    (181) simple_type_name -> . VOID
    (182) simple_type_name -> . STRING
    (183) simple_type_name -> . AUTO
    (184) complex_type_specifier -> . class_key IDENTIFIER
    (185) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (186) complex_type_specifier -> . TYPE IDENTIFIER
    (187) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (200) class_key -> . CLASS
    (201) class_key -> . STRUCT
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMICOLON       shift and go to state 334
    THROW           shift and go to state 212
    CONST           shift and go to state 16
    ASM             shift and go to state 18
    TEMPLATE        shift and go to state 20
    TYPEDEF         shift and go to state 21
    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38
    THIS            shift and go to state 142
    LPAREN          shift and go to state 146
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    for_init_statement             shift and go to state 402
    expression                     shift and go to state 333
    expression_statement           shift and go to state 403
    declaration_statement          shift and go to state 404
    declaration                    shift and go to state 344
    assignment_expression          shift and go to state 210
    throw_expression               shift and go to state 211
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    function_decl                  shift and go to state 12
    class_define_specifier         shift and go to state 13
    template_declaration           shift and go to state 14
    typedef_declarator             shift and go to state 15
    conditional_expression         shift and go to state 149
    unary_expression               shift and go to state 150
    type_specifier                 shift and go to state 17
    class_head                     shift and go to state 19
    logical_OR_expression          shift and go to state 112
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    cast_expression                shift and go to state 124
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 24
    logical_AND_expression         shift and go to state 113
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    inclusive_OR_expression        shift and go to state 114
    literal                        shift and go to state 141
    exclusive_OR_expression        shift and go to state 115
    AND_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 394

    (241) jump_statement -> RETURN expression SEMICOLON .

    RCPAREN         reduce using rule 241 (jump_statement -> RETURN expression SEMICOLON .)
    SEMICOLON       reduce using rule 241 (jump_statement -> RETURN expression SEMICOLON .)
    IF              reduce using rule 241 (jump_statement -> RETURN expression SEMICOLON .)
    SWITCH          reduce using rule 241 (jump_statement -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 241 (jump_statement -> RETURN expression SEMICOLON .)
    DO              reduce using rule 241 (jump_statement -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 241 (jump_statement -> RETURN expression SEMICOLON .)
    BREAK           reduce using rule 241 (jump_statement -> RETURN expression SEMICOLON .)
    CONTINUE        reduce using rule 241 (jump_statement -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 241 (jump_statement -> RETURN expression SEMICOLON .)
    GOTO            reduce using rule 241 (jump_statement -> RETURN expression SEMICOLON .)
    TRY             reduce using rule 241 (jump_statement -> RETURN expression SEMICOLON .)
    THROW           reduce using rule 241 (jump_statement -> RETURN expression SEMICOLON .)
    CONST           reduce using rule 241 (jump_statement -> RETURN expression SEMICOLON .)
    ASM             reduce using rule 241 (jump_statement -> RETURN expression SEMICOLON .)
    TEMPLATE        reduce using rule 241 (jump_statement -> RETURN expression SEMICOLON .)
    TYPEDEF         reduce using rule 241 (jump_statement -> RETURN expression SEMICOLON .)
    DPLUSOP         reduce using rule 241 (jump_statement -> RETURN expression SEMICOLON .)
    DMINUSOP        reduce using rule 241 (jump_statement -> RETURN expression SEMICOLON .)
    SIZEOF          reduce using rule 241 (jump_statement -> RETURN expression SEMICOLON .)
    PLUSOP          reduce using rule 241 (jump_statement -> RETURN expression SEMICOLON .)
    MINUSOP         reduce using rule 241 (jump_statement -> RETURN expression SEMICOLON .)
    NOTSYM          reduce using rule 241 (jump_statement -> RETURN expression SEMICOLON .)
    BNOP            reduce using rule 241 (jump_statement -> RETURN expression SEMICOLON .)
    MULTOP          reduce using rule 241 (jump_statement -> RETURN expression SEMICOLON .)
    BANDOP          reduce using rule 241 (jump_statement -> RETURN expression SEMICOLON .)
    NEW             reduce using rule 241 (jump_statement -> RETURN expression SEMICOLON .)
    DELETE          reduce using rule 241 (jump_statement -> RETURN expression SEMICOLON .)
    CHAR            reduce using rule 241 (jump_statement -> RETURN expression SEMICOLON .)
    SHORT           reduce using rule 241 (jump_statement -> RETURN expression SEMICOLON .)
    INT             reduce using rule 241 (jump_statement -> RETURN expression SEMICOLON .)
    LONG            reduce using rule 241 (jump_statement -> RETURN expression SEMICOLON .)
    SIGNED          reduce using rule 241 (jump_statement -> RETURN expression SEMICOLON .)
    UNSIGNED        reduce using rule 241 (jump_statement -> RETURN expression SEMICOLON .)
    FLOAT           reduce using rule 241 (jump_statement -> RETURN expression SEMICOLON .)
    DOUBLE          reduce using rule 241 (jump_statement -> RETURN expression SEMICOLON .)
    VOID            reduce using rule 241 (jump_statement -> RETURN expression SEMICOLON .)
    STRING          reduce using rule 241 (jump_statement -> RETURN expression SEMICOLON .)
    AUTO            reduce using rule 241 (jump_statement -> RETURN expression SEMICOLON .)
    TYPE            reduce using rule 241 (jump_statement -> RETURN expression SEMICOLON .)
    CLASS           reduce using rule 241 (jump_statement -> RETURN expression SEMICOLON .)
    STRUCT          reduce using rule 241 (jump_statement -> RETURN expression SEMICOLON .)
    THIS            reduce using rule 241 (jump_statement -> RETURN expression SEMICOLON .)
    LPAREN          reduce using rule 241 (jump_statement -> RETURN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 241 (jump_statement -> RETURN expression SEMICOLON .)
    DOUBLEBNOP      reduce using rule 241 (jump_statement -> RETURN expression SEMICOLON .)
    STRING_L        reduce using rule 241 (jump_statement -> RETURN expression SEMICOLON .)
    NUMBER          reduce using rule 241 (jump_statement -> RETURN expression SEMICOLON .)
    SCHAR           reduce using rule 241 (jump_statement -> RETURN expression SEMICOLON .)
    LCPAREN         reduce using rule 241 (jump_statement -> RETURN expression SEMICOLON .)
    CASE            reduce using rule 241 (jump_statement -> RETURN expression SEMICOLON .)
    DEFAULT         reduce using rule 241 (jump_statement -> RETURN expression SEMICOLON .)


state 395

    (243) jump_statement -> GOTO IDENTIFIER SEMICOLON .

    RCPAREN         reduce using rule 243 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SEMICOLON       reduce using rule 243 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    IF              reduce using rule 243 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SWITCH          reduce using rule 243 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 243 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DO              reduce using rule 243 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    FOR             reduce using rule 243 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    BREAK           reduce using rule 243 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    CONTINUE        reduce using rule 243 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    RETURN          reduce using rule 243 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    GOTO            reduce using rule 243 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    TRY             reduce using rule 243 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    THROW           reduce using rule 243 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    CONST           reduce using rule 243 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    ASM             reduce using rule 243 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    TEMPLATE        reduce using rule 243 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    TYPEDEF         reduce using rule 243 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DPLUSOP         reduce using rule 243 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DMINUSOP        reduce using rule 243 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SIZEOF          reduce using rule 243 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    PLUSOP          reduce using rule 243 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    MINUSOP         reduce using rule 243 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    NOTSYM          reduce using rule 243 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    BNOP            reduce using rule 243 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    MULTOP          reduce using rule 243 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    BANDOP          reduce using rule 243 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    NEW             reduce using rule 243 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DELETE          reduce using rule 243 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    CHAR            reduce using rule 243 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SHORT           reduce using rule 243 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    INT             reduce using rule 243 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    LONG            reduce using rule 243 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SIGNED          reduce using rule 243 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    UNSIGNED        reduce using rule 243 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    FLOAT           reduce using rule 243 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DOUBLE          reduce using rule 243 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    VOID            reduce using rule 243 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    STRING          reduce using rule 243 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    AUTO            reduce using rule 243 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    TYPE            reduce using rule 243 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    CLASS           reduce using rule 243 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    STRUCT          reduce using rule 243 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    THIS            reduce using rule 243 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    LPAREN          reduce using rule 243 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 243 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DOUBLEBNOP      reduce using rule 243 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    STRING_L        reduce using rule 243 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    NUMBER          reduce using rule 243 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SCHAR           reduce using rule 243 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    LCPAREN         reduce using rule 243 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    CASE            reduce using rule 243 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DEFAULT         reduce using rule 243 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)


state 396

    (247) try_block -> TRY push_scope compound_statement . pop_scope CATCH push_scope compound_statement pop_scope
    (289) pop_scope -> .

    CATCH           reduce using rule 289 (pop_scope -> .)

    pop_scope                      shift and go to state 405

state 397

    (78) new_declarator -> new_declarator LSPAREN expression RSPAREN .

    MULTOP          reduce using rule 78 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    LSPAREN         reduce using rule 78 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    LPAREN          reduce using rule 78 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    DIVOP           reduce using rule 78 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    MODOP           reduce using rule 78 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    PLUSOP          reduce using rule 78 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    MINUSOP         reduce using rule 78 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    LSHIFT          reduce using rule 78 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    RSHIFT          reduce using rule 78 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    LTCOMP          reduce using rule 78 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    GTCOMP          reduce using rule 78 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    LTECOMP         reduce using rule 78 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    GTECOMP         reduce using rule 78 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    EQCOMP          reduce using rule 78 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    NEQCOMP         reduce using rule 78 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    BANDOP          reduce using rule 78 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    XOROP           reduce using rule 78 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    OROP            reduce using rule 78 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    ANDOP           reduce using rule 78 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    QUESMARK        reduce using rule 78 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    RSPAREN         reduce using rule 78 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    EQUAL           reduce using rule 78 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    MULTEQOP        reduce using rule 78 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    DIVEQOP         reduce using rule 78 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    MODEQOP         reduce using rule 78 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    PLUSEQOP        reduce using rule 78 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    MINUSEQOP       reduce using rule 78 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    LSHIFTEQOP      reduce using rule 78 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    RSHIFTEQOP      reduce using rule 78 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    BANDEQOP        reduce using rule 78 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    BOREQOP         reduce using rule 78 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    RPAREN          reduce using rule 78 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    COMMA           reduce using rule 78 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    SEMICOLON       reduce using rule 78 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    RCPAREN         reduce using rule 78 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    COLON           reduce using rule 78 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    RTEMPLATE       reduce using rule 78 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)


state 398

    (244) selection_statement -> IF LPAREN expression RPAREN . push_scope compound_statement pop_scope
    (245) selection_statement -> IF LPAREN expression RPAREN . push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope
    (288) push_scope -> .

    LCPAREN         reduce using rule 288 (push_scope -> .)

    push_scope                     shift and go to state 406

state 399

    (246) selection_statement -> SWITCH LPAREN expression RPAREN . push_scope LCPAREN labeled_statement_list RCPAREN pop_scope
    (288) push_scope -> .

    LCPAREN         reduce using rule 288 (push_scope -> .)

    push_scope                     shift and go to state 407

state 400

    (252) iteration_statement -> WHILE push_scope LPAREN expression . RPAREN statement pop_scope
    (45) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 408
    COMMA           shift and go to state 294


state 401

    (253) iteration_statement -> DO push_scope statement WHILE . LPAREN expression RPAREN SEMICOLON pop_scope

    LPAREN          shift and go to state 409


state 402

    (254) iteration_statement -> FOR LPAREN push_scope for_init_statement . expression SEMICOLON expression RPAREN compound_statement pop_scope
    (255) iteration_statement -> FOR LPAREN push_scope for_init_statement . SEMICOLON expression RPAREN compound_statement pop_scope
    (256) iteration_statement -> FOR LPAREN push_scope for_init_statement . expression SEMICOLON RPAREN compound_statement pop_scope
    (257) iteration_statement -> FOR LPAREN push_scope for_init_statement . SEMICOLON RPAREN statement pop_scope
    (43) expression -> . assignment_expression
    (44) expression -> . throw_expression
    (45) expression -> . expression COMMA assignment_expression
    (48) assignment_expression -> . conditional_expression
    (49) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (46) throw_expression -> . THROW expression
    (47) throw_expression -> . THROW
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMICOLON       shift and go to state 411
    THROW           shift and go to state 212
    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    THIS            shift and go to state 142
    LPAREN          shift and go to state 146
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    expression                     shift and go to state 410
    assignment_expression          shift and go to state 210
    throw_expression               shift and go to state 211
    conditional_expression         shift and go to state 149
    unary_expression               shift and go to state 150
    logical_OR_expression          shift and go to state 112
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    cast_expression                shift and go to state 124
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    logical_AND_expression         shift and go to state 113
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    inclusive_OR_expression        shift and go to state 114
    literal                        shift and go to state 141
    exclusive_OR_expression        shift and go to state 115
    AND_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 403

    (258) for_init_statement -> expression_statement .

    SEMICOLON       reduce using rule 258 (for_init_statement -> expression_statement .)
    THROW           reduce using rule 258 (for_init_statement -> expression_statement .)
    DPLUSOP         reduce using rule 258 (for_init_statement -> expression_statement .)
    DMINUSOP        reduce using rule 258 (for_init_statement -> expression_statement .)
    SIZEOF          reduce using rule 258 (for_init_statement -> expression_statement .)
    PLUSOP          reduce using rule 258 (for_init_statement -> expression_statement .)
    MINUSOP         reduce using rule 258 (for_init_statement -> expression_statement .)
    NOTSYM          reduce using rule 258 (for_init_statement -> expression_statement .)
    BNOP            reduce using rule 258 (for_init_statement -> expression_statement .)
    MULTOP          reduce using rule 258 (for_init_statement -> expression_statement .)
    BANDOP          reduce using rule 258 (for_init_statement -> expression_statement .)
    NEW             reduce using rule 258 (for_init_statement -> expression_statement .)
    DELETE          reduce using rule 258 (for_init_statement -> expression_statement .)
    THIS            reduce using rule 258 (for_init_statement -> expression_statement .)
    LPAREN          reduce using rule 258 (for_init_statement -> expression_statement .)
    IDENTIFIER      reduce using rule 258 (for_init_statement -> expression_statement .)
    DOUBLEBNOP      reduce using rule 258 (for_init_statement -> expression_statement .)
    STRING_L        reduce using rule 258 (for_init_statement -> expression_statement .)
    NUMBER          reduce using rule 258 (for_init_statement -> expression_statement .)
    SCHAR           reduce using rule 258 (for_init_statement -> expression_statement .)


state 404

    (259) for_init_statement -> declaration_statement .

    SEMICOLON       reduce using rule 259 (for_init_statement -> declaration_statement .)
    THROW           reduce using rule 259 (for_init_statement -> declaration_statement .)
    DPLUSOP         reduce using rule 259 (for_init_statement -> declaration_statement .)
    DMINUSOP        reduce using rule 259 (for_init_statement -> declaration_statement .)
    SIZEOF          reduce using rule 259 (for_init_statement -> declaration_statement .)
    PLUSOP          reduce using rule 259 (for_init_statement -> declaration_statement .)
    MINUSOP         reduce using rule 259 (for_init_statement -> declaration_statement .)
    NOTSYM          reduce using rule 259 (for_init_statement -> declaration_statement .)
    BNOP            reduce using rule 259 (for_init_statement -> declaration_statement .)
    MULTOP          reduce using rule 259 (for_init_statement -> declaration_statement .)
    BANDOP          reduce using rule 259 (for_init_statement -> declaration_statement .)
    NEW             reduce using rule 259 (for_init_statement -> declaration_statement .)
    DELETE          reduce using rule 259 (for_init_statement -> declaration_statement .)
    THIS            reduce using rule 259 (for_init_statement -> declaration_statement .)
    LPAREN          reduce using rule 259 (for_init_statement -> declaration_statement .)
    IDENTIFIER      reduce using rule 259 (for_init_statement -> declaration_statement .)
    DOUBLEBNOP      reduce using rule 259 (for_init_statement -> declaration_statement .)
    STRING_L        reduce using rule 259 (for_init_statement -> declaration_statement .)
    NUMBER          reduce using rule 259 (for_init_statement -> declaration_statement .)
    SCHAR           reduce using rule 259 (for_init_statement -> declaration_statement .)


state 405

    (247) try_block -> TRY push_scope compound_statement pop_scope . CATCH push_scope compound_statement pop_scope

    CATCH           shift and go to state 412


state 406

    (244) selection_statement -> IF LPAREN expression RPAREN push_scope . compound_statement pop_scope
    (245) selection_statement -> IF LPAREN expression RPAREN push_scope . compound_statement pop_scope ELSE push_scope compound_statement pop_scope
    (228) compound_statement -> . LCPAREN statement_list RCPAREN
    (229) compound_statement -> . LCPAREN RCPAREN

    LCPAREN         shift and go to state 271

    compound_statement             shift and go to state 413

state 407

    (246) selection_statement -> SWITCH LPAREN expression RPAREN push_scope . LCPAREN labeled_statement_list RCPAREN pop_scope

    LCPAREN         shift and go to state 414


state 408

    (252) iteration_statement -> WHILE push_scope LPAREN expression RPAREN . statement pop_scope
    (232) statement -> . expression_statement
    (233) statement -> . push_scope compound_statement pop_scope
    (234) statement -> . selection_statement
    (235) statement -> . iteration_statement
    (236) statement -> . jump_statement
    (237) statement -> . declaration_statement
    (238) statement -> . try_block
    (260) expression_statement -> . expression SEMICOLON
    (261) expression_statement -> . SEMICOLON
    (288) push_scope -> .
    (244) selection_statement -> . IF LPAREN expression RPAREN push_scope compound_statement pop_scope
    (245) selection_statement -> . IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope
    (246) selection_statement -> . SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope
    (252) iteration_statement -> . WHILE push_scope LPAREN expression RPAREN statement pop_scope
    (253) iteration_statement -> . DO push_scope statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope
    (254) iteration_statement -> . FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope
    (255) iteration_statement -> . FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope
    (256) iteration_statement -> . FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope
    (257) iteration_statement -> . FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN statement pop_scope
    (239) jump_statement -> . BREAK SEMICOLON
    (240) jump_statement -> . CONTINUE SEMICOLON
    (241) jump_statement -> . RETURN expression SEMICOLON
    (242) jump_statement -> . RETURN SEMICOLON
    (243) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (262) declaration_statement -> . declaration
    (247) try_block -> . TRY push_scope compound_statement pop_scope CATCH push_scope compound_statement pop_scope
    (43) expression -> . assignment_expression
    (44) expression -> . throw_expression
    (45) expression -> . expression COMMA assignment_expression
    (263) declaration -> . type_specifier_ declarator_list SEMICOLON
    (264) declaration -> . asm_declaration
    (265) declaration -> . function_definition
    (266) declaration -> . function_decl
    (267) declaration -> . class_define_specifier SEMICOLON
    (268) declaration -> . template_declaration
    (269) declaration -> . typedef_declarator
    (48) assignment_expression -> . conditional_expression
    (49) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (46) throw_expression -> . THROW expression
    (47) throw_expression -> . THROW
    (167) type_specifier_ -> . CONST type_specifier
    (168) type_specifier_ -> . type_specifier
    (285) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (224) function_definition -> . type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope
    (225) function_decl -> . type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope
    (202) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (203) class_define_specifier -> . class_head LCPAREN RCPAREN
    (270) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (169) typedef_declarator -> . TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON
    (170) typedef_declarator -> . TYPEDEF type_specifier_ IDENTIFIER SEMICOLON
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (171) type_specifier -> . simple_type_name
    (172) type_specifier -> . complex_type_specifier
    (189) class_head -> . class_key IDENTIFIER base_spec
    (190) class_head -> . class_key IDENTIFIER
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (173) simple_type_name -> . CHAR
    (174) simple_type_name -> . SHORT
    (175) simple_type_name -> . INT
    (176) simple_type_name -> . LONG
    (177) simple_type_name -> . SIGNED
    (178) simple_type_name -> . UNSIGNED
    (179) simple_type_name -> . FLOAT
    (180) simple_type_name -> . DOUBLE
    (181) simple_type_name -> . VOID
    (182) simple_type_name -> . STRING
    (183) simple_type_name -> . AUTO
    (184) complex_type_specifier -> . class_key IDENTIFIER
    (185) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (186) complex_type_specifier -> . TYPE IDENTIFIER
    (187) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (200) class_key -> . CLASS
    (201) class_key -> . STRUCT
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMICOLON       shift and go to state 334
    LCPAREN         reduce using rule 288 (push_scope -> .)
    IF              shift and go to state 335
    SWITCH          shift and go to state 336
    WHILE           shift and go to state 337
    DO              shift and go to state 338
    FOR             shift and go to state 339
    BREAK           shift and go to state 340
    CONTINUE        shift and go to state 341
    RETURN          shift and go to state 342
    GOTO            shift and go to state 343
    TRY             shift and go to state 345
    THROW           shift and go to state 212
    CONST           shift and go to state 16
    ASM             shift and go to state 18
    TEMPLATE        shift and go to state 20
    TYPEDEF         shift and go to state 21
    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38
    THIS            shift and go to state 142
    LPAREN          shift and go to state 146
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    push_scope                     shift and go to state 327
    expression                     shift and go to state 333
    statement                      shift and go to state 415
    expression_statement           shift and go to state 326
    selection_statement            shift and go to state 328
    iteration_statement            shift and go to state 329
    jump_statement                 shift and go to state 330
    declaration_statement          shift and go to state 331
    try_block                      shift and go to state 332
    declaration                    shift and go to state 344
    assignment_expression          shift and go to state 210
    throw_expression               shift and go to state 211
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    function_decl                  shift and go to state 12
    class_define_specifier         shift and go to state 13
    template_declaration           shift and go to state 14
    typedef_declarator             shift and go to state 15
    conditional_expression         shift and go to state 149
    unary_expression               shift and go to state 150
    type_specifier                 shift and go to state 17
    class_head                     shift and go to state 19
    logical_OR_expression          shift and go to state 112
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    cast_expression                shift and go to state 124
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 24
    logical_AND_expression         shift and go to state 113
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    inclusive_OR_expression        shift and go to state 114
    literal                        shift and go to state 141
    exclusive_OR_expression        shift and go to state 115
    AND_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 409

    (253) iteration_statement -> DO push_scope statement WHILE LPAREN . expression RPAREN SEMICOLON pop_scope
    (43) expression -> . assignment_expression
    (44) expression -> . throw_expression
    (45) expression -> . expression COMMA assignment_expression
    (48) assignment_expression -> . conditional_expression
    (49) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (46) throw_expression -> . THROW expression
    (47) throw_expression -> . THROW
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression

    THROW           shift and go to state 212
    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    THIS            shift and go to state 142
    LPAREN          shift and go to state 146
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    expression                     shift and go to state 416
    assignment_expression          shift and go to state 210
    throw_expression               shift and go to state 211
    conditional_expression         shift and go to state 149
    unary_expression               shift and go to state 150
    logical_OR_expression          shift and go to state 112
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    cast_expression                shift and go to state 124
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    logical_AND_expression         shift and go to state 113
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    inclusive_OR_expression        shift and go to state 114
    literal                        shift and go to state 141
    exclusive_OR_expression        shift and go to state 115
    AND_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 410

    (254) iteration_statement -> FOR LPAREN push_scope for_init_statement expression . SEMICOLON expression RPAREN compound_statement pop_scope
    (256) iteration_statement -> FOR LPAREN push_scope for_init_statement expression . SEMICOLON RPAREN compound_statement pop_scope
    (45) expression -> expression . COMMA assignment_expression

    SEMICOLON       shift and go to state 417
    COMMA           shift and go to state 294


state 411

    (255) iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON . expression RPAREN compound_statement pop_scope
    (257) iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON . RPAREN statement pop_scope
    (43) expression -> . assignment_expression
    (44) expression -> . throw_expression
    (45) expression -> . expression COMMA assignment_expression
    (48) assignment_expression -> . conditional_expression
    (49) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (46) throw_expression -> . THROW expression
    (47) throw_expression -> . THROW
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 419
    THROW           shift and go to state 212
    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    THIS            shift and go to state 142
    LPAREN          shift and go to state 146
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    expression                     shift and go to state 418
    assignment_expression          shift and go to state 210
    throw_expression               shift and go to state 211
    conditional_expression         shift and go to state 149
    unary_expression               shift and go to state 150
    logical_OR_expression          shift and go to state 112
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    cast_expression                shift and go to state 124
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    logical_AND_expression         shift and go to state 113
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    inclusive_OR_expression        shift and go to state 114
    literal                        shift and go to state 141
    exclusive_OR_expression        shift and go to state 115
    AND_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 412

    (247) try_block -> TRY push_scope compound_statement pop_scope CATCH . push_scope compound_statement pop_scope
    (288) push_scope -> .

    LCPAREN         reduce using rule 288 (push_scope -> .)

    push_scope                     shift and go to state 420

state 413

    (244) selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement . pop_scope
    (245) selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement . pop_scope ELSE push_scope compound_statement pop_scope
    (289) pop_scope -> .

    ELSE            reduce using rule 289 (pop_scope -> .)
    RCPAREN         reduce using rule 289 (pop_scope -> .)
    SEMICOLON       reduce using rule 289 (pop_scope -> .)
    IF              reduce using rule 289 (pop_scope -> .)
    SWITCH          reduce using rule 289 (pop_scope -> .)
    WHILE           reduce using rule 289 (pop_scope -> .)
    DO              reduce using rule 289 (pop_scope -> .)
    FOR             reduce using rule 289 (pop_scope -> .)
    BREAK           reduce using rule 289 (pop_scope -> .)
    CONTINUE        reduce using rule 289 (pop_scope -> .)
    RETURN          reduce using rule 289 (pop_scope -> .)
    GOTO            reduce using rule 289 (pop_scope -> .)
    TRY             reduce using rule 289 (pop_scope -> .)
    THROW           reduce using rule 289 (pop_scope -> .)
    CONST           reduce using rule 289 (pop_scope -> .)
    ASM             reduce using rule 289 (pop_scope -> .)
    TEMPLATE        reduce using rule 289 (pop_scope -> .)
    TYPEDEF         reduce using rule 289 (pop_scope -> .)
    DPLUSOP         reduce using rule 289 (pop_scope -> .)
    DMINUSOP        reduce using rule 289 (pop_scope -> .)
    SIZEOF          reduce using rule 289 (pop_scope -> .)
    PLUSOP          reduce using rule 289 (pop_scope -> .)
    MINUSOP         reduce using rule 289 (pop_scope -> .)
    NOTSYM          reduce using rule 289 (pop_scope -> .)
    BNOP            reduce using rule 289 (pop_scope -> .)
    MULTOP          reduce using rule 289 (pop_scope -> .)
    BANDOP          reduce using rule 289 (pop_scope -> .)
    NEW             reduce using rule 289 (pop_scope -> .)
    DELETE          reduce using rule 289 (pop_scope -> .)
    CHAR            reduce using rule 289 (pop_scope -> .)
    SHORT           reduce using rule 289 (pop_scope -> .)
    INT             reduce using rule 289 (pop_scope -> .)
    LONG            reduce using rule 289 (pop_scope -> .)
    SIGNED          reduce using rule 289 (pop_scope -> .)
    UNSIGNED        reduce using rule 289 (pop_scope -> .)
    FLOAT           reduce using rule 289 (pop_scope -> .)
    DOUBLE          reduce using rule 289 (pop_scope -> .)
    VOID            reduce using rule 289 (pop_scope -> .)
    STRING          reduce using rule 289 (pop_scope -> .)
    AUTO            reduce using rule 289 (pop_scope -> .)
    TYPE            reduce using rule 289 (pop_scope -> .)
    CLASS           reduce using rule 289 (pop_scope -> .)
    STRUCT          reduce using rule 289 (pop_scope -> .)
    THIS            reduce using rule 289 (pop_scope -> .)
    LPAREN          reduce using rule 289 (pop_scope -> .)
    IDENTIFIER      reduce using rule 289 (pop_scope -> .)
    DOUBLEBNOP      reduce using rule 289 (pop_scope -> .)
    STRING_L        reduce using rule 289 (pop_scope -> .)
    NUMBER          reduce using rule 289 (pop_scope -> .)
    SCHAR           reduce using rule 289 (pop_scope -> .)
    LCPAREN         reduce using rule 289 (pop_scope -> .)
    CASE            reduce using rule 289 (pop_scope -> .)
    DEFAULT         reduce using rule 289 (pop_scope -> .)

    pop_scope                      shift and go to state 421

state 414

    (246) selection_statement -> SWITCH LPAREN expression RPAREN push_scope LCPAREN . labeled_statement_list RCPAREN pop_scope
    (248) labeled_statement_list -> . labeled_statement
    (249) labeled_statement_list -> . labeled_statement_list labeled_statement
    (250) labeled_statement -> . CASE constant_expression COLON statement_list
    (251) labeled_statement -> . DEFAULT COLON statement_list

    CASE            shift and go to state 424
    DEFAULT         shift and go to state 425

    labeled_statement_list         shift and go to state 422
    labeled_statement              shift and go to state 423

state 415

    (252) iteration_statement -> WHILE push_scope LPAREN expression RPAREN statement . pop_scope
    (289) pop_scope -> .

    RCPAREN         reduce using rule 289 (pop_scope -> .)
    SEMICOLON       reduce using rule 289 (pop_scope -> .)
    IF              reduce using rule 289 (pop_scope -> .)
    SWITCH          reduce using rule 289 (pop_scope -> .)
    WHILE           reduce using rule 289 (pop_scope -> .)
    DO              reduce using rule 289 (pop_scope -> .)
    FOR             reduce using rule 289 (pop_scope -> .)
    BREAK           reduce using rule 289 (pop_scope -> .)
    CONTINUE        reduce using rule 289 (pop_scope -> .)
    RETURN          reduce using rule 289 (pop_scope -> .)
    GOTO            reduce using rule 289 (pop_scope -> .)
    TRY             reduce using rule 289 (pop_scope -> .)
    THROW           reduce using rule 289 (pop_scope -> .)
    CONST           reduce using rule 289 (pop_scope -> .)
    ASM             reduce using rule 289 (pop_scope -> .)
    TEMPLATE        reduce using rule 289 (pop_scope -> .)
    TYPEDEF         reduce using rule 289 (pop_scope -> .)
    DPLUSOP         reduce using rule 289 (pop_scope -> .)
    DMINUSOP        reduce using rule 289 (pop_scope -> .)
    SIZEOF          reduce using rule 289 (pop_scope -> .)
    PLUSOP          reduce using rule 289 (pop_scope -> .)
    MINUSOP         reduce using rule 289 (pop_scope -> .)
    NOTSYM          reduce using rule 289 (pop_scope -> .)
    BNOP            reduce using rule 289 (pop_scope -> .)
    MULTOP          reduce using rule 289 (pop_scope -> .)
    BANDOP          reduce using rule 289 (pop_scope -> .)
    NEW             reduce using rule 289 (pop_scope -> .)
    DELETE          reduce using rule 289 (pop_scope -> .)
    CHAR            reduce using rule 289 (pop_scope -> .)
    SHORT           reduce using rule 289 (pop_scope -> .)
    INT             reduce using rule 289 (pop_scope -> .)
    LONG            reduce using rule 289 (pop_scope -> .)
    SIGNED          reduce using rule 289 (pop_scope -> .)
    UNSIGNED        reduce using rule 289 (pop_scope -> .)
    FLOAT           reduce using rule 289 (pop_scope -> .)
    DOUBLE          reduce using rule 289 (pop_scope -> .)
    VOID            reduce using rule 289 (pop_scope -> .)
    STRING          reduce using rule 289 (pop_scope -> .)
    AUTO            reduce using rule 289 (pop_scope -> .)
    TYPE            reduce using rule 289 (pop_scope -> .)
    CLASS           reduce using rule 289 (pop_scope -> .)
    STRUCT          reduce using rule 289 (pop_scope -> .)
    THIS            reduce using rule 289 (pop_scope -> .)
    LPAREN          reduce using rule 289 (pop_scope -> .)
    IDENTIFIER      reduce using rule 289 (pop_scope -> .)
    DOUBLEBNOP      reduce using rule 289 (pop_scope -> .)
    STRING_L        reduce using rule 289 (pop_scope -> .)
    NUMBER          reduce using rule 289 (pop_scope -> .)
    SCHAR           reduce using rule 289 (pop_scope -> .)
    LCPAREN         reduce using rule 289 (pop_scope -> .)
    CASE            reduce using rule 289 (pop_scope -> .)
    DEFAULT         reduce using rule 289 (pop_scope -> .)

    pop_scope                      shift and go to state 426

state 416

    (253) iteration_statement -> DO push_scope statement WHILE LPAREN expression . RPAREN SEMICOLON pop_scope
    (45) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 427
    COMMA           shift and go to state 294


state 417

    (254) iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON . expression RPAREN compound_statement pop_scope
    (256) iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON . RPAREN compound_statement pop_scope
    (43) expression -> . assignment_expression
    (44) expression -> . throw_expression
    (45) expression -> . expression COMMA assignment_expression
    (48) assignment_expression -> . conditional_expression
    (49) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (46) throw_expression -> . THROW expression
    (47) throw_expression -> . THROW
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 429
    THROW           shift and go to state 212
    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    THIS            shift and go to state 142
    LPAREN          shift and go to state 146
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    expression                     shift and go to state 428
    assignment_expression          shift and go to state 210
    throw_expression               shift and go to state 211
    conditional_expression         shift and go to state 149
    unary_expression               shift and go to state 150
    logical_OR_expression          shift and go to state 112
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    cast_expression                shift and go to state 124
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    logical_AND_expression         shift and go to state 113
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    inclusive_OR_expression        shift and go to state 114
    literal                        shift and go to state 141
    exclusive_OR_expression        shift and go to state 115
    AND_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 418

    (255) iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON expression . RPAREN compound_statement pop_scope
    (45) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 430
    COMMA           shift and go to state 294


state 419

    (257) iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN . statement pop_scope
    (232) statement -> . expression_statement
    (233) statement -> . push_scope compound_statement pop_scope
    (234) statement -> . selection_statement
    (235) statement -> . iteration_statement
    (236) statement -> . jump_statement
    (237) statement -> . declaration_statement
    (238) statement -> . try_block
    (260) expression_statement -> . expression SEMICOLON
    (261) expression_statement -> . SEMICOLON
    (288) push_scope -> .
    (244) selection_statement -> . IF LPAREN expression RPAREN push_scope compound_statement pop_scope
    (245) selection_statement -> . IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope
    (246) selection_statement -> . SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope
    (252) iteration_statement -> . WHILE push_scope LPAREN expression RPAREN statement pop_scope
    (253) iteration_statement -> . DO push_scope statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope
    (254) iteration_statement -> . FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope
    (255) iteration_statement -> . FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope
    (256) iteration_statement -> . FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope
    (257) iteration_statement -> . FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN statement pop_scope
    (239) jump_statement -> . BREAK SEMICOLON
    (240) jump_statement -> . CONTINUE SEMICOLON
    (241) jump_statement -> . RETURN expression SEMICOLON
    (242) jump_statement -> . RETURN SEMICOLON
    (243) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (262) declaration_statement -> . declaration
    (247) try_block -> . TRY push_scope compound_statement pop_scope CATCH push_scope compound_statement pop_scope
    (43) expression -> . assignment_expression
    (44) expression -> . throw_expression
    (45) expression -> . expression COMMA assignment_expression
    (263) declaration -> . type_specifier_ declarator_list SEMICOLON
    (264) declaration -> . asm_declaration
    (265) declaration -> . function_definition
    (266) declaration -> . function_decl
    (267) declaration -> . class_define_specifier SEMICOLON
    (268) declaration -> . template_declaration
    (269) declaration -> . typedef_declarator
    (48) assignment_expression -> . conditional_expression
    (49) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (46) throw_expression -> . THROW expression
    (47) throw_expression -> . THROW
    (167) type_specifier_ -> . CONST type_specifier
    (168) type_specifier_ -> . type_specifier
    (285) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (224) function_definition -> . type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope
    (225) function_decl -> . type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope
    (202) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (203) class_define_specifier -> . class_head LCPAREN RCPAREN
    (270) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (169) typedef_declarator -> . TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON
    (170) typedef_declarator -> . TYPEDEF type_specifier_ IDENTIFIER SEMICOLON
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (171) type_specifier -> . simple_type_name
    (172) type_specifier -> . complex_type_specifier
    (189) class_head -> . class_key IDENTIFIER base_spec
    (190) class_head -> . class_key IDENTIFIER
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (173) simple_type_name -> . CHAR
    (174) simple_type_name -> . SHORT
    (175) simple_type_name -> . INT
    (176) simple_type_name -> . LONG
    (177) simple_type_name -> . SIGNED
    (178) simple_type_name -> . UNSIGNED
    (179) simple_type_name -> . FLOAT
    (180) simple_type_name -> . DOUBLE
    (181) simple_type_name -> . VOID
    (182) simple_type_name -> . STRING
    (183) simple_type_name -> . AUTO
    (184) complex_type_specifier -> . class_key IDENTIFIER
    (185) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (186) complex_type_specifier -> . TYPE IDENTIFIER
    (187) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (200) class_key -> . CLASS
    (201) class_key -> . STRUCT
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMICOLON       shift and go to state 334
    LCPAREN         reduce using rule 288 (push_scope -> .)
    IF              shift and go to state 335
    SWITCH          shift and go to state 336
    WHILE           shift and go to state 337
    DO              shift and go to state 338
    FOR             shift and go to state 339
    BREAK           shift and go to state 340
    CONTINUE        shift and go to state 341
    RETURN          shift and go to state 342
    GOTO            shift and go to state 343
    TRY             shift and go to state 345
    THROW           shift and go to state 212
    CONST           shift and go to state 16
    ASM             shift and go to state 18
    TEMPLATE        shift and go to state 20
    TYPEDEF         shift and go to state 21
    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38
    THIS            shift and go to state 142
    LPAREN          shift and go to state 146
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    push_scope                     shift and go to state 327
    statement                      shift and go to state 431
    expression_statement           shift and go to state 326
    selection_statement            shift and go to state 328
    iteration_statement            shift and go to state 329
    jump_statement                 shift and go to state 330
    declaration_statement          shift and go to state 331
    try_block                      shift and go to state 332
    expression                     shift and go to state 333
    declaration                    shift and go to state 344
    assignment_expression          shift and go to state 210
    throw_expression               shift and go to state 211
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    function_decl                  shift and go to state 12
    class_define_specifier         shift and go to state 13
    template_declaration           shift and go to state 14
    typedef_declarator             shift and go to state 15
    conditional_expression         shift and go to state 149
    unary_expression               shift and go to state 150
    type_specifier                 shift and go to state 17
    class_head                     shift and go to state 19
    logical_OR_expression          shift and go to state 112
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    cast_expression                shift and go to state 124
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 24
    logical_AND_expression         shift and go to state 113
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    inclusive_OR_expression        shift and go to state 114
    literal                        shift and go to state 141
    exclusive_OR_expression        shift and go to state 115
    AND_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 420

    (247) try_block -> TRY push_scope compound_statement pop_scope CATCH push_scope . compound_statement pop_scope
    (228) compound_statement -> . LCPAREN statement_list RCPAREN
    (229) compound_statement -> . LCPAREN RCPAREN

    LCPAREN         shift and go to state 271

    compound_statement             shift and go to state 432

state 421

    (244) selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope .
    (245) selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope . ELSE push_scope compound_statement pop_scope

    RCPAREN         reduce using rule 244 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope .)
    SEMICOLON       reduce using rule 244 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope .)
    IF              reduce using rule 244 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope .)
    SWITCH          reduce using rule 244 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope .)
    WHILE           reduce using rule 244 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope .)
    DO              reduce using rule 244 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope .)
    FOR             reduce using rule 244 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope .)
    BREAK           reduce using rule 244 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope .)
    CONTINUE        reduce using rule 244 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope .)
    RETURN          reduce using rule 244 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope .)
    GOTO            reduce using rule 244 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope .)
    TRY             reduce using rule 244 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope .)
    THROW           reduce using rule 244 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope .)
    CONST           reduce using rule 244 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope .)
    ASM             reduce using rule 244 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope .)
    TEMPLATE        reduce using rule 244 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope .)
    TYPEDEF         reduce using rule 244 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope .)
    DPLUSOP         reduce using rule 244 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope .)
    DMINUSOP        reduce using rule 244 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope .)
    SIZEOF          reduce using rule 244 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope .)
    PLUSOP          reduce using rule 244 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope .)
    MINUSOP         reduce using rule 244 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope .)
    NOTSYM          reduce using rule 244 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope .)
    BNOP            reduce using rule 244 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope .)
    MULTOP          reduce using rule 244 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope .)
    BANDOP          reduce using rule 244 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope .)
    NEW             reduce using rule 244 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope .)
    DELETE          reduce using rule 244 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope .)
    CHAR            reduce using rule 244 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope .)
    SHORT           reduce using rule 244 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope .)
    INT             reduce using rule 244 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope .)
    LONG            reduce using rule 244 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope .)
    SIGNED          reduce using rule 244 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope .)
    UNSIGNED        reduce using rule 244 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope .)
    FLOAT           reduce using rule 244 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope .)
    DOUBLE          reduce using rule 244 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope .)
    VOID            reduce using rule 244 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope .)
    STRING          reduce using rule 244 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope .)
    AUTO            reduce using rule 244 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope .)
    TYPE            reduce using rule 244 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope .)
    CLASS           reduce using rule 244 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope .)
    STRUCT          reduce using rule 244 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope .)
    THIS            reduce using rule 244 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope .)
    LPAREN          reduce using rule 244 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope .)
    IDENTIFIER      reduce using rule 244 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope .)
    DOUBLEBNOP      reduce using rule 244 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope .)
    STRING_L        reduce using rule 244 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope .)
    NUMBER          reduce using rule 244 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope .)
    SCHAR           reduce using rule 244 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope .)
    LCPAREN         reduce using rule 244 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope .)
    CASE            reduce using rule 244 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope .)
    DEFAULT         reduce using rule 244 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope .)
    ELSE            shift and go to state 433


state 422

    (246) selection_statement -> SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list . RCPAREN pop_scope
    (249) labeled_statement_list -> labeled_statement_list . labeled_statement
    (250) labeled_statement -> . CASE constant_expression COLON statement_list
    (251) labeled_statement -> . DEFAULT COLON statement_list

    RCPAREN         shift and go to state 434
    CASE            shift and go to state 424
    DEFAULT         shift and go to state 425

    labeled_statement              shift and go to state 435

state 423

    (248) labeled_statement_list -> labeled_statement .

    RCPAREN         reduce using rule 248 (labeled_statement_list -> labeled_statement .)
    CASE            reduce using rule 248 (labeled_statement_list -> labeled_statement .)
    DEFAULT         reduce using rule 248 (labeled_statement_list -> labeled_statement .)


state 424

    (250) labeled_statement -> CASE . constant_expression COLON statement_list
    (12) constant_expression -> . conditional_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR

    LPAREN          shift and go to state 126
    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    THIS            shift and go to state 142
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    constant_expression            shift and go to state 436
    conditional_expression         shift and go to state 111
    logical_OR_expression          shift and go to state 112
    logical_AND_expression         shift and go to state 113
    inclusive_OR_expression        shift and go to state 114
    exclusive_OR_expression        shift and go to state 115
    AND_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121
    cast_expression                shift and go to state 124
    unary_expression               shift and go to state 125
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    literal                        shift and go to state 141

state 425

    (251) labeled_statement -> DEFAULT . COLON statement_list

    COLON           shift and go to state 437


state 426

    (252) iteration_statement -> WHILE push_scope LPAREN expression RPAREN statement pop_scope .

    RCPAREN         reduce using rule 252 (iteration_statement -> WHILE push_scope LPAREN expression RPAREN statement pop_scope .)
    SEMICOLON       reduce using rule 252 (iteration_statement -> WHILE push_scope LPAREN expression RPAREN statement pop_scope .)
    IF              reduce using rule 252 (iteration_statement -> WHILE push_scope LPAREN expression RPAREN statement pop_scope .)
    SWITCH          reduce using rule 252 (iteration_statement -> WHILE push_scope LPAREN expression RPAREN statement pop_scope .)
    WHILE           reduce using rule 252 (iteration_statement -> WHILE push_scope LPAREN expression RPAREN statement pop_scope .)
    DO              reduce using rule 252 (iteration_statement -> WHILE push_scope LPAREN expression RPAREN statement pop_scope .)
    FOR             reduce using rule 252 (iteration_statement -> WHILE push_scope LPAREN expression RPAREN statement pop_scope .)
    BREAK           reduce using rule 252 (iteration_statement -> WHILE push_scope LPAREN expression RPAREN statement pop_scope .)
    CONTINUE        reduce using rule 252 (iteration_statement -> WHILE push_scope LPAREN expression RPAREN statement pop_scope .)
    RETURN          reduce using rule 252 (iteration_statement -> WHILE push_scope LPAREN expression RPAREN statement pop_scope .)
    GOTO            reduce using rule 252 (iteration_statement -> WHILE push_scope LPAREN expression RPAREN statement pop_scope .)
    TRY             reduce using rule 252 (iteration_statement -> WHILE push_scope LPAREN expression RPAREN statement pop_scope .)
    THROW           reduce using rule 252 (iteration_statement -> WHILE push_scope LPAREN expression RPAREN statement pop_scope .)
    CONST           reduce using rule 252 (iteration_statement -> WHILE push_scope LPAREN expression RPAREN statement pop_scope .)
    ASM             reduce using rule 252 (iteration_statement -> WHILE push_scope LPAREN expression RPAREN statement pop_scope .)
    TEMPLATE        reduce using rule 252 (iteration_statement -> WHILE push_scope LPAREN expression RPAREN statement pop_scope .)
    TYPEDEF         reduce using rule 252 (iteration_statement -> WHILE push_scope LPAREN expression RPAREN statement pop_scope .)
    DPLUSOP         reduce using rule 252 (iteration_statement -> WHILE push_scope LPAREN expression RPAREN statement pop_scope .)
    DMINUSOP        reduce using rule 252 (iteration_statement -> WHILE push_scope LPAREN expression RPAREN statement pop_scope .)
    SIZEOF          reduce using rule 252 (iteration_statement -> WHILE push_scope LPAREN expression RPAREN statement pop_scope .)
    PLUSOP          reduce using rule 252 (iteration_statement -> WHILE push_scope LPAREN expression RPAREN statement pop_scope .)
    MINUSOP         reduce using rule 252 (iteration_statement -> WHILE push_scope LPAREN expression RPAREN statement pop_scope .)
    NOTSYM          reduce using rule 252 (iteration_statement -> WHILE push_scope LPAREN expression RPAREN statement pop_scope .)
    BNOP            reduce using rule 252 (iteration_statement -> WHILE push_scope LPAREN expression RPAREN statement pop_scope .)
    MULTOP          reduce using rule 252 (iteration_statement -> WHILE push_scope LPAREN expression RPAREN statement pop_scope .)
    BANDOP          reduce using rule 252 (iteration_statement -> WHILE push_scope LPAREN expression RPAREN statement pop_scope .)
    NEW             reduce using rule 252 (iteration_statement -> WHILE push_scope LPAREN expression RPAREN statement pop_scope .)
    DELETE          reduce using rule 252 (iteration_statement -> WHILE push_scope LPAREN expression RPAREN statement pop_scope .)
    CHAR            reduce using rule 252 (iteration_statement -> WHILE push_scope LPAREN expression RPAREN statement pop_scope .)
    SHORT           reduce using rule 252 (iteration_statement -> WHILE push_scope LPAREN expression RPAREN statement pop_scope .)
    INT             reduce using rule 252 (iteration_statement -> WHILE push_scope LPAREN expression RPAREN statement pop_scope .)
    LONG            reduce using rule 252 (iteration_statement -> WHILE push_scope LPAREN expression RPAREN statement pop_scope .)
    SIGNED          reduce using rule 252 (iteration_statement -> WHILE push_scope LPAREN expression RPAREN statement pop_scope .)
    UNSIGNED        reduce using rule 252 (iteration_statement -> WHILE push_scope LPAREN expression RPAREN statement pop_scope .)
    FLOAT           reduce using rule 252 (iteration_statement -> WHILE push_scope LPAREN expression RPAREN statement pop_scope .)
    DOUBLE          reduce using rule 252 (iteration_statement -> WHILE push_scope LPAREN expression RPAREN statement pop_scope .)
    VOID            reduce using rule 252 (iteration_statement -> WHILE push_scope LPAREN expression RPAREN statement pop_scope .)
    STRING          reduce using rule 252 (iteration_statement -> WHILE push_scope LPAREN expression RPAREN statement pop_scope .)
    AUTO            reduce using rule 252 (iteration_statement -> WHILE push_scope LPAREN expression RPAREN statement pop_scope .)
    TYPE            reduce using rule 252 (iteration_statement -> WHILE push_scope LPAREN expression RPAREN statement pop_scope .)
    CLASS           reduce using rule 252 (iteration_statement -> WHILE push_scope LPAREN expression RPAREN statement pop_scope .)
    STRUCT          reduce using rule 252 (iteration_statement -> WHILE push_scope LPAREN expression RPAREN statement pop_scope .)
    THIS            reduce using rule 252 (iteration_statement -> WHILE push_scope LPAREN expression RPAREN statement pop_scope .)
    LPAREN          reduce using rule 252 (iteration_statement -> WHILE push_scope LPAREN expression RPAREN statement pop_scope .)
    IDENTIFIER      reduce using rule 252 (iteration_statement -> WHILE push_scope LPAREN expression RPAREN statement pop_scope .)
    DOUBLEBNOP      reduce using rule 252 (iteration_statement -> WHILE push_scope LPAREN expression RPAREN statement pop_scope .)
    STRING_L        reduce using rule 252 (iteration_statement -> WHILE push_scope LPAREN expression RPAREN statement pop_scope .)
    NUMBER          reduce using rule 252 (iteration_statement -> WHILE push_scope LPAREN expression RPAREN statement pop_scope .)
    SCHAR           reduce using rule 252 (iteration_statement -> WHILE push_scope LPAREN expression RPAREN statement pop_scope .)
    LCPAREN         reduce using rule 252 (iteration_statement -> WHILE push_scope LPAREN expression RPAREN statement pop_scope .)
    CASE            reduce using rule 252 (iteration_statement -> WHILE push_scope LPAREN expression RPAREN statement pop_scope .)
    DEFAULT         reduce using rule 252 (iteration_statement -> WHILE push_scope LPAREN expression RPAREN statement pop_scope .)


state 427

    (253) iteration_statement -> DO push_scope statement WHILE LPAREN expression RPAREN . SEMICOLON pop_scope

    SEMICOLON       shift and go to state 438


state 428

    (254) iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON expression . RPAREN compound_statement pop_scope
    (45) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 439
    COMMA           shift and go to state 294


state 429

    (256) iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN . compound_statement pop_scope
    (228) compound_statement -> . LCPAREN statement_list RCPAREN
    (229) compound_statement -> . LCPAREN RCPAREN

    LCPAREN         shift and go to state 271

    compound_statement             shift and go to state 440

state 430

    (255) iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN . compound_statement pop_scope
    (228) compound_statement -> . LCPAREN statement_list RCPAREN
    (229) compound_statement -> . LCPAREN RCPAREN

    LCPAREN         shift and go to state 271

    compound_statement             shift and go to state 441

state 431

    (257) iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN statement . pop_scope
    (289) pop_scope -> .

    RCPAREN         reduce using rule 289 (pop_scope -> .)
    SEMICOLON       reduce using rule 289 (pop_scope -> .)
    IF              reduce using rule 289 (pop_scope -> .)
    SWITCH          reduce using rule 289 (pop_scope -> .)
    WHILE           reduce using rule 289 (pop_scope -> .)
    DO              reduce using rule 289 (pop_scope -> .)
    FOR             reduce using rule 289 (pop_scope -> .)
    BREAK           reduce using rule 289 (pop_scope -> .)
    CONTINUE        reduce using rule 289 (pop_scope -> .)
    RETURN          reduce using rule 289 (pop_scope -> .)
    GOTO            reduce using rule 289 (pop_scope -> .)
    TRY             reduce using rule 289 (pop_scope -> .)
    THROW           reduce using rule 289 (pop_scope -> .)
    CONST           reduce using rule 289 (pop_scope -> .)
    ASM             reduce using rule 289 (pop_scope -> .)
    TEMPLATE        reduce using rule 289 (pop_scope -> .)
    TYPEDEF         reduce using rule 289 (pop_scope -> .)
    DPLUSOP         reduce using rule 289 (pop_scope -> .)
    DMINUSOP        reduce using rule 289 (pop_scope -> .)
    SIZEOF          reduce using rule 289 (pop_scope -> .)
    PLUSOP          reduce using rule 289 (pop_scope -> .)
    MINUSOP         reduce using rule 289 (pop_scope -> .)
    NOTSYM          reduce using rule 289 (pop_scope -> .)
    BNOP            reduce using rule 289 (pop_scope -> .)
    MULTOP          reduce using rule 289 (pop_scope -> .)
    BANDOP          reduce using rule 289 (pop_scope -> .)
    NEW             reduce using rule 289 (pop_scope -> .)
    DELETE          reduce using rule 289 (pop_scope -> .)
    CHAR            reduce using rule 289 (pop_scope -> .)
    SHORT           reduce using rule 289 (pop_scope -> .)
    INT             reduce using rule 289 (pop_scope -> .)
    LONG            reduce using rule 289 (pop_scope -> .)
    SIGNED          reduce using rule 289 (pop_scope -> .)
    UNSIGNED        reduce using rule 289 (pop_scope -> .)
    FLOAT           reduce using rule 289 (pop_scope -> .)
    DOUBLE          reduce using rule 289 (pop_scope -> .)
    VOID            reduce using rule 289 (pop_scope -> .)
    STRING          reduce using rule 289 (pop_scope -> .)
    AUTO            reduce using rule 289 (pop_scope -> .)
    TYPE            reduce using rule 289 (pop_scope -> .)
    CLASS           reduce using rule 289 (pop_scope -> .)
    STRUCT          reduce using rule 289 (pop_scope -> .)
    THIS            reduce using rule 289 (pop_scope -> .)
    LPAREN          reduce using rule 289 (pop_scope -> .)
    IDENTIFIER      reduce using rule 289 (pop_scope -> .)
    DOUBLEBNOP      reduce using rule 289 (pop_scope -> .)
    STRING_L        reduce using rule 289 (pop_scope -> .)
    NUMBER          reduce using rule 289 (pop_scope -> .)
    SCHAR           reduce using rule 289 (pop_scope -> .)
    LCPAREN         reduce using rule 289 (pop_scope -> .)
    CASE            reduce using rule 289 (pop_scope -> .)
    DEFAULT         reduce using rule 289 (pop_scope -> .)

    pop_scope                      shift and go to state 442

state 432

    (247) try_block -> TRY push_scope compound_statement pop_scope CATCH push_scope compound_statement . pop_scope
    (289) pop_scope -> .

    RCPAREN         reduce using rule 289 (pop_scope -> .)
    SEMICOLON       reduce using rule 289 (pop_scope -> .)
    IF              reduce using rule 289 (pop_scope -> .)
    SWITCH          reduce using rule 289 (pop_scope -> .)
    WHILE           reduce using rule 289 (pop_scope -> .)
    DO              reduce using rule 289 (pop_scope -> .)
    FOR             reduce using rule 289 (pop_scope -> .)
    BREAK           reduce using rule 289 (pop_scope -> .)
    CONTINUE        reduce using rule 289 (pop_scope -> .)
    RETURN          reduce using rule 289 (pop_scope -> .)
    GOTO            reduce using rule 289 (pop_scope -> .)
    TRY             reduce using rule 289 (pop_scope -> .)
    THROW           reduce using rule 289 (pop_scope -> .)
    CONST           reduce using rule 289 (pop_scope -> .)
    ASM             reduce using rule 289 (pop_scope -> .)
    TEMPLATE        reduce using rule 289 (pop_scope -> .)
    TYPEDEF         reduce using rule 289 (pop_scope -> .)
    DPLUSOP         reduce using rule 289 (pop_scope -> .)
    DMINUSOP        reduce using rule 289 (pop_scope -> .)
    SIZEOF          reduce using rule 289 (pop_scope -> .)
    PLUSOP          reduce using rule 289 (pop_scope -> .)
    MINUSOP         reduce using rule 289 (pop_scope -> .)
    NOTSYM          reduce using rule 289 (pop_scope -> .)
    BNOP            reduce using rule 289 (pop_scope -> .)
    MULTOP          reduce using rule 289 (pop_scope -> .)
    BANDOP          reduce using rule 289 (pop_scope -> .)
    NEW             reduce using rule 289 (pop_scope -> .)
    DELETE          reduce using rule 289 (pop_scope -> .)
    CHAR            reduce using rule 289 (pop_scope -> .)
    SHORT           reduce using rule 289 (pop_scope -> .)
    INT             reduce using rule 289 (pop_scope -> .)
    LONG            reduce using rule 289 (pop_scope -> .)
    SIGNED          reduce using rule 289 (pop_scope -> .)
    UNSIGNED        reduce using rule 289 (pop_scope -> .)
    FLOAT           reduce using rule 289 (pop_scope -> .)
    DOUBLE          reduce using rule 289 (pop_scope -> .)
    VOID            reduce using rule 289 (pop_scope -> .)
    STRING          reduce using rule 289 (pop_scope -> .)
    AUTO            reduce using rule 289 (pop_scope -> .)
    TYPE            reduce using rule 289 (pop_scope -> .)
    CLASS           reduce using rule 289 (pop_scope -> .)
    STRUCT          reduce using rule 289 (pop_scope -> .)
    THIS            reduce using rule 289 (pop_scope -> .)
    LPAREN          reduce using rule 289 (pop_scope -> .)
    IDENTIFIER      reduce using rule 289 (pop_scope -> .)
    DOUBLEBNOP      reduce using rule 289 (pop_scope -> .)
    STRING_L        reduce using rule 289 (pop_scope -> .)
    NUMBER          reduce using rule 289 (pop_scope -> .)
    SCHAR           reduce using rule 289 (pop_scope -> .)
    LCPAREN         reduce using rule 289 (pop_scope -> .)
    CASE            reduce using rule 289 (pop_scope -> .)
    DEFAULT         reduce using rule 289 (pop_scope -> .)

    pop_scope                      shift and go to state 443

state 433

    (245) selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE . push_scope compound_statement pop_scope
    (288) push_scope -> .

    LCPAREN         reduce using rule 288 (push_scope -> .)

    push_scope                     shift and go to state 444

state 434

    (246) selection_statement -> SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN . pop_scope
    (289) pop_scope -> .

    RCPAREN         reduce using rule 289 (pop_scope -> .)
    SEMICOLON       reduce using rule 289 (pop_scope -> .)
    IF              reduce using rule 289 (pop_scope -> .)
    SWITCH          reduce using rule 289 (pop_scope -> .)
    WHILE           reduce using rule 289 (pop_scope -> .)
    DO              reduce using rule 289 (pop_scope -> .)
    FOR             reduce using rule 289 (pop_scope -> .)
    BREAK           reduce using rule 289 (pop_scope -> .)
    CONTINUE        reduce using rule 289 (pop_scope -> .)
    RETURN          reduce using rule 289 (pop_scope -> .)
    GOTO            reduce using rule 289 (pop_scope -> .)
    TRY             reduce using rule 289 (pop_scope -> .)
    THROW           reduce using rule 289 (pop_scope -> .)
    CONST           reduce using rule 289 (pop_scope -> .)
    ASM             reduce using rule 289 (pop_scope -> .)
    TEMPLATE        reduce using rule 289 (pop_scope -> .)
    TYPEDEF         reduce using rule 289 (pop_scope -> .)
    DPLUSOP         reduce using rule 289 (pop_scope -> .)
    DMINUSOP        reduce using rule 289 (pop_scope -> .)
    SIZEOF          reduce using rule 289 (pop_scope -> .)
    PLUSOP          reduce using rule 289 (pop_scope -> .)
    MINUSOP         reduce using rule 289 (pop_scope -> .)
    NOTSYM          reduce using rule 289 (pop_scope -> .)
    BNOP            reduce using rule 289 (pop_scope -> .)
    MULTOP          reduce using rule 289 (pop_scope -> .)
    BANDOP          reduce using rule 289 (pop_scope -> .)
    NEW             reduce using rule 289 (pop_scope -> .)
    DELETE          reduce using rule 289 (pop_scope -> .)
    CHAR            reduce using rule 289 (pop_scope -> .)
    SHORT           reduce using rule 289 (pop_scope -> .)
    INT             reduce using rule 289 (pop_scope -> .)
    LONG            reduce using rule 289 (pop_scope -> .)
    SIGNED          reduce using rule 289 (pop_scope -> .)
    UNSIGNED        reduce using rule 289 (pop_scope -> .)
    FLOAT           reduce using rule 289 (pop_scope -> .)
    DOUBLE          reduce using rule 289 (pop_scope -> .)
    VOID            reduce using rule 289 (pop_scope -> .)
    STRING          reduce using rule 289 (pop_scope -> .)
    AUTO            reduce using rule 289 (pop_scope -> .)
    TYPE            reduce using rule 289 (pop_scope -> .)
    CLASS           reduce using rule 289 (pop_scope -> .)
    STRUCT          reduce using rule 289 (pop_scope -> .)
    THIS            reduce using rule 289 (pop_scope -> .)
    LPAREN          reduce using rule 289 (pop_scope -> .)
    IDENTIFIER      reduce using rule 289 (pop_scope -> .)
    DOUBLEBNOP      reduce using rule 289 (pop_scope -> .)
    STRING_L        reduce using rule 289 (pop_scope -> .)
    NUMBER          reduce using rule 289 (pop_scope -> .)
    SCHAR           reduce using rule 289 (pop_scope -> .)
    LCPAREN         reduce using rule 289 (pop_scope -> .)
    CASE            reduce using rule 289 (pop_scope -> .)
    DEFAULT         reduce using rule 289 (pop_scope -> .)

    pop_scope                      shift and go to state 445

state 435

    (249) labeled_statement_list -> labeled_statement_list labeled_statement .

    RCPAREN         reduce using rule 249 (labeled_statement_list -> labeled_statement_list labeled_statement .)
    CASE            reduce using rule 249 (labeled_statement_list -> labeled_statement_list labeled_statement .)
    DEFAULT         reduce using rule 249 (labeled_statement_list -> labeled_statement_list labeled_statement .)


state 436

    (250) labeled_statement -> CASE constant_expression . COLON statement_list

    COLON           shift and go to state 446


state 437

    (251) labeled_statement -> DEFAULT COLON . statement_list
    (230) statement_list -> . statement
    (231) statement_list -> . statement_list statement
    (232) statement -> . expression_statement
    (233) statement -> . push_scope compound_statement pop_scope
    (234) statement -> . selection_statement
    (235) statement -> . iteration_statement
    (236) statement -> . jump_statement
    (237) statement -> . declaration_statement
    (238) statement -> . try_block
    (260) expression_statement -> . expression SEMICOLON
    (261) expression_statement -> . SEMICOLON
    (288) push_scope -> .
    (244) selection_statement -> . IF LPAREN expression RPAREN push_scope compound_statement pop_scope
    (245) selection_statement -> . IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope
    (246) selection_statement -> . SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope
    (252) iteration_statement -> . WHILE push_scope LPAREN expression RPAREN statement pop_scope
    (253) iteration_statement -> . DO push_scope statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope
    (254) iteration_statement -> . FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope
    (255) iteration_statement -> . FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope
    (256) iteration_statement -> . FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope
    (257) iteration_statement -> . FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN statement pop_scope
    (239) jump_statement -> . BREAK SEMICOLON
    (240) jump_statement -> . CONTINUE SEMICOLON
    (241) jump_statement -> . RETURN expression SEMICOLON
    (242) jump_statement -> . RETURN SEMICOLON
    (243) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (262) declaration_statement -> . declaration
    (247) try_block -> . TRY push_scope compound_statement pop_scope CATCH push_scope compound_statement pop_scope
    (43) expression -> . assignment_expression
    (44) expression -> . throw_expression
    (45) expression -> . expression COMMA assignment_expression
    (263) declaration -> . type_specifier_ declarator_list SEMICOLON
    (264) declaration -> . asm_declaration
    (265) declaration -> . function_definition
    (266) declaration -> . function_decl
    (267) declaration -> . class_define_specifier SEMICOLON
    (268) declaration -> . template_declaration
    (269) declaration -> . typedef_declarator
    (48) assignment_expression -> . conditional_expression
    (49) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (46) throw_expression -> . THROW expression
    (47) throw_expression -> . THROW
    (167) type_specifier_ -> . CONST type_specifier
    (168) type_specifier_ -> . type_specifier
    (285) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (224) function_definition -> . type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope
    (225) function_decl -> . type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope
    (202) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (203) class_define_specifier -> . class_head LCPAREN RCPAREN
    (270) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (169) typedef_declarator -> . TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON
    (170) typedef_declarator -> . TYPEDEF type_specifier_ IDENTIFIER SEMICOLON
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (171) type_specifier -> . simple_type_name
    (172) type_specifier -> . complex_type_specifier
    (189) class_head -> . class_key IDENTIFIER base_spec
    (190) class_head -> . class_key IDENTIFIER
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (173) simple_type_name -> . CHAR
    (174) simple_type_name -> . SHORT
    (175) simple_type_name -> . INT
    (176) simple_type_name -> . LONG
    (177) simple_type_name -> . SIGNED
    (178) simple_type_name -> . UNSIGNED
    (179) simple_type_name -> . FLOAT
    (180) simple_type_name -> . DOUBLE
    (181) simple_type_name -> . VOID
    (182) simple_type_name -> . STRING
    (183) simple_type_name -> . AUTO
    (184) complex_type_specifier -> . class_key IDENTIFIER
    (185) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (186) complex_type_specifier -> . TYPE IDENTIFIER
    (187) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (200) class_key -> . CLASS
    (201) class_key -> . STRUCT
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMICOLON       shift and go to state 334
    LCPAREN         reduce using rule 288 (push_scope -> .)
    IF              shift and go to state 335
    SWITCH          shift and go to state 336
    WHILE           shift and go to state 337
    DO              shift and go to state 338
    FOR             shift and go to state 339
    BREAK           shift and go to state 340
    CONTINUE        shift and go to state 341
    RETURN          shift and go to state 342
    GOTO            shift and go to state 343
    TRY             shift and go to state 345
    THROW           shift and go to state 212
    CONST           shift and go to state 16
    ASM             shift and go to state 18
    TEMPLATE        shift and go to state 20
    TYPEDEF         shift and go to state 21
    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38
    THIS            shift and go to state 142
    LPAREN          shift and go to state 146
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    statement_list                 shift and go to state 447
    statement                      shift and go to state 325
    expression_statement           shift and go to state 326
    push_scope                     shift and go to state 327
    selection_statement            shift and go to state 328
    iteration_statement            shift and go to state 329
    jump_statement                 shift and go to state 330
    declaration_statement          shift and go to state 331
    try_block                      shift and go to state 332
    expression                     shift and go to state 333
    declaration                    shift and go to state 344
    assignment_expression          shift and go to state 210
    throw_expression               shift and go to state 211
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    function_decl                  shift and go to state 12
    class_define_specifier         shift and go to state 13
    template_declaration           shift and go to state 14
    typedef_declarator             shift and go to state 15
    conditional_expression         shift and go to state 149
    unary_expression               shift and go to state 150
    type_specifier                 shift and go to state 17
    class_head                     shift and go to state 19
    logical_OR_expression          shift and go to state 112
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    cast_expression                shift and go to state 124
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 24
    logical_AND_expression         shift and go to state 113
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    inclusive_OR_expression        shift and go to state 114
    literal                        shift and go to state 141
    exclusive_OR_expression        shift and go to state 115
    AND_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 438

    (253) iteration_statement -> DO push_scope statement WHILE LPAREN expression RPAREN SEMICOLON . pop_scope
    (289) pop_scope -> .

    RCPAREN         reduce using rule 289 (pop_scope -> .)
    SEMICOLON       reduce using rule 289 (pop_scope -> .)
    IF              reduce using rule 289 (pop_scope -> .)
    SWITCH          reduce using rule 289 (pop_scope -> .)
    WHILE           reduce using rule 289 (pop_scope -> .)
    DO              reduce using rule 289 (pop_scope -> .)
    FOR             reduce using rule 289 (pop_scope -> .)
    BREAK           reduce using rule 289 (pop_scope -> .)
    CONTINUE        reduce using rule 289 (pop_scope -> .)
    RETURN          reduce using rule 289 (pop_scope -> .)
    GOTO            reduce using rule 289 (pop_scope -> .)
    TRY             reduce using rule 289 (pop_scope -> .)
    THROW           reduce using rule 289 (pop_scope -> .)
    CONST           reduce using rule 289 (pop_scope -> .)
    ASM             reduce using rule 289 (pop_scope -> .)
    TEMPLATE        reduce using rule 289 (pop_scope -> .)
    TYPEDEF         reduce using rule 289 (pop_scope -> .)
    DPLUSOP         reduce using rule 289 (pop_scope -> .)
    DMINUSOP        reduce using rule 289 (pop_scope -> .)
    SIZEOF          reduce using rule 289 (pop_scope -> .)
    PLUSOP          reduce using rule 289 (pop_scope -> .)
    MINUSOP         reduce using rule 289 (pop_scope -> .)
    NOTSYM          reduce using rule 289 (pop_scope -> .)
    BNOP            reduce using rule 289 (pop_scope -> .)
    MULTOP          reduce using rule 289 (pop_scope -> .)
    BANDOP          reduce using rule 289 (pop_scope -> .)
    NEW             reduce using rule 289 (pop_scope -> .)
    DELETE          reduce using rule 289 (pop_scope -> .)
    CHAR            reduce using rule 289 (pop_scope -> .)
    SHORT           reduce using rule 289 (pop_scope -> .)
    INT             reduce using rule 289 (pop_scope -> .)
    LONG            reduce using rule 289 (pop_scope -> .)
    SIGNED          reduce using rule 289 (pop_scope -> .)
    UNSIGNED        reduce using rule 289 (pop_scope -> .)
    FLOAT           reduce using rule 289 (pop_scope -> .)
    DOUBLE          reduce using rule 289 (pop_scope -> .)
    VOID            reduce using rule 289 (pop_scope -> .)
    STRING          reduce using rule 289 (pop_scope -> .)
    AUTO            reduce using rule 289 (pop_scope -> .)
    TYPE            reduce using rule 289 (pop_scope -> .)
    CLASS           reduce using rule 289 (pop_scope -> .)
    STRUCT          reduce using rule 289 (pop_scope -> .)
    THIS            reduce using rule 289 (pop_scope -> .)
    LPAREN          reduce using rule 289 (pop_scope -> .)
    IDENTIFIER      reduce using rule 289 (pop_scope -> .)
    DOUBLEBNOP      reduce using rule 289 (pop_scope -> .)
    STRING_L        reduce using rule 289 (pop_scope -> .)
    NUMBER          reduce using rule 289 (pop_scope -> .)
    SCHAR           reduce using rule 289 (pop_scope -> .)
    LCPAREN         reduce using rule 289 (pop_scope -> .)
    CASE            reduce using rule 289 (pop_scope -> .)
    DEFAULT         reduce using rule 289 (pop_scope -> .)

    pop_scope                      shift and go to state 448

state 439

    (254) iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN . compound_statement pop_scope
    (228) compound_statement -> . LCPAREN statement_list RCPAREN
    (229) compound_statement -> . LCPAREN RCPAREN

    LCPAREN         shift and go to state 271

    compound_statement             shift and go to state 449

state 440

    (256) iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement . pop_scope
    (289) pop_scope -> .

    RCPAREN         reduce using rule 289 (pop_scope -> .)
    SEMICOLON       reduce using rule 289 (pop_scope -> .)
    IF              reduce using rule 289 (pop_scope -> .)
    SWITCH          reduce using rule 289 (pop_scope -> .)
    WHILE           reduce using rule 289 (pop_scope -> .)
    DO              reduce using rule 289 (pop_scope -> .)
    FOR             reduce using rule 289 (pop_scope -> .)
    BREAK           reduce using rule 289 (pop_scope -> .)
    CONTINUE        reduce using rule 289 (pop_scope -> .)
    RETURN          reduce using rule 289 (pop_scope -> .)
    GOTO            reduce using rule 289 (pop_scope -> .)
    TRY             reduce using rule 289 (pop_scope -> .)
    THROW           reduce using rule 289 (pop_scope -> .)
    CONST           reduce using rule 289 (pop_scope -> .)
    ASM             reduce using rule 289 (pop_scope -> .)
    TEMPLATE        reduce using rule 289 (pop_scope -> .)
    TYPEDEF         reduce using rule 289 (pop_scope -> .)
    DPLUSOP         reduce using rule 289 (pop_scope -> .)
    DMINUSOP        reduce using rule 289 (pop_scope -> .)
    SIZEOF          reduce using rule 289 (pop_scope -> .)
    PLUSOP          reduce using rule 289 (pop_scope -> .)
    MINUSOP         reduce using rule 289 (pop_scope -> .)
    NOTSYM          reduce using rule 289 (pop_scope -> .)
    BNOP            reduce using rule 289 (pop_scope -> .)
    MULTOP          reduce using rule 289 (pop_scope -> .)
    BANDOP          reduce using rule 289 (pop_scope -> .)
    NEW             reduce using rule 289 (pop_scope -> .)
    DELETE          reduce using rule 289 (pop_scope -> .)
    CHAR            reduce using rule 289 (pop_scope -> .)
    SHORT           reduce using rule 289 (pop_scope -> .)
    INT             reduce using rule 289 (pop_scope -> .)
    LONG            reduce using rule 289 (pop_scope -> .)
    SIGNED          reduce using rule 289 (pop_scope -> .)
    UNSIGNED        reduce using rule 289 (pop_scope -> .)
    FLOAT           reduce using rule 289 (pop_scope -> .)
    DOUBLE          reduce using rule 289 (pop_scope -> .)
    VOID            reduce using rule 289 (pop_scope -> .)
    STRING          reduce using rule 289 (pop_scope -> .)
    AUTO            reduce using rule 289 (pop_scope -> .)
    TYPE            reduce using rule 289 (pop_scope -> .)
    CLASS           reduce using rule 289 (pop_scope -> .)
    STRUCT          reduce using rule 289 (pop_scope -> .)
    THIS            reduce using rule 289 (pop_scope -> .)
    LPAREN          reduce using rule 289 (pop_scope -> .)
    IDENTIFIER      reduce using rule 289 (pop_scope -> .)
    DOUBLEBNOP      reduce using rule 289 (pop_scope -> .)
    STRING_L        reduce using rule 289 (pop_scope -> .)
    NUMBER          reduce using rule 289 (pop_scope -> .)
    SCHAR           reduce using rule 289 (pop_scope -> .)
    LCPAREN         reduce using rule 289 (pop_scope -> .)
    CASE            reduce using rule 289 (pop_scope -> .)
    DEFAULT         reduce using rule 289 (pop_scope -> .)

    pop_scope                      shift and go to state 450

state 441

    (255) iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement . pop_scope
    (289) pop_scope -> .

    RCPAREN         reduce using rule 289 (pop_scope -> .)
    SEMICOLON       reduce using rule 289 (pop_scope -> .)
    IF              reduce using rule 289 (pop_scope -> .)
    SWITCH          reduce using rule 289 (pop_scope -> .)
    WHILE           reduce using rule 289 (pop_scope -> .)
    DO              reduce using rule 289 (pop_scope -> .)
    FOR             reduce using rule 289 (pop_scope -> .)
    BREAK           reduce using rule 289 (pop_scope -> .)
    CONTINUE        reduce using rule 289 (pop_scope -> .)
    RETURN          reduce using rule 289 (pop_scope -> .)
    GOTO            reduce using rule 289 (pop_scope -> .)
    TRY             reduce using rule 289 (pop_scope -> .)
    THROW           reduce using rule 289 (pop_scope -> .)
    CONST           reduce using rule 289 (pop_scope -> .)
    ASM             reduce using rule 289 (pop_scope -> .)
    TEMPLATE        reduce using rule 289 (pop_scope -> .)
    TYPEDEF         reduce using rule 289 (pop_scope -> .)
    DPLUSOP         reduce using rule 289 (pop_scope -> .)
    DMINUSOP        reduce using rule 289 (pop_scope -> .)
    SIZEOF          reduce using rule 289 (pop_scope -> .)
    PLUSOP          reduce using rule 289 (pop_scope -> .)
    MINUSOP         reduce using rule 289 (pop_scope -> .)
    NOTSYM          reduce using rule 289 (pop_scope -> .)
    BNOP            reduce using rule 289 (pop_scope -> .)
    MULTOP          reduce using rule 289 (pop_scope -> .)
    BANDOP          reduce using rule 289 (pop_scope -> .)
    NEW             reduce using rule 289 (pop_scope -> .)
    DELETE          reduce using rule 289 (pop_scope -> .)
    CHAR            reduce using rule 289 (pop_scope -> .)
    SHORT           reduce using rule 289 (pop_scope -> .)
    INT             reduce using rule 289 (pop_scope -> .)
    LONG            reduce using rule 289 (pop_scope -> .)
    SIGNED          reduce using rule 289 (pop_scope -> .)
    UNSIGNED        reduce using rule 289 (pop_scope -> .)
    FLOAT           reduce using rule 289 (pop_scope -> .)
    DOUBLE          reduce using rule 289 (pop_scope -> .)
    VOID            reduce using rule 289 (pop_scope -> .)
    STRING          reduce using rule 289 (pop_scope -> .)
    AUTO            reduce using rule 289 (pop_scope -> .)
    TYPE            reduce using rule 289 (pop_scope -> .)
    CLASS           reduce using rule 289 (pop_scope -> .)
    STRUCT          reduce using rule 289 (pop_scope -> .)
    THIS            reduce using rule 289 (pop_scope -> .)
    LPAREN          reduce using rule 289 (pop_scope -> .)
    IDENTIFIER      reduce using rule 289 (pop_scope -> .)
    DOUBLEBNOP      reduce using rule 289 (pop_scope -> .)
    STRING_L        reduce using rule 289 (pop_scope -> .)
    NUMBER          reduce using rule 289 (pop_scope -> .)
    SCHAR           reduce using rule 289 (pop_scope -> .)
    LCPAREN         reduce using rule 289 (pop_scope -> .)
    CASE            reduce using rule 289 (pop_scope -> .)
    DEFAULT         reduce using rule 289 (pop_scope -> .)

    pop_scope                      shift and go to state 451

state 442

    (257) iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN statement pop_scope .

    RCPAREN         reduce using rule 257 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN statement pop_scope .)
    SEMICOLON       reduce using rule 257 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN statement pop_scope .)
    IF              reduce using rule 257 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN statement pop_scope .)
    SWITCH          reduce using rule 257 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN statement pop_scope .)
    WHILE           reduce using rule 257 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN statement pop_scope .)
    DO              reduce using rule 257 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN statement pop_scope .)
    FOR             reduce using rule 257 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN statement pop_scope .)
    BREAK           reduce using rule 257 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN statement pop_scope .)
    CONTINUE        reduce using rule 257 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN statement pop_scope .)
    RETURN          reduce using rule 257 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN statement pop_scope .)
    GOTO            reduce using rule 257 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN statement pop_scope .)
    TRY             reduce using rule 257 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN statement pop_scope .)
    THROW           reduce using rule 257 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN statement pop_scope .)
    CONST           reduce using rule 257 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN statement pop_scope .)
    ASM             reduce using rule 257 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN statement pop_scope .)
    TEMPLATE        reduce using rule 257 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN statement pop_scope .)
    TYPEDEF         reduce using rule 257 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN statement pop_scope .)
    DPLUSOP         reduce using rule 257 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN statement pop_scope .)
    DMINUSOP        reduce using rule 257 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN statement pop_scope .)
    SIZEOF          reduce using rule 257 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN statement pop_scope .)
    PLUSOP          reduce using rule 257 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN statement pop_scope .)
    MINUSOP         reduce using rule 257 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN statement pop_scope .)
    NOTSYM          reduce using rule 257 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN statement pop_scope .)
    BNOP            reduce using rule 257 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN statement pop_scope .)
    MULTOP          reduce using rule 257 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN statement pop_scope .)
    BANDOP          reduce using rule 257 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN statement pop_scope .)
    NEW             reduce using rule 257 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN statement pop_scope .)
    DELETE          reduce using rule 257 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN statement pop_scope .)
    CHAR            reduce using rule 257 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN statement pop_scope .)
    SHORT           reduce using rule 257 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN statement pop_scope .)
    INT             reduce using rule 257 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN statement pop_scope .)
    LONG            reduce using rule 257 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN statement pop_scope .)
    SIGNED          reduce using rule 257 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN statement pop_scope .)
    UNSIGNED        reduce using rule 257 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN statement pop_scope .)
    FLOAT           reduce using rule 257 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN statement pop_scope .)
    DOUBLE          reduce using rule 257 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN statement pop_scope .)
    VOID            reduce using rule 257 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN statement pop_scope .)
    STRING          reduce using rule 257 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN statement pop_scope .)
    AUTO            reduce using rule 257 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN statement pop_scope .)
    TYPE            reduce using rule 257 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN statement pop_scope .)
    CLASS           reduce using rule 257 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN statement pop_scope .)
    STRUCT          reduce using rule 257 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN statement pop_scope .)
    THIS            reduce using rule 257 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN statement pop_scope .)
    LPAREN          reduce using rule 257 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN statement pop_scope .)
    IDENTIFIER      reduce using rule 257 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN statement pop_scope .)
    DOUBLEBNOP      reduce using rule 257 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN statement pop_scope .)
    STRING_L        reduce using rule 257 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN statement pop_scope .)
    NUMBER          reduce using rule 257 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN statement pop_scope .)
    SCHAR           reduce using rule 257 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN statement pop_scope .)
    LCPAREN         reduce using rule 257 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN statement pop_scope .)
    CASE            reduce using rule 257 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN statement pop_scope .)
    DEFAULT         reduce using rule 257 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN statement pop_scope .)


state 443

    (247) try_block -> TRY push_scope compound_statement pop_scope CATCH push_scope compound_statement pop_scope .

    RCPAREN         reduce using rule 247 (try_block -> TRY push_scope compound_statement pop_scope CATCH push_scope compound_statement pop_scope .)
    SEMICOLON       reduce using rule 247 (try_block -> TRY push_scope compound_statement pop_scope CATCH push_scope compound_statement pop_scope .)
    IF              reduce using rule 247 (try_block -> TRY push_scope compound_statement pop_scope CATCH push_scope compound_statement pop_scope .)
    SWITCH          reduce using rule 247 (try_block -> TRY push_scope compound_statement pop_scope CATCH push_scope compound_statement pop_scope .)
    WHILE           reduce using rule 247 (try_block -> TRY push_scope compound_statement pop_scope CATCH push_scope compound_statement pop_scope .)
    DO              reduce using rule 247 (try_block -> TRY push_scope compound_statement pop_scope CATCH push_scope compound_statement pop_scope .)
    FOR             reduce using rule 247 (try_block -> TRY push_scope compound_statement pop_scope CATCH push_scope compound_statement pop_scope .)
    BREAK           reduce using rule 247 (try_block -> TRY push_scope compound_statement pop_scope CATCH push_scope compound_statement pop_scope .)
    CONTINUE        reduce using rule 247 (try_block -> TRY push_scope compound_statement pop_scope CATCH push_scope compound_statement pop_scope .)
    RETURN          reduce using rule 247 (try_block -> TRY push_scope compound_statement pop_scope CATCH push_scope compound_statement pop_scope .)
    GOTO            reduce using rule 247 (try_block -> TRY push_scope compound_statement pop_scope CATCH push_scope compound_statement pop_scope .)
    TRY             reduce using rule 247 (try_block -> TRY push_scope compound_statement pop_scope CATCH push_scope compound_statement pop_scope .)
    THROW           reduce using rule 247 (try_block -> TRY push_scope compound_statement pop_scope CATCH push_scope compound_statement pop_scope .)
    CONST           reduce using rule 247 (try_block -> TRY push_scope compound_statement pop_scope CATCH push_scope compound_statement pop_scope .)
    ASM             reduce using rule 247 (try_block -> TRY push_scope compound_statement pop_scope CATCH push_scope compound_statement pop_scope .)
    TEMPLATE        reduce using rule 247 (try_block -> TRY push_scope compound_statement pop_scope CATCH push_scope compound_statement pop_scope .)
    TYPEDEF         reduce using rule 247 (try_block -> TRY push_scope compound_statement pop_scope CATCH push_scope compound_statement pop_scope .)
    DPLUSOP         reduce using rule 247 (try_block -> TRY push_scope compound_statement pop_scope CATCH push_scope compound_statement pop_scope .)
    DMINUSOP        reduce using rule 247 (try_block -> TRY push_scope compound_statement pop_scope CATCH push_scope compound_statement pop_scope .)
    SIZEOF          reduce using rule 247 (try_block -> TRY push_scope compound_statement pop_scope CATCH push_scope compound_statement pop_scope .)
    PLUSOP          reduce using rule 247 (try_block -> TRY push_scope compound_statement pop_scope CATCH push_scope compound_statement pop_scope .)
    MINUSOP         reduce using rule 247 (try_block -> TRY push_scope compound_statement pop_scope CATCH push_scope compound_statement pop_scope .)
    NOTSYM          reduce using rule 247 (try_block -> TRY push_scope compound_statement pop_scope CATCH push_scope compound_statement pop_scope .)
    BNOP            reduce using rule 247 (try_block -> TRY push_scope compound_statement pop_scope CATCH push_scope compound_statement pop_scope .)
    MULTOP          reduce using rule 247 (try_block -> TRY push_scope compound_statement pop_scope CATCH push_scope compound_statement pop_scope .)
    BANDOP          reduce using rule 247 (try_block -> TRY push_scope compound_statement pop_scope CATCH push_scope compound_statement pop_scope .)
    NEW             reduce using rule 247 (try_block -> TRY push_scope compound_statement pop_scope CATCH push_scope compound_statement pop_scope .)
    DELETE          reduce using rule 247 (try_block -> TRY push_scope compound_statement pop_scope CATCH push_scope compound_statement pop_scope .)
    CHAR            reduce using rule 247 (try_block -> TRY push_scope compound_statement pop_scope CATCH push_scope compound_statement pop_scope .)
    SHORT           reduce using rule 247 (try_block -> TRY push_scope compound_statement pop_scope CATCH push_scope compound_statement pop_scope .)
    INT             reduce using rule 247 (try_block -> TRY push_scope compound_statement pop_scope CATCH push_scope compound_statement pop_scope .)
    LONG            reduce using rule 247 (try_block -> TRY push_scope compound_statement pop_scope CATCH push_scope compound_statement pop_scope .)
    SIGNED          reduce using rule 247 (try_block -> TRY push_scope compound_statement pop_scope CATCH push_scope compound_statement pop_scope .)
    UNSIGNED        reduce using rule 247 (try_block -> TRY push_scope compound_statement pop_scope CATCH push_scope compound_statement pop_scope .)
    FLOAT           reduce using rule 247 (try_block -> TRY push_scope compound_statement pop_scope CATCH push_scope compound_statement pop_scope .)
    DOUBLE          reduce using rule 247 (try_block -> TRY push_scope compound_statement pop_scope CATCH push_scope compound_statement pop_scope .)
    VOID            reduce using rule 247 (try_block -> TRY push_scope compound_statement pop_scope CATCH push_scope compound_statement pop_scope .)
    STRING          reduce using rule 247 (try_block -> TRY push_scope compound_statement pop_scope CATCH push_scope compound_statement pop_scope .)
    AUTO            reduce using rule 247 (try_block -> TRY push_scope compound_statement pop_scope CATCH push_scope compound_statement pop_scope .)
    TYPE            reduce using rule 247 (try_block -> TRY push_scope compound_statement pop_scope CATCH push_scope compound_statement pop_scope .)
    CLASS           reduce using rule 247 (try_block -> TRY push_scope compound_statement pop_scope CATCH push_scope compound_statement pop_scope .)
    STRUCT          reduce using rule 247 (try_block -> TRY push_scope compound_statement pop_scope CATCH push_scope compound_statement pop_scope .)
    THIS            reduce using rule 247 (try_block -> TRY push_scope compound_statement pop_scope CATCH push_scope compound_statement pop_scope .)
    LPAREN          reduce using rule 247 (try_block -> TRY push_scope compound_statement pop_scope CATCH push_scope compound_statement pop_scope .)
    IDENTIFIER      reduce using rule 247 (try_block -> TRY push_scope compound_statement pop_scope CATCH push_scope compound_statement pop_scope .)
    DOUBLEBNOP      reduce using rule 247 (try_block -> TRY push_scope compound_statement pop_scope CATCH push_scope compound_statement pop_scope .)
    STRING_L        reduce using rule 247 (try_block -> TRY push_scope compound_statement pop_scope CATCH push_scope compound_statement pop_scope .)
    NUMBER          reduce using rule 247 (try_block -> TRY push_scope compound_statement pop_scope CATCH push_scope compound_statement pop_scope .)
    SCHAR           reduce using rule 247 (try_block -> TRY push_scope compound_statement pop_scope CATCH push_scope compound_statement pop_scope .)
    LCPAREN         reduce using rule 247 (try_block -> TRY push_scope compound_statement pop_scope CATCH push_scope compound_statement pop_scope .)
    CASE            reduce using rule 247 (try_block -> TRY push_scope compound_statement pop_scope CATCH push_scope compound_statement pop_scope .)
    DEFAULT         reduce using rule 247 (try_block -> TRY push_scope compound_statement pop_scope CATCH push_scope compound_statement pop_scope .)


state 444

    (245) selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope . compound_statement pop_scope
    (228) compound_statement -> . LCPAREN statement_list RCPAREN
    (229) compound_statement -> . LCPAREN RCPAREN

    LCPAREN         shift and go to state 271

    compound_statement             shift and go to state 452

state 445

    (246) selection_statement -> SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope .

    RCPAREN         reduce using rule 246 (selection_statement -> SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope .)
    SEMICOLON       reduce using rule 246 (selection_statement -> SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope .)
    IF              reduce using rule 246 (selection_statement -> SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope .)
    SWITCH          reduce using rule 246 (selection_statement -> SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope .)
    WHILE           reduce using rule 246 (selection_statement -> SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope .)
    DO              reduce using rule 246 (selection_statement -> SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope .)
    FOR             reduce using rule 246 (selection_statement -> SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope .)
    BREAK           reduce using rule 246 (selection_statement -> SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope .)
    CONTINUE        reduce using rule 246 (selection_statement -> SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope .)
    RETURN          reduce using rule 246 (selection_statement -> SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope .)
    GOTO            reduce using rule 246 (selection_statement -> SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope .)
    TRY             reduce using rule 246 (selection_statement -> SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope .)
    THROW           reduce using rule 246 (selection_statement -> SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope .)
    CONST           reduce using rule 246 (selection_statement -> SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope .)
    ASM             reduce using rule 246 (selection_statement -> SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope .)
    TEMPLATE        reduce using rule 246 (selection_statement -> SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope .)
    TYPEDEF         reduce using rule 246 (selection_statement -> SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope .)
    DPLUSOP         reduce using rule 246 (selection_statement -> SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope .)
    DMINUSOP        reduce using rule 246 (selection_statement -> SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope .)
    SIZEOF          reduce using rule 246 (selection_statement -> SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope .)
    PLUSOP          reduce using rule 246 (selection_statement -> SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope .)
    MINUSOP         reduce using rule 246 (selection_statement -> SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope .)
    NOTSYM          reduce using rule 246 (selection_statement -> SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope .)
    BNOP            reduce using rule 246 (selection_statement -> SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope .)
    MULTOP          reduce using rule 246 (selection_statement -> SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope .)
    BANDOP          reduce using rule 246 (selection_statement -> SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope .)
    NEW             reduce using rule 246 (selection_statement -> SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope .)
    DELETE          reduce using rule 246 (selection_statement -> SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope .)
    CHAR            reduce using rule 246 (selection_statement -> SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope .)
    SHORT           reduce using rule 246 (selection_statement -> SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope .)
    INT             reduce using rule 246 (selection_statement -> SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope .)
    LONG            reduce using rule 246 (selection_statement -> SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope .)
    SIGNED          reduce using rule 246 (selection_statement -> SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope .)
    UNSIGNED        reduce using rule 246 (selection_statement -> SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope .)
    FLOAT           reduce using rule 246 (selection_statement -> SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope .)
    DOUBLE          reduce using rule 246 (selection_statement -> SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope .)
    VOID            reduce using rule 246 (selection_statement -> SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope .)
    STRING          reduce using rule 246 (selection_statement -> SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope .)
    AUTO            reduce using rule 246 (selection_statement -> SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope .)
    TYPE            reduce using rule 246 (selection_statement -> SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope .)
    CLASS           reduce using rule 246 (selection_statement -> SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope .)
    STRUCT          reduce using rule 246 (selection_statement -> SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope .)
    THIS            reduce using rule 246 (selection_statement -> SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope .)
    LPAREN          reduce using rule 246 (selection_statement -> SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope .)
    IDENTIFIER      reduce using rule 246 (selection_statement -> SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope .)
    DOUBLEBNOP      reduce using rule 246 (selection_statement -> SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope .)
    STRING_L        reduce using rule 246 (selection_statement -> SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope .)
    NUMBER          reduce using rule 246 (selection_statement -> SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope .)
    SCHAR           reduce using rule 246 (selection_statement -> SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope .)
    LCPAREN         reduce using rule 246 (selection_statement -> SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope .)
    CASE            reduce using rule 246 (selection_statement -> SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope .)
    DEFAULT         reduce using rule 246 (selection_statement -> SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope .)


state 446

    (250) labeled_statement -> CASE constant_expression COLON . statement_list
    (230) statement_list -> . statement
    (231) statement_list -> . statement_list statement
    (232) statement -> . expression_statement
    (233) statement -> . push_scope compound_statement pop_scope
    (234) statement -> . selection_statement
    (235) statement -> . iteration_statement
    (236) statement -> . jump_statement
    (237) statement -> . declaration_statement
    (238) statement -> . try_block
    (260) expression_statement -> . expression SEMICOLON
    (261) expression_statement -> . SEMICOLON
    (288) push_scope -> .
    (244) selection_statement -> . IF LPAREN expression RPAREN push_scope compound_statement pop_scope
    (245) selection_statement -> . IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope
    (246) selection_statement -> . SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope
    (252) iteration_statement -> . WHILE push_scope LPAREN expression RPAREN statement pop_scope
    (253) iteration_statement -> . DO push_scope statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope
    (254) iteration_statement -> . FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope
    (255) iteration_statement -> . FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope
    (256) iteration_statement -> . FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope
    (257) iteration_statement -> . FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN statement pop_scope
    (239) jump_statement -> . BREAK SEMICOLON
    (240) jump_statement -> . CONTINUE SEMICOLON
    (241) jump_statement -> . RETURN expression SEMICOLON
    (242) jump_statement -> . RETURN SEMICOLON
    (243) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (262) declaration_statement -> . declaration
    (247) try_block -> . TRY push_scope compound_statement pop_scope CATCH push_scope compound_statement pop_scope
    (43) expression -> . assignment_expression
    (44) expression -> . throw_expression
    (45) expression -> . expression COMMA assignment_expression
    (263) declaration -> . type_specifier_ declarator_list SEMICOLON
    (264) declaration -> . asm_declaration
    (265) declaration -> . function_definition
    (266) declaration -> . function_decl
    (267) declaration -> . class_define_specifier SEMICOLON
    (268) declaration -> . template_declaration
    (269) declaration -> . typedef_declarator
    (48) assignment_expression -> . conditional_expression
    (49) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (46) throw_expression -> . THROW expression
    (47) throw_expression -> . THROW
    (167) type_specifier_ -> . CONST type_specifier
    (168) type_specifier_ -> . type_specifier
    (285) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (224) function_definition -> . type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope
    (225) function_decl -> . type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope
    (202) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (203) class_define_specifier -> . class_head LCPAREN RCPAREN
    (270) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (169) typedef_declarator -> . TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON
    (170) typedef_declarator -> . TYPEDEF type_specifier_ IDENTIFIER SEMICOLON
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (171) type_specifier -> . simple_type_name
    (172) type_specifier -> . complex_type_specifier
    (189) class_head -> . class_key IDENTIFIER base_spec
    (190) class_head -> . class_key IDENTIFIER
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (173) simple_type_name -> . CHAR
    (174) simple_type_name -> . SHORT
    (175) simple_type_name -> . INT
    (176) simple_type_name -> . LONG
    (177) simple_type_name -> . SIGNED
    (178) simple_type_name -> . UNSIGNED
    (179) simple_type_name -> . FLOAT
    (180) simple_type_name -> . DOUBLE
    (181) simple_type_name -> . VOID
    (182) simple_type_name -> . STRING
    (183) simple_type_name -> . AUTO
    (184) complex_type_specifier -> . class_key IDENTIFIER
    (185) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (186) complex_type_specifier -> . TYPE IDENTIFIER
    (187) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (200) class_key -> . CLASS
    (201) class_key -> . STRUCT
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMICOLON       shift and go to state 334
    LCPAREN         reduce using rule 288 (push_scope -> .)
    IF              shift and go to state 335
    SWITCH          shift and go to state 336
    WHILE           shift and go to state 337
    DO              shift and go to state 338
    FOR             shift and go to state 339
    BREAK           shift and go to state 340
    CONTINUE        shift and go to state 341
    RETURN          shift and go to state 342
    GOTO            shift and go to state 343
    TRY             shift and go to state 345
    THROW           shift and go to state 212
    CONST           shift and go to state 16
    ASM             shift and go to state 18
    TEMPLATE        shift and go to state 20
    TYPEDEF         shift and go to state 21
    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38
    THIS            shift and go to state 142
    LPAREN          shift and go to state 146
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    statement_list                 shift and go to state 453
    statement                      shift and go to state 325
    expression_statement           shift and go to state 326
    push_scope                     shift and go to state 327
    selection_statement            shift and go to state 328
    iteration_statement            shift and go to state 329
    jump_statement                 shift and go to state 330
    declaration_statement          shift and go to state 331
    try_block                      shift and go to state 332
    expression                     shift and go to state 333
    declaration                    shift and go to state 344
    assignment_expression          shift and go to state 210
    throw_expression               shift and go to state 211
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    function_decl                  shift and go to state 12
    class_define_specifier         shift and go to state 13
    template_declaration           shift and go to state 14
    typedef_declarator             shift and go to state 15
    conditional_expression         shift and go to state 149
    unary_expression               shift and go to state 150
    type_specifier                 shift and go to state 17
    class_head                     shift and go to state 19
    logical_OR_expression          shift and go to state 112
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    cast_expression                shift and go to state 124
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 24
    logical_AND_expression         shift and go to state 113
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    inclusive_OR_expression        shift and go to state 114
    literal                        shift and go to state 141
    exclusive_OR_expression        shift and go to state 115
    AND_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 447

    (251) labeled_statement -> DEFAULT COLON statement_list .
    (231) statement_list -> statement_list . statement
    (232) statement -> . expression_statement
    (233) statement -> . push_scope compound_statement pop_scope
    (234) statement -> . selection_statement
    (235) statement -> . iteration_statement
    (236) statement -> . jump_statement
    (237) statement -> . declaration_statement
    (238) statement -> . try_block
    (260) expression_statement -> . expression SEMICOLON
    (261) expression_statement -> . SEMICOLON
    (288) push_scope -> .
    (244) selection_statement -> . IF LPAREN expression RPAREN push_scope compound_statement pop_scope
    (245) selection_statement -> . IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope
    (246) selection_statement -> . SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope
    (252) iteration_statement -> . WHILE push_scope LPAREN expression RPAREN statement pop_scope
    (253) iteration_statement -> . DO push_scope statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope
    (254) iteration_statement -> . FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope
    (255) iteration_statement -> . FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope
    (256) iteration_statement -> . FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope
    (257) iteration_statement -> . FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN statement pop_scope
    (239) jump_statement -> . BREAK SEMICOLON
    (240) jump_statement -> . CONTINUE SEMICOLON
    (241) jump_statement -> . RETURN expression SEMICOLON
    (242) jump_statement -> . RETURN SEMICOLON
    (243) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (262) declaration_statement -> . declaration
    (247) try_block -> . TRY push_scope compound_statement pop_scope CATCH push_scope compound_statement pop_scope
    (43) expression -> . assignment_expression
    (44) expression -> . throw_expression
    (45) expression -> . expression COMMA assignment_expression
    (263) declaration -> . type_specifier_ declarator_list SEMICOLON
    (264) declaration -> . asm_declaration
    (265) declaration -> . function_definition
    (266) declaration -> . function_decl
    (267) declaration -> . class_define_specifier SEMICOLON
    (268) declaration -> . template_declaration
    (269) declaration -> . typedef_declarator
    (48) assignment_expression -> . conditional_expression
    (49) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (46) throw_expression -> . THROW expression
    (47) throw_expression -> . THROW
    (167) type_specifier_ -> . CONST type_specifier
    (168) type_specifier_ -> . type_specifier
    (285) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (224) function_definition -> . type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope
    (225) function_decl -> . type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope
    (202) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (203) class_define_specifier -> . class_head LCPAREN RCPAREN
    (270) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (169) typedef_declarator -> . TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON
    (170) typedef_declarator -> . TYPEDEF type_specifier_ IDENTIFIER SEMICOLON
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (171) type_specifier -> . simple_type_name
    (172) type_specifier -> . complex_type_specifier
    (189) class_head -> . class_key IDENTIFIER base_spec
    (190) class_head -> . class_key IDENTIFIER
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (173) simple_type_name -> . CHAR
    (174) simple_type_name -> . SHORT
    (175) simple_type_name -> . INT
    (176) simple_type_name -> . LONG
    (177) simple_type_name -> . SIGNED
    (178) simple_type_name -> . UNSIGNED
    (179) simple_type_name -> . FLOAT
    (180) simple_type_name -> . DOUBLE
    (181) simple_type_name -> . VOID
    (182) simple_type_name -> . STRING
    (183) simple_type_name -> . AUTO
    (184) complex_type_specifier -> . class_key IDENTIFIER
    (185) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (186) complex_type_specifier -> . TYPE IDENTIFIER
    (187) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (200) class_key -> . CLASS
    (201) class_key -> . STRUCT
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RCPAREN         reduce using rule 251 (labeled_statement -> DEFAULT COLON statement_list .)
    CASE            reduce using rule 251 (labeled_statement -> DEFAULT COLON statement_list .)
    DEFAULT         reduce using rule 251 (labeled_statement -> DEFAULT COLON statement_list .)
    SEMICOLON       shift and go to state 334
    LCPAREN         reduce using rule 288 (push_scope -> .)
    IF              shift and go to state 335
    SWITCH          shift and go to state 336
    WHILE           shift and go to state 337
    DO              shift and go to state 338
    FOR             shift and go to state 339
    BREAK           shift and go to state 340
    CONTINUE        shift and go to state 341
    RETURN          shift and go to state 342
    GOTO            shift and go to state 343
    TRY             shift and go to state 345
    THROW           shift and go to state 212
    CONST           shift and go to state 16
    ASM             shift and go to state 18
    TEMPLATE        shift and go to state 20
    TYPEDEF         shift and go to state 21
    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38
    THIS            shift and go to state 142
    LPAREN          shift and go to state 146
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    statement                      shift and go to state 366
    expression_statement           shift and go to state 326
    push_scope                     shift and go to state 327
    selection_statement            shift and go to state 328
    iteration_statement            shift and go to state 329
    jump_statement                 shift and go to state 330
    declaration_statement          shift and go to state 331
    try_block                      shift and go to state 332
    expression                     shift and go to state 333
    declaration                    shift and go to state 344
    assignment_expression          shift and go to state 210
    throw_expression               shift and go to state 211
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    function_decl                  shift and go to state 12
    class_define_specifier         shift and go to state 13
    template_declaration           shift and go to state 14
    typedef_declarator             shift and go to state 15
    conditional_expression         shift and go to state 149
    unary_expression               shift and go to state 150
    type_specifier                 shift and go to state 17
    class_head                     shift and go to state 19
    logical_OR_expression          shift and go to state 112
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    cast_expression                shift and go to state 124
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 24
    logical_AND_expression         shift and go to state 113
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    inclusive_OR_expression        shift and go to state 114
    literal                        shift and go to state 141
    exclusive_OR_expression        shift and go to state 115
    AND_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 448

    (253) iteration_statement -> DO push_scope statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope .

    RCPAREN         reduce using rule 253 (iteration_statement -> DO push_scope statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope .)
    SEMICOLON       reduce using rule 253 (iteration_statement -> DO push_scope statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope .)
    IF              reduce using rule 253 (iteration_statement -> DO push_scope statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope .)
    SWITCH          reduce using rule 253 (iteration_statement -> DO push_scope statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope .)
    WHILE           reduce using rule 253 (iteration_statement -> DO push_scope statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope .)
    DO              reduce using rule 253 (iteration_statement -> DO push_scope statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope .)
    FOR             reduce using rule 253 (iteration_statement -> DO push_scope statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope .)
    BREAK           reduce using rule 253 (iteration_statement -> DO push_scope statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope .)
    CONTINUE        reduce using rule 253 (iteration_statement -> DO push_scope statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope .)
    RETURN          reduce using rule 253 (iteration_statement -> DO push_scope statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope .)
    GOTO            reduce using rule 253 (iteration_statement -> DO push_scope statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope .)
    TRY             reduce using rule 253 (iteration_statement -> DO push_scope statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope .)
    THROW           reduce using rule 253 (iteration_statement -> DO push_scope statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope .)
    CONST           reduce using rule 253 (iteration_statement -> DO push_scope statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope .)
    ASM             reduce using rule 253 (iteration_statement -> DO push_scope statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope .)
    TEMPLATE        reduce using rule 253 (iteration_statement -> DO push_scope statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope .)
    TYPEDEF         reduce using rule 253 (iteration_statement -> DO push_scope statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope .)
    DPLUSOP         reduce using rule 253 (iteration_statement -> DO push_scope statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope .)
    DMINUSOP        reduce using rule 253 (iteration_statement -> DO push_scope statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope .)
    SIZEOF          reduce using rule 253 (iteration_statement -> DO push_scope statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope .)
    PLUSOP          reduce using rule 253 (iteration_statement -> DO push_scope statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope .)
    MINUSOP         reduce using rule 253 (iteration_statement -> DO push_scope statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope .)
    NOTSYM          reduce using rule 253 (iteration_statement -> DO push_scope statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope .)
    BNOP            reduce using rule 253 (iteration_statement -> DO push_scope statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope .)
    MULTOP          reduce using rule 253 (iteration_statement -> DO push_scope statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope .)
    BANDOP          reduce using rule 253 (iteration_statement -> DO push_scope statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope .)
    NEW             reduce using rule 253 (iteration_statement -> DO push_scope statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope .)
    DELETE          reduce using rule 253 (iteration_statement -> DO push_scope statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope .)
    CHAR            reduce using rule 253 (iteration_statement -> DO push_scope statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope .)
    SHORT           reduce using rule 253 (iteration_statement -> DO push_scope statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope .)
    INT             reduce using rule 253 (iteration_statement -> DO push_scope statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope .)
    LONG            reduce using rule 253 (iteration_statement -> DO push_scope statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope .)
    SIGNED          reduce using rule 253 (iteration_statement -> DO push_scope statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope .)
    UNSIGNED        reduce using rule 253 (iteration_statement -> DO push_scope statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope .)
    FLOAT           reduce using rule 253 (iteration_statement -> DO push_scope statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope .)
    DOUBLE          reduce using rule 253 (iteration_statement -> DO push_scope statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope .)
    VOID            reduce using rule 253 (iteration_statement -> DO push_scope statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope .)
    STRING          reduce using rule 253 (iteration_statement -> DO push_scope statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope .)
    AUTO            reduce using rule 253 (iteration_statement -> DO push_scope statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope .)
    TYPE            reduce using rule 253 (iteration_statement -> DO push_scope statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope .)
    CLASS           reduce using rule 253 (iteration_statement -> DO push_scope statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope .)
    STRUCT          reduce using rule 253 (iteration_statement -> DO push_scope statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope .)
    THIS            reduce using rule 253 (iteration_statement -> DO push_scope statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope .)
    LPAREN          reduce using rule 253 (iteration_statement -> DO push_scope statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope .)
    IDENTIFIER      reduce using rule 253 (iteration_statement -> DO push_scope statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope .)
    DOUBLEBNOP      reduce using rule 253 (iteration_statement -> DO push_scope statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope .)
    STRING_L        reduce using rule 253 (iteration_statement -> DO push_scope statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope .)
    NUMBER          reduce using rule 253 (iteration_statement -> DO push_scope statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope .)
    SCHAR           reduce using rule 253 (iteration_statement -> DO push_scope statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope .)
    LCPAREN         reduce using rule 253 (iteration_statement -> DO push_scope statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope .)
    CASE            reduce using rule 253 (iteration_statement -> DO push_scope statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope .)
    DEFAULT         reduce using rule 253 (iteration_statement -> DO push_scope statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope .)


state 449

    (254) iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement . pop_scope
    (289) pop_scope -> .

    RCPAREN         reduce using rule 289 (pop_scope -> .)
    SEMICOLON       reduce using rule 289 (pop_scope -> .)
    IF              reduce using rule 289 (pop_scope -> .)
    SWITCH          reduce using rule 289 (pop_scope -> .)
    WHILE           reduce using rule 289 (pop_scope -> .)
    DO              reduce using rule 289 (pop_scope -> .)
    FOR             reduce using rule 289 (pop_scope -> .)
    BREAK           reduce using rule 289 (pop_scope -> .)
    CONTINUE        reduce using rule 289 (pop_scope -> .)
    RETURN          reduce using rule 289 (pop_scope -> .)
    GOTO            reduce using rule 289 (pop_scope -> .)
    TRY             reduce using rule 289 (pop_scope -> .)
    THROW           reduce using rule 289 (pop_scope -> .)
    CONST           reduce using rule 289 (pop_scope -> .)
    ASM             reduce using rule 289 (pop_scope -> .)
    TEMPLATE        reduce using rule 289 (pop_scope -> .)
    TYPEDEF         reduce using rule 289 (pop_scope -> .)
    DPLUSOP         reduce using rule 289 (pop_scope -> .)
    DMINUSOP        reduce using rule 289 (pop_scope -> .)
    SIZEOF          reduce using rule 289 (pop_scope -> .)
    PLUSOP          reduce using rule 289 (pop_scope -> .)
    MINUSOP         reduce using rule 289 (pop_scope -> .)
    NOTSYM          reduce using rule 289 (pop_scope -> .)
    BNOP            reduce using rule 289 (pop_scope -> .)
    MULTOP          reduce using rule 289 (pop_scope -> .)
    BANDOP          reduce using rule 289 (pop_scope -> .)
    NEW             reduce using rule 289 (pop_scope -> .)
    DELETE          reduce using rule 289 (pop_scope -> .)
    CHAR            reduce using rule 289 (pop_scope -> .)
    SHORT           reduce using rule 289 (pop_scope -> .)
    INT             reduce using rule 289 (pop_scope -> .)
    LONG            reduce using rule 289 (pop_scope -> .)
    SIGNED          reduce using rule 289 (pop_scope -> .)
    UNSIGNED        reduce using rule 289 (pop_scope -> .)
    FLOAT           reduce using rule 289 (pop_scope -> .)
    DOUBLE          reduce using rule 289 (pop_scope -> .)
    VOID            reduce using rule 289 (pop_scope -> .)
    STRING          reduce using rule 289 (pop_scope -> .)
    AUTO            reduce using rule 289 (pop_scope -> .)
    TYPE            reduce using rule 289 (pop_scope -> .)
    CLASS           reduce using rule 289 (pop_scope -> .)
    STRUCT          reduce using rule 289 (pop_scope -> .)
    THIS            reduce using rule 289 (pop_scope -> .)
    LPAREN          reduce using rule 289 (pop_scope -> .)
    IDENTIFIER      reduce using rule 289 (pop_scope -> .)
    DOUBLEBNOP      reduce using rule 289 (pop_scope -> .)
    STRING_L        reduce using rule 289 (pop_scope -> .)
    NUMBER          reduce using rule 289 (pop_scope -> .)
    SCHAR           reduce using rule 289 (pop_scope -> .)
    LCPAREN         reduce using rule 289 (pop_scope -> .)
    CASE            reduce using rule 289 (pop_scope -> .)
    DEFAULT         reduce using rule 289 (pop_scope -> .)

    pop_scope                      shift and go to state 454

state 450

    (256) iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope .

    RCPAREN         reduce using rule 256 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope .)
    SEMICOLON       reduce using rule 256 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope .)
    IF              reduce using rule 256 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope .)
    SWITCH          reduce using rule 256 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope .)
    WHILE           reduce using rule 256 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope .)
    DO              reduce using rule 256 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope .)
    FOR             reduce using rule 256 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope .)
    BREAK           reduce using rule 256 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope .)
    CONTINUE        reduce using rule 256 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope .)
    RETURN          reduce using rule 256 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope .)
    GOTO            reduce using rule 256 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope .)
    TRY             reduce using rule 256 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope .)
    THROW           reduce using rule 256 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope .)
    CONST           reduce using rule 256 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope .)
    ASM             reduce using rule 256 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope .)
    TEMPLATE        reduce using rule 256 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope .)
    TYPEDEF         reduce using rule 256 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope .)
    DPLUSOP         reduce using rule 256 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope .)
    DMINUSOP        reduce using rule 256 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope .)
    SIZEOF          reduce using rule 256 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope .)
    PLUSOP          reduce using rule 256 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope .)
    MINUSOP         reduce using rule 256 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope .)
    NOTSYM          reduce using rule 256 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope .)
    BNOP            reduce using rule 256 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope .)
    MULTOP          reduce using rule 256 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope .)
    BANDOP          reduce using rule 256 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope .)
    NEW             reduce using rule 256 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope .)
    DELETE          reduce using rule 256 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope .)
    CHAR            reduce using rule 256 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope .)
    SHORT           reduce using rule 256 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope .)
    INT             reduce using rule 256 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope .)
    LONG            reduce using rule 256 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope .)
    SIGNED          reduce using rule 256 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope .)
    UNSIGNED        reduce using rule 256 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope .)
    FLOAT           reduce using rule 256 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope .)
    DOUBLE          reduce using rule 256 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope .)
    VOID            reduce using rule 256 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope .)
    STRING          reduce using rule 256 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope .)
    AUTO            reduce using rule 256 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope .)
    TYPE            reduce using rule 256 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope .)
    CLASS           reduce using rule 256 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope .)
    STRUCT          reduce using rule 256 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope .)
    THIS            reduce using rule 256 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope .)
    LPAREN          reduce using rule 256 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope .)
    IDENTIFIER      reduce using rule 256 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope .)
    DOUBLEBNOP      reduce using rule 256 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope .)
    STRING_L        reduce using rule 256 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope .)
    NUMBER          reduce using rule 256 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope .)
    SCHAR           reduce using rule 256 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope .)
    LCPAREN         reduce using rule 256 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope .)
    CASE            reduce using rule 256 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope .)
    DEFAULT         reduce using rule 256 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope .)


state 451

    (255) iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope .

    RCPAREN         reduce using rule 255 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope .)
    SEMICOLON       reduce using rule 255 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope .)
    IF              reduce using rule 255 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope .)
    SWITCH          reduce using rule 255 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope .)
    WHILE           reduce using rule 255 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope .)
    DO              reduce using rule 255 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope .)
    FOR             reduce using rule 255 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope .)
    BREAK           reduce using rule 255 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope .)
    CONTINUE        reduce using rule 255 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope .)
    RETURN          reduce using rule 255 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope .)
    GOTO            reduce using rule 255 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope .)
    TRY             reduce using rule 255 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope .)
    THROW           reduce using rule 255 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope .)
    CONST           reduce using rule 255 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope .)
    ASM             reduce using rule 255 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope .)
    TEMPLATE        reduce using rule 255 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope .)
    TYPEDEF         reduce using rule 255 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope .)
    DPLUSOP         reduce using rule 255 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope .)
    DMINUSOP        reduce using rule 255 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope .)
    SIZEOF          reduce using rule 255 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope .)
    PLUSOP          reduce using rule 255 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope .)
    MINUSOP         reduce using rule 255 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope .)
    NOTSYM          reduce using rule 255 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope .)
    BNOP            reduce using rule 255 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope .)
    MULTOP          reduce using rule 255 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope .)
    BANDOP          reduce using rule 255 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope .)
    NEW             reduce using rule 255 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope .)
    DELETE          reduce using rule 255 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope .)
    CHAR            reduce using rule 255 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope .)
    SHORT           reduce using rule 255 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope .)
    INT             reduce using rule 255 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope .)
    LONG            reduce using rule 255 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope .)
    SIGNED          reduce using rule 255 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope .)
    UNSIGNED        reduce using rule 255 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope .)
    FLOAT           reduce using rule 255 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope .)
    DOUBLE          reduce using rule 255 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope .)
    VOID            reduce using rule 255 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope .)
    STRING          reduce using rule 255 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope .)
    AUTO            reduce using rule 255 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope .)
    TYPE            reduce using rule 255 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope .)
    CLASS           reduce using rule 255 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope .)
    STRUCT          reduce using rule 255 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope .)
    THIS            reduce using rule 255 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope .)
    LPAREN          reduce using rule 255 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope .)
    IDENTIFIER      reduce using rule 255 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope .)
    DOUBLEBNOP      reduce using rule 255 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope .)
    STRING_L        reduce using rule 255 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope .)
    NUMBER          reduce using rule 255 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope .)
    SCHAR           reduce using rule 255 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope .)
    LCPAREN         reduce using rule 255 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope .)
    CASE            reduce using rule 255 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope .)
    DEFAULT         reduce using rule 255 (iteration_statement -> FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope .)


state 452

    (245) selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement . pop_scope
    (289) pop_scope -> .

    RCPAREN         reduce using rule 289 (pop_scope -> .)
    SEMICOLON       reduce using rule 289 (pop_scope -> .)
    IF              reduce using rule 289 (pop_scope -> .)
    SWITCH          reduce using rule 289 (pop_scope -> .)
    WHILE           reduce using rule 289 (pop_scope -> .)
    DO              reduce using rule 289 (pop_scope -> .)
    FOR             reduce using rule 289 (pop_scope -> .)
    BREAK           reduce using rule 289 (pop_scope -> .)
    CONTINUE        reduce using rule 289 (pop_scope -> .)
    RETURN          reduce using rule 289 (pop_scope -> .)
    GOTO            reduce using rule 289 (pop_scope -> .)
    TRY             reduce using rule 289 (pop_scope -> .)
    THROW           reduce using rule 289 (pop_scope -> .)
    CONST           reduce using rule 289 (pop_scope -> .)
    ASM             reduce using rule 289 (pop_scope -> .)
    TEMPLATE        reduce using rule 289 (pop_scope -> .)
    TYPEDEF         reduce using rule 289 (pop_scope -> .)
    DPLUSOP         reduce using rule 289 (pop_scope -> .)
    DMINUSOP        reduce using rule 289 (pop_scope -> .)
    SIZEOF          reduce using rule 289 (pop_scope -> .)
    PLUSOP          reduce using rule 289 (pop_scope -> .)
    MINUSOP         reduce using rule 289 (pop_scope -> .)
    NOTSYM          reduce using rule 289 (pop_scope -> .)
    BNOP            reduce using rule 289 (pop_scope -> .)
    MULTOP          reduce using rule 289 (pop_scope -> .)
    BANDOP          reduce using rule 289 (pop_scope -> .)
    NEW             reduce using rule 289 (pop_scope -> .)
    DELETE          reduce using rule 289 (pop_scope -> .)
    CHAR            reduce using rule 289 (pop_scope -> .)
    SHORT           reduce using rule 289 (pop_scope -> .)
    INT             reduce using rule 289 (pop_scope -> .)
    LONG            reduce using rule 289 (pop_scope -> .)
    SIGNED          reduce using rule 289 (pop_scope -> .)
    UNSIGNED        reduce using rule 289 (pop_scope -> .)
    FLOAT           reduce using rule 289 (pop_scope -> .)
    DOUBLE          reduce using rule 289 (pop_scope -> .)
    VOID            reduce using rule 289 (pop_scope -> .)
    STRING          reduce using rule 289 (pop_scope -> .)
    AUTO            reduce using rule 289 (pop_scope -> .)
    TYPE            reduce using rule 289 (pop_scope -> .)
    CLASS           reduce using rule 289 (pop_scope -> .)
    STRUCT          reduce using rule 289 (pop_scope -> .)
    THIS            reduce using rule 289 (pop_scope -> .)
    LPAREN          reduce using rule 289 (pop_scope -> .)
    IDENTIFIER      reduce using rule 289 (pop_scope -> .)
    DOUBLEBNOP      reduce using rule 289 (pop_scope -> .)
    STRING_L        reduce using rule 289 (pop_scope -> .)
    NUMBER          reduce using rule 289 (pop_scope -> .)
    SCHAR           reduce using rule 289 (pop_scope -> .)
    LCPAREN         reduce using rule 289 (pop_scope -> .)
    CASE            reduce using rule 289 (pop_scope -> .)
    DEFAULT         reduce using rule 289 (pop_scope -> .)

    pop_scope                      shift and go to state 455

state 453

    (250) labeled_statement -> CASE constant_expression COLON statement_list .
    (231) statement_list -> statement_list . statement
    (232) statement -> . expression_statement
    (233) statement -> . push_scope compound_statement pop_scope
    (234) statement -> . selection_statement
    (235) statement -> . iteration_statement
    (236) statement -> . jump_statement
    (237) statement -> . declaration_statement
    (238) statement -> . try_block
    (260) expression_statement -> . expression SEMICOLON
    (261) expression_statement -> . SEMICOLON
    (288) push_scope -> .
    (244) selection_statement -> . IF LPAREN expression RPAREN push_scope compound_statement pop_scope
    (245) selection_statement -> . IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope
    (246) selection_statement -> . SWITCH LPAREN expression RPAREN push_scope LCPAREN labeled_statement_list RCPAREN pop_scope
    (252) iteration_statement -> . WHILE push_scope LPAREN expression RPAREN statement pop_scope
    (253) iteration_statement -> . DO push_scope statement WHILE LPAREN expression RPAREN SEMICOLON pop_scope
    (254) iteration_statement -> . FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope
    (255) iteration_statement -> . FOR LPAREN push_scope for_init_statement SEMICOLON expression RPAREN compound_statement pop_scope
    (256) iteration_statement -> . FOR LPAREN push_scope for_init_statement expression SEMICOLON RPAREN compound_statement pop_scope
    (257) iteration_statement -> . FOR LPAREN push_scope for_init_statement SEMICOLON RPAREN statement pop_scope
    (239) jump_statement -> . BREAK SEMICOLON
    (240) jump_statement -> . CONTINUE SEMICOLON
    (241) jump_statement -> . RETURN expression SEMICOLON
    (242) jump_statement -> . RETURN SEMICOLON
    (243) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (262) declaration_statement -> . declaration
    (247) try_block -> . TRY push_scope compound_statement pop_scope CATCH push_scope compound_statement pop_scope
    (43) expression -> . assignment_expression
    (44) expression -> . throw_expression
    (45) expression -> . expression COMMA assignment_expression
    (263) declaration -> . type_specifier_ declarator_list SEMICOLON
    (264) declaration -> . asm_declaration
    (265) declaration -> . function_definition
    (266) declaration -> . function_decl
    (267) declaration -> . class_define_specifier SEMICOLON
    (268) declaration -> . template_declaration
    (269) declaration -> . typedef_declarator
    (48) assignment_expression -> . conditional_expression
    (49) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (46) throw_expression -> . THROW expression
    (47) throw_expression -> . THROW
    (167) type_specifier_ -> . CONST type_specifier
    (168) type_specifier_ -> . type_specifier
    (285) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (224) function_definition -> . type_specifier_ declarator func_push_scope arg_list RPAREN fct_body pop_scope
    (225) function_decl -> . type_specifier_ declarator func_push_scope arg_list RPAREN SEMICOLON pop_scope
    (202) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (203) class_define_specifier -> . class_head LCPAREN RCPAREN
    (270) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (169) typedef_declarator -> . TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON
    (170) typedef_declarator -> . TYPEDEF type_specifier_ IDENTIFIER SEMICOLON
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (60) unary_expression -> . postfix_expression
    (61) unary_expression -> . DPLUSOP unary_expression
    (62) unary_expression -> . DMINUSOP unary_expression
    (63) unary_expression -> . unary1_operator cast_expression
    (64) unary_expression -> . unary2_operator cast_expression
    (65) unary_expression -> . SIZEOF unary_expression
    (66) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (67) unary_expression -> . allocation_expression
    (68) unary_expression -> . deallocation_expression
    (171) type_specifier -> . simple_type_name
    (172) type_specifier -> . complex_type_specifier
    (189) class_head -> . class_key IDENTIFIER base_spec
    (190) class_head -> . class_key IDENTIFIER
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (88) postfix_expression -> . primary_expression
    (89) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (90) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (91) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression DOT name
    (94) postfix_expression -> . postfix_expression ARROW name
    (95) postfix_expression -> . postfix_expression DPLUSOP
    (96) postfix_expression -> . postfix_expression DMINUSOP
    (82) unary1_operator -> . PLUSOP
    (83) unary1_operator -> . MINUSOP
    (84) unary1_operator -> . NOTSYM
    (85) unary1_operator -> . BNOP
    (86) unary2_operator -> . MULTOP
    (87) unary2_operator -> . BANDOP
    (70) allocation_expression -> . NEW new_type_name new_initializer
    (71) allocation_expression -> . NEW new_type_name
    (72) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (73) allocation_expression -> . NEW LPAREN type_name RPAREN
    (69) deallocation_expression -> . DELETE cast_expression
    (173) simple_type_name -> . CHAR
    (174) simple_type_name -> . SHORT
    (175) simple_type_name -> . INT
    (176) simple_type_name -> . LONG
    (177) simple_type_name -> . SIGNED
    (178) simple_type_name -> . UNSIGNED
    (179) simple_type_name -> . FLOAT
    (180) simple_type_name -> . DOUBLE
    (181) simple_type_name -> . VOID
    (182) simple_type_name -> . STRING
    (183) simple_type_name -> . AUTO
    (184) complex_type_specifier -> . class_key IDENTIFIER
    (185) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (186) complex_type_specifier -> . TYPE IDENTIFIER
    (187) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (200) class_key -> . CLASS
    (201) class_key -> . STRUCT
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (97) primary_expression -> . name
    (98) primary_expression -> . literal
    (99) primary_expression -> . THIS
    (100) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (124) name -> . IDENTIFIER
    (125) name -> . DOUBLEBNOP IDENTIFIER
    (101) literal -> . STRING_L
    (102) literal -> . NUMBER
    (103) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . cast_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP cast_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP cast_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP cast_expression
    (104) cast_expression -> . unary_expression
    (105) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RCPAREN         reduce using rule 250 (labeled_statement -> CASE constant_expression COLON statement_list .)
    CASE            reduce using rule 250 (labeled_statement -> CASE constant_expression COLON statement_list .)
    DEFAULT         reduce using rule 250 (labeled_statement -> CASE constant_expression COLON statement_list .)
    SEMICOLON       shift and go to state 334
    LCPAREN         reduce using rule 288 (push_scope -> .)
    IF              shift and go to state 335
    SWITCH          shift and go to state 336
    WHILE           shift and go to state 337
    DO              shift and go to state 338
    FOR             shift and go to state 339
    BREAK           shift and go to state 340
    CONTINUE        shift and go to state 341
    RETURN          shift and go to state 342
    GOTO            shift and go to state 343
    TRY             shift and go to state 345
    THROW           shift and go to state 212
    CONST           shift and go to state 16
    ASM             shift and go to state 18
    TEMPLATE        shift and go to state 20
    TYPEDEF         shift and go to state 21
    DPLUSOP         shift and go to state 128
    DMINUSOP        shift and go to state 129
    SIZEOF          shift and go to state 132
    PLUSOP          shift and go to state 122
    MINUSOP         shift and go to state 123
    NOTSYM          shift and go to state 137
    BNOP            shift and go to state 138
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 139
    DELETE          shift and go to state 140
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38
    THIS            shift and go to state 142
    LPAREN          shift and go to state 146
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 143
    NUMBER          shift and go to state 144
    SCHAR           shift and go to state 145

    statement                      shift and go to state 366
    expression_statement           shift and go to state 326
    push_scope                     shift and go to state 327
    selection_statement            shift and go to state 328
    iteration_statement            shift and go to state 329
    jump_statement                 shift and go to state 330
    declaration_statement          shift and go to state 331
    try_block                      shift and go to state 332
    expression                     shift and go to state 333
    declaration                    shift and go to state 344
    assignment_expression          shift and go to state 210
    throw_expression               shift and go to state 211
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    function_decl                  shift and go to state 12
    class_define_specifier         shift and go to state 13
    template_declaration           shift and go to state 14
    typedef_declarator             shift and go to state 15
    conditional_expression         shift and go to state 149
    unary_expression               shift and go to state 150
    type_specifier                 shift and go to state 17
    class_head                     shift and go to state 19
    logical_OR_expression          shift and go to state 112
    postfix_expression             shift and go to state 127
    unary1_operator                shift and go to state 130
    cast_expression                shift and go to state 124
    unary2_operator                shift and go to state 131
    allocation_expression          shift and go to state 133
    deallocation_expression        shift and go to state 134
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 24
    logical_AND_expression         shift and go to state 113
    primary_expression             shift and go to state 135
    name                           shift and go to state 136
    inclusive_OR_expression        shift and go to state 114
    literal                        shift and go to state 141
    exclusive_OR_expression        shift and go to state 115
    AND_expression                 shift and go to state 116
    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 120
    multiplicative_expression      shift and go to state 121

state 454

    (254) iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope .

    RCPAREN         reduce using rule 254 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope .)
    SEMICOLON       reduce using rule 254 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope .)
    IF              reduce using rule 254 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope .)
    SWITCH          reduce using rule 254 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope .)
    WHILE           reduce using rule 254 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope .)
    DO              reduce using rule 254 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope .)
    FOR             reduce using rule 254 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope .)
    BREAK           reduce using rule 254 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope .)
    CONTINUE        reduce using rule 254 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope .)
    RETURN          reduce using rule 254 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope .)
    GOTO            reduce using rule 254 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope .)
    TRY             reduce using rule 254 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope .)
    THROW           reduce using rule 254 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope .)
    CONST           reduce using rule 254 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope .)
    ASM             reduce using rule 254 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope .)
    TEMPLATE        reduce using rule 254 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope .)
    TYPEDEF         reduce using rule 254 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope .)
    DPLUSOP         reduce using rule 254 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope .)
    DMINUSOP        reduce using rule 254 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope .)
    SIZEOF          reduce using rule 254 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope .)
    PLUSOP          reduce using rule 254 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope .)
    MINUSOP         reduce using rule 254 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope .)
    NOTSYM          reduce using rule 254 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope .)
    BNOP            reduce using rule 254 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope .)
    MULTOP          reduce using rule 254 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope .)
    BANDOP          reduce using rule 254 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope .)
    NEW             reduce using rule 254 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope .)
    DELETE          reduce using rule 254 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope .)
    CHAR            reduce using rule 254 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope .)
    SHORT           reduce using rule 254 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope .)
    INT             reduce using rule 254 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope .)
    LONG            reduce using rule 254 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope .)
    SIGNED          reduce using rule 254 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope .)
    UNSIGNED        reduce using rule 254 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope .)
    FLOAT           reduce using rule 254 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope .)
    DOUBLE          reduce using rule 254 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope .)
    VOID            reduce using rule 254 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope .)
    STRING          reduce using rule 254 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope .)
    AUTO            reduce using rule 254 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope .)
    TYPE            reduce using rule 254 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope .)
    CLASS           reduce using rule 254 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope .)
    STRUCT          reduce using rule 254 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope .)
    THIS            reduce using rule 254 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope .)
    LPAREN          reduce using rule 254 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope .)
    IDENTIFIER      reduce using rule 254 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope .)
    DOUBLEBNOP      reduce using rule 254 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope .)
    STRING_L        reduce using rule 254 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope .)
    NUMBER          reduce using rule 254 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope .)
    SCHAR           reduce using rule 254 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope .)
    LCPAREN         reduce using rule 254 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope .)
    CASE            reduce using rule 254 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope .)
    DEFAULT         reduce using rule 254 (iteration_statement -> FOR LPAREN push_scope for_init_statement expression SEMICOLON expression RPAREN compound_statement pop_scope .)


state 455

    (245) selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope .

    RCPAREN         reduce using rule 245 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope .)
    SEMICOLON       reduce using rule 245 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope .)
    IF              reduce using rule 245 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope .)
    SWITCH          reduce using rule 245 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope .)
    WHILE           reduce using rule 245 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope .)
    DO              reduce using rule 245 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope .)
    FOR             reduce using rule 245 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope .)
    BREAK           reduce using rule 245 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope .)
    CONTINUE        reduce using rule 245 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope .)
    RETURN          reduce using rule 245 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope .)
    GOTO            reduce using rule 245 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope .)
    TRY             reduce using rule 245 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope .)
    THROW           reduce using rule 245 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope .)
    CONST           reduce using rule 245 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope .)
    ASM             reduce using rule 245 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope .)
    TEMPLATE        reduce using rule 245 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope .)
    TYPEDEF         reduce using rule 245 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope .)
    DPLUSOP         reduce using rule 245 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope .)
    DMINUSOP        reduce using rule 245 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope .)
    SIZEOF          reduce using rule 245 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope .)
    PLUSOP          reduce using rule 245 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope .)
    MINUSOP         reduce using rule 245 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope .)
    NOTSYM          reduce using rule 245 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope .)
    BNOP            reduce using rule 245 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope .)
    MULTOP          reduce using rule 245 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope .)
    BANDOP          reduce using rule 245 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope .)
    NEW             reduce using rule 245 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope .)
    DELETE          reduce using rule 245 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope .)
    CHAR            reduce using rule 245 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope .)
    SHORT           reduce using rule 245 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope .)
    INT             reduce using rule 245 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope .)
    LONG            reduce using rule 245 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope .)
    SIGNED          reduce using rule 245 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope .)
    UNSIGNED        reduce using rule 245 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope .)
    FLOAT           reduce using rule 245 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope .)
    DOUBLE          reduce using rule 245 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope .)
    VOID            reduce using rule 245 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope .)
    STRING          reduce using rule 245 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope .)
    AUTO            reduce using rule 245 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope .)
    TYPE            reduce using rule 245 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope .)
    CLASS           reduce using rule 245 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope .)
    STRUCT          reduce using rule 245 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope .)
    THIS            reduce using rule 245 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope .)
    LPAREN          reduce using rule 245 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope .)
    IDENTIFIER      reduce using rule 245 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope .)
    DOUBLEBNOP      reduce using rule 245 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope .)
    STRING_L        reduce using rule 245 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope .)
    NUMBER          reduce using rule 245 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope .)
    SCHAR           reduce using rule 245 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope .)
    LCPAREN         reduce using rule 245 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope .)
    CASE            reduce using rule 245 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope .)
    DEFAULT         reduce using rule 245 (selection_statement -> IF LPAREN expression RPAREN push_scope compound_statement pop_scope ELSE push_scope compound_statement pop_scope .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MULTOP in state 229 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 295 resolved as shift
WARNING: shift/reduce conflict for MULTOP in state 306 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 315 resolved as shift
