Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    OPERATOR

Grammar

Rule 0     S' -> program
Rule 1     control_line -> control_line control_line_stmt
Rule 2     control_line -> control_line_stmt
Rule 3     include_control -> HASHTAG INCLUDE
Rule 4     control_line_stmt -> include_control LTCOMP STRING_L GTCOMP
Rule 5     control_line_stmt -> include_control STRING_L
Rule 6     program -> control_line translation_unit
Rule 7     program -> translation_unit
Rule 8     translation_unit -> declaration_seq
Rule 9     declaration_seq -> declaration_seq declaration
Rule 10    declaration_seq -> declaration
Rule 11    empty -> <empty>
Rule 12    constant_expression -> conditional_expression
Rule 13    conditional_expression -> logical_OR_expression
Rule 14    conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression
Rule 15    logical_OR_expression -> logical_AND_expression
Rule 16    logical_OR_expression -> logical_OR_expression OROP logical_AND_expression
Rule 17    logical_AND_expression -> inclusive_OR_expression
Rule 18    logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression
Rule 19    inclusive_OR_expression -> exclusive_OR_expression
Rule 20    inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression
Rule 21    exclusive_OR_expression -> AND_expression
Rule 22    exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression
Rule 23    AND_expression -> equality_expression
Rule 24    AND_expression -> AND_expression BANDOP equality_expression
Rule 25    equality_expression -> relational_expression
Rule 26    equality_expression -> equality_expression EQCOMP relational_expression
Rule 27    equality_expression -> equality_expression NEQCOMP relational_expression
Rule 28    relational_expression -> shift_expression
Rule 29    relational_expression -> relational_expression LTCOMP shift_expression
Rule 30    relational_expression -> relational_expression GTCOMP shift_expression
Rule 31    relational_expression -> relational_expression LTECOMP shift_expression
Rule 32    relational_expression -> relational_expression GTECOMP shift_expression
Rule 33    shift_expression -> additive_expression
Rule 34    shift_expression -> shift_expression LSHIFT additive_expression
Rule 35    shift_expression -> shift_expression RSHIFT additive_expression
Rule 36    additive_expression -> multiplicative_expression
Rule 37    additive_expression -> additive_expression PLUSOP multiplicative_expression
Rule 38    additive_expression -> additive_expression MINUSOP multiplicative_expression
Rule 39    multiplicative_expression -> pm_expression
Rule 40    multiplicative_expression -> multiplicative_expression MULTOP pm_expression
Rule 41    multiplicative_expression -> multiplicative_expression DIVOP pm_expression
Rule 42    multiplicative_expression -> multiplicative_expression MODOP pm_expression
Rule 43    pm_expression -> cast_expression
Rule 44    pm_expression -> pm_expression DOTSTAR cast_expression
Rule 45    pm_expression -> pm_expression ARROWSTAR cast_expression
Rule 46    expression -> assignment_expression
Rule 47    expression -> throw_expression
Rule 48    expression -> expression COMMA assignment_expression
Rule 49    throw_expression -> THROW expression
Rule 50    throw_expression -> THROW
Rule 51    assignment_expression -> conditional_expression
Rule 52    assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 53    assignment_operator -> EQUAL
Rule 54    assignment_operator -> MULTEQOP
Rule 55    assignment_operator -> DIVEQOP
Rule 56    assignment_operator -> MODEQOP
Rule 57    assignment_operator -> PLUSEQOP
Rule 58    assignment_operator -> MINUSEQOP
Rule 59    assignment_operator -> LSHIFTEQOP
Rule 60    assignment_operator -> RSHIFTEQOP
Rule 61    assignment_operator -> BANDEQOP
Rule 62    assignment_operator -> BOREQOP
Rule 63    unary_expression -> postfix_expression
Rule 64    unary_expression -> DPLUSOP unary_expression
Rule 65    unary_expression -> DMINUSOP unary_expression
Rule 66    unary_expression -> unary1_operator cast_expression
Rule 67    unary_expression -> unary2_operator cast_expression
Rule 68    unary_expression -> SIZEOF unary_expression
Rule 69    unary_expression -> SIZEOF LPAREN type_name RPAREN
Rule 70    unary_expression -> allocation_expression
Rule 71    unary_expression -> deallocation_expression
Rule 72    deallocation_expression -> DELETE cast_expression
Rule 73    allocation_expression -> NEW new_type_name new_initializer
Rule 74    allocation_expression -> NEW new_type_name
Rule 75    allocation_expression -> NEW LPAREN type_name RPAREN new_initializer
Rule 76    allocation_expression -> NEW LPAREN type_name RPAREN
Rule 77    new_type_name -> type_specifier_ new_declarator
Rule 78    new_type_name -> type_specifier_
Rule 79    new_declarator -> new_declarator MULTOP
Rule 80    new_declarator -> MULTOP
Rule 81    new_declarator -> new_declarator LSPAREN expression RSPAREN
Rule 82    new_declarator -> LSPAREN expression RSPAREN
Rule 83    new_initializer -> LPAREN initializer_list RPAREN
Rule 84    new_initializer -> LPAREN RPAREN
Rule 85    unary1_operator -> PLUSOP
Rule 86    unary1_operator -> MINUSOP
Rule 87    unary1_operator -> NOTSYM
Rule 88    unary1_operator -> BNOP
Rule 89    unary2_operator -> MULTOP
Rule 90    unary2_operator -> BANDOP
Rule 91    postfix_expression -> primary_expression
Rule 92    postfix_expression -> postfix_expression LSPAREN expression RSPAREN
Rule 93    postfix_expression -> postfix_expression LPAREN expression_list RPAREN
Rule 94    postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN
Rule 95    postfix_expression -> postfix_expression LPAREN RPAREN
Rule 96    postfix_expression -> postfix_expression DOT name
Rule 97    postfix_expression -> postfix_expression ARROW name
Rule 98    postfix_expression -> postfix_expression DPLUSOP
Rule 99    postfix_expression -> postfix_expression DMINUSOP
Rule 100   primary_expression -> name
Rule 101   primary_expression -> literal
Rule 102   primary_expression -> THIS
Rule 103   primary_expression -> LPAREN expression RPAREN
Rule 104   literal -> STRING_L
Rule 105   literal -> NUMBER
Rule 106   literal -> SCHAR
Rule 107   cast_expression -> unary_expression
Rule 108   cast_expression -> LPAREN type_name RPAREN cast_expression
Rule 109   abstract_declarator -> unary2_operator
Rule 110   abstract_declarator -> unary2_operator abstract_declarator
Rule 111   abstract_declarator -> LSPAREN constant_expression RSPAREN
Rule 112   abstract_declarator -> abstract_declarator LSPAREN constant_expression RSPAREN
Rule 113   abstract_declarator -> LSPAREN RSPAREN
Rule 114   abstract_declarator -> abstract_declarator LSPAREN RSPAREN
Rule 115   declarator -> name
Rule 116   declarator -> unary2_operator declarator
Rule 117   declarator -> declarator LSPAREN constant_expression RSPAREN
Rule 118   declarator -> declarator LSPAREN RSPAREN
Rule 119   argument_declaration_list -> argument_declaration
Rule 120   argument_declaration_list -> argument_declaration COMMA argument_declaration_list
Rule 121   argument_declaration -> type_specifier_ declarator
Rule 122   argument_declaration -> type_specifier_ declarator EQUAL expression
Rule 123   argument_declaration -> type_specifier_ abstract_declarator
Rule 124   argument_declaration -> type_specifier_
Rule 125   name -> IDENTIFIER
Rule 126   name -> DOUBLEBNOP IDENTIFIER
Rule 127   operator_name -> NEW
Rule 128   operator_name -> DELETE
Rule 129   operator_name -> PLUSOP
Rule 130   operator_name -> MINUSOP
Rule 131   operator_name -> MULTOP
Rule 132   operator_name -> DIVOP
Rule 133   operator_name -> MODOP
Rule 134   operator_name -> XOROP
Rule 135   operator_name -> BANDOP
Rule 136   operator_name -> BNOP
Rule 137   operator_name -> NOTSYM
Rule 138   operator_name -> EQUAL
Rule 139   operator_name -> LTCOMP
Rule 140   operator_name -> GTCOMP
Rule 141   operator_name -> PLUSEQOP
Rule 142   operator_name -> MINUSEQOP
Rule 143   operator_name -> MULTEQOP
Rule 144   operator_name -> DIVEQOP
Rule 145   operator_name -> MODEQOP
Rule 146   operator_name -> XOREQOP
Rule 147   operator_name -> BANDEQOP
Rule 148   operator_name -> LSHIFT
Rule 149   operator_name -> RSHIFT
Rule 150   operator_name -> RSHIFTEQOP
Rule 151   operator_name -> LSHIFTEQOP
Rule 152   operator_name -> EQCOMP
Rule 153   operator_name -> NEQCOMP
Rule 154   operator_name -> LTECOMP
Rule 155   operator_name -> GTECOMP
Rule 156   operator_name -> ANDOP
Rule 157   operator_name -> OROP
Rule 158   operator_name -> DPLUSOP
Rule 159   operator_name -> DMINUSOP
Rule 160   operator_name -> COMMA
Rule 161   operator_name -> ARROWSTAR
Rule 162   operator_name -> ARROW
Rule 163   template_class_name -> LTEMPLATE template_arg_list RTEMPLATE
Rule 164   template_arg_list -> type_name
Rule 165   template_arg_list -> template_arg_list COMMA type_name
Rule 166   type_name -> type_specifier_ abstract_declarator
Rule 167   type_name -> type_specifier_
Rule 168   type_specifier_ -> CONST type_specifier
Rule 169   type_specifier_ -> type_specifier
Rule 170   typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON
Rule 171   typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON
Rule 172   type_specifier -> simple_type_name
Rule 173   type_specifier -> complex_type_specifier
Rule 174   simple_type_name -> CHAR
Rule 175   simple_type_name -> SHORT
Rule 176   simple_type_name -> INT
Rule 177   simple_type_name -> LONG
Rule 178   simple_type_name -> SIGNED
Rule 179   simple_type_name -> UNSIGNED
Rule 180   simple_type_name -> FLOAT
Rule 181   simple_type_name -> DOUBLE
Rule 182   simple_type_name -> VOID
Rule 183   simple_type_name -> STRING
Rule 184   simple_type_name -> AUTO
Rule 185   complex_type_specifier -> class_key IDENTIFIER
Rule 186   complex_type_specifier -> class_key IDENTIFIER template_class_name
Rule 187   complex_type_specifier -> TYPE IDENTIFIER
Rule 188   complex_type_specifier -> TYPE IDENTIFIER template_class_name
Rule 189   pure_specifier -> EQUAL NUMBER
Rule 190   class_head -> class_key IDENTIFIER base_spec
Rule 191   class_head -> class_key IDENTIFIER
Rule 192   base_spec -> COLON base_list
Rule 193   base_list -> base_specifier
Rule 194   base_list -> base_list COMMA base_specifier
Rule 195   base_specifier -> class_key IDENTIFIER
Rule 196   base_specifier -> class_key IDENTIFIER template_class_name
Rule 197   base_specifier -> IDENTIFIER
Rule 198   base_specifier -> IDENTIFIER template_class_name
Rule 199   base_specifier -> access_specifier class_key IDENTIFIER
Rule 200   base_specifier -> access_specifier class_key IDENTIFIER template_class_name
Rule 201   class_key -> CLASS
Rule 202   class_key -> STRUCT
Rule 203   class_define_specifier -> class_head LCPAREN member_list RCPAREN
Rule 204   class_define_specifier -> class_head LCPAREN RCPAREN
Rule 205   member_list -> member_access_list
Rule 206   member_list -> access_list
Rule 207   member_list -> member_list access_list
Rule 208   access_specifier -> PRIVATE
Rule 209   access_specifier -> PROTECTED
Rule 210   access_specifier -> PUBLIC
Rule 211   access_list -> access_specifier COLON member_access_list
Rule 212   access_list -> access_specifier COLON
Rule 213   member_access_list -> member_declaration member_access_list
Rule 214   member_access_list -> member_declaration
Rule 215   member_declaration -> type_specifier_ member_declarator_list SEMICOLON
Rule 216   member_declaration -> member_declarator_list SEMICOLON
Rule 217   member_declaration -> type_specifier_ SEMICOLON
Rule 218   member_declaration -> SEMICOLON
Rule 219   member_declaration -> function_definition
Rule 220   member_declaration -> class_define_specifier SEMICOLON
Rule 221   member_declarator_list -> member_declarator
Rule 222   member_declarator_list -> member_declarator_list COMMA member_declarator
Rule 223   member_declarator -> declarator pure_specifier
Rule 224   member_declarator -> declarator
Rule 225   function_definition -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body
Rule 226   function_definition -> type_specifier_ declarator LPAREN RPAREN fct_body
Rule 227   function_decl -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN
Rule 228   function_decl -> type_specifier_ declarator LPAREN RPAREN
Rule 229   fct_body -> compound_statement
Rule 230   compound_statement -> LCPAREN statement_list RCPAREN
Rule 231   compound_statement -> LCPAREN RCPAREN
Rule 232   statement_list -> statement
Rule 233   statement_list -> statement_list statement
Rule 234   statement -> labeled_statement
Rule 235   statement -> expression_statement
Rule 236   statement -> compound_statement
Rule 237   statement -> selection_statement
Rule 238   statement -> iteration_statement
Rule 239   statement -> jump_statement
Rule 240   statement -> declaration_statement
Rule 241   statement -> try_block
Rule 242   jump_statement -> BREAK SEMICOLON
Rule 243   jump_statement -> CONTINUE SEMICOLON
Rule 244   jump_statement -> RETURN expression SEMICOLON
Rule 245   jump_statement -> RETURN SEMICOLON
Rule 246   jump_statement -> GOTO IDENTIFIER SEMICOLON
Rule 247   selection_statement -> IF LPAREN expression RPAREN statement
Rule 248   selection_statement -> IF LPAREN expression RPAREN statement ELSE statement
Rule 249   selection_statement -> SWITCH LPAREN expression RPAREN statement
Rule 250   try_block -> TRY compound_statement CATCH compound_statement
Rule 251   labeled_statement -> IDENTIFIER COLON statement
Rule 252   labeled_statement -> CASE constant_expression COLON statement
Rule 253   labeled_statement -> DEFAULT COLON statement
Rule 254   iteration_statement -> WHILE LPAREN expression RPAREN statement
Rule 255   iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON
Rule 256   iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
Rule 257   iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
Rule 258   iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
Rule 259   iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement
Rule 260   for_init_statement -> expression_statement
Rule 261   for_init_statement -> declaration_statement
Rule 262   expression_statement -> expression SEMICOLON
Rule 263   expression_statement -> SEMICOLON
Rule 264   declaration_statement -> declaration
Rule 265   declaration -> type_specifier_ declarator_list SEMICOLON
Rule 266   declaration -> asm_declaration
Rule 267   declaration -> function_definition
Rule 268   declaration -> function_decl
Rule 269   declaration -> class_define_specifier SEMICOLON
Rule 270   declaration -> template_declaration
Rule 271   declaration -> typedef_declarator
Rule 272   template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
Rule 273   template_argument_list -> argument_declaration
Rule 274   template_argument_list -> template_argument_list COMMA argument_declaration
Rule 275   declarator_list -> init_declarator
Rule 276   declarator_list -> declarator_list COMMA init_declarator
Rule 277   init_declarator -> declarator initializer
Rule 278   init_declarator -> declarator
Rule 279   initializer -> EQUAL assignment_expression
Rule 280   initializer -> EQUAL LCPAREN initializer_list RCPAREN
Rule 281   initializer -> EQUAL LCPAREN initializer_list COMMA RCPAREN
Rule 282   initializer -> LPAREN expression_list RPAREN
Rule 283   initializer_list -> assignment_expression
Rule 284   initializer_list -> initializer_list COMMA assignment_expression
Rule 285   initializer_list -> LCPAREN initializer_list RCPAREN
Rule 286   initializer_list -> LCPAREN initializer_list COMMA RCPAREN
Rule 287   asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON
Rule 288   expression_list -> assignment_expression
Rule 289   expression_list -> expression_list COMMA assignment_expression

Terminals, with rules where they appear

ANDOP                : 18 156
ARROW                : 97 162
ARROWSTAR            : 45 161
ASM                  : 287
AUTO                 : 184
BANDEQOP             : 61 147
BANDOP               : 24 90 135
BNOP                 : 88 136
BOREQOP              : 62
BREAK                : 242
CASE                 : 252
CATCH                : 250
CHAR                 : 174
CLASS                : 201
COLON                : 14 192 211 212 251 252 253
COMMA                : 48 120 160 165 194 222 274 276 281 284 286 289
CONST                : 168
CONTINUE             : 243
DEFAULT              : 253
DELETE               : 72 128
DIVEQOP              : 55 144
DIVOP                : 41 132
DMINUSOP             : 65 99 159
DO                   : 255
DOT                  : 96
DOTSTAR              : 44
DOUBLE               : 181
DOUBLEBNOP           : 126
DPLUSOP              : 64 98 158
ELSE                 : 248
EQCOMP               : 26 152
EQUAL                : 53 122 138 189 279 280 281
FLOAT                : 180
FOR                  : 256 257 258 259
GOTO                 : 246
GTCOMP               : 4 30 140
GTECOMP              : 32 155
HASHTAG              : 3
IDENTIFIER           : 125 126 170 171 185 186 187 188 190 191 195 196 197 198 199 200 246 251
IF                   : 247 248
INCLUDE              : 3
INT                  : 176
LCPAREN              : 203 204 230 231 280 281 285 286
LONG                 : 177
LPAREN               : 69 75 76 83 84 93 94 95 103 108 225 226 227 228 247 248 249 254 255 256 257 258 259 282 287
LSHIFT               : 34 148
LSHIFTEQOP           : 59 151
LSPAREN              : 81 82 92 111 112 113 114 117 118
LTCOMP               : 4 29 139
LTECOMP              : 31 154
LTEMPLATE            : 163 272
MINUSEQOP            : 58 142
MINUSOP              : 38 86 130
MODEQOP              : 56 145
MODOP                : 42 133
MULTEQOP             : 54 143
MULTOP               : 40 79 80 89 131
NEQCOMP              : 27 153
NEW                  : 73 74 75 76 127
NOTSYM               : 87 137
NUMBER               : 105 189
OPERATOR             : 
OROP                 : 16 20 157
PLUSEQOP             : 57 141
PLUSOP               : 37 85 129
PRIVATE              : 208
PROTECTED            : 209
PUBLIC               : 210
QUESMARK             : 14
RCPAREN              : 203 204 230 231 280 281 285 286
RETURN               : 244 245
RPAREN               : 69 75 76 83 84 93 94 95 103 108 225 226 227 228 247 248 249 254 255 256 257 258 259 282 287
RSHIFT               : 35 149
RSHIFTEQOP           : 60 150
RSPAREN              : 81 82 92 111 112 113 114 117 118
RTEMPLATE            : 163 272
SCHAR                : 106
SEMICOLON            : 170 171 215 216 217 218 220 242 243 244 245 246 255 256 257 258 259 262 263 265 269 287
SHORT                : 175
SIGNED               : 178
SIZEOF               : 68 69
STRING               : 183
STRING_L             : 4 5 104 287
STRUCT               : 202
SWITCH               : 249
TEMPLATE             : 272
THIS                 : 102
THROW                : 49 50
TRY                  : 250
TYPE                 : 187 188
TYPEDEF              : 170 171
UNSIGNED             : 179
VOID                 : 182
WHILE                : 254 255
XOREQOP              : 146
XOROP                : 22 134
error                : 

Nonterminals, with rules where they appear

AND_expression       : 21 22 24
abstract_declarator  : 110 112 114 123 166 170
access_list          : 206 207
access_specifier     : 199 200 211 212
additive_expression  : 33 34 35 37 38
allocation_expression : 70
argument_declaration : 119 120 273 274
argument_declaration_list : 120 225 227
asm_declaration      : 266
assignment_expression : 46 48 52 279 283 284 288 289
assignment_operator  : 52
base_list            : 192 194
base_spec            : 190
base_specifier       : 193 194
cast_expression      : 43 44 45 66 67 72 108
class_define_specifier : 220 269
class_head           : 203 204
class_key            : 185 186 190 191 195 196 199 200
complex_type_specifier : 173
compound_statement   : 229 236 250 250
conditional_expression : 12 14 51
constant_expression  : 111 112 117 252
control_line         : 1 6
control_line_stmt    : 1 2
deallocation_expression : 71
declaration          : 9 10 264 272
declaration_seq      : 8 9
declaration_statement : 240 261
declarator           : 116 117 118 121 122 223 224 225 226 227 228 277 278
declarator_list      : 265 276
empty                : 
equality_expression  : 23 24 26 27
exclusive_OR_expression : 19 20 22
expression           : 14 48 49 81 82 92 103 122 244 247 248 249 254 255 256 256 257 258 262
expression_list      : 93 94 282 289
expression_statement : 235 260
fct_body             : 225 226
for_init_statement   : 256 257 258 259
function_decl        : 268
function_definition  : 219 267
include_control      : 4 5
inclusive_OR_expression : 17 18 20
init_declarator      : 275 276
initializer          : 277
initializer_list     : 83 280 281 284 285 286
iteration_statement  : 238
jump_statement       : 239
labeled_statement    : 234
literal              : 101
logical_AND_expression : 15 16 18
logical_OR_expression : 13 14 16
member_access_list   : 205 211 213
member_declaration   : 213 214
member_declarator    : 221 222
member_declarator_list : 215 216 222
member_list          : 203 207
multiplicative_expression : 36 37 38 40 41 42
name                 : 96 97 100 115
new_declarator       : 77 79 81
new_initializer      : 73 75
new_type_name        : 73 74
operator_name        : 
pm_expression        : 39 40 41 42 44 45
postfix_expression   : 63 92 93 94 95 96 97 98 99
primary_expression   : 91
program              : 0
pure_specifier       : 223
relational_expression : 25 26 27 29 30 31 32
selection_statement  : 237
shift_expression     : 28 29 30 31 32 34 35
simple_type_name     : 172
statement            : 232 233 247 248 248 249 251 252 253 254 255 256 257 258 259
statement_list       : 230 233
template_arg_list    : 163 165
template_argument_list : 272 274
template_class_name  : 94 186 188 196 198 200
template_declaration : 270
throw_expression     : 47
translation_unit     : 6 7
try_block            : 241
type_name            : 69 75 76 108 164 165
type_specifier       : 168 169
type_specifier_      : 77 78 121 122 123 124 166 167 170 171 215 217 225 226 227 228 265
typedef_declarator   : 271
unary1_operator      : 66
unary2_operator      : 67 109 110 116
unary_expression     : 52 64 65 68 107

Parsing method: LALR

state 0

    (0) S' -> . program
    (6) program -> . control_line translation_unit
    (7) program -> . translation_unit
    (1) control_line -> . control_line control_line_stmt
    (2) control_line -> . control_line_stmt
    (8) translation_unit -> . declaration_seq
    (4) control_line_stmt -> . include_control LTCOMP STRING_L GTCOMP
    (5) control_line_stmt -> . include_control STRING_L
    (9) declaration_seq -> . declaration_seq declaration
    (10) declaration_seq -> . declaration
    (3) include_control -> . HASHTAG INCLUDE
    (265) declaration -> . type_specifier_ declarator_list SEMICOLON
    (266) declaration -> . asm_declaration
    (267) declaration -> . function_definition
    (268) declaration -> . function_decl
    (269) declaration -> . class_define_specifier SEMICOLON
    (270) declaration -> . template_declaration
    (271) declaration -> . typedef_declarator
    (168) type_specifier_ -> . CONST type_specifier
    (169) type_specifier_ -> . type_specifier
    (287) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (225) function_definition -> . type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body
    (226) function_definition -> . type_specifier_ declarator LPAREN RPAREN fct_body
    (227) function_decl -> . type_specifier_ declarator LPAREN argument_declaration_list RPAREN
    (228) function_decl -> . type_specifier_ declarator LPAREN RPAREN
    (203) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (204) class_define_specifier -> . class_head LCPAREN RCPAREN
    (272) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (170) typedef_declarator -> . TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON
    (171) typedef_declarator -> . TYPEDEF type_specifier_ IDENTIFIER SEMICOLON
    (172) type_specifier -> . simple_type_name
    (173) type_specifier -> . complex_type_specifier
    (190) class_head -> . class_key IDENTIFIER base_spec
    (191) class_head -> . class_key IDENTIFIER
    (174) simple_type_name -> . CHAR
    (175) simple_type_name -> . SHORT
    (176) simple_type_name -> . INT
    (177) simple_type_name -> . LONG
    (178) simple_type_name -> . SIGNED
    (179) simple_type_name -> . UNSIGNED
    (180) simple_type_name -> . FLOAT
    (181) simple_type_name -> . DOUBLE
    (182) simple_type_name -> . VOID
    (183) simple_type_name -> . STRING
    (184) simple_type_name -> . AUTO
    (185) complex_type_specifier -> . class_key IDENTIFIER
    (186) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (187) complex_type_specifier -> . TYPE IDENTIFIER
    (188) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (201) class_key -> . CLASS
    (202) class_key -> . STRUCT

    HASHTAG         shift and go to state 8
    CONST           shift and go to state 16
    ASM             shift and go to state 18
    TEMPLATE        shift and go to state 20
    TYPEDEF         shift and go to state 21
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38

    program                        shift and go to state 1
    control_line                   shift and go to state 2
    translation_unit               shift and go to state 3
    control_line_stmt              shift and go to state 4
    declaration_seq                shift and go to state 5
    include_control                shift and go to state 6
    declaration                    shift and go to state 7
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    function_decl                  shift and go to state 12
    class_define_specifier         shift and go to state 13
    template_declaration           shift and go to state 14
    typedef_declarator             shift and go to state 15
    type_specifier                 shift and go to state 17
    class_head                     shift and go to state 19
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 24

state 1

    (0) S' -> program .



state 2

    (6) program -> control_line . translation_unit
    (1) control_line -> control_line . control_line_stmt
    (8) translation_unit -> . declaration_seq
    (4) control_line_stmt -> . include_control LTCOMP STRING_L GTCOMP
    (5) control_line_stmt -> . include_control STRING_L
    (9) declaration_seq -> . declaration_seq declaration
    (10) declaration_seq -> . declaration
    (3) include_control -> . HASHTAG INCLUDE
    (265) declaration -> . type_specifier_ declarator_list SEMICOLON
    (266) declaration -> . asm_declaration
    (267) declaration -> . function_definition
    (268) declaration -> . function_decl
    (269) declaration -> . class_define_specifier SEMICOLON
    (270) declaration -> . template_declaration
    (271) declaration -> . typedef_declarator
    (168) type_specifier_ -> . CONST type_specifier
    (169) type_specifier_ -> . type_specifier
    (287) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (225) function_definition -> . type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body
    (226) function_definition -> . type_specifier_ declarator LPAREN RPAREN fct_body
    (227) function_decl -> . type_specifier_ declarator LPAREN argument_declaration_list RPAREN
    (228) function_decl -> . type_specifier_ declarator LPAREN RPAREN
    (203) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (204) class_define_specifier -> . class_head LCPAREN RCPAREN
    (272) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (170) typedef_declarator -> . TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON
    (171) typedef_declarator -> . TYPEDEF type_specifier_ IDENTIFIER SEMICOLON
    (172) type_specifier -> . simple_type_name
    (173) type_specifier -> . complex_type_specifier
    (190) class_head -> . class_key IDENTIFIER base_spec
    (191) class_head -> . class_key IDENTIFIER
    (174) simple_type_name -> . CHAR
    (175) simple_type_name -> . SHORT
    (176) simple_type_name -> . INT
    (177) simple_type_name -> . LONG
    (178) simple_type_name -> . SIGNED
    (179) simple_type_name -> . UNSIGNED
    (180) simple_type_name -> . FLOAT
    (181) simple_type_name -> . DOUBLE
    (182) simple_type_name -> . VOID
    (183) simple_type_name -> . STRING
    (184) simple_type_name -> . AUTO
    (185) complex_type_specifier -> . class_key IDENTIFIER
    (186) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (187) complex_type_specifier -> . TYPE IDENTIFIER
    (188) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (201) class_key -> . CLASS
    (202) class_key -> . STRUCT

    HASHTAG         shift and go to state 8
    CONST           shift and go to state 16
    ASM             shift and go to state 18
    TEMPLATE        shift and go to state 20
    TYPEDEF         shift and go to state 21
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38

    translation_unit               shift and go to state 39
    control_line_stmt              shift and go to state 40
    declaration_seq                shift and go to state 5
    include_control                shift and go to state 6
    declaration                    shift and go to state 7
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    function_decl                  shift and go to state 12
    class_define_specifier         shift and go to state 13
    template_declaration           shift and go to state 14
    typedef_declarator             shift and go to state 15
    type_specifier                 shift and go to state 17
    class_head                     shift and go to state 19
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 24

state 3

    (7) program -> translation_unit .

    $end            reduce using rule 7 (program -> translation_unit .)


state 4

    (2) control_line -> control_line_stmt .

    HASHTAG         reduce using rule 2 (control_line -> control_line_stmt .)
    CONST           reduce using rule 2 (control_line -> control_line_stmt .)
    ASM             reduce using rule 2 (control_line -> control_line_stmt .)
    TEMPLATE        reduce using rule 2 (control_line -> control_line_stmt .)
    TYPEDEF         reduce using rule 2 (control_line -> control_line_stmt .)
    CHAR            reduce using rule 2 (control_line -> control_line_stmt .)
    SHORT           reduce using rule 2 (control_line -> control_line_stmt .)
    INT             reduce using rule 2 (control_line -> control_line_stmt .)
    LONG            reduce using rule 2 (control_line -> control_line_stmt .)
    SIGNED          reduce using rule 2 (control_line -> control_line_stmt .)
    UNSIGNED        reduce using rule 2 (control_line -> control_line_stmt .)
    FLOAT           reduce using rule 2 (control_line -> control_line_stmt .)
    DOUBLE          reduce using rule 2 (control_line -> control_line_stmt .)
    VOID            reduce using rule 2 (control_line -> control_line_stmt .)
    STRING          reduce using rule 2 (control_line -> control_line_stmt .)
    AUTO            reduce using rule 2 (control_line -> control_line_stmt .)
    TYPE            reduce using rule 2 (control_line -> control_line_stmt .)
    CLASS           reduce using rule 2 (control_line -> control_line_stmt .)
    STRUCT          reduce using rule 2 (control_line -> control_line_stmt .)


state 5

    (8) translation_unit -> declaration_seq .
    (9) declaration_seq -> declaration_seq . declaration
    (265) declaration -> . type_specifier_ declarator_list SEMICOLON
    (266) declaration -> . asm_declaration
    (267) declaration -> . function_definition
    (268) declaration -> . function_decl
    (269) declaration -> . class_define_specifier SEMICOLON
    (270) declaration -> . template_declaration
    (271) declaration -> . typedef_declarator
    (168) type_specifier_ -> . CONST type_specifier
    (169) type_specifier_ -> . type_specifier
    (287) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (225) function_definition -> . type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body
    (226) function_definition -> . type_specifier_ declarator LPAREN RPAREN fct_body
    (227) function_decl -> . type_specifier_ declarator LPAREN argument_declaration_list RPAREN
    (228) function_decl -> . type_specifier_ declarator LPAREN RPAREN
    (203) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (204) class_define_specifier -> . class_head LCPAREN RCPAREN
    (272) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (170) typedef_declarator -> . TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON
    (171) typedef_declarator -> . TYPEDEF type_specifier_ IDENTIFIER SEMICOLON
    (172) type_specifier -> . simple_type_name
    (173) type_specifier -> . complex_type_specifier
    (190) class_head -> . class_key IDENTIFIER base_spec
    (191) class_head -> . class_key IDENTIFIER
    (174) simple_type_name -> . CHAR
    (175) simple_type_name -> . SHORT
    (176) simple_type_name -> . INT
    (177) simple_type_name -> . LONG
    (178) simple_type_name -> . SIGNED
    (179) simple_type_name -> . UNSIGNED
    (180) simple_type_name -> . FLOAT
    (181) simple_type_name -> . DOUBLE
    (182) simple_type_name -> . VOID
    (183) simple_type_name -> . STRING
    (184) simple_type_name -> . AUTO
    (185) complex_type_specifier -> . class_key IDENTIFIER
    (186) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (187) complex_type_specifier -> . TYPE IDENTIFIER
    (188) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (201) class_key -> . CLASS
    (202) class_key -> . STRUCT

    $end            reduce using rule 8 (translation_unit -> declaration_seq .)
    CONST           shift and go to state 16
    ASM             shift and go to state 18
    TEMPLATE        shift and go to state 20
    TYPEDEF         shift and go to state 21
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38

    declaration                    shift and go to state 41
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    function_decl                  shift and go to state 12
    class_define_specifier         shift and go to state 13
    template_declaration           shift and go to state 14
    typedef_declarator             shift and go to state 15
    type_specifier                 shift and go to state 17
    class_head                     shift and go to state 19
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 24

state 6

    (4) control_line_stmt -> include_control . LTCOMP STRING_L GTCOMP
    (5) control_line_stmt -> include_control . STRING_L

    LTCOMP          shift and go to state 42
    STRING_L        shift and go to state 43


state 7

    (10) declaration_seq -> declaration .

    CONST           reduce using rule 10 (declaration_seq -> declaration .)
    ASM             reduce using rule 10 (declaration_seq -> declaration .)
    TEMPLATE        reduce using rule 10 (declaration_seq -> declaration .)
    TYPEDEF         reduce using rule 10 (declaration_seq -> declaration .)
    CHAR            reduce using rule 10 (declaration_seq -> declaration .)
    SHORT           reduce using rule 10 (declaration_seq -> declaration .)
    INT             reduce using rule 10 (declaration_seq -> declaration .)
    LONG            reduce using rule 10 (declaration_seq -> declaration .)
    SIGNED          reduce using rule 10 (declaration_seq -> declaration .)
    UNSIGNED        reduce using rule 10 (declaration_seq -> declaration .)
    FLOAT           reduce using rule 10 (declaration_seq -> declaration .)
    DOUBLE          reduce using rule 10 (declaration_seq -> declaration .)
    VOID            reduce using rule 10 (declaration_seq -> declaration .)
    STRING          reduce using rule 10 (declaration_seq -> declaration .)
    AUTO            reduce using rule 10 (declaration_seq -> declaration .)
    TYPE            reduce using rule 10 (declaration_seq -> declaration .)
    CLASS           reduce using rule 10 (declaration_seq -> declaration .)
    STRUCT          reduce using rule 10 (declaration_seq -> declaration .)
    $end            reduce using rule 10 (declaration_seq -> declaration .)


state 8

    (3) include_control -> HASHTAG . INCLUDE

    INCLUDE         shift and go to state 44


state 9

    (265) declaration -> type_specifier_ . declarator_list SEMICOLON
    (225) function_definition -> type_specifier_ . declarator LPAREN argument_declaration_list RPAREN fct_body
    (226) function_definition -> type_specifier_ . declarator LPAREN RPAREN fct_body
    (227) function_decl -> type_specifier_ . declarator LPAREN argument_declaration_list RPAREN
    (228) function_decl -> type_specifier_ . declarator LPAREN RPAREN
    (275) declarator_list -> . init_declarator
    (276) declarator_list -> . declarator_list COMMA init_declarator
    (115) declarator -> . name
    (116) declarator -> . unary2_operator declarator
    (117) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (118) declarator -> . declarator LSPAREN RSPAREN
    (277) init_declarator -> . declarator initializer
    (278) init_declarator -> . declarator
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP

    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53

    declarator_list                shift and go to state 45
    declarator                     shift and go to state 46
    init_declarator                shift and go to state 47
    name                           shift and go to state 48
    unary2_operator                shift and go to state 49

state 10

    (266) declaration -> asm_declaration .

    CONST           reduce using rule 266 (declaration -> asm_declaration .)
    ASM             reduce using rule 266 (declaration -> asm_declaration .)
    TEMPLATE        reduce using rule 266 (declaration -> asm_declaration .)
    TYPEDEF         reduce using rule 266 (declaration -> asm_declaration .)
    CHAR            reduce using rule 266 (declaration -> asm_declaration .)
    SHORT           reduce using rule 266 (declaration -> asm_declaration .)
    INT             reduce using rule 266 (declaration -> asm_declaration .)
    LONG            reduce using rule 266 (declaration -> asm_declaration .)
    SIGNED          reduce using rule 266 (declaration -> asm_declaration .)
    UNSIGNED        reduce using rule 266 (declaration -> asm_declaration .)
    FLOAT           reduce using rule 266 (declaration -> asm_declaration .)
    DOUBLE          reduce using rule 266 (declaration -> asm_declaration .)
    VOID            reduce using rule 266 (declaration -> asm_declaration .)
    STRING          reduce using rule 266 (declaration -> asm_declaration .)
    AUTO            reduce using rule 266 (declaration -> asm_declaration .)
    TYPE            reduce using rule 266 (declaration -> asm_declaration .)
    CLASS           reduce using rule 266 (declaration -> asm_declaration .)
    STRUCT          reduce using rule 266 (declaration -> asm_declaration .)
    $end            reduce using rule 266 (declaration -> asm_declaration .)
    RCPAREN         reduce using rule 266 (declaration -> asm_declaration .)
    IDENTIFIER      reduce using rule 266 (declaration -> asm_declaration .)
    CASE            reduce using rule 266 (declaration -> asm_declaration .)
    DEFAULT         reduce using rule 266 (declaration -> asm_declaration .)
    SEMICOLON       reduce using rule 266 (declaration -> asm_declaration .)
    LCPAREN         reduce using rule 266 (declaration -> asm_declaration .)
    IF              reduce using rule 266 (declaration -> asm_declaration .)
    SWITCH          reduce using rule 266 (declaration -> asm_declaration .)
    WHILE           reduce using rule 266 (declaration -> asm_declaration .)
    DO              reduce using rule 266 (declaration -> asm_declaration .)
    FOR             reduce using rule 266 (declaration -> asm_declaration .)
    BREAK           reduce using rule 266 (declaration -> asm_declaration .)
    CONTINUE        reduce using rule 266 (declaration -> asm_declaration .)
    RETURN          reduce using rule 266 (declaration -> asm_declaration .)
    GOTO            reduce using rule 266 (declaration -> asm_declaration .)
    TRY             reduce using rule 266 (declaration -> asm_declaration .)
    THROW           reduce using rule 266 (declaration -> asm_declaration .)
    DPLUSOP         reduce using rule 266 (declaration -> asm_declaration .)
    DMINUSOP        reduce using rule 266 (declaration -> asm_declaration .)
    SIZEOF          reduce using rule 266 (declaration -> asm_declaration .)
    PLUSOP          reduce using rule 266 (declaration -> asm_declaration .)
    MINUSOP         reduce using rule 266 (declaration -> asm_declaration .)
    NOTSYM          reduce using rule 266 (declaration -> asm_declaration .)
    BNOP            reduce using rule 266 (declaration -> asm_declaration .)
    MULTOP          reduce using rule 266 (declaration -> asm_declaration .)
    BANDOP          reduce using rule 266 (declaration -> asm_declaration .)
    NEW             reduce using rule 266 (declaration -> asm_declaration .)
    DELETE          reduce using rule 266 (declaration -> asm_declaration .)
    THIS            reduce using rule 266 (declaration -> asm_declaration .)
    LPAREN          reduce using rule 266 (declaration -> asm_declaration .)
    DOUBLEBNOP      reduce using rule 266 (declaration -> asm_declaration .)
    STRING_L        reduce using rule 266 (declaration -> asm_declaration .)
    NUMBER          reduce using rule 266 (declaration -> asm_declaration .)
    SCHAR           reduce using rule 266 (declaration -> asm_declaration .)
    ELSE            reduce using rule 266 (declaration -> asm_declaration .)


state 11

    (267) declaration -> function_definition .

    CONST           reduce using rule 267 (declaration -> function_definition .)
    ASM             reduce using rule 267 (declaration -> function_definition .)
    TEMPLATE        reduce using rule 267 (declaration -> function_definition .)
    TYPEDEF         reduce using rule 267 (declaration -> function_definition .)
    CHAR            reduce using rule 267 (declaration -> function_definition .)
    SHORT           reduce using rule 267 (declaration -> function_definition .)
    INT             reduce using rule 267 (declaration -> function_definition .)
    LONG            reduce using rule 267 (declaration -> function_definition .)
    SIGNED          reduce using rule 267 (declaration -> function_definition .)
    UNSIGNED        reduce using rule 267 (declaration -> function_definition .)
    FLOAT           reduce using rule 267 (declaration -> function_definition .)
    DOUBLE          reduce using rule 267 (declaration -> function_definition .)
    VOID            reduce using rule 267 (declaration -> function_definition .)
    STRING          reduce using rule 267 (declaration -> function_definition .)
    AUTO            reduce using rule 267 (declaration -> function_definition .)
    TYPE            reduce using rule 267 (declaration -> function_definition .)
    CLASS           reduce using rule 267 (declaration -> function_definition .)
    STRUCT          reduce using rule 267 (declaration -> function_definition .)
    $end            reduce using rule 267 (declaration -> function_definition .)
    RCPAREN         reduce using rule 267 (declaration -> function_definition .)
    IDENTIFIER      reduce using rule 267 (declaration -> function_definition .)
    CASE            reduce using rule 267 (declaration -> function_definition .)
    DEFAULT         reduce using rule 267 (declaration -> function_definition .)
    SEMICOLON       reduce using rule 267 (declaration -> function_definition .)
    LCPAREN         reduce using rule 267 (declaration -> function_definition .)
    IF              reduce using rule 267 (declaration -> function_definition .)
    SWITCH          reduce using rule 267 (declaration -> function_definition .)
    WHILE           reduce using rule 267 (declaration -> function_definition .)
    DO              reduce using rule 267 (declaration -> function_definition .)
    FOR             reduce using rule 267 (declaration -> function_definition .)
    BREAK           reduce using rule 267 (declaration -> function_definition .)
    CONTINUE        reduce using rule 267 (declaration -> function_definition .)
    RETURN          reduce using rule 267 (declaration -> function_definition .)
    GOTO            reduce using rule 267 (declaration -> function_definition .)
    TRY             reduce using rule 267 (declaration -> function_definition .)
    THROW           reduce using rule 267 (declaration -> function_definition .)
    DPLUSOP         reduce using rule 267 (declaration -> function_definition .)
    DMINUSOP        reduce using rule 267 (declaration -> function_definition .)
    SIZEOF          reduce using rule 267 (declaration -> function_definition .)
    PLUSOP          reduce using rule 267 (declaration -> function_definition .)
    MINUSOP         reduce using rule 267 (declaration -> function_definition .)
    NOTSYM          reduce using rule 267 (declaration -> function_definition .)
    BNOP            reduce using rule 267 (declaration -> function_definition .)
    MULTOP          reduce using rule 267 (declaration -> function_definition .)
    BANDOP          reduce using rule 267 (declaration -> function_definition .)
    NEW             reduce using rule 267 (declaration -> function_definition .)
    DELETE          reduce using rule 267 (declaration -> function_definition .)
    THIS            reduce using rule 267 (declaration -> function_definition .)
    LPAREN          reduce using rule 267 (declaration -> function_definition .)
    DOUBLEBNOP      reduce using rule 267 (declaration -> function_definition .)
    STRING_L        reduce using rule 267 (declaration -> function_definition .)
    NUMBER          reduce using rule 267 (declaration -> function_definition .)
    SCHAR           reduce using rule 267 (declaration -> function_definition .)
    ELSE            reduce using rule 267 (declaration -> function_definition .)


state 12

    (268) declaration -> function_decl .

    CONST           reduce using rule 268 (declaration -> function_decl .)
    ASM             reduce using rule 268 (declaration -> function_decl .)
    TEMPLATE        reduce using rule 268 (declaration -> function_decl .)
    TYPEDEF         reduce using rule 268 (declaration -> function_decl .)
    CHAR            reduce using rule 268 (declaration -> function_decl .)
    SHORT           reduce using rule 268 (declaration -> function_decl .)
    INT             reduce using rule 268 (declaration -> function_decl .)
    LONG            reduce using rule 268 (declaration -> function_decl .)
    SIGNED          reduce using rule 268 (declaration -> function_decl .)
    UNSIGNED        reduce using rule 268 (declaration -> function_decl .)
    FLOAT           reduce using rule 268 (declaration -> function_decl .)
    DOUBLE          reduce using rule 268 (declaration -> function_decl .)
    VOID            reduce using rule 268 (declaration -> function_decl .)
    STRING          reduce using rule 268 (declaration -> function_decl .)
    AUTO            reduce using rule 268 (declaration -> function_decl .)
    TYPE            reduce using rule 268 (declaration -> function_decl .)
    CLASS           reduce using rule 268 (declaration -> function_decl .)
    STRUCT          reduce using rule 268 (declaration -> function_decl .)
    $end            reduce using rule 268 (declaration -> function_decl .)
    RCPAREN         reduce using rule 268 (declaration -> function_decl .)
    IDENTIFIER      reduce using rule 268 (declaration -> function_decl .)
    CASE            reduce using rule 268 (declaration -> function_decl .)
    DEFAULT         reduce using rule 268 (declaration -> function_decl .)
    SEMICOLON       reduce using rule 268 (declaration -> function_decl .)
    LCPAREN         reduce using rule 268 (declaration -> function_decl .)
    IF              reduce using rule 268 (declaration -> function_decl .)
    SWITCH          reduce using rule 268 (declaration -> function_decl .)
    WHILE           reduce using rule 268 (declaration -> function_decl .)
    DO              reduce using rule 268 (declaration -> function_decl .)
    FOR             reduce using rule 268 (declaration -> function_decl .)
    BREAK           reduce using rule 268 (declaration -> function_decl .)
    CONTINUE        reduce using rule 268 (declaration -> function_decl .)
    RETURN          reduce using rule 268 (declaration -> function_decl .)
    GOTO            reduce using rule 268 (declaration -> function_decl .)
    TRY             reduce using rule 268 (declaration -> function_decl .)
    THROW           reduce using rule 268 (declaration -> function_decl .)
    DPLUSOP         reduce using rule 268 (declaration -> function_decl .)
    DMINUSOP        reduce using rule 268 (declaration -> function_decl .)
    SIZEOF          reduce using rule 268 (declaration -> function_decl .)
    PLUSOP          reduce using rule 268 (declaration -> function_decl .)
    MINUSOP         reduce using rule 268 (declaration -> function_decl .)
    NOTSYM          reduce using rule 268 (declaration -> function_decl .)
    BNOP            reduce using rule 268 (declaration -> function_decl .)
    MULTOP          reduce using rule 268 (declaration -> function_decl .)
    BANDOP          reduce using rule 268 (declaration -> function_decl .)
    NEW             reduce using rule 268 (declaration -> function_decl .)
    DELETE          reduce using rule 268 (declaration -> function_decl .)
    THIS            reduce using rule 268 (declaration -> function_decl .)
    LPAREN          reduce using rule 268 (declaration -> function_decl .)
    DOUBLEBNOP      reduce using rule 268 (declaration -> function_decl .)
    STRING_L        reduce using rule 268 (declaration -> function_decl .)
    NUMBER          reduce using rule 268 (declaration -> function_decl .)
    SCHAR           reduce using rule 268 (declaration -> function_decl .)
    ELSE            reduce using rule 268 (declaration -> function_decl .)


state 13

    (269) declaration -> class_define_specifier . SEMICOLON

    SEMICOLON       shift and go to state 54


state 14

    (270) declaration -> template_declaration .

    CONST           reduce using rule 270 (declaration -> template_declaration .)
    ASM             reduce using rule 270 (declaration -> template_declaration .)
    TEMPLATE        reduce using rule 270 (declaration -> template_declaration .)
    TYPEDEF         reduce using rule 270 (declaration -> template_declaration .)
    CHAR            reduce using rule 270 (declaration -> template_declaration .)
    SHORT           reduce using rule 270 (declaration -> template_declaration .)
    INT             reduce using rule 270 (declaration -> template_declaration .)
    LONG            reduce using rule 270 (declaration -> template_declaration .)
    SIGNED          reduce using rule 270 (declaration -> template_declaration .)
    UNSIGNED        reduce using rule 270 (declaration -> template_declaration .)
    FLOAT           reduce using rule 270 (declaration -> template_declaration .)
    DOUBLE          reduce using rule 270 (declaration -> template_declaration .)
    VOID            reduce using rule 270 (declaration -> template_declaration .)
    STRING          reduce using rule 270 (declaration -> template_declaration .)
    AUTO            reduce using rule 270 (declaration -> template_declaration .)
    TYPE            reduce using rule 270 (declaration -> template_declaration .)
    CLASS           reduce using rule 270 (declaration -> template_declaration .)
    STRUCT          reduce using rule 270 (declaration -> template_declaration .)
    $end            reduce using rule 270 (declaration -> template_declaration .)
    RCPAREN         reduce using rule 270 (declaration -> template_declaration .)
    IDENTIFIER      reduce using rule 270 (declaration -> template_declaration .)
    CASE            reduce using rule 270 (declaration -> template_declaration .)
    DEFAULT         reduce using rule 270 (declaration -> template_declaration .)
    SEMICOLON       reduce using rule 270 (declaration -> template_declaration .)
    LCPAREN         reduce using rule 270 (declaration -> template_declaration .)
    IF              reduce using rule 270 (declaration -> template_declaration .)
    SWITCH          reduce using rule 270 (declaration -> template_declaration .)
    WHILE           reduce using rule 270 (declaration -> template_declaration .)
    DO              reduce using rule 270 (declaration -> template_declaration .)
    FOR             reduce using rule 270 (declaration -> template_declaration .)
    BREAK           reduce using rule 270 (declaration -> template_declaration .)
    CONTINUE        reduce using rule 270 (declaration -> template_declaration .)
    RETURN          reduce using rule 270 (declaration -> template_declaration .)
    GOTO            reduce using rule 270 (declaration -> template_declaration .)
    TRY             reduce using rule 270 (declaration -> template_declaration .)
    THROW           reduce using rule 270 (declaration -> template_declaration .)
    DPLUSOP         reduce using rule 270 (declaration -> template_declaration .)
    DMINUSOP        reduce using rule 270 (declaration -> template_declaration .)
    SIZEOF          reduce using rule 270 (declaration -> template_declaration .)
    PLUSOP          reduce using rule 270 (declaration -> template_declaration .)
    MINUSOP         reduce using rule 270 (declaration -> template_declaration .)
    NOTSYM          reduce using rule 270 (declaration -> template_declaration .)
    BNOP            reduce using rule 270 (declaration -> template_declaration .)
    MULTOP          reduce using rule 270 (declaration -> template_declaration .)
    BANDOP          reduce using rule 270 (declaration -> template_declaration .)
    NEW             reduce using rule 270 (declaration -> template_declaration .)
    DELETE          reduce using rule 270 (declaration -> template_declaration .)
    THIS            reduce using rule 270 (declaration -> template_declaration .)
    LPAREN          reduce using rule 270 (declaration -> template_declaration .)
    DOUBLEBNOP      reduce using rule 270 (declaration -> template_declaration .)
    STRING_L        reduce using rule 270 (declaration -> template_declaration .)
    NUMBER          reduce using rule 270 (declaration -> template_declaration .)
    SCHAR           reduce using rule 270 (declaration -> template_declaration .)
    ELSE            reduce using rule 270 (declaration -> template_declaration .)


state 15

    (271) declaration -> typedef_declarator .

    CONST           reduce using rule 271 (declaration -> typedef_declarator .)
    ASM             reduce using rule 271 (declaration -> typedef_declarator .)
    TEMPLATE        reduce using rule 271 (declaration -> typedef_declarator .)
    TYPEDEF         reduce using rule 271 (declaration -> typedef_declarator .)
    CHAR            reduce using rule 271 (declaration -> typedef_declarator .)
    SHORT           reduce using rule 271 (declaration -> typedef_declarator .)
    INT             reduce using rule 271 (declaration -> typedef_declarator .)
    LONG            reduce using rule 271 (declaration -> typedef_declarator .)
    SIGNED          reduce using rule 271 (declaration -> typedef_declarator .)
    UNSIGNED        reduce using rule 271 (declaration -> typedef_declarator .)
    FLOAT           reduce using rule 271 (declaration -> typedef_declarator .)
    DOUBLE          reduce using rule 271 (declaration -> typedef_declarator .)
    VOID            reduce using rule 271 (declaration -> typedef_declarator .)
    STRING          reduce using rule 271 (declaration -> typedef_declarator .)
    AUTO            reduce using rule 271 (declaration -> typedef_declarator .)
    TYPE            reduce using rule 271 (declaration -> typedef_declarator .)
    CLASS           reduce using rule 271 (declaration -> typedef_declarator .)
    STRUCT          reduce using rule 271 (declaration -> typedef_declarator .)
    $end            reduce using rule 271 (declaration -> typedef_declarator .)
    RCPAREN         reduce using rule 271 (declaration -> typedef_declarator .)
    IDENTIFIER      reduce using rule 271 (declaration -> typedef_declarator .)
    CASE            reduce using rule 271 (declaration -> typedef_declarator .)
    DEFAULT         reduce using rule 271 (declaration -> typedef_declarator .)
    SEMICOLON       reduce using rule 271 (declaration -> typedef_declarator .)
    LCPAREN         reduce using rule 271 (declaration -> typedef_declarator .)
    IF              reduce using rule 271 (declaration -> typedef_declarator .)
    SWITCH          reduce using rule 271 (declaration -> typedef_declarator .)
    WHILE           reduce using rule 271 (declaration -> typedef_declarator .)
    DO              reduce using rule 271 (declaration -> typedef_declarator .)
    FOR             reduce using rule 271 (declaration -> typedef_declarator .)
    BREAK           reduce using rule 271 (declaration -> typedef_declarator .)
    CONTINUE        reduce using rule 271 (declaration -> typedef_declarator .)
    RETURN          reduce using rule 271 (declaration -> typedef_declarator .)
    GOTO            reduce using rule 271 (declaration -> typedef_declarator .)
    TRY             reduce using rule 271 (declaration -> typedef_declarator .)
    THROW           reduce using rule 271 (declaration -> typedef_declarator .)
    DPLUSOP         reduce using rule 271 (declaration -> typedef_declarator .)
    DMINUSOP        reduce using rule 271 (declaration -> typedef_declarator .)
    SIZEOF          reduce using rule 271 (declaration -> typedef_declarator .)
    PLUSOP          reduce using rule 271 (declaration -> typedef_declarator .)
    MINUSOP         reduce using rule 271 (declaration -> typedef_declarator .)
    NOTSYM          reduce using rule 271 (declaration -> typedef_declarator .)
    BNOP            reduce using rule 271 (declaration -> typedef_declarator .)
    MULTOP          reduce using rule 271 (declaration -> typedef_declarator .)
    BANDOP          reduce using rule 271 (declaration -> typedef_declarator .)
    NEW             reduce using rule 271 (declaration -> typedef_declarator .)
    DELETE          reduce using rule 271 (declaration -> typedef_declarator .)
    THIS            reduce using rule 271 (declaration -> typedef_declarator .)
    LPAREN          reduce using rule 271 (declaration -> typedef_declarator .)
    DOUBLEBNOP      reduce using rule 271 (declaration -> typedef_declarator .)
    STRING_L        reduce using rule 271 (declaration -> typedef_declarator .)
    NUMBER          reduce using rule 271 (declaration -> typedef_declarator .)
    SCHAR           reduce using rule 271 (declaration -> typedef_declarator .)
    ELSE            reduce using rule 271 (declaration -> typedef_declarator .)


state 16

    (168) type_specifier_ -> CONST . type_specifier
    (172) type_specifier -> . simple_type_name
    (173) type_specifier -> . complex_type_specifier
    (174) simple_type_name -> . CHAR
    (175) simple_type_name -> . SHORT
    (176) simple_type_name -> . INT
    (177) simple_type_name -> . LONG
    (178) simple_type_name -> . SIGNED
    (179) simple_type_name -> . UNSIGNED
    (180) simple_type_name -> . FLOAT
    (181) simple_type_name -> . DOUBLE
    (182) simple_type_name -> . VOID
    (183) simple_type_name -> . STRING
    (184) simple_type_name -> . AUTO
    (185) complex_type_specifier -> . class_key IDENTIFIER
    (186) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (187) complex_type_specifier -> . TYPE IDENTIFIER
    (188) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (201) class_key -> . CLASS
    (202) class_key -> . STRUCT

    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38

    type_specifier                 shift and go to state 55
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 56

state 17

    (169) type_specifier_ -> type_specifier .

    IDENTIFIER      reduce using rule 169 (type_specifier_ -> type_specifier .)
    DOUBLEBNOP      reduce using rule 169 (type_specifier_ -> type_specifier .)
    MULTOP          reduce using rule 169 (type_specifier_ -> type_specifier .)
    BANDOP          reduce using rule 169 (type_specifier_ -> type_specifier .)
    LSPAREN         reduce using rule 169 (type_specifier_ -> type_specifier .)
    SEMICOLON       reduce using rule 169 (type_specifier_ -> type_specifier .)
    RTEMPLATE       reduce using rule 169 (type_specifier_ -> type_specifier .)
    COMMA           reduce using rule 169 (type_specifier_ -> type_specifier .)
    RPAREN          reduce using rule 169 (type_specifier_ -> type_specifier .)
    LPAREN          reduce using rule 169 (type_specifier_ -> type_specifier .)
    EQUAL           reduce using rule 169 (type_specifier_ -> type_specifier .)
    MULTEQOP        reduce using rule 169 (type_specifier_ -> type_specifier .)
    DIVEQOP         reduce using rule 169 (type_specifier_ -> type_specifier .)
    MODEQOP         reduce using rule 169 (type_specifier_ -> type_specifier .)
    PLUSEQOP        reduce using rule 169 (type_specifier_ -> type_specifier .)
    MINUSEQOP       reduce using rule 169 (type_specifier_ -> type_specifier .)
    LSHIFTEQOP      reduce using rule 169 (type_specifier_ -> type_specifier .)
    RSHIFTEQOP      reduce using rule 169 (type_specifier_ -> type_specifier .)
    BANDEQOP        reduce using rule 169 (type_specifier_ -> type_specifier .)
    BOREQOP         reduce using rule 169 (type_specifier_ -> type_specifier .)
    DOTSTAR         reduce using rule 169 (type_specifier_ -> type_specifier .)
    ARROWSTAR       reduce using rule 169 (type_specifier_ -> type_specifier .)
    DIVOP           reduce using rule 169 (type_specifier_ -> type_specifier .)
    MODOP           reduce using rule 169 (type_specifier_ -> type_specifier .)
    PLUSOP          reduce using rule 169 (type_specifier_ -> type_specifier .)
    MINUSOP         reduce using rule 169 (type_specifier_ -> type_specifier .)
    LSHIFT          reduce using rule 169 (type_specifier_ -> type_specifier .)
    RSHIFT          reduce using rule 169 (type_specifier_ -> type_specifier .)
    LTCOMP          reduce using rule 169 (type_specifier_ -> type_specifier .)
    GTCOMP          reduce using rule 169 (type_specifier_ -> type_specifier .)
    LTECOMP         reduce using rule 169 (type_specifier_ -> type_specifier .)
    GTECOMP         reduce using rule 169 (type_specifier_ -> type_specifier .)
    EQCOMP          reduce using rule 169 (type_specifier_ -> type_specifier .)
    NEQCOMP         reduce using rule 169 (type_specifier_ -> type_specifier .)
    XOROP           reduce using rule 169 (type_specifier_ -> type_specifier .)
    OROP            reduce using rule 169 (type_specifier_ -> type_specifier .)
    ANDOP           reduce using rule 169 (type_specifier_ -> type_specifier .)
    QUESMARK        reduce using rule 169 (type_specifier_ -> type_specifier .)
    RSPAREN         reduce using rule 169 (type_specifier_ -> type_specifier .)
    RCPAREN         reduce using rule 169 (type_specifier_ -> type_specifier .)
    COLON           reduce using rule 169 (type_specifier_ -> type_specifier .)


state 18

    (287) asm_declaration -> ASM . LPAREN STRING_L RPAREN SEMICOLON

    LPAREN          shift and go to state 57


state 19

    (203) class_define_specifier -> class_head . LCPAREN member_list RCPAREN
    (204) class_define_specifier -> class_head . LCPAREN RCPAREN

    LCPAREN         shift and go to state 58


state 20

    (272) template_declaration -> TEMPLATE . LTEMPLATE template_argument_list RTEMPLATE declaration

    LTEMPLATE       shift and go to state 59


state 21

    (170) typedef_declarator -> TYPEDEF . type_specifier_ abstract_declarator IDENTIFIER SEMICOLON
    (171) typedef_declarator -> TYPEDEF . type_specifier_ IDENTIFIER SEMICOLON
    (168) type_specifier_ -> . CONST type_specifier
    (169) type_specifier_ -> . type_specifier
    (172) type_specifier -> . simple_type_name
    (173) type_specifier -> . complex_type_specifier
    (174) simple_type_name -> . CHAR
    (175) simple_type_name -> . SHORT
    (176) simple_type_name -> . INT
    (177) simple_type_name -> . LONG
    (178) simple_type_name -> . SIGNED
    (179) simple_type_name -> . UNSIGNED
    (180) simple_type_name -> . FLOAT
    (181) simple_type_name -> . DOUBLE
    (182) simple_type_name -> . VOID
    (183) simple_type_name -> . STRING
    (184) simple_type_name -> . AUTO
    (185) complex_type_specifier -> . class_key IDENTIFIER
    (186) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (187) complex_type_specifier -> . TYPE IDENTIFIER
    (188) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (201) class_key -> . CLASS
    (202) class_key -> . STRUCT

    CONST           shift and go to state 16
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38

    type_specifier_                shift and go to state 60
    type_specifier                 shift and go to state 17
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 56

state 22

    (172) type_specifier -> simple_type_name .

    IDENTIFIER      reduce using rule 172 (type_specifier -> simple_type_name .)
    DOUBLEBNOP      reduce using rule 172 (type_specifier -> simple_type_name .)
    MULTOP          reduce using rule 172 (type_specifier -> simple_type_name .)
    BANDOP          reduce using rule 172 (type_specifier -> simple_type_name .)
    LSPAREN         reduce using rule 172 (type_specifier -> simple_type_name .)
    SEMICOLON       reduce using rule 172 (type_specifier -> simple_type_name .)
    RTEMPLATE       reduce using rule 172 (type_specifier -> simple_type_name .)
    COMMA           reduce using rule 172 (type_specifier -> simple_type_name .)
    RPAREN          reduce using rule 172 (type_specifier -> simple_type_name .)
    LPAREN          reduce using rule 172 (type_specifier -> simple_type_name .)
    EQUAL           reduce using rule 172 (type_specifier -> simple_type_name .)
    MULTEQOP        reduce using rule 172 (type_specifier -> simple_type_name .)
    DIVEQOP         reduce using rule 172 (type_specifier -> simple_type_name .)
    MODEQOP         reduce using rule 172 (type_specifier -> simple_type_name .)
    PLUSEQOP        reduce using rule 172 (type_specifier -> simple_type_name .)
    MINUSEQOP       reduce using rule 172 (type_specifier -> simple_type_name .)
    LSHIFTEQOP      reduce using rule 172 (type_specifier -> simple_type_name .)
    RSHIFTEQOP      reduce using rule 172 (type_specifier -> simple_type_name .)
    BANDEQOP        reduce using rule 172 (type_specifier -> simple_type_name .)
    BOREQOP         reduce using rule 172 (type_specifier -> simple_type_name .)
    DOTSTAR         reduce using rule 172 (type_specifier -> simple_type_name .)
    ARROWSTAR       reduce using rule 172 (type_specifier -> simple_type_name .)
    DIVOP           reduce using rule 172 (type_specifier -> simple_type_name .)
    MODOP           reduce using rule 172 (type_specifier -> simple_type_name .)
    PLUSOP          reduce using rule 172 (type_specifier -> simple_type_name .)
    MINUSOP         reduce using rule 172 (type_specifier -> simple_type_name .)
    LSHIFT          reduce using rule 172 (type_specifier -> simple_type_name .)
    RSHIFT          reduce using rule 172 (type_specifier -> simple_type_name .)
    LTCOMP          reduce using rule 172 (type_specifier -> simple_type_name .)
    GTCOMP          reduce using rule 172 (type_specifier -> simple_type_name .)
    LTECOMP         reduce using rule 172 (type_specifier -> simple_type_name .)
    GTECOMP         reduce using rule 172 (type_specifier -> simple_type_name .)
    EQCOMP          reduce using rule 172 (type_specifier -> simple_type_name .)
    NEQCOMP         reduce using rule 172 (type_specifier -> simple_type_name .)
    XOROP           reduce using rule 172 (type_specifier -> simple_type_name .)
    OROP            reduce using rule 172 (type_specifier -> simple_type_name .)
    ANDOP           reduce using rule 172 (type_specifier -> simple_type_name .)
    QUESMARK        reduce using rule 172 (type_specifier -> simple_type_name .)
    RSPAREN         reduce using rule 172 (type_specifier -> simple_type_name .)
    RCPAREN         reduce using rule 172 (type_specifier -> simple_type_name .)
    COLON           reduce using rule 172 (type_specifier -> simple_type_name .)


state 23

    (173) type_specifier -> complex_type_specifier .

    IDENTIFIER      reduce using rule 173 (type_specifier -> complex_type_specifier .)
    DOUBLEBNOP      reduce using rule 173 (type_specifier -> complex_type_specifier .)
    MULTOP          reduce using rule 173 (type_specifier -> complex_type_specifier .)
    BANDOP          reduce using rule 173 (type_specifier -> complex_type_specifier .)
    LSPAREN         reduce using rule 173 (type_specifier -> complex_type_specifier .)
    SEMICOLON       reduce using rule 173 (type_specifier -> complex_type_specifier .)
    RTEMPLATE       reduce using rule 173 (type_specifier -> complex_type_specifier .)
    COMMA           reduce using rule 173 (type_specifier -> complex_type_specifier .)
    RPAREN          reduce using rule 173 (type_specifier -> complex_type_specifier .)
    LPAREN          reduce using rule 173 (type_specifier -> complex_type_specifier .)
    EQUAL           reduce using rule 173 (type_specifier -> complex_type_specifier .)
    MULTEQOP        reduce using rule 173 (type_specifier -> complex_type_specifier .)
    DIVEQOP         reduce using rule 173 (type_specifier -> complex_type_specifier .)
    MODEQOP         reduce using rule 173 (type_specifier -> complex_type_specifier .)
    PLUSEQOP        reduce using rule 173 (type_specifier -> complex_type_specifier .)
    MINUSEQOP       reduce using rule 173 (type_specifier -> complex_type_specifier .)
    LSHIFTEQOP      reduce using rule 173 (type_specifier -> complex_type_specifier .)
    RSHIFTEQOP      reduce using rule 173 (type_specifier -> complex_type_specifier .)
    BANDEQOP        reduce using rule 173 (type_specifier -> complex_type_specifier .)
    BOREQOP         reduce using rule 173 (type_specifier -> complex_type_specifier .)
    DOTSTAR         reduce using rule 173 (type_specifier -> complex_type_specifier .)
    ARROWSTAR       reduce using rule 173 (type_specifier -> complex_type_specifier .)
    DIVOP           reduce using rule 173 (type_specifier -> complex_type_specifier .)
    MODOP           reduce using rule 173 (type_specifier -> complex_type_specifier .)
    PLUSOP          reduce using rule 173 (type_specifier -> complex_type_specifier .)
    MINUSOP         reduce using rule 173 (type_specifier -> complex_type_specifier .)
    LSHIFT          reduce using rule 173 (type_specifier -> complex_type_specifier .)
    RSHIFT          reduce using rule 173 (type_specifier -> complex_type_specifier .)
    LTCOMP          reduce using rule 173 (type_specifier -> complex_type_specifier .)
    GTCOMP          reduce using rule 173 (type_specifier -> complex_type_specifier .)
    LTECOMP         reduce using rule 173 (type_specifier -> complex_type_specifier .)
    GTECOMP         reduce using rule 173 (type_specifier -> complex_type_specifier .)
    EQCOMP          reduce using rule 173 (type_specifier -> complex_type_specifier .)
    NEQCOMP         reduce using rule 173 (type_specifier -> complex_type_specifier .)
    XOROP           reduce using rule 173 (type_specifier -> complex_type_specifier .)
    OROP            reduce using rule 173 (type_specifier -> complex_type_specifier .)
    ANDOP           reduce using rule 173 (type_specifier -> complex_type_specifier .)
    QUESMARK        reduce using rule 173 (type_specifier -> complex_type_specifier .)
    RSPAREN         reduce using rule 173 (type_specifier -> complex_type_specifier .)
    RCPAREN         reduce using rule 173 (type_specifier -> complex_type_specifier .)
    COLON           reduce using rule 173 (type_specifier -> complex_type_specifier .)


state 24

    (190) class_head -> class_key . IDENTIFIER base_spec
    (191) class_head -> class_key . IDENTIFIER
    (185) complex_type_specifier -> class_key . IDENTIFIER
    (186) complex_type_specifier -> class_key . IDENTIFIER template_class_name

    IDENTIFIER      shift and go to state 61


state 25

    (174) simple_type_name -> CHAR .

    IDENTIFIER      reduce using rule 174 (simple_type_name -> CHAR .)
    DOUBLEBNOP      reduce using rule 174 (simple_type_name -> CHAR .)
    MULTOP          reduce using rule 174 (simple_type_name -> CHAR .)
    BANDOP          reduce using rule 174 (simple_type_name -> CHAR .)
    LSPAREN         reduce using rule 174 (simple_type_name -> CHAR .)
    SEMICOLON       reduce using rule 174 (simple_type_name -> CHAR .)
    RTEMPLATE       reduce using rule 174 (simple_type_name -> CHAR .)
    COMMA           reduce using rule 174 (simple_type_name -> CHAR .)
    RPAREN          reduce using rule 174 (simple_type_name -> CHAR .)
    LPAREN          reduce using rule 174 (simple_type_name -> CHAR .)
    EQUAL           reduce using rule 174 (simple_type_name -> CHAR .)
    MULTEQOP        reduce using rule 174 (simple_type_name -> CHAR .)
    DIVEQOP         reduce using rule 174 (simple_type_name -> CHAR .)
    MODEQOP         reduce using rule 174 (simple_type_name -> CHAR .)
    PLUSEQOP        reduce using rule 174 (simple_type_name -> CHAR .)
    MINUSEQOP       reduce using rule 174 (simple_type_name -> CHAR .)
    LSHIFTEQOP      reduce using rule 174 (simple_type_name -> CHAR .)
    RSHIFTEQOP      reduce using rule 174 (simple_type_name -> CHAR .)
    BANDEQOP        reduce using rule 174 (simple_type_name -> CHAR .)
    BOREQOP         reduce using rule 174 (simple_type_name -> CHAR .)
    DOTSTAR         reduce using rule 174 (simple_type_name -> CHAR .)
    ARROWSTAR       reduce using rule 174 (simple_type_name -> CHAR .)
    DIVOP           reduce using rule 174 (simple_type_name -> CHAR .)
    MODOP           reduce using rule 174 (simple_type_name -> CHAR .)
    PLUSOP          reduce using rule 174 (simple_type_name -> CHAR .)
    MINUSOP         reduce using rule 174 (simple_type_name -> CHAR .)
    LSHIFT          reduce using rule 174 (simple_type_name -> CHAR .)
    RSHIFT          reduce using rule 174 (simple_type_name -> CHAR .)
    LTCOMP          reduce using rule 174 (simple_type_name -> CHAR .)
    GTCOMP          reduce using rule 174 (simple_type_name -> CHAR .)
    LTECOMP         reduce using rule 174 (simple_type_name -> CHAR .)
    GTECOMP         reduce using rule 174 (simple_type_name -> CHAR .)
    EQCOMP          reduce using rule 174 (simple_type_name -> CHAR .)
    NEQCOMP         reduce using rule 174 (simple_type_name -> CHAR .)
    XOROP           reduce using rule 174 (simple_type_name -> CHAR .)
    OROP            reduce using rule 174 (simple_type_name -> CHAR .)
    ANDOP           reduce using rule 174 (simple_type_name -> CHAR .)
    QUESMARK        reduce using rule 174 (simple_type_name -> CHAR .)
    RSPAREN         reduce using rule 174 (simple_type_name -> CHAR .)
    RCPAREN         reduce using rule 174 (simple_type_name -> CHAR .)
    COLON           reduce using rule 174 (simple_type_name -> CHAR .)


state 26

    (175) simple_type_name -> SHORT .

    IDENTIFIER      reduce using rule 175 (simple_type_name -> SHORT .)
    DOUBLEBNOP      reduce using rule 175 (simple_type_name -> SHORT .)
    MULTOP          reduce using rule 175 (simple_type_name -> SHORT .)
    BANDOP          reduce using rule 175 (simple_type_name -> SHORT .)
    LSPAREN         reduce using rule 175 (simple_type_name -> SHORT .)
    SEMICOLON       reduce using rule 175 (simple_type_name -> SHORT .)
    RTEMPLATE       reduce using rule 175 (simple_type_name -> SHORT .)
    COMMA           reduce using rule 175 (simple_type_name -> SHORT .)
    RPAREN          reduce using rule 175 (simple_type_name -> SHORT .)
    LPAREN          reduce using rule 175 (simple_type_name -> SHORT .)
    EQUAL           reduce using rule 175 (simple_type_name -> SHORT .)
    MULTEQOP        reduce using rule 175 (simple_type_name -> SHORT .)
    DIVEQOP         reduce using rule 175 (simple_type_name -> SHORT .)
    MODEQOP         reduce using rule 175 (simple_type_name -> SHORT .)
    PLUSEQOP        reduce using rule 175 (simple_type_name -> SHORT .)
    MINUSEQOP       reduce using rule 175 (simple_type_name -> SHORT .)
    LSHIFTEQOP      reduce using rule 175 (simple_type_name -> SHORT .)
    RSHIFTEQOP      reduce using rule 175 (simple_type_name -> SHORT .)
    BANDEQOP        reduce using rule 175 (simple_type_name -> SHORT .)
    BOREQOP         reduce using rule 175 (simple_type_name -> SHORT .)
    DOTSTAR         reduce using rule 175 (simple_type_name -> SHORT .)
    ARROWSTAR       reduce using rule 175 (simple_type_name -> SHORT .)
    DIVOP           reduce using rule 175 (simple_type_name -> SHORT .)
    MODOP           reduce using rule 175 (simple_type_name -> SHORT .)
    PLUSOP          reduce using rule 175 (simple_type_name -> SHORT .)
    MINUSOP         reduce using rule 175 (simple_type_name -> SHORT .)
    LSHIFT          reduce using rule 175 (simple_type_name -> SHORT .)
    RSHIFT          reduce using rule 175 (simple_type_name -> SHORT .)
    LTCOMP          reduce using rule 175 (simple_type_name -> SHORT .)
    GTCOMP          reduce using rule 175 (simple_type_name -> SHORT .)
    LTECOMP         reduce using rule 175 (simple_type_name -> SHORT .)
    GTECOMP         reduce using rule 175 (simple_type_name -> SHORT .)
    EQCOMP          reduce using rule 175 (simple_type_name -> SHORT .)
    NEQCOMP         reduce using rule 175 (simple_type_name -> SHORT .)
    XOROP           reduce using rule 175 (simple_type_name -> SHORT .)
    OROP            reduce using rule 175 (simple_type_name -> SHORT .)
    ANDOP           reduce using rule 175 (simple_type_name -> SHORT .)
    QUESMARK        reduce using rule 175 (simple_type_name -> SHORT .)
    RSPAREN         reduce using rule 175 (simple_type_name -> SHORT .)
    RCPAREN         reduce using rule 175 (simple_type_name -> SHORT .)
    COLON           reduce using rule 175 (simple_type_name -> SHORT .)


state 27

    (176) simple_type_name -> INT .

    IDENTIFIER      reduce using rule 176 (simple_type_name -> INT .)
    DOUBLEBNOP      reduce using rule 176 (simple_type_name -> INT .)
    MULTOP          reduce using rule 176 (simple_type_name -> INT .)
    BANDOP          reduce using rule 176 (simple_type_name -> INT .)
    LSPAREN         reduce using rule 176 (simple_type_name -> INT .)
    SEMICOLON       reduce using rule 176 (simple_type_name -> INT .)
    RTEMPLATE       reduce using rule 176 (simple_type_name -> INT .)
    COMMA           reduce using rule 176 (simple_type_name -> INT .)
    RPAREN          reduce using rule 176 (simple_type_name -> INT .)
    LPAREN          reduce using rule 176 (simple_type_name -> INT .)
    EQUAL           reduce using rule 176 (simple_type_name -> INT .)
    MULTEQOP        reduce using rule 176 (simple_type_name -> INT .)
    DIVEQOP         reduce using rule 176 (simple_type_name -> INT .)
    MODEQOP         reduce using rule 176 (simple_type_name -> INT .)
    PLUSEQOP        reduce using rule 176 (simple_type_name -> INT .)
    MINUSEQOP       reduce using rule 176 (simple_type_name -> INT .)
    LSHIFTEQOP      reduce using rule 176 (simple_type_name -> INT .)
    RSHIFTEQOP      reduce using rule 176 (simple_type_name -> INT .)
    BANDEQOP        reduce using rule 176 (simple_type_name -> INT .)
    BOREQOP         reduce using rule 176 (simple_type_name -> INT .)
    DOTSTAR         reduce using rule 176 (simple_type_name -> INT .)
    ARROWSTAR       reduce using rule 176 (simple_type_name -> INT .)
    DIVOP           reduce using rule 176 (simple_type_name -> INT .)
    MODOP           reduce using rule 176 (simple_type_name -> INT .)
    PLUSOP          reduce using rule 176 (simple_type_name -> INT .)
    MINUSOP         reduce using rule 176 (simple_type_name -> INT .)
    LSHIFT          reduce using rule 176 (simple_type_name -> INT .)
    RSHIFT          reduce using rule 176 (simple_type_name -> INT .)
    LTCOMP          reduce using rule 176 (simple_type_name -> INT .)
    GTCOMP          reduce using rule 176 (simple_type_name -> INT .)
    LTECOMP         reduce using rule 176 (simple_type_name -> INT .)
    GTECOMP         reduce using rule 176 (simple_type_name -> INT .)
    EQCOMP          reduce using rule 176 (simple_type_name -> INT .)
    NEQCOMP         reduce using rule 176 (simple_type_name -> INT .)
    XOROP           reduce using rule 176 (simple_type_name -> INT .)
    OROP            reduce using rule 176 (simple_type_name -> INT .)
    ANDOP           reduce using rule 176 (simple_type_name -> INT .)
    QUESMARK        reduce using rule 176 (simple_type_name -> INT .)
    RSPAREN         reduce using rule 176 (simple_type_name -> INT .)
    RCPAREN         reduce using rule 176 (simple_type_name -> INT .)
    COLON           reduce using rule 176 (simple_type_name -> INT .)


state 28

    (177) simple_type_name -> LONG .

    IDENTIFIER      reduce using rule 177 (simple_type_name -> LONG .)
    DOUBLEBNOP      reduce using rule 177 (simple_type_name -> LONG .)
    MULTOP          reduce using rule 177 (simple_type_name -> LONG .)
    BANDOP          reduce using rule 177 (simple_type_name -> LONG .)
    LSPAREN         reduce using rule 177 (simple_type_name -> LONG .)
    SEMICOLON       reduce using rule 177 (simple_type_name -> LONG .)
    RTEMPLATE       reduce using rule 177 (simple_type_name -> LONG .)
    COMMA           reduce using rule 177 (simple_type_name -> LONG .)
    RPAREN          reduce using rule 177 (simple_type_name -> LONG .)
    LPAREN          reduce using rule 177 (simple_type_name -> LONG .)
    EQUAL           reduce using rule 177 (simple_type_name -> LONG .)
    MULTEQOP        reduce using rule 177 (simple_type_name -> LONG .)
    DIVEQOP         reduce using rule 177 (simple_type_name -> LONG .)
    MODEQOP         reduce using rule 177 (simple_type_name -> LONG .)
    PLUSEQOP        reduce using rule 177 (simple_type_name -> LONG .)
    MINUSEQOP       reduce using rule 177 (simple_type_name -> LONG .)
    LSHIFTEQOP      reduce using rule 177 (simple_type_name -> LONG .)
    RSHIFTEQOP      reduce using rule 177 (simple_type_name -> LONG .)
    BANDEQOP        reduce using rule 177 (simple_type_name -> LONG .)
    BOREQOP         reduce using rule 177 (simple_type_name -> LONG .)
    DOTSTAR         reduce using rule 177 (simple_type_name -> LONG .)
    ARROWSTAR       reduce using rule 177 (simple_type_name -> LONG .)
    DIVOP           reduce using rule 177 (simple_type_name -> LONG .)
    MODOP           reduce using rule 177 (simple_type_name -> LONG .)
    PLUSOP          reduce using rule 177 (simple_type_name -> LONG .)
    MINUSOP         reduce using rule 177 (simple_type_name -> LONG .)
    LSHIFT          reduce using rule 177 (simple_type_name -> LONG .)
    RSHIFT          reduce using rule 177 (simple_type_name -> LONG .)
    LTCOMP          reduce using rule 177 (simple_type_name -> LONG .)
    GTCOMP          reduce using rule 177 (simple_type_name -> LONG .)
    LTECOMP         reduce using rule 177 (simple_type_name -> LONG .)
    GTECOMP         reduce using rule 177 (simple_type_name -> LONG .)
    EQCOMP          reduce using rule 177 (simple_type_name -> LONG .)
    NEQCOMP         reduce using rule 177 (simple_type_name -> LONG .)
    XOROP           reduce using rule 177 (simple_type_name -> LONG .)
    OROP            reduce using rule 177 (simple_type_name -> LONG .)
    ANDOP           reduce using rule 177 (simple_type_name -> LONG .)
    QUESMARK        reduce using rule 177 (simple_type_name -> LONG .)
    RSPAREN         reduce using rule 177 (simple_type_name -> LONG .)
    RCPAREN         reduce using rule 177 (simple_type_name -> LONG .)
    COLON           reduce using rule 177 (simple_type_name -> LONG .)


state 29

    (178) simple_type_name -> SIGNED .

    IDENTIFIER      reduce using rule 178 (simple_type_name -> SIGNED .)
    DOUBLEBNOP      reduce using rule 178 (simple_type_name -> SIGNED .)
    MULTOP          reduce using rule 178 (simple_type_name -> SIGNED .)
    BANDOP          reduce using rule 178 (simple_type_name -> SIGNED .)
    LSPAREN         reduce using rule 178 (simple_type_name -> SIGNED .)
    SEMICOLON       reduce using rule 178 (simple_type_name -> SIGNED .)
    RTEMPLATE       reduce using rule 178 (simple_type_name -> SIGNED .)
    COMMA           reduce using rule 178 (simple_type_name -> SIGNED .)
    RPAREN          reduce using rule 178 (simple_type_name -> SIGNED .)
    LPAREN          reduce using rule 178 (simple_type_name -> SIGNED .)
    EQUAL           reduce using rule 178 (simple_type_name -> SIGNED .)
    MULTEQOP        reduce using rule 178 (simple_type_name -> SIGNED .)
    DIVEQOP         reduce using rule 178 (simple_type_name -> SIGNED .)
    MODEQOP         reduce using rule 178 (simple_type_name -> SIGNED .)
    PLUSEQOP        reduce using rule 178 (simple_type_name -> SIGNED .)
    MINUSEQOP       reduce using rule 178 (simple_type_name -> SIGNED .)
    LSHIFTEQOP      reduce using rule 178 (simple_type_name -> SIGNED .)
    RSHIFTEQOP      reduce using rule 178 (simple_type_name -> SIGNED .)
    BANDEQOP        reduce using rule 178 (simple_type_name -> SIGNED .)
    BOREQOP         reduce using rule 178 (simple_type_name -> SIGNED .)
    DOTSTAR         reduce using rule 178 (simple_type_name -> SIGNED .)
    ARROWSTAR       reduce using rule 178 (simple_type_name -> SIGNED .)
    DIVOP           reduce using rule 178 (simple_type_name -> SIGNED .)
    MODOP           reduce using rule 178 (simple_type_name -> SIGNED .)
    PLUSOP          reduce using rule 178 (simple_type_name -> SIGNED .)
    MINUSOP         reduce using rule 178 (simple_type_name -> SIGNED .)
    LSHIFT          reduce using rule 178 (simple_type_name -> SIGNED .)
    RSHIFT          reduce using rule 178 (simple_type_name -> SIGNED .)
    LTCOMP          reduce using rule 178 (simple_type_name -> SIGNED .)
    GTCOMP          reduce using rule 178 (simple_type_name -> SIGNED .)
    LTECOMP         reduce using rule 178 (simple_type_name -> SIGNED .)
    GTECOMP         reduce using rule 178 (simple_type_name -> SIGNED .)
    EQCOMP          reduce using rule 178 (simple_type_name -> SIGNED .)
    NEQCOMP         reduce using rule 178 (simple_type_name -> SIGNED .)
    XOROP           reduce using rule 178 (simple_type_name -> SIGNED .)
    OROP            reduce using rule 178 (simple_type_name -> SIGNED .)
    ANDOP           reduce using rule 178 (simple_type_name -> SIGNED .)
    QUESMARK        reduce using rule 178 (simple_type_name -> SIGNED .)
    RSPAREN         reduce using rule 178 (simple_type_name -> SIGNED .)
    RCPAREN         reduce using rule 178 (simple_type_name -> SIGNED .)
    COLON           reduce using rule 178 (simple_type_name -> SIGNED .)


state 30

    (179) simple_type_name -> UNSIGNED .

    IDENTIFIER      reduce using rule 179 (simple_type_name -> UNSIGNED .)
    DOUBLEBNOP      reduce using rule 179 (simple_type_name -> UNSIGNED .)
    MULTOP          reduce using rule 179 (simple_type_name -> UNSIGNED .)
    BANDOP          reduce using rule 179 (simple_type_name -> UNSIGNED .)
    LSPAREN         reduce using rule 179 (simple_type_name -> UNSIGNED .)
    SEMICOLON       reduce using rule 179 (simple_type_name -> UNSIGNED .)
    RTEMPLATE       reduce using rule 179 (simple_type_name -> UNSIGNED .)
    COMMA           reduce using rule 179 (simple_type_name -> UNSIGNED .)
    RPAREN          reduce using rule 179 (simple_type_name -> UNSIGNED .)
    LPAREN          reduce using rule 179 (simple_type_name -> UNSIGNED .)
    EQUAL           reduce using rule 179 (simple_type_name -> UNSIGNED .)
    MULTEQOP        reduce using rule 179 (simple_type_name -> UNSIGNED .)
    DIVEQOP         reduce using rule 179 (simple_type_name -> UNSIGNED .)
    MODEQOP         reduce using rule 179 (simple_type_name -> UNSIGNED .)
    PLUSEQOP        reduce using rule 179 (simple_type_name -> UNSIGNED .)
    MINUSEQOP       reduce using rule 179 (simple_type_name -> UNSIGNED .)
    LSHIFTEQOP      reduce using rule 179 (simple_type_name -> UNSIGNED .)
    RSHIFTEQOP      reduce using rule 179 (simple_type_name -> UNSIGNED .)
    BANDEQOP        reduce using rule 179 (simple_type_name -> UNSIGNED .)
    BOREQOP         reduce using rule 179 (simple_type_name -> UNSIGNED .)
    DOTSTAR         reduce using rule 179 (simple_type_name -> UNSIGNED .)
    ARROWSTAR       reduce using rule 179 (simple_type_name -> UNSIGNED .)
    DIVOP           reduce using rule 179 (simple_type_name -> UNSIGNED .)
    MODOP           reduce using rule 179 (simple_type_name -> UNSIGNED .)
    PLUSOP          reduce using rule 179 (simple_type_name -> UNSIGNED .)
    MINUSOP         reduce using rule 179 (simple_type_name -> UNSIGNED .)
    LSHIFT          reduce using rule 179 (simple_type_name -> UNSIGNED .)
    RSHIFT          reduce using rule 179 (simple_type_name -> UNSIGNED .)
    LTCOMP          reduce using rule 179 (simple_type_name -> UNSIGNED .)
    GTCOMP          reduce using rule 179 (simple_type_name -> UNSIGNED .)
    LTECOMP         reduce using rule 179 (simple_type_name -> UNSIGNED .)
    GTECOMP         reduce using rule 179 (simple_type_name -> UNSIGNED .)
    EQCOMP          reduce using rule 179 (simple_type_name -> UNSIGNED .)
    NEQCOMP         reduce using rule 179 (simple_type_name -> UNSIGNED .)
    XOROP           reduce using rule 179 (simple_type_name -> UNSIGNED .)
    OROP            reduce using rule 179 (simple_type_name -> UNSIGNED .)
    ANDOP           reduce using rule 179 (simple_type_name -> UNSIGNED .)
    QUESMARK        reduce using rule 179 (simple_type_name -> UNSIGNED .)
    RSPAREN         reduce using rule 179 (simple_type_name -> UNSIGNED .)
    RCPAREN         reduce using rule 179 (simple_type_name -> UNSIGNED .)
    COLON           reduce using rule 179 (simple_type_name -> UNSIGNED .)


state 31

    (180) simple_type_name -> FLOAT .

    IDENTIFIER      reduce using rule 180 (simple_type_name -> FLOAT .)
    DOUBLEBNOP      reduce using rule 180 (simple_type_name -> FLOAT .)
    MULTOP          reduce using rule 180 (simple_type_name -> FLOAT .)
    BANDOP          reduce using rule 180 (simple_type_name -> FLOAT .)
    LSPAREN         reduce using rule 180 (simple_type_name -> FLOAT .)
    SEMICOLON       reduce using rule 180 (simple_type_name -> FLOAT .)
    RTEMPLATE       reduce using rule 180 (simple_type_name -> FLOAT .)
    COMMA           reduce using rule 180 (simple_type_name -> FLOAT .)
    RPAREN          reduce using rule 180 (simple_type_name -> FLOAT .)
    LPAREN          reduce using rule 180 (simple_type_name -> FLOAT .)
    EQUAL           reduce using rule 180 (simple_type_name -> FLOAT .)
    MULTEQOP        reduce using rule 180 (simple_type_name -> FLOAT .)
    DIVEQOP         reduce using rule 180 (simple_type_name -> FLOAT .)
    MODEQOP         reduce using rule 180 (simple_type_name -> FLOAT .)
    PLUSEQOP        reduce using rule 180 (simple_type_name -> FLOAT .)
    MINUSEQOP       reduce using rule 180 (simple_type_name -> FLOAT .)
    LSHIFTEQOP      reduce using rule 180 (simple_type_name -> FLOAT .)
    RSHIFTEQOP      reduce using rule 180 (simple_type_name -> FLOAT .)
    BANDEQOP        reduce using rule 180 (simple_type_name -> FLOAT .)
    BOREQOP         reduce using rule 180 (simple_type_name -> FLOAT .)
    DOTSTAR         reduce using rule 180 (simple_type_name -> FLOAT .)
    ARROWSTAR       reduce using rule 180 (simple_type_name -> FLOAT .)
    DIVOP           reduce using rule 180 (simple_type_name -> FLOAT .)
    MODOP           reduce using rule 180 (simple_type_name -> FLOAT .)
    PLUSOP          reduce using rule 180 (simple_type_name -> FLOAT .)
    MINUSOP         reduce using rule 180 (simple_type_name -> FLOAT .)
    LSHIFT          reduce using rule 180 (simple_type_name -> FLOAT .)
    RSHIFT          reduce using rule 180 (simple_type_name -> FLOAT .)
    LTCOMP          reduce using rule 180 (simple_type_name -> FLOAT .)
    GTCOMP          reduce using rule 180 (simple_type_name -> FLOAT .)
    LTECOMP         reduce using rule 180 (simple_type_name -> FLOAT .)
    GTECOMP         reduce using rule 180 (simple_type_name -> FLOAT .)
    EQCOMP          reduce using rule 180 (simple_type_name -> FLOAT .)
    NEQCOMP         reduce using rule 180 (simple_type_name -> FLOAT .)
    XOROP           reduce using rule 180 (simple_type_name -> FLOAT .)
    OROP            reduce using rule 180 (simple_type_name -> FLOAT .)
    ANDOP           reduce using rule 180 (simple_type_name -> FLOAT .)
    QUESMARK        reduce using rule 180 (simple_type_name -> FLOAT .)
    RSPAREN         reduce using rule 180 (simple_type_name -> FLOAT .)
    RCPAREN         reduce using rule 180 (simple_type_name -> FLOAT .)
    COLON           reduce using rule 180 (simple_type_name -> FLOAT .)


state 32

    (181) simple_type_name -> DOUBLE .

    IDENTIFIER      reduce using rule 181 (simple_type_name -> DOUBLE .)
    DOUBLEBNOP      reduce using rule 181 (simple_type_name -> DOUBLE .)
    MULTOP          reduce using rule 181 (simple_type_name -> DOUBLE .)
    BANDOP          reduce using rule 181 (simple_type_name -> DOUBLE .)
    LSPAREN         reduce using rule 181 (simple_type_name -> DOUBLE .)
    SEMICOLON       reduce using rule 181 (simple_type_name -> DOUBLE .)
    RTEMPLATE       reduce using rule 181 (simple_type_name -> DOUBLE .)
    COMMA           reduce using rule 181 (simple_type_name -> DOUBLE .)
    RPAREN          reduce using rule 181 (simple_type_name -> DOUBLE .)
    LPAREN          reduce using rule 181 (simple_type_name -> DOUBLE .)
    EQUAL           reduce using rule 181 (simple_type_name -> DOUBLE .)
    MULTEQOP        reduce using rule 181 (simple_type_name -> DOUBLE .)
    DIVEQOP         reduce using rule 181 (simple_type_name -> DOUBLE .)
    MODEQOP         reduce using rule 181 (simple_type_name -> DOUBLE .)
    PLUSEQOP        reduce using rule 181 (simple_type_name -> DOUBLE .)
    MINUSEQOP       reduce using rule 181 (simple_type_name -> DOUBLE .)
    LSHIFTEQOP      reduce using rule 181 (simple_type_name -> DOUBLE .)
    RSHIFTEQOP      reduce using rule 181 (simple_type_name -> DOUBLE .)
    BANDEQOP        reduce using rule 181 (simple_type_name -> DOUBLE .)
    BOREQOP         reduce using rule 181 (simple_type_name -> DOUBLE .)
    DOTSTAR         reduce using rule 181 (simple_type_name -> DOUBLE .)
    ARROWSTAR       reduce using rule 181 (simple_type_name -> DOUBLE .)
    DIVOP           reduce using rule 181 (simple_type_name -> DOUBLE .)
    MODOP           reduce using rule 181 (simple_type_name -> DOUBLE .)
    PLUSOP          reduce using rule 181 (simple_type_name -> DOUBLE .)
    MINUSOP         reduce using rule 181 (simple_type_name -> DOUBLE .)
    LSHIFT          reduce using rule 181 (simple_type_name -> DOUBLE .)
    RSHIFT          reduce using rule 181 (simple_type_name -> DOUBLE .)
    LTCOMP          reduce using rule 181 (simple_type_name -> DOUBLE .)
    GTCOMP          reduce using rule 181 (simple_type_name -> DOUBLE .)
    LTECOMP         reduce using rule 181 (simple_type_name -> DOUBLE .)
    GTECOMP         reduce using rule 181 (simple_type_name -> DOUBLE .)
    EQCOMP          reduce using rule 181 (simple_type_name -> DOUBLE .)
    NEQCOMP         reduce using rule 181 (simple_type_name -> DOUBLE .)
    XOROP           reduce using rule 181 (simple_type_name -> DOUBLE .)
    OROP            reduce using rule 181 (simple_type_name -> DOUBLE .)
    ANDOP           reduce using rule 181 (simple_type_name -> DOUBLE .)
    QUESMARK        reduce using rule 181 (simple_type_name -> DOUBLE .)
    RSPAREN         reduce using rule 181 (simple_type_name -> DOUBLE .)
    RCPAREN         reduce using rule 181 (simple_type_name -> DOUBLE .)
    COLON           reduce using rule 181 (simple_type_name -> DOUBLE .)


state 33

    (182) simple_type_name -> VOID .

    IDENTIFIER      reduce using rule 182 (simple_type_name -> VOID .)
    DOUBLEBNOP      reduce using rule 182 (simple_type_name -> VOID .)
    MULTOP          reduce using rule 182 (simple_type_name -> VOID .)
    BANDOP          reduce using rule 182 (simple_type_name -> VOID .)
    LSPAREN         reduce using rule 182 (simple_type_name -> VOID .)
    SEMICOLON       reduce using rule 182 (simple_type_name -> VOID .)
    RTEMPLATE       reduce using rule 182 (simple_type_name -> VOID .)
    COMMA           reduce using rule 182 (simple_type_name -> VOID .)
    RPAREN          reduce using rule 182 (simple_type_name -> VOID .)
    LPAREN          reduce using rule 182 (simple_type_name -> VOID .)
    EQUAL           reduce using rule 182 (simple_type_name -> VOID .)
    MULTEQOP        reduce using rule 182 (simple_type_name -> VOID .)
    DIVEQOP         reduce using rule 182 (simple_type_name -> VOID .)
    MODEQOP         reduce using rule 182 (simple_type_name -> VOID .)
    PLUSEQOP        reduce using rule 182 (simple_type_name -> VOID .)
    MINUSEQOP       reduce using rule 182 (simple_type_name -> VOID .)
    LSHIFTEQOP      reduce using rule 182 (simple_type_name -> VOID .)
    RSHIFTEQOP      reduce using rule 182 (simple_type_name -> VOID .)
    BANDEQOP        reduce using rule 182 (simple_type_name -> VOID .)
    BOREQOP         reduce using rule 182 (simple_type_name -> VOID .)
    DOTSTAR         reduce using rule 182 (simple_type_name -> VOID .)
    ARROWSTAR       reduce using rule 182 (simple_type_name -> VOID .)
    DIVOP           reduce using rule 182 (simple_type_name -> VOID .)
    MODOP           reduce using rule 182 (simple_type_name -> VOID .)
    PLUSOP          reduce using rule 182 (simple_type_name -> VOID .)
    MINUSOP         reduce using rule 182 (simple_type_name -> VOID .)
    LSHIFT          reduce using rule 182 (simple_type_name -> VOID .)
    RSHIFT          reduce using rule 182 (simple_type_name -> VOID .)
    LTCOMP          reduce using rule 182 (simple_type_name -> VOID .)
    GTCOMP          reduce using rule 182 (simple_type_name -> VOID .)
    LTECOMP         reduce using rule 182 (simple_type_name -> VOID .)
    GTECOMP         reduce using rule 182 (simple_type_name -> VOID .)
    EQCOMP          reduce using rule 182 (simple_type_name -> VOID .)
    NEQCOMP         reduce using rule 182 (simple_type_name -> VOID .)
    XOROP           reduce using rule 182 (simple_type_name -> VOID .)
    OROP            reduce using rule 182 (simple_type_name -> VOID .)
    ANDOP           reduce using rule 182 (simple_type_name -> VOID .)
    QUESMARK        reduce using rule 182 (simple_type_name -> VOID .)
    RSPAREN         reduce using rule 182 (simple_type_name -> VOID .)
    RCPAREN         reduce using rule 182 (simple_type_name -> VOID .)
    COLON           reduce using rule 182 (simple_type_name -> VOID .)


state 34

    (183) simple_type_name -> STRING .

    IDENTIFIER      reduce using rule 183 (simple_type_name -> STRING .)
    DOUBLEBNOP      reduce using rule 183 (simple_type_name -> STRING .)
    MULTOP          reduce using rule 183 (simple_type_name -> STRING .)
    BANDOP          reduce using rule 183 (simple_type_name -> STRING .)
    LSPAREN         reduce using rule 183 (simple_type_name -> STRING .)
    SEMICOLON       reduce using rule 183 (simple_type_name -> STRING .)
    RTEMPLATE       reduce using rule 183 (simple_type_name -> STRING .)
    COMMA           reduce using rule 183 (simple_type_name -> STRING .)
    RPAREN          reduce using rule 183 (simple_type_name -> STRING .)
    LPAREN          reduce using rule 183 (simple_type_name -> STRING .)
    EQUAL           reduce using rule 183 (simple_type_name -> STRING .)
    MULTEQOP        reduce using rule 183 (simple_type_name -> STRING .)
    DIVEQOP         reduce using rule 183 (simple_type_name -> STRING .)
    MODEQOP         reduce using rule 183 (simple_type_name -> STRING .)
    PLUSEQOP        reduce using rule 183 (simple_type_name -> STRING .)
    MINUSEQOP       reduce using rule 183 (simple_type_name -> STRING .)
    LSHIFTEQOP      reduce using rule 183 (simple_type_name -> STRING .)
    RSHIFTEQOP      reduce using rule 183 (simple_type_name -> STRING .)
    BANDEQOP        reduce using rule 183 (simple_type_name -> STRING .)
    BOREQOP         reduce using rule 183 (simple_type_name -> STRING .)
    DOTSTAR         reduce using rule 183 (simple_type_name -> STRING .)
    ARROWSTAR       reduce using rule 183 (simple_type_name -> STRING .)
    DIVOP           reduce using rule 183 (simple_type_name -> STRING .)
    MODOP           reduce using rule 183 (simple_type_name -> STRING .)
    PLUSOP          reduce using rule 183 (simple_type_name -> STRING .)
    MINUSOP         reduce using rule 183 (simple_type_name -> STRING .)
    LSHIFT          reduce using rule 183 (simple_type_name -> STRING .)
    RSHIFT          reduce using rule 183 (simple_type_name -> STRING .)
    LTCOMP          reduce using rule 183 (simple_type_name -> STRING .)
    GTCOMP          reduce using rule 183 (simple_type_name -> STRING .)
    LTECOMP         reduce using rule 183 (simple_type_name -> STRING .)
    GTECOMP         reduce using rule 183 (simple_type_name -> STRING .)
    EQCOMP          reduce using rule 183 (simple_type_name -> STRING .)
    NEQCOMP         reduce using rule 183 (simple_type_name -> STRING .)
    XOROP           reduce using rule 183 (simple_type_name -> STRING .)
    OROP            reduce using rule 183 (simple_type_name -> STRING .)
    ANDOP           reduce using rule 183 (simple_type_name -> STRING .)
    QUESMARK        reduce using rule 183 (simple_type_name -> STRING .)
    RSPAREN         reduce using rule 183 (simple_type_name -> STRING .)
    RCPAREN         reduce using rule 183 (simple_type_name -> STRING .)
    COLON           reduce using rule 183 (simple_type_name -> STRING .)


state 35

    (184) simple_type_name -> AUTO .

    IDENTIFIER      reduce using rule 184 (simple_type_name -> AUTO .)
    DOUBLEBNOP      reduce using rule 184 (simple_type_name -> AUTO .)
    MULTOP          reduce using rule 184 (simple_type_name -> AUTO .)
    BANDOP          reduce using rule 184 (simple_type_name -> AUTO .)
    LSPAREN         reduce using rule 184 (simple_type_name -> AUTO .)
    SEMICOLON       reduce using rule 184 (simple_type_name -> AUTO .)
    RTEMPLATE       reduce using rule 184 (simple_type_name -> AUTO .)
    COMMA           reduce using rule 184 (simple_type_name -> AUTO .)
    RPAREN          reduce using rule 184 (simple_type_name -> AUTO .)
    LPAREN          reduce using rule 184 (simple_type_name -> AUTO .)
    EQUAL           reduce using rule 184 (simple_type_name -> AUTO .)
    MULTEQOP        reduce using rule 184 (simple_type_name -> AUTO .)
    DIVEQOP         reduce using rule 184 (simple_type_name -> AUTO .)
    MODEQOP         reduce using rule 184 (simple_type_name -> AUTO .)
    PLUSEQOP        reduce using rule 184 (simple_type_name -> AUTO .)
    MINUSEQOP       reduce using rule 184 (simple_type_name -> AUTO .)
    LSHIFTEQOP      reduce using rule 184 (simple_type_name -> AUTO .)
    RSHIFTEQOP      reduce using rule 184 (simple_type_name -> AUTO .)
    BANDEQOP        reduce using rule 184 (simple_type_name -> AUTO .)
    BOREQOP         reduce using rule 184 (simple_type_name -> AUTO .)
    DOTSTAR         reduce using rule 184 (simple_type_name -> AUTO .)
    ARROWSTAR       reduce using rule 184 (simple_type_name -> AUTO .)
    DIVOP           reduce using rule 184 (simple_type_name -> AUTO .)
    MODOP           reduce using rule 184 (simple_type_name -> AUTO .)
    PLUSOP          reduce using rule 184 (simple_type_name -> AUTO .)
    MINUSOP         reduce using rule 184 (simple_type_name -> AUTO .)
    LSHIFT          reduce using rule 184 (simple_type_name -> AUTO .)
    RSHIFT          reduce using rule 184 (simple_type_name -> AUTO .)
    LTCOMP          reduce using rule 184 (simple_type_name -> AUTO .)
    GTCOMP          reduce using rule 184 (simple_type_name -> AUTO .)
    LTECOMP         reduce using rule 184 (simple_type_name -> AUTO .)
    GTECOMP         reduce using rule 184 (simple_type_name -> AUTO .)
    EQCOMP          reduce using rule 184 (simple_type_name -> AUTO .)
    NEQCOMP         reduce using rule 184 (simple_type_name -> AUTO .)
    XOROP           reduce using rule 184 (simple_type_name -> AUTO .)
    OROP            reduce using rule 184 (simple_type_name -> AUTO .)
    ANDOP           reduce using rule 184 (simple_type_name -> AUTO .)
    QUESMARK        reduce using rule 184 (simple_type_name -> AUTO .)
    RSPAREN         reduce using rule 184 (simple_type_name -> AUTO .)
    RCPAREN         reduce using rule 184 (simple_type_name -> AUTO .)
    COLON           reduce using rule 184 (simple_type_name -> AUTO .)


state 36

    (187) complex_type_specifier -> TYPE . IDENTIFIER
    (188) complex_type_specifier -> TYPE . IDENTIFIER template_class_name

    IDENTIFIER      shift and go to state 62


state 37

    (201) class_key -> CLASS .

    IDENTIFIER      reduce using rule 201 (class_key -> CLASS .)


state 38

    (202) class_key -> STRUCT .

    IDENTIFIER      reduce using rule 202 (class_key -> STRUCT .)


state 39

    (6) program -> control_line translation_unit .

    $end            reduce using rule 6 (program -> control_line translation_unit .)


state 40

    (1) control_line -> control_line control_line_stmt .

    HASHTAG         reduce using rule 1 (control_line -> control_line control_line_stmt .)
    CONST           reduce using rule 1 (control_line -> control_line control_line_stmt .)
    ASM             reduce using rule 1 (control_line -> control_line control_line_stmt .)
    TEMPLATE        reduce using rule 1 (control_line -> control_line control_line_stmt .)
    TYPEDEF         reduce using rule 1 (control_line -> control_line control_line_stmt .)
    CHAR            reduce using rule 1 (control_line -> control_line control_line_stmt .)
    SHORT           reduce using rule 1 (control_line -> control_line control_line_stmt .)
    INT             reduce using rule 1 (control_line -> control_line control_line_stmt .)
    LONG            reduce using rule 1 (control_line -> control_line control_line_stmt .)
    SIGNED          reduce using rule 1 (control_line -> control_line control_line_stmt .)
    UNSIGNED        reduce using rule 1 (control_line -> control_line control_line_stmt .)
    FLOAT           reduce using rule 1 (control_line -> control_line control_line_stmt .)
    DOUBLE          reduce using rule 1 (control_line -> control_line control_line_stmt .)
    VOID            reduce using rule 1 (control_line -> control_line control_line_stmt .)
    STRING          reduce using rule 1 (control_line -> control_line control_line_stmt .)
    AUTO            reduce using rule 1 (control_line -> control_line control_line_stmt .)
    TYPE            reduce using rule 1 (control_line -> control_line control_line_stmt .)
    CLASS           reduce using rule 1 (control_line -> control_line control_line_stmt .)
    STRUCT          reduce using rule 1 (control_line -> control_line control_line_stmt .)


state 41

    (9) declaration_seq -> declaration_seq declaration .

    CONST           reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    ASM             reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    TEMPLATE        reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    TYPEDEF         reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    CHAR            reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    SHORT           reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    INT             reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    LONG            reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    SIGNED          reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    UNSIGNED        reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    FLOAT           reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    DOUBLE          reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    VOID            reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    STRING          reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    AUTO            reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    TYPE            reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    CLASS           reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    STRUCT          reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    $end            reduce using rule 9 (declaration_seq -> declaration_seq declaration .)


state 42

    (4) control_line_stmt -> include_control LTCOMP . STRING_L GTCOMP

    STRING_L        shift and go to state 63


state 43

    (5) control_line_stmt -> include_control STRING_L .

    HASHTAG         reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    CONST           reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    ASM             reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    TEMPLATE        reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    TYPEDEF         reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    CHAR            reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    SHORT           reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    INT             reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    LONG            reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    SIGNED          reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    UNSIGNED        reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    FLOAT           reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    DOUBLE          reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    VOID            reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    STRING          reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    AUTO            reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    TYPE            reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    CLASS           reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    STRUCT          reduce using rule 5 (control_line_stmt -> include_control STRING_L .)


state 44

    (3) include_control -> HASHTAG INCLUDE .

    LTCOMP          reduce using rule 3 (include_control -> HASHTAG INCLUDE .)
    STRING_L        reduce using rule 3 (include_control -> HASHTAG INCLUDE .)


state 45

    (265) declaration -> type_specifier_ declarator_list . SEMICOLON
    (276) declarator_list -> declarator_list . COMMA init_declarator

    SEMICOLON       shift and go to state 64
    COMMA           shift and go to state 65


state 46

    (225) function_definition -> type_specifier_ declarator . LPAREN argument_declaration_list RPAREN fct_body
    (226) function_definition -> type_specifier_ declarator . LPAREN RPAREN fct_body
    (227) function_decl -> type_specifier_ declarator . LPAREN argument_declaration_list RPAREN
    (228) function_decl -> type_specifier_ declarator . LPAREN RPAREN
    (117) declarator -> declarator . LSPAREN constant_expression RSPAREN
    (118) declarator -> declarator . LSPAREN RSPAREN
    (277) init_declarator -> declarator . initializer
    (278) init_declarator -> declarator .
    (279) initializer -> . EQUAL assignment_expression
    (280) initializer -> . EQUAL LCPAREN initializer_list RCPAREN
    (281) initializer -> . EQUAL LCPAREN initializer_list COMMA RCPAREN
    (282) initializer -> . LPAREN expression_list RPAREN

    LPAREN          shift and go to state 66
    LSPAREN         shift and go to state 67
    SEMICOLON       reduce using rule 278 (init_declarator -> declarator .)
    COMMA           reduce using rule 278 (init_declarator -> declarator .)
    EQUAL           shift and go to state 69

    initializer                    shift and go to state 68

state 47

    (275) declarator_list -> init_declarator .

    SEMICOLON       reduce using rule 275 (declarator_list -> init_declarator .)
    COMMA           reduce using rule 275 (declarator_list -> init_declarator .)


state 48

    (115) declarator -> name .

    LPAREN          reduce using rule 115 (declarator -> name .)
    LSPAREN         reduce using rule 115 (declarator -> name .)
    EQUAL           reduce using rule 115 (declarator -> name .)
    SEMICOLON       reduce using rule 115 (declarator -> name .)
    COMMA           reduce using rule 115 (declarator -> name .)
    RTEMPLATE       reduce using rule 115 (declarator -> name .)
    RPAREN          reduce using rule 115 (declarator -> name .)


state 49

    (116) declarator -> unary2_operator . declarator
    (115) declarator -> . name
    (116) declarator -> . unary2_operator declarator
    (117) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (118) declarator -> . declarator LSPAREN RSPAREN
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP

    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53

    unary2_operator                shift and go to state 49
    declarator                     shift and go to state 70
    name                           shift and go to state 48

state 50

    (125) name -> IDENTIFIER .

    LPAREN          reduce using rule 125 (name -> IDENTIFIER .)
    LSPAREN         reduce using rule 125 (name -> IDENTIFIER .)
    EQUAL           reduce using rule 125 (name -> IDENTIFIER .)
    SEMICOLON       reduce using rule 125 (name -> IDENTIFIER .)
    COMMA           reduce using rule 125 (name -> IDENTIFIER .)
    DOT             reduce using rule 125 (name -> IDENTIFIER .)
    ARROW           reduce using rule 125 (name -> IDENTIFIER .)
    DPLUSOP         reduce using rule 125 (name -> IDENTIFIER .)
    DMINUSOP        reduce using rule 125 (name -> IDENTIFIER .)
    LTEMPLATE       reduce using rule 125 (name -> IDENTIFIER .)
    MULTEQOP        reduce using rule 125 (name -> IDENTIFIER .)
    DIVEQOP         reduce using rule 125 (name -> IDENTIFIER .)
    MODEQOP         reduce using rule 125 (name -> IDENTIFIER .)
    PLUSEQOP        reduce using rule 125 (name -> IDENTIFIER .)
    MINUSEQOP       reduce using rule 125 (name -> IDENTIFIER .)
    LSHIFTEQOP      reduce using rule 125 (name -> IDENTIFIER .)
    RSHIFTEQOP      reduce using rule 125 (name -> IDENTIFIER .)
    BANDEQOP        reduce using rule 125 (name -> IDENTIFIER .)
    BOREQOP         reduce using rule 125 (name -> IDENTIFIER .)
    DOTSTAR         reduce using rule 125 (name -> IDENTIFIER .)
    ARROWSTAR       reduce using rule 125 (name -> IDENTIFIER .)
    MULTOP          reduce using rule 125 (name -> IDENTIFIER .)
    DIVOP           reduce using rule 125 (name -> IDENTIFIER .)
    MODOP           reduce using rule 125 (name -> IDENTIFIER .)
    PLUSOP          reduce using rule 125 (name -> IDENTIFIER .)
    MINUSOP         reduce using rule 125 (name -> IDENTIFIER .)
    LSHIFT          reduce using rule 125 (name -> IDENTIFIER .)
    RSHIFT          reduce using rule 125 (name -> IDENTIFIER .)
    LTCOMP          reduce using rule 125 (name -> IDENTIFIER .)
    GTCOMP          reduce using rule 125 (name -> IDENTIFIER .)
    LTECOMP         reduce using rule 125 (name -> IDENTIFIER .)
    GTECOMP         reduce using rule 125 (name -> IDENTIFIER .)
    EQCOMP          reduce using rule 125 (name -> IDENTIFIER .)
    NEQCOMP         reduce using rule 125 (name -> IDENTIFIER .)
    BANDOP          reduce using rule 125 (name -> IDENTIFIER .)
    XOROP           reduce using rule 125 (name -> IDENTIFIER .)
    OROP            reduce using rule 125 (name -> IDENTIFIER .)
    ANDOP           reduce using rule 125 (name -> IDENTIFIER .)
    QUESMARK        reduce using rule 125 (name -> IDENTIFIER .)
    RPAREN          reduce using rule 125 (name -> IDENTIFIER .)
    RSPAREN         reduce using rule 125 (name -> IDENTIFIER .)
    RTEMPLATE       reduce using rule 125 (name -> IDENTIFIER .)
    RCPAREN         reduce using rule 125 (name -> IDENTIFIER .)
    COLON           reduce using rule 125 (name -> IDENTIFIER .)


state 51

    (126) name -> DOUBLEBNOP . IDENTIFIER

    IDENTIFIER      shift and go to state 71


state 52

    (89) unary2_operator -> MULTOP .

    IDENTIFIER      reduce using rule 89 (unary2_operator -> MULTOP .)
    DOUBLEBNOP      reduce using rule 89 (unary2_operator -> MULTOP .)
    MULTOP          reduce using rule 89 (unary2_operator -> MULTOP .)
    BANDOP          reduce using rule 89 (unary2_operator -> MULTOP .)
    LSPAREN         reduce using rule 89 (unary2_operator -> MULTOP .)
    LPAREN          reduce using rule 89 (unary2_operator -> MULTOP .)
    DPLUSOP         reduce using rule 89 (unary2_operator -> MULTOP .)
    DMINUSOP        reduce using rule 89 (unary2_operator -> MULTOP .)
    SIZEOF          reduce using rule 89 (unary2_operator -> MULTOP .)
    PLUSOP          reduce using rule 89 (unary2_operator -> MULTOP .)
    MINUSOP         reduce using rule 89 (unary2_operator -> MULTOP .)
    NOTSYM          reduce using rule 89 (unary2_operator -> MULTOP .)
    BNOP            reduce using rule 89 (unary2_operator -> MULTOP .)
    NEW             reduce using rule 89 (unary2_operator -> MULTOP .)
    DELETE          reduce using rule 89 (unary2_operator -> MULTOP .)
    THIS            reduce using rule 89 (unary2_operator -> MULTOP .)
    STRING_L        reduce using rule 89 (unary2_operator -> MULTOP .)
    NUMBER          reduce using rule 89 (unary2_operator -> MULTOP .)
    SCHAR           reduce using rule 89 (unary2_operator -> MULTOP .)
    RTEMPLATE       reduce using rule 89 (unary2_operator -> MULTOP .)
    COMMA           reduce using rule 89 (unary2_operator -> MULTOP .)
    RPAREN          reduce using rule 89 (unary2_operator -> MULTOP .)


state 53

    (90) unary2_operator -> BANDOP .

    IDENTIFIER      reduce using rule 90 (unary2_operator -> BANDOP .)
    DOUBLEBNOP      reduce using rule 90 (unary2_operator -> BANDOP .)
    MULTOP          reduce using rule 90 (unary2_operator -> BANDOP .)
    BANDOP          reduce using rule 90 (unary2_operator -> BANDOP .)
    LSPAREN         reduce using rule 90 (unary2_operator -> BANDOP .)
    LPAREN          reduce using rule 90 (unary2_operator -> BANDOP .)
    DPLUSOP         reduce using rule 90 (unary2_operator -> BANDOP .)
    DMINUSOP        reduce using rule 90 (unary2_operator -> BANDOP .)
    SIZEOF          reduce using rule 90 (unary2_operator -> BANDOP .)
    PLUSOP          reduce using rule 90 (unary2_operator -> BANDOP .)
    MINUSOP         reduce using rule 90 (unary2_operator -> BANDOP .)
    NOTSYM          reduce using rule 90 (unary2_operator -> BANDOP .)
    BNOP            reduce using rule 90 (unary2_operator -> BANDOP .)
    NEW             reduce using rule 90 (unary2_operator -> BANDOP .)
    DELETE          reduce using rule 90 (unary2_operator -> BANDOP .)
    THIS            reduce using rule 90 (unary2_operator -> BANDOP .)
    STRING_L        reduce using rule 90 (unary2_operator -> BANDOP .)
    NUMBER          reduce using rule 90 (unary2_operator -> BANDOP .)
    SCHAR           reduce using rule 90 (unary2_operator -> BANDOP .)
    RTEMPLATE       reduce using rule 90 (unary2_operator -> BANDOP .)
    COMMA           reduce using rule 90 (unary2_operator -> BANDOP .)
    RPAREN          reduce using rule 90 (unary2_operator -> BANDOP .)


state 54

    (269) declaration -> class_define_specifier SEMICOLON .

    CONST           reduce using rule 269 (declaration -> class_define_specifier SEMICOLON .)
    ASM             reduce using rule 269 (declaration -> class_define_specifier SEMICOLON .)
    TEMPLATE        reduce using rule 269 (declaration -> class_define_specifier SEMICOLON .)
    TYPEDEF         reduce using rule 269 (declaration -> class_define_specifier SEMICOLON .)
    CHAR            reduce using rule 269 (declaration -> class_define_specifier SEMICOLON .)
    SHORT           reduce using rule 269 (declaration -> class_define_specifier SEMICOLON .)
    INT             reduce using rule 269 (declaration -> class_define_specifier SEMICOLON .)
    LONG            reduce using rule 269 (declaration -> class_define_specifier SEMICOLON .)
    SIGNED          reduce using rule 269 (declaration -> class_define_specifier SEMICOLON .)
    UNSIGNED        reduce using rule 269 (declaration -> class_define_specifier SEMICOLON .)
    FLOAT           reduce using rule 269 (declaration -> class_define_specifier SEMICOLON .)
    DOUBLE          reduce using rule 269 (declaration -> class_define_specifier SEMICOLON .)
    VOID            reduce using rule 269 (declaration -> class_define_specifier SEMICOLON .)
    STRING          reduce using rule 269 (declaration -> class_define_specifier SEMICOLON .)
    AUTO            reduce using rule 269 (declaration -> class_define_specifier SEMICOLON .)
    TYPE            reduce using rule 269 (declaration -> class_define_specifier SEMICOLON .)
    CLASS           reduce using rule 269 (declaration -> class_define_specifier SEMICOLON .)
    STRUCT          reduce using rule 269 (declaration -> class_define_specifier SEMICOLON .)
    $end            reduce using rule 269 (declaration -> class_define_specifier SEMICOLON .)
    RCPAREN         reduce using rule 269 (declaration -> class_define_specifier SEMICOLON .)
    IDENTIFIER      reduce using rule 269 (declaration -> class_define_specifier SEMICOLON .)
    CASE            reduce using rule 269 (declaration -> class_define_specifier SEMICOLON .)
    DEFAULT         reduce using rule 269 (declaration -> class_define_specifier SEMICOLON .)
    SEMICOLON       reduce using rule 269 (declaration -> class_define_specifier SEMICOLON .)
    LCPAREN         reduce using rule 269 (declaration -> class_define_specifier SEMICOLON .)
    IF              reduce using rule 269 (declaration -> class_define_specifier SEMICOLON .)
    SWITCH          reduce using rule 269 (declaration -> class_define_specifier SEMICOLON .)
    WHILE           reduce using rule 269 (declaration -> class_define_specifier SEMICOLON .)
    DO              reduce using rule 269 (declaration -> class_define_specifier SEMICOLON .)
    FOR             reduce using rule 269 (declaration -> class_define_specifier SEMICOLON .)
    BREAK           reduce using rule 269 (declaration -> class_define_specifier SEMICOLON .)
    CONTINUE        reduce using rule 269 (declaration -> class_define_specifier SEMICOLON .)
    RETURN          reduce using rule 269 (declaration -> class_define_specifier SEMICOLON .)
    GOTO            reduce using rule 269 (declaration -> class_define_specifier SEMICOLON .)
    TRY             reduce using rule 269 (declaration -> class_define_specifier SEMICOLON .)
    THROW           reduce using rule 269 (declaration -> class_define_specifier SEMICOLON .)
    DPLUSOP         reduce using rule 269 (declaration -> class_define_specifier SEMICOLON .)
    DMINUSOP        reduce using rule 269 (declaration -> class_define_specifier SEMICOLON .)
    SIZEOF          reduce using rule 269 (declaration -> class_define_specifier SEMICOLON .)
    PLUSOP          reduce using rule 269 (declaration -> class_define_specifier SEMICOLON .)
    MINUSOP         reduce using rule 269 (declaration -> class_define_specifier SEMICOLON .)
    NOTSYM          reduce using rule 269 (declaration -> class_define_specifier SEMICOLON .)
    BNOP            reduce using rule 269 (declaration -> class_define_specifier SEMICOLON .)
    MULTOP          reduce using rule 269 (declaration -> class_define_specifier SEMICOLON .)
    BANDOP          reduce using rule 269 (declaration -> class_define_specifier SEMICOLON .)
    NEW             reduce using rule 269 (declaration -> class_define_specifier SEMICOLON .)
    DELETE          reduce using rule 269 (declaration -> class_define_specifier SEMICOLON .)
    THIS            reduce using rule 269 (declaration -> class_define_specifier SEMICOLON .)
    LPAREN          reduce using rule 269 (declaration -> class_define_specifier SEMICOLON .)
    DOUBLEBNOP      reduce using rule 269 (declaration -> class_define_specifier SEMICOLON .)
    STRING_L        reduce using rule 269 (declaration -> class_define_specifier SEMICOLON .)
    NUMBER          reduce using rule 269 (declaration -> class_define_specifier SEMICOLON .)
    SCHAR           reduce using rule 269 (declaration -> class_define_specifier SEMICOLON .)
    ELSE            reduce using rule 269 (declaration -> class_define_specifier SEMICOLON .)


state 55

    (168) type_specifier_ -> CONST type_specifier .

    IDENTIFIER      reduce using rule 168 (type_specifier_ -> CONST type_specifier .)
    DOUBLEBNOP      reduce using rule 168 (type_specifier_ -> CONST type_specifier .)
    MULTOP          reduce using rule 168 (type_specifier_ -> CONST type_specifier .)
    BANDOP          reduce using rule 168 (type_specifier_ -> CONST type_specifier .)
    LSPAREN         reduce using rule 168 (type_specifier_ -> CONST type_specifier .)
    SEMICOLON       reduce using rule 168 (type_specifier_ -> CONST type_specifier .)
    RTEMPLATE       reduce using rule 168 (type_specifier_ -> CONST type_specifier .)
    COMMA           reduce using rule 168 (type_specifier_ -> CONST type_specifier .)
    RPAREN          reduce using rule 168 (type_specifier_ -> CONST type_specifier .)
    LPAREN          reduce using rule 168 (type_specifier_ -> CONST type_specifier .)
    EQUAL           reduce using rule 168 (type_specifier_ -> CONST type_specifier .)
    MULTEQOP        reduce using rule 168 (type_specifier_ -> CONST type_specifier .)
    DIVEQOP         reduce using rule 168 (type_specifier_ -> CONST type_specifier .)
    MODEQOP         reduce using rule 168 (type_specifier_ -> CONST type_specifier .)
    PLUSEQOP        reduce using rule 168 (type_specifier_ -> CONST type_specifier .)
    MINUSEQOP       reduce using rule 168 (type_specifier_ -> CONST type_specifier .)
    LSHIFTEQOP      reduce using rule 168 (type_specifier_ -> CONST type_specifier .)
    RSHIFTEQOP      reduce using rule 168 (type_specifier_ -> CONST type_specifier .)
    BANDEQOP        reduce using rule 168 (type_specifier_ -> CONST type_specifier .)
    BOREQOP         reduce using rule 168 (type_specifier_ -> CONST type_specifier .)
    DOTSTAR         reduce using rule 168 (type_specifier_ -> CONST type_specifier .)
    ARROWSTAR       reduce using rule 168 (type_specifier_ -> CONST type_specifier .)
    DIVOP           reduce using rule 168 (type_specifier_ -> CONST type_specifier .)
    MODOP           reduce using rule 168 (type_specifier_ -> CONST type_specifier .)
    PLUSOP          reduce using rule 168 (type_specifier_ -> CONST type_specifier .)
    MINUSOP         reduce using rule 168 (type_specifier_ -> CONST type_specifier .)
    LSHIFT          reduce using rule 168 (type_specifier_ -> CONST type_specifier .)
    RSHIFT          reduce using rule 168 (type_specifier_ -> CONST type_specifier .)
    LTCOMP          reduce using rule 168 (type_specifier_ -> CONST type_specifier .)
    GTCOMP          reduce using rule 168 (type_specifier_ -> CONST type_specifier .)
    LTECOMP         reduce using rule 168 (type_specifier_ -> CONST type_specifier .)
    GTECOMP         reduce using rule 168 (type_specifier_ -> CONST type_specifier .)
    EQCOMP          reduce using rule 168 (type_specifier_ -> CONST type_specifier .)
    NEQCOMP         reduce using rule 168 (type_specifier_ -> CONST type_specifier .)
    XOROP           reduce using rule 168 (type_specifier_ -> CONST type_specifier .)
    OROP            reduce using rule 168 (type_specifier_ -> CONST type_specifier .)
    ANDOP           reduce using rule 168 (type_specifier_ -> CONST type_specifier .)
    QUESMARK        reduce using rule 168 (type_specifier_ -> CONST type_specifier .)
    RSPAREN         reduce using rule 168 (type_specifier_ -> CONST type_specifier .)
    RCPAREN         reduce using rule 168 (type_specifier_ -> CONST type_specifier .)
    COLON           reduce using rule 168 (type_specifier_ -> CONST type_specifier .)


state 56

    (185) complex_type_specifier -> class_key . IDENTIFIER
    (186) complex_type_specifier -> class_key . IDENTIFIER template_class_name

    IDENTIFIER      shift and go to state 72


state 57

    (287) asm_declaration -> ASM LPAREN . STRING_L RPAREN SEMICOLON

    STRING_L        shift and go to state 73


state 58

    (203) class_define_specifier -> class_head LCPAREN . member_list RCPAREN
    (204) class_define_specifier -> class_head LCPAREN . RCPAREN
    (205) member_list -> . member_access_list
    (206) member_list -> . access_list
    (207) member_list -> . member_list access_list
    (213) member_access_list -> . member_declaration member_access_list
    (214) member_access_list -> . member_declaration
    (211) access_list -> . access_specifier COLON member_access_list
    (212) access_list -> . access_specifier COLON
    (215) member_declaration -> . type_specifier_ member_declarator_list SEMICOLON
    (216) member_declaration -> . member_declarator_list SEMICOLON
    (217) member_declaration -> . type_specifier_ SEMICOLON
    (218) member_declaration -> . SEMICOLON
    (219) member_declaration -> . function_definition
    (220) member_declaration -> . class_define_specifier SEMICOLON
    (208) access_specifier -> . PRIVATE
    (209) access_specifier -> . PROTECTED
    (210) access_specifier -> . PUBLIC
    (168) type_specifier_ -> . CONST type_specifier
    (169) type_specifier_ -> . type_specifier
    (221) member_declarator_list -> . member_declarator
    (222) member_declarator_list -> . member_declarator_list COMMA member_declarator
    (225) function_definition -> . type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body
    (226) function_definition -> . type_specifier_ declarator LPAREN RPAREN fct_body
    (203) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (204) class_define_specifier -> . class_head LCPAREN RCPAREN
    (172) type_specifier -> . simple_type_name
    (173) type_specifier -> . complex_type_specifier
    (223) member_declarator -> . declarator pure_specifier
    (224) member_declarator -> . declarator
    (190) class_head -> . class_key IDENTIFIER base_spec
    (191) class_head -> . class_key IDENTIFIER
    (174) simple_type_name -> . CHAR
    (175) simple_type_name -> . SHORT
    (176) simple_type_name -> . INT
    (177) simple_type_name -> . LONG
    (178) simple_type_name -> . SIGNED
    (179) simple_type_name -> . UNSIGNED
    (180) simple_type_name -> . FLOAT
    (181) simple_type_name -> . DOUBLE
    (182) simple_type_name -> . VOID
    (183) simple_type_name -> . STRING
    (184) simple_type_name -> . AUTO
    (185) complex_type_specifier -> . class_key IDENTIFIER
    (186) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (187) complex_type_specifier -> . TYPE IDENTIFIER
    (188) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (115) declarator -> . name
    (116) declarator -> . unary2_operator declarator
    (117) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (118) declarator -> . declarator LSPAREN RSPAREN
    (201) class_key -> . CLASS
    (202) class_key -> . STRUCT
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP

    RCPAREN         shift and go to state 75
    SEMICOLON       shift and go to state 82
    PRIVATE         shift and go to state 85
    PROTECTED       shift and go to state 86
    PUBLIC          shift and go to state 87
    CONST           shift and go to state 16
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53

    class_head                     shift and go to state 19
    member_list                    shift and go to state 74
    member_access_list             shift and go to state 76
    access_list                    shift and go to state 77
    member_declaration             shift and go to state 78
    access_specifier               shift and go to state 79
    type_specifier_                shift and go to state 80
    member_declarator_list         shift and go to state 81
    function_definition            shift and go to state 83
    class_define_specifier         shift and go to state 84
    type_specifier                 shift and go to state 17
    member_declarator              shift and go to state 88
    declarator                     shift and go to state 89
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 24
    name                           shift and go to state 48
    unary2_operator                shift and go to state 49

state 59

    (272) template_declaration -> TEMPLATE LTEMPLATE . template_argument_list RTEMPLATE declaration
    (273) template_argument_list -> . argument_declaration
    (274) template_argument_list -> . template_argument_list COMMA argument_declaration
    (121) argument_declaration -> . type_specifier_ declarator
    (122) argument_declaration -> . type_specifier_ declarator EQUAL expression
    (123) argument_declaration -> . type_specifier_ abstract_declarator
    (124) argument_declaration -> . type_specifier_
    (168) type_specifier_ -> . CONST type_specifier
    (169) type_specifier_ -> . type_specifier
    (172) type_specifier -> . simple_type_name
    (173) type_specifier -> . complex_type_specifier
    (174) simple_type_name -> . CHAR
    (175) simple_type_name -> . SHORT
    (176) simple_type_name -> . INT
    (177) simple_type_name -> . LONG
    (178) simple_type_name -> . SIGNED
    (179) simple_type_name -> . UNSIGNED
    (180) simple_type_name -> . FLOAT
    (181) simple_type_name -> . DOUBLE
    (182) simple_type_name -> . VOID
    (183) simple_type_name -> . STRING
    (184) simple_type_name -> . AUTO
    (185) complex_type_specifier -> . class_key IDENTIFIER
    (186) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (187) complex_type_specifier -> . TYPE IDENTIFIER
    (188) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (201) class_key -> . CLASS
    (202) class_key -> . STRUCT

    CONST           shift and go to state 16
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38

    template_argument_list         shift and go to state 90
    argument_declaration           shift and go to state 91
    type_specifier_                shift and go to state 92
    type_specifier                 shift and go to state 17
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 56

state 60

    (170) typedef_declarator -> TYPEDEF type_specifier_ . abstract_declarator IDENTIFIER SEMICOLON
    (171) typedef_declarator -> TYPEDEF type_specifier_ . IDENTIFIER SEMICOLON
    (109) abstract_declarator -> . unary2_operator
    (110) abstract_declarator -> . unary2_operator abstract_declarator
    (111) abstract_declarator -> . LSPAREN constant_expression RSPAREN
    (112) abstract_declarator -> . abstract_declarator LSPAREN constant_expression RSPAREN
    (113) abstract_declarator -> . LSPAREN RSPAREN
    (114) abstract_declarator -> . abstract_declarator LSPAREN RSPAREN
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP

    IDENTIFIER      shift and go to state 94
    LSPAREN         shift and go to state 96
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53

    abstract_declarator            shift and go to state 93
    unary2_operator                shift and go to state 95

state 61

    (190) class_head -> class_key IDENTIFIER . base_spec
    (191) class_head -> class_key IDENTIFIER .
    (185) complex_type_specifier -> class_key IDENTIFIER .
    (186) complex_type_specifier -> class_key IDENTIFIER . template_class_name
    (192) base_spec -> . COLON base_list
    (163) template_class_name -> . LTEMPLATE template_arg_list RTEMPLATE

    LCPAREN         reduce using rule 191 (class_head -> class_key IDENTIFIER .)
    IDENTIFIER      reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER .)
    DOUBLEBNOP      reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER .)
    MULTOP          reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER .)
    BANDOP          reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER .)
    SEMICOLON       reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER .)
    COLON           shift and go to state 99
    LTEMPLATE       shift and go to state 100

    base_spec                      shift and go to state 97
    template_class_name            shift and go to state 98

state 62

    (187) complex_type_specifier -> TYPE IDENTIFIER .
    (188) complex_type_specifier -> TYPE IDENTIFIER . template_class_name
    (163) template_class_name -> . LTEMPLATE template_arg_list RTEMPLATE

    IDENTIFIER      reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER .)
    DOUBLEBNOP      reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER .)
    MULTOP          reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER .)
    BANDOP          reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER .)
    LSPAREN         reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER .)
    SEMICOLON       reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER .)
    RTEMPLATE       reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER .)
    COMMA           reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER .)
    RPAREN          reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER .)
    LPAREN          reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER .)
    EQUAL           reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER .)
    MULTEQOP        reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER .)
    DIVEQOP         reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER .)
    MODEQOP         reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER .)
    PLUSEQOP        reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER .)
    MINUSEQOP       reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER .)
    LSHIFTEQOP      reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER .)
    RSHIFTEQOP      reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER .)
    BANDEQOP        reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER .)
    BOREQOP         reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER .)
    DOTSTAR         reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER .)
    ARROWSTAR       reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER .)
    DIVOP           reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER .)
    MODOP           reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER .)
    PLUSOP          reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER .)
    MINUSOP         reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER .)
    LSHIFT          reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER .)
    RSHIFT          reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER .)
    LTCOMP          reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER .)
    GTCOMP          reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER .)
    LTECOMP         reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER .)
    GTECOMP         reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER .)
    EQCOMP          reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER .)
    NEQCOMP         reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER .)
    XOROP           reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER .)
    OROP            reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER .)
    ANDOP           reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER .)
    QUESMARK        reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER .)
    RSPAREN         reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER .)
    RCPAREN         reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER .)
    COLON           reduce using rule 187 (complex_type_specifier -> TYPE IDENTIFIER .)
    LTEMPLATE       shift and go to state 100

    template_class_name            shift and go to state 101

state 63

    (4) control_line_stmt -> include_control LTCOMP STRING_L . GTCOMP

    GTCOMP          shift and go to state 102


state 64

    (265) declaration -> type_specifier_ declarator_list SEMICOLON .

    CONST           reduce using rule 265 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    ASM             reduce using rule 265 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    TEMPLATE        reduce using rule 265 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    TYPEDEF         reduce using rule 265 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    CHAR            reduce using rule 265 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    SHORT           reduce using rule 265 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    INT             reduce using rule 265 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    LONG            reduce using rule 265 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    SIGNED          reduce using rule 265 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    UNSIGNED        reduce using rule 265 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    FLOAT           reduce using rule 265 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    DOUBLE          reduce using rule 265 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    VOID            reduce using rule 265 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    STRING          reduce using rule 265 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    AUTO            reduce using rule 265 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    TYPE            reduce using rule 265 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    CLASS           reduce using rule 265 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    STRUCT          reduce using rule 265 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    $end            reduce using rule 265 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    RCPAREN         reduce using rule 265 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    IDENTIFIER      reduce using rule 265 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    CASE            reduce using rule 265 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    DEFAULT         reduce using rule 265 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    SEMICOLON       reduce using rule 265 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    LCPAREN         reduce using rule 265 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    IF              reduce using rule 265 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    SWITCH          reduce using rule 265 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    WHILE           reduce using rule 265 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    DO              reduce using rule 265 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    FOR             reduce using rule 265 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    BREAK           reduce using rule 265 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    CONTINUE        reduce using rule 265 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    RETURN          reduce using rule 265 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    GOTO            reduce using rule 265 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    TRY             reduce using rule 265 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    THROW           reduce using rule 265 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    DPLUSOP         reduce using rule 265 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    DMINUSOP        reduce using rule 265 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    SIZEOF          reduce using rule 265 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    PLUSOP          reduce using rule 265 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    MINUSOP         reduce using rule 265 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    NOTSYM          reduce using rule 265 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    BNOP            reduce using rule 265 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    MULTOP          reduce using rule 265 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    BANDOP          reduce using rule 265 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    NEW             reduce using rule 265 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    DELETE          reduce using rule 265 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    THIS            reduce using rule 265 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    LPAREN          reduce using rule 265 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    DOUBLEBNOP      reduce using rule 265 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    STRING_L        reduce using rule 265 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    NUMBER          reduce using rule 265 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    SCHAR           reduce using rule 265 (declaration -> type_specifier_ declarator_list SEMICOLON .)
    ELSE            reduce using rule 265 (declaration -> type_specifier_ declarator_list SEMICOLON .)


state 65

    (276) declarator_list -> declarator_list COMMA . init_declarator
    (277) init_declarator -> . declarator initializer
    (278) init_declarator -> . declarator
    (115) declarator -> . name
    (116) declarator -> . unary2_operator declarator
    (117) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (118) declarator -> . declarator LSPAREN RSPAREN
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP

    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53

    init_declarator                shift and go to state 103
    declarator                     shift and go to state 104
    name                           shift and go to state 48
    unary2_operator                shift and go to state 49

state 66

    (225) function_definition -> type_specifier_ declarator LPAREN . argument_declaration_list RPAREN fct_body
    (226) function_definition -> type_specifier_ declarator LPAREN . RPAREN fct_body
    (227) function_decl -> type_specifier_ declarator LPAREN . argument_declaration_list RPAREN
    (228) function_decl -> type_specifier_ declarator LPAREN . RPAREN
    (282) initializer -> LPAREN . expression_list RPAREN
    (119) argument_declaration_list -> . argument_declaration
    (120) argument_declaration_list -> . argument_declaration COMMA argument_declaration_list
    (288) expression_list -> . assignment_expression
    (289) expression_list -> . expression_list COMMA assignment_expression
    (121) argument_declaration -> . type_specifier_ declarator
    (122) argument_declaration -> . type_specifier_ declarator EQUAL expression
    (123) argument_declaration -> . type_specifier_ abstract_declarator
    (124) argument_declaration -> . type_specifier_
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (168) type_specifier_ -> . CONST type_specifier
    (169) type_specifier_ -> . type_specifier
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (172) type_specifier -> . simple_type_name
    (173) type_specifier -> . complex_type_specifier
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (174) simple_type_name -> . CHAR
    (175) simple_type_name -> . SHORT
    (176) simple_type_name -> . INT
    (177) simple_type_name -> . LONG
    (178) simple_type_name -> . SIGNED
    (179) simple_type_name -> . UNSIGNED
    (180) simple_type_name -> . FLOAT
    (181) simple_type_name -> . DOUBLE
    (182) simple_type_name -> . VOID
    (183) simple_type_name -> . STRING
    (184) simple_type_name -> . AUTO
    (185) complex_type_specifier -> . class_key IDENTIFIER
    (186) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (187) complex_type_specifier -> . TYPE IDENTIFIER
    (188) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (201) class_key -> . CLASS
    (202) class_key -> . STRUCT
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 107
    CONST           shift and go to state 16
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    THIS            shift and go to state 134
    LPAREN          shift and go to state 105
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    type_specifier_                shift and go to state 92
    argument_declaration_list      shift and go to state 106
    expression_list                shift and go to state 108
    argument_declaration           shift and go to state 109
    assignment_expression          shift and go to state 110
    conditional_expression         shift and go to state 111
    unary_expression               shift and go to state 112
    type_specifier                 shift and go to state 17
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    cast_expression                shift and go to state 118
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    logical_AND_expression         shift and go to state 123
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    class_key                      shift and go to state 56
    inclusive_OR_expression        shift and go to state 132
    literal                        shift and go to state 133
    exclusive_OR_expression        shift and go to state 135
    AND_expression                 shift and go to state 139
    equality_expression            shift and go to state 140
    relational_expression          shift and go to state 141
    shift_expression               shift and go to state 142
    additive_expression            shift and go to state 143
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145

state 67

    (117) declarator -> declarator LSPAREN . constant_expression RSPAREN
    (118) declarator -> declarator LSPAREN . RSPAREN
    (12) constant_expression -> . conditional_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR

    RSPAREN         shift and go to state 147
    LPAREN          shift and go to state 150
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    THIS            shift and go to state 134
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    constant_expression            shift and go to state 146
    conditional_expression         shift and go to state 148
    logical_OR_expression          shift and go to state 113
    logical_AND_expression         shift and go to state 123
    inclusive_OR_expression        shift and go to state 132
    exclusive_OR_expression        shift and go to state 135
    AND_expression                 shift and go to state 139
    equality_expression            shift and go to state 140
    relational_expression          shift and go to state 141
    shift_expression               shift and go to state 142
    additive_expression            shift and go to state 143
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145
    cast_expression                shift and go to state 118
    unary_expression               shift and go to state 149
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    literal                        shift and go to state 133

state 68

    (277) init_declarator -> declarator initializer .

    SEMICOLON       reduce using rule 277 (init_declarator -> declarator initializer .)
    COMMA           reduce using rule 277 (init_declarator -> declarator initializer .)


state 69

    (279) initializer -> EQUAL . assignment_expression
    (280) initializer -> EQUAL . LCPAREN initializer_list RCPAREN
    (281) initializer -> EQUAL . LCPAREN initializer_list COMMA RCPAREN
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LCPAREN         shift and go to state 152
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    THIS            shift and go to state 134
    LPAREN          shift and go to state 105
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    assignment_expression          shift and go to state 151
    conditional_expression         shift and go to state 111
    unary_expression               shift and go to state 112
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    cast_expression                shift and go to state 118
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    logical_AND_expression         shift and go to state 123
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    inclusive_OR_expression        shift and go to state 132
    literal                        shift and go to state 133
    exclusive_OR_expression        shift and go to state 135
    AND_expression                 shift and go to state 139
    equality_expression            shift and go to state 140
    relational_expression          shift and go to state 141
    shift_expression               shift and go to state 142
    additive_expression            shift and go to state 143
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145

state 70

    (116) declarator -> unary2_operator declarator .
    (117) declarator -> declarator . LSPAREN constant_expression RSPAREN
    (118) declarator -> declarator . LSPAREN RSPAREN

    LPAREN          reduce using rule 116 (declarator -> unary2_operator declarator .)
    LSPAREN         reduce using rule 116 (declarator -> unary2_operator declarator .)
    EQUAL           reduce using rule 116 (declarator -> unary2_operator declarator .)
    SEMICOLON       reduce using rule 116 (declarator -> unary2_operator declarator .)
    COMMA           reduce using rule 116 (declarator -> unary2_operator declarator .)
    RTEMPLATE       reduce using rule 116 (declarator -> unary2_operator declarator .)
    RPAREN          reduce using rule 116 (declarator -> unary2_operator declarator .)

  ! LSPAREN         [ shift and go to state 67 ]


state 71

    (126) name -> DOUBLEBNOP IDENTIFIER .

    LPAREN          reduce using rule 126 (name -> DOUBLEBNOP IDENTIFIER .)
    LSPAREN         reduce using rule 126 (name -> DOUBLEBNOP IDENTIFIER .)
    EQUAL           reduce using rule 126 (name -> DOUBLEBNOP IDENTIFIER .)
    SEMICOLON       reduce using rule 126 (name -> DOUBLEBNOP IDENTIFIER .)
    COMMA           reduce using rule 126 (name -> DOUBLEBNOP IDENTIFIER .)
    DOT             reduce using rule 126 (name -> DOUBLEBNOP IDENTIFIER .)
    ARROW           reduce using rule 126 (name -> DOUBLEBNOP IDENTIFIER .)
    DPLUSOP         reduce using rule 126 (name -> DOUBLEBNOP IDENTIFIER .)
    DMINUSOP        reduce using rule 126 (name -> DOUBLEBNOP IDENTIFIER .)
    LTEMPLATE       reduce using rule 126 (name -> DOUBLEBNOP IDENTIFIER .)
    MULTEQOP        reduce using rule 126 (name -> DOUBLEBNOP IDENTIFIER .)
    DIVEQOP         reduce using rule 126 (name -> DOUBLEBNOP IDENTIFIER .)
    MODEQOP         reduce using rule 126 (name -> DOUBLEBNOP IDENTIFIER .)
    PLUSEQOP        reduce using rule 126 (name -> DOUBLEBNOP IDENTIFIER .)
    MINUSEQOP       reduce using rule 126 (name -> DOUBLEBNOP IDENTIFIER .)
    LSHIFTEQOP      reduce using rule 126 (name -> DOUBLEBNOP IDENTIFIER .)
    RSHIFTEQOP      reduce using rule 126 (name -> DOUBLEBNOP IDENTIFIER .)
    BANDEQOP        reduce using rule 126 (name -> DOUBLEBNOP IDENTIFIER .)
    BOREQOP         reduce using rule 126 (name -> DOUBLEBNOP IDENTIFIER .)
    DOTSTAR         reduce using rule 126 (name -> DOUBLEBNOP IDENTIFIER .)
    ARROWSTAR       reduce using rule 126 (name -> DOUBLEBNOP IDENTIFIER .)
    MULTOP          reduce using rule 126 (name -> DOUBLEBNOP IDENTIFIER .)
    DIVOP           reduce using rule 126 (name -> DOUBLEBNOP IDENTIFIER .)
    MODOP           reduce using rule 126 (name -> DOUBLEBNOP IDENTIFIER .)
    PLUSOP          reduce using rule 126 (name -> DOUBLEBNOP IDENTIFIER .)
    MINUSOP         reduce using rule 126 (name -> DOUBLEBNOP IDENTIFIER .)
    LSHIFT          reduce using rule 126 (name -> DOUBLEBNOP IDENTIFIER .)
    RSHIFT          reduce using rule 126 (name -> DOUBLEBNOP IDENTIFIER .)
    LTCOMP          reduce using rule 126 (name -> DOUBLEBNOP IDENTIFIER .)
    GTCOMP          reduce using rule 126 (name -> DOUBLEBNOP IDENTIFIER .)
    LTECOMP         reduce using rule 126 (name -> DOUBLEBNOP IDENTIFIER .)
    GTECOMP         reduce using rule 126 (name -> DOUBLEBNOP IDENTIFIER .)
    EQCOMP          reduce using rule 126 (name -> DOUBLEBNOP IDENTIFIER .)
    NEQCOMP         reduce using rule 126 (name -> DOUBLEBNOP IDENTIFIER .)
    BANDOP          reduce using rule 126 (name -> DOUBLEBNOP IDENTIFIER .)
    XOROP           reduce using rule 126 (name -> DOUBLEBNOP IDENTIFIER .)
    OROP            reduce using rule 126 (name -> DOUBLEBNOP IDENTIFIER .)
    ANDOP           reduce using rule 126 (name -> DOUBLEBNOP IDENTIFIER .)
    QUESMARK        reduce using rule 126 (name -> DOUBLEBNOP IDENTIFIER .)
    RPAREN          reduce using rule 126 (name -> DOUBLEBNOP IDENTIFIER .)
    RSPAREN         reduce using rule 126 (name -> DOUBLEBNOP IDENTIFIER .)
    RTEMPLATE       reduce using rule 126 (name -> DOUBLEBNOP IDENTIFIER .)
    RCPAREN         reduce using rule 126 (name -> DOUBLEBNOP IDENTIFIER .)
    COLON           reduce using rule 126 (name -> DOUBLEBNOP IDENTIFIER .)


state 72

    (185) complex_type_specifier -> class_key IDENTIFIER .
    (186) complex_type_specifier -> class_key IDENTIFIER . template_class_name
    (163) template_class_name -> . LTEMPLATE template_arg_list RTEMPLATE

    IDENTIFIER      reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER .)
    DOUBLEBNOP      reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER .)
    MULTOP          reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER .)
    BANDOP          reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER .)
    LSPAREN         reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER .)
    SEMICOLON       reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER .)
    RTEMPLATE       reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER .)
    COMMA           reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER .)
    RPAREN          reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER .)
    LPAREN          reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER .)
    EQUAL           reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER .)
    MULTEQOP        reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER .)
    DIVEQOP         reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER .)
    MODEQOP         reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER .)
    PLUSEQOP        reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER .)
    MINUSEQOP       reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER .)
    LSHIFTEQOP      reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER .)
    RSHIFTEQOP      reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER .)
    BANDEQOP        reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER .)
    BOREQOP         reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER .)
    DOTSTAR         reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER .)
    ARROWSTAR       reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER .)
    DIVOP           reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER .)
    MODOP           reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER .)
    PLUSOP          reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER .)
    MINUSOP         reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER .)
    LSHIFT          reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER .)
    RSHIFT          reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER .)
    LTCOMP          reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER .)
    GTCOMP          reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER .)
    LTECOMP         reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER .)
    GTECOMP         reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER .)
    EQCOMP          reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER .)
    NEQCOMP         reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER .)
    XOROP           reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER .)
    OROP            reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER .)
    ANDOP           reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER .)
    QUESMARK        reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER .)
    RSPAREN         reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER .)
    RCPAREN         reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER .)
    COLON           reduce using rule 185 (complex_type_specifier -> class_key IDENTIFIER .)
    LTEMPLATE       shift and go to state 100

    template_class_name            shift and go to state 98

state 73

    (287) asm_declaration -> ASM LPAREN STRING_L . RPAREN SEMICOLON

    RPAREN          shift and go to state 153


state 74

    (203) class_define_specifier -> class_head LCPAREN member_list . RCPAREN
    (207) member_list -> member_list . access_list
    (211) access_list -> . access_specifier COLON member_access_list
    (212) access_list -> . access_specifier COLON
    (208) access_specifier -> . PRIVATE
    (209) access_specifier -> . PROTECTED
    (210) access_specifier -> . PUBLIC

    RCPAREN         shift and go to state 154
    PRIVATE         shift and go to state 85
    PROTECTED       shift and go to state 86
    PUBLIC          shift and go to state 87

    access_list                    shift and go to state 155
    access_specifier               shift and go to state 79

state 75

    (204) class_define_specifier -> class_head LCPAREN RCPAREN .

    SEMICOLON       reduce using rule 204 (class_define_specifier -> class_head LCPAREN RCPAREN .)


state 76

    (205) member_list -> member_access_list .

    RCPAREN         reduce using rule 205 (member_list -> member_access_list .)
    PRIVATE         reduce using rule 205 (member_list -> member_access_list .)
    PROTECTED       reduce using rule 205 (member_list -> member_access_list .)
    PUBLIC          reduce using rule 205 (member_list -> member_access_list .)


state 77

    (206) member_list -> access_list .

    RCPAREN         reduce using rule 206 (member_list -> access_list .)
    PRIVATE         reduce using rule 206 (member_list -> access_list .)
    PROTECTED       reduce using rule 206 (member_list -> access_list .)
    PUBLIC          reduce using rule 206 (member_list -> access_list .)


state 78

    (213) member_access_list -> member_declaration . member_access_list
    (214) member_access_list -> member_declaration .
    (213) member_access_list -> . member_declaration member_access_list
    (214) member_access_list -> . member_declaration
    (215) member_declaration -> . type_specifier_ member_declarator_list SEMICOLON
    (216) member_declaration -> . member_declarator_list SEMICOLON
    (217) member_declaration -> . type_specifier_ SEMICOLON
    (218) member_declaration -> . SEMICOLON
    (219) member_declaration -> . function_definition
    (220) member_declaration -> . class_define_specifier SEMICOLON
    (168) type_specifier_ -> . CONST type_specifier
    (169) type_specifier_ -> . type_specifier
    (221) member_declarator_list -> . member_declarator
    (222) member_declarator_list -> . member_declarator_list COMMA member_declarator
    (225) function_definition -> . type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body
    (226) function_definition -> . type_specifier_ declarator LPAREN RPAREN fct_body
    (203) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (204) class_define_specifier -> . class_head LCPAREN RCPAREN
    (172) type_specifier -> . simple_type_name
    (173) type_specifier -> . complex_type_specifier
    (223) member_declarator -> . declarator pure_specifier
    (224) member_declarator -> . declarator
    (190) class_head -> . class_key IDENTIFIER base_spec
    (191) class_head -> . class_key IDENTIFIER
    (174) simple_type_name -> . CHAR
    (175) simple_type_name -> . SHORT
    (176) simple_type_name -> . INT
    (177) simple_type_name -> . LONG
    (178) simple_type_name -> . SIGNED
    (179) simple_type_name -> . UNSIGNED
    (180) simple_type_name -> . FLOAT
    (181) simple_type_name -> . DOUBLE
    (182) simple_type_name -> . VOID
    (183) simple_type_name -> . STRING
    (184) simple_type_name -> . AUTO
    (185) complex_type_specifier -> . class_key IDENTIFIER
    (186) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (187) complex_type_specifier -> . TYPE IDENTIFIER
    (188) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (115) declarator -> . name
    (116) declarator -> . unary2_operator declarator
    (117) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (118) declarator -> . declarator LSPAREN RSPAREN
    (201) class_key -> . CLASS
    (202) class_key -> . STRUCT
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP

    RCPAREN         reduce using rule 214 (member_access_list -> member_declaration .)
    PRIVATE         reduce using rule 214 (member_access_list -> member_declaration .)
    PROTECTED       reduce using rule 214 (member_access_list -> member_declaration .)
    PUBLIC          reduce using rule 214 (member_access_list -> member_declaration .)
    SEMICOLON       shift and go to state 82
    CONST           shift and go to state 16
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53

    member_declaration             shift and go to state 78
    member_access_list             shift and go to state 156
    type_specifier_                shift and go to state 80
    member_declarator_list         shift and go to state 81
    function_definition            shift and go to state 83
    class_define_specifier         shift and go to state 84
    type_specifier                 shift and go to state 17
    member_declarator              shift and go to state 88
    declarator                     shift and go to state 89
    class_head                     shift and go to state 19
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 24
    name                           shift and go to state 48
    unary2_operator                shift and go to state 49

state 79

    (211) access_list -> access_specifier . COLON member_access_list
    (212) access_list -> access_specifier . COLON

    COLON           shift and go to state 157


state 80

    (215) member_declaration -> type_specifier_ . member_declarator_list SEMICOLON
    (217) member_declaration -> type_specifier_ . SEMICOLON
    (225) function_definition -> type_specifier_ . declarator LPAREN argument_declaration_list RPAREN fct_body
    (226) function_definition -> type_specifier_ . declarator LPAREN RPAREN fct_body
    (221) member_declarator_list -> . member_declarator
    (222) member_declarator_list -> . member_declarator_list COMMA member_declarator
    (115) declarator -> . name
    (116) declarator -> . unary2_operator declarator
    (117) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (118) declarator -> . declarator LSPAREN RSPAREN
    (223) member_declarator -> . declarator pure_specifier
    (224) member_declarator -> . declarator
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP

    SEMICOLON       shift and go to state 159
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53

    member_declarator_list         shift and go to state 158
    declarator                     shift and go to state 160
    member_declarator              shift and go to state 88
    name                           shift and go to state 48
    unary2_operator                shift and go to state 49

state 81

    (216) member_declaration -> member_declarator_list . SEMICOLON
    (222) member_declarator_list -> member_declarator_list . COMMA member_declarator

    SEMICOLON       shift and go to state 161
    COMMA           shift and go to state 162


state 82

    (218) member_declaration -> SEMICOLON .

    SEMICOLON       reduce using rule 218 (member_declaration -> SEMICOLON .)
    CONST           reduce using rule 218 (member_declaration -> SEMICOLON .)
    CHAR            reduce using rule 218 (member_declaration -> SEMICOLON .)
    SHORT           reduce using rule 218 (member_declaration -> SEMICOLON .)
    INT             reduce using rule 218 (member_declaration -> SEMICOLON .)
    LONG            reduce using rule 218 (member_declaration -> SEMICOLON .)
    SIGNED          reduce using rule 218 (member_declaration -> SEMICOLON .)
    UNSIGNED        reduce using rule 218 (member_declaration -> SEMICOLON .)
    FLOAT           reduce using rule 218 (member_declaration -> SEMICOLON .)
    DOUBLE          reduce using rule 218 (member_declaration -> SEMICOLON .)
    VOID            reduce using rule 218 (member_declaration -> SEMICOLON .)
    STRING          reduce using rule 218 (member_declaration -> SEMICOLON .)
    AUTO            reduce using rule 218 (member_declaration -> SEMICOLON .)
    TYPE            reduce using rule 218 (member_declaration -> SEMICOLON .)
    CLASS           reduce using rule 218 (member_declaration -> SEMICOLON .)
    STRUCT          reduce using rule 218 (member_declaration -> SEMICOLON .)
    IDENTIFIER      reduce using rule 218 (member_declaration -> SEMICOLON .)
    DOUBLEBNOP      reduce using rule 218 (member_declaration -> SEMICOLON .)
    MULTOP          reduce using rule 218 (member_declaration -> SEMICOLON .)
    BANDOP          reduce using rule 218 (member_declaration -> SEMICOLON .)
    RCPAREN         reduce using rule 218 (member_declaration -> SEMICOLON .)
    PRIVATE         reduce using rule 218 (member_declaration -> SEMICOLON .)
    PROTECTED       reduce using rule 218 (member_declaration -> SEMICOLON .)
    PUBLIC          reduce using rule 218 (member_declaration -> SEMICOLON .)


state 83

    (219) member_declaration -> function_definition .

    SEMICOLON       reduce using rule 219 (member_declaration -> function_definition .)
    CONST           reduce using rule 219 (member_declaration -> function_definition .)
    CHAR            reduce using rule 219 (member_declaration -> function_definition .)
    SHORT           reduce using rule 219 (member_declaration -> function_definition .)
    INT             reduce using rule 219 (member_declaration -> function_definition .)
    LONG            reduce using rule 219 (member_declaration -> function_definition .)
    SIGNED          reduce using rule 219 (member_declaration -> function_definition .)
    UNSIGNED        reduce using rule 219 (member_declaration -> function_definition .)
    FLOAT           reduce using rule 219 (member_declaration -> function_definition .)
    DOUBLE          reduce using rule 219 (member_declaration -> function_definition .)
    VOID            reduce using rule 219 (member_declaration -> function_definition .)
    STRING          reduce using rule 219 (member_declaration -> function_definition .)
    AUTO            reduce using rule 219 (member_declaration -> function_definition .)
    TYPE            reduce using rule 219 (member_declaration -> function_definition .)
    CLASS           reduce using rule 219 (member_declaration -> function_definition .)
    STRUCT          reduce using rule 219 (member_declaration -> function_definition .)
    IDENTIFIER      reduce using rule 219 (member_declaration -> function_definition .)
    DOUBLEBNOP      reduce using rule 219 (member_declaration -> function_definition .)
    MULTOP          reduce using rule 219 (member_declaration -> function_definition .)
    BANDOP          reduce using rule 219 (member_declaration -> function_definition .)
    RCPAREN         reduce using rule 219 (member_declaration -> function_definition .)
    PRIVATE         reduce using rule 219 (member_declaration -> function_definition .)
    PROTECTED       reduce using rule 219 (member_declaration -> function_definition .)
    PUBLIC          reduce using rule 219 (member_declaration -> function_definition .)


state 84

    (220) member_declaration -> class_define_specifier . SEMICOLON

    SEMICOLON       shift and go to state 163


state 85

    (208) access_specifier -> PRIVATE .

    COLON           reduce using rule 208 (access_specifier -> PRIVATE .)
    CLASS           reduce using rule 208 (access_specifier -> PRIVATE .)
    STRUCT          reduce using rule 208 (access_specifier -> PRIVATE .)


state 86

    (209) access_specifier -> PROTECTED .

    COLON           reduce using rule 209 (access_specifier -> PROTECTED .)
    CLASS           reduce using rule 209 (access_specifier -> PROTECTED .)
    STRUCT          reduce using rule 209 (access_specifier -> PROTECTED .)


state 87

    (210) access_specifier -> PUBLIC .

    COLON           reduce using rule 210 (access_specifier -> PUBLIC .)
    CLASS           reduce using rule 210 (access_specifier -> PUBLIC .)
    STRUCT          reduce using rule 210 (access_specifier -> PUBLIC .)


state 88

    (221) member_declarator_list -> member_declarator .

    SEMICOLON       reduce using rule 221 (member_declarator_list -> member_declarator .)
    COMMA           reduce using rule 221 (member_declarator_list -> member_declarator .)


state 89

    (223) member_declarator -> declarator . pure_specifier
    (224) member_declarator -> declarator .
    (117) declarator -> declarator . LSPAREN constant_expression RSPAREN
    (118) declarator -> declarator . LSPAREN RSPAREN
    (189) pure_specifier -> . EQUAL NUMBER

    SEMICOLON       reduce using rule 224 (member_declarator -> declarator .)
    COMMA           reduce using rule 224 (member_declarator -> declarator .)
    LSPAREN         shift and go to state 67
    EQUAL           shift and go to state 165

    pure_specifier                 shift and go to state 164

state 90

    (272) template_declaration -> TEMPLATE LTEMPLATE template_argument_list . RTEMPLATE declaration
    (274) template_argument_list -> template_argument_list . COMMA argument_declaration

    RTEMPLATE       shift and go to state 166
    COMMA           shift and go to state 167


state 91

    (273) template_argument_list -> argument_declaration .

    RTEMPLATE       reduce using rule 273 (template_argument_list -> argument_declaration .)
    COMMA           reduce using rule 273 (template_argument_list -> argument_declaration .)


state 92

    (121) argument_declaration -> type_specifier_ . declarator
    (122) argument_declaration -> type_specifier_ . declarator EQUAL expression
    (123) argument_declaration -> type_specifier_ . abstract_declarator
    (124) argument_declaration -> type_specifier_ .
    (115) declarator -> . name
    (116) declarator -> . unary2_operator declarator
    (117) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (118) declarator -> . declarator LSPAREN RSPAREN
    (109) abstract_declarator -> . unary2_operator
    (110) abstract_declarator -> . unary2_operator abstract_declarator
    (111) abstract_declarator -> . LSPAREN constant_expression RSPAREN
    (112) abstract_declarator -> . abstract_declarator LSPAREN constant_expression RSPAREN
    (113) abstract_declarator -> . LSPAREN RSPAREN
    (114) abstract_declarator -> . abstract_declarator LSPAREN RSPAREN
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP

    RTEMPLATE       reduce using rule 124 (argument_declaration -> type_specifier_ .)
    COMMA           reduce using rule 124 (argument_declaration -> type_specifier_ .)
    RPAREN          reduce using rule 124 (argument_declaration -> type_specifier_ .)
    LSPAREN         shift and go to state 96
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53

    declarator                     shift and go to state 168
    abstract_declarator            shift and go to state 169
    name                           shift and go to state 48
    unary2_operator                shift and go to state 170

state 93

    (170) typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator . IDENTIFIER SEMICOLON
    (112) abstract_declarator -> abstract_declarator . LSPAREN constant_expression RSPAREN
    (114) abstract_declarator -> abstract_declarator . LSPAREN RSPAREN

    IDENTIFIER      shift and go to state 171
    LSPAREN         shift and go to state 172


state 94

    (171) typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 173


state 95

    (109) abstract_declarator -> unary2_operator .
    (110) abstract_declarator -> unary2_operator . abstract_declarator
    (109) abstract_declarator -> . unary2_operator
    (110) abstract_declarator -> . unary2_operator abstract_declarator
    (111) abstract_declarator -> . LSPAREN constant_expression RSPAREN
    (112) abstract_declarator -> . abstract_declarator LSPAREN constant_expression RSPAREN
    (113) abstract_declarator -> . LSPAREN RSPAREN
    (114) abstract_declarator -> . abstract_declarator LSPAREN RSPAREN
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP

    IDENTIFIER      reduce using rule 109 (abstract_declarator -> unary2_operator .)
    LSPAREN         reduce using rule 109 (abstract_declarator -> unary2_operator .)
    RTEMPLATE       reduce using rule 109 (abstract_declarator -> unary2_operator .)
    COMMA           reduce using rule 109 (abstract_declarator -> unary2_operator .)
    RPAREN          reduce using rule 109 (abstract_declarator -> unary2_operator .)
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53

  ! LSPAREN         [ shift and go to state 96 ]

    unary2_operator                shift and go to state 95
    abstract_declarator            shift and go to state 174

state 96

    (111) abstract_declarator -> LSPAREN . constant_expression RSPAREN
    (113) abstract_declarator -> LSPAREN . RSPAREN
    (12) constant_expression -> . conditional_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR

    RSPAREN         shift and go to state 176
    LPAREN          shift and go to state 150
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    THIS            shift and go to state 134
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    constant_expression            shift and go to state 175
    conditional_expression         shift and go to state 148
    logical_OR_expression          shift and go to state 113
    logical_AND_expression         shift and go to state 123
    inclusive_OR_expression        shift and go to state 132
    exclusive_OR_expression        shift and go to state 135
    AND_expression                 shift and go to state 139
    equality_expression            shift and go to state 140
    relational_expression          shift and go to state 141
    shift_expression               shift and go to state 142
    additive_expression            shift and go to state 143
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145
    cast_expression                shift and go to state 118
    unary_expression               shift and go to state 149
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    literal                        shift and go to state 133

state 97

    (190) class_head -> class_key IDENTIFIER base_spec .

    LCPAREN         reduce using rule 190 (class_head -> class_key IDENTIFIER base_spec .)


state 98

    (186) complex_type_specifier -> class_key IDENTIFIER template_class_name .

    IDENTIFIER      reduce using rule 186 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    DOUBLEBNOP      reduce using rule 186 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    MULTOP          reduce using rule 186 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    BANDOP          reduce using rule 186 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    LSPAREN         reduce using rule 186 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    SEMICOLON       reduce using rule 186 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    RTEMPLATE       reduce using rule 186 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    COMMA           reduce using rule 186 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    RPAREN          reduce using rule 186 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    LPAREN          reduce using rule 186 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    EQUAL           reduce using rule 186 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    MULTEQOP        reduce using rule 186 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    DIVEQOP         reduce using rule 186 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    MODEQOP         reduce using rule 186 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    PLUSEQOP        reduce using rule 186 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    MINUSEQOP       reduce using rule 186 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    LSHIFTEQOP      reduce using rule 186 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    RSHIFTEQOP      reduce using rule 186 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    BANDEQOP        reduce using rule 186 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    BOREQOP         reduce using rule 186 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    DOTSTAR         reduce using rule 186 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    ARROWSTAR       reduce using rule 186 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    DIVOP           reduce using rule 186 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    MODOP           reduce using rule 186 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    PLUSOP          reduce using rule 186 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    MINUSOP         reduce using rule 186 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    LSHIFT          reduce using rule 186 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    RSHIFT          reduce using rule 186 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    LTCOMP          reduce using rule 186 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    GTCOMP          reduce using rule 186 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    LTECOMP         reduce using rule 186 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    GTECOMP         reduce using rule 186 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    EQCOMP          reduce using rule 186 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    NEQCOMP         reduce using rule 186 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    XOROP           reduce using rule 186 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    OROP            reduce using rule 186 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    ANDOP           reduce using rule 186 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    QUESMARK        reduce using rule 186 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    RSPAREN         reduce using rule 186 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    RCPAREN         reduce using rule 186 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)
    COLON           reduce using rule 186 (complex_type_specifier -> class_key IDENTIFIER template_class_name .)


state 99

    (192) base_spec -> COLON . base_list
    (193) base_list -> . base_specifier
    (194) base_list -> . base_list COMMA base_specifier
    (195) base_specifier -> . class_key IDENTIFIER
    (196) base_specifier -> . class_key IDENTIFIER template_class_name
    (197) base_specifier -> . IDENTIFIER
    (198) base_specifier -> . IDENTIFIER template_class_name
    (199) base_specifier -> . access_specifier class_key IDENTIFIER
    (200) base_specifier -> . access_specifier class_key IDENTIFIER template_class_name
    (201) class_key -> . CLASS
    (202) class_key -> . STRUCT
    (208) access_specifier -> . PRIVATE
    (209) access_specifier -> . PROTECTED
    (210) access_specifier -> . PUBLIC

    IDENTIFIER      shift and go to state 180
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38
    PRIVATE         shift and go to state 85
    PROTECTED       shift and go to state 86
    PUBLIC          shift and go to state 87

    base_list                      shift and go to state 177
    base_specifier                 shift and go to state 178
    class_key                      shift and go to state 179
    access_specifier               shift and go to state 181

state 100

    (163) template_class_name -> LTEMPLATE . template_arg_list RTEMPLATE
    (164) template_arg_list -> . type_name
    (165) template_arg_list -> . template_arg_list COMMA type_name
    (166) type_name -> . type_specifier_ abstract_declarator
    (167) type_name -> . type_specifier_
    (168) type_specifier_ -> . CONST type_specifier
    (169) type_specifier_ -> . type_specifier
    (172) type_specifier -> . simple_type_name
    (173) type_specifier -> . complex_type_specifier
    (174) simple_type_name -> . CHAR
    (175) simple_type_name -> . SHORT
    (176) simple_type_name -> . INT
    (177) simple_type_name -> . LONG
    (178) simple_type_name -> . SIGNED
    (179) simple_type_name -> . UNSIGNED
    (180) simple_type_name -> . FLOAT
    (181) simple_type_name -> . DOUBLE
    (182) simple_type_name -> . VOID
    (183) simple_type_name -> . STRING
    (184) simple_type_name -> . AUTO
    (185) complex_type_specifier -> . class_key IDENTIFIER
    (186) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (187) complex_type_specifier -> . TYPE IDENTIFIER
    (188) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (201) class_key -> . CLASS
    (202) class_key -> . STRUCT

    CONST           shift and go to state 16
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38

    template_arg_list              shift and go to state 182
    type_name                      shift and go to state 183
    type_specifier_                shift and go to state 184
    type_specifier                 shift and go to state 17
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 56

state 101

    (188) complex_type_specifier -> TYPE IDENTIFIER template_class_name .

    IDENTIFIER      reduce using rule 188 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    DOUBLEBNOP      reduce using rule 188 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    MULTOP          reduce using rule 188 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    BANDOP          reduce using rule 188 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    LSPAREN         reduce using rule 188 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    SEMICOLON       reduce using rule 188 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    RTEMPLATE       reduce using rule 188 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    COMMA           reduce using rule 188 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    RPAREN          reduce using rule 188 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    LPAREN          reduce using rule 188 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    EQUAL           reduce using rule 188 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    MULTEQOP        reduce using rule 188 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    DIVEQOP         reduce using rule 188 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    MODEQOP         reduce using rule 188 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    PLUSEQOP        reduce using rule 188 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    MINUSEQOP       reduce using rule 188 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    LSHIFTEQOP      reduce using rule 188 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    RSHIFTEQOP      reduce using rule 188 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    BANDEQOP        reduce using rule 188 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    BOREQOP         reduce using rule 188 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    DOTSTAR         reduce using rule 188 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    ARROWSTAR       reduce using rule 188 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    DIVOP           reduce using rule 188 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    MODOP           reduce using rule 188 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    PLUSOP          reduce using rule 188 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    MINUSOP         reduce using rule 188 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    LSHIFT          reduce using rule 188 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    RSHIFT          reduce using rule 188 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    LTCOMP          reduce using rule 188 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    GTCOMP          reduce using rule 188 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    LTECOMP         reduce using rule 188 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    GTECOMP         reduce using rule 188 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    EQCOMP          reduce using rule 188 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    NEQCOMP         reduce using rule 188 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    XOROP           reduce using rule 188 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    OROP            reduce using rule 188 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    ANDOP           reduce using rule 188 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    QUESMARK        reduce using rule 188 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    RSPAREN         reduce using rule 188 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    RCPAREN         reduce using rule 188 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)
    COLON           reduce using rule 188 (complex_type_specifier -> TYPE IDENTIFIER template_class_name .)


state 102

    (4) control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .

    HASHTAG         reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    CONST           reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    ASM             reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    TEMPLATE        reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    TYPEDEF         reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    CHAR            reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    SHORT           reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    INT             reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    LONG            reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    SIGNED          reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    UNSIGNED        reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    FLOAT           reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    DOUBLE          reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    VOID            reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    STRING          reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    AUTO            reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    TYPE            reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    CLASS           reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    STRUCT          reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)


state 103

    (276) declarator_list -> declarator_list COMMA init_declarator .

    SEMICOLON       reduce using rule 276 (declarator_list -> declarator_list COMMA init_declarator .)
    COMMA           reduce using rule 276 (declarator_list -> declarator_list COMMA init_declarator .)


state 104

    (277) init_declarator -> declarator . initializer
    (278) init_declarator -> declarator .
    (117) declarator -> declarator . LSPAREN constant_expression RSPAREN
    (118) declarator -> declarator . LSPAREN RSPAREN
    (279) initializer -> . EQUAL assignment_expression
    (280) initializer -> . EQUAL LCPAREN initializer_list RCPAREN
    (281) initializer -> . EQUAL LCPAREN initializer_list COMMA RCPAREN
    (282) initializer -> . LPAREN expression_list RPAREN

    SEMICOLON       reduce using rule 278 (init_declarator -> declarator .)
    COMMA           reduce using rule 278 (init_declarator -> declarator .)
    LSPAREN         shift and go to state 67
    EQUAL           shift and go to state 69
    LPAREN          shift and go to state 185

    initializer                    shift and go to state 68

state 105

    (103) primary_expression -> LPAREN . expression RPAREN
    (108) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (166) type_name -> . type_specifier_ abstract_declarator
    (167) type_name -> . type_specifier_
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (168) type_specifier_ -> . CONST type_specifier
    (169) type_specifier_ -> . type_specifier
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (172) type_specifier -> . simple_type_name
    (173) type_specifier -> . complex_type_specifier
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (174) simple_type_name -> . CHAR
    (175) simple_type_name -> . SHORT
    (176) simple_type_name -> . INT
    (177) simple_type_name -> . LONG
    (178) simple_type_name -> . SIGNED
    (179) simple_type_name -> . UNSIGNED
    (180) simple_type_name -> . FLOAT
    (181) simple_type_name -> . DOUBLE
    (182) simple_type_name -> . VOID
    (183) simple_type_name -> . STRING
    (184) simple_type_name -> . AUTO
    (185) complex_type_specifier -> . class_key IDENTIFIER
    (186) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (187) complex_type_specifier -> . TYPE IDENTIFIER
    (188) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (201) class_key -> . CLASS
    (202) class_key -> . STRUCT
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    THROW           shift and go to state 190
    CONST           shift and go to state 16
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    THIS            shift and go to state 134
    LPAREN          shift and go to state 105
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    expression                     shift and go to state 186
    type_name                      shift and go to state 187
    cast_expression                shift and go to state 118
    assignment_expression          shift and go to state 188
    throw_expression               shift and go to state 189
    type_specifier_                shift and go to state 184
    conditional_expression         shift and go to state 111
    unary_expression               shift and go to state 112
    type_specifier                 shift and go to state 17
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    logical_AND_expression         shift and go to state 123
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    class_key                      shift and go to state 56
    inclusive_OR_expression        shift and go to state 132
    literal                        shift and go to state 133
    exclusive_OR_expression        shift and go to state 135
    AND_expression                 shift and go to state 139
    equality_expression            shift and go to state 140
    relational_expression          shift and go to state 141
    shift_expression               shift and go to state 142
    additive_expression            shift and go to state 143
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145

state 106

    (225) function_definition -> type_specifier_ declarator LPAREN argument_declaration_list . RPAREN fct_body
    (227) function_decl -> type_specifier_ declarator LPAREN argument_declaration_list . RPAREN

    RPAREN          shift and go to state 191


state 107

    (226) function_definition -> type_specifier_ declarator LPAREN RPAREN . fct_body
    (228) function_decl -> type_specifier_ declarator LPAREN RPAREN .
    (229) fct_body -> . compound_statement
    (230) compound_statement -> . LCPAREN statement_list RCPAREN
    (231) compound_statement -> . LCPAREN RCPAREN

  ! shift/reduce conflict for LCPAREN resolved as shift
    CONST           reduce using rule 228 (function_decl -> type_specifier_ declarator LPAREN RPAREN .)
    ASM             reduce using rule 228 (function_decl -> type_specifier_ declarator LPAREN RPAREN .)
    TEMPLATE        reduce using rule 228 (function_decl -> type_specifier_ declarator LPAREN RPAREN .)
    TYPEDEF         reduce using rule 228 (function_decl -> type_specifier_ declarator LPAREN RPAREN .)
    CHAR            reduce using rule 228 (function_decl -> type_specifier_ declarator LPAREN RPAREN .)
    SHORT           reduce using rule 228 (function_decl -> type_specifier_ declarator LPAREN RPAREN .)
    INT             reduce using rule 228 (function_decl -> type_specifier_ declarator LPAREN RPAREN .)
    LONG            reduce using rule 228 (function_decl -> type_specifier_ declarator LPAREN RPAREN .)
    SIGNED          reduce using rule 228 (function_decl -> type_specifier_ declarator LPAREN RPAREN .)
    UNSIGNED        reduce using rule 228 (function_decl -> type_specifier_ declarator LPAREN RPAREN .)
    FLOAT           reduce using rule 228 (function_decl -> type_specifier_ declarator LPAREN RPAREN .)
    DOUBLE          reduce using rule 228 (function_decl -> type_specifier_ declarator LPAREN RPAREN .)
    VOID            reduce using rule 228 (function_decl -> type_specifier_ declarator LPAREN RPAREN .)
    STRING          reduce using rule 228 (function_decl -> type_specifier_ declarator LPAREN RPAREN .)
    AUTO            reduce using rule 228 (function_decl -> type_specifier_ declarator LPAREN RPAREN .)
    TYPE            reduce using rule 228 (function_decl -> type_specifier_ declarator LPAREN RPAREN .)
    CLASS           reduce using rule 228 (function_decl -> type_specifier_ declarator LPAREN RPAREN .)
    STRUCT          reduce using rule 228 (function_decl -> type_specifier_ declarator LPAREN RPAREN .)
    $end            reduce using rule 228 (function_decl -> type_specifier_ declarator LPAREN RPAREN .)
    RCPAREN         reduce using rule 228 (function_decl -> type_specifier_ declarator LPAREN RPAREN .)
    IDENTIFIER      reduce using rule 228 (function_decl -> type_specifier_ declarator LPAREN RPAREN .)
    CASE            reduce using rule 228 (function_decl -> type_specifier_ declarator LPAREN RPAREN .)
    DEFAULT         reduce using rule 228 (function_decl -> type_specifier_ declarator LPAREN RPAREN .)
    SEMICOLON       reduce using rule 228 (function_decl -> type_specifier_ declarator LPAREN RPAREN .)
    IF              reduce using rule 228 (function_decl -> type_specifier_ declarator LPAREN RPAREN .)
    SWITCH          reduce using rule 228 (function_decl -> type_specifier_ declarator LPAREN RPAREN .)
    WHILE           reduce using rule 228 (function_decl -> type_specifier_ declarator LPAREN RPAREN .)
    DO              reduce using rule 228 (function_decl -> type_specifier_ declarator LPAREN RPAREN .)
    FOR             reduce using rule 228 (function_decl -> type_specifier_ declarator LPAREN RPAREN .)
    BREAK           reduce using rule 228 (function_decl -> type_specifier_ declarator LPAREN RPAREN .)
    CONTINUE        reduce using rule 228 (function_decl -> type_specifier_ declarator LPAREN RPAREN .)
    RETURN          reduce using rule 228 (function_decl -> type_specifier_ declarator LPAREN RPAREN .)
    GOTO            reduce using rule 228 (function_decl -> type_specifier_ declarator LPAREN RPAREN .)
    TRY             reduce using rule 228 (function_decl -> type_specifier_ declarator LPAREN RPAREN .)
    THROW           reduce using rule 228 (function_decl -> type_specifier_ declarator LPAREN RPAREN .)
    DPLUSOP         reduce using rule 228 (function_decl -> type_specifier_ declarator LPAREN RPAREN .)
    DMINUSOP        reduce using rule 228 (function_decl -> type_specifier_ declarator LPAREN RPAREN .)
    SIZEOF          reduce using rule 228 (function_decl -> type_specifier_ declarator LPAREN RPAREN .)
    PLUSOP          reduce using rule 228 (function_decl -> type_specifier_ declarator LPAREN RPAREN .)
    MINUSOP         reduce using rule 228 (function_decl -> type_specifier_ declarator LPAREN RPAREN .)
    NOTSYM          reduce using rule 228 (function_decl -> type_specifier_ declarator LPAREN RPAREN .)
    BNOP            reduce using rule 228 (function_decl -> type_specifier_ declarator LPAREN RPAREN .)
    MULTOP          reduce using rule 228 (function_decl -> type_specifier_ declarator LPAREN RPAREN .)
    BANDOP          reduce using rule 228 (function_decl -> type_specifier_ declarator LPAREN RPAREN .)
    NEW             reduce using rule 228 (function_decl -> type_specifier_ declarator LPAREN RPAREN .)
    DELETE          reduce using rule 228 (function_decl -> type_specifier_ declarator LPAREN RPAREN .)
    THIS            reduce using rule 228 (function_decl -> type_specifier_ declarator LPAREN RPAREN .)
    LPAREN          reduce using rule 228 (function_decl -> type_specifier_ declarator LPAREN RPAREN .)
    DOUBLEBNOP      reduce using rule 228 (function_decl -> type_specifier_ declarator LPAREN RPAREN .)
    STRING_L        reduce using rule 228 (function_decl -> type_specifier_ declarator LPAREN RPAREN .)
    NUMBER          reduce using rule 228 (function_decl -> type_specifier_ declarator LPAREN RPAREN .)
    SCHAR           reduce using rule 228 (function_decl -> type_specifier_ declarator LPAREN RPAREN .)
    ELSE            reduce using rule 228 (function_decl -> type_specifier_ declarator LPAREN RPAREN .)
    LCPAREN         shift and go to state 194

  ! LCPAREN         [ reduce using rule 228 (function_decl -> type_specifier_ declarator LPAREN RPAREN .) ]

    fct_body                       shift and go to state 192
    compound_statement             shift and go to state 193

state 108

    (282) initializer -> LPAREN expression_list . RPAREN
    (289) expression_list -> expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 195
    COMMA           shift and go to state 196


state 109

    (119) argument_declaration_list -> argument_declaration .
    (120) argument_declaration_list -> argument_declaration . COMMA argument_declaration_list

    RPAREN          reduce using rule 119 (argument_declaration_list -> argument_declaration .)
    COMMA           shift and go to state 197


state 110

    (288) expression_list -> assignment_expression .

    RPAREN          reduce using rule 288 (expression_list -> assignment_expression .)
    COMMA           reduce using rule 288 (expression_list -> assignment_expression .)


state 111

    (51) assignment_expression -> conditional_expression .

    RPAREN          reduce using rule 51 (assignment_expression -> conditional_expression .)
    COMMA           reduce using rule 51 (assignment_expression -> conditional_expression .)
    SEMICOLON       reduce using rule 51 (assignment_expression -> conditional_expression .)
    RCPAREN         reduce using rule 51 (assignment_expression -> conditional_expression .)
    COLON           reduce using rule 51 (assignment_expression -> conditional_expression .)
    RSPAREN         reduce using rule 51 (assignment_expression -> conditional_expression .)
    RTEMPLATE       reduce using rule 51 (assignment_expression -> conditional_expression .)


state 112

    (52) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (107) cast_expression -> unary_expression .
    (53) assignment_operator -> . EQUAL
    (54) assignment_operator -> . MULTEQOP
    (55) assignment_operator -> . DIVEQOP
    (56) assignment_operator -> . MODEQOP
    (57) assignment_operator -> . PLUSEQOP
    (58) assignment_operator -> . MINUSEQOP
    (59) assignment_operator -> . LSHIFTEQOP
    (60) assignment_operator -> . RSHIFTEQOP
    (61) assignment_operator -> . BANDEQOP
    (62) assignment_operator -> . BOREQOP

    DOTSTAR         reduce using rule 107 (cast_expression -> unary_expression .)
    ARROWSTAR       reduce using rule 107 (cast_expression -> unary_expression .)
    MULTOP          reduce using rule 107 (cast_expression -> unary_expression .)
    DIVOP           reduce using rule 107 (cast_expression -> unary_expression .)
    MODOP           reduce using rule 107 (cast_expression -> unary_expression .)
    PLUSOP          reduce using rule 107 (cast_expression -> unary_expression .)
    MINUSOP         reduce using rule 107 (cast_expression -> unary_expression .)
    LSHIFT          reduce using rule 107 (cast_expression -> unary_expression .)
    RSHIFT          reduce using rule 107 (cast_expression -> unary_expression .)
    LTCOMP          reduce using rule 107 (cast_expression -> unary_expression .)
    GTCOMP          reduce using rule 107 (cast_expression -> unary_expression .)
    LTECOMP         reduce using rule 107 (cast_expression -> unary_expression .)
    GTECOMP         reduce using rule 107 (cast_expression -> unary_expression .)
    EQCOMP          reduce using rule 107 (cast_expression -> unary_expression .)
    NEQCOMP         reduce using rule 107 (cast_expression -> unary_expression .)
    BANDOP          reduce using rule 107 (cast_expression -> unary_expression .)
    XOROP           reduce using rule 107 (cast_expression -> unary_expression .)
    OROP            reduce using rule 107 (cast_expression -> unary_expression .)
    ANDOP           reduce using rule 107 (cast_expression -> unary_expression .)
    QUESMARK        reduce using rule 107 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 107 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 107 (cast_expression -> unary_expression .)
    SEMICOLON       reduce using rule 107 (cast_expression -> unary_expression .)
    RCPAREN         reduce using rule 107 (cast_expression -> unary_expression .)
    COLON           reduce using rule 107 (cast_expression -> unary_expression .)
    RSPAREN         reduce using rule 107 (cast_expression -> unary_expression .)
    RTEMPLATE       reduce using rule 107 (cast_expression -> unary_expression .)
    EQUAL           shift and go to state 199
    MULTEQOP        shift and go to state 200
    DIVEQOP         shift and go to state 201
    MODEQOP         shift and go to state 202
    PLUSEQOP        shift and go to state 203
    MINUSEQOP       shift and go to state 204
    LSHIFTEQOP      shift and go to state 205
    RSHIFTEQOP      shift and go to state 206
    BANDEQOP        shift and go to state 207
    BOREQOP         shift and go to state 208

    assignment_operator            shift and go to state 198

state 113

    (13) conditional_expression -> logical_OR_expression .
    (14) conditional_expression -> logical_OR_expression . QUESMARK expression COLON conditional_expression
    (16) logical_OR_expression -> logical_OR_expression . OROP logical_AND_expression

    RPAREN          reduce using rule 13 (conditional_expression -> logical_OR_expression .)
    COMMA           reduce using rule 13 (conditional_expression -> logical_OR_expression .)
    RSPAREN         reduce using rule 13 (conditional_expression -> logical_OR_expression .)
    SEMICOLON       reduce using rule 13 (conditional_expression -> logical_OR_expression .)
    RCPAREN         reduce using rule 13 (conditional_expression -> logical_OR_expression .)
    COLON           reduce using rule 13 (conditional_expression -> logical_OR_expression .)
    RTEMPLATE       reduce using rule 13 (conditional_expression -> logical_OR_expression .)
    QUESMARK        shift and go to state 209
    OROP            shift and go to state 210


state 114

    (63) unary_expression -> postfix_expression .
    (92) postfix_expression -> postfix_expression . LSPAREN expression RSPAREN
    (93) postfix_expression -> postfix_expression . LPAREN expression_list RPAREN
    (94) postfix_expression -> postfix_expression . template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> postfix_expression . LPAREN RPAREN
    (96) postfix_expression -> postfix_expression . DOT name
    (97) postfix_expression -> postfix_expression . ARROW name
    (98) postfix_expression -> postfix_expression . DPLUSOP
    (99) postfix_expression -> postfix_expression . DMINUSOP
    (163) template_class_name -> . LTEMPLATE template_arg_list RTEMPLATE

    EQUAL           reduce using rule 63 (unary_expression -> postfix_expression .)
    MULTEQOP        reduce using rule 63 (unary_expression -> postfix_expression .)
    DIVEQOP         reduce using rule 63 (unary_expression -> postfix_expression .)
    MODEQOP         reduce using rule 63 (unary_expression -> postfix_expression .)
    PLUSEQOP        reduce using rule 63 (unary_expression -> postfix_expression .)
    MINUSEQOP       reduce using rule 63 (unary_expression -> postfix_expression .)
    LSHIFTEQOP      reduce using rule 63 (unary_expression -> postfix_expression .)
    RSHIFTEQOP      reduce using rule 63 (unary_expression -> postfix_expression .)
    BANDEQOP        reduce using rule 63 (unary_expression -> postfix_expression .)
    BOREQOP         reduce using rule 63 (unary_expression -> postfix_expression .)
    DOTSTAR         reduce using rule 63 (unary_expression -> postfix_expression .)
    ARROWSTAR       reduce using rule 63 (unary_expression -> postfix_expression .)
    MULTOP          reduce using rule 63 (unary_expression -> postfix_expression .)
    DIVOP           reduce using rule 63 (unary_expression -> postfix_expression .)
    MODOP           reduce using rule 63 (unary_expression -> postfix_expression .)
    PLUSOP          reduce using rule 63 (unary_expression -> postfix_expression .)
    MINUSOP         reduce using rule 63 (unary_expression -> postfix_expression .)
    LSHIFT          reduce using rule 63 (unary_expression -> postfix_expression .)
    RSHIFT          reduce using rule 63 (unary_expression -> postfix_expression .)
    LTCOMP          reduce using rule 63 (unary_expression -> postfix_expression .)
    GTCOMP          reduce using rule 63 (unary_expression -> postfix_expression .)
    LTECOMP         reduce using rule 63 (unary_expression -> postfix_expression .)
    GTECOMP         reduce using rule 63 (unary_expression -> postfix_expression .)
    EQCOMP          reduce using rule 63 (unary_expression -> postfix_expression .)
    NEQCOMP         reduce using rule 63 (unary_expression -> postfix_expression .)
    BANDOP          reduce using rule 63 (unary_expression -> postfix_expression .)
    XOROP           reduce using rule 63 (unary_expression -> postfix_expression .)
    OROP            reduce using rule 63 (unary_expression -> postfix_expression .)
    ANDOP           reduce using rule 63 (unary_expression -> postfix_expression .)
    QUESMARK        reduce using rule 63 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 63 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 63 (unary_expression -> postfix_expression .)
    RSPAREN         reduce using rule 63 (unary_expression -> postfix_expression .)
    SEMICOLON       reduce using rule 63 (unary_expression -> postfix_expression .)
    RCPAREN         reduce using rule 63 (unary_expression -> postfix_expression .)
    COLON           reduce using rule 63 (unary_expression -> postfix_expression .)
    RTEMPLATE       reduce using rule 63 (unary_expression -> postfix_expression .)
    LSPAREN         shift and go to state 211
    LPAREN          shift and go to state 212
    DOT             shift and go to state 214
    ARROW           shift and go to state 215
    DPLUSOP         shift and go to state 216
    DMINUSOP        shift and go to state 217
    LTEMPLATE       shift and go to state 100

    template_class_name            shift and go to state 213

state 115

    (64) unary_expression -> DPLUSOP . unary_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR

    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    THIS            shift and go to state 134
    LPAREN          shift and go to state 219
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    unary_expression               shift and go to state 218
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    literal                        shift and go to state 133

state 116

    (65) unary_expression -> DMINUSOP . unary_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR

    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    THIS            shift and go to state 134
    LPAREN          shift and go to state 219
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    unary_expression               shift and go to state 220
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    literal                        shift and go to state 133

state 117

    (66) unary_expression -> unary1_operator . cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR

    LPAREN          shift and go to state 150
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    THIS            shift and go to state 134
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    unary1_operator                shift and go to state 117
    cast_expression                shift and go to state 221
    unary_expression               shift and go to state 149
    postfix_expression             shift and go to state 114
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    literal                        shift and go to state 133

state 118

    (43) pm_expression -> cast_expression .

    DOTSTAR         reduce using rule 43 (pm_expression -> cast_expression .)
    ARROWSTAR       reduce using rule 43 (pm_expression -> cast_expression .)
    MULTOP          reduce using rule 43 (pm_expression -> cast_expression .)
    DIVOP           reduce using rule 43 (pm_expression -> cast_expression .)
    MODOP           reduce using rule 43 (pm_expression -> cast_expression .)
    PLUSOP          reduce using rule 43 (pm_expression -> cast_expression .)
    MINUSOP         reduce using rule 43 (pm_expression -> cast_expression .)
    LSHIFT          reduce using rule 43 (pm_expression -> cast_expression .)
    RSHIFT          reduce using rule 43 (pm_expression -> cast_expression .)
    LTCOMP          reduce using rule 43 (pm_expression -> cast_expression .)
    GTCOMP          reduce using rule 43 (pm_expression -> cast_expression .)
    LTECOMP         reduce using rule 43 (pm_expression -> cast_expression .)
    GTECOMP         reduce using rule 43 (pm_expression -> cast_expression .)
    EQCOMP          reduce using rule 43 (pm_expression -> cast_expression .)
    NEQCOMP         reduce using rule 43 (pm_expression -> cast_expression .)
    BANDOP          reduce using rule 43 (pm_expression -> cast_expression .)
    XOROP           reduce using rule 43 (pm_expression -> cast_expression .)
    OROP            reduce using rule 43 (pm_expression -> cast_expression .)
    ANDOP           reduce using rule 43 (pm_expression -> cast_expression .)
    QUESMARK        reduce using rule 43 (pm_expression -> cast_expression .)
    RPAREN          reduce using rule 43 (pm_expression -> cast_expression .)
    COMMA           reduce using rule 43 (pm_expression -> cast_expression .)
    RSPAREN         reduce using rule 43 (pm_expression -> cast_expression .)
    SEMICOLON       reduce using rule 43 (pm_expression -> cast_expression .)
    RCPAREN         reduce using rule 43 (pm_expression -> cast_expression .)
    COLON           reduce using rule 43 (pm_expression -> cast_expression .)
    RTEMPLATE       reduce using rule 43 (pm_expression -> cast_expression .)


state 119

    (67) unary_expression -> unary2_operator . cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR

    LPAREN          shift and go to state 150
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    THIS            shift and go to state 134
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    unary2_operator                shift and go to state 119
    cast_expression                shift and go to state 222
    unary_expression               shift and go to state 149
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    literal                        shift and go to state 133

state 120

    (68) unary_expression -> SIZEOF . unary_expression
    (69) unary_expression -> SIZEOF . LPAREN type_name RPAREN
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR

    LPAREN          shift and go to state 224
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    THIS            shift and go to state 134
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    unary_expression               shift and go to state 223
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    literal                        shift and go to state 133

state 121

    (70) unary_expression -> allocation_expression .

    EQUAL           reduce using rule 70 (unary_expression -> allocation_expression .)
    MULTEQOP        reduce using rule 70 (unary_expression -> allocation_expression .)
    DIVEQOP         reduce using rule 70 (unary_expression -> allocation_expression .)
    MODEQOP         reduce using rule 70 (unary_expression -> allocation_expression .)
    PLUSEQOP        reduce using rule 70 (unary_expression -> allocation_expression .)
    MINUSEQOP       reduce using rule 70 (unary_expression -> allocation_expression .)
    LSHIFTEQOP      reduce using rule 70 (unary_expression -> allocation_expression .)
    RSHIFTEQOP      reduce using rule 70 (unary_expression -> allocation_expression .)
    BANDEQOP        reduce using rule 70 (unary_expression -> allocation_expression .)
    BOREQOP         reduce using rule 70 (unary_expression -> allocation_expression .)
    DOTSTAR         reduce using rule 70 (unary_expression -> allocation_expression .)
    ARROWSTAR       reduce using rule 70 (unary_expression -> allocation_expression .)
    MULTOP          reduce using rule 70 (unary_expression -> allocation_expression .)
    DIVOP           reduce using rule 70 (unary_expression -> allocation_expression .)
    MODOP           reduce using rule 70 (unary_expression -> allocation_expression .)
    PLUSOP          reduce using rule 70 (unary_expression -> allocation_expression .)
    MINUSOP         reduce using rule 70 (unary_expression -> allocation_expression .)
    LSHIFT          reduce using rule 70 (unary_expression -> allocation_expression .)
    RSHIFT          reduce using rule 70 (unary_expression -> allocation_expression .)
    LTCOMP          reduce using rule 70 (unary_expression -> allocation_expression .)
    GTCOMP          reduce using rule 70 (unary_expression -> allocation_expression .)
    LTECOMP         reduce using rule 70 (unary_expression -> allocation_expression .)
    GTECOMP         reduce using rule 70 (unary_expression -> allocation_expression .)
    EQCOMP          reduce using rule 70 (unary_expression -> allocation_expression .)
    NEQCOMP         reduce using rule 70 (unary_expression -> allocation_expression .)
    BANDOP          reduce using rule 70 (unary_expression -> allocation_expression .)
    XOROP           reduce using rule 70 (unary_expression -> allocation_expression .)
    OROP            reduce using rule 70 (unary_expression -> allocation_expression .)
    ANDOP           reduce using rule 70 (unary_expression -> allocation_expression .)
    QUESMARK        reduce using rule 70 (unary_expression -> allocation_expression .)
    RPAREN          reduce using rule 70 (unary_expression -> allocation_expression .)
    COMMA           reduce using rule 70 (unary_expression -> allocation_expression .)
    RSPAREN         reduce using rule 70 (unary_expression -> allocation_expression .)
    SEMICOLON       reduce using rule 70 (unary_expression -> allocation_expression .)
    RCPAREN         reduce using rule 70 (unary_expression -> allocation_expression .)
    COLON           reduce using rule 70 (unary_expression -> allocation_expression .)
    RTEMPLATE       reduce using rule 70 (unary_expression -> allocation_expression .)


state 122

    (71) unary_expression -> deallocation_expression .

    EQUAL           reduce using rule 71 (unary_expression -> deallocation_expression .)
    MULTEQOP        reduce using rule 71 (unary_expression -> deallocation_expression .)
    DIVEQOP         reduce using rule 71 (unary_expression -> deallocation_expression .)
    MODEQOP         reduce using rule 71 (unary_expression -> deallocation_expression .)
    PLUSEQOP        reduce using rule 71 (unary_expression -> deallocation_expression .)
    MINUSEQOP       reduce using rule 71 (unary_expression -> deallocation_expression .)
    LSHIFTEQOP      reduce using rule 71 (unary_expression -> deallocation_expression .)
    RSHIFTEQOP      reduce using rule 71 (unary_expression -> deallocation_expression .)
    BANDEQOP        reduce using rule 71 (unary_expression -> deallocation_expression .)
    BOREQOP         reduce using rule 71 (unary_expression -> deallocation_expression .)
    DOTSTAR         reduce using rule 71 (unary_expression -> deallocation_expression .)
    ARROWSTAR       reduce using rule 71 (unary_expression -> deallocation_expression .)
    MULTOP          reduce using rule 71 (unary_expression -> deallocation_expression .)
    DIVOP           reduce using rule 71 (unary_expression -> deallocation_expression .)
    MODOP           reduce using rule 71 (unary_expression -> deallocation_expression .)
    PLUSOP          reduce using rule 71 (unary_expression -> deallocation_expression .)
    MINUSOP         reduce using rule 71 (unary_expression -> deallocation_expression .)
    LSHIFT          reduce using rule 71 (unary_expression -> deallocation_expression .)
    RSHIFT          reduce using rule 71 (unary_expression -> deallocation_expression .)
    LTCOMP          reduce using rule 71 (unary_expression -> deallocation_expression .)
    GTCOMP          reduce using rule 71 (unary_expression -> deallocation_expression .)
    LTECOMP         reduce using rule 71 (unary_expression -> deallocation_expression .)
    GTECOMP         reduce using rule 71 (unary_expression -> deallocation_expression .)
    EQCOMP          reduce using rule 71 (unary_expression -> deallocation_expression .)
    NEQCOMP         reduce using rule 71 (unary_expression -> deallocation_expression .)
    BANDOP          reduce using rule 71 (unary_expression -> deallocation_expression .)
    XOROP           reduce using rule 71 (unary_expression -> deallocation_expression .)
    OROP            reduce using rule 71 (unary_expression -> deallocation_expression .)
    ANDOP           reduce using rule 71 (unary_expression -> deallocation_expression .)
    QUESMARK        reduce using rule 71 (unary_expression -> deallocation_expression .)
    RPAREN          reduce using rule 71 (unary_expression -> deallocation_expression .)
    COMMA           reduce using rule 71 (unary_expression -> deallocation_expression .)
    RSPAREN         reduce using rule 71 (unary_expression -> deallocation_expression .)
    SEMICOLON       reduce using rule 71 (unary_expression -> deallocation_expression .)
    RCPAREN         reduce using rule 71 (unary_expression -> deallocation_expression .)
    COLON           reduce using rule 71 (unary_expression -> deallocation_expression .)
    RTEMPLATE       reduce using rule 71 (unary_expression -> deallocation_expression .)


state 123

    (15) logical_OR_expression -> logical_AND_expression .
    (18) logical_AND_expression -> logical_AND_expression . ANDOP inclusive_OR_expression

    QUESMARK        reduce using rule 15 (logical_OR_expression -> logical_AND_expression .)
    OROP            reduce using rule 15 (logical_OR_expression -> logical_AND_expression .)
    RPAREN          reduce using rule 15 (logical_OR_expression -> logical_AND_expression .)
    COMMA           reduce using rule 15 (logical_OR_expression -> logical_AND_expression .)
    RSPAREN         reduce using rule 15 (logical_OR_expression -> logical_AND_expression .)
    SEMICOLON       reduce using rule 15 (logical_OR_expression -> logical_AND_expression .)
    RCPAREN         reduce using rule 15 (logical_OR_expression -> logical_AND_expression .)
    COLON           reduce using rule 15 (logical_OR_expression -> logical_AND_expression .)
    RTEMPLATE       reduce using rule 15 (logical_OR_expression -> logical_AND_expression .)
    ANDOP           shift and go to state 225


state 124

    (91) postfix_expression -> primary_expression .

    LSPAREN         reduce using rule 91 (postfix_expression -> primary_expression .)
    LPAREN          reduce using rule 91 (postfix_expression -> primary_expression .)
    DOT             reduce using rule 91 (postfix_expression -> primary_expression .)
    ARROW           reduce using rule 91 (postfix_expression -> primary_expression .)
    DPLUSOP         reduce using rule 91 (postfix_expression -> primary_expression .)
    DMINUSOP        reduce using rule 91 (postfix_expression -> primary_expression .)
    LTEMPLATE       reduce using rule 91 (postfix_expression -> primary_expression .)
    EQUAL           reduce using rule 91 (postfix_expression -> primary_expression .)
    MULTEQOP        reduce using rule 91 (postfix_expression -> primary_expression .)
    DIVEQOP         reduce using rule 91 (postfix_expression -> primary_expression .)
    MODEQOP         reduce using rule 91 (postfix_expression -> primary_expression .)
    PLUSEQOP        reduce using rule 91 (postfix_expression -> primary_expression .)
    MINUSEQOP       reduce using rule 91 (postfix_expression -> primary_expression .)
    LSHIFTEQOP      reduce using rule 91 (postfix_expression -> primary_expression .)
    RSHIFTEQOP      reduce using rule 91 (postfix_expression -> primary_expression .)
    BANDEQOP        reduce using rule 91 (postfix_expression -> primary_expression .)
    BOREQOP         reduce using rule 91 (postfix_expression -> primary_expression .)
    DOTSTAR         reduce using rule 91 (postfix_expression -> primary_expression .)
    ARROWSTAR       reduce using rule 91 (postfix_expression -> primary_expression .)
    MULTOP          reduce using rule 91 (postfix_expression -> primary_expression .)
    DIVOP           reduce using rule 91 (postfix_expression -> primary_expression .)
    MODOP           reduce using rule 91 (postfix_expression -> primary_expression .)
    PLUSOP          reduce using rule 91 (postfix_expression -> primary_expression .)
    MINUSOP         reduce using rule 91 (postfix_expression -> primary_expression .)
    LSHIFT          reduce using rule 91 (postfix_expression -> primary_expression .)
    RSHIFT          reduce using rule 91 (postfix_expression -> primary_expression .)
    LTCOMP          reduce using rule 91 (postfix_expression -> primary_expression .)
    GTCOMP          reduce using rule 91 (postfix_expression -> primary_expression .)
    LTECOMP         reduce using rule 91 (postfix_expression -> primary_expression .)
    GTECOMP         reduce using rule 91 (postfix_expression -> primary_expression .)
    EQCOMP          reduce using rule 91 (postfix_expression -> primary_expression .)
    NEQCOMP         reduce using rule 91 (postfix_expression -> primary_expression .)
    BANDOP          reduce using rule 91 (postfix_expression -> primary_expression .)
    XOROP           reduce using rule 91 (postfix_expression -> primary_expression .)
    OROP            reduce using rule 91 (postfix_expression -> primary_expression .)
    ANDOP           reduce using rule 91 (postfix_expression -> primary_expression .)
    QUESMARK        reduce using rule 91 (postfix_expression -> primary_expression .)
    RPAREN          reduce using rule 91 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 91 (postfix_expression -> primary_expression .)
    RSPAREN         reduce using rule 91 (postfix_expression -> primary_expression .)
    SEMICOLON       reduce using rule 91 (postfix_expression -> primary_expression .)
    RCPAREN         reduce using rule 91 (postfix_expression -> primary_expression .)
    COLON           reduce using rule 91 (postfix_expression -> primary_expression .)
    RTEMPLATE       reduce using rule 91 (postfix_expression -> primary_expression .)


state 125

    (100) primary_expression -> name .

    LSPAREN         reduce using rule 100 (primary_expression -> name .)
    LPAREN          reduce using rule 100 (primary_expression -> name .)
    DOT             reduce using rule 100 (primary_expression -> name .)
    ARROW           reduce using rule 100 (primary_expression -> name .)
    DPLUSOP         reduce using rule 100 (primary_expression -> name .)
    DMINUSOP        reduce using rule 100 (primary_expression -> name .)
    LTEMPLATE       reduce using rule 100 (primary_expression -> name .)
    EQUAL           reduce using rule 100 (primary_expression -> name .)
    MULTEQOP        reduce using rule 100 (primary_expression -> name .)
    DIVEQOP         reduce using rule 100 (primary_expression -> name .)
    MODEQOP         reduce using rule 100 (primary_expression -> name .)
    PLUSEQOP        reduce using rule 100 (primary_expression -> name .)
    MINUSEQOP       reduce using rule 100 (primary_expression -> name .)
    LSHIFTEQOP      reduce using rule 100 (primary_expression -> name .)
    RSHIFTEQOP      reduce using rule 100 (primary_expression -> name .)
    BANDEQOP        reduce using rule 100 (primary_expression -> name .)
    BOREQOP         reduce using rule 100 (primary_expression -> name .)
    DOTSTAR         reduce using rule 100 (primary_expression -> name .)
    ARROWSTAR       reduce using rule 100 (primary_expression -> name .)
    MULTOP          reduce using rule 100 (primary_expression -> name .)
    DIVOP           reduce using rule 100 (primary_expression -> name .)
    MODOP           reduce using rule 100 (primary_expression -> name .)
    PLUSOP          reduce using rule 100 (primary_expression -> name .)
    MINUSOP         reduce using rule 100 (primary_expression -> name .)
    LSHIFT          reduce using rule 100 (primary_expression -> name .)
    RSHIFT          reduce using rule 100 (primary_expression -> name .)
    LTCOMP          reduce using rule 100 (primary_expression -> name .)
    GTCOMP          reduce using rule 100 (primary_expression -> name .)
    LTECOMP         reduce using rule 100 (primary_expression -> name .)
    GTECOMP         reduce using rule 100 (primary_expression -> name .)
    EQCOMP          reduce using rule 100 (primary_expression -> name .)
    NEQCOMP         reduce using rule 100 (primary_expression -> name .)
    BANDOP          reduce using rule 100 (primary_expression -> name .)
    XOROP           reduce using rule 100 (primary_expression -> name .)
    OROP            reduce using rule 100 (primary_expression -> name .)
    ANDOP           reduce using rule 100 (primary_expression -> name .)
    QUESMARK        reduce using rule 100 (primary_expression -> name .)
    RPAREN          reduce using rule 100 (primary_expression -> name .)
    COMMA           reduce using rule 100 (primary_expression -> name .)
    RSPAREN         reduce using rule 100 (primary_expression -> name .)
    SEMICOLON       reduce using rule 100 (primary_expression -> name .)
    RCPAREN         reduce using rule 100 (primary_expression -> name .)
    COLON           reduce using rule 100 (primary_expression -> name .)
    RTEMPLATE       reduce using rule 100 (primary_expression -> name .)


state 126

    (85) unary1_operator -> PLUSOP .

    LPAREN          reduce using rule 85 (unary1_operator -> PLUSOP .)
    DPLUSOP         reduce using rule 85 (unary1_operator -> PLUSOP .)
    DMINUSOP        reduce using rule 85 (unary1_operator -> PLUSOP .)
    SIZEOF          reduce using rule 85 (unary1_operator -> PLUSOP .)
    PLUSOP          reduce using rule 85 (unary1_operator -> PLUSOP .)
    MINUSOP         reduce using rule 85 (unary1_operator -> PLUSOP .)
    NOTSYM          reduce using rule 85 (unary1_operator -> PLUSOP .)
    BNOP            reduce using rule 85 (unary1_operator -> PLUSOP .)
    MULTOP          reduce using rule 85 (unary1_operator -> PLUSOP .)
    BANDOP          reduce using rule 85 (unary1_operator -> PLUSOP .)
    NEW             reduce using rule 85 (unary1_operator -> PLUSOP .)
    DELETE          reduce using rule 85 (unary1_operator -> PLUSOP .)
    THIS            reduce using rule 85 (unary1_operator -> PLUSOP .)
    IDENTIFIER      reduce using rule 85 (unary1_operator -> PLUSOP .)
    DOUBLEBNOP      reduce using rule 85 (unary1_operator -> PLUSOP .)
    STRING_L        reduce using rule 85 (unary1_operator -> PLUSOP .)
    NUMBER          reduce using rule 85 (unary1_operator -> PLUSOP .)
    SCHAR           reduce using rule 85 (unary1_operator -> PLUSOP .)


state 127

    (86) unary1_operator -> MINUSOP .

    LPAREN          reduce using rule 86 (unary1_operator -> MINUSOP .)
    DPLUSOP         reduce using rule 86 (unary1_operator -> MINUSOP .)
    DMINUSOP        reduce using rule 86 (unary1_operator -> MINUSOP .)
    SIZEOF          reduce using rule 86 (unary1_operator -> MINUSOP .)
    PLUSOP          reduce using rule 86 (unary1_operator -> MINUSOP .)
    MINUSOP         reduce using rule 86 (unary1_operator -> MINUSOP .)
    NOTSYM          reduce using rule 86 (unary1_operator -> MINUSOP .)
    BNOP            reduce using rule 86 (unary1_operator -> MINUSOP .)
    MULTOP          reduce using rule 86 (unary1_operator -> MINUSOP .)
    BANDOP          reduce using rule 86 (unary1_operator -> MINUSOP .)
    NEW             reduce using rule 86 (unary1_operator -> MINUSOP .)
    DELETE          reduce using rule 86 (unary1_operator -> MINUSOP .)
    THIS            reduce using rule 86 (unary1_operator -> MINUSOP .)
    IDENTIFIER      reduce using rule 86 (unary1_operator -> MINUSOP .)
    DOUBLEBNOP      reduce using rule 86 (unary1_operator -> MINUSOP .)
    STRING_L        reduce using rule 86 (unary1_operator -> MINUSOP .)
    NUMBER          reduce using rule 86 (unary1_operator -> MINUSOP .)
    SCHAR           reduce using rule 86 (unary1_operator -> MINUSOP .)


state 128

    (87) unary1_operator -> NOTSYM .

    LPAREN          reduce using rule 87 (unary1_operator -> NOTSYM .)
    DPLUSOP         reduce using rule 87 (unary1_operator -> NOTSYM .)
    DMINUSOP        reduce using rule 87 (unary1_operator -> NOTSYM .)
    SIZEOF          reduce using rule 87 (unary1_operator -> NOTSYM .)
    PLUSOP          reduce using rule 87 (unary1_operator -> NOTSYM .)
    MINUSOP         reduce using rule 87 (unary1_operator -> NOTSYM .)
    NOTSYM          reduce using rule 87 (unary1_operator -> NOTSYM .)
    BNOP            reduce using rule 87 (unary1_operator -> NOTSYM .)
    MULTOP          reduce using rule 87 (unary1_operator -> NOTSYM .)
    BANDOP          reduce using rule 87 (unary1_operator -> NOTSYM .)
    NEW             reduce using rule 87 (unary1_operator -> NOTSYM .)
    DELETE          reduce using rule 87 (unary1_operator -> NOTSYM .)
    THIS            reduce using rule 87 (unary1_operator -> NOTSYM .)
    IDENTIFIER      reduce using rule 87 (unary1_operator -> NOTSYM .)
    DOUBLEBNOP      reduce using rule 87 (unary1_operator -> NOTSYM .)
    STRING_L        reduce using rule 87 (unary1_operator -> NOTSYM .)
    NUMBER          reduce using rule 87 (unary1_operator -> NOTSYM .)
    SCHAR           reduce using rule 87 (unary1_operator -> NOTSYM .)


state 129

    (88) unary1_operator -> BNOP .

    LPAREN          reduce using rule 88 (unary1_operator -> BNOP .)
    DPLUSOP         reduce using rule 88 (unary1_operator -> BNOP .)
    DMINUSOP        reduce using rule 88 (unary1_operator -> BNOP .)
    SIZEOF          reduce using rule 88 (unary1_operator -> BNOP .)
    PLUSOP          reduce using rule 88 (unary1_operator -> BNOP .)
    MINUSOP         reduce using rule 88 (unary1_operator -> BNOP .)
    NOTSYM          reduce using rule 88 (unary1_operator -> BNOP .)
    BNOP            reduce using rule 88 (unary1_operator -> BNOP .)
    MULTOP          reduce using rule 88 (unary1_operator -> BNOP .)
    BANDOP          reduce using rule 88 (unary1_operator -> BNOP .)
    NEW             reduce using rule 88 (unary1_operator -> BNOP .)
    DELETE          reduce using rule 88 (unary1_operator -> BNOP .)
    THIS            reduce using rule 88 (unary1_operator -> BNOP .)
    IDENTIFIER      reduce using rule 88 (unary1_operator -> BNOP .)
    DOUBLEBNOP      reduce using rule 88 (unary1_operator -> BNOP .)
    STRING_L        reduce using rule 88 (unary1_operator -> BNOP .)
    NUMBER          reduce using rule 88 (unary1_operator -> BNOP .)
    SCHAR           reduce using rule 88 (unary1_operator -> BNOP .)


state 130

    (73) allocation_expression -> NEW . new_type_name new_initializer
    (74) allocation_expression -> NEW . new_type_name
    (75) allocation_expression -> NEW . LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> NEW . LPAREN type_name RPAREN
    (77) new_type_name -> . type_specifier_ new_declarator
    (78) new_type_name -> . type_specifier_
    (168) type_specifier_ -> . CONST type_specifier
    (169) type_specifier_ -> . type_specifier
    (172) type_specifier -> . simple_type_name
    (173) type_specifier -> . complex_type_specifier
    (174) simple_type_name -> . CHAR
    (175) simple_type_name -> . SHORT
    (176) simple_type_name -> . INT
    (177) simple_type_name -> . LONG
    (178) simple_type_name -> . SIGNED
    (179) simple_type_name -> . UNSIGNED
    (180) simple_type_name -> . FLOAT
    (181) simple_type_name -> . DOUBLE
    (182) simple_type_name -> . VOID
    (183) simple_type_name -> . STRING
    (184) simple_type_name -> . AUTO
    (185) complex_type_specifier -> . class_key IDENTIFIER
    (186) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (187) complex_type_specifier -> . TYPE IDENTIFIER
    (188) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (201) class_key -> . CLASS
    (202) class_key -> . STRUCT

    LPAREN          shift and go to state 227
    CONST           shift and go to state 16
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38

    new_type_name                  shift and go to state 226
    type_specifier_                shift and go to state 228
    type_specifier                 shift and go to state 17
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 56

state 131

    (72) deallocation_expression -> DELETE . cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR

    LPAREN          shift and go to state 150
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    THIS            shift and go to state 134
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    cast_expression                shift and go to state 229
    unary_expression               shift and go to state 149
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    literal                        shift and go to state 133

state 132

    (17) logical_AND_expression -> inclusive_OR_expression .
    (20) inclusive_OR_expression -> inclusive_OR_expression . OROP exclusive_OR_expression

    ANDOP           reduce using rule 17 (logical_AND_expression -> inclusive_OR_expression .)
    QUESMARK        reduce using rule 17 (logical_AND_expression -> inclusive_OR_expression .)
    OROP            reduce using rule 17 (logical_AND_expression -> inclusive_OR_expression .)
    RPAREN          reduce using rule 17 (logical_AND_expression -> inclusive_OR_expression .)
    COMMA           reduce using rule 17 (logical_AND_expression -> inclusive_OR_expression .)
    RSPAREN         reduce using rule 17 (logical_AND_expression -> inclusive_OR_expression .)
    SEMICOLON       reduce using rule 17 (logical_AND_expression -> inclusive_OR_expression .)
    RCPAREN         reduce using rule 17 (logical_AND_expression -> inclusive_OR_expression .)
    COLON           reduce using rule 17 (logical_AND_expression -> inclusive_OR_expression .)
    RTEMPLATE       reduce using rule 17 (logical_AND_expression -> inclusive_OR_expression .)

  ! OROP            [ shift and go to state 230 ]


state 133

    (101) primary_expression -> literal .

    LSPAREN         reduce using rule 101 (primary_expression -> literal .)
    LPAREN          reduce using rule 101 (primary_expression -> literal .)
    DOT             reduce using rule 101 (primary_expression -> literal .)
    ARROW           reduce using rule 101 (primary_expression -> literal .)
    DPLUSOP         reduce using rule 101 (primary_expression -> literal .)
    DMINUSOP        reduce using rule 101 (primary_expression -> literal .)
    LTEMPLATE       reduce using rule 101 (primary_expression -> literal .)
    EQUAL           reduce using rule 101 (primary_expression -> literal .)
    MULTEQOP        reduce using rule 101 (primary_expression -> literal .)
    DIVEQOP         reduce using rule 101 (primary_expression -> literal .)
    MODEQOP         reduce using rule 101 (primary_expression -> literal .)
    PLUSEQOP        reduce using rule 101 (primary_expression -> literal .)
    MINUSEQOP       reduce using rule 101 (primary_expression -> literal .)
    LSHIFTEQOP      reduce using rule 101 (primary_expression -> literal .)
    RSHIFTEQOP      reduce using rule 101 (primary_expression -> literal .)
    BANDEQOP        reduce using rule 101 (primary_expression -> literal .)
    BOREQOP         reduce using rule 101 (primary_expression -> literal .)
    DOTSTAR         reduce using rule 101 (primary_expression -> literal .)
    ARROWSTAR       reduce using rule 101 (primary_expression -> literal .)
    MULTOP          reduce using rule 101 (primary_expression -> literal .)
    DIVOP           reduce using rule 101 (primary_expression -> literal .)
    MODOP           reduce using rule 101 (primary_expression -> literal .)
    PLUSOP          reduce using rule 101 (primary_expression -> literal .)
    MINUSOP         reduce using rule 101 (primary_expression -> literal .)
    LSHIFT          reduce using rule 101 (primary_expression -> literal .)
    RSHIFT          reduce using rule 101 (primary_expression -> literal .)
    LTCOMP          reduce using rule 101 (primary_expression -> literal .)
    GTCOMP          reduce using rule 101 (primary_expression -> literal .)
    LTECOMP         reduce using rule 101 (primary_expression -> literal .)
    GTECOMP         reduce using rule 101 (primary_expression -> literal .)
    EQCOMP          reduce using rule 101 (primary_expression -> literal .)
    NEQCOMP         reduce using rule 101 (primary_expression -> literal .)
    BANDOP          reduce using rule 101 (primary_expression -> literal .)
    XOROP           reduce using rule 101 (primary_expression -> literal .)
    OROP            reduce using rule 101 (primary_expression -> literal .)
    ANDOP           reduce using rule 101 (primary_expression -> literal .)
    QUESMARK        reduce using rule 101 (primary_expression -> literal .)
    RPAREN          reduce using rule 101 (primary_expression -> literal .)
    COMMA           reduce using rule 101 (primary_expression -> literal .)
    RSPAREN         reduce using rule 101 (primary_expression -> literal .)
    SEMICOLON       reduce using rule 101 (primary_expression -> literal .)
    RCPAREN         reduce using rule 101 (primary_expression -> literal .)
    COLON           reduce using rule 101 (primary_expression -> literal .)
    RTEMPLATE       reduce using rule 101 (primary_expression -> literal .)


state 134

    (102) primary_expression -> THIS .

    LSPAREN         reduce using rule 102 (primary_expression -> THIS .)
    LPAREN          reduce using rule 102 (primary_expression -> THIS .)
    DOT             reduce using rule 102 (primary_expression -> THIS .)
    ARROW           reduce using rule 102 (primary_expression -> THIS .)
    DPLUSOP         reduce using rule 102 (primary_expression -> THIS .)
    DMINUSOP        reduce using rule 102 (primary_expression -> THIS .)
    LTEMPLATE       reduce using rule 102 (primary_expression -> THIS .)
    EQUAL           reduce using rule 102 (primary_expression -> THIS .)
    MULTEQOP        reduce using rule 102 (primary_expression -> THIS .)
    DIVEQOP         reduce using rule 102 (primary_expression -> THIS .)
    MODEQOP         reduce using rule 102 (primary_expression -> THIS .)
    PLUSEQOP        reduce using rule 102 (primary_expression -> THIS .)
    MINUSEQOP       reduce using rule 102 (primary_expression -> THIS .)
    LSHIFTEQOP      reduce using rule 102 (primary_expression -> THIS .)
    RSHIFTEQOP      reduce using rule 102 (primary_expression -> THIS .)
    BANDEQOP        reduce using rule 102 (primary_expression -> THIS .)
    BOREQOP         reduce using rule 102 (primary_expression -> THIS .)
    DOTSTAR         reduce using rule 102 (primary_expression -> THIS .)
    ARROWSTAR       reduce using rule 102 (primary_expression -> THIS .)
    MULTOP          reduce using rule 102 (primary_expression -> THIS .)
    DIVOP           reduce using rule 102 (primary_expression -> THIS .)
    MODOP           reduce using rule 102 (primary_expression -> THIS .)
    PLUSOP          reduce using rule 102 (primary_expression -> THIS .)
    MINUSOP         reduce using rule 102 (primary_expression -> THIS .)
    LSHIFT          reduce using rule 102 (primary_expression -> THIS .)
    RSHIFT          reduce using rule 102 (primary_expression -> THIS .)
    LTCOMP          reduce using rule 102 (primary_expression -> THIS .)
    GTCOMP          reduce using rule 102 (primary_expression -> THIS .)
    LTECOMP         reduce using rule 102 (primary_expression -> THIS .)
    GTECOMP         reduce using rule 102 (primary_expression -> THIS .)
    EQCOMP          reduce using rule 102 (primary_expression -> THIS .)
    NEQCOMP         reduce using rule 102 (primary_expression -> THIS .)
    BANDOP          reduce using rule 102 (primary_expression -> THIS .)
    XOROP           reduce using rule 102 (primary_expression -> THIS .)
    OROP            reduce using rule 102 (primary_expression -> THIS .)
    ANDOP           reduce using rule 102 (primary_expression -> THIS .)
    QUESMARK        reduce using rule 102 (primary_expression -> THIS .)
    RPAREN          reduce using rule 102 (primary_expression -> THIS .)
    COMMA           reduce using rule 102 (primary_expression -> THIS .)
    RSPAREN         reduce using rule 102 (primary_expression -> THIS .)
    SEMICOLON       reduce using rule 102 (primary_expression -> THIS .)
    RCPAREN         reduce using rule 102 (primary_expression -> THIS .)
    COLON           reduce using rule 102 (primary_expression -> THIS .)
    RTEMPLATE       reduce using rule 102 (primary_expression -> THIS .)


state 135

    (19) inclusive_OR_expression -> exclusive_OR_expression .
    (22) exclusive_OR_expression -> exclusive_OR_expression . XOROP AND_expression

    OROP            reduce using rule 19 (inclusive_OR_expression -> exclusive_OR_expression .)
    ANDOP           reduce using rule 19 (inclusive_OR_expression -> exclusive_OR_expression .)
    QUESMARK        reduce using rule 19 (inclusive_OR_expression -> exclusive_OR_expression .)
    RPAREN          reduce using rule 19 (inclusive_OR_expression -> exclusive_OR_expression .)
    COMMA           reduce using rule 19 (inclusive_OR_expression -> exclusive_OR_expression .)
    RSPAREN         reduce using rule 19 (inclusive_OR_expression -> exclusive_OR_expression .)
    SEMICOLON       reduce using rule 19 (inclusive_OR_expression -> exclusive_OR_expression .)
    RCPAREN         reduce using rule 19 (inclusive_OR_expression -> exclusive_OR_expression .)
    COLON           reduce using rule 19 (inclusive_OR_expression -> exclusive_OR_expression .)
    RTEMPLATE       reduce using rule 19 (inclusive_OR_expression -> exclusive_OR_expression .)
    XOROP           shift and go to state 231


state 136

    (104) literal -> STRING_L .

    LSPAREN         reduce using rule 104 (literal -> STRING_L .)
    LPAREN          reduce using rule 104 (literal -> STRING_L .)
    DOT             reduce using rule 104 (literal -> STRING_L .)
    ARROW           reduce using rule 104 (literal -> STRING_L .)
    DPLUSOP         reduce using rule 104 (literal -> STRING_L .)
    DMINUSOP        reduce using rule 104 (literal -> STRING_L .)
    LTEMPLATE       reduce using rule 104 (literal -> STRING_L .)
    EQUAL           reduce using rule 104 (literal -> STRING_L .)
    MULTEQOP        reduce using rule 104 (literal -> STRING_L .)
    DIVEQOP         reduce using rule 104 (literal -> STRING_L .)
    MODEQOP         reduce using rule 104 (literal -> STRING_L .)
    PLUSEQOP        reduce using rule 104 (literal -> STRING_L .)
    MINUSEQOP       reduce using rule 104 (literal -> STRING_L .)
    LSHIFTEQOP      reduce using rule 104 (literal -> STRING_L .)
    RSHIFTEQOP      reduce using rule 104 (literal -> STRING_L .)
    BANDEQOP        reduce using rule 104 (literal -> STRING_L .)
    BOREQOP         reduce using rule 104 (literal -> STRING_L .)
    DOTSTAR         reduce using rule 104 (literal -> STRING_L .)
    ARROWSTAR       reduce using rule 104 (literal -> STRING_L .)
    MULTOP          reduce using rule 104 (literal -> STRING_L .)
    DIVOP           reduce using rule 104 (literal -> STRING_L .)
    MODOP           reduce using rule 104 (literal -> STRING_L .)
    PLUSOP          reduce using rule 104 (literal -> STRING_L .)
    MINUSOP         reduce using rule 104 (literal -> STRING_L .)
    LSHIFT          reduce using rule 104 (literal -> STRING_L .)
    RSHIFT          reduce using rule 104 (literal -> STRING_L .)
    LTCOMP          reduce using rule 104 (literal -> STRING_L .)
    GTCOMP          reduce using rule 104 (literal -> STRING_L .)
    LTECOMP         reduce using rule 104 (literal -> STRING_L .)
    GTECOMP         reduce using rule 104 (literal -> STRING_L .)
    EQCOMP          reduce using rule 104 (literal -> STRING_L .)
    NEQCOMP         reduce using rule 104 (literal -> STRING_L .)
    BANDOP          reduce using rule 104 (literal -> STRING_L .)
    XOROP           reduce using rule 104 (literal -> STRING_L .)
    OROP            reduce using rule 104 (literal -> STRING_L .)
    ANDOP           reduce using rule 104 (literal -> STRING_L .)
    QUESMARK        reduce using rule 104 (literal -> STRING_L .)
    RPAREN          reduce using rule 104 (literal -> STRING_L .)
    COMMA           reduce using rule 104 (literal -> STRING_L .)
    RSPAREN         reduce using rule 104 (literal -> STRING_L .)
    SEMICOLON       reduce using rule 104 (literal -> STRING_L .)
    RCPAREN         reduce using rule 104 (literal -> STRING_L .)
    COLON           reduce using rule 104 (literal -> STRING_L .)
    RTEMPLATE       reduce using rule 104 (literal -> STRING_L .)


state 137

    (105) literal -> NUMBER .

    LSPAREN         reduce using rule 105 (literal -> NUMBER .)
    LPAREN          reduce using rule 105 (literal -> NUMBER .)
    DOT             reduce using rule 105 (literal -> NUMBER .)
    ARROW           reduce using rule 105 (literal -> NUMBER .)
    DPLUSOP         reduce using rule 105 (literal -> NUMBER .)
    DMINUSOP        reduce using rule 105 (literal -> NUMBER .)
    LTEMPLATE       reduce using rule 105 (literal -> NUMBER .)
    EQUAL           reduce using rule 105 (literal -> NUMBER .)
    MULTEQOP        reduce using rule 105 (literal -> NUMBER .)
    DIVEQOP         reduce using rule 105 (literal -> NUMBER .)
    MODEQOP         reduce using rule 105 (literal -> NUMBER .)
    PLUSEQOP        reduce using rule 105 (literal -> NUMBER .)
    MINUSEQOP       reduce using rule 105 (literal -> NUMBER .)
    LSHIFTEQOP      reduce using rule 105 (literal -> NUMBER .)
    RSHIFTEQOP      reduce using rule 105 (literal -> NUMBER .)
    BANDEQOP        reduce using rule 105 (literal -> NUMBER .)
    BOREQOP         reduce using rule 105 (literal -> NUMBER .)
    DOTSTAR         reduce using rule 105 (literal -> NUMBER .)
    ARROWSTAR       reduce using rule 105 (literal -> NUMBER .)
    MULTOP          reduce using rule 105 (literal -> NUMBER .)
    DIVOP           reduce using rule 105 (literal -> NUMBER .)
    MODOP           reduce using rule 105 (literal -> NUMBER .)
    PLUSOP          reduce using rule 105 (literal -> NUMBER .)
    MINUSOP         reduce using rule 105 (literal -> NUMBER .)
    LSHIFT          reduce using rule 105 (literal -> NUMBER .)
    RSHIFT          reduce using rule 105 (literal -> NUMBER .)
    LTCOMP          reduce using rule 105 (literal -> NUMBER .)
    GTCOMP          reduce using rule 105 (literal -> NUMBER .)
    LTECOMP         reduce using rule 105 (literal -> NUMBER .)
    GTECOMP         reduce using rule 105 (literal -> NUMBER .)
    EQCOMP          reduce using rule 105 (literal -> NUMBER .)
    NEQCOMP         reduce using rule 105 (literal -> NUMBER .)
    BANDOP          reduce using rule 105 (literal -> NUMBER .)
    XOROP           reduce using rule 105 (literal -> NUMBER .)
    OROP            reduce using rule 105 (literal -> NUMBER .)
    ANDOP           reduce using rule 105 (literal -> NUMBER .)
    QUESMARK        reduce using rule 105 (literal -> NUMBER .)
    RPAREN          reduce using rule 105 (literal -> NUMBER .)
    COMMA           reduce using rule 105 (literal -> NUMBER .)
    RSPAREN         reduce using rule 105 (literal -> NUMBER .)
    SEMICOLON       reduce using rule 105 (literal -> NUMBER .)
    RCPAREN         reduce using rule 105 (literal -> NUMBER .)
    COLON           reduce using rule 105 (literal -> NUMBER .)
    RTEMPLATE       reduce using rule 105 (literal -> NUMBER .)


state 138

    (106) literal -> SCHAR .

    LSPAREN         reduce using rule 106 (literal -> SCHAR .)
    LPAREN          reduce using rule 106 (literal -> SCHAR .)
    DOT             reduce using rule 106 (literal -> SCHAR .)
    ARROW           reduce using rule 106 (literal -> SCHAR .)
    DPLUSOP         reduce using rule 106 (literal -> SCHAR .)
    DMINUSOP        reduce using rule 106 (literal -> SCHAR .)
    LTEMPLATE       reduce using rule 106 (literal -> SCHAR .)
    EQUAL           reduce using rule 106 (literal -> SCHAR .)
    MULTEQOP        reduce using rule 106 (literal -> SCHAR .)
    DIVEQOP         reduce using rule 106 (literal -> SCHAR .)
    MODEQOP         reduce using rule 106 (literal -> SCHAR .)
    PLUSEQOP        reduce using rule 106 (literal -> SCHAR .)
    MINUSEQOP       reduce using rule 106 (literal -> SCHAR .)
    LSHIFTEQOP      reduce using rule 106 (literal -> SCHAR .)
    RSHIFTEQOP      reduce using rule 106 (literal -> SCHAR .)
    BANDEQOP        reduce using rule 106 (literal -> SCHAR .)
    BOREQOP         reduce using rule 106 (literal -> SCHAR .)
    DOTSTAR         reduce using rule 106 (literal -> SCHAR .)
    ARROWSTAR       reduce using rule 106 (literal -> SCHAR .)
    MULTOP          reduce using rule 106 (literal -> SCHAR .)
    DIVOP           reduce using rule 106 (literal -> SCHAR .)
    MODOP           reduce using rule 106 (literal -> SCHAR .)
    PLUSOP          reduce using rule 106 (literal -> SCHAR .)
    MINUSOP         reduce using rule 106 (literal -> SCHAR .)
    LSHIFT          reduce using rule 106 (literal -> SCHAR .)
    RSHIFT          reduce using rule 106 (literal -> SCHAR .)
    LTCOMP          reduce using rule 106 (literal -> SCHAR .)
    GTCOMP          reduce using rule 106 (literal -> SCHAR .)
    LTECOMP         reduce using rule 106 (literal -> SCHAR .)
    GTECOMP         reduce using rule 106 (literal -> SCHAR .)
    EQCOMP          reduce using rule 106 (literal -> SCHAR .)
    NEQCOMP         reduce using rule 106 (literal -> SCHAR .)
    BANDOP          reduce using rule 106 (literal -> SCHAR .)
    XOROP           reduce using rule 106 (literal -> SCHAR .)
    OROP            reduce using rule 106 (literal -> SCHAR .)
    ANDOP           reduce using rule 106 (literal -> SCHAR .)
    QUESMARK        reduce using rule 106 (literal -> SCHAR .)
    RPAREN          reduce using rule 106 (literal -> SCHAR .)
    COMMA           reduce using rule 106 (literal -> SCHAR .)
    RSPAREN         reduce using rule 106 (literal -> SCHAR .)
    SEMICOLON       reduce using rule 106 (literal -> SCHAR .)
    RCPAREN         reduce using rule 106 (literal -> SCHAR .)
    COLON           reduce using rule 106 (literal -> SCHAR .)
    RTEMPLATE       reduce using rule 106 (literal -> SCHAR .)


state 139

    (21) exclusive_OR_expression -> AND_expression .
    (24) AND_expression -> AND_expression . BANDOP equality_expression

    XOROP           reduce using rule 21 (exclusive_OR_expression -> AND_expression .)
    OROP            reduce using rule 21 (exclusive_OR_expression -> AND_expression .)
    ANDOP           reduce using rule 21 (exclusive_OR_expression -> AND_expression .)
    QUESMARK        reduce using rule 21 (exclusive_OR_expression -> AND_expression .)
    RPAREN          reduce using rule 21 (exclusive_OR_expression -> AND_expression .)
    COMMA           reduce using rule 21 (exclusive_OR_expression -> AND_expression .)
    RSPAREN         reduce using rule 21 (exclusive_OR_expression -> AND_expression .)
    SEMICOLON       reduce using rule 21 (exclusive_OR_expression -> AND_expression .)
    RCPAREN         reduce using rule 21 (exclusive_OR_expression -> AND_expression .)
    COLON           reduce using rule 21 (exclusive_OR_expression -> AND_expression .)
    RTEMPLATE       reduce using rule 21 (exclusive_OR_expression -> AND_expression .)
    BANDOP          shift and go to state 232


state 140

    (23) AND_expression -> equality_expression .
    (26) equality_expression -> equality_expression . EQCOMP relational_expression
    (27) equality_expression -> equality_expression . NEQCOMP relational_expression

    BANDOP          reduce using rule 23 (AND_expression -> equality_expression .)
    XOROP           reduce using rule 23 (AND_expression -> equality_expression .)
    OROP            reduce using rule 23 (AND_expression -> equality_expression .)
    ANDOP           reduce using rule 23 (AND_expression -> equality_expression .)
    QUESMARK        reduce using rule 23 (AND_expression -> equality_expression .)
    RPAREN          reduce using rule 23 (AND_expression -> equality_expression .)
    COMMA           reduce using rule 23 (AND_expression -> equality_expression .)
    RSPAREN         reduce using rule 23 (AND_expression -> equality_expression .)
    SEMICOLON       reduce using rule 23 (AND_expression -> equality_expression .)
    RCPAREN         reduce using rule 23 (AND_expression -> equality_expression .)
    COLON           reduce using rule 23 (AND_expression -> equality_expression .)
    RTEMPLATE       reduce using rule 23 (AND_expression -> equality_expression .)
    EQCOMP          shift and go to state 233
    NEQCOMP         shift and go to state 234


state 141

    (25) equality_expression -> relational_expression .
    (29) relational_expression -> relational_expression . LTCOMP shift_expression
    (30) relational_expression -> relational_expression . GTCOMP shift_expression
    (31) relational_expression -> relational_expression . LTECOMP shift_expression
    (32) relational_expression -> relational_expression . GTECOMP shift_expression

    EQCOMP          reduce using rule 25 (equality_expression -> relational_expression .)
    NEQCOMP         reduce using rule 25 (equality_expression -> relational_expression .)
    BANDOP          reduce using rule 25 (equality_expression -> relational_expression .)
    XOROP           reduce using rule 25 (equality_expression -> relational_expression .)
    OROP            reduce using rule 25 (equality_expression -> relational_expression .)
    ANDOP           reduce using rule 25 (equality_expression -> relational_expression .)
    QUESMARK        reduce using rule 25 (equality_expression -> relational_expression .)
    RPAREN          reduce using rule 25 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 25 (equality_expression -> relational_expression .)
    RSPAREN         reduce using rule 25 (equality_expression -> relational_expression .)
    SEMICOLON       reduce using rule 25 (equality_expression -> relational_expression .)
    RCPAREN         reduce using rule 25 (equality_expression -> relational_expression .)
    COLON           reduce using rule 25 (equality_expression -> relational_expression .)
    RTEMPLATE       reduce using rule 25 (equality_expression -> relational_expression .)
    LTCOMP          shift and go to state 235
    GTCOMP          shift and go to state 236
    LTECOMP         shift and go to state 237
    GTECOMP         shift and go to state 238


state 142

    (28) relational_expression -> shift_expression .
    (34) shift_expression -> shift_expression . LSHIFT additive_expression
    (35) shift_expression -> shift_expression . RSHIFT additive_expression

    LTCOMP          reduce using rule 28 (relational_expression -> shift_expression .)
    GTCOMP          reduce using rule 28 (relational_expression -> shift_expression .)
    LTECOMP         reduce using rule 28 (relational_expression -> shift_expression .)
    GTECOMP         reduce using rule 28 (relational_expression -> shift_expression .)
    EQCOMP          reduce using rule 28 (relational_expression -> shift_expression .)
    NEQCOMP         reduce using rule 28 (relational_expression -> shift_expression .)
    BANDOP          reduce using rule 28 (relational_expression -> shift_expression .)
    XOROP           reduce using rule 28 (relational_expression -> shift_expression .)
    OROP            reduce using rule 28 (relational_expression -> shift_expression .)
    ANDOP           reduce using rule 28 (relational_expression -> shift_expression .)
    QUESMARK        reduce using rule 28 (relational_expression -> shift_expression .)
    RPAREN          reduce using rule 28 (relational_expression -> shift_expression .)
    COMMA           reduce using rule 28 (relational_expression -> shift_expression .)
    RSPAREN         reduce using rule 28 (relational_expression -> shift_expression .)
    SEMICOLON       reduce using rule 28 (relational_expression -> shift_expression .)
    RCPAREN         reduce using rule 28 (relational_expression -> shift_expression .)
    COLON           reduce using rule 28 (relational_expression -> shift_expression .)
    RTEMPLATE       reduce using rule 28 (relational_expression -> shift_expression .)
    LSHIFT          shift and go to state 239
    RSHIFT          shift and go to state 240


state 143

    (33) shift_expression -> additive_expression .
    (37) additive_expression -> additive_expression . PLUSOP multiplicative_expression
    (38) additive_expression -> additive_expression . MINUSOP multiplicative_expression

    LSHIFT          reduce using rule 33 (shift_expression -> additive_expression .)
    RSHIFT          reduce using rule 33 (shift_expression -> additive_expression .)
    LTCOMP          reduce using rule 33 (shift_expression -> additive_expression .)
    GTCOMP          reduce using rule 33 (shift_expression -> additive_expression .)
    LTECOMP         reduce using rule 33 (shift_expression -> additive_expression .)
    GTECOMP         reduce using rule 33 (shift_expression -> additive_expression .)
    EQCOMP          reduce using rule 33 (shift_expression -> additive_expression .)
    NEQCOMP         reduce using rule 33 (shift_expression -> additive_expression .)
    BANDOP          reduce using rule 33 (shift_expression -> additive_expression .)
    XOROP           reduce using rule 33 (shift_expression -> additive_expression .)
    OROP            reduce using rule 33 (shift_expression -> additive_expression .)
    ANDOP           reduce using rule 33 (shift_expression -> additive_expression .)
    QUESMARK        reduce using rule 33 (shift_expression -> additive_expression .)
    RPAREN          reduce using rule 33 (shift_expression -> additive_expression .)
    COMMA           reduce using rule 33 (shift_expression -> additive_expression .)
    RSPAREN         reduce using rule 33 (shift_expression -> additive_expression .)
    SEMICOLON       reduce using rule 33 (shift_expression -> additive_expression .)
    RCPAREN         reduce using rule 33 (shift_expression -> additive_expression .)
    COLON           reduce using rule 33 (shift_expression -> additive_expression .)
    RTEMPLATE       reduce using rule 33 (shift_expression -> additive_expression .)
    PLUSOP          shift and go to state 241
    MINUSOP         shift and go to state 242


state 144

    (36) additive_expression -> multiplicative_expression .
    (40) multiplicative_expression -> multiplicative_expression . MULTOP pm_expression
    (41) multiplicative_expression -> multiplicative_expression . DIVOP pm_expression
    (42) multiplicative_expression -> multiplicative_expression . MODOP pm_expression

    PLUSOP          reduce using rule 36 (additive_expression -> multiplicative_expression .)
    MINUSOP         reduce using rule 36 (additive_expression -> multiplicative_expression .)
    LSHIFT          reduce using rule 36 (additive_expression -> multiplicative_expression .)
    RSHIFT          reduce using rule 36 (additive_expression -> multiplicative_expression .)
    LTCOMP          reduce using rule 36 (additive_expression -> multiplicative_expression .)
    GTCOMP          reduce using rule 36 (additive_expression -> multiplicative_expression .)
    LTECOMP         reduce using rule 36 (additive_expression -> multiplicative_expression .)
    GTECOMP         reduce using rule 36 (additive_expression -> multiplicative_expression .)
    EQCOMP          reduce using rule 36 (additive_expression -> multiplicative_expression .)
    NEQCOMP         reduce using rule 36 (additive_expression -> multiplicative_expression .)
    BANDOP          reduce using rule 36 (additive_expression -> multiplicative_expression .)
    XOROP           reduce using rule 36 (additive_expression -> multiplicative_expression .)
    OROP            reduce using rule 36 (additive_expression -> multiplicative_expression .)
    ANDOP           reduce using rule 36 (additive_expression -> multiplicative_expression .)
    QUESMARK        reduce using rule 36 (additive_expression -> multiplicative_expression .)
    RPAREN          reduce using rule 36 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 36 (additive_expression -> multiplicative_expression .)
    RSPAREN         reduce using rule 36 (additive_expression -> multiplicative_expression .)
    SEMICOLON       reduce using rule 36 (additive_expression -> multiplicative_expression .)
    RCPAREN         reduce using rule 36 (additive_expression -> multiplicative_expression .)
    COLON           reduce using rule 36 (additive_expression -> multiplicative_expression .)
    RTEMPLATE       reduce using rule 36 (additive_expression -> multiplicative_expression .)
    MULTOP          shift and go to state 243
    DIVOP           shift and go to state 244
    MODOP           shift and go to state 245


state 145

    (39) multiplicative_expression -> pm_expression .
    (44) pm_expression -> pm_expression . DOTSTAR cast_expression
    (45) pm_expression -> pm_expression . ARROWSTAR cast_expression

    MULTOP          reduce using rule 39 (multiplicative_expression -> pm_expression .)
    DIVOP           reduce using rule 39 (multiplicative_expression -> pm_expression .)
    MODOP           reduce using rule 39 (multiplicative_expression -> pm_expression .)
    PLUSOP          reduce using rule 39 (multiplicative_expression -> pm_expression .)
    MINUSOP         reduce using rule 39 (multiplicative_expression -> pm_expression .)
    LSHIFT          reduce using rule 39 (multiplicative_expression -> pm_expression .)
    RSHIFT          reduce using rule 39 (multiplicative_expression -> pm_expression .)
    LTCOMP          reduce using rule 39 (multiplicative_expression -> pm_expression .)
    GTCOMP          reduce using rule 39 (multiplicative_expression -> pm_expression .)
    LTECOMP         reduce using rule 39 (multiplicative_expression -> pm_expression .)
    GTECOMP         reduce using rule 39 (multiplicative_expression -> pm_expression .)
    EQCOMP          reduce using rule 39 (multiplicative_expression -> pm_expression .)
    NEQCOMP         reduce using rule 39 (multiplicative_expression -> pm_expression .)
    BANDOP          reduce using rule 39 (multiplicative_expression -> pm_expression .)
    XOROP           reduce using rule 39 (multiplicative_expression -> pm_expression .)
    OROP            reduce using rule 39 (multiplicative_expression -> pm_expression .)
    ANDOP           reduce using rule 39 (multiplicative_expression -> pm_expression .)
    QUESMARK        reduce using rule 39 (multiplicative_expression -> pm_expression .)
    RPAREN          reduce using rule 39 (multiplicative_expression -> pm_expression .)
    COMMA           reduce using rule 39 (multiplicative_expression -> pm_expression .)
    RSPAREN         reduce using rule 39 (multiplicative_expression -> pm_expression .)
    SEMICOLON       reduce using rule 39 (multiplicative_expression -> pm_expression .)
    RCPAREN         reduce using rule 39 (multiplicative_expression -> pm_expression .)
    COLON           reduce using rule 39 (multiplicative_expression -> pm_expression .)
    RTEMPLATE       reduce using rule 39 (multiplicative_expression -> pm_expression .)
    DOTSTAR         shift and go to state 246
    ARROWSTAR       shift and go to state 247


state 146

    (117) declarator -> declarator LSPAREN constant_expression . RSPAREN

    RSPAREN         shift and go to state 248


state 147

    (118) declarator -> declarator LSPAREN RSPAREN .

    LPAREN          reduce using rule 118 (declarator -> declarator LSPAREN RSPAREN .)
    LSPAREN         reduce using rule 118 (declarator -> declarator LSPAREN RSPAREN .)
    EQUAL           reduce using rule 118 (declarator -> declarator LSPAREN RSPAREN .)
    SEMICOLON       reduce using rule 118 (declarator -> declarator LSPAREN RSPAREN .)
    COMMA           reduce using rule 118 (declarator -> declarator LSPAREN RSPAREN .)
    RTEMPLATE       reduce using rule 118 (declarator -> declarator LSPAREN RSPAREN .)
    RPAREN          reduce using rule 118 (declarator -> declarator LSPAREN RSPAREN .)


state 148

    (12) constant_expression -> conditional_expression .

    RSPAREN         reduce using rule 12 (constant_expression -> conditional_expression .)
    COLON           reduce using rule 12 (constant_expression -> conditional_expression .)


state 149

    (107) cast_expression -> unary_expression .

    DOTSTAR         reduce using rule 107 (cast_expression -> unary_expression .)
    ARROWSTAR       reduce using rule 107 (cast_expression -> unary_expression .)
    MULTOP          reduce using rule 107 (cast_expression -> unary_expression .)
    DIVOP           reduce using rule 107 (cast_expression -> unary_expression .)
    MODOP           reduce using rule 107 (cast_expression -> unary_expression .)
    PLUSOP          reduce using rule 107 (cast_expression -> unary_expression .)
    MINUSOP         reduce using rule 107 (cast_expression -> unary_expression .)
    LSHIFT          reduce using rule 107 (cast_expression -> unary_expression .)
    RSHIFT          reduce using rule 107 (cast_expression -> unary_expression .)
    LTCOMP          reduce using rule 107 (cast_expression -> unary_expression .)
    GTCOMP          reduce using rule 107 (cast_expression -> unary_expression .)
    LTECOMP         reduce using rule 107 (cast_expression -> unary_expression .)
    GTECOMP         reduce using rule 107 (cast_expression -> unary_expression .)
    EQCOMP          reduce using rule 107 (cast_expression -> unary_expression .)
    NEQCOMP         reduce using rule 107 (cast_expression -> unary_expression .)
    BANDOP          reduce using rule 107 (cast_expression -> unary_expression .)
    XOROP           reduce using rule 107 (cast_expression -> unary_expression .)
    OROP            reduce using rule 107 (cast_expression -> unary_expression .)
    ANDOP           reduce using rule 107 (cast_expression -> unary_expression .)
    QUESMARK        reduce using rule 107 (cast_expression -> unary_expression .)
    RSPAREN         reduce using rule 107 (cast_expression -> unary_expression .)
    EQUAL           reduce using rule 107 (cast_expression -> unary_expression .)
    MULTEQOP        reduce using rule 107 (cast_expression -> unary_expression .)
    DIVEQOP         reduce using rule 107 (cast_expression -> unary_expression .)
    MODEQOP         reduce using rule 107 (cast_expression -> unary_expression .)
    PLUSEQOP        reduce using rule 107 (cast_expression -> unary_expression .)
    MINUSEQOP       reduce using rule 107 (cast_expression -> unary_expression .)
    LSHIFTEQOP      reduce using rule 107 (cast_expression -> unary_expression .)
    RSHIFTEQOP      reduce using rule 107 (cast_expression -> unary_expression .)
    BANDEQOP        reduce using rule 107 (cast_expression -> unary_expression .)
    BOREQOP         reduce using rule 107 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 107 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 107 (cast_expression -> unary_expression .)
    SEMICOLON       reduce using rule 107 (cast_expression -> unary_expression .)
    RCPAREN         reduce using rule 107 (cast_expression -> unary_expression .)
    COLON           reduce using rule 107 (cast_expression -> unary_expression .)
    RTEMPLATE       reduce using rule 107 (cast_expression -> unary_expression .)


state 150

    (108) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (103) primary_expression -> LPAREN . expression RPAREN
    (166) type_name -> . type_specifier_ abstract_declarator
    (167) type_name -> . type_specifier_
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (168) type_specifier_ -> . CONST type_specifier
    (169) type_specifier_ -> . type_specifier
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (172) type_specifier -> . simple_type_name
    (173) type_specifier -> . complex_type_specifier
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (174) simple_type_name -> . CHAR
    (175) simple_type_name -> . SHORT
    (176) simple_type_name -> . INT
    (177) simple_type_name -> . LONG
    (178) simple_type_name -> . SIGNED
    (179) simple_type_name -> . UNSIGNED
    (180) simple_type_name -> . FLOAT
    (181) simple_type_name -> . DOUBLE
    (182) simple_type_name -> . VOID
    (183) simple_type_name -> . STRING
    (184) simple_type_name -> . AUTO
    (185) complex_type_specifier -> . class_key IDENTIFIER
    (186) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (187) complex_type_specifier -> . TYPE IDENTIFIER
    (188) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (201) class_key -> . CLASS
    (202) class_key -> . STRUCT
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    CONST           shift and go to state 16
    THROW           shift and go to state 190
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38
    THIS            shift and go to state 134
    LPAREN          shift and go to state 105
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    type_name                      shift and go to state 187
    cast_expression                shift and go to state 118
    expression                     shift and go to state 186
    type_specifier_                shift and go to state 184
    assignment_expression          shift and go to state 188
    throw_expression               shift and go to state 189
    type_specifier                 shift and go to state 17
    conditional_expression         shift and go to state 111
    unary_expression               shift and go to state 112
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    class_key                      shift and go to state 56
    logical_AND_expression         shift and go to state 123
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    inclusive_OR_expression        shift and go to state 132
    literal                        shift and go to state 133
    exclusive_OR_expression        shift and go to state 135
    AND_expression                 shift and go to state 139
    equality_expression            shift and go to state 140
    relational_expression          shift and go to state 141
    shift_expression               shift and go to state 142
    additive_expression            shift and go to state 143
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145

state 151

    (279) initializer -> EQUAL assignment_expression .

    SEMICOLON       reduce using rule 279 (initializer -> EQUAL assignment_expression .)
    COMMA           reduce using rule 279 (initializer -> EQUAL assignment_expression .)


state 152

    (280) initializer -> EQUAL LCPAREN . initializer_list RCPAREN
    (281) initializer -> EQUAL LCPAREN . initializer_list COMMA RCPAREN
    (283) initializer_list -> . assignment_expression
    (284) initializer_list -> . initializer_list COMMA assignment_expression
    (285) initializer_list -> . LCPAREN initializer_list RCPAREN
    (286) initializer_list -> . LCPAREN initializer_list COMMA RCPAREN
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LCPAREN         shift and go to state 249
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    THIS            shift and go to state 134
    LPAREN          shift and go to state 105
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    initializer_list               shift and go to state 250
    assignment_expression          shift and go to state 251
    conditional_expression         shift and go to state 111
    unary_expression               shift and go to state 112
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    cast_expression                shift and go to state 118
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    logical_AND_expression         shift and go to state 123
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    inclusive_OR_expression        shift and go to state 132
    literal                        shift and go to state 133
    exclusive_OR_expression        shift and go to state 135
    AND_expression                 shift and go to state 139
    equality_expression            shift and go to state 140
    relational_expression          shift and go to state 141
    shift_expression               shift and go to state 142
    additive_expression            shift and go to state 143
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145

state 153

    (287) asm_declaration -> ASM LPAREN STRING_L RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 252


state 154

    (203) class_define_specifier -> class_head LCPAREN member_list RCPAREN .

    SEMICOLON       reduce using rule 203 (class_define_specifier -> class_head LCPAREN member_list RCPAREN .)


state 155

    (207) member_list -> member_list access_list .

    RCPAREN         reduce using rule 207 (member_list -> member_list access_list .)
    PRIVATE         reduce using rule 207 (member_list -> member_list access_list .)
    PROTECTED       reduce using rule 207 (member_list -> member_list access_list .)
    PUBLIC          reduce using rule 207 (member_list -> member_list access_list .)


state 156

    (213) member_access_list -> member_declaration member_access_list .

    RCPAREN         reduce using rule 213 (member_access_list -> member_declaration member_access_list .)
    PRIVATE         reduce using rule 213 (member_access_list -> member_declaration member_access_list .)
    PROTECTED       reduce using rule 213 (member_access_list -> member_declaration member_access_list .)
    PUBLIC          reduce using rule 213 (member_access_list -> member_declaration member_access_list .)


state 157

    (211) access_list -> access_specifier COLON . member_access_list
    (212) access_list -> access_specifier COLON .
    (213) member_access_list -> . member_declaration member_access_list
    (214) member_access_list -> . member_declaration
    (215) member_declaration -> . type_specifier_ member_declarator_list SEMICOLON
    (216) member_declaration -> . member_declarator_list SEMICOLON
    (217) member_declaration -> . type_specifier_ SEMICOLON
    (218) member_declaration -> . SEMICOLON
    (219) member_declaration -> . function_definition
    (220) member_declaration -> . class_define_specifier SEMICOLON
    (168) type_specifier_ -> . CONST type_specifier
    (169) type_specifier_ -> . type_specifier
    (221) member_declarator_list -> . member_declarator
    (222) member_declarator_list -> . member_declarator_list COMMA member_declarator
    (225) function_definition -> . type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body
    (226) function_definition -> . type_specifier_ declarator LPAREN RPAREN fct_body
    (203) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (204) class_define_specifier -> . class_head LCPAREN RCPAREN
    (172) type_specifier -> . simple_type_name
    (173) type_specifier -> . complex_type_specifier
    (223) member_declarator -> . declarator pure_specifier
    (224) member_declarator -> . declarator
    (190) class_head -> . class_key IDENTIFIER base_spec
    (191) class_head -> . class_key IDENTIFIER
    (174) simple_type_name -> . CHAR
    (175) simple_type_name -> . SHORT
    (176) simple_type_name -> . INT
    (177) simple_type_name -> . LONG
    (178) simple_type_name -> . SIGNED
    (179) simple_type_name -> . UNSIGNED
    (180) simple_type_name -> . FLOAT
    (181) simple_type_name -> . DOUBLE
    (182) simple_type_name -> . VOID
    (183) simple_type_name -> . STRING
    (184) simple_type_name -> . AUTO
    (185) complex_type_specifier -> . class_key IDENTIFIER
    (186) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (187) complex_type_specifier -> . TYPE IDENTIFIER
    (188) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (115) declarator -> . name
    (116) declarator -> . unary2_operator declarator
    (117) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (118) declarator -> . declarator LSPAREN RSPAREN
    (201) class_key -> . CLASS
    (202) class_key -> . STRUCT
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP

    RCPAREN         reduce using rule 212 (access_list -> access_specifier COLON .)
    PRIVATE         reduce using rule 212 (access_list -> access_specifier COLON .)
    PROTECTED       reduce using rule 212 (access_list -> access_specifier COLON .)
    PUBLIC          reduce using rule 212 (access_list -> access_specifier COLON .)
    SEMICOLON       shift and go to state 82
    CONST           shift and go to state 16
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53

    member_access_list             shift and go to state 253
    member_declaration             shift and go to state 78
    type_specifier_                shift and go to state 80
    member_declarator_list         shift and go to state 81
    function_definition            shift and go to state 83
    class_define_specifier         shift and go to state 84
    type_specifier                 shift and go to state 17
    member_declarator              shift and go to state 88
    declarator                     shift and go to state 89
    class_head                     shift and go to state 19
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 24
    name                           shift and go to state 48
    unary2_operator                shift and go to state 49

state 158

    (215) member_declaration -> type_specifier_ member_declarator_list . SEMICOLON
    (222) member_declarator_list -> member_declarator_list . COMMA member_declarator

    SEMICOLON       shift and go to state 254
    COMMA           shift and go to state 162


state 159

    (217) member_declaration -> type_specifier_ SEMICOLON .

    SEMICOLON       reduce using rule 217 (member_declaration -> type_specifier_ SEMICOLON .)
    CONST           reduce using rule 217 (member_declaration -> type_specifier_ SEMICOLON .)
    CHAR            reduce using rule 217 (member_declaration -> type_specifier_ SEMICOLON .)
    SHORT           reduce using rule 217 (member_declaration -> type_specifier_ SEMICOLON .)
    INT             reduce using rule 217 (member_declaration -> type_specifier_ SEMICOLON .)
    LONG            reduce using rule 217 (member_declaration -> type_specifier_ SEMICOLON .)
    SIGNED          reduce using rule 217 (member_declaration -> type_specifier_ SEMICOLON .)
    UNSIGNED        reduce using rule 217 (member_declaration -> type_specifier_ SEMICOLON .)
    FLOAT           reduce using rule 217 (member_declaration -> type_specifier_ SEMICOLON .)
    DOUBLE          reduce using rule 217 (member_declaration -> type_specifier_ SEMICOLON .)
    VOID            reduce using rule 217 (member_declaration -> type_specifier_ SEMICOLON .)
    STRING          reduce using rule 217 (member_declaration -> type_specifier_ SEMICOLON .)
    AUTO            reduce using rule 217 (member_declaration -> type_specifier_ SEMICOLON .)
    TYPE            reduce using rule 217 (member_declaration -> type_specifier_ SEMICOLON .)
    CLASS           reduce using rule 217 (member_declaration -> type_specifier_ SEMICOLON .)
    STRUCT          reduce using rule 217 (member_declaration -> type_specifier_ SEMICOLON .)
    IDENTIFIER      reduce using rule 217 (member_declaration -> type_specifier_ SEMICOLON .)
    DOUBLEBNOP      reduce using rule 217 (member_declaration -> type_specifier_ SEMICOLON .)
    MULTOP          reduce using rule 217 (member_declaration -> type_specifier_ SEMICOLON .)
    BANDOP          reduce using rule 217 (member_declaration -> type_specifier_ SEMICOLON .)
    RCPAREN         reduce using rule 217 (member_declaration -> type_specifier_ SEMICOLON .)
    PRIVATE         reduce using rule 217 (member_declaration -> type_specifier_ SEMICOLON .)
    PROTECTED       reduce using rule 217 (member_declaration -> type_specifier_ SEMICOLON .)
    PUBLIC          reduce using rule 217 (member_declaration -> type_specifier_ SEMICOLON .)


state 160

    (225) function_definition -> type_specifier_ declarator . LPAREN argument_declaration_list RPAREN fct_body
    (226) function_definition -> type_specifier_ declarator . LPAREN RPAREN fct_body
    (117) declarator -> declarator . LSPAREN constant_expression RSPAREN
    (118) declarator -> declarator . LSPAREN RSPAREN
    (223) member_declarator -> declarator . pure_specifier
    (224) member_declarator -> declarator .
    (189) pure_specifier -> . EQUAL NUMBER

    LPAREN          shift and go to state 255
    LSPAREN         shift and go to state 67
    SEMICOLON       reduce using rule 224 (member_declarator -> declarator .)
    COMMA           reduce using rule 224 (member_declarator -> declarator .)
    EQUAL           shift and go to state 165

    pure_specifier                 shift and go to state 164

state 161

    (216) member_declaration -> member_declarator_list SEMICOLON .

    SEMICOLON       reduce using rule 216 (member_declaration -> member_declarator_list SEMICOLON .)
    CONST           reduce using rule 216 (member_declaration -> member_declarator_list SEMICOLON .)
    CHAR            reduce using rule 216 (member_declaration -> member_declarator_list SEMICOLON .)
    SHORT           reduce using rule 216 (member_declaration -> member_declarator_list SEMICOLON .)
    INT             reduce using rule 216 (member_declaration -> member_declarator_list SEMICOLON .)
    LONG            reduce using rule 216 (member_declaration -> member_declarator_list SEMICOLON .)
    SIGNED          reduce using rule 216 (member_declaration -> member_declarator_list SEMICOLON .)
    UNSIGNED        reduce using rule 216 (member_declaration -> member_declarator_list SEMICOLON .)
    FLOAT           reduce using rule 216 (member_declaration -> member_declarator_list SEMICOLON .)
    DOUBLE          reduce using rule 216 (member_declaration -> member_declarator_list SEMICOLON .)
    VOID            reduce using rule 216 (member_declaration -> member_declarator_list SEMICOLON .)
    STRING          reduce using rule 216 (member_declaration -> member_declarator_list SEMICOLON .)
    AUTO            reduce using rule 216 (member_declaration -> member_declarator_list SEMICOLON .)
    TYPE            reduce using rule 216 (member_declaration -> member_declarator_list SEMICOLON .)
    CLASS           reduce using rule 216 (member_declaration -> member_declarator_list SEMICOLON .)
    STRUCT          reduce using rule 216 (member_declaration -> member_declarator_list SEMICOLON .)
    IDENTIFIER      reduce using rule 216 (member_declaration -> member_declarator_list SEMICOLON .)
    DOUBLEBNOP      reduce using rule 216 (member_declaration -> member_declarator_list SEMICOLON .)
    MULTOP          reduce using rule 216 (member_declaration -> member_declarator_list SEMICOLON .)
    BANDOP          reduce using rule 216 (member_declaration -> member_declarator_list SEMICOLON .)
    RCPAREN         reduce using rule 216 (member_declaration -> member_declarator_list SEMICOLON .)
    PRIVATE         reduce using rule 216 (member_declaration -> member_declarator_list SEMICOLON .)
    PROTECTED       reduce using rule 216 (member_declaration -> member_declarator_list SEMICOLON .)
    PUBLIC          reduce using rule 216 (member_declaration -> member_declarator_list SEMICOLON .)


state 162

    (222) member_declarator_list -> member_declarator_list COMMA . member_declarator
    (223) member_declarator -> . declarator pure_specifier
    (224) member_declarator -> . declarator
    (115) declarator -> . name
    (116) declarator -> . unary2_operator declarator
    (117) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (118) declarator -> . declarator LSPAREN RSPAREN
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP

    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53

    member_declarator              shift and go to state 256
    declarator                     shift and go to state 89
    name                           shift and go to state 48
    unary2_operator                shift and go to state 49

state 163

    (220) member_declaration -> class_define_specifier SEMICOLON .

    SEMICOLON       reduce using rule 220 (member_declaration -> class_define_specifier SEMICOLON .)
    CONST           reduce using rule 220 (member_declaration -> class_define_specifier SEMICOLON .)
    CHAR            reduce using rule 220 (member_declaration -> class_define_specifier SEMICOLON .)
    SHORT           reduce using rule 220 (member_declaration -> class_define_specifier SEMICOLON .)
    INT             reduce using rule 220 (member_declaration -> class_define_specifier SEMICOLON .)
    LONG            reduce using rule 220 (member_declaration -> class_define_specifier SEMICOLON .)
    SIGNED          reduce using rule 220 (member_declaration -> class_define_specifier SEMICOLON .)
    UNSIGNED        reduce using rule 220 (member_declaration -> class_define_specifier SEMICOLON .)
    FLOAT           reduce using rule 220 (member_declaration -> class_define_specifier SEMICOLON .)
    DOUBLE          reduce using rule 220 (member_declaration -> class_define_specifier SEMICOLON .)
    VOID            reduce using rule 220 (member_declaration -> class_define_specifier SEMICOLON .)
    STRING          reduce using rule 220 (member_declaration -> class_define_specifier SEMICOLON .)
    AUTO            reduce using rule 220 (member_declaration -> class_define_specifier SEMICOLON .)
    TYPE            reduce using rule 220 (member_declaration -> class_define_specifier SEMICOLON .)
    CLASS           reduce using rule 220 (member_declaration -> class_define_specifier SEMICOLON .)
    STRUCT          reduce using rule 220 (member_declaration -> class_define_specifier SEMICOLON .)
    IDENTIFIER      reduce using rule 220 (member_declaration -> class_define_specifier SEMICOLON .)
    DOUBLEBNOP      reduce using rule 220 (member_declaration -> class_define_specifier SEMICOLON .)
    MULTOP          reduce using rule 220 (member_declaration -> class_define_specifier SEMICOLON .)
    BANDOP          reduce using rule 220 (member_declaration -> class_define_specifier SEMICOLON .)
    RCPAREN         reduce using rule 220 (member_declaration -> class_define_specifier SEMICOLON .)
    PRIVATE         reduce using rule 220 (member_declaration -> class_define_specifier SEMICOLON .)
    PROTECTED       reduce using rule 220 (member_declaration -> class_define_specifier SEMICOLON .)
    PUBLIC          reduce using rule 220 (member_declaration -> class_define_specifier SEMICOLON .)


state 164

    (223) member_declarator -> declarator pure_specifier .

    SEMICOLON       reduce using rule 223 (member_declarator -> declarator pure_specifier .)
    COMMA           reduce using rule 223 (member_declarator -> declarator pure_specifier .)


state 165

    (189) pure_specifier -> EQUAL . NUMBER

    NUMBER          shift and go to state 257


state 166

    (272) template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE . declaration
    (265) declaration -> . type_specifier_ declarator_list SEMICOLON
    (266) declaration -> . asm_declaration
    (267) declaration -> . function_definition
    (268) declaration -> . function_decl
    (269) declaration -> . class_define_specifier SEMICOLON
    (270) declaration -> . template_declaration
    (271) declaration -> . typedef_declarator
    (168) type_specifier_ -> . CONST type_specifier
    (169) type_specifier_ -> . type_specifier
    (287) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (225) function_definition -> . type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body
    (226) function_definition -> . type_specifier_ declarator LPAREN RPAREN fct_body
    (227) function_decl -> . type_specifier_ declarator LPAREN argument_declaration_list RPAREN
    (228) function_decl -> . type_specifier_ declarator LPAREN RPAREN
    (203) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (204) class_define_specifier -> . class_head LCPAREN RCPAREN
    (272) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (170) typedef_declarator -> . TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON
    (171) typedef_declarator -> . TYPEDEF type_specifier_ IDENTIFIER SEMICOLON
    (172) type_specifier -> . simple_type_name
    (173) type_specifier -> . complex_type_specifier
    (190) class_head -> . class_key IDENTIFIER base_spec
    (191) class_head -> . class_key IDENTIFIER
    (174) simple_type_name -> . CHAR
    (175) simple_type_name -> . SHORT
    (176) simple_type_name -> . INT
    (177) simple_type_name -> . LONG
    (178) simple_type_name -> . SIGNED
    (179) simple_type_name -> . UNSIGNED
    (180) simple_type_name -> . FLOAT
    (181) simple_type_name -> . DOUBLE
    (182) simple_type_name -> . VOID
    (183) simple_type_name -> . STRING
    (184) simple_type_name -> . AUTO
    (185) complex_type_specifier -> . class_key IDENTIFIER
    (186) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (187) complex_type_specifier -> . TYPE IDENTIFIER
    (188) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (201) class_key -> . CLASS
    (202) class_key -> . STRUCT

    CONST           shift and go to state 16
    ASM             shift and go to state 18
    TEMPLATE        shift and go to state 20
    TYPEDEF         shift and go to state 21
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38

    declaration                    shift and go to state 258
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    function_decl                  shift and go to state 12
    class_define_specifier         shift and go to state 13
    template_declaration           shift and go to state 14
    typedef_declarator             shift and go to state 15
    type_specifier                 shift and go to state 17
    class_head                     shift and go to state 19
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 24

state 167

    (274) template_argument_list -> template_argument_list COMMA . argument_declaration
    (121) argument_declaration -> . type_specifier_ declarator
    (122) argument_declaration -> . type_specifier_ declarator EQUAL expression
    (123) argument_declaration -> . type_specifier_ abstract_declarator
    (124) argument_declaration -> . type_specifier_
    (168) type_specifier_ -> . CONST type_specifier
    (169) type_specifier_ -> . type_specifier
    (172) type_specifier -> . simple_type_name
    (173) type_specifier -> . complex_type_specifier
    (174) simple_type_name -> . CHAR
    (175) simple_type_name -> . SHORT
    (176) simple_type_name -> . INT
    (177) simple_type_name -> . LONG
    (178) simple_type_name -> . SIGNED
    (179) simple_type_name -> . UNSIGNED
    (180) simple_type_name -> . FLOAT
    (181) simple_type_name -> . DOUBLE
    (182) simple_type_name -> . VOID
    (183) simple_type_name -> . STRING
    (184) simple_type_name -> . AUTO
    (185) complex_type_specifier -> . class_key IDENTIFIER
    (186) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (187) complex_type_specifier -> . TYPE IDENTIFIER
    (188) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (201) class_key -> . CLASS
    (202) class_key -> . STRUCT

    CONST           shift and go to state 16
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38

    argument_declaration           shift and go to state 259
    type_specifier_                shift and go to state 92
    type_specifier                 shift and go to state 17
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 56

state 168

    (121) argument_declaration -> type_specifier_ declarator .
    (122) argument_declaration -> type_specifier_ declarator . EQUAL expression
    (117) declarator -> declarator . LSPAREN constant_expression RSPAREN
    (118) declarator -> declarator . LSPAREN RSPAREN

    RTEMPLATE       reduce using rule 121 (argument_declaration -> type_specifier_ declarator .)
    COMMA           reduce using rule 121 (argument_declaration -> type_specifier_ declarator .)
    RPAREN          reduce using rule 121 (argument_declaration -> type_specifier_ declarator .)
    EQUAL           shift and go to state 260
    LSPAREN         shift and go to state 67


state 169

    (123) argument_declaration -> type_specifier_ abstract_declarator .
    (112) abstract_declarator -> abstract_declarator . LSPAREN constant_expression RSPAREN
    (114) abstract_declarator -> abstract_declarator . LSPAREN RSPAREN

    RTEMPLATE       reduce using rule 123 (argument_declaration -> type_specifier_ abstract_declarator .)
    COMMA           reduce using rule 123 (argument_declaration -> type_specifier_ abstract_declarator .)
    RPAREN          reduce using rule 123 (argument_declaration -> type_specifier_ abstract_declarator .)
    LSPAREN         shift and go to state 172


state 170

    (116) declarator -> unary2_operator . declarator
    (109) abstract_declarator -> unary2_operator .
    (110) abstract_declarator -> unary2_operator . abstract_declarator
    (115) declarator -> . name
    (116) declarator -> . unary2_operator declarator
    (117) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (118) declarator -> . declarator LSPAREN RSPAREN
    (109) abstract_declarator -> . unary2_operator
    (110) abstract_declarator -> . unary2_operator abstract_declarator
    (111) abstract_declarator -> . LSPAREN constant_expression RSPAREN
    (112) abstract_declarator -> . abstract_declarator LSPAREN constant_expression RSPAREN
    (113) abstract_declarator -> . LSPAREN RSPAREN
    (114) abstract_declarator -> . abstract_declarator LSPAREN RSPAREN
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP

    LSPAREN         reduce using rule 109 (abstract_declarator -> unary2_operator .)
    RTEMPLATE       reduce using rule 109 (abstract_declarator -> unary2_operator .)
    COMMA           reduce using rule 109 (abstract_declarator -> unary2_operator .)
    RPAREN          reduce using rule 109 (abstract_declarator -> unary2_operator .)
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53

  ! LSPAREN         [ shift and go to state 96 ]

    unary2_operator                shift and go to state 170
    declarator                     shift and go to state 70
    abstract_declarator            shift and go to state 174
    name                           shift and go to state 48

state 171

    (170) typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 261


state 172

    (112) abstract_declarator -> abstract_declarator LSPAREN . constant_expression RSPAREN
    (114) abstract_declarator -> abstract_declarator LSPAREN . RSPAREN
    (12) constant_expression -> . conditional_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR

    RSPAREN         shift and go to state 263
    LPAREN          shift and go to state 150
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    THIS            shift and go to state 134
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    constant_expression            shift and go to state 262
    conditional_expression         shift and go to state 148
    logical_OR_expression          shift and go to state 113
    logical_AND_expression         shift and go to state 123
    inclusive_OR_expression        shift and go to state 132
    exclusive_OR_expression        shift and go to state 135
    AND_expression                 shift and go to state 139
    equality_expression            shift and go to state 140
    relational_expression          shift and go to state 141
    shift_expression               shift and go to state 142
    additive_expression            shift and go to state 143
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145
    cast_expression                shift and go to state 118
    unary_expression               shift and go to state 149
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    literal                        shift and go to state 133

state 173

    (171) typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .

    CONST           reduce using rule 171 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    ASM             reduce using rule 171 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    TEMPLATE        reduce using rule 171 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    TYPEDEF         reduce using rule 171 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    CHAR            reduce using rule 171 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    SHORT           reduce using rule 171 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    INT             reduce using rule 171 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    LONG            reduce using rule 171 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    SIGNED          reduce using rule 171 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    UNSIGNED        reduce using rule 171 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    FLOAT           reduce using rule 171 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    DOUBLE          reduce using rule 171 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    VOID            reduce using rule 171 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    STRING          reduce using rule 171 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    AUTO            reduce using rule 171 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    TYPE            reduce using rule 171 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    CLASS           reduce using rule 171 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    STRUCT          reduce using rule 171 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    $end            reduce using rule 171 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    RCPAREN         reduce using rule 171 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 171 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    CASE            reduce using rule 171 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    DEFAULT         reduce using rule 171 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    SEMICOLON       reduce using rule 171 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    LCPAREN         reduce using rule 171 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    IF              reduce using rule 171 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    SWITCH          reduce using rule 171 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 171 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    DO              reduce using rule 171 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    FOR             reduce using rule 171 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    BREAK           reduce using rule 171 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    CONTINUE        reduce using rule 171 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    RETURN          reduce using rule 171 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    GOTO            reduce using rule 171 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    TRY             reduce using rule 171 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    THROW           reduce using rule 171 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    DPLUSOP         reduce using rule 171 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    DMINUSOP        reduce using rule 171 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    SIZEOF          reduce using rule 171 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    PLUSOP          reduce using rule 171 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    MINUSOP         reduce using rule 171 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    NOTSYM          reduce using rule 171 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    BNOP            reduce using rule 171 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    MULTOP          reduce using rule 171 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    BANDOP          reduce using rule 171 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    NEW             reduce using rule 171 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    DELETE          reduce using rule 171 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    THIS            reduce using rule 171 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    LPAREN          reduce using rule 171 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    DOUBLEBNOP      reduce using rule 171 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    STRING_L        reduce using rule 171 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    NUMBER          reduce using rule 171 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    SCHAR           reduce using rule 171 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)
    ELSE            reduce using rule 171 (typedef_declarator -> TYPEDEF type_specifier_ IDENTIFIER SEMICOLON .)


state 174

    (110) abstract_declarator -> unary2_operator abstract_declarator .
    (112) abstract_declarator -> abstract_declarator . LSPAREN constant_expression RSPAREN
    (114) abstract_declarator -> abstract_declarator . LSPAREN RSPAREN

    IDENTIFIER      reduce using rule 110 (abstract_declarator -> unary2_operator abstract_declarator .)
    LSPAREN         reduce using rule 110 (abstract_declarator -> unary2_operator abstract_declarator .)
    RTEMPLATE       reduce using rule 110 (abstract_declarator -> unary2_operator abstract_declarator .)
    COMMA           reduce using rule 110 (abstract_declarator -> unary2_operator abstract_declarator .)
    RPAREN          reduce using rule 110 (abstract_declarator -> unary2_operator abstract_declarator .)

  ! LSPAREN         [ shift and go to state 172 ]


state 175

    (111) abstract_declarator -> LSPAREN constant_expression . RSPAREN

    RSPAREN         shift and go to state 264


state 176

    (113) abstract_declarator -> LSPAREN RSPAREN .

    IDENTIFIER      reduce using rule 113 (abstract_declarator -> LSPAREN RSPAREN .)
    LSPAREN         reduce using rule 113 (abstract_declarator -> LSPAREN RSPAREN .)
    RTEMPLATE       reduce using rule 113 (abstract_declarator -> LSPAREN RSPAREN .)
    COMMA           reduce using rule 113 (abstract_declarator -> LSPAREN RSPAREN .)
    RPAREN          reduce using rule 113 (abstract_declarator -> LSPAREN RSPAREN .)


state 177

    (192) base_spec -> COLON base_list .
    (194) base_list -> base_list . COMMA base_specifier

    LCPAREN         reduce using rule 192 (base_spec -> COLON base_list .)
    COMMA           shift and go to state 265


state 178

    (193) base_list -> base_specifier .

    COMMA           reduce using rule 193 (base_list -> base_specifier .)
    LCPAREN         reduce using rule 193 (base_list -> base_specifier .)


state 179

    (195) base_specifier -> class_key . IDENTIFIER
    (196) base_specifier -> class_key . IDENTIFIER template_class_name

    IDENTIFIER      shift and go to state 266


state 180

    (197) base_specifier -> IDENTIFIER .
    (198) base_specifier -> IDENTIFIER . template_class_name
    (163) template_class_name -> . LTEMPLATE template_arg_list RTEMPLATE

    COMMA           reduce using rule 197 (base_specifier -> IDENTIFIER .)
    LCPAREN         reduce using rule 197 (base_specifier -> IDENTIFIER .)
    LTEMPLATE       shift and go to state 100

    template_class_name            shift and go to state 267

state 181

    (199) base_specifier -> access_specifier . class_key IDENTIFIER
    (200) base_specifier -> access_specifier . class_key IDENTIFIER template_class_name
    (201) class_key -> . CLASS
    (202) class_key -> . STRUCT

    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38

    class_key                      shift and go to state 268

state 182

    (163) template_class_name -> LTEMPLATE template_arg_list . RTEMPLATE
    (165) template_arg_list -> template_arg_list . COMMA type_name

    RTEMPLATE       shift and go to state 269
    COMMA           shift and go to state 270


state 183

    (164) template_arg_list -> type_name .

    RTEMPLATE       reduce using rule 164 (template_arg_list -> type_name .)
    COMMA           reduce using rule 164 (template_arg_list -> type_name .)


state 184

    (166) type_name -> type_specifier_ . abstract_declarator
    (167) type_name -> type_specifier_ .
    (109) abstract_declarator -> . unary2_operator
    (110) abstract_declarator -> . unary2_operator abstract_declarator
    (111) abstract_declarator -> . LSPAREN constant_expression RSPAREN
    (112) abstract_declarator -> . abstract_declarator LSPAREN constant_expression RSPAREN
    (113) abstract_declarator -> . LSPAREN RSPAREN
    (114) abstract_declarator -> . abstract_declarator LSPAREN RSPAREN
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP

    RTEMPLATE       reduce using rule 167 (type_name -> type_specifier_ .)
    COMMA           reduce using rule 167 (type_name -> type_specifier_ .)
    RPAREN          reduce using rule 167 (type_name -> type_specifier_ .)
    LSPAREN         shift and go to state 96
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53

    abstract_declarator            shift and go to state 271
    unary2_operator                shift and go to state 95

state 185

    (282) initializer -> LPAREN . expression_list RPAREN
    (288) expression_list -> . assignment_expression
    (289) expression_list -> . expression_list COMMA assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    THIS            shift and go to state 134
    LPAREN          shift and go to state 105
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    expression_list                shift and go to state 108
    assignment_expression          shift and go to state 110
    conditional_expression         shift and go to state 111
    unary_expression               shift and go to state 112
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    cast_expression                shift and go to state 118
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    logical_AND_expression         shift and go to state 123
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    inclusive_OR_expression        shift and go to state 132
    literal                        shift and go to state 133
    exclusive_OR_expression        shift and go to state 135
    AND_expression                 shift and go to state 139
    equality_expression            shift and go to state 140
    relational_expression          shift and go to state 141
    shift_expression               shift and go to state 142
    additive_expression            shift and go to state 143
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145

state 186

    (103) primary_expression -> LPAREN expression . RPAREN
    (48) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 272
    COMMA           shift and go to state 273


state 187

    (108) cast_expression -> LPAREN type_name . RPAREN cast_expression

    RPAREN          shift and go to state 274


state 188

    (46) expression -> assignment_expression .

    RPAREN          reduce using rule 46 (expression -> assignment_expression .)
    COMMA           reduce using rule 46 (expression -> assignment_expression .)
    SEMICOLON       reduce using rule 46 (expression -> assignment_expression .)
    COLON           reduce using rule 46 (expression -> assignment_expression .)
    RSPAREN         reduce using rule 46 (expression -> assignment_expression .)
    RTEMPLATE       reduce using rule 46 (expression -> assignment_expression .)


state 189

    (47) expression -> throw_expression .

    RPAREN          reduce using rule 47 (expression -> throw_expression .)
    COMMA           reduce using rule 47 (expression -> throw_expression .)
    SEMICOLON       reduce using rule 47 (expression -> throw_expression .)
    COLON           reduce using rule 47 (expression -> throw_expression .)
    RSPAREN         reduce using rule 47 (expression -> throw_expression .)
    RTEMPLATE       reduce using rule 47 (expression -> throw_expression .)


state 190

    (49) throw_expression -> THROW . expression
    (50) throw_expression -> THROW .
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          reduce using rule 50 (throw_expression -> THROW .)
    COMMA           reduce using rule 50 (throw_expression -> THROW .)
    SEMICOLON       reduce using rule 50 (throw_expression -> THROW .)
    COLON           reduce using rule 50 (throw_expression -> THROW .)
    RSPAREN         reduce using rule 50 (throw_expression -> THROW .)
    RTEMPLATE       reduce using rule 50 (throw_expression -> THROW .)
    THROW           shift and go to state 190
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    THIS            shift and go to state 134
    LPAREN          shift and go to state 105
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    expression                     shift and go to state 275
    assignment_expression          shift and go to state 188
    throw_expression               shift and go to state 189
    conditional_expression         shift and go to state 111
    unary_expression               shift and go to state 112
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    cast_expression                shift and go to state 118
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    logical_AND_expression         shift and go to state 123
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    inclusive_OR_expression        shift and go to state 132
    literal                        shift and go to state 133
    exclusive_OR_expression        shift and go to state 135
    AND_expression                 shift and go to state 139
    equality_expression            shift and go to state 140
    relational_expression          shift and go to state 141
    shift_expression               shift and go to state 142
    additive_expression            shift and go to state 143
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145

state 191

    (225) function_definition -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN . fct_body
    (227) function_decl -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN .
    (229) fct_body -> . compound_statement
    (230) compound_statement -> . LCPAREN statement_list RCPAREN
    (231) compound_statement -> . LCPAREN RCPAREN

  ! shift/reduce conflict for LCPAREN resolved as shift
    CONST           reduce using rule 227 (function_decl -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN .)
    ASM             reduce using rule 227 (function_decl -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN .)
    TEMPLATE        reduce using rule 227 (function_decl -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN .)
    TYPEDEF         reduce using rule 227 (function_decl -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN .)
    CHAR            reduce using rule 227 (function_decl -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN .)
    SHORT           reduce using rule 227 (function_decl -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN .)
    INT             reduce using rule 227 (function_decl -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN .)
    LONG            reduce using rule 227 (function_decl -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN .)
    SIGNED          reduce using rule 227 (function_decl -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN .)
    UNSIGNED        reduce using rule 227 (function_decl -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN .)
    FLOAT           reduce using rule 227 (function_decl -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN .)
    DOUBLE          reduce using rule 227 (function_decl -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN .)
    VOID            reduce using rule 227 (function_decl -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN .)
    STRING          reduce using rule 227 (function_decl -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN .)
    AUTO            reduce using rule 227 (function_decl -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN .)
    TYPE            reduce using rule 227 (function_decl -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN .)
    CLASS           reduce using rule 227 (function_decl -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN .)
    STRUCT          reduce using rule 227 (function_decl -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN .)
    $end            reduce using rule 227 (function_decl -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN .)
    RCPAREN         reduce using rule 227 (function_decl -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN .)
    IDENTIFIER      reduce using rule 227 (function_decl -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN .)
    CASE            reduce using rule 227 (function_decl -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN .)
    DEFAULT         reduce using rule 227 (function_decl -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN .)
    SEMICOLON       reduce using rule 227 (function_decl -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN .)
    IF              reduce using rule 227 (function_decl -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN .)
    SWITCH          reduce using rule 227 (function_decl -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN .)
    WHILE           reduce using rule 227 (function_decl -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN .)
    DO              reduce using rule 227 (function_decl -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN .)
    FOR             reduce using rule 227 (function_decl -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN .)
    BREAK           reduce using rule 227 (function_decl -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN .)
    CONTINUE        reduce using rule 227 (function_decl -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN .)
    RETURN          reduce using rule 227 (function_decl -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN .)
    GOTO            reduce using rule 227 (function_decl -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN .)
    TRY             reduce using rule 227 (function_decl -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN .)
    THROW           reduce using rule 227 (function_decl -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN .)
    DPLUSOP         reduce using rule 227 (function_decl -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN .)
    DMINUSOP        reduce using rule 227 (function_decl -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN .)
    SIZEOF          reduce using rule 227 (function_decl -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN .)
    PLUSOP          reduce using rule 227 (function_decl -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN .)
    MINUSOP         reduce using rule 227 (function_decl -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN .)
    NOTSYM          reduce using rule 227 (function_decl -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN .)
    BNOP            reduce using rule 227 (function_decl -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN .)
    MULTOP          reduce using rule 227 (function_decl -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN .)
    BANDOP          reduce using rule 227 (function_decl -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN .)
    NEW             reduce using rule 227 (function_decl -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN .)
    DELETE          reduce using rule 227 (function_decl -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN .)
    THIS            reduce using rule 227 (function_decl -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN .)
    LPAREN          reduce using rule 227 (function_decl -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN .)
    DOUBLEBNOP      reduce using rule 227 (function_decl -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN .)
    STRING_L        reduce using rule 227 (function_decl -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN .)
    NUMBER          reduce using rule 227 (function_decl -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN .)
    SCHAR           reduce using rule 227 (function_decl -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN .)
    ELSE            reduce using rule 227 (function_decl -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN .)
    LCPAREN         shift and go to state 194

  ! LCPAREN         [ reduce using rule 227 (function_decl -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN .) ]

    fct_body                       shift and go to state 276
    compound_statement             shift and go to state 193

state 192

    (226) function_definition -> type_specifier_ declarator LPAREN RPAREN fct_body .

    CONST           reduce using rule 226 (function_definition -> type_specifier_ declarator LPAREN RPAREN fct_body .)
    ASM             reduce using rule 226 (function_definition -> type_specifier_ declarator LPAREN RPAREN fct_body .)
    TEMPLATE        reduce using rule 226 (function_definition -> type_specifier_ declarator LPAREN RPAREN fct_body .)
    TYPEDEF         reduce using rule 226 (function_definition -> type_specifier_ declarator LPAREN RPAREN fct_body .)
    CHAR            reduce using rule 226 (function_definition -> type_specifier_ declarator LPAREN RPAREN fct_body .)
    SHORT           reduce using rule 226 (function_definition -> type_specifier_ declarator LPAREN RPAREN fct_body .)
    INT             reduce using rule 226 (function_definition -> type_specifier_ declarator LPAREN RPAREN fct_body .)
    LONG            reduce using rule 226 (function_definition -> type_specifier_ declarator LPAREN RPAREN fct_body .)
    SIGNED          reduce using rule 226 (function_definition -> type_specifier_ declarator LPAREN RPAREN fct_body .)
    UNSIGNED        reduce using rule 226 (function_definition -> type_specifier_ declarator LPAREN RPAREN fct_body .)
    FLOAT           reduce using rule 226 (function_definition -> type_specifier_ declarator LPAREN RPAREN fct_body .)
    DOUBLE          reduce using rule 226 (function_definition -> type_specifier_ declarator LPAREN RPAREN fct_body .)
    VOID            reduce using rule 226 (function_definition -> type_specifier_ declarator LPAREN RPAREN fct_body .)
    STRING          reduce using rule 226 (function_definition -> type_specifier_ declarator LPAREN RPAREN fct_body .)
    AUTO            reduce using rule 226 (function_definition -> type_specifier_ declarator LPAREN RPAREN fct_body .)
    TYPE            reduce using rule 226 (function_definition -> type_specifier_ declarator LPAREN RPAREN fct_body .)
    CLASS           reduce using rule 226 (function_definition -> type_specifier_ declarator LPAREN RPAREN fct_body .)
    STRUCT          reduce using rule 226 (function_definition -> type_specifier_ declarator LPAREN RPAREN fct_body .)
    $end            reduce using rule 226 (function_definition -> type_specifier_ declarator LPAREN RPAREN fct_body .)
    SEMICOLON       reduce using rule 226 (function_definition -> type_specifier_ declarator LPAREN RPAREN fct_body .)
    IDENTIFIER      reduce using rule 226 (function_definition -> type_specifier_ declarator LPAREN RPAREN fct_body .)
    DOUBLEBNOP      reduce using rule 226 (function_definition -> type_specifier_ declarator LPAREN RPAREN fct_body .)
    MULTOP          reduce using rule 226 (function_definition -> type_specifier_ declarator LPAREN RPAREN fct_body .)
    BANDOP          reduce using rule 226 (function_definition -> type_specifier_ declarator LPAREN RPAREN fct_body .)
    RCPAREN         reduce using rule 226 (function_definition -> type_specifier_ declarator LPAREN RPAREN fct_body .)
    PRIVATE         reduce using rule 226 (function_definition -> type_specifier_ declarator LPAREN RPAREN fct_body .)
    PROTECTED       reduce using rule 226 (function_definition -> type_specifier_ declarator LPAREN RPAREN fct_body .)
    PUBLIC          reduce using rule 226 (function_definition -> type_specifier_ declarator LPAREN RPAREN fct_body .)
    CASE            reduce using rule 226 (function_definition -> type_specifier_ declarator LPAREN RPAREN fct_body .)
    DEFAULT         reduce using rule 226 (function_definition -> type_specifier_ declarator LPAREN RPAREN fct_body .)
    LCPAREN         reduce using rule 226 (function_definition -> type_specifier_ declarator LPAREN RPAREN fct_body .)
    IF              reduce using rule 226 (function_definition -> type_specifier_ declarator LPAREN RPAREN fct_body .)
    SWITCH          reduce using rule 226 (function_definition -> type_specifier_ declarator LPAREN RPAREN fct_body .)
    WHILE           reduce using rule 226 (function_definition -> type_specifier_ declarator LPAREN RPAREN fct_body .)
    DO              reduce using rule 226 (function_definition -> type_specifier_ declarator LPAREN RPAREN fct_body .)
    FOR             reduce using rule 226 (function_definition -> type_specifier_ declarator LPAREN RPAREN fct_body .)
    BREAK           reduce using rule 226 (function_definition -> type_specifier_ declarator LPAREN RPAREN fct_body .)
    CONTINUE        reduce using rule 226 (function_definition -> type_specifier_ declarator LPAREN RPAREN fct_body .)
    RETURN          reduce using rule 226 (function_definition -> type_specifier_ declarator LPAREN RPAREN fct_body .)
    GOTO            reduce using rule 226 (function_definition -> type_specifier_ declarator LPAREN RPAREN fct_body .)
    TRY             reduce using rule 226 (function_definition -> type_specifier_ declarator LPAREN RPAREN fct_body .)
    THROW           reduce using rule 226 (function_definition -> type_specifier_ declarator LPAREN RPAREN fct_body .)
    DPLUSOP         reduce using rule 226 (function_definition -> type_specifier_ declarator LPAREN RPAREN fct_body .)
    DMINUSOP        reduce using rule 226 (function_definition -> type_specifier_ declarator LPAREN RPAREN fct_body .)
    SIZEOF          reduce using rule 226 (function_definition -> type_specifier_ declarator LPAREN RPAREN fct_body .)
    PLUSOP          reduce using rule 226 (function_definition -> type_specifier_ declarator LPAREN RPAREN fct_body .)
    MINUSOP         reduce using rule 226 (function_definition -> type_specifier_ declarator LPAREN RPAREN fct_body .)
    NOTSYM          reduce using rule 226 (function_definition -> type_specifier_ declarator LPAREN RPAREN fct_body .)
    BNOP            reduce using rule 226 (function_definition -> type_specifier_ declarator LPAREN RPAREN fct_body .)
    NEW             reduce using rule 226 (function_definition -> type_specifier_ declarator LPAREN RPAREN fct_body .)
    DELETE          reduce using rule 226 (function_definition -> type_specifier_ declarator LPAREN RPAREN fct_body .)
    THIS            reduce using rule 226 (function_definition -> type_specifier_ declarator LPAREN RPAREN fct_body .)
    LPAREN          reduce using rule 226 (function_definition -> type_specifier_ declarator LPAREN RPAREN fct_body .)
    STRING_L        reduce using rule 226 (function_definition -> type_specifier_ declarator LPAREN RPAREN fct_body .)
    NUMBER          reduce using rule 226 (function_definition -> type_specifier_ declarator LPAREN RPAREN fct_body .)
    SCHAR           reduce using rule 226 (function_definition -> type_specifier_ declarator LPAREN RPAREN fct_body .)
    ELSE            reduce using rule 226 (function_definition -> type_specifier_ declarator LPAREN RPAREN fct_body .)


state 193

    (229) fct_body -> compound_statement .

    CONST           reduce using rule 229 (fct_body -> compound_statement .)
    ASM             reduce using rule 229 (fct_body -> compound_statement .)
    TEMPLATE        reduce using rule 229 (fct_body -> compound_statement .)
    TYPEDEF         reduce using rule 229 (fct_body -> compound_statement .)
    CHAR            reduce using rule 229 (fct_body -> compound_statement .)
    SHORT           reduce using rule 229 (fct_body -> compound_statement .)
    INT             reduce using rule 229 (fct_body -> compound_statement .)
    LONG            reduce using rule 229 (fct_body -> compound_statement .)
    SIGNED          reduce using rule 229 (fct_body -> compound_statement .)
    UNSIGNED        reduce using rule 229 (fct_body -> compound_statement .)
    FLOAT           reduce using rule 229 (fct_body -> compound_statement .)
    DOUBLE          reduce using rule 229 (fct_body -> compound_statement .)
    VOID            reduce using rule 229 (fct_body -> compound_statement .)
    STRING          reduce using rule 229 (fct_body -> compound_statement .)
    AUTO            reduce using rule 229 (fct_body -> compound_statement .)
    TYPE            reduce using rule 229 (fct_body -> compound_statement .)
    CLASS           reduce using rule 229 (fct_body -> compound_statement .)
    STRUCT          reduce using rule 229 (fct_body -> compound_statement .)
    $end            reduce using rule 229 (fct_body -> compound_statement .)
    RCPAREN         reduce using rule 229 (fct_body -> compound_statement .)
    IDENTIFIER      reduce using rule 229 (fct_body -> compound_statement .)
    CASE            reduce using rule 229 (fct_body -> compound_statement .)
    DEFAULT         reduce using rule 229 (fct_body -> compound_statement .)
    SEMICOLON       reduce using rule 229 (fct_body -> compound_statement .)
    LCPAREN         reduce using rule 229 (fct_body -> compound_statement .)
    IF              reduce using rule 229 (fct_body -> compound_statement .)
    SWITCH          reduce using rule 229 (fct_body -> compound_statement .)
    WHILE           reduce using rule 229 (fct_body -> compound_statement .)
    DO              reduce using rule 229 (fct_body -> compound_statement .)
    FOR             reduce using rule 229 (fct_body -> compound_statement .)
    BREAK           reduce using rule 229 (fct_body -> compound_statement .)
    CONTINUE        reduce using rule 229 (fct_body -> compound_statement .)
    RETURN          reduce using rule 229 (fct_body -> compound_statement .)
    GOTO            reduce using rule 229 (fct_body -> compound_statement .)
    TRY             reduce using rule 229 (fct_body -> compound_statement .)
    THROW           reduce using rule 229 (fct_body -> compound_statement .)
    DPLUSOP         reduce using rule 229 (fct_body -> compound_statement .)
    DMINUSOP        reduce using rule 229 (fct_body -> compound_statement .)
    SIZEOF          reduce using rule 229 (fct_body -> compound_statement .)
    PLUSOP          reduce using rule 229 (fct_body -> compound_statement .)
    MINUSOP         reduce using rule 229 (fct_body -> compound_statement .)
    NOTSYM          reduce using rule 229 (fct_body -> compound_statement .)
    BNOP            reduce using rule 229 (fct_body -> compound_statement .)
    MULTOP          reduce using rule 229 (fct_body -> compound_statement .)
    BANDOP          reduce using rule 229 (fct_body -> compound_statement .)
    NEW             reduce using rule 229 (fct_body -> compound_statement .)
    DELETE          reduce using rule 229 (fct_body -> compound_statement .)
    THIS            reduce using rule 229 (fct_body -> compound_statement .)
    LPAREN          reduce using rule 229 (fct_body -> compound_statement .)
    DOUBLEBNOP      reduce using rule 229 (fct_body -> compound_statement .)
    STRING_L        reduce using rule 229 (fct_body -> compound_statement .)
    NUMBER          reduce using rule 229 (fct_body -> compound_statement .)
    SCHAR           reduce using rule 229 (fct_body -> compound_statement .)
    ELSE            reduce using rule 229 (fct_body -> compound_statement .)
    PRIVATE         reduce using rule 229 (fct_body -> compound_statement .)
    PROTECTED       reduce using rule 229 (fct_body -> compound_statement .)
    PUBLIC          reduce using rule 229 (fct_body -> compound_statement .)


state 194

    (230) compound_statement -> LCPAREN . statement_list RCPAREN
    (231) compound_statement -> LCPAREN . RCPAREN
    (232) statement_list -> . statement
    (233) statement_list -> . statement_list statement
    (234) statement -> . labeled_statement
    (235) statement -> . expression_statement
    (236) statement -> . compound_statement
    (237) statement -> . selection_statement
    (238) statement -> . iteration_statement
    (239) statement -> . jump_statement
    (240) statement -> . declaration_statement
    (241) statement -> . try_block
    (251) labeled_statement -> . IDENTIFIER COLON statement
    (252) labeled_statement -> . CASE constant_expression COLON statement
    (253) labeled_statement -> . DEFAULT COLON statement
    (262) expression_statement -> . expression SEMICOLON
    (263) expression_statement -> . SEMICOLON
    (230) compound_statement -> . LCPAREN statement_list RCPAREN
    (231) compound_statement -> . LCPAREN RCPAREN
    (247) selection_statement -> . IF LPAREN expression RPAREN statement
    (248) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (249) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (254) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (255) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (256) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (257) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (258) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (259) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (242) jump_statement -> . BREAK SEMICOLON
    (243) jump_statement -> . CONTINUE SEMICOLON
    (244) jump_statement -> . RETURN expression SEMICOLON
    (245) jump_statement -> . RETURN SEMICOLON
    (246) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (264) declaration_statement -> . declaration
    (250) try_block -> . TRY compound_statement CATCH compound_statement
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (265) declaration -> . type_specifier_ declarator_list SEMICOLON
    (266) declaration -> . asm_declaration
    (267) declaration -> . function_definition
    (268) declaration -> . function_decl
    (269) declaration -> . class_define_specifier SEMICOLON
    (270) declaration -> . template_declaration
    (271) declaration -> . typedef_declarator
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (168) type_specifier_ -> . CONST type_specifier
    (169) type_specifier_ -> . type_specifier
    (287) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (225) function_definition -> . type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body
    (226) function_definition -> . type_specifier_ declarator LPAREN RPAREN fct_body
    (227) function_decl -> . type_specifier_ declarator LPAREN argument_declaration_list RPAREN
    (228) function_decl -> . type_specifier_ declarator LPAREN RPAREN
    (203) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (204) class_define_specifier -> . class_head LCPAREN RCPAREN
    (272) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (170) typedef_declarator -> . TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON
    (171) typedef_declarator -> . TYPEDEF type_specifier_ IDENTIFIER SEMICOLON
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (172) type_specifier -> . simple_type_name
    (173) type_specifier -> . complex_type_specifier
    (190) class_head -> . class_key IDENTIFIER base_spec
    (191) class_head -> . class_key IDENTIFIER
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (174) simple_type_name -> . CHAR
    (175) simple_type_name -> . SHORT
    (176) simple_type_name -> . INT
    (177) simple_type_name -> . LONG
    (178) simple_type_name -> . SIGNED
    (179) simple_type_name -> . UNSIGNED
    (180) simple_type_name -> . FLOAT
    (181) simple_type_name -> . DOUBLE
    (182) simple_type_name -> . VOID
    (183) simple_type_name -> . STRING
    (184) simple_type_name -> . AUTO
    (185) complex_type_specifier -> . class_key IDENTIFIER
    (186) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (187) complex_type_specifier -> . TYPE IDENTIFIER
    (188) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (201) class_key -> . CLASS
    (202) class_key -> . STRUCT
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RCPAREN         shift and go to state 278
    IDENTIFIER      shift and go to state 288
    CASE            shift and go to state 289
    DEFAULT         shift and go to state 290
    SEMICOLON       shift and go to state 292
    LCPAREN         shift and go to state 194
    IF              shift and go to state 293
    SWITCH          shift and go to state 294
    WHILE           shift and go to state 295
    DO              shift and go to state 296
    FOR             shift and go to state 297
    BREAK           shift and go to state 298
    CONTINUE        shift and go to state 299
    RETURN          shift and go to state 300
    GOTO            shift and go to state 301
    TRY             shift and go to state 303
    THROW           shift and go to state 190
    CONST           shift and go to state 16
    ASM             shift and go to state 18
    TEMPLATE        shift and go to state 20
    TYPEDEF         shift and go to state 21
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38
    THIS            shift and go to state 134
    LPAREN          shift and go to state 105
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    statement_list                 shift and go to state 277
    statement                      shift and go to state 279
    labeled_statement              shift and go to state 280
    expression_statement           shift and go to state 281
    compound_statement             shift and go to state 282
    selection_statement            shift and go to state 283
    iteration_statement            shift and go to state 284
    jump_statement                 shift and go to state 285
    declaration_statement          shift and go to state 286
    try_block                      shift and go to state 287
    expression                     shift and go to state 291
    declaration                    shift and go to state 302
    assignment_expression          shift and go to state 188
    throw_expression               shift and go to state 189
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    function_decl                  shift and go to state 12
    class_define_specifier         shift and go to state 13
    template_declaration           shift and go to state 14
    typedef_declarator             shift and go to state 15
    conditional_expression         shift and go to state 111
    unary_expression               shift and go to state 112
    type_specifier                 shift and go to state 17
    class_head                     shift and go to state 19
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    cast_expression                shift and go to state 118
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 24
    logical_AND_expression         shift and go to state 123
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    inclusive_OR_expression        shift and go to state 132
    literal                        shift and go to state 133
    exclusive_OR_expression        shift and go to state 135
    AND_expression                 shift and go to state 139
    equality_expression            shift and go to state 140
    relational_expression          shift and go to state 141
    shift_expression               shift and go to state 142
    additive_expression            shift and go to state 143
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145

state 195

    (282) initializer -> LPAREN expression_list RPAREN .

    SEMICOLON       reduce using rule 282 (initializer -> LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 282 (initializer -> LPAREN expression_list RPAREN .)


state 196

    (289) expression_list -> expression_list COMMA . assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    THIS            shift and go to state 134
    LPAREN          shift and go to state 105
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    assignment_expression          shift and go to state 304
    conditional_expression         shift and go to state 111
    unary_expression               shift and go to state 112
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    cast_expression                shift and go to state 118
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    logical_AND_expression         shift and go to state 123
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    inclusive_OR_expression        shift and go to state 132
    literal                        shift and go to state 133
    exclusive_OR_expression        shift and go to state 135
    AND_expression                 shift and go to state 139
    equality_expression            shift and go to state 140
    relational_expression          shift and go to state 141
    shift_expression               shift and go to state 142
    additive_expression            shift and go to state 143
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145

state 197

    (120) argument_declaration_list -> argument_declaration COMMA . argument_declaration_list
    (119) argument_declaration_list -> . argument_declaration
    (120) argument_declaration_list -> . argument_declaration COMMA argument_declaration_list
    (121) argument_declaration -> . type_specifier_ declarator
    (122) argument_declaration -> . type_specifier_ declarator EQUAL expression
    (123) argument_declaration -> . type_specifier_ abstract_declarator
    (124) argument_declaration -> . type_specifier_
    (168) type_specifier_ -> . CONST type_specifier
    (169) type_specifier_ -> . type_specifier
    (172) type_specifier -> . simple_type_name
    (173) type_specifier -> . complex_type_specifier
    (174) simple_type_name -> . CHAR
    (175) simple_type_name -> . SHORT
    (176) simple_type_name -> . INT
    (177) simple_type_name -> . LONG
    (178) simple_type_name -> . SIGNED
    (179) simple_type_name -> . UNSIGNED
    (180) simple_type_name -> . FLOAT
    (181) simple_type_name -> . DOUBLE
    (182) simple_type_name -> . VOID
    (183) simple_type_name -> . STRING
    (184) simple_type_name -> . AUTO
    (185) complex_type_specifier -> . class_key IDENTIFIER
    (186) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (187) complex_type_specifier -> . TYPE IDENTIFIER
    (188) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (201) class_key -> . CLASS
    (202) class_key -> . STRUCT

    CONST           shift and go to state 16
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38

    argument_declaration           shift and go to state 109
    argument_declaration_list      shift and go to state 305
    type_specifier_                shift and go to state 92
    type_specifier                 shift and go to state 17
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 56

state 198

    (52) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    THIS            shift and go to state 134
    LPAREN          shift and go to state 105
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    unary_expression               shift and go to state 112
    assignment_expression          shift and go to state 306
    conditional_expression         shift and go to state 111
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    cast_expression                shift and go to state 118
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    logical_AND_expression         shift and go to state 123
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    inclusive_OR_expression        shift and go to state 132
    literal                        shift and go to state 133
    exclusive_OR_expression        shift and go to state 135
    AND_expression                 shift and go to state 139
    equality_expression            shift and go to state 140
    relational_expression          shift and go to state 141
    shift_expression               shift and go to state 142
    additive_expression            shift and go to state 143
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145

state 199

    (53) assignment_operator -> EQUAL .

    DPLUSOP         reduce using rule 53 (assignment_operator -> EQUAL .)
    DMINUSOP        reduce using rule 53 (assignment_operator -> EQUAL .)
    SIZEOF          reduce using rule 53 (assignment_operator -> EQUAL .)
    PLUSOP          reduce using rule 53 (assignment_operator -> EQUAL .)
    MINUSOP         reduce using rule 53 (assignment_operator -> EQUAL .)
    NOTSYM          reduce using rule 53 (assignment_operator -> EQUAL .)
    BNOP            reduce using rule 53 (assignment_operator -> EQUAL .)
    MULTOP          reduce using rule 53 (assignment_operator -> EQUAL .)
    BANDOP          reduce using rule 53 (assignment_operator -> EQUAL .)
    NEW             reduce using rule 53 (assignment_operator -> EQUAL .)
    DELETE          reduce using rule 53 (assignment_operator -> EQUAL .)
    THIS            reduce using rule 53 (assignment_operator -> EQUAL .)
    LPAREN          reduce using rule 53 (assignment_operator -> EQUAL .)
    IDENTIFIER      reduce using rule 53 (assignment_operator -> EQUAL .)
    DOUBLEBNOP      reduce using rule 53 (assignment_operator -> EQUAL .)
    STRING_L        reduce using rule 53 (assignment_operator -> EQUAL .)
    NUMBER          reduce using rule 53 (assignment_operator -> EQUAL .)
    SCHAR           reduce using rule 53 (assignment_operator -> EQUAL .)


state 200

    (54) assignment_operator -> MULTEQOP .

    DPLUSOP         reduce using rule 54 (assignment_operator -> MULTEQOP .)
    DMINUSOP        reduce using rule 54 (assignment_operator -> MULTEQOP .)
    SIZEOF          reduce using rule 54 (assignment_operator -> MULTEQOP .)
    PLUSOP          reduce using rule 54 (assignment_operator -> MULTEQOP .)
    MINUSOP         reduce using rule 54 (assignment_operator -> MULTEQOP .)
    NOTSYM          reduce using rule 54 (assignment_operator -> MULTEQOP .)
    BNOP            reduce using rule 54 (assignment_operator -> MULTEQOP .)
    MULTOP          reduce using rule 54 (assignment_operator -> MULTEQOP .)
    BANDOP          reduce using rule 54 (assignment_operator -> MULTEQOP .)
    NEW             reduce using rule 54 (assignment_operator -> MULTEQOP .)
    DELETE          reduce using rule 54 (assignment_operator -> MULTEQOP .)
    THIS            reduce using rule 54 (assignment_operator -> MULTEQOP .)
    LPAREN          reduce using rule 54 (assignment_operator -> MULTEQOP .)
    IDENTIFIER      reduce using rule 54 (assignment_operator -> MULTEQOP .)
    DOUBLEBNOP      reduce using rule 54 (assignment_operator -> MULTEQOP .)
    STRING_L        reduce using rule 54 (assignment_operator -> MULTEQOP .)
    NUMBER          reduce using rule 54 (assignment_operator -> MULTEQOP .)
    SCHAR           reduce using rule 54 (assignment_operator -> MULTEQOP .)


state 201

    (55) assignment_operator -> DIVEQOP .

    DPLUSOP         reduce using rule 55 (assignment_operator -> DIVEQOP .)
    DMINUSOP        reduce using rule 55 (assignment_operator -> DIVEQOP .)
    SIZEOF          reduce using rule 55 (assignment_operator -> DIVEQOP .)
    PLUSOP          reduce using rule 55 (assignment_operator -> DIVEQOP .)
    MINUSOP         reduce using rule 55 (assignment_operator -> DIVEQOP .)
    NOTSYM          reduce using rule 55 (assignment_operator -> DIVEQOP .)
    BNOP            reduce using rule 55 (assignment_operator -> DIVEQOP .)
    MULTOP          reduce using rule 55 (assignment_operator -> DIVEQOP .)
    BANDOP          reduce using rule 55 (assignment_operator -> DIVEQOP .)
    NEW             reduce using rule 55 (assignment_operator -> DIVEQOP .)
    DELETE          reduce using rule 55 (assignment_operator -> DIVEQOP .)
    THIS            reduce using rule 55 (assignment_operator -> DIVEQOP .)
    LPAREN          reduce using rule 55 (assignment_operator -> DIVEQOP .)
    IDENTIFIER      reduce using rule 55 (assignment_operator -> DIVEQOP .)
    DOUBLEBNOP      reduce using rule 55 (assignment_operator -> DIVEQOP .)
    STRING_L        reduce using rule 55 (assignment_operator -> DIVEQOP .)
    NUMBER          reduce using rule 55 (assignment_operator -> DIVEQOP .)
    SCHAR           reduce using rule 55 (assignment_operator -> DIVEQOP .)


state 202

    (56) assignment_operator -> MODEQOP .

    DPLUSOP         reduce using rule 56 (assignment_operator -> MODEQOP .)
    DMINUSOP        reduce using rule 56 (assignment_operator -> MODEQOP .)
    SIZEOF          reduce using rule 56 (assignment_operator -> MODEQOP .)
    PLUSOP          reduce using rule 56 (assignment_operator -> MODEQOP .)
    MINUSOP         reduce using rule 56 (assignment_operator -> MODEQOP .)
    NOTSYM          reduce using rule 56 (assignment_operator -> MODEQOP .)
    BNOP            reduce using rule 56 (assignment_operator -> MODEQOP .)
    MULTOP          reduce using rule 56 (assignment_operator -> MODEQOP .)
    BANDOP          reduce using rule 56 (assignment_operator -> MODEQOP .)
    NEW             reduce using rule 56 (assignment_operator -> MODEQOP .)
    DELETE          reduce using rule 56 (assignment_operator -> MODEQOP .)
    THIS            reduce using rule 56 (assignment_operator -> MODEQOP .)
    LPAREN          reduce using rule 56 (assignment_operator -> MODEQOP .)
    IDENTIFIER      reduce using rule 56 (assignment_operator -> MODEQOP .)
    DOUBLEBNOP      reduce using rule 56 (assignment_operator -> MODEQOP .)
    STRING_L        reduce using rule 56 (assignment_operator -> MODEQOP .)
    NUMBER          reduce using rule 56 (assignment_operator -> MODEQOP .)
    SCHAR           reduce using rule 56 (assignment_operator -> MODEQOP .)


state 203

    (57) assignment_operator -> PLUSEQOP .

    DPLUSOP         reduce using rule 57 (assignment_operator -> PLUSEQOP .)
    DMINUSOP        reduce using rule 57 (assignment_operator -> PLUSEQOP .)
    SIZEOF          reduce using rule 57 (assignment_operator -> PLUSEQOP .)
    PLUSOP          reduce using rule 57 (assignment_operator -> PLUSEQOP .)
    MINUSOP         reduce using rule 57 (assignment_operator -> PLUSEQOP .)
    NOTSYM          reduce using rule 57 (assignment_operator -> PLUSEQOP .)
    BNOP            reduce using rule 57 (assignment_operator -> PLUSEQOP .)
    MULTOP          reduce using rule 57 (assignment_operator -> PLUSEQOP .)
    BANDOP          reduce using rule 57 (assignment_operator -> PLUSEQOP .)
    NEW             reduce using rule 57 (assignment_operator -> PLUSEQOP .)
    DELETE          reduce using rule 57 (assignment_operator -> PLUSEQOP .)
    THIS            reduce using rule 57 (assignment_operator -> PLUSEQOP .)
    LPAREN          reduce using rule 57 (assignment_operator -> PLUSEQOP .)
    IDENTIFIER      reduce using rule 57 (assignment_operator -> PLUSEQOP .)
    DOUBLEBNOP      reduce using rule 57 (assignment_operator -> PLUSEQOP .)
    STRING_L        reduce using rule 57 (assignment_operator -> PLUSEQOP .)
    NUMBER          reduce using rule 57 (assignment_operator -> PLUSEQOP .)
    SCHAR           reduce using rule 57 (assignment_operator -> PLUSEQOP .)


state 204

    (58) assignment_operator -> MINUSEQOP .

    DPLUSOP         reduce using rule 58 (assignment_operator -> MINUSEQOP .)
    DMINUSOP        reduce using rule 58 (assignment_operator -> MINUSEQOP .)
    SIZEOF          reduce using rule 58 (assignment_operator -> MINUSEQOP .)
    PLUSOP          reduce using rule 58 (assignment_operator -> MINUSEQOP .)
    MINUSOP         reduce using rule 58 (assignment_operator -> MINUSEQOP .)
    NOTSYM          reduce using rule 58 (assignment_operator -> MINUSEQOP .)
    BNOP            reduce using rule 58 (assignment_operator -> MINUSEQOP .)
    MULTOP          reduce using rule 58 (assignment_operator -> MINUSEQOP .)
    BANDOP          reduce using rule 58 (assignment_operator -> MINUSEQOP .)
    NEW             reduce using rule 58 (assignment_operator -> MINUSEQOP .)
    DELETE          reduce using rule 58 (assignment_operator -> MINUSEQOP .)
    THIS            reduce using rule 58 (assignment_operator -> MINUSEQOP .)
    LPAREN          reduce using rule 58 (assignment_operator -> MINUSEQOP .)
    IDENTIFIER      reduce using rule 58 (assignment_operator -> MINUSEQOP .)
    DOUBLEBNOP      reduce using rule 58 (assignment_operator -> MINUSEQOP .)
    STRING_L        reduce using rule 58 (assignment_operator -> MINUSEQOP .)
    NUMBER          reduce using rule 58 (assignment_operator -> MINUSEQOP .)
    SCHAR           reduce using rule 58 (assignment_operator -> MINUSEQOP .)


state 205

    (59) assignment_operator -> LSHIFTEQOP .

    DPLUSOP         reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)
    DMINUSOP        reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)
    SIZEOF          reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)
    PLUSOP          reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)
    MINUSOP         reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)
    NOTSYM          reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)
    BNOP            reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)
    MULTOP          reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)
    BANDOP          reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)
    NEW             reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)
    DELETE          reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)
    THIS            reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)
    LPAREN          reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)
    IDENTIFIER      reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)
    DOUBLEBNOP      reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)
    STRING_L        reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)
    NUMBER          reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)
    SCHAR           reduce using rule 59 (assignment_operator -> LSHIFTEQOP .)


state 206

    (60) assignment_operator -> RSHIFTEQOP .

    DPLUSOP         reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)
    DMINUSOP        reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)
    SIZEOF          reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)
    PLUSOP          reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)
    MINUSOP         reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)
    NOTSYM          reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)
    BNOP            reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)
    MULTOP          reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)
    BANDOP          reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)
    NEW             reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)
    DELETE          reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)
    THIS            reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)
    LPAREN          reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)
    IDENTIFIER      reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)
    DOUBLEBNOP      reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)
    STRING_L        reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)
    NUMBER          reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)
    SCHAR           reduce using rule 60 (assignment_operator -> RSHIFTEQOP .)


state 207

    (61) assignment_operator -> BANDEQOP .

    DPLUSOP         reduce using rule 61 (assignment_operator -> BANDEQOP .)
    DMINUSOP        reduce using rule 61 (assignment_operator -> BANDEQOP .)
    SIZEOF          reduce using rule 61 (assignment_operator -> BANDEQOP .)
    PLUSOP          reduce using rule 61 (assignment_operator -> BANDEQOP .)
    MINUSOP         reduce using rule 61 (assignment_operator -> BANDEQOP .)
    NOTSYM          reduce using rule 61 (assignment_operator -> BANDEQOP .)
    BNOP            reduce using rule 61 (assignment_operator -> BANDEQOP .)
    MULTOP          reduce using rule 61 (assignment_operator -> BANDEQOP .)
    BANDOP          reduce using rule 61 (assignment_operator -> BANDEQOP .)
    NEW             reduce using rule 61 (assignment_operator -> BANDEQOP .)
    DELETE          reduce using rule 61 (assignment_operator -> BANDEQOP .)
    THIS            reduce using rule 61 (assignment_operator -> BANDEQOP .)
    LPAREN          reduce using rule 61 (assignment_operator -> BANDEQOP .)
    IDENTIFIER      reduce using rule 61 (assignment_operator -> BANDEQOP .)
    DOUBLEBNOP      reduce using rule 61 (assignment_operator -> BANDEQOP .)
    STRING_L        reduce using rule 61 (assignment_operator -> BANDEQOP .)
    NUMBER          reduce using rule 61 (assignment_operator -> BANDEQOP .)
    SCHAR           reduce using rule 61 (assignment_operator -> BANDEQOP .)


state 208

    (62) assignment_operator -> BOREQOP .

    DPLUSOP         reduce using rule 62 (assignment_operator -> BOREQOP .)
    DMINUSOP        reduce using rule 62 (assignment_operator -> BOREQOP .)
    SIZEOF          reduce using rule 62 (assignment_operator -> BOREQOP .)
    PLUSOP          reduce using rule 62 (assignment_operator -> BOREQOP .)
    MINUSOP         reduce using rule 62 (assignment_operator -> BOREQOP .)
    NOTSYM          reduce using rule 62 (assignment_operator -> BOREQOP .)
    BNOP            reduce using rule 62 (assignment_operator -> BOREQOP .)
    MULTOP          reduce using rule 62 (assignment_operator -> BOREQOP .)
    BANDOP          reduce using rule 62 (assignment_operator -> BOREQOP .)
    NEW             reduce using rule 62 (assignment_operator -> BOREQOP .)
    DELETE          reduce using rule 62 (assignment_operator -> BOREQOP .)
    THIS            reduce using rule 62 (assignment_operator -> BOREQOP .)
    LPAREN          reduce using rule 62 (assignment_operator -> BOREQOP .)
    IDENTIFIER      reduce using rule 62 (assignment_operator -> BOREQOP .)
    DOUBLEBNOP      reduce using rule 62 (assignment_operator -> BOREQOP .)
    STRING_L        reduce using rule 62 (assignment_operator -> BOREQOP .)
    NUMBER          reduce using rule 62 (assignment_operator -> BOREQOP .)
    SCHAR           reduce using rule 62 (assignment_operator -> BOREQOP .)


state 209

    (14) conditional_expression -> logical_OR_expression QUESMARK . expression COLON conditional_expression
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    THROW           shift and go to state 190
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    THIS            shift and go to state 134
    LPAREN          shift and go to state 105
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    logical_OR_expression          shift and go to state 113
    expression                     shift and go to state 307
    conditional_expression         shift and go to state 111
    assignment_expression          shift and go to state 188
    throw_expression               shift and go to state 189
    unary_expression               shift and go to state 112
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    cast_expression                shift and go to state 118
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    logical_AND_expression         shift and go to state 123
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    inclusive_OR_expression        shift and go to state 132
    literal                        shift and go to state 133
    exclusive_OR_expression        shift and go to state 135
    AND_expression                 shift and go to state 139
    equality_expression            shift and go to state 140
    relational_expression          shift and go to state 141
    shift_expression               shift and go to state 142
    additive_expression            shift and go to state 143
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145

state 210

    (16) logical_OR_expression -> logical_OR_expression OROP . logical_AND_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR

    LPAREN          shift and go to state 150
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    THIS            shift and go to state 134
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    logical_AND_expression         shift and go to state 308
    inclusive_OR_expression        shift and go to state 132
    exclusive_OR_expression        shift and go to state 135
    AND_expression                 shift and go to state 139
    equality_expression            shift and go to state 140
    relational_expression          shift and go to state 141
    shift_expression               shift and go to state 142
    additive_expression            shift and go to state 143
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145
    cast_expression                shift and go to state 118
    unary_expression               shift and go to state 149
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    literal                        shift and go to state 133

state 211

    (92) postfix_expression -> postfix_expression LSPAREN . expression RSPAREN
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    THROW           shift and go to state 190
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    THIS            shift and go to state 134
    LPAREN          shift and go to state 105
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    postfix_expression             shift and go to state 114
    expression                     shift and go to state 309
    assignment_expression          shift and go to state 188
    throw_expression               shift and go to state 189
    conditional_expression         shift and go to state 111
    unary_expression               shift and go to state 112
    logical_OR_expression          shift and go to state 113
    unary1_operator                shift and go to state 117
    cast_expression                shift and go to state 118
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    logical_AND_expression         shift and go to state 123
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    inclusive_OR_expression        shift and go to state 132
    literal                        shift and go to state 133
    exclusive_OR_expression        shift and go to state 135
    AND_expression                 shift and go to state 139
    equality_expression            shift and go to state 140
    relational_expression          shift and go to state 141
    shift_expression               shift and go to state 142
    additive_expression            shift and go to state 143
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145

state 212

    (93) postfix_expression -> postfix_expression LPAREN . expression_list RPAREN
    (95) postfix_expression -> postfix_expression LPAREN . RPAREN
    (288) expression_list -> . assignment_expression
    (289) expression_list -> . expression_list COMMA assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 311
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    THIS            shift and go to state 134
    LPAREN          shift and go to state 105
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    postfix_expression             shift and go to state 114
    expression_list                shift and go to state 310
    assignment_expression          shift and go to state 110
    conditional_expression         shift and go to state 111
    unary_expression               shift and go to state 112
    logical_OR_expression          shift and go to state 113
    unary1_operator                shift and go to state 117
    cast_expression                shift and go to state 118
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    logical_AND_expression         shift and go to state 123
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    inclusive_OR_expression        shift and go to state 132
    literal                        shift and go to state 133
    exclusive_OR_expression        shift and go to state 135
    AND_expression                 shift and go to state 139
    equality_expression            shift and go to state 140
    relational_expression          shift and go to state 141
    shift_expression               shift and go to state 142
    additive_expression            shift and go to state 143
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145

state 213

    (94) postfix_expression -> postfix_expression template_class_name . LPAREN expression_list RPAREN

    LPAREN          shift and go to state 312


state 214

    (96) postfix_expression -> postfix_expression DOT . name
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER

    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51

    name                           shift and go to state 313

state 215

    (97) postfix_expression -> postfix_expression ARROW . name
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER

    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51

    name                           shift and go to state 314

state 216

    (98) postfix_expression -> postfix_expression DPLUSOP .

    LSPAREN         reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    LPAREN          reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    DOT             reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    ARROW           reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    DPLUSOP         reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    DMINUSOP        reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    LTEMPLATE       reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    EQUAL           reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    MULTEQOP        reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    DIVEQOP         reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    MODEQOP         reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    PLUSEQOP        reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    MINUSEQOP       reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    LSHIFTEQOP      reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    RSHIFTEQOP      reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    BANDEQOP        reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    BOREQOP         reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    DOTSTAR         reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    ARROWSTAR       reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    MULTOP          reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    DIVOP           reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    MODOP           reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    PLUSOP          reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    MINUSOP         reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    LSHIFT          reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    RSHIFT          reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    LTCOMP          reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    GTCOMP          reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    LTECOMP         reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    GTECOMP         reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    EQCOMP          reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    NEQCOMP         reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    BANDOP          reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    XOROP           reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    OROP            reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    ANDOP           reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    QUESMARK        reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    RPAREN          reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    COMMA           reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    RSPAREN         reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    SEMICOLON       reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    RCPAREN         reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    COLON           reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)
    RTEMPLATE       reduce using rule 98 (postfix_expression -> postfix_expression DPLUSOP .)


state 217

    (99) postfix_expression -> postfix_expression DMINUSOP .

    LSPAREN         reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    LPAREN          reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    DOT             reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    ARROW           reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    DPLUSOP         reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    DMINUSOP        reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    LTEMPLATE       reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    EQUAL           reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    MULTEQOP        reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    DIVEQOP         reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    MODEQOP         reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    PLUSEQOP        reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    MINUSEQOP       reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    LSHIFTEQOP      reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    RSHIFTEQOP      reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    BANDEQOP        reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    BOREQOP         reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    DOTSTAR         reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    ARROWSTAR       reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    MULTOP          reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    DIVOP           reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    MODOP           reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    PLUSOP          reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    MINUSOP         reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    LSHIFT          reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    RSHIFT          reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    LTCOMP          reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    GTCOMP          reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    LTECOMP         reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    GTECOMP         reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    EQCOMP          reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    NEQCOMP         reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    BANDOP          reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    XOROP           reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    OROP            reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    ANDOP           reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    QUESMARK        reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    RPAREN          reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    COMMA           reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    RSPAREN         reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    SEMICOLON       reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    RCPAREN         reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    COLON           reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)
    RTEMPLATE       reduce using rule 99 (postfix_expression -> postfix_expression DMINUSOP .)


state 218

    (64) unary_expression -> DPLUSOP unary_expression .

    EQUAL           reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    MULTEQOP        reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    DIVEQOP         reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    MODEQOP         reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    PLUSEQOP        reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    MINUSEQOP       reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    LSHIFTEQOP      reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    RSHIFTEQOP      reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    BANDEQOP        reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    BOREQOP         reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    DOTSTAR         reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    ARROWSTAR       reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    MULTOP          reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    DIVOP           reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    MODOP           reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    PLUSOP          reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    MINUSOP         reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    LSHIFT          reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    RSHIFT          reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    LTCOMP          reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    GTCOMP          reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    LTECOMP         reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    GTECOMP         reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    EQCOMP          reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    NEQCOMP         reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    BANDOP          reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    XOROP           reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    OROP            reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    ANDOP           reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    QUESMARK        reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    RPAREN          reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    COMMA           reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    RSPAREN         reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    SEMICOLON       reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    RCPAREN         reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    COLON           reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)
    RTEMPLATE       reduce using rule 64 (unary_expression -> DPLUSOP unary_expression .)


state 219

    (103) primary_expression -> LPAREN . expression RPAREN
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    THROW           shift and go to state 190
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    THIS            shift and go to state 134
    LPAREN          shift and go to state 105
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    expression                     shift and go to state 186
    assignment_expression          shift and go to state 188
    throw_expression               shift and go to state 189
    conditional_expression         shift and go to state 111
    unary_expression               shift and go to state 112
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    cast_expression                shift and go to state 118
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    logical_AND_expression         shift and go to state 123
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    inclusive_OR_expression        shift and go to state 132
    literal                        shift and go to state 133
    exclusive_OR_expression        shift and go to state 135
    AND_expression                 shift and go to state 139
    equality_expression            shift and go to state 140
    relational_expression          shift and go to state 141
    shift_expression               shift and go to state 142
    additive_expression            shift and go to state 143
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145

state 220

    (65) unary_expression -> DMINUSOP unary_expression .

    EQUAL           reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    MULTEQOP        reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    DIVEQOP         reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    MODEQOP         reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    PLUSEQOP        reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    MINUSEQOP       reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    LSHIFTEQOP      reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    RSHIFTEQOP      reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    BANDEQOP        reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    BOREQOP         reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    DOTSTAR         reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    ARROWSTAR       reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    MULTOP          reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    DIVOP           reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    MODOP           reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    PLUSOP          reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    MINUSOP         reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    LSHIFT          reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    RSHIFT          reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    LTCOMP          reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    GTCOMP          reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    LTECOMP         reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    GTECOMP         reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    EQCOMP          reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    NEQCOMP         reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    BANDOP          reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    XOROP           reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    OROP            reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    ANDOP           reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    QUESMARK        reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    RPAREN          reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    COMMA           reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    RSPAREN         reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    SEMICOLON       reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    RCPAREN         reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    COLON           reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)
    RTEMPLATE       reduce using rule 65 (unary_expression -> DMINUSOP unary_expression .)


state 221

    (66) unary_expression -> unary1_operator cast_expression .

    EQUAL           reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    MULTEQOP        reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    DIVEQOP         reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    MODEQOP         reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    PLUSEQOP        reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    MINUSEQOP       reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    LSHIFTEQOP      reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    RSHIFTEQOP      reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    BANDEQOP        reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    BOREQOP         reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    DOTSTAR         reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    ARROWSTAR       reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    MULTOP          reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    DIVOP           reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    MODOP           reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    PLUSOP          reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    MINUSOP         reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    LSHIFT          reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    RSHIFT          reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    LTCOMP          reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    GTCOMP          reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    LTECOMP         reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    GTECOMP         reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    EQCOMP          reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    NEQCOMP         reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    BANDOP          reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    XOROP           reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    OROP            reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    ANDOP           reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    QUESMARK        reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    RPAREN          reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    COMMA           reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    RSPAREN         reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    SEMICOLON       reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    RCPAREN         reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    COLON           reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)
    RTEMPLATE       reduce using rule 66 (unary_expression -> unary1_operator cast_expression .)


state 222

    (67) unary_expression -> unary2_operator cast_expression .

    EQUAL           reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    MULTEQOP        reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    DIVEQOP         reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    MODEQOP         reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    PLUSEQOP        reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    MINUSEQOP       reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    LSHIFTEQOP      reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    RSHIFTEQOP      reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    BANDEQOP        reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    BOREQOP         reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    DOTSTAR         reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    ARROWSTAR       reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    MULTOP          reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    DIVOP           reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    MODOP           reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    PLUSOP          reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    MINUSOP         reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    LSHIFT          reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    RSHIFT          reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    LTCOMP          reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    GTCOMP          reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    LTECOMP         reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    GTECOMP         reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    EQCOMP          reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    NEQCOMP         reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    BANDOP          reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    XOROP           reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    OROP            reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    ANDOP           reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    QUESMARK        reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    RPAREN          reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    COMMA           reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    RSPAREN         reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    SEMICOLON       reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    RCPAREN         reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    COLON           reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)
    RTEMPLATE       reduce using rule 67 (unary_expression -> unary2_operator cast_expression .)


state 223

    (68) unary_expression -> SIZEOF unary_expression .

    EQUAL           reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    MULTEQOP        reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    DIVEQOP         reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    MODEQOP         reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    PLUSEQOP        reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    MINUSEQOP       reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    LSHIFTEQOP      reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    RSHIFTEQOP      reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    BANDEQOP        reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    BOREQOP         reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    DOTSTAR         reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    ARROWSTAR       reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    MULTOP          reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    DIVOP           reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    MODOP           reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    PLUSOP          reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    MINUSOP         reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    LSHIFT          reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    RSHIFT          reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    LTCOMP          reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    GTCOMP          reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    LTECOMP         reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    GTECOMP         reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    EQCOMP          reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    NEQCOMP         reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    BANDOP          reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    XOROP           reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    OROP            reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    ANDOP           reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    QUESMARK        reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    RPAREN          reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    COMMA           reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    RSPAREN         reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    SEMICOLON       reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    RCPAREN         reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    COLON           reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)
    RTEMPLATE       reduce using rule 68 (unary_expression -> SIZEOF unary_expression .)


state 224

    (69) unary_expression -> SIZEOF LPAREN . type_name RPAREN
    (103) primary_expression -> LPAREN . expression RPAREN
    (166) type_name -> . type_specifier_ abstract_declarator
    (167) type_name -> . type_specifier_
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (168) type_specifier_ -> . CONST type_specifier
    (169) type_specifier_ -> . type_specifier
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (172) type_specifier -> . simple_type_name
    (173) type_specifier -> . complex_type_specifier
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (174) simple_type_name -> . CHAR
    (175) simple_type_name -> . SHORT
    (176) simple_type_name -> . INT
    (177) simple_type_name -> . LONG
    (178) simple_type_name -> . SIGNED
    (179) simple_type_name -> . UNSIGNED
    (180) simple_type_name -> . FLOAT
    (181) simple_type_name -> . DOUBLE
    (182) simple_type_name -> . VOID
    (183) simple_type_name -> . STRING
    (184) simple_type_name -> . AUTO
    (185) complex_type_specifier -> . class_key IDENTIFIER
    (186) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (187) complex_type_specifier -> . TYPE IDENTIFIER
    (188) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (201) class_key -> . CLASS
    (202) class_key -> . STRUCT
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    CONST           shift and go to state 16
    THROW           shift and go to state 190
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38
    THIS            shift and go to state 134
    LPAREN          shift and go to state 105
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    type_name                      shift and go to state 315
    expression                     shift and go to state 186
    type_specifier_                shift and go to state 184
    assignment_expression          shift and go to state 188
    throw_expression               shift and go to state 189
    type_specifier                 shift and go to state 17
    conditional_expression         shift and go to state 111
    unary_expression               shift and go to state 112
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    cast_expression                shift and go to state 118
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    class_key                      shift and go to state 56
    logical_AND_expression         shift and go to state 123
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    inclusive_OR_expression        shift and go to state 132
    literal                        shift and go to state 133
    exclusive_OR_expression        shift and go to state 135
    AND_expression                 shift and go to state 139
    equality_expression            shift and go to state 140
    relational_expression          shift and go to state 141
    shift_expression               shift and go to state 142
    additive_expression            shift and go to state 143
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145

state 225

    (18) logical_AND_expression -> logical_AND_expression ANDOP . inclusive_OR_expression
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR

    LPAREN          shift and go to state 150
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    THIS            shift and go to state 134
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    inclusive_OR_expression        shift and go to state 316
    exclusive_OR_expression        shift and go to state 135
    AND_expression                 shift and go to state 139
    equality_expression            shift and go to state 140
    relational_expression          shift and go to state 141
    shift_expression               shift and go to state 142
    additive_expression            shift and go to state 143
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145
    cast_expression                shift and go to state 118
    unary_expression               shift and go to state 149
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    literal                        shift and go to state 133

state 226

    (73) allocation_expression -> NEW new_type_name . new_initializer
    (74) allocation_expression -> NEW new_type_name .
    (83) new_initializer -> . LPAREN initializer_list RPAREN
    (84) new_initializer -> . LPAREN RPAREN

    EQUAL           reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    MULTEQOP        reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    DIVEQOP         reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    MODEQOP         reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    PLUSEQOP        reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    MINUSEQOP       reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    LSHIFTEQOP      reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    RSHIFTEQOP      reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    BANDEQOP        reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    BOREQOP         reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    DOTSTAR         reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    ARROWSTAR       reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    MULTOP          reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    DIVOP           reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    MODOP           reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    PLUSOP          reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    MINUSOP         reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    LSHIFT          reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    RSHIFT          reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    LTCOMP          reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    GTCOMP          reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    LTECOMP         reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    GTECOMP         reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    EQCOMP          reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    NEQCOMP         reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    BANDOP          reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    XOROP           reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    OROP            reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    ANDOP           reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    QUESMARK        reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    RPAREN          reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    COMMA           reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    RSPAREN         reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    SEMICOLON       reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    RCPAREN         reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    COLON           reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    RTEMPLATE       reduce using rule 74 (allocation_expression -> NEW new_type_name .)
    LPAREN          shift and go to state 318

    new_initializer                shift and go to state 317

state 227

    (75) allocation_expression -> NEW LPAREN . type_name RPAREN new_initializer
    (76) allocation_expression -> NEW LPAREN . type_name RPAREN
    (166) type_name -> . type_specifier_ abstract_declarator
    (167) type_name -> . type_specifier_
    (168) type_specifier_ -> . CONST type_specifier
    (169) type_specifier_ -> . type_specifier
    (172) type_specifier -> . simple_type_name
    (173) type_specifier -> . complex_type_specifier
    (174) simple_type_name -> . CHAR
    (175) simple_type_name -> . SHORT
    (176) simple_type_name -> . INT
    (177) simple_type_name -> . LONG
    (178) simple_type_name -> . SIGNED
    (179) simple_type_name -> . UNSIGNED
    (180) simple_type_name -> . FLOAT
    (181) simple_type_name -> . DOUBLE
    (182) simple_type_name -> . VOID
    (183) simple_type_name -> . STRING
    (184) simple_type_name -> . AUTO
    (185) complex_type_specifier -> . class_key IDENTIFIER
    (186) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (187) complex_type_specifier -> . TYPE IDENTIFIER
    (188) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (201) class_key -> . CLASS
    (202) class_key -> . STRUCT

    CONST           shift and go to state 16
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38

    type_name                      shift and go to state 319
    type_specifier_                shift and go to state 184
    type_specifier                 shift and go to state 17
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 56

state 228

    (77) new_type_name -> type_specifier_ . new_declarator
    (78) new_type_name -> type_specifier_ .
    (79) new_declarator -> . new_declarator MULTOP
    (80) new_declarator -> . MULTOP
    (81) new_declarator -> . new_declarator LSPAREN expression RSPAREN
    (82) new_declarator -> . LSPAREN expression RSPAREN

  ! shift/reduce conflict for MULTOP resolved as shift
    LPAREN          reduce using rule 78 (new_type_name -> type_specifier_ .)
    EQUAL           reduce using rule 78 (new_type_name -> type_specifier_ .)
    MULTEQOP        reduce using rule 78 (new_type_name -> type_specifier_ .)
    DIVEQOP         reduce using rule 78 (new_type_name -> type_specifier_ .)
    MODEQOP         reduce using rule 78 (new_type_name -> type_specifier_ .)
    PLUSEQOP        reduce using rule 78 (new_type_name -> type_specifier_ .)
    MINUSEQOP       reduce using rule 78 (new_type_name -> type_specifier_ .)
    LSHIFTEQOP      reduce using rule 78 (new_type_name -> type_specifier_ .)
    RSHIFTEQOP      reduce using rule 78 (new_type_name -> type_specifier_ .)
    BANDEQOP        reduce using rule 78 (new_type_name -> type_specifier_ .)
    BOREQOP         reduce using rule 78 (new_type_name -> type_specifier_ .)
    DOTSTAR         reduce using rule 78 (new_type_name -> type_specifier_ .)
    ARROWSTAR       reduce using rule 78 (new_type_name -> type_specifier_ .)
    DIVOP           reduce using rule 78 (new_type_name -> type_specifier_ .)
    MODOP           reduce using rule 78 (new_type_name -> type_specifier_ .)
    PLUSOP          reduce using rule 78 (new_type_name -> type_specifier_ .)
    MINUSOP         reduce using rule 78 (new_type_name -> type_specifier_ .)
    LSHIFT          reduce using rule 78 (new_type_name -> type_specifier_ .)
    RSHIFT          reduce using rule 78 (new_type_name -> type_specifier_ .)
    LTCOMP          reduce using rule 78 (new_type_name -> type_specifier_ .)
    GTCOMP          reduce using rule 78 (new_type_name -> type_specifier_ .)
    LTECOMP         reduce using rule 78 (new_type_name -> type_specifier_ .)
    GTECOMP         reduce using rule 78 (new_type_name -> type_specifier_ .)
    EQCOMP          reduce using rule 78 (new_type_name -> type_specifier_ .)
    NEQCOMP         reduce using rule 78 (new_type_name -> type_specifier_ .)
    BANDOP          reduce using rule 78 (new_type_name -> type_specifier_ .)
    XOROP           reduce using rule 78 (new_type_name -> type_specifier_ .)
    OROP            reduce using rule 78 (new_type_name -> type_specifier_ .)
    ANDOP           reduce using rule 78 (new_type_name -> type_specifier_ .)
    QUESMARK        reduce using rule 78 (new_type_name -> type_specifier_ .)
    RPAREN          reduce using rule 78 (new_type_name -> type_specifier_ .)
    COMMA           reduce using rule 78 (new_type_name -> type_specifier_ .)
    RSPAREN         reduce using rule 78 (new_type_name -> type_specifier_ .)
    SEMICOLON       reduce using rule 78 (new_type_name -> type_specifier_ .)
    RCPAREN         reduce using rule 78 (new_type_name -> type_specifier_ .)
    COLON           reduce using rule 78 (new_type_name -> type_specifier_ .)
    RTEMPLATE       reduce using rule 78 (new_type_name -> type_specifier_ .)
    MULTOP          shift and go to state 321
    LSPAREN         shift and go to state 322

  ! MULTOP          [ reduce using rule 78 (new_type_name -> type_specifier_ .) ]

    new_declarator                 shift and go to state 320

state 229

    (72) deallocation_expression -> DELETE cast_expression .

    EQUAL           reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    MULTEQOP        reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    DIVEQOP         reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    MODEQOP         reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    PLUSEQOP        reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    MINUSEQOP       reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    LSHIFTEQOP      reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    RSHIFTEQOP      reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    BANDEQOP        reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    BOREQOP         reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    DOTSTAR         reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    ARROWSTAR       reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    MULTOP          reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    DIVOP           reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    MODOP           reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    PLUSOP          reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    MINUSOP         reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    LSHIFT          reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    RSHIFT          reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    LTCOMP          reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    GTCOMP          reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    LTECOMP         reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    GTECOMP         reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    EQCOMP          reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    NEQCOMP         reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    BANDOP          reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    XOROP           reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    OROP            reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    ANDOP           reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    QUESMARK        reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    RPAREN          reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    COMMA           reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    RSPAREN         reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    SEMICOLON       reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    RCPAREN         reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    COLON           reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)
    RTEMPLATE       reduce using rule 72 (deallocation_expression -> DELETE cast_expression .)


state 230

    (20) inclusive_OR_expression -> inclusive_OR_expression OROP . exclusive_OR_expression
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR

    LPAREN          shift and go to state 150
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    THIS            shift and go to state 134
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    exclusive_OR_expression        shift and go to state 323
    AND_expression                 shift and go to state 139
    equality_expression            shift and go to state 140
    relational_expression          shift and go to state 141
    shift_expression               shift and go to state 142
    additive_expression            shift and go to state 143
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145
    cast_expression                shift and go to state 118
    unary_expression               shift and go to state 149
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    literal                        shift and go to state 133

state 231

    (22) exclusive_OR_expression -> exclusive_OR_expression XOROP . AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR

    LPAREN          shift and go to state 150
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    THIS            shift and go to state 134
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    AND_expression                 shift and go to state 324
    equality_expression            shift and go to state 140
    relational_expression          shift and go to state 141
    shift_expression               shift and go to state 142
    additive_expression            shift and go to state 143
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145
    cast_expression                shift and go to state 118
    unary_expression               shift and go to state 149
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    literal                        shift and go to state 133

state 232

    (24) AND_expression -> AND_expression BANDOP . equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR

    LPAREN          shift and go to state 150
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    THIS            shift and go to state 134
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    equality_expression            shift and go to state 325
    relational_expression          shift and go to state 141
    shift_expression               shift and go to state 142
    additive_expression            shift and go to state 143
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145
    cast_expression                shift and go to state 118
    unary_expression               shift and go to state 149
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    literal                        shift and go to state 133

state 233

    (26) equality_expression -> equality_expression EQCOMP . relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR

    LPAREN          shift and go to state 150
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    THIS            shift and go to state 134
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    relational_expression          shift and go to state 326
    shift_expression               shift and go to state 142
    additive_expression            shift and go to state 143
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145
    cast_expression                shift and go to state 118
    unary_expression               shift and go to state 149
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    literal                        shift and go to state 133

state 234

    (27) equality_expression -> equality_expression NEQCOMP . relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR

    LPAREN          shift and go to state 150
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    THIS            shift and go to state 134
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    relational_expression          shift and go to state 327
    shift_expression               shift and go to state 142
    additive_expression            shift and go to state 143
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145
    cast_expression                shift and go to state 118
    unary_expression               shift and go to state 149
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    literal                        shift and go to state 133

state 235

    (29) relational_expression -> relational_expression LTCOMP . shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR

    LPAREN          shift and go to state 150
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    THIS            shift and go to state 134
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    shift_expression               shift and go to state 328
    additive_expression            shift and go to state 143
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145
    cast_expression                shift and go to state 118
    unary_expression               shift and go to state 149
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    literal                        shift and go to state 133

state 236

    (30) relational_expression -> relational_expression GTCOMP . shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR

    LPAREN          shift and go to state 150
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    THIS            shift and go to state 134
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    shift_expression               shift and go to state 329
    additive_expression            shift and go to state 143
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145
    cast_expression                shift and go to state 118
    unary_expression               shift and go to state 149
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    literal                        shift and go to state 133

state 237

    (31) relational_expression -> relational_expression LTECOMP . shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR

    LPAREN          shift and go to state 150
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    THIS            shift and go to state 134
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    shift_expression               shift and go to state 330
    additive_expression            shift and go to state 143
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145
    cast_expression                shift and go to state 118
    unary_expression               shift and go to state 149
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    literal                        shift and go to state 133

state 238

    (32) relational_expression -> relational_expression GTECOMP . shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR

    LPAREN          shift and go to state 150
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    THIS            shift and go to state 134
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    shift_expression               shift and go to state 331
    additive_expression            shift and go to state 143
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145
    cast_expression                shift and go to state 118
    unary_expression               shift and go to state 149
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    literal                        shift and go to state 133

state 239

    (34) shift_expression -> shift_expression LSHIFT . additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR

    LPAREN          shift and go to state 150
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    THIS            shift and go to state 134
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    additive_expression            shift and go to state 332
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145
    cast_expression                shift and go to state 118
    unary_expression               shift and go to state 149
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    literal                        shift and go to state 133

state 240

    (35) shift_expression -> shift_expression RSHIFT . additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR

    LPAREN          shift and go to state 150
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    THIS            shift and go to state 134
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    additive_expression            shift and go to state 333
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145
    cast_expression                shift and go to state 118
    unary_expression               shift and go to state 149
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    literal                        shift and go to state 133

state 241

    (37) additive_expression -> additive_expression PLUSOP . multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR

    LPAREN          shift and go to state 150
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    THIS            shift and go to state 134
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    multiplicative_expression      shift and go to state 334
    pm_expression                  shift and go to state 145
    cast_expression                shift and go to state 118
    unary_expression               shift and go to state 149
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    literal                        shift and go to state 133

state 242

    (38) additive_expression -> additive_expression MINUSOP . multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR

    LPAREN          shift and go to state 150
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    THIS            shift and go to state 134
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    multiplicative_expression      shift and go to state 335
    pm_expression                  shift and go to state 145
    cast_expression                shift and go to state 118
    unary_expression               shift and go to state 149
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    literal                        shift and go to state 133

state 243

    (40) multiplicative_expression -> multiplicative_expression MULTOP . pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR

    LPAREN          shift and go to state 150
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    THIS            shift and go to state 134
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    pm_expression                  shift and go to state 336
    cast_expression                shift and go to state 118
    unary_expression               shift and go to state 149
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    literal                        shift and go to state 133

state 244

    (41) multiplicative_expression -> multiplicative_expression DIVOP . pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR

    LPAREN          shift and go to state 150
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    THIS            shift and go to state 134
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    pm_expression                  shift and go to state 337
    cast_expression                shift and go to state 118
    unary_expression               shift and go to state 149
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    literal                        shift and go to state 133

state 245

    (42) multiplicative_expression -> multiplicative_expression MODOP . pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR

    LPAREN          shift and go to state 150
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    THIS            shift and go to state 134
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    pm_expression                  shift and go to state 338
    cast_expression                shift and go to state 118
    unary_expression               shift and go to state 149
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    literal                        shift and go to state 133

state 246

    (44) pm_expression -> pm_expression DOTSTAR . cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR

    LPAREN          shift and go to state 150
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    THIS            shift and go to state 134
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    cast_expression                shift and go to state 339
    unary_expression               shift and go to state 149
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    literal                        shift and go to state 133

state 247

    (45) pm_expression -> pm_expression ARROWSTAR . cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR

    LPAREN          shift and go to state 150
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    THIS            shift and go to state 134
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    cast_expression                shift and go to state 340
    unary_expression               shift and go to state 149
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    literal                        shift and go to state 133

state 248

    (117) declarator -> declarator LSPAREN constant_expression RSPAREN .

    LPAREN          reduce using rule 117 (declarator -> declarator LSPAREN constant_expression RSPAREN .)
    LSPAREN         reduce using rule 117 (declarator -> declarator LSPAREN constant_expression RSPAREN .)
    EQUAL           reduce using rule 117 (declarator -> declarator LSPAREN constant_expression RSPAREN .)
    SEMICOLON       reduce using rule 117 (declarator -> declarator LSPAREN constant_expression RSPAREN .)
    COMMA           reduce using rule 117 (declarator -> declarator LSPAREN constant_expression RSPAREN .)
    RTEMPLATE       reduce using rule 117 (declarator -> declarator LSPAREN constant_expression RSPAREN .)
    RPAREN          reduce using rule 117 (declarator -> declarator LSPAREN constant_expression RSPAREN .)


state 249

    (285) initializer_list -> LCPAREN . initializer_list RCPAREN
    (286) initializer_list -> LCPAREN . initializer_list COMMA RCPAREN
    (283) initializer_list -> . assignment_expression
    (284) initializer_list -> . initializer_list COMMA assignment_expression
    (285) initializer_list -> . LCPAREN initializer_list RCPAREN
    (286) initializer_list -> . LCPAREN initializer_list COMMA RCPAREN
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LCPAREN         shift and go to state 249
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    THIS            shift and go to state 134
    LPAREN          shift and go to state 105
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    initializer_list               shift and go to state 341
    assignment_expression          shift and go to state 251
    conditional_expression         shift and go to state 111
    unary_expression               shift and go to state 112
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    cast_expression                shift and go to state 118
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    logical_AND_expression         shift and go to state 123
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    inclusive_OR_expression        shift and go to state 132
    literal                        shift and go to state 133
    exclusive_OR_expression        shift and go to state 135
    AND_expression                 shift and go to state 139
    equality_expression            shift and go to state 140
    relational_expression          shift and go to state 141
    shift_expression               shift and go to state 142
    additive_expression            shift and go to state 143
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145

state 250

    (280) initializer -> EQUAL LCPAREN initializer_list . RCPAREN
    (281) initializer -> EQUAL LCPAREN initializer_list . COMMA RCPAREN
    (284) initializer_list -> initializer_list . COMMA assignment_expression

    RCPAREN         shift and go to state 342
    COMMA           shift and go to state 343


state 251

    (283) initializer_list -> assignment_expression .

    RCPAREN         reduce using rule 283 (initializer_list -> assignment_expression .)
    COMMA           reduce using rule 283 (initializer_list -> assignment_expression .)
    RPAREN          reduce using rule 283 (initializer_list -> assignment_expression .)


state 252

    (287) asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .

    CONST           reduce using rule 287 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    ASM             reduce using rule 287 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    TEMPLATE        reduce using rule 287 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    TYPEDEF         reduce using rule 287 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    CHAR            reduce using rule 287 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    SHORT           reduce using rule 287 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    INT             reduce using rule 287 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    LONG            reduce using rule 287 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    SIGNED          reduce using rule 287 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    UNSIGNED        reduce using rule 287 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    FLOAT           reduce using rule 287 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    DOUBLE          reduce using rule 287 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    VOID            reduce using rule 287 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    STRING          reduce using rule 287 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    AUTO            reduce using rule 287 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    TYPE            reduce using rule 287 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    CLASS           reduce using rule 287 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    STRUCT          reduce using rule 287 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    $end            reduce using rule 287 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    RCPAREN         reduce using rule 287 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 287 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    CASE            reduce using rule 287 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 287 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 287 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    LCPAREN         reduce using rule 287 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    IF              reduce using rule 287 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    SWITCH          reduce using rule 287 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    WHILE           reduce using rule 287 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    DO              reduce using rule 287 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    FOR             reduce using rule 287 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    BREAK           reduce using rule 287 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 287 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    RETURN          reduce using rule 287 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    GOTO            reduce using rule 287 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    TRY             reduce using rule 287 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    THROW           reduce using rule 287 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    DPLUSOP         reduce using rule 287 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    DMINUSOP        reduce using rule 287 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    SIZEOF          reduce using rule 287 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    PLUSOP          reduce using rule 287 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    MINUSOP         reduce using rule 287 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    NOTSYM          reduce using rule 287 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    BNOP            reduce using rule 287 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    MULTOP          reduce using rule 287 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    BANDOP          reduce using rule 287 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    NEW             reduce using rule 287 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    DELETE          reduce using rule 287 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    THIS            reduce using rule 287 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    LPAREN          reduce using rule 287 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    DOUBLEBNOP      reduce using rule 287 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    STRING_L        reduce using rule 287 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    NUMBER          reduce using rule 287 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    SCHAR           reduce using rule 287 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    ELSE            reduce using rule 287 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)


state 253

    (211) access_list -> access_specifier COLON member_access_list .

    RCPAREN         reduce using rule 211 (access_list -> access_specifier COLON member_access_list .)
    PRIVATE         reduce using rule 211 (access_list -> access_specifier COLON member_access_list .)
    PROTECTED       reduce using rule 211 (access_list -> access_specifier COLON member_access_list .)
    PUBLIC          reduce using rule 211 (access_list -> access_specifier COLON member_access_list .)


state 254

    (215) member_declaration -> type_specifier_ member_declarator_list SEMICOLON .

    SEMICOLON       reduce using rule 215 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    CONST           reduce using rule 215 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    CHAR            reduce using rule 215 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    SHORT           reduce using rule 215 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    INT             reduce using rule 215 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    LONG            reduce using rule 215 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    SIGNED          reduce using rule 215 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    UNSIGNED        reduce using rule 215 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    FLOAT           reduce using rule 215 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    DOUBLE          reduce using rule 215 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    VOID            reduce using rule 215 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    STRING          reduce using rule 215 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    AUTO            reduce using rule 215 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    TYPE            reduce using rule 215 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    CLASS           reduce using rule 215 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    STRUCT          reduce using rule 215 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    IDENTIFIER      reduce using rule 215 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    DOUBLEBNOP      reduce using rule 215 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    MULTOP          reduce using rule 215 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    BANDOP          reduce using rule 215 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    RCPAREN         reduce using rule 215 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    PRIVATE         reduce using rule 215 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    PROTECTED       reduce using rule 215 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)
    PUBLIC          reduce using rule 215 (member_declaration -> type_specifier_ member_declarator_list SEMICOLON .)


state 255

    (225) function_definition -> type_specifier_ declarator LPAREN . argument_declaration_list RPAREN fct_body
    (226) function_definition -> type_specifier_ declarator LPAREN . RPAREN fct_body
    (119) argument_declaration_list -> . argument_declaration
    (120) argument_declaration_list -> . argument_declaration COMMA argument_declaration_list
    (121) argument_declaration -> . type_specifier_ declarator
    (122) argument_declaration -> . type_specifier_ declarator EQUAL expression
    (123) argument_declaration -> . type_specifier_ abstract_declarator
    (124) argument_declaration -> . type_specifier_
    (168) type_specifier_ -> . CONST type_specifier
    (169) type_specifier_ -> . type_specifier
    (172) type_specifier -> . simple_type_name
    (173) type_specifier -> . complex_type_specifier
    (174) simple_type_name -> . CHAR
    (175) simple_type_name -> . SHORT
    (176) simple_type_name -> . INT
    (177) simple_type_name -> . LONG
    (178) simple_type_name -> . SIGNED
    (179) simple_type_name -> . UNSIGNED
    (180) simple_type_name -> . FLOAT
    (181) simple_type_name -> . DOUBLE
    (182) simple_type_name -> . VOID
    (183) simple_type_name -> . STRING
    (184) simple_type_name -> . AUTO
    (185) complex_type_specifier -> . class_key IDENTIFIER
    (186) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (187) complex_type_specifier -> . TYPE IDENTIFIER
    (188) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (201) class_key -> . CLASS
    (202) class_key -> . STRUCT

    RPAREN          shift and go to state 345
    CONST           shift and go to state 16
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38

    type_specifier_                shift and go to state 92
    argument_declaration_list      shift and go to state 344
    argument_declaration           shift and go to state 109
    type_specifier                 shift and go to state 17
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 56

state 256

    (222) member_declarator_list -> member_declarator_list COMMA member_declarator .

    SEMICOLON       reduce using rule 222 (member_declarator_list -> member_declarator_list COMMA member_declarator .)
    COMMA           reduce using rule 222 (member_declarator_list -> member_declarator_list COMMA member_declarator .)


state 257

    (189) pure_specifier -> EQUAL NUMBER .

    SEMICOLON       reduce using rule 189 (pure_specifier -> EQUAL NUMBER .)
    COMMA           reduce using rule 189 (pure_specifier -> EQUAL NUMBER .)


state 258

    (272) template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .

    CONST           reduce using rule 272 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    ASM             reduce using rule 272 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    TEMPLATE        reduce using rule 272 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    TYPEDEF         reduce using rule 272 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    CHAR            reduce using rule 272 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    SHORT           reduce using rule 272 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    INT             reduce using rule 272 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    LONG            reduce using rule 272 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    SIGNED          reduce using rule 272 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    UNSIGNED        reduce using rule 272 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    FLOAT           reduce using rule 272 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    DOUBLE          reduce using rule 272 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    VOID            reduce using rule 272 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    STRING          reduce using rule 272 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    AUTO            reduce using rule 272 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    TYPE            reduce using rule 272 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    CLASS           reduce using rule 272 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    STRUCT          reduce using rule 272 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    $end            reduce using rule 272 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    RCPAREN         reduce using rule 272 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    IDENTIFIER      reduce using rule 272 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    CASE            reduce using rule 272 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    DEFAULT         reduce using rule 272 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    SEMICOLON       reduce using rule 272 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    LCPAREN         reduce using rule 272 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    IF              reduce using rule 272 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    SWITCH          reduce using rule 272 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    WHILE           reduce using rule 272 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    DO              reduce using rule 272 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    FOR             reduce using rule 272 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    BREAK           reduce using rule 272 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    CONTINUE        reduce using rule 272 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    RETURN          reduce using rule 272 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    GOTO            reduce using rule 272 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    TRY             reduce using rule 272 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    THROW           reduce using rule 272 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    DPLUSOP         reduce using rule 272 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    DMINUSOP        reduce using rule 272 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    SIZEOF          reduce using rule 272 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    PLUSOP          reduce using rule 272 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    MINUSOP         reduce using rule 272 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    NOTSYM          reduce using rule 272 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    BNOP            reduce using rule 272 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    MULTOP          reduce using rule 272 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    BANDOP          reduce using rule 272 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    NEW             reduce using rule 272 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    DELETE          reduce using rule 272 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    THIS            reduce using rule 272 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    LPAREN          reduce using rule 272 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    DOUBLEBNOP      reduce using rule 272 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    STRING_L        reduce using rule 272 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    NUMBER          reduce using rule 272 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    SCHAR           reduce using rule 272 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    ELSE            reduce using rule 272 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)


state 259

    (274) template_argument_list -> template_argument_list COMMA argument_declaration .

    RTEMPLATE       reduce using rule 274 (template_argument_list -> template_argument_list COMMA argument_declaration .)
    COMMA           reduce using rule 274 (template_argument_list -> template_argument_list COMMA argument_declaration .)


state 260

    (122) argument_declaration -> type_specifier_ declarator EQUAL . expression
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    THROW           shift and go to state 190
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    THIS            shift and go to state 134
    LPAREN          shift and go to state 105
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    expression                     shift and go to state 346
    assignment_expression          shift and go to state 188
    throw_expression               shift and go to state 189
    conditional_expression         shift and go to state 111
    unary_expression               shift and go to state 112
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    cast_expression                shift and go to state 118
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    logical_AND_expression         shift and go to state 123
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    inclusive_OR_expression        shift and go to state 132
    literal                        shift and go to state 133
    exclusive_OR_expression        shift and go to state 135
    AND_expression                 shift and go to state 139
    equality_expression            shift and go to state 140
    relational_expression          shift and go to state 141
    shift_expression               shift and go to state 142
    additive_expression            shift and go to state 143
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145

state 261

    (170) typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .

    CONST           reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    ASM             reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    TEMPLATE        reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    TYPEDEF         reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    CHAR            reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    SHORT           reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    INT             reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    LONG            reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    SIGNED          reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    UNSIGNED        reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    FLOAT           reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    DOUBLE          reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    VOID            reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    STRING          reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    AUTO            reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    TYPE            reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    CLASS           reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    STRUCT          reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    $end            reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    RCPAREN         reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    CASE            reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    DEFAULT         reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    SEMICOLON       reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    LCPAREN         reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    IF              reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    SWITCH          reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    DO              reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    FOR             reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    BREAK           reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    CONTINUE        reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    RETURN          reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    GOTO            reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    TRY             reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    THROW           reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    DPLUSOP         reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    DMINUSOP        reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    SIZEOF          reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    PLUSOP          reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    MINUSOP         reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    NOTSYM          reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    BNOP            reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    MULTOP          reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    BANDOP          reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    NEW             reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    DELETE          reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    THIS            reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    LPAREN          reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    DOUBLEBNOP      reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    STRING_L        reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    NUMBER          reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    SCHAR           reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)
    ELSE            reduce using rule 170 (typedef_declarator -> TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON .)


state 262

    (112) abstract_declarator -> abstract_declarator LSPAREN constant_expression . RSPAREN

    RSPAREN         shift and go to state 347


state 263

    (114) abstract_declarator -> abstract_declarator LSPAREN RSPAREN .

    IDENTIFIER      reduce using rule 114 (abstract_declarator -> abstract_declarator LSPAREN RSPAREN .)
    LSPAREN         reduce using rule 114 (abstract_declarator -> abstract_declarator LSPAREN RSPAREN .)
    RTEMPLATE       reduce using rule 114 (abstract_declarator -> abstract_declarator LSPAREN RSPAREN .)
    COMMA           reduce using rule 114 (abstract_declarator -> abstract_declarator LSPAREN RSPAREN .)
    RPAREN          reduce using rule 114 (abstract_declarator -> abstract_declarator LSPAREN RSPAREN .)


state 264

    (111) abstract_declarator -> LSPAREN constant_expression RSPAREN .

    IDENTIFIER      reduce using rule 111 (abstract_declarator -> LSPAREN constant_expression RSPAREN .)
    LSPAREN         reduce using rule 111 (abstract_declarator -> LSPAREN constant_expression RSPAREN .)
    RTEMPLATE       reduce using rule 111 (abstract_declarator -> LSPAREN constant_expression RSPAREN .)
    COMMA           reduce using rule 111 (abstract_declarator -> LSPAREN constant_expression RSPAREN .)
    RPAREN          reduce using rule 111 (abstract_declarator -> LSPAREN constant_expression RSPAREN .)


state 265

    (194) base_list -> base_list COMMA . base_specifier
    (195) base_specifier -> . class_key IDENTIFIER
    (196) base_specifier -> . class_key IDENTIFIER template_class_name
    (197) base_specifier -> . IDENTIFIER
    (198) base_specifier -> . IDENTIFIER template_class_name
    (199) base_specifier -> . access_specifier class_key IDENTIFIER
    (200) base_specifier -> . access_specifier class_key IDENTIFIER template_class_name
    (201) class_key -> . CLASS
    (202) class_key -> . STRUCT
    (208) access_specifier -> . PRIVATE
    (209) access_specifier -> . PROTECTED
    (210) access_specifier -> . PUBLIC

    IDENTIFIER      shift and go to state 180
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38
    PRIVATE         shift and go to state 85
    PROTECTED       shift and go to state 86
    PUBLIC          shift and go to state 87

    base_specifier                 shift and go to state 348
    class_key                      shift and go to state 179
    access_specifier               shift and go to state 181

state 266

    (195) base_specifier -> class_key IDENTIFIER .
    (196) base_specifier -> class_key IDENTIFIER . template_class_name
    (163) template_class_name -> . LTEMPLATE template_arg_list RTEMPLATE

    COMMA           reduce using rule 195 (base_specifier -> class_key IDENTIFIER .)
    LCPAREN         reduce using rule 195 (base_specifier -> class_key IDENTIFIER .)
    LTEMPLATE       shift and go to state 100

    template_class_name            shift and go to state 349

state 267

    (198) base_specifier -> IDENTIFIER template_class_name .

    COMMA           reduce using rule 198 (base_specifier -> IDENTIFIER template_class_name .)
    LCPAREN         reduce using rule 198 (base_specifier -> IDENTIFIER template_class_name .)


state 268

    (199) base_specifier -> access_specifier class_key . IDENTIFIER
    (200) base_specifier -> access_specifier class_key . IDENTIFIER template_class_name

    IDENTIFIER      shift and go to state 350


state 269

    (163) template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .

    IDENTIFIER      reduce using rule 163 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    DOUBLEBNOP      reduce using rule 163 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    MULTOP          reduce using rule 163 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    BANDOP          reduce using rule 163 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    SEMICOLON       reduce using rule 163 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    LSPAREN         reduce using rule 163 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    RTEMPLATE       reduce using rule 163 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    COMMA           reduce using rule 163 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    RPAREN          reduce using rule 163 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    LPAREN          reduce using rule 163 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    EQUAL           reduce using rule 163 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    MULTEQOP        reduce using rule 163 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    DIVEQOP         reduce using rule 163 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    MODEQOP         reduce using rule 163 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    PLUSEQOP        reduce using rule 163 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    MINUSEQOP       reduce using rule 163 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    LSHIFTEQOP      reduce using rule 163 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    RSHIFTEQOP      reduce using rule 163 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    BANDEQOP        reduce using rule 163 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    BOREQOP         reduce using rule 163 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    DOTSTAR         reduce using rule 163 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    ARROWSTAR       reduce using rule 163 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    DIVOP           reduce using rule 163 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    MODOP           reduce using rule 163 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    PLUSOP          reduce using rule 163 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    MINUSOP         reduce using rule 163 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    LSHIFT          reduce using rule 163 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    RSHIFT          reduce using rule 163 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    LTCOMP          reduce using rule 163 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    GTCOMP          reduce using rule 163 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    LTECOMP         reduce using rule 163 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    GTECOMP         reduce using rule 163 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    EQCOMP          reduce using rule 163 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    NEQCOMP         reduce using rule 163 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    XOROP           reduce using rule 163 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    OROP            reduce using rule 163 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    ANDOP           reduce using rule 163 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    QUESMARK        reduce using rule 163 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    RSPAREN         reduce using rule 163 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    RCPAREN         reduce using rule 163 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    COLON           reduce using rule 163 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    LCPAREN         reduce using rule 163 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)


state 270

    (165) template_arg_list -> template_arg_list COMMA . type_name
    (166) type_name -> . type_specifier_ abstract_declarator
    (167) type_name -> . type_specifier_
    (168) type_specifier_ -> . CONST type_specifier
    (169) type_specifier_ -> . type_specifier
    (172) type_specifier -> . simple_type_name
    (173) type_specifier -> . complex_type_specifier
    (174) simple_type_name -> . CHAR
    (175) simple_type_name -> . SHORT
    (176) simple_type_name -> . INT
    (177) simple_type_name -> . LONG
    (178) simple_type_name -> . SIGNED
    (179) simple_type_name -> . UNSIGNED
    (180) simple_type_name -> . FLOAT
    (181) simple_type_name -> . DOUBLE
    (182) simple_type_name -> . VOID
    (183) simple_type_name -> . STRING
    (184) simple_type_name -> . AUTO
    (185) complex_type_specifier -> . class_key IDENTIFIER
    (186) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (187) complex_type_specifier -> . TYPE IDENTIFIER
    (188) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (201) class_key -> . CLASS
    (202) class_key -> . STRUCT

    CONST           shift and go to state 16
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38

    type_name                      shift and go to state 351
    type_specifier_                shift and go to state 184
    type_specifier                 shift and go to state 17
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 56

state 271

    (166) type_name -> type_specifier_ abstract_declarator .
    (112) abstract_declarator -> abstract_declarator . LSPAREN constant_expression RSPAREN
    (114) abstract_declarator -> abstract_declarator . LSPAREN RSPAREN

    RTEMPLATE       reduce using rule 166 (type_name -> type_specifier_ abstract_declarator .)
    COMMA           reduce using rule 166 (type_name -> type_specifier_ abstract_declarator .)
    RPAREN          reduce using rule 166 (type_name -> type_specifier_ abstract_declarator .)
    LSPAREN         shift and go to state 172


state 272

    (103) primary_expression -> LPAREN expression RPAREN .

    LSPAREN         reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    DOT             reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    ARROW           reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    DPLUSOP         reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    DMINUSOP        reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    LTEMPLATE       reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    MULTEQOP        reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    DIVEQOP         reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    MODEQOP         reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    PLUSEQOP        reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    MINUSEQOP       reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    LSHIFTEQOP      reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    RSHIFTEQOP      reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    BANDEQOP        reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    BOREQOP         reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    DOTSTAR         reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    ARROWSTAR       reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    MULTOP          reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    DIVOP           reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    MODOP           reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    PLUSOP          reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    MINUSOP         reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    LSHIFT          reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    RSHIFT          reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    LTCOMP          reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    GTCOMP          reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    LTECOMP         reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    GTECOMP         reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    EQCOMP          reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    NEQCOMP         reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    BANDOP          reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    XOROP           reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    OROP            reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    ANDOP           reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    QUESMARK        reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    RSPAREN         reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    RCPAREN         reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)
    RTEMPLATE       reduce using rule 103 (primary_expression -> LPAREN expression RPAREN .)


state 273

    (48) expression -> expression COMMA . assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    THIS            shift and go to state 134
    LPAREN          shift and go to state 105
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    assignment_expression          shift and go to state 352
    conditional_expression         shift and go to state 111
    unary_expression               shift and go to state 112
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    cast_expression                shift and go to state 118
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    logical_AND_expression         shift and go to state 123
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    inclusive_OR_expression        shift and go to state 132
    literal                        shift and go to state 133
    exclusive_OR_expression        shift and go to state 135
    AND_expression                 shift and go to state 139
    equality_expression            shift and go to state 140
    relational_expression          shift and go to state 141
    shift_expression               shift and go to state 142
    additive_expression            shift and go to state 143
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145

state 274

    (108) cast_expression -> LPAREN type_name RPAREN . cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR

    LPAREN          shift and go to state 150
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    THIS            shift and go to state 134
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    cast_expression                shift and go to state 353
    unary_expression               shift and go to state 149
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    literal                        shift and go to state 133

state 275

    (49) throw_expression -> THROW expression .
    (48) expression -> expression . COMMA assignment_expression

  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 49 (throw_expression -> THROW expression .)
    SEMICOLON       reduce using rule 49 (throw_expression -> THROW expression .)
    COLON           reduce using rule 49 (throw_expression -> THROW expression .)
    RSPAREN         reduce using rule 49 (throw_expression -> THROW expression .)
    RTEMPLATE       reduce using rule 49 (throw_expression -> THROW expression .)
    COMMA           shift and go to state 273

  ! COMMA           [ reduce using rule 49 (throw_expression -> THROW expression .) ]


state 276

    (225) function_definition -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body .

    CONST           reduce using rule 225 (function_definition -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body .)
    ASM             reduce using rule 225 (function_definition -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body .)
    TEMPLATE        reduce using rule 225 (function_definition -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body .)
    TYPEDEF         reduce using rule 225 (function_definition -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body .)
    CHAR            reduce using rule 225 (function_definition -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body .)
    SHORT           reduce using rule 225 (function_definition -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body .)
    INT             reduce using rule 225 (function_definition -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body .)
    LONG            reduce using rule 225 (function_definition -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body .)
    SIGNED          reduce using rule 225 (function_definition -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body .)
    UNSIGNED        reduce using rule 225 (function_definition -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body .)
    FLOAT           reduce using rule 225 (function_definition -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body .)
    DOUBLE          reduce using rule 225 (function_definition -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body .)
    VOID            reduce using rule 225 (function_definition -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body .)
    STRING          reduce using rule 225 (function_definition -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body .)
    AUTO            reduce using rule 225 (function_definition -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body .)
    TYPE            reduce using rule 225 (function_definition -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body .)
    CLASS           reduce using rule 225 (function_definition -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body .)
    STRUCT          reduce using rule 225 (function_definition -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body .)
    $end            reduce using rule 225 (function_definition -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body .)
    SEMICOLON       reduce using rule 225 (function_definition -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body .)
    IDENTIFIER      reduce using rule 225 (function_definition -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body .)
    DOUBLEBNOP      reduce using rule 225 (function_definition -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body .)
    MULTOP          reduce using rule 225 (function_definition -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body .)
    BANDOP          reduce using rule 225 (function_definition -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body .)
    RCPAREN         reduce using rule 225 (function_definition -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body .)
    PRIVATE         reduce using rule 225 (function_definition -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body .)
    PROTECTED       reduce using rule 225 (function_definition -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body .)
    PUBLIC          reduce using rule 225 (function_definition -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body .)
    CASE            reduce using rule 225 (function_definition -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body .)
    DEFAULT         reduce using rule 225 (function_definition -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body .)
    LCPAREN         reduce using rule 225 (function_definition -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body .)
    IF              reduce using rule 225 (function_definition -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body .)
    SWITCH          reduce using rule 225 (function_definition -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body .)
    WHILE           reduce using rule 225 (function_definition -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body .)
    DO              reduce using rule 225 (function_definition -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body .)
    FOR             reduce using rule 225 (function_definition -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body .)
    BREAK           reduce using rule 225 (function_definition -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body .)
    CONTINUE        reduce using rule 225 (function_definition -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body .)
    RETURN          reduce using rule 225 (function_definition -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body .)
    GOTO            reduce using rule 225 (function_definition -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body .)
    TRY             reduce using rule 225 (function_definition -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body .)
    THROW           reduce using rule 225 (function_definition -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body .)
    DPLUSOP         reduce using rule 225 (function_definition -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body .)
    DMINUSOP        reduce using rule 225 (function_definition -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body .)
    SIZEOF          reduce using rule 225 (function_definition -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body .)
    PLUSOP          reduce using rule 225 (function_definition -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body .)
    MINUSOP         reduce using rule 225 (function_definition -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body .)
    NOTSYM          reduce using rule 225 (function_definition -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body .)
    BNOP            reduce using rule 225 (function_definition -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body .)
    NEW             reduce using rule 225 (function_definition -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body .)
    DELETE          reduce using rule 225 (function_definition -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body .)
    THIS            reduce using rule 225 (function_definition -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body .)
    LPAREN          reduce using rule 225 (function_definition -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body .)
    STRING_L        reduce using rule 225 (function_definition -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body .)
    NUMBER          reduce using rule 225 (function_definition -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body .)
    SCHAR           reduce using rule 225 (function_definition -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body .)
    ELSE            reduce using rule 225 (function_definition -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body .)


state 277

    (230) compound_statement -> LCPAREN statement_list . RCPAREN
    (233) statement_list -> statement_list . statement
    (234) statement -> . labeled_statement
    (235) statement -> . expression_statement
    (236) statement -> . compound_statement
    (237) statement -> . selection_statement
    (238) statement -> . iteration_statement
    (239) statement -> . jump_statement
    (240) statement -> . declaration_statement
    (241) statement -> . try_block
    (251) labeled_statement -> . IDENTIFIER COLON statement
    (252) labeled_statement -> . CASE constant_expression COLON statement
    (253) labeled_statement -> . DEFAULT COLON statement
    (262) expression_statement -> . expression SEMICOLON
    (263) expression_statement -> . SEMICOLON
    (230) compound_statement -> . LCPAREN statement_list RCPAREN
    (231) compound_statement -> . LCPAREN RCPAREN
    (247) selection_statement -> . IF LPAREN expression RPAREN statement
    (248) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (249) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (254) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (255) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (256) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (257) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (258) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (259) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (242) jump_statement -> . BREAK SEMICOLON
    (243) jump_statement -> . CONTINUE SEMICOLON
    (244) jump_statement -> . RETURN expression SEMICOLON
    (245) jump_statement -> . RETURN SEMICOLON
    (246) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (264) declaration_statement -> . declaration
    (250) try_block -> . TRY compound_statement CATCH compound_statement
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (265) declaration -> . type_specifier_ declarator_list SEMICOLON
    (266) declaration -> . asm_declaration
    (267) declaration -> . function_definition
    (268) declaration -> . function_decl
    (269) declaration -> . class_define_specifier SEMICOLON
    (270) declaration -> . template_declaration
    (271) declaration -> . typedef_declarator
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (168) type_specifier_ -> . CONST type_specifier
    (169) type_specifier_ -> . type_specifier
    (287) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (225) function_definition -> . type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body
    (226) function_definition -> . type_specifier_ declarator LPAREN RPAREN fct_body
    (227) function_decl -> . type_specifier_ declarator LPAREN argument_declaration_list RPAREN
    (228) function_decl -> . type_specifier_ declarator LPAREN RPAREN
    (203) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (204) class_define_specifier -> . class_head LCPAREN RCPAREN
    (272) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (170) typedef_declarator -> . TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON
    (171) typedef_declarator -> . TYPEDEF type_specifier_ IDENTIFIER SEMICOLON
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (172) type_specifier -> . simple_type_name
    (173) type_specifier -> . complex_type_specifier
    (190) class_head -> . class_key IDENTIFIER base_spec
    (191) class_head -> . class_key IDENTIFIER
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (174) simple_type_name -> . CHAR
    (175) simple_type_name -> . SHORT
    (176) simple_type_name -> . INT
    (177) simple_type_name -> . LONG
    (178) simple_type_name -> . SIGNED
    (179) simple_type_name -> . UNSIGNED
    (180) simple_type_name -> . FLOAT
    (181) simple_type_name -> . DOUBLE
    (182) simple_type_name -> . VOID
    (183) simple_type_name -> . STRING
    (184) simple_type_name -> . AUTO
    (185) complex_type_specifier -> . class_key IDENTIFIER
    (186) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (187) complex_type_specifier -> . TYPE IDENTIFIER
    (188) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (201) class_key -> . CLASS
    (202) class_key -> . STRUCT
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RCPAREN         shift and go to state 354
    IDENTIFIER      shift and go to state 288
    CASE            shift and go to state 289
    DEFAULT         shift and go to state 290
    SEMICOLON       shift and go to state 292
    LCPAREN         shift and go to state 194
    IF              shift and go to state 293
    SWITCH          shift and go to state 294
    WHILE           shift and go to state 295
    DO              shift and go to state 296
    FOR             shift and go to state 297
    BREAK           shift and go to state 298
    CONTINUE        shift and go to state 299
    RETURN          shift and go to state 300
    GOTO            shift and go to state 301
    TRY             shift and go to state 303
    THROW           shift and go to state 190
    CONST           shift and go to state 16
    ASM             shift and go to state 18
    TEMPLATE        shift and go to state 20
    TYPEDEF         shift and go to state 21
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38
    THIS            shift and go to state 134
    LPAREN          shift and go to state 105
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    statement                      shift and go to state 355
    labeled_statement              shift and go to state 280
    expression_statement           shift and go to state 281
    compound_statement             shift and go to state 282
    selection_statement            shift and go to state 283
    iteration_statement            shift and go to state 284
    jump_statement                 shift and go to state 285
    declaration_statement          shift and go to state 286
    try_block                      shift and go to state 287
    expression                     shift and go to state 291
    declaration                    shift and go to state 302
    assignment_expression          shift and go to state 188
    throw_expression               shift and go to state 189
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    function_decl                  shift and go to state 12
    class_define_specifier         shift and go to state 13
    template_declaration           shift and go to state 14
    typedef_declarator             shift and go to state 15
    conditional_expression         shift and go to state 111
    unary_expression               shift and go to state 112
    type_specifier                 shift and go to state 17
    class_head                     shift and go to state 19
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    cast_expression                shift and go to state 118
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 24
    logical_AND_expression         shift and go to state 123
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    inclusive_OR_expression        shift and go to state 132
    literal                        shift and go to state 133
    exclusive_OR_expression        shift and go to state 135
    AND_expression                 shift and go to state 139
    equality_expression            shift and go to state 140
    relational_expression          shift and go to state 141
    shift_expression               shift and go to state 142
    additive_expression            shift and go to state 143
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145

state 278

    (231) compound_statement -> LCPAREN RCPAREN .

    CONST           reduce using rule 231 (compound_statement -> LCPAREN RCPAREN .)
    ASM             reduce using rule 231 (compound_statement -> LCPAREN RCPAREN .)
    TEMPLATE        reduce using rule 231 (compound_statement -> LCPAREN RCPAREN .)
    TYPEDEF         reduce using rule 231 (compound_statement -> LCPAREN RCPAREN .)
    CHAR            reduce using rule 231 (compound_statement -> LCPAREN RCPAREN .)
    SHORT           reduce using rule 231 (compound_statement -> LCPAREN RCPAREN .)
    INT             reduce using rule 231 (compound_statement -> LCPAREN RCPAREN .)
    LONG            reduce using rule 231 (compound_statement -> LCPAREN RCPAREN .)
    SIGNED          reduce using rule 231 (compound_statement -> LCPAREN RCPAREN .)
    UNSIGNED        reduce using rule 231 (compound_statement -> LCPAREN RCPAREN .)
    FLOAT           reduce using rule 231 (compound_statement -> LCPAREN RCPAREN .)
    DOUBLE          reduce using rule 231 (compound_statement -> LCPAREN RCPAREN .)
    VOID            reduce using rule 231 (compound_statement -> LCPAREN RCPAREN .)
    STRING          reduce using rule 231 (compound_statement -> LCPAREN RCPAREN .)
    AUTO            reduce using rule 231 (compound_statement -> LCPAREN RCPAREN .)
    TYPE            reduce using rule 231 (compound_statement -> LCPAREN RCPAREN .)
    CLASS           reduce using rule 231 (compound_statement -> LCPAREN RCPAREN .)
    STRUCT          reduce using rule 231 (compound_statement -> LCPAREN RCPAREN .)
    $end            reduce using rule 231 (compound_statement -> LCPAREN RCPAREN .)
    RCPAREN         reduce using rule 231 (compound_statement -> LCPAREN RCPAREN .)
    IDENTIFIER      reduce using rule 231 (compound_statement -> LCPAREN RCPAREN .)
    CASE            reduce using rule 231 (compound_statement -> LCPAREN RCPAREN .)
    DEFAULT         reduce using rule 231 (compound_statement -> LCPAREN RCPAREN .)
    SEMICOLON       reduce using rule 231 (compound_statement -> LCPAREN RCPAREN .)
    LCPAREN         reduce using rule 231 (compound_statement -> LCPAREN RCPAREN .)
    IF              reduce using rule 231 (compound_statement -> LCPAREN RCPAREN .)
    SWITCH          reduce using rule 231 (compound_statement -> LCPAREN RCPAREN .)
    WHILE           reduce using rule 231 (compound_statement -> LCPAREN RCPAREN .)
    DO              reduce using rule 231 (compound_statement -> LCPAREN RCPAREN .)
    FOR             reduce using rule 231 (compound_statement -> LCPAREN RCPAREN .)
    BREAK           reduce using rule 231 (compound_statement -> LCPAREN RCPAREN .)
    CONTINUE        reduce using rule 231 (compound_statement -> LCPAREN RCPAREN .)
    RETURN          reduce using rule 231 (compound_statement -> LCPAREN RCPAREN .)
    GOTO            reduce using rule 231 (compound_statement -> LCPAREN RCPAREN .)
    TRY             reduce using rule 231 (compound_statement -> LCPAREN RCPAREN .)
    THROW           reduce using rule 231 (compound_statement -> LCPAREN RCPAREN .)
    DPLUSOP         reduce using rule 231 (compound_statement -> LCPAREN RCPAREN .)
    DMINUSOP        reduce using rule 231 (compound_statement -> LCPAREN RCPAREN .)
    SIZEOF          reduce using rule 231 (compound_statement -> LCPAREN RCPAREN .)
    PLUSOP          reduce using rule 231 (compound_statement -> LCPAREN RCPAREN .)
    MINUSOP         reduce using rule 231 (compound_statement -> LCPAREN RCPAREN .)
    NOTSYM          reduce using rule 231 (compound_statement -> LCPAREN RCPAREN .)
    BNOP            reduce using rule 231 (compound_statement -> LCPAREN RCPAREN .)
    MULTOP          reduce using rule 231 (compound_statement -> LCPAREN RCPAREN .)
    BANDOP          reduce using rule 231 (compound_statement -> LCPAREN RCPAREN .)
    NEW             reduce using rule 231 (compound_statement -> LCPAREN RCPAREN .)
    DELETE          reduce using rule 231 (compound_statement -> LCPAREN RCPAREN .)
    THIS            reduce using rule 231 (compound_statement -> LCPAREN RCPAREN .)
    LPAREN          reduce using rule 231 (compound_statement -> LCPAREN RCPAREN .)
    DOUBLEBNOP      reduce using rule 231 (compound_statement -> LCPAREN RCPAREN .)
    STRING_L        reduce using rule 231 (compound_statement -> LCPAREN RCPAREN .)
    NUMBER          reduce using rule 231 (compound_statement -> LCPAREN RCPAREN .)
    SCHAR           reduce using rule 231 (compound_statement -> LCPAREN RCPAREN .)
    ELSE            reduce using rule 231 (compound_statement -> LCPAREN RCPAREN .)
    CATCH           reduce using rule 231 (compound_statement -> LCPAREN RCPAREN .)
    PRIVATE         reduce using rule 231 (compound_statement -> LCPAREN RCPAREN .)
    PROTECTED       reduce using rule 231 (compound_statement -> LCPAREN RCPAREN .)
    PUBLIC          reduce using rule 231 (compound_statement -> LCPAREN RCPAREN .)


state 279

    (232) statement_list -> statement .

    RCPAREN         reduce using rule 232 (statement_list -> statement .)
    IDENTIFIER      reduce using rule 232 (statement_list -> statement .)
    CASE            reduce using rule 232 (statement_list -> statement .)
    DEFAULT         reduce using rule 232 (statement_list -> statement .)
    SEMICOLON       reduce using rule 232 (statement_list -> statement .)
    LCPAREN         reduce using rule 232 (statement_list -> statement .)
    IF              reduce using rule 232 (statement_list -> statement .)
    SWITCH          reduce using rule 232 (statement_list -> statement .)
    WHILE           reduce using rule 232 (statement_list -> statement .)
    DO              reduce using rule 232 (statement_list -> statement .)
    FOR             reduce using rule 232 (statement_list -> statement .)
    BREAK           reduce using rule 232 (statement_list -> statement .)
    CONTINUE        reduce using rule 232 (statement_list -> statement .)
    RETURN          reduce using rule 232 (statement_list -> statement .)
    GOTO            reduce using rule 232 (statement_list -> statement .)
    TRY             reduce using rule 232 (statement_list -> statement .)
    THROW           reduce using rule 232 (statement_list -> statement .)
    CONST           reduce using rule 232 (statement_list -> statement .)
    ASM             reduce using rule 232 (statement_list -> statement .)
    TEMPLATE        reduce using rule 232 (statement_list -> statement .)
    TYPEDEF         reduce using rule 232 (statement_list -> statement .)
    DPLUSOP         reduce using rule 232 (statement_list -> statement .)
    DMINUSOP        reduce using rule 232 (statement_list -> statement .)
    SIZEOF          reduce using rule 232 (statement_list -> statement .)
    PLUSOP          reduce using rule 232 (statement_list -> statement .)
    MINUSOP         reduce using rule 232 (statement_list -> statement .)
    NOTSYM          reduce using rule 232 (statement_list -> statement .)
    BNOP            reduce using rule 232 (statement_list -> statement .)
    MULTOP          reduce using rule 232 (statement_list -> statement .)
    BANDOP          reduce using rule 232 (statement_list -> statement .)
    NEW             reduce using rule 232 (statement_list -> statement .)
    DELETE          reduce using rule 232 (statement_list -> statement .)
    CHAR            reduce using rule 232 (statement_list -> statement .)
    SHORT           reduce using rule 232 (statement_list -> statement .)
    INT             reduce using rule 232 (statement_list -> statement .)
    LONG            reduce using rule 232 (statement_list -> statement .)
    SIGNED          reduce using rule 232 (statement_list -> statement .)
    UNSIGNED        reduce using rule 232 (statement_list -> statement .)
    FLOAT           reduce using rule 232 (statement_list -> statement .)
    DOUBLE          reduce using rule 232 (statement_list -> statement .)
    VOID            reduce using rule 232 (statement_list -> statement .)
    STRING          reduce using rule 232 (statement_list -> statement .)
    AUTO            reduce using rule 232 (statement_list -> statement .)
    TYPE            reduce using rule 232 (statement_list -> statement .)
    CLASS           reduce using rule 232 (statement_list -> statement .)
    STRUCT          reduce using rule 232 (statement_list -> statement .)
    THIS            reduce using rule 232 (statement_list -> statement .)
    LPAREN          reduce using rule 232 (statement_list -> statement .)
    DOUBLEBNOP      reduce using rule 232 (statement_list -> statement .)
    STRING_L        reduce using rule 232 (statement_list -> statement .)
    NUMBER          reduce using rule 232 (statement_list -> statement .)
    SCHAR           reduce using rule 232 (statement_list -> statement .)


state 280

    (234) statement -> labeled_statement .

    RCPAREN         reduce using rule 234 (statement -> labeled_statement .)
    IDENTIFIER      reduce using rule 234 (statement -> labeled_statement .)
    CASE            reduce using rule 234 (statement -> labeled_statement .)
    DEFAULT         reduce using rule 234 (statement -> labeled_statement .)
    SEMICOLON       reduce using rule 234 (statement -> labeled_statement .)
    LCPAREN         reduce using rule 234 (statement -> labeled_statement .)
    IF              reduce using rule 234 (statement -> labeled_statement .)
    SWITCH          reduce using rule 234 (statement -> labeled_statement .)
    WHILE           reduce using rule 234 (statement -> labeled_statement .)
    DO              reduce using rule 234 (statement -> labeled_statement .)
    FOR             reduce using rule 234 (statement -> labeled_statement .)
    BREAK           reduce using rule 234 (statement -> labeled_statement .)
    CONTINUE        reduce using rule 234 (statement -> labeled_statement .)
    RETURN          reduce using rule 234 (statement -> labeled_statement .)
    GOTO            reduce using rule 234 (statement -> labeled_statement .)
    TRY             reduce using rule 234 (statement -> labeled_statement .)
    THROW           reduce using rule 234 (statement -> labeled_statement .)
    CONST           reduce using rule 234 (statement -> labeled_statement .)
    ASM             reduce using rule 234 (statement -> labeled_statement .)
    TEMPLATE        reduce using rule 234 (statement -> labeled_statement .)
    TYPEDEF         reduce using rule 234 (statement -> labeled_statement .)
    DPLUSOP         reduce using rule 234 (statement -> labeled_statement .)
    DMINUSOP        reduce using rule 234 (statement -> labeled_statement .)
    SIZEOF          reduce using rule 234 (statement -> labeled_statement .)
    PLUSOP          reduce using rule 234 (statement -> labeled_statement .)
    MINUSOP         reduce using rule 234 (statement -> labeled_statement .)
    NOTSYM          reduce using rule 234 (statement -> labeled_statement .)
    BNOP            reduce using rule 234 (statement -> labeled_statement .)
    MULTOP          reduce using rule 234 (statement -> labeled_statement .)
    BANDOP          reduce using rule 234 (statement -> labeled_statement .)
    NEW             reduce using rule 234 (statement -> labeled_statement .)
    DELETE          reduce using rule 234 (statement -> labeled_statement .)
    CHAR            reduce using rule 234 (statement -> labeled_statement .)
    SHORT           reduce using rule 234 (statement -> labeled_statement .)
    INT             reduce using rule 234 (statement -> labeled_statement .)
    LONG            reduce using rule 234 (statement -> labeled_statement .)
    SIGNED          reduce using rule 234 (statement -> labeled_statement .)
    UNSIGNED        reduce using rule 234 (statement -> labeled_statement .)
    FLOAT           reduce using rule 234 (statement -> labeled_statement .)
    DOUBLE          reduce using rule 234 (statement -> labeled_statement .)
    VOID            reduce using rule 234 (statement -> labeled_statement .)
    STRING          reduce using rule 234 (statement -> labeled_statement .)
    AUTO            reduce using rule 234 (statement -> labeled_statement .)
    TYPE            reduce using rule 234 (statement -> labeled_statement .)
    CLASS           reduce using rule 234 (statement -> labeled_statement .)
    STRUCT          reduce using rule 234 (statement -> labeled_statement .)
    THIS            reduce using rule 234 (statement -> labeled_statement .)
    LPAREN          reduce using rule 234 (statement -> labeled_statement .)
    DOUBLEBNOP      reduce using rule 234 (statement -> labeled_statement .)
    STRING_L        reduce using rule 234 (statement -> labeled_statement .)
    NUMBER          reduce using rule 234 (statement -> labeled_statement .)
    SCHAR           reduce using rule 234 (statement -> labeled_statement .)
    ELSE            reduce using rule 234 (statement -> labeled_statement .)


state 281

    (235) statement -> expression_statement .

    RCPAREN         reduce using rule 235 (statement -> expression_statement .)
    IDENTIFIER      reduce using rule 235 (statement -> expression_statement .)
    CASE            reduce using rule 235 (statement -> expression_statement .)
    DEFAULT         reduce using rule 235 (statement -> expression_statement .)
    SEMICOLON       reduce using rule 235 (statement -> expression_statement .)
    LCPAREN         reduce using rule 235 (statement -> expression_statement .)
    IF              reduce using rule 235 (statement -> expression_statement .)
    SWITCH          reduce using rule 235 (statement -> expression_statement .)
    WHILE           reduce using rule 235 (statement -> expression_statement .)
    DO              reduce using rule 235 (statement -> expression_statement .)
    FOR             reduce using rule 235 (statement -> expression_statement .)
    BREAK           reduce using rule 235 (statement -> expression_statement .)
    CONTINUE        reduce using rule 235 (statement -> expression_statement .)
    RETURN          reduce using rule 235 (statement -> expression_statement .)
    GOTO            reduce using rule 235 (statement -> expression_statement .)
    TRY             reduce using rule 235 (statement -> expression_statement .)
    THROW           reduce using rule 235 (statement -> expression_statement .)
    CONST           reduce using rule 235 (statement -> expression_statement .)
    ASM             reduce using rule 235 (statement -> expression_statement .)
    TEMPLATE        reduce using rule 235 (statement -> expression_statement .)
    TYPEDEF         reduce using rule 235 (statement -> expression_statement .)
    DPLUSOP         reduce using rule 235 (statement -> expression_statement .)
    DMINUSOP        reduce using rule 235 (statement -> expression_statement .)
    SIZEOF          reduce using rule 235 (statement -> expression_statement .)
    PLUSOP          reduce using rule 235 (statement -> expression_statement .)
    MINUSOP         reduce using rule 235 (statement -> expression_statement .)
    NOTSYM          reduce using rule 235 (statement -> expression_statement .)
    BNOP            reduce using rule 235 (statement -> expression_statement .)
    MULTOP          reduce using rule 235 (statement -> expression_statement .)
    BANDOP          reduce using rule 235 (statement -> expression_statement .)
    NEW             reduce using rule 235 (statement -> expression_statement .)
    DELETE          reduce using rule 235 (statement -> expression_statement .)
    CHAR            reduce using rule 235 (statement -> expression_statement .)
    SHORT           reduce using rule 235 (statement -> expression_statement .)
    INT             reduce using rule 235 (statement -> expression_statement .)
    LONG            reduce using rule 235 (statement -> expression_statement .)
    SIGNED          reduce using rule 235 (statement -> expression_statement .)
    UNSIGNED        reduce using rule 235 (statement -> expression_statement .)
    FLOAT           reduce using rule 235 (statement -> expression_statement .)
    DOUBLE          reduce using rule 235 (statement -> expression_statement .)
    VOID            reduce using rule 235 (statement -> expression_statement .)
    STRING          reduce using rule 235 (statement -> expression_statement .)
    AUTO            reduce using rule 235 (statement -> expression_statement .)
    TYPE            reduce using rule 235 (statement -> expression_statement .)
    CLASS           reduce using rule 235 (statement -> expression_statement .)
    STRUCT          reduce using rule 235 (statement -> expression_statement .)
    THIS            reduce using rule 235 (statement -> expression_statement .)
    LPAREN          reduce using rule 235 (statement -> expression_statement .)
    DOUBLEBNOP      reduce using rule 235 (statement -> expression_statement .)
    STRING_L        reduce using rule 235 (statement -> expression_statement .)
    NUMBER          reduce using rule 235 (statement -> expression_statement .)
    SCHAR           reduce using rule 235 (statement -> expression_statement .)
    ELSE            reduce using rule 235 (statement -> expression_statement .)


state 282

    (236) statement -> compound_statement .

    RCPAREN         reduce using rule 236 (statement -> compound_statement .)
    IDENTIFIER      reduce using rule 236 (statement -> compound_statement .)
    CASE            reduce using rule 236 (statement -> compound_statement .)
    DEFAULT         reduce using rule 236 (statement -> compound_statement .)
    SEMICOLON       reduce using rule 236 (statement -> compound_statement .)
    LCPAREN         reduce using rule 236 (statement -> compound_statement .)
    IF              reduce using rule 236 (statement -> compound_statement .)
    SWITCH          reduce using rule 236 (statement -> compound_statement .)
    WHILE           reduce using rule 236 (statement -> compound_statement .)
    DO              reduce using rule 236 (statement -> compound_statement .)
    FOR             reduce using rule 236 (statement -> compound_statement .)
    BREAK           reduce using rule 236 (statement -> compound_statement .)
    CONTINUE        reduce using rule 236 (statement -> compound_statement .)
    RETURN          reduce using rule 236 (statement -> compound_statement .)
    GOTO            reduce using rule 236 (statement -> compound_statement .)
    TRY             reduce using rule 236 (statement -> compound_statement .)
    THROW           reduce using rule 236 (statement -> compound_statement .)
    CONST           reduce using rule 236 (statement -> compound_statement .)
    ASM             reduce using rule 236 (statement -> compound_statement .)
    TEMPLATE        reduce using rule 236 (statement -> compound_statement .)
    TYPEDEF         reduce using rule 236 (statement -> compound_statement .)
    DPLUSOP         reduce using rule 236 (statement -> compound_statement .)
    DMINUSOP        reduce using rule 236 (statement -> compound_statement .)
    SIZEOF          reduce using rule 236 (statement -> compound_statement .)
    PLUSOP          reduce using rule 236 (statement -> compound_statement .)
    MINUSOP         reduce using rule 236 (statement -> compound_statement .)
    NOTSYM          reduce using rule 236 (statement -> compound_statement .)
    BNOP            reduce using rule 236 (statement -> compound_statement .)
    MULTOP          reduce using rule 236 (statement -> compound_statement .)
    BANDOP          reduce using rule 236 (statement -> compound_statement .)
    NEW             reduce using rule 236 (statement -> compound_statement .)
    DELETE          reduce using rule 236 (statement -> compound_statement .)
    CHAR            reduce using rule 236 (statement -> compound_statement .)
    SHORT           reduce using rule 236 (statement -> compound_statement .)
    INT             reduce using rule 236 (statement -> compound_statement .)
    LONG            reduce using rule 236 (statement -> compound_statement .)
    SIGNED          reduce using rule 236 (statement -> compound_statement .)
    UNSIGNED        reduce using rule 236 (statement -> compound_statement .)
    FLOAT           reduce using rule 236 (statement -> compound_statement .)
    DOUBLE          reduce using rule 236 (statement -> compound_statement .)
    VOID            reduce using rule 236 (statement -> compound_statement .)
    STRING          reduce using rule 236 (statement -> compound_statement .)
    AUTO            reduce using rule 236 (statement -> compound_statement .)
    TYPE            reduce using rule 236 (statement -> compound_statement .)
    CLASS           reduce using rule 236 (statement -> compound_statement .)
    STRUCT          reduce using rule 236 (statement -> compound_statement .)
    THIS            reduce using rule 236 (statement -> compound_statement .)
    LPAREN          reduce using rule 236 (statement -> compound_statement .)
    DOUBLEBNOP      reduce using rule 236 (statement -> compound_statement .)
    STRING_L        reduce using rule 236 (statement -> compound_statement .)
    NUMBER          reduce using rule 236 (statement -> compound_statement .)
    SCHAR           reduce using rule 236 (statement -> compound_statement .)
    ELSE            reduce using rule 236 (statement -> compound_statement .)


state 283

    (237) statement -> selection_statement .

    RCPAREN         reduce using rule 237 (statement -> selection_statement .)
    IDENTIFIER      reduce using rule 237 (statement -> selection_statement .)
    CASE            reduce using rule 237 (statement -> selection_statement .)
    DEFAULT         reduce using rule 237 (statement -> selection_statement .)
    SEMICOLON       reduce using rule 237 (statement -> selection_statement .)
    LCPAREN         reduce using rule 237 (statement -> selection_statement .)
    IF              reduce using rule 237 (statement -> selection_statement .)
    SWITCH          reduce using rule 237 (statement -> selection_statement .)
    WHILE           reduce using rule 237 (statement -> selection_statement .)
    DO              reduce using rule 237 (statement -> selection_statement .)
    FOR             reduce using rule 237 (statement -> selection_statement .)
    BREAK           reduce using rule 237 (statement -> selection_statement .)
    CONTINUE        reduce using rule 237 (statement -> selection_statement .)
    RETURN          reduce using rule 237 (statement -> selection_statement .)
    GOTO            reduce using rule 237 (statement -> selection_statement .)
    TRY             reduce using rule 237 (statement -> selection_statement .)
    THROW           reduce using rule 237 (statement -> selection_statement .)
    CONST           reduce using rule 237 (statement -> selection_statement .)
    ASM             reduce using rule 237 (statement -> selection_statement .)
    TEMPLATE        reduce using rule 237 (statement -> selection_statement .)
    TYPEDEF         reduce using rule 237 (statement -> selection_statement .)
    DPLUSOP         reduce using rule 237 (statement -> selection_statement .)
    DMINUSOP        reduce using rule 237 (statement -> selection_statement .)
    SIZEOF          reduce using rule 237 (statement -> selection_statement .)
    PLUSOP          reduce using rule 237 (statement -> selection_statement .)
    MINUSOP         reduce using rule 237 (statement -> selection_statement .)
    NOTSYM          reduce using rule 237 (statement -> selection_statement .)
    BNOP            reduce using rule 237 (statement -> selection_statement .)
    MULTOP          reduce using rule 237 (statement -> selection_statement .)
    BANDOP          reduce using rule 237 (statement -> selection_statement .)
    NEW             reduce using rule 237 (statement -> selection_statement .)
    DELETE          reduce using rule 237 (statement -> selection_statement .)
    CHAR            reduce using rule 237 (statement -> selection_statement .)
    SHORT           reduce using rule 237 (statement -> selection_statement .)
    INT             reduce using rule 237 (statement -> selection_statement .)
    LONG            reduce using rule 237 (statement -> selection_statement .)
    SIGNED          reduce using rule 237 (statement -> selection_statement .)
    UNSIGNED        reduce using rule 237 (statement -> selection_statement .)
    FLOAT           reduce using rule 237 (statement -> selection_statement .)
    DOUBLE          reduce using rule 237 (statement -> selection_statement .)
    VOID            reduce using rule 237 (statement -> selection_statement .)
    STRING          reduce using rule 237 (statement -> selection_statement .)
    AUTO            reduce using rule 237 (statement -> selection_statement .)
    TYPE            reduce using rule 237 (statement -> selection_statement .)
    CLASS           reduce using rule 237 (statement -> selection_statement .)
    STRUCT          reduce using rule 237 (statement -> selection_statement .)
    THIS            reduce using rule 237 (statement -> selection_statement .)
    LPAREN          reduce using rule 237 (statement -> selection_statement .)
    DOUBLEBNOP      reduce using rule 237 (statement -> selection_statement .)
    STRING_L        reduce using rule 237 (statement -> selection_statement .)
    NUMBER          reduce using rule 237 (statement -> selection_statement .)
    SCHAR           reduce using rule 237 (statement -> selection_statement .)
    ELSE            reduce using rule 237 (statement -> selection_statement .)


state 284

    (238) statement -> iteration_statement .

    RCPAREN         reduce using rule 238 (statement -> iteration_statement .)
    IDENTIFIER      reduce using rule 238 (statement -> iteration_statement .)
    CASE            reduce using rule 238 (statement -> iteration_statement .)
    DEFAULT         reduce using rule 238 (statement -> iteration_statement .)
    SEMICOLON       reduce using rule 238 (statement -> iteration_statement .)
    LCPAREN         reduce using rule 238 (statement -> iteration_statement .)
    IF              reduce using rule 238 (statement -> iteration_statement .)
    SWITCH          reduce using rule 238 (statement -> iteration_statement .)
    WHILE           reduce using rule 238 (statement -> iteration_statement .)
    DO              reduce using rule 238 (statement -> iteration_statement .)
    FOR             reduce using rule 238 (statement -> iteration_statement .)
    BREAK           reduce using rule 238 (statement -> iteration_statement .)
    CONTINUE        reduce using rule 238 (statement -> iteration_statement .)
    RETURN          reduce using rule 238 (statement -> iteration_statement .)
    GOTO            reduce using rule 238 (statement -> iteration_statement .)
    TRY             reduce using rule 238 (statement -> iteration_statement .)
    THROW           reduce using rule 238 (statement -> iteration_statement .)
    CONST           reduce using rule 238 (statement -> iteration_statement .)
    ASM             reduce using rule 238 (statement -> iteration_statement .)
    TEMPLATE        reduce using rule 238 (statement -> iteration_statement .)
    TYPEDEF         reduce using rule 238 (statement -> iteration_statement .)
    DPLUSOP         reduce using rule 238 (statement -> iteration_statement .)
    DMINUSOP        reduce using rule 238 (statement -> iteration_statement .)
    SIZEOF          reduce using rule 238 (statement -> iteration_statement .)
    PLUSOP          reduce using rule 238 (statement -> iteration_statement .)
    MINUSOP         reduce using rule 238 (statement -> iteration_statement .)
    NOTSYM          reduce using rule 238 (statement -> iteration_statement .)
    BNOP            reduce using rule 238 (statement -> iteration_statement .)
    MULTOP          reduce using rule 238 (statement -> iteration_statement .)
    BANDOP          reduce using rule 238 (statement -> iteration_statement .)
    NEW             reduce using rule 238 (statement -> iteration_statement .)
    DELETE          reduce using rule 238 (statement -> iteration_statement .)
    CHAR            reduce using rule 238 (statement -> iteration_statement .)
    SHORT           reduce using rule 238 (statement -> iteration_statement .)
    INT             reduce using rule 238 (statement -> iteration_statement .)
    LONG            reduce using rule 238 (statement -> iteration_statement .)
    SIGNED          reduce using rule 238 (statement -> iteration_statement .)
    UNSIGNED        reduce using rule 238 (statement -> iteration_statement .)
    FLOAT           reduce using rule 238 (statement -> iteration_statement .)
    DOUBLE          reduce using rule 238 (statement -> iteration_statement .)
    VOID            reduce using rule 238 (statement -> iteration_statement .)
    STRING          reduce using rule 238 (statement -> iteration_statement .)
    AUTO            reduce using rule 238 (statement -> iteration_statement .)
    TYPE            reduce using rule 238 (statement -> iteration_statement .)
    CLASS           reduce using rule 238 (statement -> iteration_statement .)
    STRUCT          reduce using rule 238 (statement -> iteration_statement .)
    THIS            reduce using rule 238 (statement -> iteration_statement .)
    LPAREN          reduce using rule 238 (statement -> iteration_statement .)
    DOUBLEBNOP      reduce using rule 238 (statement -> iteration_statement .)
    STRING_L        reduce using rule 238 (statement -> iteration_statement .)
    NUMBER          reduce using rule 238 (statement -> iteration_statement .)
    SCHAR           reduce using rule 238 (statement -> iteration_statement .)
    ELSE            reduce using rule 238 (statement -> iteration_statement .)


state 285

    (239) statement -> jump_statement .

    RCPAREN         reduce using rule 239 (statement -> jump_statement .)
    IDENTIFIER      reduce using rule 239 (statement -> jump_statement .)
    CASE            reduce using rule 239 (statement -> jump_statement .)
    DEFAULT         reduce using rule 239 (statement -> jump_statement .)
    SEMICOLON       reduce using rule 239 (statement -> jump_statement .)
    LCPAREN         reduce using rule 239 (statement -> jump_statement .)
    IF              reduce using rule 239 (statement -> jump_statement .)
    SWITCH          reduce using rule 239 (statement -> jump_statement .)
    WHILE           reduce using rule 239 (statement -> jump_statement .)
    DO              reduce using rule 239 (statement -> jump_statement .)
    FOR             reduce using rule 239 (statement -> jump_statement .)
    BREAK           reduce using rule 239 (statement -> jump_statement .)
    CONTINUE        reduce using rule 239 (statement -> jump_statement .)
    RETURN          reduce using rule 239 (statement -> jump_statement .)
    GOTO            reduce using rule 239 (statement -> jump_statement .)
    TRY             reduce using rule 239 (statement -> jump_statement .)
    THROW           reduce using rule 239 (statement -> jump_statement .)
    CONST           reduce using rule 239 (statement -> jump_statement .)
    ASM             reduce using rule 239 (statement -> jump_statement .)
    TEMPLATE        reduce using rule 239 (statement -> jump_statement .)
    TYPEDEF         reduce using rule 239 (statement -> jump_statement .)
    DPLUSOP         reduce using rule 239 (statement -> jump_statement .)
    DMINUSOP        reduce using rule 239 (statement -> jump_statement .)
    SIZEOF          reduce using rule 239 (statement -> jump_statement .)
    PLUSOP          reduce using rule 239 (statement -> jump_statement .)
    MINUSOP         reduce using rule 239 (statement -> jump_statement .)
    NOTSYM          reduce using rule 239 (statement -> jump_statement .)
    BNOP            reduce using rule 239 (statement -> jump_statement .)
    MULTOP          reduce using rule 239 (statement -> jump_statement .)
    BANDOP          reduce using rule 239 (statement -> jump_statement .)
    NEW             reduce using rule 239 (statement -> jump_statement .)
    DELETE          reduce using rule 239 (statement -> jump_statement .)
    CHAR            reduce using rule 239 (statement -> jump_statement .)
    SHORT           reduce using rule 239 (statement -> jump_statement .)
    INT             reduce using rule 239 (statement -> jump_statement .)
    LONG            reduce using rule 239 (statement -> jump_statement .)
    SIGNED          reduce using rule 239 (statement -> jump_statement .)
    UNSIGNED        reduce using rule 239 (statement -> jump_statement .)
    FLOAT           reduce using rule 239 (statement -> jump_statement .)
    DOUBLE          reduce using rule 239 (statement -> jump_statement .)
    VOID            reduce using rule 239 (statement -> jump_statement .)
    STRING          reduce using rule 239 (statement -> jump_statement .)
    AUTO            reduce using rule 239 (statement -> jump_statement .)
    TYPE            reduce using rule 239 (statement -> jump_statement .)
    CLASS           reduce using rule 239 (statement -> jump_statement .)
    STRUCT          reduce using rule 239 (statement -> jump_statement .)
    THIS            reduce using rule 239 (statement -> jump_statement .)
    LPAREN          reduce using rule 239 (statement -> jump_statement .)
    DOUBLEBNOP      reduce using rule 239 (statement -> jump_statement .)
    STRING_L        reduce using rule 239 (statement -> jump_statement .)
    NUMBER          reduce using rule 239 (statement -> jump_statement .)
    SCHAR           reduce using rule 239 (statement -> jump_statement .)
    ELSE            reduce using rule 239 (statement -> jump_statement .)


state 286

    (240) statement -> declaration_statement .

    RCPAREN         reduce using rule 240 (statement -> declaration_statement .)
    IDENTIFIER      reduce using rule 240 (statement -> declaration_statement .)
    CASE            reduce using rule 240 (statement -> declaration_statement .)
    DEFAULT         reduce using rule 240 (statement -> declaration_statement .)
    SEMICOLON       reduce using rule 240 (statement -> declaration_statement .)
    LCPAREN         reduce using rule 240 (statement -> declaration_statement .)
    IF              reduce using rule 240 (statement -> declaration_statement .)
    SWITCH          reduce using rule 240 (statement -> declaration_statement .)
    WHILE           reduce using rule 240 (statement -> declaration_statement .)
    DO              reduce using rule 240 (statement -> declaration_statement .)
    FOR             reduce using rule 240 (statement -> declaration_statement .)
    BREAK           reduce using rule 240 (statement -> declaration_statement .)
    CONTINUE        reduce using rule 240 (statement -> declaration_statement .)
    RETURN          reduce using rule 240 (statement -> declaration_statement .)
    GOTO            reduce using rule 240 (statement -> declaration_statement .)
    TRY             reduce using rule 240 (statement -> declaration_statement .)
    THROW           reduce using rule 240 (statement -> declaration_statement .)
    CONST           reduce using rule 240 (statement -> declaration_statement .)
    ASM             reduce using rule 240 (statement -> declaration_statement .)
    TEMPLATE        reduce using rule 240 (statement -> declaration_statement .)
    TYPEDEF         reduce using rule 240 (statement -> declaration_statement .)
    DPLUSOP         reduce using rule 240 (statement -> declaration_statement .)
    DMINUSOP        reduce using rule 240 (statement -> declaration_statement .)
    SIZEOF          reduce using rule 240 (statement -> declaration_statement .)
    PLUSOP          reduce using rule 240 (statement -> declaration_statement .)
    MINUSOP         reduce using rule 240 (statement -> declaration_statement .)
    NOTSYM          reduce using rule 240 (statement -> declaration_statement .)
    BNOP            reduce using rule 240 (statement -> declaration_statement .)
    MULTOP          reduce using rule 240 (statement -> declaration_statement .)
    BANDOP          reduce using rule 240 (statement -> declaration_statement .)
    NEW             reduce using rule 240 (statement -> declaration_statement .)
    DELETE          reduce using rule 240 (statement -> declaration_statement .)
    CHAR            reduce using rule 240 (statement -> declaration_statement .)
    SHORT           reduce using rule 240 (statement -> declaration_statement .)
    INT             reduce using rule 240 (statement -> declaration_statement .)
    LONG            reduce using rule 240 (statement -> declaration_statement .)
    SIGNED          reduce using rule 240 (statement -> declaration_statement .)
    UNSIGNED        reduce using rule 240 (statement -> declaration_statement .)
    FLOAT           reduce using rule 240 (statement -> declaration_statement .)
    DOUBLE          reduce using rule 240 (statement -> declaration_statement .)
    VOID            reduce using rule 240 (statement -> declaration_statement .)
    STRING          reduce using rule 240 (statement -> declaration_statement .)
    AUTO            reduce using rule 240 (statement -> declaration_statement .)
    TYPE            reduce using rule 240 (statement -> declaration_statement .)
    CLASS           reduce using rule 240 (statement -> declaration_statement .)
    STRUCT          reduce using rule 240 (statement -> declaration_statement .)
    THIS            reduce using rule 240 (statement -> declaration_statement .)
    LPAREN          reduce using rule 240 (statement -> declaration_statement .)
    DOUBLEBNOP      reduce using rule 240 (statement -> declaration_statement .)
    STRING_L        reduce using rule 240 (statement -> declaration_statement .)
    NUMBER          reduce using rule 240 (statement -> declaration_statement .)
    SCHAR           reduce using rule 240 (statement -> declaration_statement .)
    ELSE            reduce using rule 240 (statement -> declaration_statement .)


state 287

    (241) statement -> try_block .

    RCPAREN         reduce using rule 241 (statement -> try_block .)
    IDENTIFIER      reduce using rule 241 (statement -> try_block .)
    CASE            reduce using rule 241 (statement -> try_block .)
    DEFAULT         reduce using rule 241 (statement -> try_block .)
    SEMICOLON       reduce using rule 241 (statement -> try_block .)
    LCPAREN         reduce using rule 241 (statement -> try_block .)
    IF              reduce using rule 241 (statement -> try_block .)
    SWITCH          reduce using rule 241 (statement -> try_block .)
    WHILE           reduce using rule 241 (statement -> try_block .)
    DO              reduce using rule 241 (statement -> try_block .)
    FOR             reduce using rule 241 (statement -> try_block .)
    BREAK           reduce using rule 241 (statement -> try_block .)
    CONTINUE        reduce using rule 241 (statement -> try_block .)
    RETURN          reduce using rule 241 (statement -> try_block .)
    GOTO            reduce using rule 241 (statement -> try_block .)
    TRY             reduce using rule 241 (statement -> try_block .)
    THROW           reduce using rule 241 (statement -> try_block .)
    CONST           reduce using rule 241 (statement -> try_block .)
    ASM             reduce using rule 241 (statement -> try_block .)
    TEMPLATE        reduce using rule 241 (statement -> try_block .)
    TYPEDEF         reduce using rule 241 (statement -> try_block .)
    DPLUSOP         reduce using rule 241 (statement -> try_block .)
    DMINUSOP        reduce using rule 241 (statement -> try_block .)
    SIZEOF          reduce using rule 241 (statement -> try_block .)
    PLUSOP          reduce using rule 241 (statement -> try_block .)
    MINUSOP         reduce using rule 241 (statement -> try_block .)
    NOTSYM          reduce using rule 241 (statement -> try_block .)
    BNOP            reduce using rule 241 (statement -> try_block .)
    MULTOP          reduce using rule 241 (statement -> try_block .)
    BANDOP          reduce using rule 241 (statement -> try_block .)
    NEW             reduce using rule 241 (statement -> try_block .)
    DELETE          reduce using rule 241 (statement -> try_block .)
    CHAR            reduce using rule 241 (statement -> try_block .)
    SHORT           reduce using rule 241 (statement -> try_block .)
    INT             reduce using rule 241 (statement -> try_block .)
    LONG            reduce using rule 241 (statement -> try_block .)
    SIGNED          reduce using rule 241 (statement -> try_block .)
    UNSIGNED        reduce using rule 241 (statement -> try_block .)
    FLOAT           reduce using rule 241 (statement -> try_block .)
    DOUBLE          reduce using rule 241 (statement -> try_block .)
    VOID            reduce using rule 241 (statement -> try_block .)
    STRING          reduce using rule 241 (statement -> try_block .)
    AUTO            reduce using rule 241 (statement -> try_block .)
    TYPE            reduce using rule 241 (statement -> try_block .)
    CLASS           reduce using rule 241 (statement -> try_block .)
    STRUCT          reduce using rule 241 (statement -> try_block .)
    THIS            reduce using rule 241 (statement -> try_block .)
    LPAREN          reduce using rule 241 (statement -> try_block .)
    DOUBLEBNOP      reduce using rule 241 (statement -> try_block .)
    STRING_L        reduce using rule 241 (statement -> try_block .)
    NUMBER          reduce using rule 241 (statement -> try_block .)
    SCHAR           reduce using rule 241 (statement -> try_block .)
    ELSE            reduce using rule 241 (statement -> try_block .)


state 288

    (251) labeled_statement -> IDENTIFIER . COLON statement
    (125) name -> IDENTIFIER .

    COLON           shift and go to state 356
    LSPAREN         reduce using rule 125 (name -> IDENTIFIER .)
    LPAREN          reduce using rule 125 (name -> IDENTIFIER .)
    DOT             reduce using rule 125 (name -> IDENTIFIER .)
    ARROW           reduce using rule 125 (name -> IDENTIFIER .)
    DPLUSOP         reduce using rule 125 (name -> IDENTIFIER .)
    DMINUSOP        reduce using rule 125 (name -> IDENTIFIER .)
    LTEMPLATE       reduce using rule 125 (name -> IDENTIFIER .)
    EQUAL           reduce using rule 125 (name -> IDENTIFIER .)
    MULTEQOP        reduce using rule 125 (name -> IDENTIFIER .)
    DIVEQOP         reduce using rule 125 (name -> IDENTIFIER .)
    MODEQOP         reduce using rule 125 (name -> IDENTIFIER .)
    PLUSEQOP        reduce using rule 125 (name -> IDENTIFIER .)
    MINUSEQOP       reduce using rule 125 (name -> IDENTIFIER .)
    LSHIFTEQOP      reduce using rule 125 (name -> IDENTIFIER .)
    RSHIFTEQOP      reduce using rule 125 (name -> IDENTIFIER .)
    BANDEQOP        reduce using rule 125 (name -> IDENTIFIER .)
    BOREQOP         reduce using rule 125 (name -> IDENTIFIER .)
    DOTSTAR         reduce using rule 125 (name -> IDENTIFIER .)
    ARROWSTAR       reduce using rule 125 (name -> IDENTIFIER .)
    MULTOP          reduce using rule 125 (name -> IDENTIFIER .)
    DIVOP           reduce using rule 125 (name -> IDENTIFIER .)
    MODOP           reduce using rule 125 (name -> IDENTIFIER .)
    PLUSOP          reduce using rule 125 (name -> IDENTIFIER .)
    MINUSOP         reduce using rule 125 (name -> IDENTIFIER .)
    LSHIFT          reduce using rule 125 (name -> IDENTIFIER .)
    RSHIFT          reduce using rule 125 (name -> IDENTIFIER .)
    LTCOMP          reduce using rule 125 (name -> IDENTIFIER .)
    GTCOMP          reduce using rule 125 (name -> IDENTIFIER .)
    LTECOMP         reduce using rule 125 (name -> IDENTIFIER .)
    GTECOMP         reduce using rule 125 (name -> IDENTIFIER .)
    EQCOMP          reduce using rule 125 (name -> IDENTIFIER .)
    NEQCOMP         reduce using rule 125 (name -> IDENTIFIER .)
    BANDOP          reduce using rule 125 (name -> IDENTIFIER .)
    XOROP           reduce using rule 125 (name -> IDENTIFIER .)
    OROP            reduce using rule 125 (name -> IDENTIFIER .)
    ANDOP           reduce using rule 125 (name -> IDENTIFIER .)
    QUESMARK        reduce using rule 125 (name -> IDENTIFIER .)
    SEMICOLON       reduce using rule 125 (name -> IDENTIFIER .)
    COMMA           reduce using rule 125 (name -> IDENTIFIER .)


state 289

    (252) labeled_statement -> CASE . constant_expression COLON statement
    (12) constant_expression -> . conditional_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR

    LPAREN          shift and go to state 150
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    THIS            shift and go to state 134
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    constant_expression            shift and go to state 357
    conditional_expression         shift and go to state 148
    logical_OR_expression          shift and go to state 113
    logical_AND_expression         shift and go to state 123
    inclusive_OR_expression        shift and go to state 132
    exclusive_OR_expression        shift and go to state 135
    AND_expression                 shift and go to state 139
    equality_expression            shift and go to state 140
    relational_expression          shift and go to state 141
    shift_expression               shift and go to state 142
    additive_expression            shift and go to state 143
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145
    cast_expression                shift and go to state 118
    unary_expression               shift and go to state 149
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    literal                        shift and go to state 133

state 290

    (253) labeled_statement -> DEFAULT . COLON statement

    COLON           shift and go to state 358


state 291

    (262) expression_statement -> expression . SEMICOLON
    (48) expression -> expression . COMMA assignment_expression

    SEMICOLON       shift and go to state 359
    COMMA           shift and go to state 273


state 292

    (263) expression_statement -> SEMICOLON .

    RCPAREN         reduce using rule 263 (expression_statement -> SEMICOLON .)
    IDENTIFIER      reduce using rule 263 (expression_statement -> SEMICOLON .)
    CASE            reduce using rule 263 (expression_statement -> SEMICOLON .)
    DEFAULT         reduce using rule 263 (expression_statement -> SEMICOLON .)
    SEMICOLON       reduce using rule 263 (expression_statement -> SEMICOLON .)
    LCPAREN         reduce using rule 263 (expression_statement -> SEMICOLON .)
    IF              reduce using rule 263 (expression_statement -> SEMICOLON .)
    SWITCH          reduce using rule 263 (expression_statement -> SEMICOLON .)
    WHILE           reduce using rule 263 (expression_statement -> SEMICOLON .)
    DO              reduce using rule 263 (expression_statement -> SEMICOLON .)
    FOR             reduce using rule 263 (expression_statement -> SEMICOLON .)
    BREAK           reduce using rule 263 (expression_statement -> SEMICOLON .)
    CONTINUE        reduce using rule 263 (expression_statement -> SEMICOLON .)
    RETURN          reduce using rule 263 (expression_statement -> SEMICOLON .)
    GOTO            reduce using rule 263 (expression_statement -> SEMICOLON .)
    TRY             reduce using rule 263 (expression_statement -> SEMICOLON .)
    THROW           reduce using rule 263 (expression_statement -> SEMICOLON .)
    CONST           reduce using rule 263 (expression_statement -> SEMICOLON .)
    ASM             reduce using rule 263 (expression_statement -> SEMICOLON .)
    TEMPLATE        reduce using rule 263 (expression_statement -> SEMICOLON .)
    TYPEDEF         reduce using rule 263 (expression_statement -> SEMICOLON .)
    DPLUSOP         reduce using rule 263 (expression_statement -> SEMICOLON .)
    DMINUSOP        reduce using rule 263 (expression_statement -> SEMICOLON .)
    SIZEOF          reduce using rule 263 (expression_statement -> SEMICOLON .)
    PLUSOP          reduce using rule 263 (expression_statement -> SEMICOLON .)
    MINUSOP         reduce using rule 263 (expression_statement -> SEMICOLON .)
    NOTSYM          reduce using rule 263 (expression_statement -> SEMICOLON .)
    BNOP            reduce using rule 263 (expression_statement -> SEMICOLON .)
    MULTOP          reduce using rule 263 (expression_statement -> SEMICOLON .)
    BANDOP          reduce using rule 263 (expression_statement -> SEMICOLON .)
    NEW             reduce using rule 263 (expression_statement -> SEMICOLON .)
    DELETE          reduce using rule 263 (expression_statement -> SEMICOLON .)
    CHAR            reduce using rule 263 (expression_statement -> SEMICOLON .)
    SHORT           reduce using rule 263 (expression_statement -> SEMICOLON .)
    INT             reduce using rule 263 (expression_statement -> SEMICOLON .)
    LONG            reduce using rule 263 (expression_statement -> SEMICOLON .)
    SIGNED          reduce using rule 263 (expression_statement -> SEMICOLON .)
    UNSIGNED        reduce using rule 263 (expression_statement -> SEMICOLON .)
    FLOAT           reduce using rule 263 (expression_statement -> SEMICOLON .)
    DOUBLE          reduce using rule 263 (expression_statement -> SEMICOLON .)
    VOID            reduce using rule 263 (expression_statement -> SEMICOLON .)
    STRING          reduce using rule 263 (expression_statement -> SEMICOLON .)
    AUTO            reduce using rule 263 (expression_statement -> SEMICOLON .)
    TYPE            reduce using rule 263 (expression_statement -> SEMICOLON .)
    CLASS           reduce using rule 263 (expression_statement -> SEMICOLON .)
    STRUCT          reduce using rule 263 (expression_statement -> SEMICOLON .)
    THIS            reduce using rule 263 (expression_statement -> SEMICOLON .)
    LPAREN          reduce using rule 263 (expression_statement -> SEMICOLON .)
    DOUBLEBNOP      reduce using rule 263 (expression_statement -> SEMICOLON .)
    STRING_L        reduce using rule 263 (expression_statement -> SEMICOLON .)
    NUMBER          reduce using rule 263 (expression_statement -> SEMICOLON .)
    SCHAR           reduce using rule 263 (expression_statement -> SEMICOLON .)
    ELSE            reduce using rule 263 (expression_statement -> SEMICOLON .)


state 293

    (247) selection_statement -> IF . LPAREN expression RPAREN statement
    (248) selection_statement -> IF . LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 360


state 294

    (249) selection_statement -> SWITCH . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 361


state 295

    (254) iteration_statement -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 362


state 296

    (255) iteration_statement -> DO . statement WHILE LPAREN expression RPAREN SEMICOLON
    (234) statement -> . labeled_statement
    (235) statement -> . expression_statement
    (236) statement -> . compound_statement
    (237) statement -> . selection_statement
    (238) statement -> . iteration_statement
    (239) statement -> . jump_statement
    (240) statement -> . declaration_statement
    (241) statement -> . try_block
    (251) labeled_statement -> . IDENTIFIER COLON statement
    (252) labeled_statement -> . CASE constant_expression COLON statement
    (253) labeled_statement -> . DEFAULT COLON statement
    (262) expression_statement -> . expression SEMICOLON
    (263) expression_statement -> . SEMICOLON
    (230) compound_statement -> . LCPAREN statement_list RCPAREN
    (231) compound_statement -> . LCPAREN RCPAREN
    (247) selection_statement -> . IF LPAREN expression RPAREN statement
    (248) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (249) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (254) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (255) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (256) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (257) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (258) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (259) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (242) jump_statement -> . BREAK SEMICOLON
    (243) jump_statement -> . CONTINUE SEMICOLON
    (244) jump_statement -> . RETURN expression SEMICOLON
    (245) jump_statement -> . RETURN SEMICOLON
    (246) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (264) declaration_statement -> . declaration
    (250) try_block -> . TRY compound_statement CATCH compound_statement
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (265) declaration -> . type_specifier_ declarator_list SEMICOLON
    (266) declaration -> . asm_declaration
    (267) declaration -> . function_definition
    (268) declaration -> . function_decl
    (269) declaration -> . class_define_specifier SEMICOLON
    (270) declaration -> . template_declaration
    (271) declaration -> . typedef_declarator
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (168) type_specifier_ -> . CONST type_specifier
    (169) type_specifier_ -> . type_specifier
    (287) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (225) function_definition -> . type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body
    (226) function_definition -> . type_specifier_ declarator LPAREN RPAREN fct_body
    (227) function_decl -> . type_specifier_ declarator LPAREN argument_declaration_list RPAREN
    (228) function_decl -> . type_specifier_ declarator LPAREN RPAREN
    (203) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (204) class_define_specifier -> . class_head LCPAREN RCPAREN
    (272) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (170) typedef_declarator -> . TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON
    (171) typedef_declarator -> . TYPEDEF type_specifier_ IDENTIFIER SEMICOLON
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (172) type_specifier -> . simple_type_name
    (173) type_specifier -> . complex_type_specifier
    (190) class_head -> . class_key IDENTIFIER base_spec
    (191) class_head -> . class_key IDENTIFIER
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (174) simple_type_name -> . CHAR
    (175) simple_type_name -> . SHORT
    (176) simple_type_name -> . INT
    (177) simple_type_name -> . LONG
    (178) simple_type_name -> . SIGNED
    (179) simple_type_name -> . UNSIGNED
    (180) simple_type_name -> . FLOAT
    (181) simple_type_name -> . DOUBLE
    (182) simple_type_name -> . VOID
    (183) simple_type_name -> . STRING
    (184) simple_type_name -> . AUTO
    (185) complex_type_specifier -> . class_key IDENTIFIER
    (186) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (187) complex_type_specifier -> . TYPE IDENTIFIER
    (188) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (201) class_key -> . CLASS
    (202) class_key -> . STRUCT
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 288
    CASE            shift and go to state 289
    DEFAULT         shift and go to state 290
    SEMICOLON       shift and go to state 292
    LCPAREN         shift and go to state 194
    IF              shift and go to state 293
    SWITCH          shift and go to state 294
    WHILE           shift and go to state 295
    DO              shift and go to state 296
    FOR             shift and go to state 297
    BREAK           shift and go to state 298
    CONTINUE        shift and go to state 299
    RETURN          shift and go to state 300
    GOTO            shift and go to state 301
    TRY             shift and go to state 303
    THROW           shift and go to state 190
    CONST           shift and go to state 16
    ASM             shift and go to state 18
    TEMPLATE        shift and go to state 20
    TYPEDEF         shift and go to state 21
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38
    THIS            shift and go to state 134
    LPAREN          shift and go to state 105
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    statement                      shift and go to state 363
    expression                     shift and go to state 291
    labeled_statement              shift and go to state 280
    expression_statement           shift and go to state 281
    compound_statement             shift and go to state 282
    selection_statement            shift and go to state 283
    iteration_statement            shift and go to state 284
    jump_statement                 shift and go to state 285
    declaration_statement          shift and go to state 286
    try_block                      shift and go to state 287
    declaration                    shift and go to state 302
    assignment_expression          shift and go to state 188
    throw_expression               shift and go to state 189
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    function_decl                  shift and go to state 12
    class_define_specifier         shift and go to state 13
    template_declaration           shift and go to state 14
    typedef_declarator             shift and go to state 15
    conditional_expression         shift and go to state 111
    unary_expression               shift and go to state 112
    type_specifier                 shift and go to state 17
    class_head                     shift and go to state 19
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    cast_expression                shift and go to state 118
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 24
    logical_AND_expression         shift and go to state 123
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    inclusive_OR_expression        shift and go to state 132
    literal                        shift and go to state 133
    exclusive_OR_expression        shift and go to state 135
    AND_expression                 shift and go to state 139
    equality_expression            shift and go to state 140
    relational_expression          shift and go to state 141
    shift_expression               shift and go to state 142
    additive_expression            shift and go to state 143
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145

state 297

    (256) iteration_statement -> FOR . LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (257) iteration_statement -> FOR . LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (258) iteration_statement -> FOR . LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (259) iteration_statement -> FOR . LPAREN for_init_statement SEMICOLON RPAREN statement

    LPAREN          shift and go to state 364


state 298

    (242) jump_statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 365


state 299

    (243) jump_statement -> CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 366


state 300

    (244) jump_statement -> RETURN . expression SEMICOLON
    (245) jump_statement -> RETURN . SEMICOLON
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMICOLON       shift and go to state 368
    THROW           shift and go to state 190
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    THIS            shift and go to state 134
    LPAREN          shift and go to state 105
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    expression                     shift and go to state 367
    assignment_expression          shift and go to state 188
    throw_expression               shift and go to state 189
    conditional_expression         shift and go to state 111
    unary_expression               shift and go to state 112
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    cast_expression                shift and go to state 118
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    logical_AND_expression         shift and go to state 123
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    inclusive_OR_expression        shift and go to state 132
    literal                        shift and go to state 133
    exclusive_OR_expression        shift and go to state 135
    AND_expression                 shift and go to state 139
    equality_expression            shift and go to state 140
    relational_expression          shift and go to state 141
    shift_expression               shift and go to state 142
    additive_expression            shift and go to state 143
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145

state 301

    (246) jump_statement -> GOTO . IDENTIFIER SEMICOLON

    IDENTIFIER      shift and go to state 369


state 302

    (264) declaration_statement -> declaration .

    RCPAREN         reduce using rule 264 (declaration_statement -> declaration .)
    IDENTIFIER      reduce using rule 264 (declaration_statement -> declaration .)
    CASE            reduce using rule 264 (declaration_statement -> declaration .)
    DEFAULT         reduce using rule 264 (declaration_statement -> declaration .)
    SEMICOLON       reduce using rule 264 (declaration_statement -> declaration .)
    LCPAREN         reduce using rule 264 (declaration_statement -> declaration .)
    IF              reduce using rule 264 (declaration_statement -> declaration .)
    SWITCH          reduce using rule 264 (declaration_statement -> declaration .)
    WHILE           reduce using rule 264 (declaration_statement -> declaration .)
    DO              reduce using rule 264 (declaration_statement -> declaration .)
    FOR             reduce using rule 264 (declaration_statement -> declaration .)
    BREAK           reduce using rule 264 (declaration_statement -> declaration .)
    CONTINUE        reduce using rule 264 (declaration_statement -> declaration .)
    RETURN          reduce using rule 264 (declaration_statement -> declaration .)
    GOTO            reduce using rule 264 (declaration_statement -> declaration .)
    TRY             reduce using rule 264 (declaration_statement -> declaration .)
    THROW           reduce using rule 264 (declaration_statement -> declaration .)
    CONST           reduce using rule 264 (declaration_statement -> declaration .)
    ASM             reduce using rule 264 (declaration_statement -> declaration .)
    TEMPLATE        reduce using rule 264 (declaration_statement -> declaration .)
    TYPEDEF         reduce using rule 264 (declaration_statement -> declaration .)
    DPLUSOP         reduce using rule 264 (declaration_statement -> declaration .)
    DMINUSOP        reduce using rule 264 (declaration_statement -> declaration .)
    SIZEOF          reduce using rule 264 (declaration_statement -> declaration .)
    PLUSOP          reduce using rule 264 (declaration_statement -> declaration .)
    MINUSOP         reduce using rule 264 (declaration_statement -> declaration .)
    NOTSYM          reduce using rule 264 (declaration_statement -> declaration .)
    BNOP            reduce using rule 264 (declaration_statement -> declaration .)
    MULTOP          reduce using rule 264 (declaration_statement -> declaration .)
    BANDOP          reduce using rule 264 (declaration_statement -> declaration .)
    NEW             reduce using rule 264 (declaration_statement -> declaration .)
    DELETE          reduce using rule 264 (declaration_statement -> declaration .)
    CHAR            reduce using rule 264 (declaration_statement -> declaration .)
    SHORT           reduce using rule 264 (declaration_statement -> declaration .)
    INT             reduce using rule 264 (declaration_statement -> declaration .)
    LONG            reduce using rule 264 (declaration_statement -> declaration .)
    SIGNED          reduce using rule 264 (declaration_statement -> declaration .)
    UNSIGNED        reduce using rule 264 (declaration_statement -> declaration .)
    FLOAT           reduce using rule 264 (declaration_statement -> declaration .)
    DOUBLE          reduce using rule 264 (declaration_statement -> declaration .)
    VOID            reduce using rule 264 (declaration_statement -> declaration .)
    STRING          reduce using rule 264 (declaration_statement -> declaration .)
    AUTO            reduce using rule 264 (declaration_statement -> declaration .)
    TYPE            reduce using rule 264 (declaration_statement -> declaration .)
    CLASS           reduce using rule 264 (declaration_statement -> declaration .)
    STRUCT          reduce using rule 264 (declaration_statement -> declaration .)
    THIS            reduce using rule 264 (declaration_statement -> declaration .)
    LPAREN          reduce using rule 264 (declaration_statement -> declaration .)
    DOUBLEBNOP      reduce using rule 264 (declaration_statement -> declaration .)
    STRING_L        reduce using rule 264 (declaration_statement -> declaration .)
    NUMBER          reduce using rule 264 (declaration_statement -> declaration .)
    SCHAR           reduce using rule 264 (declaration_statement -> declaration .)
    ELSE            reduce using rule 264 (declaration_statement -> declaration .)


state 303

    (250) try_block -> TRY . compound_statement CATCH compound_statement
    (230) compound_statement -> . LCPAREN statement_list RCPAREN
    (231) compound_statement -> . LCPAREN RCPAREN

    LCPAREN         shift and go to state 194

    compound_statement             shift and go to state 370

state 304

    (289) expression_list -> expression_list COMMA assignment_expression .

    RPAREN          reduce using rule 289 (expression_list -> expression_list COMMA assignment_expression .)
    COMMA           reduce using rule 289 (expression_list -> expression_list COMMA assignment_expression .)


state 305

    (120) argument_declaration_list -> argument_declaration COMMA argument_declaration_list .

    RPAREN          reduce using rule 120 (argument_declaration_list -> argument_declaration COMMA argument_declaration_list .)


state 306

    (52) assignment_expression -> unary_expression assignment_operator assignment_expression .

    RPAREN          reduce using rule 52 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COMMA           reduce using rule 52 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    SEMICOLON       reduce using rule 52 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RCPAREN         reduce using rule 52 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COLON           reduce using rule 52 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RSPAREN         reduce using rule 52 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RTEMPLATE       reduce using rule 52 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 307

    (14) conditional_expression -> logical_OR_expression QUESMARK expression . COLON conditional_expression
    (48) expression -> expression . COMMA assignment_expression

    COLON           shift and go to state 371
    COMMA           shift and go to state 273


state 308

    (16) logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .
    (18) logical_AND_expression -> logical_AND_expression . ANDOP inclusive_OR_expression

    QUESMARK        reduce using rule 16 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    OROP            reduce using rule 16 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    RPAREN          reduce using rule 16 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    COMMA           reduce using rule 16 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    RSPAREN         reduce using rule 16 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    SEMICOLON       reduce using rule 16 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    RCPAREN         reduce using rule 16 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    COLON           reduce using rule 16 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    RTEMPLATE       reduce using rule 16 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    ANDOP           shift and go to state 225


state 309

    (92) postfix_expression -> postfix_expression LSPAREN expression . RSPAREN
    (48) expression -> expression . COMMA assignment_expression

    RSPAREN         shift and go to state 372
    COMMA           shift and go to state 273


state 310

    (93) postfix_expression -> postfix_expression LPAREN expression_list . RPAREN
    (289) expression_list -> expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 373
    COMMA           shift and go to state 196


state 311

    (95) postfix_expression -> postfix_expression LPAREN RPAREN .

    LSPAREN         reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LPAREN          reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DOT             reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ARROW           reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DPLUSOP         reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DMINUSOP        reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LTEMPLATE       reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQUAL           reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MULTEQOP        reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIVEQOP         reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MODEQOP         reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUSEQOP        reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUSEQOP       reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LSHIFTEQOP      reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RSHIFTEQOP      reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    BANDEQOP        reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    BOREQOP         reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DOTSTAR         reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ARROWSTAR       reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MULTOP          reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIVOP           reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MODOP           reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUSOP          reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUSOP         reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LSHIFT          reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RSHIFT          reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LTCOMP          reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GTCOMP          reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LTECOMP         reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GTECOMP         reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQCOMP          reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    NEQCOMP         reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    BANDOP          reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    XOROP           reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    OROP            reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ANDOP           reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    QUESMARK        reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RPAREN          reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COMMA           reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RSPAREN         reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    SEMICOLON       reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RCPAREN         reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COLON           reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RTEMPLATE       reduce using rule 95 (postfix_expression -> postfix_expression LPAREN RPAREN .)


state 312

    (94) postfix_expression -> postfix_expression template_class_name LPAREN . expression_list RPAREN
    (288) expression_list -> . assignment_expression
    (289) expression_list -> . expression_list COMMA assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    THIS            shift and go to state 134
    LPAREN          shift and go to state 105
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    postfix_expression             shift and go to state 114
    expression_list                shift and go to state 374
    assignment_expression          shift and go to state 110
    conditional_expression         shift and go to state 111
    unary_expression               shift and go to state 112
    logical_OR_expression          shift and go to state 113
    unary1_operator                shift and go to state 117
    cast_expression                shift and go to state 118
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    logical_AND_expression         shift and go to state 123
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    inclusive_OR_expression        shift and go to state 132
    literal                        shift and go to state 133
    exclusive_OR_expression        shift and go to state 135
    AND_expression                 shift and go to state 139
    equality_expression            shift and go to state 140
    relational_expression          shift and go to state 141
    shift_expression               shift and go to state 142
    additive_expression            shift and go to state 143
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145

state 313

    (96) postfix_expression -> postfix_expression DOT name .

    LSPAREN         reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    LPAREN          reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    DOT             reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    ARROW           reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    DPLUSOP         reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    DMINUSOP        reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    LTEMPLATE       reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    EQUAL           reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    MULTEQOP        reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    DIVEQOP         reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    MODEQOP         reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    PLUSEQOP        reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    MINUSEQOP       reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    LSHIFTEQOP      reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    RSHIFTEQOP      reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    BANDEQOP        reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    BOREQOP         reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    DOTSTAR         reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    ARROWSTAR       reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    MULTOP          reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    DIVOP           reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    MODOP           reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    PLUSOP          reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    MINUSOP         reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    LSHIFT          reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    RSHIFT          reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    LTCOMP          reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    GTCOMP          reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    LTECOMP         reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    GTECOMP         reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    EQCOMP          reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    NEQCOMP         reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    BANDOP          reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    XOROP           reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    OROP            reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    ANDOP           reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    QUESMARK        reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    RPAREN          reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    COMMA           reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    RSPAREN         reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    SEMICOLON       reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    RCPAREN         reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    COLON           reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)
    RTEMPLATE       reduce using rule 96 (postfix_expression -> postfix_expression DOT name .)


state 314

    (97) postfix_expression -> postfix_expression ARROW name .

    LSPAREN         reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    LPAREN          reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    DOT             reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    ARROW           reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    DPLUSOP         reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    DMINUSOP        reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    LTEMPLATE       reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    EQUAL           reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    MULTEQOP        reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    DIVEQOP         reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    MODEQOP         reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    PLUSEQOP        reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    MINUSEQOP       reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    LSHIFTEQOP      reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    RSHIFTEQOP      reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    BANDEQOP        reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    BOREQOP         reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    DOTSTAR         reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    ARROWSTAR       reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    MULTOP          reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    DIVOP           reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    MODOP           reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    PLUSOP          reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    MINUSOP         reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    LSHIFT          reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    RSHIFT          reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    LTCOMP          reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    GTCOMP          reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    LTECOMP         reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    GTECOMP         reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    EQCOMP          reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    NEQCOMP         reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    BANDOP          reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    XOROP           reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    OROP            reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    ANDOP           reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    QUESMARK        reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    RPAREN          reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    COMMA           reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    RSPAREN         reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    SEMICOLON       reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    RCPAREN         reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    COLON           reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)
    RTEMPLATE       reduce using rule 97 (postfix_expression -> postfix_expression ARROW name .)


state 315

    (69) unary_expression -> SIZEOF LPAREN type_name . RPAREN

    RPAREN          shift and go to state 375


state 316

    (18) logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .
    (20) inclusive_OR_expression -> inclusive_OR_expression . OROP exclusive_OR_expression

    ANDOP           reduce using rule 18 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    QUESMARK        reduce using rule 18 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    OROP            reduce using rule 18 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    RPAREN          reduce using rule 18 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    COMMA           reduce using rule 18 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    RSPAREN         reduce using rule 18 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    SEMICOLON       reduce using rule 18 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    RCPAREN         reduce using rule 18 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    COLON           reduce using rule 18 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    RTEMPLATE       reduce using rule 18 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)

  ! OROP            [ shift and go to state 230 ]


state 317

    (73) allocation_expression -> NEW new_type_name new_initializer .

    EQUAL           reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    MULTEQOP        reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    DIVEQOP         reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    MODEQOP         reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    PLUSEQOP        reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    MINUSEQOP       reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    LSHIFTEQOP      reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    RSHIFTEQOP      reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    BANDEQOP        reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    BOREQOP         reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    DOTSTAR         reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    ARROWSTAR       reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    MULTOP          reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    DIVOP           reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    MODOP           reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    PLUSOP          reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    MINUSOP         reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    LSHIFT          reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    RSHIFT          reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    LTCOMP          reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    GTCOMP          reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    LTECOMP         reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    GTECOMP         reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    EQCOMP          reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    NEQCOMP         reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    BANDOP          reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    XOROP           reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    OROP            reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    ANDOP           reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    QUESMARK        reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    RPAREN          reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    COMMA           reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    RSPAREN         reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    SEMICOLON       reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    RCPAREN         reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    COLON           reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)
    RTEMPLATE       reduce using rule 73 (allocation_expression -> NEW new_type_name new_initializer .)


state 318

    (83) new_initializer -> LPAREN . initializer_list RPAREN
    (84) new_initializer -> LPAREN . RPAREN
    (283) initializer_list -> . assignment_expression
    (284) initializer_list -> . initializer_list COMMA assignment_expression
    (285) initializer_list -> . LCPAREN initializer_list RCPAREN
    (286) initializer_list -> . LCPAREN initializer_list COMMA RCPAREN
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 377
    LCPAREN         shift and go to state 249
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    THIS            shift and go to state 134
    LPAREN          shift and go to state 105
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    initializer_list               shift and go to state 376
    assignment_expression          shift and go to state 251
    conditional_expression         shift and go to state 111
    unary_expression               shift and go to state 112
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    cast_expression                shift and go to state 118
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    logical_AND_expression         shift and go to state 123
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    inclusive_OR_expression        shift and go to state 132
    literal                        shift and go to state 133
    exclusive_OR_expression        shift and go to state 135
    AND_expression                 shift and go to state 139
    equality_expression            shift and go to state 140
    relational_expression          shift and go to state 141
    shift_expression               shift and go to state 142
    additive_expression            shift and go to state 143
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145

state 319

    (75) allocation_expression -> NEW LPAREN type_name . RPAREN new_initializer
    (76) allocation_expression -> NEW LPAREN type_name . RPAREN

    RPAREN          shift and go to state 378


state 320

    (77) new_type_name -> type_specifier_ new_declarator .
    (79) new_declarator -> new_declarator . MULTOP
    (81) new_declarator -> new_declarator . LSPAREN expression RSPAREN

  ! shift/reduce conflict for MULTOP resolved as shift
    LPAREN          reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    EQUAL           reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    MULTEQOP        reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    DIVEQOP         reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    MODEQOP         reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    PLUSEQOP        reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    MINUSEQOP       reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    LSHIFTEQOP      reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    RSHIFTEQOP      reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    BANDEQOP        reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    BOREQOP         reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    DOTSTAR         reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    ARROWSTAR       reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    DIVOP           reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    MODOP           reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    PLUSOP          reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    MINUSOP         reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    LSHIFT          reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    RSHIFT          reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    LTCOMP          reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    GTCOMP          reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    LTECOMP         reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    GTECOMP         reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    EQCOMP          reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    NEQCOMP         reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    BANDOP          reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    XOROP           reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    OROP            reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    ANDOP           reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    QUESMARK        reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    RPAREN          reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    COMMA           reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    RSPAREN         reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    SEMICOLON       reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    RCPAREN         reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    COLON           reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    RTEMPLATE       reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .)
    MULTOP          shift and go to state 379
    LSPAREN         shift and go to state 380

  ! MULTOP          [ reduce using rule 77 (new_type_name -> type_specifier_ new_declarator .) ]


state 321

    (80) new_declarator -> MULTOP .

    MULTOP          reduce using rule 80 (new_declarator -> MULTOP .)
    LSPAREN         reduce using rule 80 (new_declarator -> MULTOP .)
    LPAREN          reduce using rule 80 (new_declarator -> MULTOP .)
    EQUAL           reduce using rule 80 (new_declarator -> MULTOP .)
    MULTEQOP        reduce using rule 80 (new_declarator -> MULTOP .)
    DIVEQOP         reduce using rule 80 (new_declarator -> MULTOP .)
    MODEQOP         reduce using rule 80 (new_declarator -> MULTOP .)
    PLUSEQOP        reduce using rule 80 (new_declarator -> MULTOP .)
    MINUSEQOP       reduce using rule 80 (new_declarator -> MULTOP .)
    LSHIFTEQOP      reduce using rule 80 (new_declarator -> MULTOP .)
    RSHIFTEQOP      reduce using rule 80 (new_declarator -> MULTOP .)
    BANDEQOP        reduce using rule 80 (new_declarator -> MULTOP .)
    BOREQOP         reduce using rule 80 (new_declarator -> MULTOP .)
    DOTSTAR         reduce using rule 80 (new_declarator -> MULTOP .)
    ARROWSTAR       reduce using rule 80 (new_declarator -> MULTOP .)
    DIVOP           reduce using rule 80 (new_declarator -> MULTOP .)
    MODOP           reduce using rule 80 (new_declarator -> MULTOP .)
    PLUSOP          reduce using rule 80 (new_declarator -> MULTOP .)
    MINUSOP         reduce using rule 80 (new_declarator -> MULTOP .)
    LSHIFT          reduce using rule 80 (new_declarator -> MULTOP .)
    RSHIFT          reduce using rule 80 (new_declarator -> MULTOP .)
    LTCOMP          reduce using rule 80 (new_declarator -> MULTOP .)
    GTCOMP          reduce using rule 80 (new_declarator -> MULTOP .)
    LTECOMP         reduce using rule 80 (new_declarator -> MULTOP .)
    GTECOMP         reduce using rule 80 (new_declarator -> MULTOP .)
    EQCOMP          reduce using rule 80 (new_declarator -> MULTOP .)
    NEQCOMP         reduce using rule 80 (new_declarator -> MULTOP .)
    BANDOP          reduce using rule 80 (new_declarator -> MULTOP .)
    XOROP           reduce using rule 80 (new_declarator -> MULTOP .)
    OROP            reduce using rule 80 (new_declarator -> MULTOP .)
    ANDOP           reduce using rule 80 (new_declarator -> MULTOP .)
    QUESMARK        reduce using rule 80 (new_declarator -> MULTOP .)
    RPAREN          reduce using rule 80 (new_declarator -> MULTOP .)
    COMMA           reduce using rule 80 (new_declarator -> MULTOP .)
    RSPAREN         reduce using rule 80 (new_declarator -> MULTOP .)
    SEMICOLON       reduce using rule 80 (new_declarator -> MULTOP .)
    RCPAREN         reduce using rule 80 (new_declarator -> MULTOP .)
    COLON           reduce using rule 80 (new_declarator -> MULTOP .)
    RTEMPLATE       reduce using rule 80 (new_declarator -> MULTOP .)


state 322

    (82) new_declarator -> LSPAREN . expression RSPAREN
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    THROW           shift and go to state 190
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    THIS            shift and go to state 134
    LPAREN          shift and go to state 105
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    expression                     shift and go to state 381
    assignment_expression          shift and go to state 188
    throw_expression               shift and go to state 189
    conditional_expression         shift and go to state 111
    unary_expression               shift and go to state 112
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    cast_expression                shift and go to state 118
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    logical_AND_expression         shift and go to state 123
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    inclusive_OR_expression        shift and go to state 132
    literal                        shift and go to state 133
    exclusive_OR_expression        shift and go to state 135
    AND_expression                 shift and go to state 139
    equality_expression            shift and go to state 140
    relational_expression          shift and go to state 141
    shift_expression               shift and go to state 142
    additive_expression            shift and go to state 143
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145

state 323

    (20) inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .
    (22) exclusive_OR_expression -> exclusive_OR_expression . XOROP AND_expression

    OROP            reduce using rule 20 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    ANDOP           reduce using rule 20 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    QUESMARK        reduce using rule 20 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    RPAREN          reduce using rule 20 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    COMMA           reduce using rule 20 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    RSPAREN         reduce using rule 20 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    SEMICOLON       reduce using rule 20 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    RCPAREN         reduce using rule 20 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    COLON           reduce using rule 20 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    RTEMPLATE       reduce using rule 20 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    XOROP           shift and go to state 231


state 324

    (22) exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .
    (24) AND_expression -> AND_expression . BANDOP equality_expression

    XOROP           reduce using rule 22 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    OROP            reduce using rule 22 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    ANDOP           reduce using rule 22 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    QUESMARK        reduce using rule 22 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    RPAREN          reduce using rule 22 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    COMMA           reduce using rule 22 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    RSPAREN         reduce using rule 22 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    SEMICOLON       reduce using rule 22 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    RCPAREN         reduce using rule 22 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    COLON           reduce using rule 22 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    RTEMPLATE       reduce using rule 22 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    BANDOP          shift and go to state 232


state 325

    (24) AND_expression -> AND_expression BANDOP equality_expression .
    (26) equality_expression -> equality_expression . EQCOMP relational_expression
    (27) equality_expression -> equality_expression . NEQCOMP relational_expression

    BANDOP          reduce using rule 24 (AND_expression -> AND_expression BANDOP equality_expression .)
    XOROP           reduce using rule 24 (AND_expression -> AND_expression BANDOP equality_expression .)
    OROP            reduce using rule 24 (AND_expression -> AND_expression BANDOP equality_expression .)
    ANDOP           reduce using rule 24 (AND_expression -> AND_expression BANDOP equality_expression .)
    QUESMARK        reduce using rule 24 (AND_expression -> AND_expression BANDOP equality_expression .)
    RPAREN          reduce using rule 24 (AND_expression -> AND_expression BANDOP equality_expression .)
    COMMA           reduce using rule 24 (AND_expression -> AND_expression BANDOP equality_expression .)
    RSPAREN         reduce using rule 24 (AND_expression -> AND_expression BANDOP equality_expression .)
    SEMICOLON       reduce using rule 24 (AND_expression -> AND_expression BANDOP equality_expression .)
    RCPAREN         reduce using rule 24 (AND_expression -> AND_expression BANDOP equality_expression .)
    COLON           reduce using rule 24 (AND_expression -> AND_expression BANDOP equality_expression .)
    RTEMPLATE       reduce using rule 24 (AND_expression -> AND_expression BANDOP equality_expression .)
    EQCOMP          shift and go to state 233
    NEQCOMP         shift and go to state 234


state 326

    (26) equality_expression -> equality_expression EQCOMP relational_expression .
    (29) relational_expression -> relational_expression . LTCOMP shift_expression
    (30) relational_expression -> relational_expression . GTCOMP shift_expression
    (31) relational_expression -> relational_expression . LTECOMP shift_expression
    (32) relational_expression -> relational_expression . GTECOMP shift_expression

    EQCOMP          reduce using rule 26 (equality_expression -> equality_expression EQCOMP relational_expression .)
    NEQCOMP         reduce using rule 26 (equality_expression -> equality_expression EQCOMP relational_expression .)
    BANDOP          reduce using rule 26 (equality_expression -> equality_expression EQCOMP relational_expression .)
    XOROP           reduce using rule 26 (equality_expression -> equality_expression EQCOMP relational_expression .)
    OROP            reduce using rule 26 (equality_expression -> equality_expression EQCOMP relational_expression .)
    ANDOP           reduce using rule 26 (equality_expression -> equality_expression EQCOMP relational_expression .)
    QUESMARK        reduce using rule 26 (equality_expression -> equality_expression EQCOMP relational_expression .)
    RPAREN          reduce using rule 26 (equality_expression -> equality_expression EQCOMP relational_expression .)
    COMMA           reduce using rule 26 (equality_expression -> equality_expression EQCOMP relational_expression .)
    RSPAREN         reduce using rule 26 (equality_expression -> equality_expression EQCOMP relational_expression .)
    SEMICOLON       reduce using rule 26 (equality_expression -> equality_expression EQCOMP relational_expression .)
    RCPAREN         reduce using rule 26 (equality_expression -> equality_expression EQCOMP relational_expression .)
    COLON           reduce using rule 26 (equality_expression -> equality_expression EQCOMP relational_expression .)
    RTEMPLATE       reduce using rule 26 (equality_expression -> equality_expression EQCOMP relational_expression .)
    LTCOMP          shift and go to state 235
    GTCOMP          shift and go to state 236
    LTECOMP         shift and go to state 237
    GTECOMP         shift and go to state 238


state 327

    (27) equality_expression -> equality_expression NEQCOMP relational_expression .
    (29) relational_expression -> relational_expression . LTCOMP shift_expression
    (30) relational_expression -> relational_expression . GTCOMP shift_expression
    (31) relational_expression -> relational_expression . LTECOMP shift_expression
    (32) relational_expression -> relational_expression . GTECOMP shift_expression

    EQCOMP          reduce using rule 27 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    NEQCOMP         reduce using rule 27 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    BANDOP          reduce using rule 27 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    XOROP           reduce using rule 27 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    OROP            reduce using rule 27 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    ANDOP           reduce using rule 27 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    QUESMARK        reduce using rule 27 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    RPAREN          reduce using rule 27 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    COMMA           reduce using rule 27 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    RSPAREN         reduce using rule 27 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    SEMICOLON       reduce using rule 27 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    RCPAREN         reduce using rule 27 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    COLON           reduce using rule 27 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    RTEMPLATE       reduce using rule 27 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    LTCOMP          shift and go to state 235
    GTCOMP          shift and go to state 236
    LTECOMP         shift and go to state 237
    GTECOMP         shift and go to state 238


state 328

    (29) relational_expression -> relational_expression LTCOMP shift_expression .
    (34) shift_expression -> shift_expression . LSHIFT additive_expression
    (35) shift_expression -> shift_expression . RSHIFT additive_expression

    LTCOMP          reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    GTCOMP          reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    LTECOMP         reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    GTECOMP         reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    EQCOMP          reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    NEQCOMP         reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    BANDOP          reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    XOROP           reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    OROP            reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    ANDOP           reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    QUESMARK        reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    RPAREN          reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    COMMA           reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    RSPAREN         reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    SEMICOLON       reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    RCPAREN         reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    COLON           reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    RTEMPLATE       reduce using rule 29 (relational_expression -> relational_expression LTCOMP shift_expression .)
    LSHIFT          shift and go to state 239
    RSHIFT          shift and go to state 240


state 329

    (30) relational_expression -> relational_expression GTCOMP shift_expression .
    (34) shift_expression -> shift_expression . LSHIFT additive_expression
    (35) shift_expression -> shift_expression . RSHIFT additive_expression

    LTCOMP          reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    GTCOMP          reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    LTECOMP         reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    GTECOMP         reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    EQCOMP          reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    NEQCOMP         reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    BANDOP          reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    XOROP           reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    OROP            reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    ANDOP           reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    QUESMARK        reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    RPAREN          reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    COMMA           reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    RSPAREN         reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    SEMICOLON       reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    RCPAREN         reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    COLON           reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    RTEMPLATE       reduce using rule 30 (relational_expression -> relational_expression GTCOMP shift_expression .)
    LSHIFT          shift and go to state 239
    RSHIFT          shift and go to state 240


state 330

    (31) relational_expression -> relational_expression LTECOMP shift_expression .
    (34) shift_expression -> shift_expression . LSHIFT additive_expression
    (35) shift_expression -> shift_expression . RSHIFT additive_expression

    LTCOMP          reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    GTCOMP          reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    LTECOMP         reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    GTECOMP         reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    EQCOMP          reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    NEQCOMP         reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    BANDOP          reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    XOROP           reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    OROP            reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    ANDOP           reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    QUESMARK        reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    RPAREN          reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    COMMA           reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    RSPAREN         reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    SEMICOLON       reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    RCPAREN         reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    COLON           reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    RTEMPLATE       reduce using rule 31 (relational_expression -> relational_expression LTECOMP shift_expression .)
    LSHIFT          shift and go to state 239
    RSHIFT          shift and go to state 240


state 331

    (32) relational_expression -> relational_expression GTECOMP shift_expression .
    (34) shift_expression -> shift_expression . LSHIFT additive_expression
    (35) shift_expression -> shift_expression . RSHIFT additive_expression

    LTCOMP          reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    GTCOMP          reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    LTECOMP         reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    GTECOMP         reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    EQCOMP          reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    NEQCOMP         reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    BANDOP          reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    XOROP           reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    OROP            reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    ANDOP           reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    QUESMARK        reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    RPAREN          reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    COMMA           reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    RSPAREN         reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    SEMICOLON       reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    RCPAREN         reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    COLON           reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    RTEMPLATE       reduce using rule 32 (relational_expression -> relational_expression GTECOMP shift_expression .)
    LSHIFT          shift and go to state 239
    RSHIFT          shift and go to state 240


state 332

    (34) shift_expression -> shift_expression LSHIFT additive_expression .
    (37) additive_expression -> additive_expression . PLUSOP multiplicative_expression
    (38) additive_expression -> additive_expression . MINUSOP multiplicative_expression

    LSHIFT          reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RSHIFT          reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LTCOMP          reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    GTCOMP          reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LTECOMP         reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    GTECOMP         reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    EQCOMP          reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    NEQCOMP         reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    BANDOP          reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    XOROP           reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    OROP            reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    ANDOP           reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    QUESMARK        reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RPAREN          reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    COMMA           reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RSPAREN         reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    SEMICOLON       reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RCPAREN         reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    COLON           reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RTEMPLATE       reduce using rule 34 (shift_expression -> shift_expression LSHIFT additive_expression .)
    PLUSOP          shift and go to state 241
    MINUSOP         shift and go to state 242


state 333

    (35) shift_expression -> shift_expression RSHIFT additive_expression .
    (37) additive_expression -> additive_expression . PLUSOP multiplicative_expression
    (38) additive_expression -> additive_expression . MINUSOP multiplicative_expression

    LSHIFT          reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RSHIFT          reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LTCOMP          reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    GTCOMP          reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LTECOMP         reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    GTECOMP         reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    EQCOMP          reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    NEQCOMP         reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    BANDOP          reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    XOROP           reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    OROP            reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    ANDOP           reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    QUESMARK        reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RPAREN          reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    COMMA           reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RSPAREN         reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    SEMICOLON       reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RCPAREN         reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    COLON           reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RTEMPLATE       reduce using rule 35 (shift_expression -> shift_expression RSHIFT additive_expression .)
    PLUSOP          shift and go to state 241
    MINUSOP         shift and go to state 242


state 334

    (37) additive_expression -> additive_expression PLUSOP multiplicative_expression .
    (40) multiplicative_expression -> multiplicative_expression . MULTOP pm_expression
    (41) multiplicative_expression -> multiplicative_expression . DIVOP pm_expression
    (42) multiplicative_expression -> multiplicative_expression . MODOP pm_expression

    PLUSOP          reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    MINUSOP         reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    LSHIFT          reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    RSHIFT          reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    LTCOMP          reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    GTCOMP          reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    LTECOMP         reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    GTECOMP         reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    EQCOMP          reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    NEQCOMP         reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    BANDOP          reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    XOROP           reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    OROP            reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    ANDOP           reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    QUESMARK        reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    RPAREN          reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    COMMA           reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    RSPAREN         reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    SEMICOLON       reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    RCPAREN         reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    COLON           reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    RTEMPLATE       reduce using rule 37 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    MULTOP          shift and go to state 243
    DIVOP           shift and go to state 244
    MODOP           shift and go to state 245


state 335

    (38) additive_expression -> additive_expression MINUSOP multiplicative_expression .
    (40) multiplicative_expression -> multiplicative_expression . MULTOP pm_expression
    (41) multiplicative_expression -> multiplicative_expression . DIVOP pm_expression
    (42) multiplicative_expression -> multiplicative_expression . MODOP pm_expression

    PLUSOP          reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    MINUSOP         reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    LSHIFT          reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    RSHIFT          reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    LTCOMP          reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    GTCOMP          reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    LTECOMP         reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    GTECOMP         reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    EQCOMP          reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    NEQCOMP         reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    BANDOP          reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    XOROP           reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    OROP            reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    ANDOP           reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    QUESMARK        reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    RPAREN          reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    COMMA           reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    RSPAREN         reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    SEMICOLON       reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    RCPAREN         reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    COLON           reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    RTEMPLATE       reduce using rule 38 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    MULTOP          shift and go to state 243
    DIVOP           shift and go to state 244
    MODOP           shift and go to state 245


state 336

    (40) multiplicative_expression -> multiplicative_expression MULTOP pm_expression .
    (44) pm_expression -> pm_expression . DOTSTAR cast_expression
    (45) pm_expression -> pm_expression . ARROWSTAR cast_expression

    MULTOP          reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    DIVOP           reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    MODOP           reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    PLUSOP          reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    MINUSOP         reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    LSHIFT          reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    RSHIFT          reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    LTCOMP          reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    GTCOMP          reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    LTECOMP         reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    GTECOMP         reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    EQCOMP          reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    NEQCOMP         reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    BANDOP          reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    XOROP           reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    OROP            reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    ANDOP           reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    QUESMARK        reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    RPAREN          reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    COMMA           reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    RSPAREN         reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    SEMICOLON       reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    RCPAREN         reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    COLON           reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    RTEMPLATE       reduce using rule 40 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    DOTSTAR         shift and go to state 246
    ARROWSTAR       shift and go to state 247


state 337

    (41) multiplicative_expression -> multiplicative_expression DIVOP pm_expression .
    (44) pm_expression -> pm_expression . DOTSTAR cast_expression
    (45) pm_expression -> pm_expression . ARROWSTAR cast_expression

    MULTOP          reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    DIVOP           reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    MODOP           reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    PLUSOP          reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    MINUSOP         reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    LSHIFT          reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    RSHIFT          reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    LTCOMP          reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    GTCOMP          reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    LTECOMP         reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    GTECOMP         reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    EQCOMP          reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    NEQCOMP         reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    BANDOP          reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    XOROP           reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    OROP            reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    ANDOP           reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    QUESMARK        reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    RPAREN          reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    COMMA           reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    RSPAREN         reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    SEMICOLON       reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    RCPAREN         reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    COLON           reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    RTEMPLATE       reduce using rule 41 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    DOTSTAR         shift and go to state 246
    ARROWSTAR       shift and go to state 247


state 338

    (42) multiplicative_expression -> multiplicative_expression MODOP pm_expression .
    (44) pm_expression -> pm_expression . DOTSTAR cast_expression
    (45) pm_expression -> pm_expression . ARROWSTAR cast_expression

    MULTOP          reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    DIVOP           reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    MODOP           reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    PLUSOP          reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    MINUSOP         reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    LSHIFT          reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    RSHIFT          reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    LTCOMP          reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    GTCOMP          reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    LTECOMP         reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    GTECOMP         reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    EQCOMP          reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    NEQCOMP         reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    BANDOP          reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    XOROP           reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    OROP            reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    ANDOP           reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    QUESMARK        reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    RPAREN          reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    COMMA           reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    RSPAREN         reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    SEMICOLON       reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    RCPAREN         reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    COLON           reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    RTEMPLATE       reduce using rule 42 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    DOTSTAR         shift and go to state 246
    ARROWSTAR       shift and go to state 247


state 339

    (44) pm_expression -> pm_expression DOTSTAR cast_expression .

    DOTSTAR         reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    ARROWSTAR       reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    MULTOP          reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    DIVOP           reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    MODOP           reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    PLUSOP          reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    MINUSOP         reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    LSHIFT          reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    RSHIFT          reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    LTCOMP          reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    GTCOMP          reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    LTECOMP         reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    GTECOMP         reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    EQCOMP          reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    NEQCOMP         reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    BANDOP          reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    XOROP           reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    OROP            reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    ANDOP           reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    QUESMARK        reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    RPAREN          reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    COMMA           reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    RSPAREN         reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    SEMICOLON       reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    RCPAREN         reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    COLON           reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    RTEMPLATE       reduce using rule 44 (pm_expression -> pm_expression DOTSTAR cast_expression .)


state 340

    (45) pm_expression -> pm_expression ARROWSTAR cast_expression .

    DOTSTAR         reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    ARROWSTAR       reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    MULTOP          reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    DIVOP           reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    MODOP           reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    PLUSOP          reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    MINUSOP         reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    LSHIFT          reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    RSHIFT          reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    LTCOMP          reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    GTCOMP          reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    LTECOMP         reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    GTECOMP         reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    EQCOMP          reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    NEQCOMP         reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    BANDOP          reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    XOROP           reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    OROP            reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    ANDOP           reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    QUESMARK        reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    RPAREN          reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    COMMA           reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    RSPAREN         reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    SEMICOLON       reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    RCPAREN         reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    COLON           reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    RTEMPLATE       reduce using rule 45 (pm_expression -> pm_expression ARROWSTAR cast_expression .)


state 341

    (285) initializer_list -> LCPAREN initializer_list . RCPAREN
    (286) initializer_list -> LCPAREN initializer_list . COMMA RCPAREN
    (284) initializer_list -> initializer_list . COMMA assignment_expression

    RCPAREN         shift and go to state 382
    COMMA           shift and go to state 383


state 342

    (280) initializer -> EQUAL LCPAREN initializer_list RCPAREN .

    SEMICOLON       reduce using rule 280 (initializer -> EQUAL LCPAREN initializer_list RCPAREN .)
    COMMA           reduce using rule 280 (initializer -> EQUAL LCPAREN initializer_list RCPAREN .)


state 343

    (281) initializer -> EQUAL LCPAREN initializer_list COMMA . RCPAREN
    (284) initializer_list -> initializer_list COMMA . assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RCPAREN         shift and go to state 384
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    THIS            shift and go to state 134
    LPAREN          shift and go to state 105
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    assignment_expression          shift and go to state 385
    conditional_expression         shift and go to state 111
    unary_expression               shift and go to state 112
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    cast_expression                shift and go to state 118
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    logical_AND_expression         shift and go to state 123
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    inclusive_OR_expression        shift and go to state 132
    literal                        shift and go to state 133
    exclusive_OR_expression        shift and go to state 135
    AND_expression                 shift and go to state 139
    equality_expression            shift and go to state 140
    relational_expression          shift and go to state 141
    shift_expression               shift and go to state 142
    additive_expression            shift and go to state 143
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145

state 344

    (225) function_definition -> type_specifier_ declarator LPAREN argument_declaration_list . RPAREN fct_body

    RPAREN          shift and go to state 386


state 345

    (226) function_definition -> type_specifier_ declarator LPAREN RPAREN . fct_body
    (229) fct_body -> . compound_statement
    (230) compound_statement -> . LCPAREN statement_list RCPAREN
    (231) compound_statement -> . LCPAREN RCPAREN

    LCPAREN         shift and go to state 194

    fct_body                       shift and go to state 192
    compound_statement             shift and go to state 193

state 346

    (122) argument_declaration -> type_specifier_ declarator EQUAL expression .
    (48) expression -> expression . COMMA assignment_expression

  ! shift/reduce conflict for COMMA resolved as shift
    RTEMPLATE       reduce using rule 122 (argument_declaration -> type_specifier_ declarator EQUAL expression .)
    RPAREN          reduce using rule 122 (argument_declaration -> type_specifier_ declarator EQUAL expression .)
    COMMA           shift and go to state 273

  ! COMMA           [ reduce using rule 122 (argument_declaration -> type_specifier_ declarator EQUAL expression .) ]


state 347

    (112) abstract_declarator -> abstract_declarator LSPAREN constant_expression RSPAREN .

    IDENTIFIER      reduce using rule 112 (abstract_declarator -> abstract_declarator LSPAREN constant_expression RSPAREN .)
    LSPAREN         reduce using rule 112 (abstract_declarator -> abstract_declarator LSPAREN constant_expression RSPAREN .)
    RTEMPLATE       reduce using rule 112 (abstract_declarator -> abstract_declarator LSPAREN constant_expression RSPAREN .)
    COMMA           reduce using rule 112 (abstract_declarator -> abstract_declarator LSPAREN constant_expression RSPAREN .)
    RPAREN          reduce using rule 112 (abstract_declarator -> abstract_declarator LSPAREN constant_expression RSPAREN .)


state 348

    (194) base_list -> base_list COMMA base_specifier .

    COMMA           reduce using rule 194 (base_list -> base_list COMMA base_specifier .)
    LCPAREN         reduce using rule 194 (base_list -> base_list COMMA base_specifier .)


state 349

    (196) base_specifier -> class_key IDENTIFIER template_class_name .

    COMMA           reduce using rule 196 (base_specifier -> class_key IDENTIFIER template_class_name .)
    LCPAREN         reduce using rule 196 (base_specifier -> class_key IDENTIFIER template_class_name .)


state 350

    (199) base_specifier -> access_specifier class_key IDENTIFIER .
    (200) base_specifier -> access_specifier class_key IDENTIFIER . template_class_name
    (163) template_class_name -> . LTEMPLATE template_arg_list RTEMPLATE

    COMMA           reduce using rule 199 (base_specifier -> access_specifier class_key IDENTIFIER .)
    LCPAREN         reduce using rule 199 (base_specifier -> access_specifier class_key IDENTIFIER .)
    LTEMPLATE       shift and go to state 100

    template_class_name            shift and go to state 387

state 351

    (165) template_arg_list -> template_arg_list COMMA type_name .

    RTEMPLATE       reduce using rule 165 (template_arg_list -> template_arg_list COMMA type_name .)
    COMMA           reduce using rule 165 (template_arg_list -> template_arg_list COMMA type_name .)


state 352

    (48) expression -> expression COMMA assignment_expression .

    RPAREN          reduce using rule 48 (expression -> expression COMMA assignment_expression .)
    COMMA           reduce using rule 48 (expression -> expression COMMA assignment_expression .)
    SEMICOLON       reduce using rule 48 (expression -> expression COMMA assignment_expression .)
    COLON           reduce using rule 48 (expression -> expression COMMA assignment_expression .)
    RSPAREN         reduce using rule 48 (expression -> expression COMMA assignment_expression .)
    RTEMPLATE       reduce using rule 48 (expression -> expression COMMA assignment_expression .)


state 353

    (108) cast_expression -> LPAREN type_name RPAREN cast_expression .

    DOTSTAR         reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    ARROWSTAR       reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MULTOP          reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    DIVOP           reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MODOP           reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    PLUSOP          reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MINUSOP         reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LSHIFT          reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RSHIFT          reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LTCOMP          reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    GTCOMP          reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LTECOMP         reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    GTECOMP         reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    EQCOMP          reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    NEQCOMP         reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    BANDOP          reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    XOROP           reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    OROP            reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    ANDOP           reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    QUESMARK        reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RPAREN          reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    COMMA           reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RSPAREN         reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    SEMICOLON       reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    EQUAL           reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MULTEQOP        reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    DIVEQOP         reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MODEQOP         reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    PLUSEQOP        reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MINUSEQOP       reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LSHIFTEQOP      reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RSHIFTEQOP      reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    BANDEQOP        reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    BOREQOP         reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RCPAREN         reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    COLON           reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RTEMPLATE       reduce using rule 108 (cast_expression -> LPAREN type_name RPAREN cast_expression .)


state 354

    (230) compound_statement -> LCPAREN statement_list RCPAREN .

    CONST           reduce using rule 230 (compound_statement -> LCPAREN statement_list RCPAREN .)
    ASM             reduce using rule 230 (compound_statement -> LCPAREN statement_list RCPAREN .)
    TEMPLATE        reduce using rule 230 (compound_statement -> LCPAREN statement_list RCPAREN .)
    TYPEDEF         reduce using rule 230 (compound_statement -> LCPAREN statement_list RCPAREN .)
    CHAR            reduce using rule 230 (compound_statement -> LCPAREN statement_list RCPAREN .)
    SHORT           reduce using rule 230 (compound_statement -> LCPAREN statement_list RCPAREN .)
    INT             reduce using rule 230 (compound_statement -> LCPAREN statement_list RCPAREN .)
    LONG            reduce using rule 230 (compound_statement -> LCPAREN statement_list RCPAREN .)
    SIGNED          reduce using rule 230 (compound_statement -> LCPAREN statement_list RCPAREN .)
    UNSIGNED        reduce using rule 230 (compound_statement -> LCPAREN statement_list RCPAREN .)
    FLOAT           reduce using rule 230 (compound_statement -> LCPAREN statement_list RCPAREN .)
    DOUBLE          reduce using rule 230 (compound_statement -> LCPAREN statement_list RCPAREN .)
    VOID            reduce using rule 230 (compound_statement -> LCPAREN statement_list RCPAREN .)
    STRING          reduce using rule 230 (compound_statement -> LCPAREN statement_list RCPAREN .)
    AUTO            reduce using rule 230 (compound_statement -> LCPAREN statement_list RCPAREN .)
    TYPE            reduce using rule 230 (compound_statement -> LCPAREN statement_list RCPAREN .)
    CLASS           reduce using rule 230 (compound_statement -> LCPAREN statement_list RCPAREN .)
    STRUCT          reduce using rule 230 (compound_statement -> LCPAREN statement_list RCPAREN .)
    $end            reduce using rule 230 (compound_statement -> LCPAREN statement_list RCPAREN .)
    RCPAREN         reduce using rule 230 (compound_statement -> LCPAREN statement_list RCPAREN .)
    IDENTIFIER      reduce using rule 230 (compound_statement -> LCPAREN statement_list RCPAREN .)
    CASE            reduce using rule 230 (compound_statement -> LCPAREN statement_list RCPAREN .)
    DEFAULT         reduce using rule 230 (compound_statement -> LCPAREN statement_list RCPAREN .)
    SEMICOLON       reduce using rule 230 (compound_statement -> LCPAREN statement_list RCPAREN .)
    LCPAREN         reduce using rule 230 (compound_statement -> LCPAREN statement_list RCPAREN .)
    IF              reduce using rule 230 (compound_statement -> LCPAREN statement_list RCPAREN .)
    SWITCH          reduce using rule 230 (compound_statement -> LCPAREN statement_list RCPAREN .)
    WHILE           reduce using rule 230 (compound_statement -> LCPAREN statement_list RCPAREN .)
    DO              reduce using rule 230 (compound_statement -> LCPAREN statement_list RCPAREN .)
    FOR             reduce using rule 230 (compound_statement -> LCPAREN statement_list RCPAREN .)
    BREAK           reduce using rule 230 (compound_statement -> LCPAREN statement_list RCPAREN .)
    CONTINUE        reduce using rule 230 (compound_statement -> LCPAREN statement_list RCPAREN .)
    RETURN          reduce using rule 230 (compound_statement -> LCPAREN statement_list RCPAREN .)
    GOTO            reduce using rule 230 (compound_statement -> LCPAREN statement_list RCPAREN .)
    TRY             reduce using rule 230 (compound_statement -> LCPAREN statement_list RCPAREN .)
    THROW           reduce using rule 230 (compound_statement -> LCPAREN statement_list RCPAREN .)
    DPLUSOP         reduce using rule 230 (compound_statement -> LCPAREN statement_list RCPAREN .)
    DMINUSOP        reduce using rule 230 (compound_statement -> LCPAREN statement_list RCPAREN .)
    SIZEOF          reduce using rule 230 (compound_statement -> LCPAREN statement_list RCPAREN .)
    PLUSOP          reduce using rule 230 (compound_statement -> LCPAREN statement_list RCPAREN .)
    MINUSOP         reduce using rule 230 (compound_statement -> LCPAREN statement_list RCPAREN .)
    NOTSYM          reduce using rule 230 (compound_statement -> LCPAREN statement_list RCPAREN .)
    BNOP            reduce using rule 230 (compound_statement -> LCPAREN statement_list RCPAREN .)
    MULTOP          reduce using rule 230 (compound_statement -> LCPAREN statement_list RCPAREN .)
    BANDOP          reduce using rule 230 (compound_statement -> LCPAREN statement_list RCPAREN .)
    NEW             reduce using rule 230 (compound_statement -> LCPAREN statement_list RCPAREN .)
    DELETE          reduce using rule 230 (compound_statement -> LCPAREN statement_list RCPAREN .)
    THIS            reduce using rule 230 (compound_statement -> LCPAREN statement_list RCPAREN .)
    LPAREN          reduce using rule 230 (compound_statement -> LCPAREN statement_list RCPAREN .)
    DOUBLEBNOP      reduce using rule 230 (compound_statement -> LCPAREN statement_list RCPAREN .)
    STRING_L        reduce using rule 230 (compound_statement -> LCPAREN statement_list RCPAREN .)
    NUMBER          reduce using rule 230 (compound_statement -> LCPAREN statement_list RCPAREN .)
    SCHAR           reduce using rule 230 (compound_statement -> LCPAREN statement_list RCPAREN .)
    ELSE            reduce using rule 230 (compound_statement -> LCPAREN statement_list RCPAREN .)
    CATCH           reduce using rule 230 (compound_statement -> LCPAREN statement_list RCPAREN .)
    PRIVATE         reduce using rule 230 (compound_statement -> LCPAREN statement_list RCPAREN .)
    PROTECTED       reduce using rule 230 (compound_statement -> LCPAREN statement_list RCPAREN .)
    PUBLIC          reduce using rule 230 (compound_statement -> LCPAREN statement_list RCPAREN .)


state 355

    (233) statement_list -> statement_list statement .

    RCPAREN         reduce using rule 233 (statement_list -> statement_list statement .)
    IDENTIFIER      reduce using rule 233 (statement_list -> statement_list statement .)
    CASE            reduce using rule 233 (statement_list -> statement_list statement .)
    DEFAULT         reduce using rule 233 (statement_list -> statement_list statement .)
    SEMICOLON       reduce using rule 233 (statement_list -> statement_list statement .)
    LCPAREN         reduce using rule 233 (statement_list -> statement_list statement .)
    IF              reduce using rule 233 (statement_list -> statement_list statement .)
    SWITCH          reduce using rule 233 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 233 (statement_list -> statement_list statement .)
    DO              reduce using rule 233 (statement_list -> statement_list statement .)
    FOR             reduce using rule 233 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 233 (statement_list -> statement_list statement .)
    CONTINUE        reduce using rule 233 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 233 (statement_list -> statement_list statement .)
    GOTO            reduce using rule 233 (statement_list -> statement_list statement .)
    TRY             reduce using rule 233 (statement_list -> statement_list statement .)
    THROW           reduce using rule 233 (statement_list -> statement_list statement .)
    CONST           reduce using rule 233 (statement_list -> statement_list statement .)
    ASM             reduce using rule 233 (statement_list -> statement_list statement .)
    TEMPLATE        reduce using rule 233 (statement_list -> statement_list statement .)
    TYPEDEF         reduce using rule 233 (statement_list -> statement_list statement .)
    DPLUSOP         reduce using rule 233 (statement_list -> statement_list statement .)
    DMINUSOP        reduce using rule 233 (statement_list -> statement_list statement .)
    SIZEOF          reduce using rule 233 (statement_list -> statement_list statement .)
    PLUSOP          reduce using rule 233 (statement_list -> statement_list statement .)
    MINUSOP         reduce using rule 233 (statement_list -> statement_list statement .)
    NOTSYM          reduce using rule 233 (statement_list -> statement_list statement .)
    BNOP            reduce using rule 233 (statement_list -> statement_list statement .)
    MULTOP          reduce using rule 233 (statement_list -> statement_list statement .)
    BANDOP          reduce using rule 233 (statement_list -> statement_list statement .)
    NEW             reduce using rule 233 (statement_list -> statement_list statement .)
    DELETE          reduce using rule 233 (statement_list -> statement_list statement .)
    CHAR            reduce using rule 233 (statement_list -> statement_list statement .)
    SHORT           reduce using rule 233 (statement_list -> statement_list statement .)
    INT             reduce using rule 233 (statement_list -> statement_list statement .)
    LONG            reduce using rule 233 (statement_list -> statement_list statement .)
    SIGNED          reduce using rule 233 (statement_list -> statement_list statement .)
    UNSIGNED        reduce using rule 233 (statement_list -> statement_list statement .)
    FLOAT           reduce using rule 233 (statement_list -> statement_list statement .)
    DOUBLE          reduce using rule 233 (statement_list -> statement_list statement .)
    VOID            reduce using rule 233 (statement_list -> statement_list statement .)
    STRING          reduce using rule 233 (statement_list -> statement_list statement .)
    AUTO            reduce using rule 233 (statement_list -> statement_list statement .)
    TYPE            reduce using rule 233 (statement_list -> statement_list statement .)
    CLASS           reduce using rule 233 (statement_list -> statement_list statement .)
    STRUCT          reduce using rule 233 (statement_list -> statement_list statement .)
    THIS            reduce using rule 233 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 233 (statement_list -> statement_list statement .)
    DOUBLEBNOP      reduce using rule 233 (statement_list -> statement_list statement .)
    STRING_L        reduce using rule 233 (statement_list -> statement_list statement .)
    NUMBER          reduce using rule 233 (statement_list -> statement_list statement .)
    SCHAR           reduce using rule 233 (statement_list -> statement_list statement .)


state 356

    (251) labeled_statement -> IDENTIFIER COLON . statement
    (234) statement -> . labeled_statement
    (235) statement -> . expression_statement
    (236) statement -> . compound_statement
    (237) statement -> . selection_statement
    (238) statement -> . iteration_statement
    (239) statement -> . jump_statement
    (240) statement -> . declaration_statement
    (241) statement -> . try_block
    (251) labeled_statement -> . IDENTIFIER COLON statement
    (252) labeled_statement -> . CASE constant_expression COLON statement
    (253) labeled_statement -> . DEFAULT COLON statement
    (262) expression_statement -> . expression SEMICOLON
    (263) expression_statement -> . SEMICOLON
    (230) compound_statement -> . LCPAREN statement_list RCPAREN
    (231) compound_statement -> . LCPAREN RCPAREN
    (247) selection_statement -> . IF LPAREN expression RPAREN statement
    (248) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (249) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (254) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (255) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (256) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (257) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (258) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (259) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (242) jump_statement -> . BREAK SEMICOLON
    (243) jump_statement -> . CONTINUE SEMICOLON
    (244) jump_statement -> . RETURN expression SEMICOLON
    (245) jump_statement -> . RETURN SEMICOLON
    (246) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (264) declaration_statement -> . declaration
    (250) try_block -> . TRY compound_statement CATCH compound_statement
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (265) declaration -> . type_specifier_ declarator_list SEMICOLON
    (266) declaration -> . asm_declaration
    (267) declaration -> . function_definition
    (268) declaration -> . function_decl
    (269) declaration -> . class_define_specifier SEMICOLON
    (270) declaration -> . template_declaration
    (271) declaration -> . typedef_declarator
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (168) type_specifier_ -> . CONST type_specifier
    (169) type_specifier_ -> . type_specifier
    (287) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (225) function_definition -> . type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body
    (226) function_definition -> . type_specifier_ declarator LPAREN RPAREN fct_body
    (227) function_decl -> . type_specifier_ declarator LPAREN argument_declaration_list RPAREN
    (228) function_decl -> . type_specifier_ declarator LPAREN RPAREN
    (203) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (204) class_define_specifier -> . class_head LCPAREN RCPAREN
    (272) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (170) typedef_declarator -> . TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON
    (171) typedef_declarator -> . TYPEDEF type_specifier_ IDENTIFIER SEMICOLON
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (172) type_specifier -> . simple_type_name
    (173) type_specifier -> . complex_type_specifier
    (190) class_head -> . class_key IDENTIFIER base_spec
    (191) class_head -> . class_key IDENTIFIER
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (174) simple_type_name -> . CHAR
    (175) simple_type_name -> . SHORT
    (176) simple_type_name -> . INT
    (177) simple_type_name -> . LONG
    (178) simple_type_name -> . SIGNED
    (179) simple_type_name -> . UNSIGNED
    (180) simple_type_name -> . FLOAT
    (181) simple_type_name -> . DOUBLE
    (182) simple_type_name -> . VOID
    (183) simple_type_name -> . STRING
    (184) simple_type_name -> . AUTO
    (185) complex_type_specifier -> . class_key IDENTIFIER
    (186) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (187) complex_type_specifier -> . TYPE IDENTIFIER
    (188) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (201) class_key -> . CLASS
    (202) class_key -> . STRUCT
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 288
    CASE            shift and go to state 289
    DEFAULT         shift and go to state 290
    SEMICOLON       shift and go to state 292
    LCPAREN         shift and go to state 194
    IF              shift and go to state 293
    SWITCH          shift and go to state 294
    WHILE           shift and go to state 295
    DO              shift and go to state 296
    FOR             shift and go to state 297
    BREAK           shift and go to state 298
    CONTINUE        shift and go to state 299
    RETURN          shift and go to state 300
    GOTO            shift and go to state 301
    TRY             shift and go to state 303
    THROW           shift and go to state 190
    CONST           shift and go to state 16
    ASM             shift and go to state 18
    TEMPLATE        shift and go to state 20
    TYPEDEF         shift and go to state 21
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38
    THIS            shift and go to state 134
    LPAREN          shift and go to state 105
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    statement                      shift and go to state 388
    labeled_statement              shift and go to state 280
    expression_statement           shift and go to state 281
    compound_statement             shift and go to state 282
    selection_statement            shift and go to state 283
    iteration_statement            shift and go to state 284
    jump_statement                 shift and go to state 285
    declaration_statement          shift and go to state 286
    try_block                      shift and go to state 287
    expression                     shift and go to state 291
    declaration                    shift and go to state 302
    assignment_expression          shift and go to state 188
    throw_expression               shift and go to state 189
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    function_decl                  shift and go to state 12
    class_define_specifier         shift and go to state 13
    template_declaration           shift and go to state 14
    typedef_declarator             shift and go to state 15
    conditional_expression         shift and go to state 111
    unary_expression               shift and go to state 112
    type_specifier                 shift and go to state 17
    class_head                     shift and go to state 19
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    cast_expression                shift and go to state 118
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 24
    logical_AND_expression         shift and go to state 123
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    inclusive_OR_expression        shift and go to state 132
    literal                        shift and go to state 133
    exclusive_OR_expression        shift and go to state 135
    AND_expression                 shift and go to state 139
    equality_expression            shift and go to state 140
    relational_expression          shift and go to state 141
    shift_expression               shift and go to state 142
    additive_expression            shift and go to state 143
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145

state 357

    (252) labeled_statement -> CASE constant_expression . COLON statement

    COLON           shift and go to state 389


state 358

    (253) labeled_statement -> DEFAULT COLON . statement
    (234) statement -> . labeled_statement
    (235) statement -> . expression_statement
    (236) statement -> . compound_statement
    (237) statement -> . selection_statement
    (238) statement -> . iteration_statement
    (239) statement -> . jump_statement
    (240) statement -> . declaration_statement
    (241) statement -> . try_block
    (251) labeled_statement -> . IDENTIFIER COLON statement
    (252) labeled_statement -> . CASE constant_expression COLON statement
    (253) labeled_statement -> . DEFAULT COLON statement
    (262) expression_statement -> . expression SEMICOLON
    (263) expression_statement -> . SEMICOLON
    (230) compound_statement -> . LCPAREN statement_list RCPAREN
    (231) compound_statement -> . LCPAREN RCPAREN
    (247) selection_statement -> . IF LPAREN expression RPAREN statement
    (248) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (249) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (254) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (255) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (256) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (257) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (258) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (259) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (242) jump_statement -> . BREAK SEMICOLON
    (243) jump_statement -> . CONTINUE SEMICOLON
    (244) jump_statement -> . RETURN expression SEMICOLON
    (245) jump_statement -> . RETURN SEMICOLON
    (246) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (264) declaration_statement -> . declaration
    (250) try_block -> . TRY compound_statement CATCH compound_statement
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (265) declaration -> . type_specifier_ declarator_list SEMICOLON
    (266) declaration -> . asm_declaration
    (267) declaration -> . function_definition
    (268) declaration -> . function_decl
    (269) declaration -> . class_define_specifier SEMICOLON
    (270) declaration -> . template_declaration
    (271) declaration -> . typedef_declarator
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (168) type_specifier_ -> . CONST type_specifier
    (169) type_specifier_ -> . type_specifier
    (287) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (225) function_definition -> . type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body
    (226) function_definition -> . type_specifier_ declarator LPAREN RPAREN fct_body
    (227) function_decl -> . type_specifier_ declarator LPAREN argument_declaration_list RPAREN
    (228) function_decl -> . type_specifier_ declarator LPAREN RPAREN
    (203) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (204) class_define_specifier -> . class_head LCPAREN RCPAREN
    (272) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (170) typedef_declarator -> . TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON
    (171) typedef_declarator -> . TYPEDEF type_specifier_ IDENTIFIER SEMICOLON
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (172) type_specifier -> . simple_type_name
    (173) type_specifier -> . complex_type_specifier
    (190) class_head -> . class_key IDENTIFIER base_spec
    (191) class_head -> . class_key IDENTIFIER
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (174) simple_type_name -> . CHAR
    (175) simple_type_name -> . SHORT
    (176) simple_type_name -> . INT
    (177) simple_type_name -> . LONG
    (178) simple_type_name -> . SIGNED
    (179) simple_type_name -> . UNSIGNED
    (180) simple_type_name -> . FLOAT
    (181) simple_type_name -> . DOUBLE
    (182) simple_type_name -> . VOID
    (183) simple_type_name -> . STRING
    (184) simple_type_name -> . AUTO
    (185) complex_type_specifier -> . class_key IDENTIFIER
    (186) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (187) complex_type_specifier -> . TYPE IDENTIFIER
    (188) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (201) class_key -> . CLASS
    (202) class_key -> . STRUCT
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 288
    CASE            shift and go to state 289
    DEFAULT         shift and go to state 290
    SEMICOLON       shift and go to state 292
    LCPAREN         shift and go to state 194
    IF              shift and go to state 293
    SWITCH          shift and go to state 294
    WHILE           shift and go to state 295
    DO              shift and go to state 296
    FOR             shift and go to state 297
    BREAK           shift and go to state 298
    CONTINUE        shift and go to state 299
    RETURN          shift and go to state 300
    GOTO            shift and go to state 301
    TRY             shift and go to state 303
    THROW           shift and go to state 190
    CONST           shift and go to state 16
    ASM             shift and go to state 18
    TEMPLATE        shift and go to state 20
    TYPEDEF         shift and go to state 21
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38
    THIS            shift and go to state 134
    LPAREN          shift and go to state 105
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    statement                      shift and go to state 390
    labeled_statement              shift and go to state 280
    expression_statement           shift and go to state 281
    compound_statement             shift and go to state 282
    selection_statement            shift and go to state 283
    iteration_statement            shift and go to state 284
    jump_statement                 shift and go to state 285
    declaration_statement          shift and go to state 286
    try_block                      shift and go to state 287
    expression                     shift and go to state 291
    declaration                    shift and go to state 302
    assignment_expression          shift and go to state 188
    throw_expression               shift and go to state 189
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    function_decl                  shift and go to state 12
    class_define_specifier         shift and go to state 13
    template_declaration           shift and go to state 14
    typedef_declarator             shift and go to state 15
    conditional_expression         shift and go to state 111
    unary_expression               shift and go to state 112
    type_specifier                 shift and go to state 17
    class_head                     shift and go to state 19
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    cast_expression                shift and go to state 118
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 24
    logical_AND_expression         shift and go to state 123
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    inclusive_OR_expression        shift and go to state 132
    literal                        shift and go to state 133
    exclusive_OR_expression        shift and go to state 135
    AND_expression                 shift and go to state 139
    equality_expression            shift and go to state 140
    relational_expression          shift and go to state 141
    shift_expression               shift and go to state 142
    additive_expression            shift and go to state 143
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145

state 359

    (262) expression_statement -> expression SEMICOLON .

    RCPAREN         reduce using rule 262 (expression_statement -> expression SEMICOLON .)
    IDENTIFIER      reduce using rule 262 (expression_statement -> expression SEMICOLON .)
    CASE            reduce using rule 262 (expression_statement -> expression SEMICOLON .)
    DEFAULT         reduce using rule 262 (expression_statement -> expression SEMICOLON .)
    SEMICOLON       reduce using rule 262 (expression_statement -> expression SEMICOLON .)
    LCPAREN         reduce using rule 262 (expression_statement -> expression SEMICOLON .)
    IF              reduce using rule 262 (expression_statement -> expression SEMICOLON .)
    SWITCH          reduce using rule 262 (expression_statement -> expression SEMICOLON .)
    WHILE           reduce using rule 262 (expression_statement -> expression SEMICOLON .)
    DO              reduce using rule 262 (expression_statement -> expression SEMICOLON .)
    FOR             reduce using rule 262 (expression_statement -> expression SEMICOLON .)
    BREAK           reduce using rule 262 (expression_statement -> expression SEMICOLON .)
    CONTINUE        reduce using rule 262 (expression_statement -> expression SEMICOLON .)
    RETURN          reduce using rule 262 (expression_statement -> expression SEMICOLON .)
    GOTO            reduce using rule 262 (expression_statement -> expression SEMICOLON .)
    TRY             reduce using rule 262 (expression_statement -> expression SEMICOLON .)
    THROW           reduce using rule 262 (expression_statement -> expression SEMICOLON .)
    CONST           reduce using rule 262 (expression_statement -> expression SEMICOLON .)
    ASM             reduce using rule 262 (expression_statement -> expression SEMICOLON .)
    TEMPLATE        reduce using rule 262 (expression_statement -> expression SEMICOLON .)
    TYPEDEF         reduce using rule 262 (expression_statement -> expression SEMICOLON .)
    DPLUSOP         reduce using rule 262 (expression_statement -> expression SEMICOLON .)
    DMINUSOP        reduce using rule 262 (expression_statement -> expression SEMICOLON .)
    SIZEOF          reduce using rule 262 (expression_statement -> expression SEMICOLON .)
    PLUSOP          reduce using rule 262 (expression_statement -> expression SEMICOLON .)
    MINUSOP         reduce using rule 262 (expression_statement -> expression SEMICOLON .)
    NOTSYM          reduce using rule 262 (expression_statement -> expression SEMICOLON .)
    BNOP            reduce using rule 262 (expression_statement -> expression SEMICOLON .)
    MULTOP          reduce using rule 262 (expression_statement -> expression SEMICOLON .)
    BANDOP          reduce using rule 262 (expression_statement -> expression SEMICOLON .)
    NEW             reduce using rule 262 (expression_statement -> expression SEMICOLON .)
    DELETE          reduce using rule 262 (expression_statement -> expression SEMICOLON .)
    CHAR            reduce using rule 262 (expression_statement -> expression SEMICOLON .)
    SHORT           reduce using rule 262 (expression_statement -> expression SEMICOLON .)
    INT             reduce using rule 262 (expression_statement -> expression SEMICOLON .)
    LONG            reduce using rule 262 (expression_statement -> expression SEMICOLON .)
    SIGNED          reduce using rule 262 (expression_statement -> expression SEMICOLON .)
    UNSIGNED        reduce using rule 262 (expression_statement -> expression SEMICOLON .)
    FLOAT           reduce using rule 262 (expression_statement -> expression SEMICOLON .)
    DOUBLE          reduce using rule 262 (expression_statement -> expression SEMICOLON .)
    VOID            reduce using rule 262 (expression_statement -> expression SEMICOLON .)
    STRING          reduce using rule 262 (expression_statement -> expression SEMICOLON .)
    AUTO            reduce using rule 262 (expression_statement -> expression SEMICOLON .)
    TYPE            reduce using rule 262 (expression_statement -> expression SEMICOLON .)
    CLASS           reduce using rule 262 (expression_statement -> expression SEMICOLON .)
    STRUCT          reduce using rule 262 (expression_statement -> expression SEMICOLON .)
    THIS            reduce using rule 262 (expression_statement -> expression SEMICOLON .)
    LPAREN          reduce using rule 262 (expression_statement -> expression SEMICOLON .)
    DOUBLEBNOP      reduce using rule 262 (expression_statement -> expression SEMICOLON .)
    STRING_L        reduce using rule 262 (expression_statement -> expression SEMICOLON .)
    NUMBER          reduce using rule 262 (expression_statement -> expression SEMICOLON .)
    SCHAR           reduce using rule 262 (expression_statement -> expression SEMICOLON .)
    ELSE            reduce using rule 262 (expression_statement -> expression SEMICOLON .)


state 360

    (247) selection_statement -> IF LPAREN . expression RPAREN statement
    (248) selection_statement -> IF LPAREN . expression RPAREN statement ELSE statement
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    THROW           shift and go to state 190
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    THIS            shift and go to state 134
    LPAREN          shift and go to state 105
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    expression                     shift and go to state 391
    assignment_expression          shift and go to state 188
    throw_expression               shift and go to state 189
    conditional_expression         shift and go to state 111
    unary_expression               shift and go to state 112
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    cast_expression                shift and go to state 118
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    logical_AND_expression         shift and go to state 123
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    inclusive_OR_expression        shift and go to state 132
    literal                        shift and go to state 133
    exclusive_OR_expression        shift and go to state 135
    AND_expression                 shift and go to state 139
    equality_expression            shift and go to state 140
    relational_expression          shift and go to state 141
    shift_expression               shift and go to state 142
    additive_expression            shift and go to state 143
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145

state 361

    (249) selection_statement -> SWITCH LPAREN . expression RPAREN statement
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    THROW           shift and go to state 190
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    THIS            shift and go to state 134
    LPAREN          shift and go to state 105
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    expression                     shift and go to state 392
    assignment_expression          shift and go to state 188
    throw_expression               shift and go to state 189
    conditional_expression         shift and go to state 111
    unary_expression               shift and go to state 112
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    cast_expression                shift and go to state 118
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    logical_AND_expression         shift and go to state 123
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    inclusive_OR_expression        shift and go to state 132
    literal                        shift and go to state 133
    exclusive_OR_expression        shift and go to state 135
    AND_expression                 shift and go to state 139
    equality_expression            shift and go to state 140
    relational_expression          shift and go to state 141
    shift_expression               shift and go to state 142
    additive_expression            shift and go to state 143
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145

state 362

    (254) iteration_statement -> WHILE LPAREN . expression RPAREN statement
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    THROW           shift and go to state 190
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    THIS            shift and go to state 134
    LPAREN          shift and go to state 105
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    expression                     shift and go to state 393
    assignment_expression          shift and go to state 188
    throw_expression               shift and go to state 189
    conditional_expression         shift and go to state 111
    unary_expression               shift and go to state 112
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    cast_expression                shift and go to state 118
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    logical_AND_expression         shift and go to state 123
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    inclusive_OR_expression        shift and go to state 132
    literal                        shift and go to state 133
    exclusive_OR_expression        shift and go to state 135
    AND_expression                 shift and go to state 139
    equality_expression            shift and go to state 140
    relational_expression          shift and go to state 141
    shift_expression               shift and go to state 142
    additive_expression            shift and go to state 143
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145

state 363

    (255) iteration_statement -> DO statement . WHILE LPAREN expression RPAREN SEMICOLON

    WHILE           shift and go to state 394


state 364

    (256) iteration_statement -> FOR LPAREN . for_init_statement expression SEMICOLON expression RPAREN statement
    (257) iteration_statement -> FOR LPAREN . for_init_statement SEMICOLON expression RPAREN statement
    (258) iteration_statement -> FOR LPAREN . for_init_statement expression SEMICOLON RPAREN statement
    (259) iteration_statement -> FOR LPAREN . for_init_statement SEMICOLON RPAREN statement
    (260) for_init_statement -> . expression_statement
    (261) for_init_statement -> . declaration_statement
    (262) expression_statement -> . expression SEMICOLON
    (263) expression_statement -> . SEMICOLON
    (264) declaration_statement -> . declaration
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (265) declaration -> . type_specifier_ declarator_list SEMICOLON
    (266) declaration -> . asm_declaration
    (267) declaration -> . function_definition
    (268) declaration -> . function_decl
    (269) declaration -> . class_define_specifier SEMICOLON
    (270) declaration -> . template_declaration
    (271) declaration -> . typedef_declarator
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (168) type_specifier_ -> . CONST type_specifier
    (169) type_specifier_ -> . type_specifier
    (287) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (225) function_definition -> . type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body
    (226) function_definition -> . type_specifier_ declarator LPAREN RPAREN fct_body
    (227) function_decl -> . type_specifier_ declarator LPAREN argument_declaration_list RPAREN
    (228) function_decl -> . type_specifier_ declarator LPAREN RPAREN
    (203) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (204) class_define_specifier -> . class_head LCPAREN RCPAREN
    (272) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (170) typedef_declarator -> . TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON
    (171) typedef_declarator -> . TYPEDEF type_specifier_ IDENTIFIER SEMICOLON
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (172) type_specifier -> . simple_type_name
    (173) type_specifier -> . complex_type_specifier
    (190) class_head -> . class_key IDENTIFIER base_spec
    (191) class_head -> . class_key IDENTIFIER
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (174) simple_type_name -> . CHAR
    (175) simple_type_name -> . SHORT
    (176) simple_type_name -> . INT
    (177) simple_type_name -> . LONG
    (178) simple_type_name -> . SIGNED
    (179) simple_type_name -> . UNSIGNED
    (180) simple_type_name -> . FLOAT
    (181) simple_type_name -> . DOUBLE
    (182) simple_type_name -> . VOID
    (183) simple_type_name -> . STRING
    (184) simple_type_name -> . AUTO
    (185) complex_type_specifier -> . class_key IDENTIFIER
    (186) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (187) complex_type_specifier -> . TYPE IDENTIFIER
    (188) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (201) class_key -> . CLASS
    (202) class_key -> . STRUCT
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMICOLON       shift and go to state 292
    THROW           shift and go to state 190
    CONST           shift and go to state 16
    ASM             shift and go to state 18
    TEMPLATE        shift and go to state 20
    TYPEDEF         shift and go to state 21
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38
    THIS            shift and go to state 134
    LPAREN          shift and go to state 105
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    for_init_statement             shift and go to state 395
    expression                     shift and go to state 291
    expression_statement           shift and go to state 396
    declaration_statement          shift and go to state 397
    declaration                    shift and go to state 302
    assignment_expression          shift and go to state 188
    throw_expression               shift and go to state 189
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    function_decl                  shift and go to state 12
    class_define_specifier         shift and go to state 13
    template_declaration           shift and go to state 14
    typedef_declarator             shift and go to state 15
    conditional_expression         shift and go to state 111
    unary_expression               shift and go to state 112
    type_specifier                 shift and go to state 17
    class_head                     shift and go to state 19
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    cast_expression                shift and go to state 118
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 24
    logical_AND_expression         shift and go to state 123
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    inclusive_OR_expression        shift and go to state 132
    literal                        shift and go to state 133
    exclusive_OR_expression        shift and go to state 135
    AND_expression                 shift and go to state 139
    equality_expression            shift and go to state 140
    relational_expression          shift and go to state 141
    shift_expression               shift and go to state 142
    additive_expression            shift and go to state 143
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145

state 365

    (242) jump_statement -> BREAK SEMICOLON .

    RCPAREN         reduce using rule 242 (jump_statement -> BREAK SEMICOLON .)
    IDENTIFIER      reduce using rule 242 (jump_statement -> BREAK SEMICOLON .)
    CASE            reduce using rule 242 (jump_statement -> BREAK SEMICOLON .)
    DEFAULT         reduce using rule 242 (jump_statement -> BREAK SEMICOLON .)
    SEMICOLON       reduce using rule 242 (jump_statement -> BREAK SEMICOLON .)
    LCPAREN         reduce using rule 242 (jump_statement -> BREAK SEMICOLON .)
    IF              reduce using rule 242 (jump_statement -> BREAK SEMICOLON .)
    SWITCH          reduce using rule 242 (jump_statement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 242 (jump_statement -> BREAK SEMICOLON .)
    DO              reduce using rule 242 (jump_statement -> BREAK SEMICOLON .)
    FOR             reduce using rule 242 (jump_statement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 242 (jump_statement -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 242 (jump_statement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 242 (jump_statement -> BREAK SEMICOLON .)
    GOTO            reduce using rule 242 (jump_statement -> BREAK SEMICOLON .)
    TRY             reduce using rule 242 (jump_statement -> BREAK SEMICOLON .)
    THROW           reduce using rule 242 (jump_statement -> BREAK SEMICOLON .)
    CONST           reduce using rule 242 (jump_statement -> BREAK SEMICOLON .)
    ASM             reduce using rule 242 (jump_statement -> BREAK SEMICOLON .)
    TEMPLATE        reduce using rule 242 (jump_statement -> BREAK SEMICOLON .)
    TYPEDEF         reduce using rule 242 (jump_statement -> BREAK SEMICOLON .)
    DPLUSOP         reduce using rule 242 (jump_statement -> BREAK SEMICOLON .)
    DMINUSOP        reduce using rule 242 (jump_statement -> BREAK SEMICOLON .)
    SIZEOF          reduce using rule 242 (jump_statement -> BREAK SEMICOLON .)
    PLUSOP          reduce using rule 242 (jump_statement -> BREAK SEMICOLON .)
    MINUSOP         reduce using rule 242 (jump_statement -> BREAK SEMICOLON .)
    NOTSYM          reduce using rule 242 (jump_statement -> BREAK SEMICOLON .)
    BNOP            reduce using rule 242 (jump_statement -> BREAK SEMICOLON .)
    MULTOP          reduce using rule 242 (jump_statement -> BREAK SEMICOLON .)
    BANDOP          reduce using rule 242 (jump_statement -> BREAK SEMICOLON .)
    NEW             reduce using rule 242 (jump_statement -> BREAK SEMICOLON .)
    DELETE          reduce using rule 242 (jump_statement -> BREAK SEMICOLON .)
    CHAR            reduce using rule 242 (jump_statement -> BREAK SEMICOLON .)
    SHORT           reduce using rule 242 (jump_statement -> BREAK SEMICOLON .)
    INT             reduce using rule 242 (jump_statement -> BREAK SEMICOLON .)
    LONG            reduce using rule 242 (jump_statement -> BREAK SEMICOLON .)
    SIGNED          reduce using rule 242 (jump_statement -> BREAK SEMICOLON .)
    UNSIGNED        reduce using rule 242 (jump_statement -> BREAK SEMICOLON .)
    FLOAT           reduce using rule 242 (jump_statement -> BREAK SEMICOLON .)
    DOUBLE          reduce using rule 242 (jump_statement -> BREAK SEMICOLON .)
    VOID            reduce using rule 242 (jump_statement -> BREAK SEMICOLON .)
    STRING          reduce using rule 242 (jump_statement -> BREAK SEMICOLON .)
    AUTO            reduce using rule 242 (jump_statement -> BREAK SEMICOLON .)
    TYPE            reduce using rule 242 (jump_statement -> BREAK SEMICOLON .)
    CLASS           reduce using rule 242 (jump_statement -> BREAK SEMICOLON .)
    STRUCT          reduce using rule 242 (jump_statement -> BREAK SEMICOLON .)
    THIS            reduce using rule 242 (jump_statement -> BREAK SEMICOLON .)
    LPAREN          reduce using rule 242 (jump_statement -> BREAK SEMICOLON .)
    DOUBLEBNOP      reduce using rule 242 (jump_statement -> BREAK SEMICOLON .)
    STRING_L        reduce using rule 242 (jump_statement -> BREAK SEMICOLON .)
    NUMBER          reduce using rule 242 (jump_statement -> BREAK SEMICOLON .)
    SCHAR           reduce using rule 242 (jump_statement -> BREAK SEMICOLON .)
    ELSE            reduce using rule 242 (jump_statement -> BREAK SEMICOLON .)


state 366

    (243) jump_statement -> CONTINUE SEMICOLON .

    RCPAREN         reduce using rule 243 (jump_statement -> CONTINUE SEMICOLON .)
    IDENTIFIER      reduce using rule 243 (jump_statement -> CONTINUE SEMICOLON .)
    CASE            reduce using rule 243 (jump_statement -> CONTINUE SEMICOLON .)
    DEFAULT         reduce using rule 243 (jump_statement -> CONTINUE SEMICOLON .)
    SEMICOLON       reduce using rule 243 (jump_statement -> CONTINUE SEMICOLON .)
    LCPAREN         reduce using rule 243 (jump_statement -> CONTINUE SEMICOLON .)
    IF              reduce using rule 243 (jump_statement -> CONTINUE SEMICOLON .)
    SWITCH          reduce using rule 243 (jump_statement -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 243 (jump_statement -> CONTINUE SEMICOLON .)
    DO              reduce using rule 243 (jump_statement -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 243 (jump_statement -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 243 (jump_statement -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 243 (jump_statement -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 243 (jump_statement -> CONTINUE SEMICOLON .)
    GOTO            reduce using rule 243 (jump_statement -> CONTINUE SEMICOLON .)
    TRY             reduce using rule 243 (jump_statement -> CONTINUE SEMICOLON .)
    THROW           reduce using rule 243 (jump_statement -> CONTINUE SEMICOLON .)
    CONST           reduce using rule 243 (jump_statement -> CONTINUE SEMICOLON .)
    ASM             reduce using rule 243 (jump_statement -> CONTINUE SEMICOLON .)
    TEMPLATE        reduce using rule 243 (jump_statement -> CONTINUE SEMICOLON .)
    TYPEDEF         reduce using rule 243 (jump_statement -> CONTINUE SEMICOLON .)
    DPLUSOP         reduce using rule 243 (jump_statement -> CONTINUE SEMICOLON .)
    DMINUSOP        reduce using rule 243 (jump_statement -> CONTINUE SEMICOLON .)
    SIZEOF          reduce using rule 243 (jump_statement -> CONTINUE SEMICOLON .)
    PLUSOP          reduce using rule 243 (jump_statement -> CONTINUE SEMICOLON .)
    MINUSOP         reduce using rule 243 (jump_statement -> CONTINUE SEMICOLON .)
    NOTSYM          reduce using rule 243 (jump_statement -> CONTINUE SEMICOLON .)
    BNOP            reduce using rule 243 (jump_statement -> CONTINUE SEMICOLON .)
    MULTOP          reduce using rule 243 (jump_statement -> CONTINUE SEMICOLON .)
    BANDOP          reduce using rule 243 (jump_statement -> CONTINUE SEMICOLON .)
    NEW             reduce using rule 243 (jump_statement -> CONTINUE SEMICOLON .)
    DELETE          reduce using rule 243 (jump_statement -> CONTINUE SEMICOLON .)
    CHAR            reduce using rule 243 (jump_statement -> CONTINUE SEMICOLON .)
    SHORT           reduce using rule 243 (jump_statement -> CONTINUE SEMICOLON .)
    INT             reduce using rule 243 (jump_statement -> CONTINUE SEMICOLON .)
    LONG            reduce using rule 243 (jump_statement -> CONTINUE SEMICOLON .)
    SIGNED          reduce using rule 243 (jump_statement -> CONTINUE SEMICOLON .)
    UNSIGNED        reduce using rule 243 (jump_statement -> CONTINUE SEMICOLON .)
    FLOAT           reduce using rule 243 (jump_statement -> CONTINUE SEMICOLON .)
    DOUBLE          reduce using rule 243 (jump_statement -> CONTINUE SEMICOLON .)
    VOID            reduce using rule 243 (jump_statement -> CONTINUE SEMICOLON .)
    STRING          reduce using rule 243 (jump_statement -> CONTINUE SEMICOLON .)
    AUTO            reduce using rule 243 (jump_statement -> CONTINUE SEMICOLON .)
    TYPE            reduce using rule 243 (jump_statement -> CONTINUE SEMICOLON .)
    CLASS           reduce using rule 243 (jump_statement -> CONTINUE SEMICOLON .)
    STRUCT          reduce using rule 243 (jump_statement -> CONTINUE SEMICOLON .)
    THIS            reduce using rule 243 (jump_statement -> CONTINUE SEMICOLON .)
    LPAREN          reduce using rule 243 (jump_statement -> CONTINUE SEMICOLON .)
    DOUBLEBNOP      reduce using rule 243 (jump_statement -> CONTINUE SEMICOLON .)
    STRING_L        reduce using rule 243 (jump_statement -> CONTINUE SEMICOLON .)
    NUMBER          reduce using rule 243 (jump_statement -> CONTINUE SEMICOLON .)
    SCHAR           reduce using rule 243 (jump_statement -> CONTINUE SEMICOLON .)
    ELSE            reduce using rule 243 (jump_statement -> CONTINUE SEMICOLON .)


state 367

    (244) jump_statement -> RETURN expression . SEMICOLON
    (48) expression -> expression . COMMA assignment_expression

    SEMICOLON       shift and go to state 398
    COMMA           shift and go to state 273


state 368

    (245) jump_statement -> RETURN SEMICOLON .

    RCPAREN         reduce using rule 245 (jump_statement -> RETURN SEMICOLON .)
    IDENTIFIER      reduce using rule 245 (jump_statement -> RETURN SEMICOLON .)
    CASE            reduce using rule 245 (jump_statement -> RETURN SEMICOLON .)
    DEFAULT         reduce using rule 245 (jump_statement -> RETURN SEMICOLON .)
    SEMICOLON       reduce using rule 245 (jump_statement -> RETURN SEMICOLON .)
    LCPAREN         reduce using rule 245 (jump_statement -> RETURN SEMICOLON .)
    IF              reduce using rule 245 (jump_statement -> RETURN SEMICOLON .)
    SWITCH          reduce using rule 245 (jump_statement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 245 (jump_statement -> RETURN SEMICOLON .)
    DO              reduce using rule 245 (jump_statement -> RETURN SEMICOLON .)
    FOR             reduce using rule 245 (jump_statement -> RETURN SEMICOLON .)
    BREAK           reduce using rule 245 (jump_statement -> RETURN SEMICOLON .)
    CONTINUE        reduce using rule 245 (jump_statement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 245 (jump_statement -> RETURN SEMICOLON .)
    GOTO            reduce using rule 245 (jump_statement -> RETURN SEMICOLON .)
    TRY             reduce using rule 245 (jump_statement -> RETURN SEMICOLON .)
    THROW           reduce using rule 245 (jump_statement -> RETURN SEMICOLON .)
    CONST           reduce using rule 245 (jump_statement -> RETURN SEMICOLON .)
    ASM             reduce using rule 245 (jump_statement -> RETURN SEMICOLON .)
    TEMPLATE        reduce using rule 245 (jump_statement -> RETURN SEMICOLON .)
    TYPEDEF         reduce using rule 245 (jump_statement -> RETURN SEMICOLON .)
    DPLUSOP         reduce using rule 245 (jump_statement -> RETURN SEMICOLON .)
    DMINUSOP        reduce using rule 245 (jump_statement -> RETURN SEMICOLON .)
    SIZEOF          reduce using rule 245 (jump_statement -> RETURN SEMICOLON .)
    PLUSOP          reduce using rule 245 (jump_statement -> RETURN SEMICOLON .)
    MINUSOP         reduce using rule 245 (jump_statement -> RETURN SEMICOLON .)
    NOTSYM          reduce using rule 245 (jump_statement -> RETURN SEMICOLON .)
    BNOP            reduce using rule 245 (jump_statement -> RETURN SEMICOLON .)
    MULTOP          reduce using rule 245 (jump_statement -> RETURN SEMICOLON .)
    BANDOP          reduce using rule 245 (jump_statement -> RETURN SEMICOLON .)
    NEW             reduce using rule 245 (jump_statement -> RETURN SEMICOLON .)
    DELETE          reduce using rule 245 (jump_statement -> RETURN SEMICOLON .)
    CHAR            reduce using rule 245 (jump_statement -> RETURN SEMICOLON .)
    SHORT           reduce using rule 245 (jump_statement -> RETURN SEMICOLON .)
    INT             reduce using rule 245 (jump_statement -> RETURN SEMICOLON .)
    LONG            reduce using rule 245 (jump_statement -> RETURN SEMICOLON .)
    SIGNED          reduce using rule 245 (jump_statement -> RETURN SEMICOLON .)
    UNSIGNED        reduce using rule 245 (jump_statement -> RETURN SEMICOLON .)
    FLOAT           reduce using rule 245 (jump_statement -> RETURN SEMICOLON .)
    DOUBLE          reduce using rule 245 (jump_statement -> RETURN SEMICOLON .)
    VOID            reduce using rule 245 (jump_statement -> RETURN SEMICOLON .)
    STRING          reduce using rule 245 (jump_statement -> RETURN SEMICOLON .)
    AUTO            reduce using rule 245 (jump_statement -> RETURN SEMICOLON .)
    TYPE            reduce using rule 245 (jump_statement -> RETURN SEMICOLON .)
    CLASS           reduce using rule 245 (jump_statement -> RETURN SEMICOLON .)
    STRUCT          reduce using rule 245 (jump_statement -> RETURN SEMICOLON .)
    THIS            reduce using rule 245 (jump_statement -> RETURN SEMICOLON .)
    LPAREN          reduce using rule 245 (jump_statement -> RETURN SEMICOLON .)
    DOUBLEBNOP      reduce using rule 245 (jump_statement -> RETURN SEMICOLON .)
    STRING_L        reduce using rule 245 (jump_statement -> RETURN SEMICOLON .)
    NUMBER          reduce using rule 245 (jump_statement -> RETURN SEMICOLON .)
    SCHAR           reduce using rule 245 (jump_statement -> RETURN SEMICOLON .)
    ELSE            reduce using rule 245 (jump_statement -> RETURN SEMICOLON .)


state 369

    (246) jump_statement -> GOTO IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 399


state 370

    (250) try_block -> TRY compound_statement . CATCH compound_statement

    CATCH           shift and go to state 400


state 371

    (14) conditional_expression -> logical_OR_expression QUESMARK expression COLON . conditional_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR

    LPAREN          shift and go to state 150
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    THIS            shift and go to state 134
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    logical_OR_expression          shift and go to state 113
    conditional_expression         shift and go to state 401
    logical_AND_expression         shift and go to state 123
    inclusive_OR_expression        shift and go to state 132
    exclusive_OR_expression        shift and go to state 135
    AND_expression                 shift and go to state 139
    equality_expression            shift and go to state 140
    relational_expression          shift and go to state 141
    shift_expression               shift and go to state 142
    additive_expression            shift and go to state 143
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145
    cast_expression                shift and go to state 118
    unary_expression               shift and go to state 149
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    literal                        shift and go to state 133

state 372

    (92) postfix_expression -> postfix_expression LSPAREN expression RSPAREN .

    LSPAREN         reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    LPAREN          reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    DOT             reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    ARROW           reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    DPLUSOP         reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    DMINUSOP        reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    LTEMPLATE       reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    EQUAL           reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    MULTEQOP        reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    DIVEQOP         reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    MODEQOP         reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    PLUSEQOP        reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    MINUSEQOP       reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    LSHIFTEQOP      reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    RSHIFTEQOP      reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    BANDEQOP        reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    BOREQOP         reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    DOTSTAR         reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    ARROWSTAR       reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    MULTOP          reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    DIVOP           reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    MODOP           reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    PLUSOP          reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    MINUSOP         reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    LSHIFT          reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    RSHIFT          reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    LTCOMP          reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    GTCOMP          reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    LTECOMP         reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    GTECOMP         reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    EQCOMP          reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    NEQCOMP         reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    BANDOP          reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    XOROP           reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    OROP            reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    ANDOP           reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    QUESMARK        reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    RPAREN          reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    COMMA           reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    RSPAREN         reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    SEMICOLON       reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    RCPAREN         reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    COLON           reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    RTEMPLATE       reduce using rule 92 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)


state 373

    (93) postfix_expression -> postfix_expression LPAREN expression_list RPAREN .

    LSPAREN         reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    LPAREN          reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    DOT             reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    ARROW           reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    DPLUSOP         reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    DMINUSOP        reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    LTEMPLATE       reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    EQUAL           reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    MULTEQOP        reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    DIVEQOP         reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    MODEQOP         reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    PLUSEQOP        reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    MINUSEQOP       reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    LSHIFTEQOP      reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    RSHIFTEQOP      reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    BANDEQOP        reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    BOREQOP         reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    DOTSTAR         reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    ARROWSTAR       reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    MULTOP          reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    DIVOP           reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    MODOP           reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    PLUSOP          reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    MINUSOP         reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    LSHIFT          reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    RSHIFT          reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    LTCOMP          reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    GTCOMP          reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    LTECOMP         reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    GTECOMP         reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    EQCOMP          reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    NEQCOMP         reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    BANDOP          reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    XOROP           reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    OROP            reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    ANDOP           reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    QUESMARK        reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    RPAREN          reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    RSPAREN         reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    SEMICOLON       reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    RCPAREN         reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    COLON           reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    RTEMPLATE       reduce using rule 93 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)


state 374

    (94) postfix_expression -> postfix_expression template_class_name LPAREN expression_list . RPAREN
    (289) expression_list -> expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 402
    COMMA           shift and go to state 196


state 375

    (69) unary_expression -> SIZEOF LPAREN type_name RPAREN .

    EQUAL           reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MULTEQOP        reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    DIVEQOP         reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MODEQOP         reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    PLUSEQOP        reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MINUSEQOP       reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LSHIFTEQOP      reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RSHIFTEQOP      reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    BANDEQOP        reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    BOREQOP         reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    DOTSTAR         reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    ARROWSTAR       reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MULTOP          reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    DIVOP           reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MODOP           reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    PLUSOP          reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MINUSOP         reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LSHIFT          reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RSHIFT          reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LTCOMP          reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    GTCOMP          reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LTECOMP         reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    GTECOMP         reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    EQCOMP          reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    NEQCOMP         reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    BANDOP          reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    XOROP           reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    OROP            reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    ANDOP           reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    QUESMARK        reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RPAREN          reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    COMMA           reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RSPAREN         reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    SEMICOLON       reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RCPAREN         reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    COLON           reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RTEMPLATE       reduce using rule 69 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)


state 376

    (83) new_initializer -> LPAREN initializer_list . RPAREN
    (284) initializer_list -> initializer_list . COMMA assignment_expression

    RPAREN          shift and go to state 403
    COMMA           shift and go to state 404


state 377

    (84) new_initializer -> LPAREN RPAREN .

    EQUAL           reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    MULTEQOP        reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    DIVEQOP         reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    MODEQOP         reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    PLUSEQOP        reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    MINUSEQOP       reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    LSHIFTEQOP      reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    RSHIFTEQOP      reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    BANDEQOP        reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    BOREQOP         reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    DOTSTAR         reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    ARROWSTAR       reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    MULTOP          reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    DIVOP           reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    MODOP           reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    PLUSOP          reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    MINUSOP         reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    LSHIFT          reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    RSHIFT          reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    LTCOMP          reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    GTCOMP          reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    LTECOMP         reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    GTECOMP         reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    EQCOMP          reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    NEQCOMP         reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    BANDOP          reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    XOROP           reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    OROP            reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    ANDOP           reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    QUESMARK        reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    RPAREN          reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    COMMA           reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    RSPAREN         reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    SEMICOLON       reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    RCPAREN         reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    COLON           reduce using rule 84 (new_initializer -> LPAREN RPAREN .)
    RTEMPLATE       reduce using rule 84 (new_initializer -> LPAREN RPAREN .)


state 378

    (75) allocation_expression -> NEW LPAREN type_name RPAREN . new_initializer
    (76) allocation_expression -> NEW LPAREN type_name RPAREN .
    (83) new_initializer -> . LPAREN initializer_list RPAREN
    (84) new_initializer -> . LPAREN RPAREN

    EQUAL           reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    MULTEQOP        reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    DIVEQOP         reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    MODEQOP         reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    PLUSEQOP        reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    MINUSEQOP       reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    LSHIFTEQOP      reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    RSHIFTEQOP      reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    BANDEQOP        reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    BOREQOP         reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    DOTSTAR         reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    ARROWSTAR       reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    MULTOP          reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    DIVOP           reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    MODOP           reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    PLUSOP          reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    MINUSOP         reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    LSHIFT          reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    RSHIFT          reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    LTCOMP          reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    GTCOMP          reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    LTECOMP         reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    GTECOMP         reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    EQCOMP          reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    NEQCOMP         reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    BANDOP          reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    XOROP           reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    OROP            reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    ANDOP           reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    QUESMARK        reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    RPAREN          reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    COMMA           reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    RSPAREN         reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    SEMICOLON       reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    RCPAREN         reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    COLON           reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    RTEMPLATE       reduce using rule 76 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    LPAREN          shift and go to state 318

    new_initializer                shift and go to state 405

state 379

    (79) new_declarator -> new_declarator MULTOP .

    MULTOP          reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    LSPAREN         reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    LPAREN          reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    EQUAL           reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    MULTEQOP        reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    DIVEQOP         reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    MODEQOP         reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    PLUSEQOP        reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    MINUSEQOP       reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    LSHIFTEQOP      reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    RSHIFTEQOP      reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    BANDEQOP        reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    BOREQOP         reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    DOTSTAR         reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    ARROWSTAR       reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    DIVOP           reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    MODOP           reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    PLUSOP          reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    MINUSOP         reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    LSHIFT          reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    RSHIFT          reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    LTCOMP          reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    GTCOMP          reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    LTECOMP         reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    GTECOMP         reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    EQCOMP          reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    NEQCOMP         reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    BANDOP          reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    XOROP           reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    OROP            reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    ANDOP           reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    QUESMARK        reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    RPAREN          reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    COMMA           reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    RSPAREN         reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    SEMICOLON       reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    RCPAREN         reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    COLON           reduce using rule 79 (new_declarator -> new_declarator MULTOP .)
    RTEMPLATE       reduce using rule 79 (new_declarator -> new_declarator MULTOP .)


state 380

    (81) new_declarator -> new_declarator LSPAREN . expression RSPAREN
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    THROW           shift and go to state 190
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    THIS            shift and go to state 134
    LPAREN          shift and go to state 105
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    expression                     shift and go to state 406
    assignment_expression          shift and go to state 188
    throw_expression               shift and go to state 189
    conditional_expression         shift and go to state 111
    unary_expression               shift and go to state 112
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    cast_expression                shift and go to state 118
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    logical_AND_expression         shift and go to state 123
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    inclusive_OR_expression        shift and go to state 132
    literal                        shift and go to state 133
    exclusive_OR_expression        shift and go to state 135
    AND_expression                 shift and go to state 139
    equality_expression            shift and go to state 140
    relational_expression          shift and go to state 141
    shift_expression               shift and go to state 142
    additive_expression            shift and go to state 143
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145

state 381

    (82) new_declarator -> LSPAREN expression . RSPAREN
    (48) expression -> expression . COMMA assignment_expression

    RSPAREN         shift and go to state 407
    COMMA           shift and go to state 273


state 382

    (285) initializer_list -> LCPAREN initializer_list RCPAREN .

    RCPAREN         reduce using rule 285 (initializer_list -> LCPAREN initializer_list RCPAREN .)
    COMMA           reduce using rule 285 (initializer_list -> LCPAREN initializer_list RCPAREN .)
    RPAREN          reduce using rule 285 (initializer_list -> LCPAREN initializer_list RCPAREN .)


state 383

    (286) initializer_list -> LCPAREN initializer_list COMMA . RCPAREN
    (284) initializer_list -> initializer_list COMMA . assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RCPAREN         shift and go to state 408
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    THIS            shift and go to state 134
    LPAREN          shift and go to state 105
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    assignment_expression          shift and go to state 385
    conditional_expression         shift and go to state 111
    unary_expression               shift and go to state 112
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    cast_expression                shift and go to state 118
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    logical_AND_expression         shift and go to state 123
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    inclusive_OR_expression        shift and go to state 132
    literal                        shift and go to state 133
    exclusive_OR_expression        shift and go to state 135
    AND_expression                 shift and go to state 139
    equality_expression            shift and go to state 140
    relational_expression          shift and go to state 141
    shift_expression               shift and go to state 142
    additive_expression            shift and go to state 143
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145

state 384

    (281) initializer -> EQUAL LCPAREN initializer_list COMMA RCPAREN .

    SEMICOLON       reduce using rule 281 (initializer -> EQUAL LCPAREN initializer_list COMMA RCPAREN .)
    COMMA           reduce using rule 281 (initializer -> EQUAL LCPAREN initializer_list COMMA RCPAREN .)


state 385

    (284) initializer_list -> initializer_list COMMA assignment_expression .

    RCPAREN         reduce using rule 284 (initializer_list -> initializer_list COMMA assignment_expression .)
    COMMA           reduce using rule 284 (initializer_list -> initializer_list COMMA assignment_expression .)
    RPAREN          reduce using rule 284 (initializer_list -> initializer_list COMMA assignment_expression .)


state 386

    (225) function_definition -> type_specifier_ declarator LPAREN argument_declaration_list RPAREN . fct_body
    (229) fct_body -> . compound_statement
    (230) compound_statement -> . LCPAREN statement_list RCPAREN
    (231) compound_statement -> . LCPAREN RCPAREN

    LCPAREN         shift and go to state 194

    fct_body                       shift and go to state 276
    compound_statement             shift and go to state 193

state 387

    (200) base_specifier -> access_specifier class_key IDENTIFIER template_class_name .

    COMMA           reduce using rule 200 (base_specifier -> access_specifier class_key IDENTIFIER template_class_name .)
    LCPAREN         reduce using rule 200 (base_specifier -> access_specifier class_key IDENTIFIER template_class_name .)


state 388

    (251) labeled_statement -> IDENTIFIER COLON statement .

    RCPAREN         reduce using rule 251 (labeled_statement -> IDENTIFIER COLON statement .)
    IDENTIFIER      reduce using rule 251 (labeled_statement -> IDENTIFIER COLON statement .)
    CASE            reduce using rule 251 (labeled_statement -> IDENTIFIER COLON statement .)
    DEFAULT         reduce using rule 251 (labeled_statement -> IDENTIFIER COLON statement .)
    SEMICOLON       reduce using rule 251 (labeled_statement -> IDENTIFIER COLON statement .)
    LCPAREN         reduce using rule 251 (labeled_statement -> IDENTIFIER COLON statement .)
    IF              reduce using rule 251 (labeled_statement -> IDENTIFIER COLON statement .)
    SWITCH          reduce using rule 251 (labeled_statement -> IDENTIFIER COLON statement .)
    WHILE           reduce using rule 251 (labeled_statement -> IDENTIFIER COLON statement .)
    DO              reduce using rule 251 (labeled_statement -> IDENTIFIER COLON statement .)
    FOR             reduce using rule 251 (labeled_statement -> IDENTIFIER COLON statement .)
    BREAK           reduce using rule 251 (labeled_statement -> IDENTIFIER COLON statement .)
    CONTINUE        reduce using rule 251 (labeled_statement -> IDENTIFIER COLON statement .)
    RETURN          reduce using rule 251 (labeled_statement -> IDENTIFIER COLON statement .)
    GOTO            reduce using rule 251 (labeled_statement -> IDENTIFIER COLON statement .)
    TRY             reduce using rule 251 (labeled_statement -> IDENTIFIER COLON statement .)
    THROW           reduce using rule 251 (labeled_statement -> IDENTIFIER COLON statement .)
    CONST           reduce using rule 251 (labeled_statement -> IDENTIFIER COLON statement .)
    ASM             reduce using rule 251 (labeled_statement -> IDENTIFIER COLON statement .)
    TEMPLATE        reduce using rule 251 (labeled_statement -> IDENTIFIER COLON statement .)
    TYPEDEF         reduce using rule 251 (labeled_statement -> IDENTIFIER COLON statement .)
    DPLUSOP         reduce using rule 251 (labeled_statement -> IDENTIFIER COLON statement .)
    DMINUSOP        reduce using rule 251 (labeled_statement -> IDENTIFIER COLON statement .)
    SIZEOF          reduce using rule 251 (labeled_statement -> IDENTIFIER COLON statement .)
    PLUSOP          reduce using rule 251 (labeled_statement -> IDENTIFIER COLON statement .)
    MINUSOP         reduce using rule 251 (labeled_statement -> IDENTIFIER COLON statement .)
    NOTSYM          reduce using rule 251 (labeled_statement -> IDENTIFIER COLON statement .)
    BNOP            reduce using rule 251 (labeled_statement -> IDENTIFIER COLON statement .)
    MULTOP          reduce using rule 251 (labeled_statement -> IDENTIFIER COLON statement .)
    BANDOP          reduce using rule 251 (labeled_statement -> IDENTIFIER COLON statement .)
    NEW             reduce using rule 251 (labeled_statement -> IDENTIFIER COLON statement .)
    DELETE          reduce using rule 251 (labeled_statement -> IDENTIFIER COLON statement .)
    CHAR            reduce using rule 251 (labeled_statement -> IDENTIFIER COLON statement .)
    SHORT           reduce using rule 251 (labeled_statement -> IDENTIFIER COLON statement .)
    INT             reduce using rule 251 (labeled_statement -> IDENTIFIER COLON statement .)
    LONG            reduce using rule 251 (labeled_statement -> IDENTIFIER COLON statement .)
    SIGNED          reduce using rule 251 (labeled_statement -> IDENTIFIER COLON statement .)
    UNSIGNED        reduce using rule 251 (labeled_statement -> IDENTIFIER COLON statement .)
    FLOAT           reduce using rule 251 (labeled_statement -> IDENTIFIER COLON statement .)
    DOUBLE          reduce using rule 251 (labeled_statement -> IDENTIFIER COLON statement .)
    VOID            reduce using rule 251 (labeled_statement -> IDENTIFIER COLON statement .)
    STRING          reduce using rule 251 (labeled_statement -> IDENTIFIER COLON statement .)
    AUTO            reduce using rule 251 (labeled_statement -> IDENTIFIER COLON statement .)
    TYPE            reduce using rule 251 (labeled_statement -> IDENTIFIER COLON statement .)
    CLASS           reduce using rule 251 (labeled_statement -> IDENTIFIER COLON statement .)
    STRUCT          reduce using rule 251 (labeled_statement -> IDENTIFIER COLON statement .)
    THIS            reduce using rule 251 (labeled_statement -> IDENTIFIER COLON statement .)
    LPAREN          reduce using rule 251 (labeled_statement -> IDENTIFIER COLON statement .)
    DOUBLEBNOP      reduce using rule 251 (labeled_statement -> IDENTIFIER COLON statement .)
    STRING_L        reduce using rule 251 (labeled_statement -> IDENTIFIER COLON statement .)
    NUMBER          reduce using rule 251 (labeled_statement -> IDENTIFIER COLON statement .)
    SCHAR           reduce using rule 251 (labeled_statement -> IDENTIFIER COLON statement .)
    ELSE            reduce using rule 251 (labeled_statement -> IDENTIFIER COLON statement .)


state 389

    (252) labeled_statement -> CASE constant_expression COLON . statement
    (234) statement -> . labeled_statement
    (235) statement -> . expression_statement
    (236) statement -> . compound_statement
    (237) statement -> . selection_statement
    (238) statement -> . iteration_statement
    (239) statement -> . jump_statement
    (240) statement -> . declaration_statement
    (241) statement -> . try_block
    (251) labeled_statement -> . IDENTIFIER COLON statement
    (252) labeled_statement -> . CASE constant_expression COLON statement
    (253) labeled_statement -> . DEFAULT COLON statement
    (262) expression_statement -> . expression SEMICOLON
    (263) expression_statement -> . SEMICOLON
    (230) compound_statement -> . LCPAREN statement_list RCPAREN
    (231) compound_statement -> . LCPAREN RCPAREN
    (247) selection_statement -> . IF LPAREN expression RPAREN statement
    (248) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (249) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (254) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (255) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (256) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (257) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (258) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (259) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (242) jump_statement -> . BREAK SEMICOLON
    (243) jump_statement -> . CONTINUE SEMICOLON
    (244) jump_statement -> . RETURN expression SEMICOLON
    (245) jump_statement -> . RETURN SEMICOLON
    (246) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (264) declaration_statement -> . declaration
    (250) try_block -> . TRY compound_statement CATCH compound_statement
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (265) declaration -> . type_specifier_ declarator_list SEMICOLON
    (266) declaration -> . asm_declaration
    (267) declaration -> . function_definition
    (268) declaration -> . function_decl
    (269) declaration -> . class_define_specifier SEMICOLON
    (270) declaration -> . template_declaration
    (271) declaration -> . typedef_declarator
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (168) type_specifier_ -> . CONST type_specifier
    (169) type_specifier_ -> . type_specifier
    (287) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (225) function_definition -> . type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body
    (226) function_definition -> . type_specifier_ declarator LPAREN RPAREN fct_body
    (227) function_decl -> . type_specifier_ declarator LPAREN argument_declaration_list RPAREN
    (228) function_decl -> . type_specifier_ declarator LPAREN RPAREN
    (203) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (204) class_define_specifier -> . class_head LCPAREN RCPAREN
    (272) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (170) typedef_declarator -> . TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON
    (171) typedef_declarator -> . TYPEDEF type_specifier_ IDENTIFIER SEMICOLON
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (172) type_specifier -> . simple_type_name
    (173) type_specifier -> . complex_type_specifier
    (190) class_head -> . class_key IDENTIFIER base_spec
    (191) class_head -> . class_key IDENTIFIER
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (174) simple_type_name -> . CHAR
    (175) simple_type_name -> . SHORT
    (176) simple_type_name -> . INT
    (177) simple_type_name -> . LONG
    (178) simple_type_name -> . SIGNED
    (179) simple_type_name -> . UNSIGNED
    (180) simple_type_name -> . FLOAT
    (181) simple_type_name -> . DOUBLE
    (182) simple_type_name -> . VOID
    (183) simple_type_name -> . STRING
    (184) simple_type_name -> . AUTO
    (185) complex_type_specifier -> . class_key IDENTIFIER
    (186) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (187) complex_type_specifier -> . TYPE IDENTIFIER
    (188) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (201) class_key -> . CLASS
    (202) class_key -> . STRUCT
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 288
    CASE            shift and go to state 289
    DEFAULT         shift and go to state 290
    SEMICOLON       shift and go to state 292
    LCPAREN         shift and go to state 194
    IF              shift and go to state 293
    SWITCH          shift and go to state 294
    WHILE           shift and go to state 295
    DO              shift and go to state 296
    FOR             shift and go to state 297
    BREAK           shift and go to state 298
    CONTINUE        shift and go to state 299
    RETURN          shift and go to state 300
    GOTO            shift and go to state 301
    TRY             shift and go to state 303
    THROW           shift and go to state 190
    CONST           shift and go to state 16
    ASM             shift and go to state 18
    TEMPLATE        shift and go to state 20
    TYPEDEF         shift and go to state 21
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38
    THIS            shift and go to state 134
    LPAREN          shift and go to state 105
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    statement                      shift and go to state 409
    labeled_statement              shift and go to state 280
    expression_statement           shift and go to state 281
    compound_statement             shift and go to state 282
    selection_statement            shift and go to state 283
    iteration_statement            shift and go to state 284
    jump_statement                 shift and go to state 285
    declaration_statement          shift and go to state 286
    try_block                      shift and go to state 287
    expression                     shift and go to state 291
    declaration                    shift and go to state 302
    assignment_expression          shift and go to state 188
    throw_expression               shift and go to state 189
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    function_decl                  shift and go to state 12
    class_define_specifier         shift and go to state 13
    template_declaration           shift and go to state 14
    typedef_declarator             shift and go to state 15
    conditional_expression         shift and go to state 111
    unary_expression               shift and go to state 112
    type_specifier                 shift and go to state 17
    class_head                     shift and go to state 19
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    cast_expression                shift and go to state 118
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 24
    logical_AND_expression         shift and go to state 123
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    inclusive_OR_expression        shift and go to state 132
    literal                        shift and go to state 133
    exclusive_OR_expression        shift and go to state 135
    AND_expression                 shift and go to state 139
    equality_expression            shift and go to state 140
    relational_expression          shift and go to state 141
    shift_expression               shift and go to state 142
    additive_expression            shift and go to state 143
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145

state 390

    (253) labeled_statement -> DEFAULT COLON statement .

    RCPAREN         reduce using rule 253 (labeled_statement -> DEFAULT COLON statement .)
    IDENTIFIER      reduce using rule 253 (labeled_statement -> DEFAULT COLON statement .)
    CASE            reduce using rule 253 (labeled_statement -> DEFAULT COLON statement .)
    DEFAULT         reduce using rule 253 (labeled_statement -> DEFAULT COLON statement .)
    SEMICOLON       reduce using rule 253 (labeled_statement -> DEFAULT COLON statement .)
    LCPAREN         reduce using rule 253 (labeled_statement -> DEFAULT COLON statement .)
    IF              reduce using rule 253 (labeled_statement -> DEFAULT COLON statement .)
    SWITCH          reduce using rule 253 (labeled_statement -> DEFAULT COLON statement .)
    WHILE           reduce using rule 253 (labeled_statement -> DEFAULT COLON statement .)
    DO              reduce using rule 253 (labeled_statement -> DEFAULT COLON statement .)
    FOR             reduce using rule 253 (labeled_statement -> DEFAULT COLON statement .)
    BREAK           reduce using rule 253 (labeled_statement -> DEFAULT COLON statement .)
    CONTINUE        reduce using rule 253 (labeled_statement -> DEFAULT COLON statement .)
    RETURN          reduce using rule 253 (labeled_statement -> DEFAULT COLON statement .)
    GOTO            reduce using rule 253 (labeled_statement -> DEFAULT COLON statement .)
    TRY             reduce using rule 253 (labeled_statement -> DEFAULT COLON statement .)
    THROW           reduce using rule 253 (labeled_statement -> DEFAULT COLON statement .)
    CONST           reduce using rule 253 (labeled_statement -> DEFAULT COLON statement .)
    ASM             reduce using rule 253 (labeled_statement -> DEFAULT COLON statement .)
    TEMPLATE        reduce using rule 253 (labeled_statement -> DEFAULT COLON statement .)
    TYPEDEF         reduce using rule 253 (labeled_statement -> DEFAULT COLON statement .)
    DPLUSOP         reduce using rule 253 (labeled_statement -> DEFAULT COLON statement .)
    DMINUSOP        reduce using rule 253 (labeled_statement -> DEFAULT COLON statement .)
    SIZEOF          reduce using rule 253 (labeled_statement -> DEFAULT COLON statement .)
    PLUSOP          reduce using rule 253 (labeled_statement -> DEFAULT COLON statement .)
    MINUSOP         reduce using rule 253 (labeled_statement -> DEFAULT COLON statement .)
    NOTSYM          reduce using rule 253 (labeled_statement -> DEFAULT COLON statement .)
    BNOP            reduce using rule 253 (labeled_statement -> DEFAULT COLON statement .)
    MULTOP          reduce using rule 253 (labeled_statement -> DEFAULT COLON statement .)
    BANDOP          reduce using rule 253 (labeled_statement -> DEFAULT COLON statement .)
    NEW             reduce using rule 253 (labeled_statement -> DEFAULT COLON statement .)
    DELETE          reduce using rule 253 (labeled_statement -> DEFAULT COLON statement .)
    CHAR            reduce using rule 253 (labeled_statement -> DEFAULT COLON statement .)
    SHORT           reduce using rule 253 (labeled_statement -> DEFAULT COLON statement .)
    INT             reduce using rule 253 (labeled_statement -> DEFAULT COLON statement .)
    LONG            reduce using rule 253 (labeled_statement -> DEFAULT COLON statement .)
    SIGNED          reduce using rule 253 (labeled_statement -> DEFAULT COLON statement .)
    UNSIGNED        reduce using rule 253 (labeled_statement -> DEFAULT COLON statement .)
    FLOAT           reduce using rule 253 (labeled_statement -> DEFAULT COLON statement .)
    DOUBLE          reduce using rule 253 (labeled_statement -> DEFAULT COLON statement .)
    VOID            reduce using rule 253 (labeled_statement -> DEFAULT COLON statement .)
    STRING          reduce using rule 253 (labeled_statement -> DEFAULT COLON statement .)
    AUTO            reduce using rule 253 (labeled_statement -> DEFAULT COLON statement .)
    TYPE            reduce using rule 253 (labeled_statement -> DEFAULT COLON statement .)
    CLASS           reduce using rule 253 (labeled_statement -> DEFAULT COLON statement .)
    STRUCT          reduce using rule 253 (labeled_statement -> DEFAULT COLON statement .)
    THIS            reduce using rule 253 (labeled_statement -> DEFAULT COLON statement .)
    LPAREN          reduce using rule 253 (labeled_statement -> DEFAULT COLON statement .)
    DOUBLEBNOP      reduce using rule 253 (labeled_statement -> DEFAULT COLON statement .)
    STRING_L        reduce using rule 253 (labeled_statement -> DEFAULT COLON statement .)
    NUMBER          reduce using rule 253 (labeled_statement -> DEFAULT COLON statement .)
    SCHAR           reduce using rule 253 (labeled_statement -> DEFAULT COLON statement .)
    ELSE            reduce using rule 253 (labeled_statement -> DEFAULT COLON statement .)


state 391

    (247) selection_statement -> IF LPAREN expression . RPAREN statement
    (248) selection_statement -> IF LPAREN expression . RPAREN statement ELSE statement
    (48) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 410
    COMMA           shift and go to state 273


state 392

    (249) selection_statement -> SWITCH LPAREN expression . RPAREN statement
    (48) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 411
    COMMA           shift and go to state 273


state 393

    (254) iteration_statement -> WHILE LPAREN expression . RPAREN statement
    (48) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 412
    COMMA           shift and go to state 273


state 394

    (255) iteration_statement -> DO statement WHILE . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 413


state 395

    (256) iteration_statement -> FOR LPAREN for_init_statement . expression SEMICOLON expression RPAREN statement
    (257) iteration_statement -> FOR LPAREN for_init_statement . SEMICOLON expression RPAREN statement
    (258) iteration_statement -> FOR LPAREN for_init_statement . expression SEMICOLON RPAREN statement
    (259) iteration_statement -> FOR LPAREN for_init_statement . SEMICOLON RPAREN statement
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMICOLON       shift and go to state 415
    THROW           shift and go to state 190
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    THIS            shift and go to state 134
    LPAREN          shift and go to state 105
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    expression                     shift and go to state 414
    assignment_expression          shift and go to state 188
    throw_expression               shift and go to state 189
    conditional_expression         shift and go to state 111
    unary_expression               shift and go to state 112
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    cast_expression                shift and go to state 118
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    logical_AND_expression         shift and go to state 123
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    inclusive_OR_expression        shift and go to state 132
    literal                        shift and go to state 133
    exclusive_OR_expression        shift and go to state 135
    AND_expression                 shift and go to state 139
    equality_expression            shift and go to state 140
    relational_expression          shift and go to state 141
    shift_expression               shift and go to state 142
    additive_expression            shift and go to state 143
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145

state 396

    (260) for_init_statement -> expression_statement .

    SEMICOLON       reduce using rule 260 (for_init_statement -> expression_statement .)
    THROW           reduce using rule 260 (for_init_statement -> expression_statement .)
    DPLUSOP         reduce using rule 260 (for_init_statement -> expression_statement .)
    DMINUSOP        reduce using rule 260 (for_init_statement -> expression_statement .)
    SIZEOF          reduce using rule 260 (for_init_statement -> expression_statement .)
    PLUSOP          reduce using rule 260 (for_init_statement -> expression_statement .)
    MINUSOP         reduce using rule 260 (for_init_statement -> expression_statement .)
    NOTSYM          reduce using rule 260 (for_init_statement -> expression_statement .)
    BNOP            reduce using rule 260 (for_init_statement -> expression_statement .)
    MULTOP          reduce using rule 260 (for_init_statement -> expression_statement .)
    BANDOP          reduce using rule 260 (for_init_statement -> expression_statement .)
    NEW             reduce using rule 260 (for_init_statement -> expression_statement .)
    DELETE          reduce using rule 260 (for_init_statement -> expression_statement .)
    THIS            reduce using rule 260 (for_init_statement -> expression_statement .)
    LPAREN          reduce using rule 260 (for_init_statement -> expression_statement .)
    IDENTIFIER      reduce using rule 260 (for_init_statement -> expression_statement .)
    DOUBLEBNOP      reduce using rule 260 (for_init_statement -> expression_statement .)
    STRING_L        reduce using rule 260 (for_init_statement -> expression_statement .)
    NUMBER          reduce using rule 260 (for_init_statement -> expression_statement .)
    SCHAR           reduce using rule 260 (for_init_statement -> expression_statement .)


state 397

    (261) for_init_statement -> declaration_statement .

    SEMICOLON       reduce using rule 261 (for_init_statement -> declaration_statement .)
    THROW           reduce using rule 261 (for_init_statement -> declaration_statement .)
    DPLUSOP         reduce using rule 261 (for_init_statement -> declaration_statement .)
    DMINUSOP        reduce using rule 261 (for_init_statement -> declaration_statement .)
    SIZEOF          reduce using rule 261 (for_init_statement -> declaration_statement .)
    PLUSOP          reduce using rule 261 (for_init_statement -> declaration_statement .)
    MINUSOP         reduce using rule 261 (for_init_statement -> declaration_statement .)
    NOTSYM          reduce using rule 261 (for_init_statement -> declaration_statement .)
    BNOP            reduce using rule 261 (for_init_statement -> declaration_statement .)
    MULTOP          reduce using rule 261 (for_init_statement -> declaration_statement .)
    BANDOP          reduce using rule 261 (for_init_statement -> declaration_statement .)
    NEW             reduce using rule 261 (for_init_statement -> declaration_statement .)
    DELETE          reduce using rule 261 (for_init_statement -> declaration_statement .)
    THIS            reduce using rule 261 (for_init_statement -> declaration_statement .)
    LPAREN          reduce using rule 261 (for_init_statement -> declaration_statement .)
    IDENTIFIER      reduce using rule 261 (for_init_statement -> declaration_statement .)
    DOUBLEBNOP      reduce using rule 261 (for_init_statement -> declaration_statement .)
    STRING_L        reduce using rule 261 (for_init_statement -> declaration_statement .)
    NUMBER          reduce using rule 261 (for_init_statement -> declaration_statement .)
    SCHAR           reduce using rule 261 (for_init_statement -> declaration_statement .)


state 398

    (244) jump_statement -> RETURN expression SEMICOLON .

    RCPAREN         reduce using rule 244 (jump_statement -> RETURN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 244 (jump_statement -> RETURN expression SEMICOLON .)
    CASE            reduce using rule 244 (jump_statement -> RETURN expression SEMICOLON .)
    DEFAULT         reduce using rule 244 (jump_statement -> RETURN expression SEMICOLON .)
    SEMICOLON       reduce using rule 244 (jump_statement -> RETURN expression SEMICOLON .)
    LCPAREN         reduce using rule 244 (jump_statement -> RETURN expression SEMICOLON .)
    IF              reduce using rule 244 (jump_statement -> RETURN expression SEMICOLON .)
    SWITCH          reduce using rule 244 (jump_statement -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 244 (jump_statement -> RETURN expression SEMICOLON .)
    DO              reduce using rule 244 (jump_statement -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 244 (jump_statement -> RETURN expression SEMICOLON .)
    BREAK           reduce using rule 244 (jump_statement -> RETURN expression SEMICOLON .)
    CONTINUE        reduce using rule 244 (jump_statement -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 244 (jump_statement -> RETURN expression SEMICOLON .)
    GOTO            reduce using rule 244 (jump_statement -> RETURN expression SEMICOLON .)
    TRY             reduce using rule 244 (jump_statement -> RETURN expression SEMICOLON .)
    THROW           reduce using rule 244 (jump_statement -> RETURN expression SEMICOLON .)
    CONST           reduce using rule 244 (jump_statement -> RETURN expression SEMICOLON .)
    ASM             reduce using rule 244 (jump_statement -> RETURN expression SEMICOLON .)
    TEMPLATE        reduce using rule 244 (jump_statement -> RETURN expression SEMICOLON .)
    TYPEDEF         reduce using rule 244 (jump_statement -> RETURN expression SEMICOLON .)
    DPLUSOP         reduce using rule 244 (jump_statement -> RETURN expression SEMICOLON .)
    DMINUSOP        reduce using rule 244 (jump_statement -> RETURN expression SEMICOLON .)
    SIZEOF          reduce using rule 244 (jump_statement -> RETURN expression SEMICOLON .)
    PLUSOP          reduce using rule 244 (jump_statement -> RETURN expression SEMICOLON .)
    MINUSOP         reduce using rule 244 (jump_statement -> RETURN expression SEMICOLON .)
    NOTSYM          reduce using rule 244 (jump_statement -> RETURN expression SEMICOLON .)
    BNOP            reduce using rule 244 (jump_statement -> RETURN expression SEMICOLON .)
    MULTOP          reduce using rule 244 (jump_statement -> RETURN expression SEMICOLON .)
    BANDOP          reduce using rule 244 (jump_statement -> RETURN expression SEMICOLON .)
    NEW             reduce using rule 244 (jump_statement -> RETURN expression SEMICOLON .)
    DELETE          reduce using rule 244 (jump_statement -> RETURN expression SEMICOLON .)
    CHAR            reduce using rule 244 (jump_statement -> RETURN expression SEMICOLON .)
    SHORT           reduce using rule 244 (jump_statement -> RETURN expression SEMICOLON .)
    INT             reduce using rule 244 (jump_statement -> RETURN expression SEMICOLON .)
    LONG            reduce using rule 244 (jump_statement -> RETURN expression SEMICOLON .)
    SIGNED          reduce using rule 244 (jump_statement -> RETURN expression SEMICOLON .)
    UNSIGNED        reduce using rule 244 (jump_statement -> RETURN expression SEMICOLON .)
    FLOAT           reduce using rule 244 (jump_statement -> RETURN expression SEMICOLON .)
    DOUBLE          reduce using rule 244 (jump_statement -> RETURN expression SEMICOLON .)
    VOID            reduce using rule 244 (jump_statement -> RETURN expression SEMICOLON .)
    STRING          reduce using rule 244 (jump_statement -> RETURN expression SEMICOLON .)
    AUTO            reduce using rule 244 (jump_statement -> RETURN expression SEMICOLON .)
    TYPE            reduce using rule 244 (jump_statement -> RETURN expression SEMICOLON .)
    CLASS           reduce using rule 244 (jump_statement -> RETURN expression SEMICOLON .)
    STRUCT          reduce using rule 244 (jump_statement -> RETURN expression SEMICOLON .)
    THIS            reduce using rule 244 (jump_statement -> RETURN expression SEMICOLON .)
    LPAREN          reduce using rule 244 (jump_statement -> RETURN expression SEMICOLON .)
    DOUBLEBNOP      reduce using rule 244 (jump_statement -> RETURN expression SEMICOLON .)
    STRING_L        reduce using rule 244 (jump_statement -> RETURN expression SEMICOLON .)
    NUMBER          reduce using rule 244 (jump_statement -> RETURN expression SEMICOLON .)
    SCHAR           reduce using rule 244 (jump_statement -> RETURN expression SEMICOLON .)
    ELSE            reduce using rule 244 (jump_statement -> RETURN expression SEMICOLON .)


state 399

    (246) jump_statement -> GOTO IDENTIFIER SEMICOLON .

    RCPAREN         reduce using rule 246 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 246 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    CASE            reduce using rule 246 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DEFAULT         reduce using rule 246 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SEMICOLON       reduce using rule 246 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    LCPAREN         reduce using rule 246 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    IF              reduce using rule 246 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SWITCH          reduce using rule 246 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 246 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DO              reduce using rule 246 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    FOR             reduce using rule 246 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    BREAK           reduce using rule 246 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    CONTINUE        reduce using rule 246 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    RETURN          reduce using rule 246 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    GOTO            reduce using rule 246 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    TRY             reduce using rule 246 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    THROW           reduce using rule 246 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    CONST           reduce using rule 246 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    ASM             reduce using rule 246 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    TEMPLATE        reduce using rule 246 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    TYPEDEF         reduce using rule 246 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DPLUSOP         reduce using rule 246 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DMINUSOP        reduce using rule 246 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SIZEOF          reduce using rule 246 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    PLUSOP          reduce using rule 246 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    MINUSOP         reduce using rule 246 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    NOTSYM          reduce using rule 246 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    BNOP            reduce using rule 246 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    MULTOP          reduce using rule 246 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    BANDOP          reduce using rule 246 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    NEW             reduce using rule 246 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DELETE          reduce using rule 246 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    CHAR            reduce using rule 246 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SHORT           reduce using rule 246 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    INT             reduce using rule 246 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    LONG            reduce using rule 246 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SIGNED          reduce using rule 246 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    UNSIGNED        reduce using rule 246 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    FLOAT           reduce using rule 246 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DOUBLE          reduce using rule 246 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    VOID            reduce using rule 246 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    STRING          reduce using rule 246 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    AUTO            reduce using rule 246 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    TYPE            reduce using rule 246 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    CLASS           reduce using rule 246 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    STRUCT          reduce using rule 246 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    THIS            reduce using rule 246 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    LPAREN          reduce using rule 246 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DOUBLEBNOP      reduce using rule 246 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    STRING_L        reduce using rule 246 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    NUMBER          reduce using rule 246 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SCHAR           reduce using rule 246 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    ELSE            reduce using rule 246 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)


state 400

    (250) try_block -> TRY compound_statement CATCH . compound_statement
    (230) compound_statement -> . LCPAREN statement_list RCPAREN
    (231) compound_statement -> . LCPAREN RCPAREN

    LCPAREN         shift and go to state 194

    compound_statement             shift and go to state 416

state 401

    (14) conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .

    RPAREN          reduce using rule 14 (conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .)
    COMMA           reduce using rule 14 (conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .)
    RSPAREN         reduce using rule 14 (conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .)
    SEMICOLON       reduce using rule 14 (conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .)
    RCPAREN         reduce using rule 14 (conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .)
    COLON           reduce using rule 14 (conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .)
    RTEMPLATE       reduce using rule 14 (conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .)


state 402

    (94) postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .

    LSPAREN         reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    LPAREN          reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    DOT             reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    ARROW           reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    DPLUSOP         reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    DMINUSOP        reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    LTEMPLATE       reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    EQUAL           reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    MULTEQOP        reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    DIVEQOP         reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    MODEQOP         reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    PLUSEQOP        reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    MINUSEQOP       reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    LSHIFTEQOP      reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    RSHIFTEQOP      reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    BANDEQOP        reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    BOREQOP         reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    DOTSTAR         reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    ARROWSTAR       reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    MULTOP          reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    DIVOP           reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    MODOP           reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    PLUSOP          reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    MINUSOP         reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    LSHIFT          reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    RSHIFT          reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    LTCOMP          reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    GTCOMP          reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    LTECOMP         reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    GTECOMP         reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    EQCOMP          reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    NEQCOMP         reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    BANDOP          reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    XOROP           reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    OROP            reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    ANDOP           reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    QUESMARK        reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    RPAREN          reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    RSPAREN         reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    SEMICOLON       reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    RCPAREN         reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    COLON           reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    RTEMPLATE       reduce using rule 94 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)


state 403

    (83) new_initializer -> LPAREN initializer_list RPAREN .

    EQUAL           reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    MULTEQOP        reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    DIVEQOP         reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    MODEQOP         reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    PLUSEQOP        reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    MINUSEQOP       reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    LSHIFTEQOP      reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    RSHIFTEQOP      reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    BANDEQOP        reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    BOREQOP         reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    DOTSTAR         reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    ARROWSTAR       reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    MULTOP          reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    DIVOP           reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    MODOP           reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    PLUSOP          reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    MINUSOP         reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    LSHIFT          reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    RSHIFT          reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    LTCOMP          reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    GTCOMP          reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    LTECOMP         reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    GTECOMP         reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    EQCOMP          reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    NEQCOMP         reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    BANDOP          reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    XOROP           reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    OROP            reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    ANDOP           reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    QUESMARK        reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    RPAREN          reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    COMMA           reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    RSPAREN         reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    SEMICOLON       reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    RCPAREN         reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    COLON           reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)
    RTEMPLATE       reduce using rule 83 (new_initializer -> LPAREN initializer_list RPAREN .)


state 404

    (284) initializer_list -> initializer_list COMMA . assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    THIS            shift and go to state 134
    LPAREN          shift and go to state 105
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    assignment_expression          shift and go to state 385
    conditional_expression         shift and go to state 111
    unary_expression               shift and go to state 112
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    cast_expression                shift and go to state 118
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    logical_AND_expression         shift and go to state 123
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    inclusive_OR_expression        shift and go to state 132
    literal                        shift and go to state 133
    exclusive_OR_expression        shift and go to state 135
    AND_expression                 shift and go to state 139
    equality_expression            shift and go to state 140
    relational_expression          shift and go to state 141
    shift_expression               shift and go to state 142
    additive_expression            shift and go to state 143
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145

state 405

    (75) allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .

    EQUAL           reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    MULTEQOP        reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    DIVEQOP         reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    MODEQOP         reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    PLUSEQOP        reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    MINUSEQOP       reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    LSHIFTEQOP      reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    RSHIFTEQOP      reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    BANDEQOP        reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    BOREQOP         reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    DOTSTAR         reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    ARROWSTAR       reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    MULTOP          reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    DIVOP           reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    MODOP           reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    PLUSOP          reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    MINUSOP         reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    LSHIFT          reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    RSHIFT          reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    LTCOMP          reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    GTCOMP          reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    LTECOMP         reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    GTECOMP         reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    EQCOMP          reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    NEQCOMP         reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    BANDOP          reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    XOROP           reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    OROP            reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    ANDOP           reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    QUESMARK        reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    RPAREN          reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    COMMA           reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    RSPAREN         reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    SEMICOLON       reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    RCPAREN         reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    COLON           reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    RTEMPLATE       reduce using rule 75 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)


state 406

    (81) new_declarator -> new_declarator LSPAREN expression . RSPAREN
    (48) expression -> expression . COMMA assignment_expression

    RSPAREN         shift and go to state 417
    COMMA           shift and go to state 273


state 407

    (82) new_declarator -> LSPAREN expression RSPAREN .

    MULTOP          reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    LSPAREN         reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    LPAREN          reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    EQUAL           reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    MULTEQOP        reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    DIVEQOP         reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    MODEQOP         reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    PLUSEQOP        reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    MINUSEQOP       reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    LSHIFTEQOP      reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    RSHIFTEQOP      reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    BANDEQOP        reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    BOREQOP         reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    DOTSTAR         reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    ARROWSTAR       reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    DIVOP           reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    MODOP           reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    PLUSOP          reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    MINUSOP         reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    LSHIFT          reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    RSHIFT          reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    LTCOMP          reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    GTCOMP          reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    LTECOMP         reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    GTECOMP         reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    EQCOMP          reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    NEQCOMP         reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    BANDOP          reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    XOROP           reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    OROP            reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    ANDOP           reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    QUESMARK        reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    RPAREN          reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    COMMA           reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    RSPAREN         reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    SEMICOLON       reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    RCPAREN         reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    COLON           reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)
    RTEMPLATE       reduce using rule 82 (new_declarator -> LSPAREN expression RSPAREN .)


state 408

    (286) initializer_list -> LCPAREN initializer_list COMMA RCPAREN .

    RCPAREN         reduce using rule 286 (initializer_list -> LCPAREN initializer_list COMMA RCPAREN .)
    COMMA           reduce using rule 286 (initializer_list -> LCPAREN initializer_list COMMA RCPAREN .)
    RPAREN          reduce using rule 286 (initializer_list -> LCPAREN initializer_list COMMA RCPAREN .)


state 409

    (252) labeled_statement -> CASE constant_expression COLON statement .

    RCPAREN         reduce using rule 252 (labeled_statement -> CASE constant_expression COLON statement .)
    IDENTIFIER      reduce using rule 252 (labeled_statement -> CASE constant_expression COLON statement .)
    CASE            reduce using rule 252 (labeled_statement -> CASE constant_expression COLON statement .)
    DEFAULT         reduce using rule 252 (labeled_statement -> CASE constant_expression COLON statement .)
    SEMICOLON       reduce using rule 252 (labeled_statement -> CASE constant_expression COLON statement .)
    LCPAREN         reduce using rule 252 (labeled_statement -> CASE constant_expression COLON statement .)
    IF              reduce using rule 252 (labeled_statement -> CASE constant_expression COLON statement .)
    SWITCH          reduce using rule 252 (labeled_statement -> CASE constant_expression COLON statement .)
    WHILE           reduce using rule 252 (labeled_statement -> CASE constant_expression COLON statement .)
    DO              reduce using rule 252 (labeled_statement -> CASE constant_expression COLON statement .)
    FOR             reduce using rule 252 (labeled_statement -> CASE constant_expression COLON statement .)
    BREAK           reduce using rule 252 (labeled_statement -> CASE constant_expression COLON statement .)
    CONTINUE        reduce using rule 252 (labeled_statement -> CASE constant_expression COLON statement .)
    RETURN          reduce using rule 252 (labeled_statement -> CASE constant_expression COLON statement .)
    GOTO            reduce using rule 252 (labeled_statement -> CASE constant_expression COLON statement .)
    TRY             reduce using rule 252 (labeled_statement -> CASE constant_expression COLON statement .)
    THROW           reduce using rule 252 (labeled_statement -> CASE constant_expression COLON statement .)
    CONST           reduce using rule 252 (labeled_statement -> CASE constant_expression COLON statement .)
    ASM             reduce using rule 252 (labeled_statement -> CASE constant_expression COLON statement .)
    TEMPLATE        reduce using rule 252 (labeled_statement -> CASE constant_expression COLON statement .)
    TYPEDEF         reduce using rule 252 (labeled_statement -> CASE constant_expression COLON statement .)
    DPLUSOP         reduce using rule 252 (labeled_statement -> CASE constant_expression COLON statement .)
    DMINUSOP        reduce using rule 252 (labeled_statement -> CASE constant_expression COLON statement .)
    SIZEOF          reduce using rule 252 (labeled_statement -> CASE constant_expression COLON statement .)
    PLUSOP          reduce using rule 252 (labeled_statement -> CASE constant_expression COLON statement .)
    MINUSOP         reduce using rule 252 (labeled_statement -> CASE constant_expression COLON statement .)
    NOTSYM          reduce using rule 252 (labeled_statement -> CASE constant_expression COLON statement .)
    BNOP            reduce using rule 252 (labeled_statement -> CASE constant_expression COLON statement .)
    MULTOP          reduce using rule 252 (labeled_statement -> CASE constant_expression COLON statement .)
    BANDOP          reduce using rule 252 (labeled_statement -> CASE constant_expression COLON statement .)
    NEW             reduce using rule 252 (labeled_statement -> CASE constant_expression COLON statement .)
    DELETE          reduce using rule 252 (labeled_statement -> CASE constant_expression COLON statement .)
    CHAR            reduce using rule 252 (labeled_statement -> CASE constant_expression COLON statement .)
    SHORT           reduce using rule 252 (labeled_statement -> CASE constant_expression COLON statement .)
    INT             reduce using rule 252 (labeled_statement -> CASE constant_expression COLON statement .)
    LONG            reduce using rule 252 (labeled_statement -> CASE constant_expression COLON statement .)
    SIGNED          reduce using rule 252 (labeled_statement -> CASE constant_expression COLON statement .)
    UNSIGNED        reduce using rule 252 (labeled_statement -> CASE constant_expression COLON statement .)
    FLOAT           reduce using rule 252 (labeled_statement -> CASE constant_expression COLON statement .)
    DOUBLE          reduce using rule 252 (labeled_statement -> CASE constant_expression COLON statement .)
    VOID            reduce using rule 252 (labeled_statement -> CASE constant_expression COLON statement .)
    STRING          reduce using rule 252 (labeled_statement -> CASE constant_expression COLON statement .)
    AUTO            reduce using rule 252 (labeled_statement -> CASE constant_expression COLON statement .)
    TYPE            reduce using rule 252 (labeled_statement -> CASE constant_expression COLON statement .)
    CLASS           reduce using rule 252 (labeled_statement -> CASE constant_expression COLON statement .)
    STRUCT          reduce using rule 252 (labeled_statement -> CASE constant_expression COLON statement .)
    THIS            reduce using rule 252 (labeled_statement -> CASE constant_expression COLON statement .)
    LPAREN          reduce using rule 252 (labeled_statement -> CASE constant_expression COLON statement .)
    DOUBLEBNOP      reduce using rule 252 (labeled_statement -> CASE constant_expression COLON statement .)
    STRING_L        reduce using rule 252 (labeled_statement -> CASE constant_expression COLON statement .)
    NUMBER          reduce using rule 252 (labeled_statement -> CASE constant_expression COLON statement .)
    SCHAR           reduce using rule 252 (labeled_statement -> CASE constant_expression COLON statement .)
    ELSE            reduce using rule 252 (labeled_statement -> CASE constant_expression COLON statement .)


state 410

    (247) selection_statement -> IF LPAREN expression RPAREN . statement
    (248) selection_statement -> IF LPAREN expression RPAREN . statement ELSE statement
    (234) statement -> . labeled_statement
    (235) statement -> . expression_statement
    (236) statement -> . compound_statement
    (237) statement -> . selection_statement
    (238) statement -> . iteration_statement
    (239) statement -> . jump_statement
    (240) statement -> . declaration_statement
    (241) statement -> . try_block
    (251) labeled_statement -> . IDENTIFIER COLON statement
    (252) labeled_statement -> . CASE constant_expression COLON statement
    (253) labeled_statement -> . DEFAULT COLON statement
    (262) expression_statement -> . expression SEMICOLON
    (263) expression_statement -> . SEMICOLON
    (230) compound_statement -> . LCPAREN statement_list RCPAREN
    (231) compound_statement -> . LCPAREN RCPAREN
    (247) selection_statement -> . IF LPAREN expression RPAREN statement
    (248) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (249) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (254) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (255) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (256) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (257) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (258) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (259) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (242) jump_statement -> . BREAK SEMICOLON
    (243) jump_statement -> . CONTINUE SEMICOLON
    (244) jump_statement -> . RETURN expression SEMICOLON
    (245) jump_statement -> . RETURN SEMICOLON
    (246) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (264) declaration_statement -> . declaration
    (250) try_block -> . TRY compound_statement CATCH compound_statement
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (265) declaration -> . type_specifier_ declarator_list SEMICOLON
    (266) declaration -> . asm_declaration
    (267) declaration -> . function_definition
    (268) declaration -> . function_decl
    (269) declaration -> . class_define_specifier SEMICOLON
    (270) declaration -> . template_declaration
    (271) declaration -> . typedef_declarator
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (168) type_specifier_ -> . CONST type_specifier
    (169) type_specifier_ -> . type_specifier
    (287) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (225) function_definition -> . type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body
    (226) function_definition -> . type_specifier_ declarator LPAREN RPAREN fct_body
    (227) function_decl -> . type_specifier_ declarator LPAREN argument_declaration_list RPAREN
    (228) function_decl -> . type_specifier_ declarator LPAREN RPAREN
    (203) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (204) class_define_specifier -> . class_head LCPAREN RCPAREN
    (272) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (170) typedef_declarator -> . TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON
    (171) typedef_declarator -> . TYPEDEF type_specifier_ IDENTIFIER SEMICOLON
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (172) type_specifier -> . simple_type_name
    (173) type_specifier -> . complex_type_specifier
    (190) class_head -> . class_key IDENTIFIER base_spec
    (191) class_head -> . class_key IDENTIFIER
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (174) simple_type_name -> . CHAR
    (175) simple_type_name -> . SHORT
    (176) simple_type_name -> . INT
    (177) simple_type_name -> . LONG
    (178) simple_type_name -> . SIGNED
    (179) simple_type_name -> . UNSIGNED
    (180) simple_type_name -> . FLOAT
    (181) simple_type_name -> . DOUBLE
    (182) simple_type_name -> . VOID
    (183) simple_type_name -> . STRING
    (184) simple_type_name -> . AUTO
    (185) complex_type_specifier -> . class_key IDENTIFIER
    (186) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (187) complex_type_specifier -> . TYPE IDENTIFIER
    (188) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (201) class_key -> . CLASS
    (202) class_key -> . STRUCT
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 288
    CASE            shift and go to state 289
    DEFAULT         shift and go to state 290
    SEMICOLON       shift and go to state 292
    LCPAREN         shift and go to state 194
    IF              shift and go to state 293
    SWITCH          shift and go to state 294
    WHILE           shift and go to state 295
    DO              shift and go to state 296
    FOR             shift and go to state 297
    BREAK           shift and go to state 298
    CONTINUE        shift and go to state 299
    RETURN          shift and go to state 300
    GOTO            shift and go to state 301
    TRY             shift and go to state 303
    THROW           shift and go to state 190
    CONST           shift and go to state 16
    ASM             shift and go to state 18
    TEMPLATE        shift and go to state 20
    TYPEDEF         shift and go to state 21
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38
    THIS            shift and go to state 134
    LPAREN          shift and go to state 105
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    expression                     shift and go to state 291
    statement                      shift and go to state 418
    labeled_statement              shift and go to state 280
    expression_statement           shift and go to state 281
    compound_statement             shift and go to state 282
    selection_statement            shift and go to state 283
    iteration_statement            shift and go to state 284
    jump_statement                 shift and go to state 285
    declaration_statement          shift and go to state 286
    try_block                      shift and go to state 287
    declaration                    shift and go to state 302
    assignment_expression          shift and go to state 188
    throw_expression               shift and go to state 189
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    function_decl                  shift and go to state 12
    class_define_specifier         shift and go to state 13
    template_declaration           shift and go to state 14
    typedef_declarator             shift and go to state 15
    conditional_expression         shift and go to state 111
    unary_expression               shift and go to state 112
    type_specifier                 shift and go to state 17
    class_head                     shift and go to state 19
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    cast_expression                shift and go to state 118
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 24
    logical_AND_expression         shift and go to state 123
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    inclusive_OR_expression        shift and go to state 132
    literal                        shift and go to state 133
    exclusive_OR_expression        shift and go to state 135
    AND_expression                 shift and go to state 139
    equality_expression            shift and go to state 140
    relational_expression          shift and go to state 141
    shift_expression               shift and go to state 142
    additive_expression            shift and go to state 143
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145

state 411

    (249) selection_statement -> SWITCH LPAREN expression RPAREN . statement
    (234) statement -> . labeled_statement
    (235) statement -> . expression_statement
    (236) statement -> . compound_statement
    (237) statement -> . selection_statement
    (238) statement -> . iteration_statement
    (239) statement -> . jump_statement
    (240) statement -> . declaration_statement
    (241) statement -> . try_block
    (251) labeled_statement -> . IDENTIFIER COLON statement
    (252) labeled_statement -> . CASE constant_expression COLON statement
    (253) labeled_statement -> . DEFAULT COLON statement
    (262) expression_statement -> . expression SEMICOLON
    (263) expression_statement -> . SEMICOLON
    (230) compound_statement -> . LCPAREN statement_list RCPAREN
    (231) compound_statement -> . LCPAREN RCPAREN
    (247) selection_statement -> . IF LPAREN expression RPAREN statement
    (248) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (249) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (254) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (255) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (256) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (257) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (258) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (259) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (242) jump_statement -> . BREAK SEMICOLON
    (243) jump_statement -> . CONTINUE SEMICOLON
    (244) jump_statement -> . RETURN expression SEMICOLON
    (245) jump_statement -> . RETURN SEMICOLON
    (246) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (264) declaration_statement -> . declaration
    (250) try_block -> . TRY compound_statement CATCH compound_statement
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (265) declaration -> . type_specifier_ declarator_list SEMICOLON
    (266) declaration -> . asm_declaration
    (267) declaration -> . function_definition
    (268) declaration -> . function_decl
    (269) declaration -> . class_define_specifier SEMICOLON
    (270) declaration -> . template_declaration
    (271) declaration -> . typedef_declarator
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (168) type_specifier_ -> . CONST type_specifier
    (169) type_specifier_ -> . type_specifier
    (287) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (225) function_definition -> . type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body
    (226) function_definition -> . type_specifier_ declarator LPAREN RPAREN fct_body
    (227) function_decl -> . type_specifier_ declarator LPAREN argument_declaration_list RPAREN
    (228) function_decl -> . type_specifier_ declarator LPAREN RPAREN
    (203) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (204) class_define_specifier -> . class_head LCPAREN RCPAREN
    (272) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (170) typedef_declarator -> . TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON
    (171) typedef_declarator -> . TYPEDEF type_specifier_ IDENTIFIER SEMICOLON
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (172) type_specifier -> . simple_type_name
    (173) type_specifier -> . complex_type_specifier
    (190) class_head -> . class_key IDENTIFIER base_spec
    (191) class_head -> . class_key IDENTIFIER
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (174) simple_type_name -> . CHAR
    (175) simple_type_name -> . SHORT
    (176) simple_type_name -> . INT
    (177) simple_type_name -> . LONG
    (178) simple_type_name -> . SIGNED
    (179) simple_type_name -> . UNSIGNED
    (180) simple_type_name -> . FLOAT
    (181) simple_type_name -> . DOUBLE
    (182) simple_type_name -> . VOID
    (183) simple_type_name -> . STRING
    (184) simple_type_name -> . AUTO
    (185) complex_type_specifier -> . class_key IDENTIFIER
    (186) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (187) complex_type_specifier -> . TYPE IDENTIFIER
    (188) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (201) class_key -> . CLASS
    (202) class_key -> . STRUCT
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 288
    CASE            shift and go to state 289
    DEFAULT         shift and go to state 290
    SEMICOLON       shift and go to state 292
    LCPAREN         shift and go to state 194
    IF              shift and go to state 293
    SWITCH          shift and go to state 294
    WHILE           shift and go to state 295
    DO              shift and go to state 296
    FOR             shift and go to state 297
    BREAK           shift and go to state 298
    CONTINUE        shift and go to state 299
    RETURN          shift and go to state 300
    GOTO            shift and go to state 301
    TRY             shift and go to state 303
    THROW           shift and go to state 190
    CONST           shift and go to state 16
    ASM             shift and go to state 18
    TEMPLATE        shift and go to state 20
    TYPEDEF         shift and go to state 21
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38
    THIS            shift and go to state 134
    LPAREN          shift and go to state 105
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    expression                     shift and go to state 291
    statement                      shift and go to state 419
    labeled_statement              shift and go to state 280
    expression_statement           shift and go to state 281
    compound_statement             shift and go to state 282
    selection_statement            shift and go to state 283
    iteration_statement            shift and go to state 284
    jump_statement                 shift and go to state 285
    declaration_statement          shift and go to state 286
    try_block                      shift and go to state 287
    declaration                    shift and go to state 302
    assignment_expression          shift and go to state 188
    throw_expression               shift and go to state 189
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    function_decl                  shift and go to state 12
    class_define_specifier         shift and go to state 13
    template_declaration           shift and go to state 14
    typedef_declarator             shift and go to state 15
    conditional_expression         shift and go to state 111
    unary_expression               shift and go to state 112
    type_specifier                 shift and go to state 17
    class_head                     shift and go to state 19
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    cast_expression                shift and go to state 118
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 24
    logical_AND_expression         shift and go to state 123
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    inclusive_OR_expression        shift and go to state 132
    literal                        shift and go to state 133
    exclusive_OR_expression        shift and go to state 135
    AND_expression                 shift and go to state 139
    equality_expression            shift and go to state 140
    relational_expression          shift and go to state 141
    shift_expression               shift and go to state 142
    additive_expression            shift and go to state 143
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145

state 412

    (254) iteration_statement -> WHILE LPAREN expression RPAREN . statement
    (234) statement -> . labeled_statement
    (235) statement -> . expression_statement
    (236) statement -> . compound_statement
    (237) statement -> . selection_statement
    (238) statement -> . iteration_statement
    (239) statement -> . jump_statement
    (240) statement -> . declaration_statement
    (241) statement -> . try_block
    (251) labeled_statement -> . IDENTIFIER COLON statement
    (252) labeled_statement -> . CASE constant_expression COLON statement
    (253) labeled_statement -> . DEFAULT COLON statement
    (262) expression_statement -> . expression SEMICOLON
    (263) expression_statement -> . SEMICOLON
    (230) compound_statement -> . LCPAREN statement_list RCPAREN
    (231) compound_statement -> . LCPAREN RCPAREN
    (247) selection_statement -> . IF LPAREN expression RPAREN statement
    (248) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (249) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (254) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (255) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (256) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (257) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (258) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (259) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (242) jump_statement -> . BREAK SEMICOLON
    (243) jump_statement -> . CONTINUE SEMICOLON
    (244) jump_statement -> . RETURN expression SEMICOLON
    (245) jump_statement -> . RETURN SEMICOLON
    (246) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (264) declaration_statement -> . declaration
    (250) try_block -> . TRY compound_statement CATCH compound_statement
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (265) declaration -> . type_specifier_ declarator_list SEMICOLON
    (266) declaration -> . asm_declaration
    (267) declaration -> . function_definition
    (268) declaration -> . function_decl
    (269) declaration -> . class_define_specifier SEMICOLON
    (270) declaration -> . template_declaration
    (271) declaration -> . typedef_declarator
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (168) type_specifier_ -> . CONST type_specifier
    (169) type_specifier_ -> . type_specifier
    (287) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (225) function_definition -> . type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body
    (226) function_definition -> . type_specifier_ declarator LPAREN RPAREN fct_body
    (227) function_decl -> . type_specifier_ declarator LPAREN argument_declaration_list RPAREN
    (228) function_decl -> . type_specifier_ declarator LPAREN RPAREN
    (203) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (204) class_define_specifier -> . class_head LCPAREN RCPAREN
    (272) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (170) typedef_declarator -> . TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON
    (171) typedef_declarator -> . TYPEDEF type_specifier_ IDENTIFIER SEMICOLON
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (172) type_specifier -> . simple_type_name
    (173) type_specifier -> . complex_type_specifier
    (190) class_head -> . class_key IDENTIFIER base_spec
    (191) class_head -> . class_key IDENTIFIER
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (174) simple_type_name -> . CHAR
    (175) simple_type_name -> . SHORT
    (176) simple_type_name -> . INT
    (177) simple_type_name -> . LONG
    (178) simple_type_name -> . SIGNED
    (179) simple_type_name -> . UNSIGNED
    (180) simple_type_name -> . FLOAT
    (181) simple_type_name -> . DOUBLE
    (182) simple_type_name -> . VOID
    (183) simple_type_name -> . STRING
    (184) simple_type_name -> . AUTO
    (185) complex_type_specifier -> . class_key IDENTIFIER
    (186) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (187) complex_type_specifier -> . TYPE IDENTIFIER
    (188) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (201) class_key -> . CLASS
    (202) class_key -> . STRUCT
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 288
    CASE            shift and go to state 289
    DEFAULT         shift and go to state 290
    SEMICOLON       shift and go to state 292
    LCPAREN         shift and go to state 194
    IF              shift and go to state 293
    SWITCH          shift and go to state 294
    WHILE           shift and go to state 295
    DO              shift and go to state 296
    FOR             shift and go to state 297
    BREAK           shift and go to state 298
    CONTINUE        shift and go to state 299
    RETURN          shift and go to state 300
    GOTO            shift and go to state 301
    TRY             shift and go to state 303
    THROW           shift and go to state 190
    CONST           shift and go to state 16
    ASM             shift and go to state 18
    TEMPLATE        shift and go to state 20
    TYPEDEF         shift and go to state 21
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38
    THIS            shift and go to state 134
    LPAREN          shift and go to state 105
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    expression                     shift and go to state 291
    statement                      shift and go to state 420
    labeled_statement              shift and go to state 280
    expression_statement           shift and go to state 281
    compound_statement             shift and go to state 282
    selection_statement            shift and go to state 283
    iteration_statement            shift and go to state 284
    jump_statement                 shift and go to state 285
    declaration_statement          shift and go to state 286
    try_block                      shift and go to state 287
    declaration                    shift and go to state 302
    assignment_expression          shift and go to state 188
    throw_expression               shift and go to state 189
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    function_decl                  shift and go to state 12
    class_define_specifier         shift and go to state 13
    template_declaration           shift and go to state 14
    typedef_declarator             shift and go to state 15
    conditional_expression         shift and go to state 111
    unary_expression               shift and go to state 112
    type_specifier                 shift and go to state 17
    class_head                     shift and go to state 19
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    cast_expression                shift and go to state 118
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 24
    logical_AND_expression         shift and go to state 123
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    inclusive_OR_expression        shift and go to state 132
    literal                        shift and go to state 133
    exclusive_OR_expression        shift and go to state 135
    AND_expression                 shift and go to state 139
    equality_expression            shift and go to state 140
    relational_expression          shift and go to state 141
    shift_expression               shift and go to state 142
    additive_expression            shift and go to state 143
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145

state 413

    (255) iteration_statement -> DO statement WHILE LPAREN . expression RPAREN SEMICOLON
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    THROW           shift and go to state 190
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    THIS            shift and go to state 134
    LPAREN          shift and go to state 105
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    expression                     shift and go to state 421
    assignment_expression          shift and go to state 188
    throw_expression               shift and go to state 189
    conditional_expression         shift and go to state 111
    unary_expression               shift and go to state 112
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    cast_expression                shift and go to state 118
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    logical_AND_expression         shift and go to state 123
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    inclusive_OR_expression        shift and go to state 132
    literal                        shift and go to state 133
    exclusive_OR_expression        shift and go to state 135
    AND_expression                 shift and go to state 139
    equality_expression            shift and go to state 140
    relational_expression          shift and go to state 141
    shift_expression               shift and go to state 142
    additive_expression            shift and go to state 143
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145

state 414

    (256) iteration_statement -> FOR LPAREN for_init_statement expression . SEMICOLON expression RPAREN statement
    (258) iteration_statement -> FOR LPAREN for_init_statement expression . SEMICOLON RPAREN statement
    (48) expression -> expression . COMMA assignment_expression

    SEMICOLON       shift and go to state 422
    COMMA           shift and go to state 273


state 415

    (257) iteration_statement -> FOR LPAREN for_init_statement SEMICOLON . expression RPAREN statement
    (259) iteration_statement -> FOR LPAREN for_init_statement SEMICOLON . RPAREN statement
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 424
    THROW           shift and go to state 190
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    THIS            shift and go to state 134
    LPAREN          shift and go to state 105
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    expression                     shift and go to state 423
    assignment_expression          shift and go to state 188
    throw_expression               shift and go to state 189
    conditional_expression         shift and go to state 111
    unary_expression               shift and go to state 112
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    cast_expression                shift and go to state 118
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    logical_AND_expression         shift and go to state 123
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    inclusive_OR_expression        shift and go to state 132
    literal                        shift and go to state 133
    exclusive_OR_expression        shift and go to state 135
    AND_expression                 shift and go to state 139
    equality_expression            shift and go to state 140
    relational_expression          shift and go to state 141
    shift_expression               shift and go to state 142
    additive_expression            shift and go to state 143
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145

state 416

    (250) try_block -> TRY compound_statement CATCH compound_statement .

    RCPAREN         reduce using rule 250 (try_block -> TRY compound_statement CATCH compound_statement .)
    IDENTIFIER      reduce using rule 250 (try_block -> TRY compound_statement CATCH compound_statement .)
    CASE            reduce using rule 250 (try_block -> TRY compound_statement CATCH compound_statement .)
    DEFAULT         reduce using rule 250 (try_block -> TRY compound_statement CATCH compound_statement .)
    SEMICOLON       reduce using rule 250 (try_block -> TRY compound_statement CATCH compound_statement .)
    LCPAREN         reduce using rule 250 (try_block -> TRY compound_statement CATCH compound_statement .)
    IF              reduce using rule 250 (try_block -> TRY compound_statement CATCH compound_statement .)
    SWITCH          reduce using rule 250 (try_block -> TRY compound_statement CATCH compound_statement .)
    WHILE           reduce using rule 250 (try_block -> TRY compound_statement CATCH compound_statement .)
    DO              reduce using rule 250 (try_block -> TRY compound_statement CATCH compound_statement .)
    FOR             reduce using rule 250 (try_block -> TRY compound_statement CATCH compound_statement .)
    BREAK           reduce using rule 250 (try_block -> TRY compound_statement CATCH compound_statement .)
    CONTINUE        reduce using rule 250 (try_block -> TRY compound_statement CATCH compound_statement .)
    RETURN          reduce using rule 250 (try_block -> TRY compound_statement CATCH compound_statement .)
    GOTO            reduce using rule 250 (try_block -> TRY compound_statement CATCH compound_statement .)
    TRY             reduce using rule 250 (try_block -> TRY compound_statement CATCH compound_statement .)
    THROW           reduce using rule 250 (try_block -> TRY compound_statement CATCH compound_statement .)
    CONST           reduce using rule 250 (try_block -> TRY compound_statement CATCH compound_statement .)
    ASM             reduce using rule 250 (try_block -> TRY compound_statement CATCH compound_statement .)
    TEMPLATE        reduce using rule 250 (try_block -> TRY compound_statement CATCH compound_statement .)
    TYPEDEF         reduce using rule 250 (try_block -> TRY compound_statement CATCH compound_statement .)
    DPLUSOP         reduce using rule 250 (try_block -> TRY compound_statement CATCH compound_statement .)
    DMINUSOP        reduce using rule 250 (try_block -> TRY compound_statement CATCH compound_statement .)
    SIZEOF          reduce using rule 250 (try_block -> TRY compound_statement CATCH compound_statement .)
    PLUSOP          reduce using rule 250 (try_block -> TRY compound_statement CATCH compound_statement .)
    MINUSOP         reduce using rule 250 (try_block -> TRY compound_statement CATCH compound_statement .)
    NOTSYM          reduce using rule 250 (try_block -> TRY compound_statement CATCH compound_statement .)
    BNOP            reduce using rule 250 (try_block -> TRY compound_statement CATCH compound_statement .)
    MULTOP          reduce using rule 250 (try_block -> TRY compound_statement CATCH compound_statement .)
    BANDOP          reduce using rule 250 (try_block -> TRY compound_statement CATCH compound_statement .)
    NEW             reduce using rule 250 (try_block -> TRY compound_statement CATCH compound_statement .)
    DELETE          reduce using rule 250 (try_block -> TRY compound_statement CATCH compound_statement .)
    CHAR            reduce using rule 250 (try_block -> TRY compound_statement CATCH compound_statement .)
    SHORT           reduce using rule 250 (try_block -> TRY compound_statement CATCH compound_statement .)
    INT             reduce using rule 250 (try_block -> TRY compound_statement CATCH compound_statement .)
    LONG            reduce using rule 250 (try_block -> TRY compound_statement CATCH compound_statement .)
    SIGNED          reduce using rule 250 (try_block -> TRY compound_statement CATCH compound_statement .)
    UNSIGNED        reduce using rule 250 (try_block -> TRY compound_statement CATCH compound_statement .)
    FLOAT           reduce using rule 250 (try_block -> TRY compound_statement CATCH compound_statement .)
    DOUBLE          reduce using rule 250 (try_block -> TRY compound_statement CATCH compound_statement .)
    VOID            reduce using rule 250 (try_block -> TRY compound_statement CATCH compound_statement .)
    STRING          reduce using rule 250 (try_block -> TRY compound_statement CATCH compound_statement .)
    AUTO            reduce using rule 250 (try_block -> TRY compound_statement CATCH compound_statement .)
    TYPE            reduce using rule 250 (try_block -> TRY compound_statement CATCH compound_statement .)
    CLASS           reduce using rule 250 (try_block -> TRY compound_statement CATCH compound_statement .)
    STRUCT          reduce using rule 250 (try_block -> TRY compound_statement CATCH compound_statement .)
    THIS            reduce using rule 250 (try_block -> TRY compound_statement CATCH compound_statement .)
    LPAREN          reduce using rule 250 (try_block -> TRY compound_statement CATCH compound_statement .)
    DOUBLEBNOP      reduce using rule 250 (try_block -> TRY compound_statement CATCH compound_statement .)
    STRING_L        reduce using rule 250 (try_block -> TRY compound_statement CATCH compound_statement .)
    NUMBER          reduce using rule 250 (try_block -> TRY compound_statement CATCH compound_statement .)
    SCHAR           reduce using rule 250 (try_block -> TRY compound_statement CATCH compound_statement .)
    ELSE            reduce using rule 250 (try_block -> TRY compound_statement CATCH compound_statement .)


state 417

    (81) new_declarator -> new_declarator LSPAREN expression RSPAREN .

    MULTOP          reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    LSPAREN         reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    LPAREN          reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    EQUAL           reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    MULTEQOP        reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    DIVEQOP         reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    MODEQOP         reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    PLUSEQOP        reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    MINUSEQOP       reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    LSHIFTEQOP      reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    RSHIFTEQOP      reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    BANDEQOP        reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    BOREQOP         reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    DOTSTAR         reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    ARROWSTAR       reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    DIVOP           reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    MODOP           reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    PLUSOP          reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    MINUSOP         reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    LSHIFT          reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    RSHIFT          reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    LTCOMP          reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    GTCOMP          reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    LTECOMP         reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    GTECOMP         reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    EQCOMP          reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    NEQCOMP         reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    BANDOP          reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    XOROP           reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    OROP            reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    ANDOP           reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    QUESMARK        reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    RPAREN          reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    COMMA           reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    RSPAREN         reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    SEMICOLON       reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    RCPAREN         reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    COLON           reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    RTEMPLATE       reduce using rule 81 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)


state 418

    (247) selection_statement -> IF LPAREN expression RPAREN statement .
    (248) selection_statement -> IF LPAREN expression RPAREN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    RCPAREN         reduce using rule 247 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IDENTIFIER      reduce using rule 247 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CASE            reduce using rule 247 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 247 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 247 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LCPAREN         reduce using rule 247 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 247 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 247 (selection_statement -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 247 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DO              reduce using rule 247 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 247 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 247 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 247 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 247 (selection_statement -> IF LPAREN expression RPAREN statement .)
    GOTO            reduce using rule 247 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TRY             reduce using rule 247 (selection_statement -> IF LPAREN expression RPAREN statement .)
    THROW           reduce using rule 247 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CONST           reduce using rule 247 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ASM             reduce using rule 247 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TEMPLATE        reduce using rule 247 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TYPEDEF         reduce using rule 247 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DPLUSOP         reduce using rule 247 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DMINUSOP        reduce using rule 247 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SIZEOF          reduce using rule 247 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PLUSOP          reduce using rule 247 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MINUSOP         reduce using rule 247 (selection_statement -> IF LPAREN expression RPAREN statement .)
    NOTSYM          reduce using rule 247 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BNOP            reduce using rule 247 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MULTOP          reduce using rule 247 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BANDOP          reduce using rule 247 (selection_statement -> IF LPAREN expression RPAREN statement .)
    NEW             reduce using rule 247 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DELETE          reduce using rule 247 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 247 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SHORT           reduce using rule 247 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INT             reduce using rule 247 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LONG            reduce using rule 247 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SIGNED          reduce using rule 247 (selection_statement -> IF LPAREN expression RPAREN statement .)
    UNSIGNED        reduce using rule 247 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 247 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DOUBLE          reduce using rule 247 (selection_statement -> IF LPAREN expression RPAREN statement .)
    VOID            reduce using rule 247 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STRING          reduce using rule 247 (selection_statement -> IF LPAREN expression RPAREN statement .)
    AUTO            reduce using rule 247 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TYPE            reduce using rule 247 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CLASS           reduce using rule 247 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STRUCT          reduce using rule 247 (selection_statement -> IF LPAREN expression RPAREN statement .)
    THIS            reduce using rule 247 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 247 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DOUBLEBNOP      reduce using rule 247 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STRING_L        reduce using rule 247 (selection_statement -> IF LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 247 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SCHAR           reduce using rule 247 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 425

  ! ELSE            [ reduce using rule 247 (selection_statement -> IF LPAREN expression RPAREN statement .) ]


state 419

    (249) selection_statement -> SWITCH LPAREN expression RPAREN statement .

    RCPAREN         reduce using rule 249 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    IDENTIFIER      reduce using rule 249 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CASE            reduce using rule 249 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 249 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 249 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LCPAREN         reduce using rule 249 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    IF              reduce using rule 249 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 249 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 249 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DO              reduce using rule 249 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    FOR             reduce using rule 249 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 249 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 249 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 249 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    GOTO            reduce using rule 249 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    TRY             reduce using rule 249 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    THROW           reduce using rule 249 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CONST           reduce using rule 249 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    ASM             reduce using rule 249 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    TEMPLATE        reduce using rule 249 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    TYPEDEF         reduce using rule 249 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DPLUSOP         reduce using rule 249 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DMINUSOP        reduce using rule 249 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SIZEOF          reduce using rule 249 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    PLUSOP          reduce using rule 249 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    MINUSOP         reduce using rule 249 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    NOTSYM          reduce using rule 249 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    BNOP            reduce using rule 249 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    MULTOP          reduce using rule 249 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    BANDOP          reduce using rule 249 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    NEW             reduce using rule 249 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DELETE          reduce using rule 249 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 249 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SHORT           reduce using rule 249 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    INT             reduce using rule 249 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LONG            reduce using rule 249 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SIGNED          reduce using rule 249 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    UNSIGNED        reduce using rule 249 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 249 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DOUBLE          reduce using rule 249 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    VOID            reduce using rule 249 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    STRING          reduce using rule 249 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    AUTO            reduce using rule 249 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    TYPE            reduce using rule 249 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CLASS           reduce using rule 249 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    STRUCT          reduce using rule 249 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    THIS            reduce using rule 249 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 249 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DOUBLEBNOP      reduce using rule 249 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    STRING_L        reduce using rule 249 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 249 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SCHAR           reduce using rule 249 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 249 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)


state 420

    (254) iteration_statement -> WHILE LPAREN expression RPAREN statement .

    RCPAREN         reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    IDENTIFIER      reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CASE            reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LCPAREN         reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DO              reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    GOTO            reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TRY             reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    THROW           reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CONST           reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ASM             reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TEMPLATE        reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TYPEDEF         reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DPLUSOP         reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DMINUSOP        reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SIZEOF          reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PLUSOP          reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MINUSOP         reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    NOTSYM          reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BNOP            reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MULTOP          reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BANDOP          reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    NEW             reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DELETE          reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SHORT           reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INT             reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LONG            reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SIGNED          reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    UNSIGNED        reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DOUBLE          reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    VOID            reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STRING          reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    AUTO            reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TYPE            reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CLASS           reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STRUCT          reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    THIS            reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DOUBLEBNOP      reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STRING_L        reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SCHAR           reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 254 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)


state 421

    (255) iteration_statement -> DO statement WHILE LPAREN expression . RPAREN SEMICOLON
    (48) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 426
    COMMA           shift and go to state 273


state 422

    (256) iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON . expression RPAREN statement
    (258) iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON . RPAREN statement
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 428
    THROW           shift and go to state 190
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    THIS            shift and go to state 134
    LPAREN          shift and go to state 105
    IDENTIFIER      shift and go to state 50
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    expression                     shift and go to state 427
    assignment_expression          shift and go to state 188
    throw_expression               shift and go to state 189
    conditional_expression         shift and go to state 111
    unary_expression               shift and go to state 112
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    cast_expression                shift and go to state 118
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    logical_AND_expression         shift and go to state 123
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    inclusive_OR_expression        shift and go to state 132
    literal                        shift and go to state 133
    exclusive_OR_expression        shift and go to state 135
    AND_expression                 shift and go to state 139
    equality_expression            shift and go to state 140
    relational_expression          shift and go to state 141
    shift_expression               shift and go to state 142
    additive_expression            shift and go to state 143
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145

state 423

    (257) iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression . RPAREN statement
    (48) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 429
    COMMA           shift and go to state 273


state 424

    (259) iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN . statement
    (234) statement -> . labeled_statement
    (235) statement -> . expression_statement
    (236) statement -> . compound_statement
    (237) statement -> . selection_statement
    (238) statement -> . iteration_statement
    (239) statement -> . jump_statement
    (240) statement -> . declaration_statement
    (241) statement -> . try_block
    (251) labeled_statement -> . IDENTIFIER COLON statement
    (252) labeled_statement -> . CASE constant_expression COLON statement
    (253) labeled_statement -> . DEFAULT COLON statement
    (262) expression_statement -> . expression SEMICOLON
    (263) expression_statement -> . SEMICOLON
    (230) compound_statement -> . LCPAREN statement_list RCPAREN
    (231) compound_statement -> . LCPAREN RCPAREN
    (247) selection_statement -> . IF LPAREN expression RPAREN statement
    (248) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (249) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (254) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (255) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (256) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (257) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (258) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (259) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (242) jump_statement -> . BREAK SEMICOLON
    (243) jump_statement -> . CONTINUE SEMICOLON
    (244) jump_statement -> . RETURN expression SEMICOLON
    (245) jump_statement -> . RETURN SEMICOLON
    (246) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (264) declaration_statement -> . declaration
    (250) try_block -> . TRY compound_statement CATCH compound_statement
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (265) declaration -> . type_specifier_ declarator_list SEMICOLON
    (266) declaration -> . asm_declaration
    (267) declaration -> . function_definition
    (268) declaration -> . function_decl
    (269) declaration -> . class_define_specifier SEMICOLON
    (270) declaration -> . template_declaration
    (271) declaration -> . typedef_declarator
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (168) type_specifier_ -> . CONST type_specifier
    (169) type_specifier_ -> . type_specifier
    (287) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (225) function_definition -> . type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body
    (226) function_definition -> . type_specifier_ declarator LPAREN RPAREN fct_body
    (227) function_decl -> . type_specifier_ declarator LPAREN argument_declaration_list RPAREN
    (228) function_decl -> . type_specifier_ declarator LPAREN RPAREN
    (203) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (204) class_define_specifier -> . class_head LCPAREN RCPAREN
    (272) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (170) typedef_declarator -> . TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON
    (171) typedef_declarator -> . TYPEDEF type_specifier_ IDENTIFIER SEMICOLON
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (172) type_specifier -> . simple_type_name
    (173) type_specifier -> . complex_type_specifier
    (190) class_head -> . class_key IDENTIFIER base_spec
    (191) class_head -> . class_key IDENTIFIER
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (174) simple_type_name -> . CHAR
    (175) simple_type_name -> . SHORT
    (176) simple_type_name -> . INT
    (177) simple_type_name -> . LONG
    (178) simple_type_name -> . SIGNED
    (179) simple_type_name -> . UNSIGNED
    (180) simple_type_name -> . FLOAT
    (181) simple_type_name -> . DOUBLE
    (182) simple_type_name -> . VOID
    (183) simple_type_name -> . STRING
    (184) simple_type_name -> . AUTO
    (185) complex_type_specifier -> . class_key IDENTIFIER
    (186) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (187) complex_type_specifier -> . TYPE IDENTIFIER
    (188) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (201) class_key -> . CLASS
    (202) class_key -> . STRUCT
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 288
    CASE            shift and go to state 289
    DEFAULT         shift and go to state 290
    SEMICOLON       shift and go to state 292
    LCPAREN         shift and go to state 194
    IF              shift and go to state 293
    SWITCH          shift and go to state 294
    WHILE           shift and go to state 295
    DO              shift and go to state 296
    FOR             shift and go to state 297
    BREAK           shift and go to state 298
    CONTINUE        shift and go to state 299
    RETURN          shift and go to state 300
    GOTO            shift and go to state 301
    TRY             shift and go to state 303
    THROW           shift and go to state 190
    CONST           shift and go to state 16
    ASM             shift and go to state 18
    TEMPLATE        shift and go to state 20
    TYPEDEF         shift and go to state 21
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38
    THIS            shift and go to state 134
    LPAREN          shift and go to state 105
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    statement                      shift and go to state 430
    labeled_statement              shift and go to state 280
    expression_statement           shift and go to state 281
    compound_statement             shift and go to state 282
    selection_statement            shift and go to state 283
    iteration_statement            shift and go to state 284
    jump_statement                 shift and go to state 285
    declaration_statement          shift and go to state 286
    try_block                      shift and go to state 287
    expression                     shift and go to state 291
    declaration                    shift and go to state 302
    assignment_expression          shift and go to state 188
    throw_expression               shift and go to state 189
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    function_decl                  shift and go to state 12
    class_define_specifier         shift and go to state 13
    template_declaration           shift and go to state 14
    typedef_declarator             shift and go to state 15
    conditional_expression         shift and go to state 111
    unary_expression               shift and go to state 112
    type_specifier                 shift and go to state 17
    class_head                     shift and go to state 19
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    cast_expression                shift and go to state 118
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 24
    logical_AND_expression         shift and go to state 123
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    inclusive_OR_expression        shift and go to state 132
    literal                        shift and go to state 133
    exclusive_OR_expression        shift and go to state 135
    AND_expression                 shift and go to state 139
    equality_expression            shift and go to state 140
    relational_expression          shift and go to state 141
    shift_expression               shift and go to state 142
    additive_expression            shift and go to state 143
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145

state 425

    (248) selection_statement -> IF LPAREN expression RPAREN statement ELSE . statement
    (234) statement -> . labeled_statement
    (235) statement -> . expression_statement
    (236) statement -> . compound_statement
    (237) statement -> . selection_statement
    (238) statement -> . iteration_statement
    (239) statement -> . jump_statement
    (240) statement -> . declaration_statement
    (241) statement -> . try_block
    (251) labeled_statement -> . IDENTIFIER COLON statement
    (252) labeled_statement -> . CASE constant_expression COLON statement
    (253) labeled_statement -> . DEFAULT COLON statement
    (262) expression_statement -> . expression SEMICOLON
    (263) expression_statement -> . SEMICOLON
    (230) compound_statement -> . LCPAREN statement_list RCPAREN
    (231) compound_statement -> . LCPAREN RCPAREN
    (247) selection_statement -> . IF LPAREN expression RPAREN statement
    (248) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (249) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (254) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (255) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (256) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (257) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (258) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (259) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (242) jump_statement -> . BREAK SEMICOLON
    (243) jump_statement -> . CONTINUE SEMICOLON
    (244) jump_statement -> . RETURN expression SEMICOLON
    (245) jump_statement -> . RETURN SEMICOLON
    (246) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (264) declaration_statement -> . declaration
    (250) try_block -> . TRY compound_statement CATCH compound_statement
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (265) declaration -> . type_specifier_ declarator_list SEMICOLON
    (266) declaration -> . asm_declaration
    (267) declaration -> . function_definition
    (268) declaration -> . function_decl
    (269) declaration -> . class_define_specifier SEMICOLON
    (270) declaration -> . template_declaration
    (271) declaration -> . typedef_declarator
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (168) type_specifier_ -> . CONST type_specifier
    (169) type_specifier_ -> . type_specifier
    (287) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (225) function_definition -> . type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body
    (226) function_definition -> . type_specifier_ declarator LPAREN RPAREN fct_body
    (227) function_decl -> . type_specifier_ declarator LPAREN argument_declaration_list RPAREN
    (228) function_decl -> . type_specifier_ declarator LPAREN RPAREN
    (203) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (204) class_define_specifier -> . class_head LCPAREN RCPAREN
    (272) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (170) typedef_declarator -> . TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON
    (171) typedef_declarator -> . TYPEDEF type_specifier_ IDENTIFIER SEMICOLON
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (172) type_specifier -> . simple_type_name
    (173) type_specifier -> . complex_type_specifier
    (190) class_head -> . class_key IDENTIFIER base_spec
    (191) class_head -> . class_key IDENTIFIER
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (174) simple_type_name -> . CHAR
    (175) simple_type_name -> . SHORT
    (176) simple_type_name -> . INT
    (177) simple_type_name -> . LONG
    (178) simple_type_name -> . SIGNED
    (179) simple_type_name -> . UNSIGNED
    (180) simple_type_name -> . FLOAT
    (181) simple_type_name -> . DOUBLE
    (182) simple_type_name -> . VOID
    (183) simple_type_name -> . STRING
    (184) simple_type_name -> . AUTO
    (185) complex_type_specifier -> . class_key IDENTIFIER
    (186) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (187) complex_type_specifier -> . TYPE IDENTIFIER
    (188) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (201) class_key -> . CLASS
    (202) class_key -> . STRUCT
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 288
    CASE            shift and go to state 289
    DEFAULT         shift and go to state 290
    SEMICOLON       shift and go to state 292
    LCPAREN         shift and go to state 194
    IF              shift and go to state 293
    SWITCH          shift and go to state 294
    WHILE           shift and go to state 295
    DO              shift and go to state 296
    FOR             shift and go to state 297
    BREAK           shift and go to state 298
    CONTINUE        shift and go to state 299
    RETURN          shift and go to state 300
    GOTO            shift and go to state 301
    TRY             shift and go to state 303
    THROW           shift and go to state 190
    CONST           shift and go to state 16
    ASM             shift and go to state 18
    TEMPLATE        shift and go to state 20
    TYPEDEF         shift and go to state 21
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38
    THIS            shift and go to state 134
    LPAREN          shift and go to state 105
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    expression                     shift and go to state 291
    statement                      shift and go to state 431
    labeled_statement              shift and go to state 280
    expression_statement           shift and go to state 281
    compound_statement             shift and go to state 282
    selection_statement            shift and go to state 283
    iteration_statement            shift and go to state 284
    jump_statement                 shift and go to state 285
    declaration_statement          shift and go to state 286
    try_block                      shift and go to state 287
    declaration                    shift and go to state 302
    assignment_expression          shift and go to state 188
    throw_expression               shift and go to state 189
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    function_decl                  shift and go to state 12
    class_define_specifier         shift and go to state 13
    template_declaration           shift and go to state 14
    typedef_declarator             shift and go to state 15
    conditional_expression         shift and go to state 111
    unary_expression               shift and go to state 112
    type_specifier                 shift and go to state 17
    class_head                     shift and go to state 19
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    cast_expression                shift and go to state 118
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 24
    logical_AND_expression         shift and go to state 123
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    inclusive_OR_expression        shift and go to state 132
    literal                        shift and go to state 133
    exclusive_OR_expression        shift and go to state 135
    AND_expression                 shift and go to state 139
    equality_expression            shift and go to state 140
    relational_expression          shift and go to state 141
    shift_expression               shift and go to state 142
    additive_expression            shift and go to state 143
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145

state 426

    (255) iteration_statement -> DO statement WHILE LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 432


state 427

    (256) iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression . RPAREN statement
    (48) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 433
    COMMA           shift and go to state 273


state 428

    (258) iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN . statement
    (234) statement -> . labeled_statement
    (235) statement -> . expression_statement
    (236) statement -> . compound_statement
    (237) statement -> . selection_statement
    (238) statement -> . iteration_statement
    (239) statement -> . jump_statement
    (240) statement -> . declaration_statement
    (241) statement -> . try_block
    (251) labeled_statement -> . IDENTIFIER COLON statement
    (252) labeled_statement -> . CASE constant_expression COLON statement
    (253) labeled_statement -> . DEFAULT COLON statement
    (262) expression_statement -> . expression SEMICOLON
    (263) expression_statement -> . SEMICOLON
    (230) compound_statement -> . LCPAREN statement_list RCPAREN
    (231) compound_statement -> . LCPAREN RCPAREN
    (247) selection_statement -> . IF LPAREN expression RPAREN statement
    (248) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (249) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (254) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (255) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (256) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (257) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (258) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (259) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (242) jump_statement -> . BREAK SEMICOLON
    (243) jump_statement -> . CONTINUE SEMICOLON
    (244) jump_statement -> . RETURN expression SEMICOLON
    (245) jump_statement -> . RETURN SEMICOLON
    (246) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (264) declaration_statement -> . declaration
    (250) try_block -> . TRY compound_statement CATCH compound_statement
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (265) declaration -> . type_specifier_ declarator_list SEMICOLON
    (266) declaration -> . asm_declaration
    (267) declaration -> . function_definition
    (268) declaration -> . function_decl
    (269) declaration -> . class_define_specifier SEMICOLON
    (270) declaration -> . template_declaration
    (271) declaration -> . typedef_declarator
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (168) type_specifier_ -> . CONST type_specifier
    (169) type_specifier_ -> . type_specifier
    (287) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (225) function_definition -> . type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body
    (226) function_definition -> . type_specifier_ declarator LPAREN RPAREN fct_body
    (227) function_decl -> . type_specifier_ declarator LPAREN argument_declaration_list RPAREN
    (228) function_decl -> . type_specifier_ declarator LPAREN RPAREN
    (203) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (204) class_define_specifier -> . class_head LCPAREN RCPAREN
    (272) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (170) typedef_declarator -> . TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON
    (171) typedef_declarator -> . TYPEDEF type_specifier_ IDENTIFIER SEMICOLON
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (172) type_specifier -> . simple_type_name
    (173) type_specifier -> . complex_type_specifier
    (190) class_head -> . class_key IDENTIFIER base_spec
    (191) class_head -> . class_key IDENTIFIER
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (174) simple_type_name -> . CHAR
    (175) simple_type_name -> . SHORT
    (176) simple_type_name -> . INT
    (177) simple_type_name -> . LONG
    (178) simple_type_name -> . SIGNED
    (179) simple_type_name -> . UNSIGNED
    (180) simple_type_name -> . FLOAT
    (181) simple_type_name -> . DOUBLE
    (182) simple_type_name -> . VOID
    (183) simple_type_name -> . STRING
    (184) simple_type_name -> . AUTO
    (185) complex_type_specifier -> . class_key IDENTIFIER
    (186) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (187) complex_type_specifier -> . TYPE IDENTIFIER
    (188) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (201) class_key -> . CLASS
    (202) class_key -> . STRUCT
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 288
    CASE            shift and go to state 289
    DEFAULT         shift and go to state 290
    SEMICOLON       shift and go to state 292
    LCPAREN         shift and go to state 194
    IF              shift and go to state 293
    SWITCH          shift and go to state 294
    WHILE           shift and go to state 295
    DO              shift and go to state 296
    FOR             shift and go to state 297
    BREAK           shift and go to state 298
    CONTINUE        shift and go to state 299
    RETURN          shift and go to state 300
    GOTO            shift and go to state 301
    TRY             shift and go to state 303
    THROW           shift and go to state 190
    CONST           shift and go to state 16
    ASM             shift and go to state 18
    TEMPLATE        shift and go to state 20
    TYPEDEF         shift and go to state 21
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38
    THIS            shift and go to state 134
    LPAREN          shift and go to state 105
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    expression                     shift and go to state 291
    statement                      shift and go to state 434
    labeled_statement              shift and go to state 280
    expression_statement           shift and go to state 281
    compound_statement             shift and go to state 282
    selection_statement            shift and go to state 283
    iteration_statement            shift and go to state 284
    jump_statement                 shift and go to state 285
    declaration_statement          shift and go to state 286
    try_block                      shift and go to state 287
    declaration                    shift and go to state 302
    assignment_expression          shift and go to state 188
    throw_expression               shift and go to state 189
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    function_decl                  shift and go to state 12
    class_define_specifier         shift and go to state 13
    template_declaration           shift and go to state 14
    typedef_declarator             shift and go to state 15
    conditional_expression         shift and go to state 111
    unary_expression               shift and go to state 112
    type_specifier                 shift and go to state 17
    class_head                     shift and go to state 19
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    cast_expression                shift and go to state 118
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 24
    logical_AND_expression         shift and go to state 123
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    inclusive_OR_expression        shift and go to state 132
    literal                        shift and go to state 133
    exclusive_OR_expression        shift and go to state 135
    AND_expression                 shift and go to state 139
    equality_expression            shift and go to state 140
    relational_expression          shift and go to state 141
    shift_expression               shift and go to state 142
    additive_expression            shift and go to state 143
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145

state 429

    (257) iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN . statement
    (234) statement -> . labeled_statement
    (235) statement -> . expression_statement
    (236) statement -> . compound_statement
    (237) statement -> . selection_statement
    (238) statement -> . iteration_statement
    (239) statement -> . jump_statement
    (240) statement -> . declaration_statement
    (241) statement -> . try_block
    (251) labeled_statement -> . IDENTIFIER COLON statement
    (252) labeled_statement -> . CASE constant_expression COLON statement
    (253) labeled_statement -> . DEFAULT COLON statement
    (262) expression_statement -> . expression SEMICOLON
    (263) expression_statement -> . SEMICOLON
    (230) compound_statement -> . LCPAREN statement_list RCPAREN
    (231) compound_statement -> . LCPAREN RCPAREN
    (247) selection_statement -> . IF LPAREN expression RPAREN statement
    (248) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (249) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (254) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (255) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (256) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (257) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (258) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (259) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (242) jump_statement -> . BREAK SEMICOLON
    (243) jump_statement -> . CONTINUE SEMICOLON
    (244) jump_statement -> . RETURN expression SEMICOLON
    (245) jump_statement -> . RETURN SEMICOLON
    (246) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (264) declaration_statement -> . declaration
    (250) try_block -> . TRY compound_statement CATCH compound_statement
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (265) declaration -> . type_specifier_ declarator_list SEMICOLON
    (266) declaration -> . asm_declaration
    (267) declaration -> . function_definition
    (268) declaration -> . function_decl
    (269) declaration -> . class_define_specifier SEMICOLON
    (270) declaration -> . template_declaration
    (271) declaration -> . typedef_declarator
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (168) type_specifier_ -> . CONST type_specifier
    (169) type_specifier_ -> . type_specifier
    (287) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (225) function_definition -> . type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body
    (226) function_definition -> . type_specifier_ declarator LPAREN RPAREN fct_body
    (227) function_decl -> . type_specifier_ declarator LPAREN argument_declaration_list RPAREN
    (228) function_decl -> . type_specifier_ declarator LPAREN RPAREN
    (203) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (204) class_define_specifier -> . class_head LCPAREN RCPAREN
    (272) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (170) typedef_declarator -> . TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON
    (171) typedef_declarator -> . TYPEDEF type_specifier_ IDENTIFIER SEMICOLON
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (172) type_specifier -> . simple_type_name
    (173) type_specifier -> . complex_type_specifier
    (190) class_head -> . class_key IDENTIFIER base_spec
    (191) class_head -> . class_key IDENTIFIER
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (174) simple_type_name -> . CHAR
    (175) simple_type_name -> . SHORT
    (176) simple_type_name -> . INT
    (177) simple_type_name -> . LONG
    (178) simple_type_name -> . SIGNED
    (179) simple_type_name -> . UNSIGNED
    (180) simple_type_name -> . FLOAT
    (181) simple_type_name -> . DOUBLE
    (182) simple_type_name -> . VOID
    (183) simple_type_name -> . STRING
    (184) simple_type_name -> . AUTO
    (185) complex_type_specifier -> . class_key IDENTIFIER
    (186) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (187) complex_type_specifier -> . TYPE IDENTIFIER
    (188) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (201) class_key -> . CLASS
    (202) class_key -> . STRUCT
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 288
    CASE            shift and go to state 289
    DEFAULT         shift and go to state 290
    SEMICOLON       shift and go to state 292
    LCPAREN         shift and go to state 194
    IF              shift and go to state 293
    SWITCH          shift and go to state 294
    WHILE           shift and go to state 295
    DO              shift and go to state 296
    FOR             shift and go to state 297
    BREAK           shift and go to state 298
    CONTINUE        shift and go to state 299
    RETURN          shift and go to state 300
    GOTO            shift and go to state 301
    TRY             shift and go to state 303
    THROW           shift and go to state 190
    CONST           shift and go to state 16
    ASM             shift and go to state 18
    TEMPLATE        shift and go to state 20
    TYPEDEF         shift and go to state 21
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38
    THIS            shift and go to state 134
    LPAREN          shift and go to state 105
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    expression                     shift and go to state 291
    statement                      shift and go to state 435
    labeled_statement              shift and go to state 280
    expression_statement           shift and go to state 281
    compound_statement             shift and go to state 282
    selection_statement            shift and go to state 283
    iteration_statement            shift and go to state 284
    jump_statement                 shift and go to state 285
    declaration_statement          shift and go to state 286
    try_block                      shift and go to state 287
    declaration                    shift and go to state 302
    assignment_expression          shift and go to state 188
    throw_expression               shift and go to state 189
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    function_decl                  shift and go to state 12
    class_define_specifier         shift and go to state 13
    template_declaration           shift and go to state 14
    typedef_declarator             shift and go to state 15
    conditional_expression         shift and go to state 111
    unary_expression               shift and go to state 112
    type_specifier                 shift and go to state 17
    class_head                     shift and go to state 19
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    cast_expression                shift and go to state 118
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 24
    logical_AND_expression         shift and go to state 123
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    inclusive_OR_expression        shift and go to state 132
    literal                        shift and go to state 133
    exclusive_OR_expression        shift and go to state 135
    AND_expression                 shift and go to state 139
    equality_expression            shift and go to state 140
    relational_expression          shift and go to state 141
    shift_expression               shift and go to state 142
    additive_expression            shift and go to state 143
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145

state 430

    (259) iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .

    RCPAREN         reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    IDENTIFIER      reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    CASE            reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    DEFAULT         reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    SEMICOLON       reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    LCPAREN         reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    IF              reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    SWITCH          reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    WHILE           reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    DO              reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    FOR             reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    BREAK           reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    CONTINUE        reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    RETURN          reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    GOTO            reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    TRY             reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    THROW           reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    CONST           reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    ASM             reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    TEMPLATE        reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    TYPEDEF         reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    DPLUSOP         reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    DMINUSOP        reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    SIZEOF          reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    PLUSOP          reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    MINUSOP         reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    NOTSYM          reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    BNOP            reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    MULTOP          reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    BANDOP          reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    NEW             reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    DELETE          reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    CHAR            reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    SHORT           reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    INT             reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    LONG            reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    SIGNED          reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    UNSIGNED        reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    FLOAT           reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    DOUBLE          reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    VOID            reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    STRING          reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    AUTO            reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    TYPE            reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    CLASS           reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    STRUCT          reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    THIS            reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    LPAREN          reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    DOUBLEBNOP      reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    STRING_L        reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    NUMBER          reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    SCHAR           reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    ELSE            reduce using rule 259 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)


state 431

    (248) selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .

    RCPAREN         reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IDENTIFIER      reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CASE            reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DEFAULT         reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SEMICOLON       reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LCPAREN         reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SWITCH          reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DO              reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CONTINUE        reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    GOTO            reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TRY             reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    THROW           reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CONST           reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ASM             reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TEMPLATE        reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TYPEDEF         reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DPLUSOP         reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DMINUSOP        reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SIZEOF          reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUSOP          reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUSOP         reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NOTSYM          reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BNOP            reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MULTOP          reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BANDOP          reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NEW             reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DELETE          reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CHAR            reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SHORT           reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INT             reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LONG            reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SIGNED          reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    UNSIGNED        reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FLOAT           reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DOUBLE          reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    VOID            reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRING          reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    AUTO            reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TYPE            reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CLASS           reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRUCT          reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    THIS            reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DOUBLEBNOP      reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRING_L        reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NUMBER          reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SCHAR           reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 248 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)


state 432

    (255) iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .

    RCPAREN         reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    CASE            reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    LCPAREN         reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    IF              reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SWITCH          reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    WHILE           reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DO              reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    FOR             reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    BREAK           reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    RETURN          reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    GOTO            reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    TRY             reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    THROW           reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    CONST           reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    ASM             reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    TEMPLATE        reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    TYPEDEF         reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DPLUSOP         reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DMINUSOP        reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SIZEOF          reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    PLUSOP          reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    MINUSOP         reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    NOTSYM          reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    BNOP            reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    MULTOP          reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    BANDOP          reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    NEW             reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DELETE          reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    CHAR            reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SHORT           reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    INT             reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    LONG            reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SIGNED          reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    UNSIGNED        reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    FLOAT           reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DOUBLE          reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    VOID            reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    STRING          reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    AUTO            reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    TYPE            reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    CLASS           reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    STRUCT          reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    THIS            reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    LPAREN          reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DOUBLEBNOP      reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    STRING_L        reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    NUMBER          reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SCHAR           reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    ELSE            reduce using rule 255 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)


state 433

    (256) iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN . statement
    (234) statement -> . labeled_statement
    (235) statement -> . expression_statement
    (236) statement -> . compound_statement
    (237) statement -> . selection_statement
    (238) statement -> . iteration_statement
    (239) statement -> . jump_statement
    (240) statement -> . declaration_statement
    (241) statement -> . try_block
    (251) labeled_statement -> . IDENTIFIER COLON statement
    (252) labeled_statement -> . CASE constant_expression COLON statement
    (253) labeled_statement -> . DEFAULT COLON statement
    (262) expression_statement -> . expression SEMICOLON
    (263) expression_statement -> . SEMICOLON
    (230) compound_statement -> . LCPAREN statement_list RCPAREN
    (231) compound_statement -> . LCPAREN RCPAREN
    (247) selection_statement -> . IF LPAREN expression RPAREN statement
    (248) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (249) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (254) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (255) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (256) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (257) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (258) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (259) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (242) jump_statement -> . BREAK SEMICOLON
    (243) jump_statement -> . CONTINUE SEMICOLON
    (244) jump_statement -> . RETURN expression SEMICOLON
    (245) jump_statement -> . RETURN SEMICOLON
    (246) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (264) declaration_statement -> . declaration
    (250) try_block -> . TRY compound_statement CATCH compound_statement
    (46) expression -> . assignment_expression
    (47) expression -> . throw_expression
    (48) expression -> . expression COMMA assignment_expression
    (265) declaration -> . type_specifier_ declarator_list SEMICOLON
    (266) declaration -> . asm_declaration
    (267) declaration -> . function_definition
    (268) declaration -> . function_decl
    (269) declaration -> . class_define_specifier SEMICOLON
    (270) declaration -> . template_declaration
    (271) declaration -> . typedef_declarator
    (51) assignment_expression -> . conditional_expression
    (52) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (49) throw_expression -> . THROW expression
    (50) throw_expression -> . THROW
    (168) type_specifier_ -> . CONST type_specifier
    (169) type_specifier_ -> . type_specifier
    (287) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (225) function_definition -> . type_specifier_ declarator LPAREN argument_declaration_list RPAREN fct_body
    (226) function_definition -> . type_specifier_ declarator LPAREN RPAREN fct_body
    (227) function_decl -> . type_specifier_ declarator LPAREN argument_declaration_list RPAREN
    (228) function_decl -> . type_specifier_ declarator LPAREN RPAREN
    (203) class_define_specifier -> . class_head LCPAREN member_list RCPAREN
    (204) class_define_specifier -> . class_head LCPAREN RCPAREN
    (272) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (170) typedef_declarator -> . TYPEDEF type_specifier_ abstract_declarator IDENTIFIER SEMICOLON
    (171) typedef_declarator -> . TYPEDEF type_specifier_ IDENTIFIER SEMICOLON
    (13) conditional_expression -> . logical_OR_expression
    (14) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (63) unary_expression -> . postfix_expression
    (64) unary_expression -> . DPLUSOP unary_expression
    (65) unary_expression -> . DMINUSOP unary_expression
    (66) unary_expression -> . unary1_operator cast_expression
    (67) unary_expression -> . unary2_operator cast_expression
    (68) unary_expression -> . SIZEOF unary_expression
    (69) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (70) unary_expression -> . allocation_expression
    (71) unary_expression -> . deallocation_expression
    (172) type_specifier -> . simple_type_name
    (173) type_specifier -> . complex_type_specifier
    (190) class_head -> . class_key IDENTIFIER base_spec
    (191) class_head -> . class_key IDENTIFIER
    (15) logical_OR_expression -> . logical_AND_expression
    (16) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (91) postfix_expression -> . primary_expression
    (92) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (93) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (94) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (95) postfix_expression -> . postfix_expression LPAREN RPAREN
    (96) postfix_expression -> . postfix_expression DOT name
    (97) postfix_expression -> . postfix_expression ARROW name
    (98) postfix_expression -> . postfix_expression DPLUSOP
    (99) postfix_expression -> . postfix_expression DMINUSOP
    (85) unary1_operator -> . PLUSOP
    (86) unary1_operator -> . MINUSOP
    (87) unary1_operator -> . NOTSYM
    (88) unary1_operator -> . BNOP
    (89) unary2_operator -> . MULTOP
    (90) unary2_operator -> . BANDOP
    (73) allocation_expression -> . NEW new_type_name new_initializer
    (74) allocation_expression -> . NEW new_type_name
    (75) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (76) allocation_expression -> . NEW LPAREN type_name RPAREN
    (72) deallocation_expression -> . DELETE cast_expression
    (174) simple_type_name -> . CHAR
    (175) simple_type_name -> . SHORT
    (176) simple_type_name -> . INT
    (177) simple_type_name -> . LONG
    (178) simple_type_name -> . SIGNED
    (179) simple_type_name -> . UNSIGNED
    (180) simple_type_name -> . FLOAT
    (181) simple_type_name -> . DOUBLE
    (182) simple_type_name -> . VOID
    (183) simple_type_name -> . STRING
    (184) simple_type_name -> . AUTO
    (185) complex_type_specifier -> . class_key IDENTIFIER
    (186) complex_type_specifier -> . class_key IDENTIFIER template_class_name
    (187) complex_type_specifier -> . TYPE IDENTIFIER
    (188) complex_type_specifier -> . TYPE IDENTIFIER template_class_name
    (201) class_key -> . CLASS
    (202) class_key -> . STRUCT
    (17) logical_AND_expression -> . inclusive_OR_expression
    (18) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (100) primary_expression -> . name
    (101) primary_expression -> . literal
    (102) primary_expression -> . THIS
    (103) primary_expression -> . LPAREN expression RPAREN
    (19) inclusive_OR_expression -> . exclusive_OR_expression
    (20) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (125) name -> . IDENTIFIER
    (126) name -> . DOUBLEBNOP IDENTIFIER
    (104) literal -> . STRING_L
    (105) literal -> . NUMBER
    (106) literal -> . SCHAR
    (21) exclusive_OR_expression -> . AND_expression
    (22) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (23) AND_expression -> . equality_expression
    (24) AND_expression -> . AND_expression BANDOP equality_expression
    (25) equality_expression -> . relational_expression
    (26) equality_expression -> . equality_expression EQCOMP relational_expression
    (27) equality_expression -> . equality_expression NEQCOMP relational_expression
    (28) relational_expression -> . shift_expression
    (29) relational_expression -> . relational_expression LTCOMP shift_expression
    (30) relational_expression -> . relational_expression GTCOMP shift_expression
    (31) relational_expression -> . relational_expression LTECOMP shift_expression
    (32) relational_expression -> . relational_expression GTECOMP shift_expression
    (33) shift_expression -> . additive_expression
    (34) shift_expression -> . shift_expression LSHIFT additive_expression
    (35) shift_expression -> . shift_expression RSHIFT additive_expression
    (36) additive_expression -> . multiplicative_expression
    (37) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (38) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (39) multiplicative_expression -> . pm_expression
    (40) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (41) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (42) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (43) pm_expression -> . cast_expression
    (44) pm_expression -> . pm_expression DOTSTAR cast_expression
    (45) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (107) cast_expression -> . unary_expression
    (108) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 288
    CASE            shift and go to state 289
    DEFAULT         shift and go to state 290
    SEMICOLON       shift and go to state 292
    LCPAREN         shift and go to state 194
    IF              shift and go to state 293
    SWITCH          shift and go to state 294
    WHILE           shift and go to state 295
    DO              shift and go to state 296
    FOR             shift and go to state 297
    BREAK           shift and go to state 298
    CONTINUE        shift and go to state 299
    RETURN          shift and go to state 300
    GOTO            shift and go to state 301
    TRY             shift and go to state 303
    THROW           shift and go to state 190
    CONST           shift and go to state 16
    ASM             shift and go to state 18
    TEMPLATE        shift and go to state 20
    TYPEDEF         shift and go to state 21
    DPLUSOP         shift and go to state 115
    DMINUSOP        shift and go to state 116
    SIZEOF          shift and go to state 120
    PLUSOP          shift and go to state 126
    MINUSOP         shift and go to state 127
    NOTSYM          shift and go to state 128
    BNOP            shift and go to state 129
    MULTOP          shift and go to state 52
    BANDOP          shift and go to state 53
    NEW             shift and go to state 130
    DELETE          shift and go to state 131
    CHAR            shift and go to state 25
    SHORT           shift and go to state 26
    INT             shift and go to state 27
    LONG            shift and go to state 28
    SIGNED          shift and go to state 29
    UNSIGNED        shift and go to state 30
    FLOAT           shift and go to state 31
    DOUBLE          shift and go to state 32
    VOID            shift and go to state 33
    STRING          shift and go to state 34
    AUTO            shift and go to state 35
    TYPE            shift and go to state 36
    CLASS           shift and go to state 37
    STRUCT          shift and go to state 38
    THIS            shift and go to state 134
    LPAREN          shift and go to state 105
    DOUBLEBNOP      shift and go to state 51
    STRING_L        shift and go to state 136
    NUMBER          shift and go to state 137
    SCHAR           shift and go to state 138

    expression                     shift and go to state 291
    statement                      shift and go to state 436
    labeled_statement              shift and go to state 280
    expression_statement           shift and go to state 281
    compound_statement             shift and go to state 282
    selection_statement            shift and go to state 283
    iteration_statement            shift and go to state 284
    jump_statement                 shift and go to state 285
    declaration_statement          shift and go to state 286
    try_block                      shift and go to state 287
    declaration                    shift and go to state 302
    assignment_expression          shift and go to state 188
    throw_expression               shift and go to state 189
    type_specifier_                shift and go to state 9
    asm_declaration                shift and go to state 10
    function_definition            shift and go to state 11
    function_decl                  shift and go to state 12
    class_define_specifier         shift and go to state 13
    template_declaration           shift and go to state 14
    typedef_declarator             shift and go to state 15
    conditional_expression         shift and go to state 111
    unary_expression               shift and go to state 112
    type_specifier                 shift and go to state 17
    class_head                     shift and go to state 19
    logical_OR_expression          shift and go to state 113
    postfix_expression             shift and go to state 114
    unary1_operator                shift and go to state 117
    cast_expression                shift and go to state 118
    unary2_operator                shift and go to state 119
    allocation_expression          shift and go to state 121
    deallocation_expression        shift and go to state 122
    simple_type_name               shift and go to state 22
    complex_type_specifier         shift and go to state 23
    class_key                      shift and go to state 24
    logical_AND_expression         shift and go to state 123
    primary_expression             shift and go to state 124
    name                           shift and go to state 125
    inclusive_OR_expression        shift and go to state 132
    literal                        shift and go to state 133
    exclusive_OR_expression        shift and go to state 135
    AND_expression                 shift and go to state 139
    equality_expression            shift and go to state 140
    relational_expression          shift and go to state 141
    shift_expression               shift and go to state 142
    additive_expression            shift and go to state 143
    multiplicative_expression      shift and go to state 144
    pm_expression                  shift and go to state 145

state 434

    (258) iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .

    RCPAREN         reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    IDENTIFIER      reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    CASE            reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    DEFAULT         reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    SEMICOLON       reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    LCPAREN         reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    IF              reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    SWITCH          reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    WHILE           reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    DO              reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    FOR             reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    BREAK           reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    CONTINUE        reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    RETURN          reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    GOTO            reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    TRY             reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    THROW           reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    CONST           reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    ASM             reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    TEMPLATE        reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    TYPEDEF         reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    DPLUSOP         reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    DMINUSOP        reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    SIZEOF          reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    PLUSOP          reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    MINUSOP         reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    NOTSYM          reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    BNOP            reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    MULTOP          reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    BANDOP          reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    NEW             reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    DELETE          reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    CHAR            reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    SHORT           reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    INT             reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    LONG            reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    SIGNED          reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    UNSIGNED        reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    FLOAT           reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    DOUBLE          reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    VOID            reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    STRING          reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    AUTO            reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    TYPE            reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    CLASS           reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    STRUCT          reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    THIS            reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    LPAREN          reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    DOUBLEBNOP      reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    STRING_L        reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    NUMBER          reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    SCHAR           reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    ELSE            reduce using rule 258 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)


state 435

    (257) iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .

    RCPAREN         reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    IDENTIFIER      reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    CASE            reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    DEFAULT         reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    SEMICOLON       reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    LCPAREN         reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    IF              reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    SWITCH          reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    WHILE           reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    DO              reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    FOR             reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    BREAK           reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    CONTINUE        reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    RETURN          reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    GOTO            reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    TRY             reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    THROW           reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    CONST           reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    ASM             reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    TEMPLATE        reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    TYPEDEF         reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    DPLUSOP         reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    DMINUSOP        reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    SIZEOF          reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    PLUSOP          reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    MINUSOP         reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    NOTSYM          reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    BNOP            reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    MULTOP          reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    BANDOP          reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    NEW             reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    DELETE          reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    CHAR            reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    SHORT           reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    INT             reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    LONG            reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    SIGNED          reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    UNSIGNED        reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    FLOAT           reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    DOUBLE          reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    VOID            reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    STRING          reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    AUTO            reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    TYPE            reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    CLASS           reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    STRUCT          reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    THIS            reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    LPAREN          reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    DOUBLEBNOP      reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    STRING_L        reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    NUMBER          reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    SCHAR           reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    ELSE            reduce using rule 257 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)


state 436

    (256) iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .

    RCPAREN         reduce using rule 256 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    IDENTIFIER      reduce using rule 256 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    CASE            reduce using rule 256 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    DEFAULT         reduce using rule 256 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    SEMICOLON       reduce using rule 256 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    LCPAREN         reduce using rule 256 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    IF              reduce using rule 256 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    SWITCH          reduce using rule 256 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    WHILE           reduce using rule 256 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    DO              reduce using rule 256 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    FOR             reduce using rule 256 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    BREAK           reduce using rule 256 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    CONTINUE        reduce using rule 256 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    RETURN          reduce using rule 256 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    GOTO            reduce using rule 256 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    TRY             reduce using rule 256 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    THROW           reduce using rule 256 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    CONST           reduce using rule 256 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    ASM             reduce using rule 256 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    TEMPLATE        reduce using rule 256 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    TYPEDEF         reduce using rule 256 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    DPLUSOP         reduce using rule 256 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    DMINUSOP        reduce using rule 256 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    SIZEOF          reduce using rule 256 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    PLUSOP          reduce using rule 256 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    MINUSOP         reduce using rule 256 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    NOTSYM          reduce using rule 256 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    BNOP            reduce using rule 256 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    MULTOP          reduce using rule 256 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    BANDOP          reduce using rule 256 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    NEW             reduce using rule 256 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    DELETE          reduce using rule 256 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    CHAR            reduce using rule 256 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    SHORT           reduce using rule 256 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    INT             reduce using rule 256 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    LONG            reduce using rule 256 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    SIGNED          reduce using rule 256 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    UNSIGNED        reduce using rule 256 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    FLOAT           reduce using rule 256 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    DOUBLE          reduce using rule 256 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    VOID            reduce using rule 256 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    STRING          reduce using rule 256 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    AUTO            reduce using rule 256 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    TYPE            reduce using rule 256 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    CLASS           reduce using rule 256 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    STRUCT          reduce using rule 256 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    THIS            reduce using rule 256 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    LPAREN          reduce using rule 256 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    DOUBLEBNOP      reduce using rule 256 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    STRING_L        reduce using rule 256 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    NUMBER          reduce using rule 256 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    SCHAR           reduce using rule 256 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    ELSE            reduce using rule 256 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LCPAREN in state 107 resolved as shift
WARNING: shift/reduce conflict for LCPAREN in state 191 resolved as shift
WARNING: shift/reduce conflict for MULTOP in state 228 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 275 resolved as shift
WARNING: shift/reduce conflict for MULTOP in state 320 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 346 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 418 resolved as shift
