Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    AND_EQ
    BITAND
    BITOR
    BOOL
    BOROP
    CHAR16_T
    CHAR32_T
    CHAR8_T
    COMMENT
    COMPL
    CONDTIONAL
    DOUBLECOLON
    DQUOTE
    FALSE
    HASHTAG
    INLINE
    LEFTQOP
    LEFTSHIFT
    MODQOP
    NAMESPACE
    NOT
    NOT_EQ
    NULLPTR
    OR
    OR_EQ
    RIGHTLIFT
    RIGHTQOP
    SQUOTE
    STD
    TRUE
    UMINUSOP
    UPLUSOP
    USING
    XOR
    XOREQOR
    XOR_EQ

Grammar

Rule 0     S' -> program
Rule 1     exception_specification -> THROW LPAREN type_list RPAREN
Rule 2     exception_specification -> THROW LPAREN RPAREN
Rule 3     program -> translation_unit
Rule 4     translation_unit -> declaration_seq
Rule 5     throw_expression -> THROW expression
Rule 6     throw_expression -> THROW
Rule 7     type_list -> type_name
Rule 8     type_list -> type_list COMMA type_name
Rule 9     declaration_seq -> declaration_seq declaration
Rule 10    declaration_seq -> declaration
Rule 11    empty -> <empty>
Rule 12    template_class_name -> LTEMPLATE template_arg_list RTEMPLATE
Rule 13    template_arg_list -> template_arg
Rule 14    template_arg_list -> template_arg_list COMMA template_arg
Rule 15    template_arg -> expression
Rule 16    template_arg -> type_name
Rule 17    enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN
Rule 18    enum_specifier -> ENUM LCPAREN enum_list RCPAREN
Rule 19    enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN
Rule 20    enum_specifier -> ENUM LCPAREN RCPAREN
Rule 21    enum_list -> enumerator
Rule 22    enum_list -> enum_list COMMA enumerator
Rule 23    enumerator -> IDENTIFIER
Rule 24    enumerator -> IDENTIFIER EQUAL constant_expression
Rule 25    constant_expression -> conditional_expression
Rule 26    conditional_expression -> logical_OR_expression
Rule 27    conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression
Rule 28    logical_OR_expression -> logical_AND_expression
Rule 29    logical_OR_expression -> logical_OR_expression OROP logical_AND_expression
Rule 30    logical_AND_expression -> inclusive_OR_expression
Rule 31    logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression
Rule 32    inclusive_OR_expression -> exclusive_OR_expression
Rule 33    inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression
Rule 34    exclusive_OR_expression -> AND_expression
Rule 35    exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression
Rule 36    AND_expression -> equality_expression
Rule 37    AND_expression -> AND_expression BANDOP equality_expression
Rule 38    equality_expression -> relational_expression
Rule 39    equality_expression -> equality_expression EQCOMP relational_expression
Rule 40    equality_expression -> equality_expression NEQCOMP relational_expression
Rule 41    relational_expression -> shift_expression
Rule 42    relational_expression -> relational_expression LTCOMP shift_expression
Rule 43    relational_expression -> relational_expression GTCOMP shift_expression
Rule 44    relational_expression -> relational_expression LTECOMP shift_expression
Rule 45    relational_expression -> relational_expression GTECOMP shift_expression
Rule 46    shift_expression -> additive_expression
Rule 47    shift_expression -> shift_expression LSHIFT additive_expression
Rule 48    shift_expression -> shift_expression RSHIFT additive_expression
Rule 49    additive_expression -> multiplicative_expression
Rule 50    additive_expression -> additive_expression PLUSOP multiplicative_expression
Rule 51    additive_expression -> additive_expression MINUSOP multiplicative_expression
Rule 52    multiplicative_expression -> pm_expression
Rule 53    multiplicative_expression -> multiplicative_expression MULTOP pm_expression
Rule 54    multiplicative_expression -> multiplicative_expression DIVOP pm_expression
Rule 55    multiplicative_expression -> multiplicative_expression MODOP pm_expression
Rule 56    pm_expression -> cast_expression
Rule 57    pm_expression -> pm_expression DOTSTAR cast_expression
Rule 58    pm_expression -> pm_expression ARROWSTAR cast_expression
Rule 59    expression -> assignment_expression
Rule 60    expression -> expression COMMA assignment_expression
Rule 61    assignment_expression -> conditional_expression
Rule 62    assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 63    assignment_operator -> EQUAL
Rule 64    assignment_operator -> MULTEQOP
Rule 65    assignment_operator -> DIVEQOP
Rule 66    assignment_operator -> MODEQOP
Rule 67    assignment_operator -> PLUSEQOP
Rule 68    assignment_operator -> MINUSEQOP
Rule 69    assignment_operator -> LSHIFTEQOP
Rule 70    assignment_operator -> RSHIFTEQOP
Rule 71    assignment_operator -> BANDEQOP
Rule 72    assignment_operator -> BOREQOP
Rule 73    unary_expression -> postfix_expression
Rule 74    unary_expression -> DPLUSOP unary_expression
Rule 75    unary_expression -> DMINUSOP unary_expression
Rule 76    unary_expression -> unary1_operator cast_expression
Rule 77    unary_expression -> unary2_operator cast_expression
Rule 78    unary_expression -> SIZEOF unary_expression
Rule 79    unary_expression -> SIZEOF LPAREN type_name RPAREN
Rule 80    unary_expression -> allocation_expression
Rule 81    unary_expression -> deallocation_expression
Rule 82    deallocation_expression -> DELETE cast_expression
Rule 83    allocation_expression -> NEW placement new_type_name new_initializer
Rule 84    allocation_expression -> NEW new_type_name new_initializer
Rule 85    allocation_expression -> NEW placement new_type_name
Rule 86    allocation_expression -> NEW new_type_name
Rule 87    allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer
Rule 88    allocation_expression -> NEW LPAREN type_name RPAREN new_initializer
Rule 89    allocation_expression -> NEW placement LPAREN type_name RPAREN
Rule 90    allocation_expression -> NEW LPAREN type_name RPAREN
Rule 91    new_type_name -> type_specifier_list new_declarator
Rule 92    new_type_name -> type_specifier_list
Rule 93    new_declarator -> MULTOP new_declarator
Rule 94    new_declarator -> MULTOP
Rule 95    new_declarator -> new_declarator LSPAREN expression RSPAREN
Rule 96    new_declarator -> LSPAREN expression RSPAREN
Rule 97    placement -> LPAREN expression_list RPAREN
Rule 98    new_initializer -> LPAREN initializer_list RPAREN
Rule 99    new_initializer -> LPAREN RPAREN
Rule 100   unary1_operator -> PLUSOP
Rule 101   unary1_operator -> MINUSOP
Rule 102   unary1_operator -> NOTSYM
Rule 103   unary1_operator -> BNOP
Rule 104   unary2_operator -> MULTOP
Rule 105   unary2_operator -> BANDOP
Rule 106   postfix_expression -> primary_expression
Rule 107   postfix_expression -> postfix_expression LSPAREN expression RSPAREN
Rule 108   postfix_expression -> postfix_expression LPAREN expression_list RPAREN
Rule 109   postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN
Rule 110   postfix_expression -> postfix_expression LPAREN RPAREN
Rule 111   postfix_expression -> simple_type_name LPAREN expression_list RPAREN
Rule 112   postfix_expression -> simple_type_name LPAREN RPAREN
Rule 113   postfix_expression -> postfix_expression DOT name
Rule 114   postfix_expression -> postfix_expression ARROW name
Rule 115   postfix_expression -> postfix_expression DPLUSOP
Rule 116   postfix_expression -> postfix_expression DMINUSOP
Rule 117   primary_expression -> literal
Rule 118   primary_expression -> THIS
Rule 119   primary_expression -> LPAREN expression RPAREN
Rule 120   primary_expression -> name
Rule 121   literal -> NUMBER
Rule 122   literal -> STRING_L
Rule 123   literal -> SCHAR
Rule 124   cast_expression -> unary_expression
Rule 125   cast_expression -> LPAREN type_name RPAREN cast_expression
Rule 126   type_name -> type_specifier_list abstract_declarator
Rule 127   type_name -> type_specifier_list
Rule 128   abstract_declarator -> unary2_operator abstract_declarator
Rule 129   abstract_declarator -> unary2_operator
Rule 130   abstract_declarator -> abstract_declarator LPAREN argument_declaration_list RPAREN
Rule 131   abstract_declarator -> LPAREN argument_declaration_list RPAREN
Rule 132   abstract_declarator -> abstract_declarator LSPAREN constant_expression RSPAREN
Rule 133   abstract_declarator -> LSPAREN constant_expression RSPAREN
Rule 134   abstract_declarator -> abstract_declarator LSPAREN RSPAREN
Rule 135   abstract_declarator -> LSPAREN RSPAREN
Rule 136   abstract_declarator -> LPAREN abstract_declarator RPAREN
Rule 137   argument_declaration_list -> arg_declaration_list
Rule 138   argument_declaration_list -> empty
Rule 139   arg_declaration_list -> argument_declaration
Rule 140   arg_declaration_list -> argument_declaration COMMA arg_declaration_list
Rule 141   argument_declaration -> decl_specifiers declarator
Rule 142   argument_declaration -> decl_specifiers declarator EQUAL expression
Rule 143   argument_declaration -> decl_specifiers abstract_declarator
Rule 144   argument_declaration -> decl_specifiers
Rule 145   argument_declaration -> decl_specifiers abstract_declarator EQUAL expression
Rule 146   argument_declaration -> decl_specifiers EQUAL expression
Rule 147   decl_specifiers -> decl_specifiers decl_specifier
Rule 148   decl_specifiers -> decl_specifier
Rule 149   decl_specifier -> storage_class_specifier
Rule 150   decl_specifier -> type_specifier
Rule 151   decl_specifier -> TYPEDEF
Rule 152   storage_class_specifier -> AUTO
Rule 153   storage_class_specifier -> STATIC
Rule 154   storage_class_specifier -> EXTERN
Rule 155   storage_class_specifier -> VIRTUAL
Rule 156   type_specifier -> simple_type_name
Rule 157   type_specifier -> class_specifier
Rule 158   type_specifier -> enum_specifier
Rule 159   type_specifier -> elaborated_type_specifier
Rule 160   type_specifier -> CONST
Rule 161   type_specifier -> VOLATILE
Rule 162   class_specifier -> class_head LCPAREN member_list RCPAREN
Rule 163   class_specifier -> class_head LCPAREN RCPAREN
Rule 164   member_list -> member_access_list
Rule 165   member_list -> access_list
Rule 166   member_list -> member_list access_list
Rule 167   access_list -> access_specifier COLON member_access_list
Rule 168   access_list -> access_specifier COLON
Rule 169   member_access_list -> member_declaration member_access_list
Rule 170   member_access_list -> member_declaration
Rule 171   member_declaration -> decl_specifiers member_declarator_list SEMICOLON
Rule 172   member_declaration -> member_declarator_list SEMICOLON
Rule 173   member_declaration -> decl_specifiers SEMICOLON
Rule 174   member_declaration -> SEMICOLON
Rule 175   member_declaration -> function_definition SEMICOLON
Rule 176   member_declaration -> function_definition
Rule 177   function_definition -> decl_specifiers declarator fct_body
Rule 178   function_definition -> declarator fct_body
Rule 179   fct_body -> compound_statement
Rule 180   compound_statement -> LCPAREN statement_list RCPAREN
Rule 181   compound_statement -> LCPAREN RCPAREN
Rule 182   statement_list -> statement
Rule 183   statement_list -> statement_list statement
Rule 184   statement -> labeled_statement
Rule 185   statement -> expression_statement
Rule 186   statement -> compound_statement
Rule 187   statement -> selection_statement
Rule 188   statement -> iteration_statement
Rule 189   statement -> jump_statement
Rule 190   statement -> declaration_statement
Rule 191   statement -> try_block
Rule 192   jump_statement -> BREAK SEMICOLON
Rule 193   jump_statement -> CONTINUE SEMICOLON
Rule 194   jump_statement -> RETURN expression SEMICOLON
Rule 195   jump_statement -> RETURN SEMICOLON
Rule 196   jump_statement -> GOTO IDENTIFIER SEMICOLON
Rule 197   selection_statement -> IF LPAREN expression RPAREN statement
Rule 198   selection_statement -> IF LPAREN expression RPAREN statement ELSE statement
Rule 199   selection_statement -> SWITCH LPAREN expression RPAREN statement
Rule 200   try_block -> TRY compound_statement handler_list
Rule 201   handler_list -> handler handler_list
Rule 202   handler_list -> handler
Rule 203   handler -> CATCH LPAREN exception_declaration RPAREN compound_statement
Rule 204   exception_declaration -> type_specifier_list declarator
Rule 205   exception_declaration -> type_specifier_list abstract_declarator
Rule 206   exception_declaration -> type_specifier_list
Rule 207   labeled_statement -> IDENTIFIER COLON statement
Rule 208   labeled_statement -> CASE constant_expression COLON statement
Rule 209   labeled_statement -> DEFAULT COLON statement
Rule 210   iteration_statement -> WHILE LPAREN expression RPAREN statement
Rule 211   iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON
Rule 212   iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
Rule 213   iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
Rule 214   iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
Rule 215   iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement
Rule 216   for_init_statement -> expression_statement
Rule 217   for_init_statement -> declaration_statement
Rule 218   expression_statement -> expression SEMICOLON
Rule 219   expression_statement -> SEMICOLON
Rule 220   declaration_statement -> declaration
Rule 221   declaration -> decl_specifiers declarator_list SEMICOLON
Rule 222   declaration -> decl_specifiers SEMICOLON
Rule 223   declaration -> declarator_list SEMICOLON
Rule 224   declaration -> asm_declaration
Rule 225   declaration -> function_definition
Rule 226   declaration -> template_declaration
Rule 227   template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
Rule 228   template_argument_list -> argument_declaration
Rule 229   template_argument_list -> template_argument_list COMMA argument_declaration
Rule 230   declarator_list -> init_declarator
Rule 231   declarator_list -> declarator_list COMMA init_declarator
Rule 232   init_declarator -> declarator initializer
Rule 233   init_declarator -> declarator
Rule 234   initializer -> EQUAL assignment_expression
Rule 235   initializer -> EQUAL LCPAREN initializer_list RCPAREN
Rule 236   initializer -> EQUAL LCPAREN initializer_list COMMA RCPAREN
Rule 237   initializer -> LPAREN expression_list RPAREN
Rule 238   initializer_list -> assignment_expression
Rule 239   initializer_list -> initializer_list COMMA assignment_expression
Rule 240   initializer_list -> LCPAREN initializer_list RCPAREN
Rule 241   initializer_list -> LCPAREN initializer_list COMMA RCPAREN
Rule 242   asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON
Rule 243   declaration_list -> declaration
Rule 244   declaration_list -> declaration_list declaration
Rule 245   expression_list -> assignment_expression
Rule 246   expression_list -> expression_list COMMA assignment_expression
Rule 247   member_declarator_list -> member_declarator
Rule 248   member_declarator_list -> member_declarator_list COMMA member_declarator
Rule 249   member_declarator -> declarator pure_specifier
Rule 250   member_declarator -> declarator
Rule 251   member_declarator -> IDENTIFIER COLON constant_expression
Rule 252   member_declarator -> COLON constant_expression
Rule 253   declarator -> name
Rule 254   declarator -> unary2_operator declarator
Rule 255   declarator -> declarator LPAREN argument_declaration_list RPAREN
Rule 256   declarator -> declarator LSPAREN constant_expression RSPAREN
Rule 257   declarator -> declarator LSPAREN RSPAREN
Rule 258   declarator -> LPAREN declarator RPAREN
Rule 259   name -> IDENTIFIER
Rule 260   name -> operator_function_name
Rule 261   name -> BNOP IDENTIFIER
Rule 262   type_specifier_list -> type_specifier type_specifier_list
Rule 263   type_specifier_list -> type_specifier
Rule 264   operator_function_name -> OPERATOR operator_name
Rule 265   operator_name -> NEW
Rule 266   operator_name -> DELETE
Rule 267   operator_name -> PLUSOP
Rule 268   operator_name -> MINUSOP
Rule 269   operator_name -> MULTOP
Rule 270   operator_name -> DIVOP
Rule 271   operator_name -> MODOP
Rule 272   operator_name -> XOROP
Rule 273   operator_name -> BANDOP
Rule 274   operator_name -> BNOP
Rule 275   operator_name -> NOTSYM
Rule 276   operator_name -> EQUAL
Rule 277   operator_name -> LTCOMP
Rule 278   operator_name -> GTCOMP
Rule 279   operator_name -> PLUSEQOP
Rule 280   operator_name -> MINUSEQOP
Rule 281   operator_name -> MULTEQOP
Rule 282   operator_name -> DIVEQOP
Rule 283   operator_name -> MODEQOP
Rule 284   operator_name -> XOREQOP
Rule 285   operator_name -> BANDEQOP
Rule 286   operator_name -> LSHIFT
Rule 287   operator_name -> RSHIFT
Rule 288   operator_name -> RSHIFTEQOP
Rule 289   operator_name -> LSHIFTEQOP
Rule 290   operator_name -> EQCOMP
Rule 291   operator_name -> NEQCOMP
Rule 292   operator_name -> LTECOMP
Rule 293   operator_name -> GTECOMP
Rule 294   operator_name -> ANDOP
Rule 295   operator_name -> OROP
Rule 296   operator_name -> DPLUSOP
Rule 297   operator_name -> DMINUSOP
Rule 298   operator_name -> COMMA
Rule 299   operator_name -> ARROWSTAR
Rule 300   operator_name -> ARROW
Rule 301   operator_name -> LPAREN RPAREN
Rule 302   operator_name -> LSPAREN RSPAREN
Rule 303   pure_specifier -> EQUAL NUMBER
Rule 304   class_head -> class_key base_spec
Rule 305   class_head -> class_key
Rule 306   class_head -> class_key IDENTIFIER base_spec
Rule 307   class_head -> class_key IDENTIFIER
Rule 308   base_spec -> COLON base_list
Rule 309   base_list -> base_specifier
Rule 310   base_list -> base_list COMMA base_specifier
Rule 311   base_specifier -> class_key IDENTIFIER
Rule 312   base_specifier -> access_specifier class_key IDENTIFIER
Rule 313   base_specifier -> class_key IDENTIFIER template_class_name
Rule 314   base_specifier -> access_specifier class_key IDENTIFIER template_class_name
Rule 315   base_specifier -> IDENTIFIER
Rule 316   base_specifier -> access_specifier IDENTIFIER
Rule 317   base_specifier -> IDENTIFIER template_class_name
Rule 318   base_specifier -> access_specifier IDENTIFIER template_class_name
Rule 319   access_specifier -> PRIVATE
Rule 320   access_specifier -> PROTECTED
Rule 321   access_specifier -> PUBLIC
Rule 322   elaborated_type_specifier -> class_key IDENTIFIER
Rule 323   elaborated_type_specifier -> class_key IDENTIFIER template_class_name
Rule 324   elaborated_type_specifier -> ENUM enum_name
Rule 325   elaborated_type_specifier -> TYPE IDENTIFIER
Rule 326   elaborated_type_specifier -> TYPE IDENTIFIER template_class_name
Rule 327   enum_name -> IDENTIFIER
Rule 328   class_key -> CLASS
Rule 329   class_key -> STRUCT
Rule 330   class_key -> UNION
Rule 331   class_key -> TEMPLATE
Rule 332   simple_type_name -> CHAR
Rule 333   simple_type_name -> SHORT
Rule 334   simple_type_name -> INT
Rule 335   simple_type_name -> LONG
Rule 336   simple_type_name -> SIGNED
Rule 337   simple_type_name -> UNSIGNED
Rule 338   simple_type_name -> FLOAT
Rule 339   simple_type_name -> DOUBLE
Rule 340   simple_type_name -> VOID
Rule 341   simple_type_name -> STRING

Terminals, with rules where they appear

AND                  : 
ANDOP                : 31 294
AND_EQ               : 
ARROW                : 114 300
ARROWSTAR            : 58 299
ASM                  : 242
AUTO                 : 152
BANDEQOP             : 71 285
BANDOP               : 37 105 273
BITAND               : 
BITOR                : 
BNOP                 : 103 261 274
BOOL                 : 
BOREQOP              : 72
BOROP                : 
BREAK                : 192
CASE                 : 208
CATCH                : 203
CHAR                 : 332
CHAR16_T             : 
CHAR32_T             : 
CHAR8_T              : 
CLASS                : 328
COLON                : 27 167 168 207 208 209 251 252 308
COMMA                : 8 14 22 60 140 229 231 236 239 241 246 248 298 310
COMMENT              : 
COMPL                : 
CONDTIONAL           : 
CONST                : 160
CONTINUE             : 193
DEFAULT              : 209
DELETE               : 82 266
DIVEQOP              : 65 282
DIVOP                : 54 270
DMINUSOP             : 75 116 297
DO                   : 211
DOT                  : 113
DOTSTAR              : 57
DOUBLE               : 339
DOUBLECOLON          : 
DPLUSOP              : 74 115 296
DQUOTE               : 
ELSE                 : 198
ENUM                 : 17 18 19 20 324
EQCOMP               : 39 290
EQUAL                : 24 63 142 145 146 234 235 236 276 303
EXTERN               : 154
FALSE                : 
FLOAT                : 338
FOR                  : 212 213 214 215
GOTO                 : 196
GTCOMP               : 43 278
GTECOMP              : 45 293
HASHTAG              : 
IDENTIFIER           : 17 19 23 24 196 207 251 259 261 306 307 311 312 313 314 315 316 317 318 322 323 325 326 327
IF                   : 197 198
INLINE               : 
INT                  : 334
LCPAREN              : 17 18 19 20 162 163 180 181 235 236 240 241
LEFTQOP              : 
LEFTSHIFT            : 
LONG                 : 335
LPAREN               : 1 2 79 87 88 89 90 97 98 99 108 109 110 111 112 119 125 130 131 136 197 198 199 203 210 211 212 213 214 215 237 242 255 258 301
LSHIFT               : 47 286
LSHIFTEQOP           : 69 289
LSPAREN              : 95 96 107 132 133 134 135 256 257 302
LTCOMP               : 42 277
LTECOMP              : 44 292
LTEMPLATE            : 12 227
MINUSEQOP            : 68 280
MINUSOP              : 51 101 268
MODEQOP              : 66 283
MODOP                : 55 271
MODQOP               : 
MULTEQOP             : 64 281
MULTOP               : 53 93 94 104 269
NAMESPACE            : 
NEQCOMP              : 40 291
NEW                  : 83 84 85 86 87 88 89 90 265
NOT                  : 
NOTSYM               : 102 275
NOT_EQ               : 
NULLPTR              : 
NUMBER               : 121 303
OPERATOR             : 264
OR                   : 
OROP                 : 29 33 295
OR_EQ                : 
PLUSEQOP             : 67 279
PLUSOP               : 50 100 267
PRIVATE              : 319
PROTECTED            : 320
PUBLIC               : 321
QUESMARK             : 27
RCPAREN              : 17 18 19 20 162 163 180 181 235 236 240 241
RETURN               : 194 195
RIGHTLIFT            : 
RIGHTQOP             : 
RPAREN               : 1 2 79 87 88 89 90 97 98 99 108 109 110 111 112 119 125 130 131 136 197 198 199 203 210 211 212 213 214 215 237 242 255 258 301
RSHIFT               : 48 287
RSHIFTEQOP           : 70 288
RSPAREN              : 95 96 107 132 133 134 135 256 257 302
RTEMPLATE            : 12 227
SCHAR                : 123
SEMICOLON            : 171 172 173 174 175 192 193 194 195 196 211 212 213 214 215 218 219 221 222 223 242
SHORT                : 333
SIGNED               : 336
SIZEOF               : 78 79
SQUOTE               : 
STATIC               : 153
STD                  : 
STRING               : 341
STRING_L             : 122 242
STRUCT               : 329
SWITCH               : 199
TEMPLATE             : 227 331
THIS                 : 118
THROW                : 1 2 5 6
TRUE                 : 
TRY                  : 200
TYPE                 : 325 326
TYPEDEF              : 151
UMINUSOP             : 
UNION                : 330
UNSIGNED             : 337
UPLUSOP              : 
USING                : 
VIRTUAL              : 155
VOID                 : 340
VOLATILE             : 161
WHILE                : 210 211
XOR                  : 
XOREQOP              : 284
XOREQOR              : 
XOROP                : 35 272
XOR_EQ               : 
error                : 

Nonterminals, with rules where they appear

AND_expression       : 34 35 37
abstract_declarator  : 126 128 130 132 134 136 143 145 205
access_list          : 165 166
access_specifier     : 167 168 312 314 316 318
additive_expression  : 46 47 48 50 51
allocation_expression : 80
arg_declaration_list : 137 140
argument_declaration : 139 140 228 229
argument_declaration_list : 130 131 255
asm_declaration      : 224
assignment_expression : 59 60 62 234 238 239 245 246
assignment_operator  : 62
base_list            : 308 310
base_spec            : 304 306
base_specifier       : 309 310
cast_expression      : 56 57 58 76 77 82 125
class_head           : 162 163
class_key            : 304 305 306 307 311 312 313 314 322 323
class_specifier      : 157
compound_statement   : 179 186 200 203
conditional_expression : 25 27 61
constant_expression  : 24 132 133 208 251 252 256
deallocation_expression : 81
decl_specifier       : 147 148
decl_specifiers      : 141 142 143 144 145 146 147 171 173 177 221 222
declaration          : 9 10 220 227 243 244
declaration_list     : 244
declaration_seq      : 4 9
declaration_statement : 190 217
declarator           : 141 142 177 178 204 232 233 249 250 254 255 256 257 258
declarator_list      : 221 223 231
elaborated_type_specifier : 159
empty                : 138
enum_list            : 17 18 22
enum_name            : 324
enum_specifier       : 158
enumerator           : 21 22
equality_expression  : 36 37 39 40
exception_declaration : 203
exception_specification : 
exclusive_OR_expression : 32 33 35
expression           : 5 15 27 60 95 96 107 119 142 145 146 194 197 198 199 210 211 212 212 213 214 218
expression_list      : 97 108 109 111 237 246
expression_statement : 185 216
fct_body             : 177 178
for_init_statement   : 212 213 214 215
function_definition  : 175 176 225
handler              : 201 202
handler_list         : 200 201
inclusive_OR_expression : 30 31 33
init_declarator      : 230 231
initializer          : 232
initializer_list     : 98 235 236 239 240 241
iteration_statement  : 188
jump_statement       : 189
labeled_statement    : 184
literal              : 117
logical_AND_expression : 28 29 31
logical_OR_expression : 26 27 29
member_access_list   : 164 167 169
member_declaration   : 169 170
member_declarator    : 247 248
member_declarator_list : 171 172 248
member_list          : 162 166
multiplicative_expression : 49 50 51 53 54 55
name                 : 113 114 120 253
new_declarator       : 91 93 95
new_initializer      : 83 84 87 88
new_type_name        : 83 84 85 86
operator_function_name : 260
operator_name        : 264
placement            : 83 85 87 89
pm_expression        : 52 53 54 55 57 58
postfix_expression   : 73 107 108 109 110 113 114 115 116
primary_expression   : 106
program              : 0
pure_specifier       : 249
relational_expression : 38 39 40 42 43 44 45
selection_statement  : 187
shift_expression     : 41 42 43 44 45 47 48
simple_type_name     : 111 112 156
statement            : 182 183 197 198 198 199 207 208 209 210 211 212 213 214 215
statement_list       : 180 183
storage_class_specifier : 149
template_arg         : 13 14
template_arg_list    : 12 14
template_argument_list : 227 229
template_class_name  : 109 313 314 317 318 323 326
template_declaration : 226
throw_expression     : 
translation_unit     : 3
try_block            : 191
type_list            : 1 8
type_name            : 7 8 16 79 87 88 89 90 125
type_specifier       : 150 262 263
type_specifier_list  : 91 92 126 127 204 205 206 262
unary1_operator      : 76
unary2_operator      : 77 128 129 254
unary_expression     : 62 74 75 78 124

Parsing method: LALR

state 0

    (0) S' -> . program
    (3) program -> . translation_unit
    (4) translation_unit -> . declaration_seq
    (9) declaration_seq -> . declaration_seq declaration
    (10) declaration_seq -> . declaration
    (221) declaration -> . decl_specifiers declarator_list SEMICOLON
    (222) declaration -> . decl_specifiers SEMICOLON
    (223) declaration -> . declarator_list SEMICOLON
    (224) declaration -> . asm_declaration
    (225) declaration -> . function_definition
    (226) declaration -> . template_declaration
    (147) decl_specifiers -> . decl_specifiers decl_specifier
    (148) decl_specifiers -> . decl_specifier
    (230) declarator_list -> . init_declarator
    (231) declarator_list -> . declarator_list COMMA init_declarator
    (242) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (177) function_definition -> . decl_specifiers declarator fct_body
    (178) function_definition -> . declarator fct_body
    (227) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (149) decl_specifier -> . storage_class_specifier
    (150) decl_specifier -> . type_specifier
    (151) decl_specifier -> . TYPEDEF
    (232) init_declarator -> . declarator initializer
    (233) init_declarator -> . declarator
    (253) declarator -> . name
    (254) declarator -> . unary2_operator declarator
    (255) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (256) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (257) declarator -> . declarator LSPAREN RSPAREN
    (258) declarator -> . LPAREN declarator RPAREN
    (152) storage_class_specifier -> . AUTO
    (153) storage_class_specifier -> . STATIC
    (154) storage_class_specifier -> . EXTERN
    (155) storage_class_specifier -> . VIRTUAL
    (156) type_specifier -> . simple_type_name
    (157) type_specifier -> . class_specifier
    (158) type_specifier -> . enum_specifier
    (159) type_specifier -> . elaborated_type_specifier
    (160) type_specifier -> . CONST
    (161) type_specifier -> . VOLATILE
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (162) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (163) class_specifier -> . class_head LCPAREN RCPAREN
    (17) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (18) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (20) enum_specifier -> . ENUM LCPAREN RCPAREN
    (322) elaborated_type_specifier -> . class_key IDENTIFIER
    (323) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (324) elaborated_type_specifier -> . ENUM enum_name
    (325) elaborated_type_specifier -> . TYPE IDENTIFIER
    (326) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (264) operator_function_name -> . OPERATOR operator_name
    (304) class_head -> . class_key base_spec
    (305) class_head -> . class_key
    (306) class_head -> . class_key IDENTIFIER base_spec
    (307) class_head -> . class_key IDENTIFIER
    (328) class_key -> . CLASS
    (329) class_key -> . STRUCT
    (330) class_key -> . UNION
    (331) class_key -> . TEMPLATE

    ASM             shift and go to state 12
    TEMPLATE        shift and go to state 15
    TYPEDEF         shift and go to state 18
    LPAREN          shift and go to state 13
    AUTO            shift and go to state 21
    STATIC          shift and go to state 22
    EXTERN          shift and go to state 23
    VIRTUAL         shift and go to state 24
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    IDENTIFIER      shift and go to state 31
    BNOP            shift and go to state 33
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    ENUM            shift and go to state 47
    TYPE            shift and go to state 49
    OPERATOR        shift and go to state 50
    CLASS           shift and go to state 51
    STRUCT          shift and go to state 52
    UNION           shift and go to state 53

    program                        shift and go to state 1
    translation_unit               shift and go to state 2
    declaration_seq                shift and go to state 3
    declaration                    shift and go to state 4
    decl_specifiers                shift and go to state 5
    declarator_list                shift and go to state 6
    asm_declaration                shift and go to state 7
    function_definition            shift and go to state 8
    template_declaration           shift and go to state 9
    decl_specifier                 shift and go to state 10
    init_declarator                shift and go to state 11
    declarator                     shift and go to state 14
    storage_class_specifier        shift and go to state 16
    type_specifier                 shift and go to state 17
    name                           shift and go to state 19
    unary2_operator                shift and go to state 20
    simple_type_name               shift and go to state 25
    class_specifier                shift and go to state 26
    enum_specifier                 shift and go to state 27
    elaborated_type_specifier      shift and go to state 28
    operator_function_name         shift and go to state 32
    class_head                     shift and go to state 46
    class_key                      shift and go to state 48

state 1

    (0) S' -> program .



state 2

    (3) program -> translation_unit .

    $end            reduce using rule 3 (program -> translation_unit .)


state 3

    (4) translation_unit -> declaration_seq .
    (9) declaration_seq -> declaration_seq . declaration
    (221) declaration -> . decl_specifiers declarator_list SEMICOLON
    (222) declaration -> . decl_specifiers SEMICOLON
    (223) declaration -> . declarator_list SEMICOLON
    (224) declaration -> . asm_declaration
    (225) declaration -> . function_definition
    (226) declaration -> . template_declaration
    (147) decl_specifiers -> . decl_specifiers decl_specifier
    (148) decl_specifiers -> . decl_specifier
    (230) declarator_list -> . init_declarator
    (231) declarator_list -> . declarator_list COMMA init_declarator
    (242) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (177) function_definition -> . decl_specifiers declarator fct_body
    (178) function_definition -> . declarator fct_body
    (227) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (149) decl_specifier -> . storage_class_specifier
    (150) decl_specifier -> . type_specifier
    (151) decl_specifier -> . TYPEDEF
    (232) init_declarator -> . declarator initializer
    (233) init_declarator -> . declarator
    (253) declarator -> . name
    (254) declarator -> . unary2_operator declarator
    (255) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (256) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (257) declarator -> . declarator LSPAREN RSPAREN
    (258) declarator -> . LPAREN declarator RPAREN
    (152) storage_class_specifier -> . AUTO
    (153) storage_class_specifier -> . STATIC
    (154) storage_class_specifier -> . EXTERN
    (155) storage_class_specifier -> . VIRTUAL
    (156) type_specifier -> . simple_type_name
    (157) type_specifier -> . class_specifier
    (158) type_specifier -> . enum_specifier
    (159) type_specifier -> . elaborated_type_specifier
    (160) type_specifier -> . CONST
    (161) type_specifier -> . VOLATILE
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (162) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (163) class_specifier -> . class_head LCPAREN RCPAREN
    (17) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (18) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (20) enum_specifier -> . ENUM LCPAREN RCPAREN
    (322) elaborated_type_specifier -> . class_key IDENTIFIER
    (323) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (324) elaborated_type_specifier -> . ENUM enum_name
    (325) elaborated_type_specifier -> . TYPE IDENTIFIER
    (326) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (264) operator_function_name -> . OPERATOR operator_name
    (304) class_head -> . class_key base_spec
    (305) class_head -> . class_key
    (306) class_head -> . class_key IDENTIFIER base_spec
    (307) class_head -> . class_key IDENTIFIER
    (328) class_key -> . CLASS
    (329) class_key -> . STRUCT
    (330) class_key -> . UNION
    (331) class_key -> . TEMPLATE

    $end            reduce using rule 4 (translation_unit -> declaration_seq .)
    ASM             shift and go to state 12
    TEMPLATE        shift and go to state 15
    TYPEDEF         shift and go to state 18
    LPAREN          shift and go to state 13
    AUTO            shift and go to state 21
    STATIC          shift and go to state 22
    EXTERN          shift and go to state 23
    VIRTUAL         shift and go to state 24
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    IDENTIFIER      shift and go to state 31
    BNOP            shift and go to state 33
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    ENUM            shift and go to state 47
    TYPE            shift and go to state 49
    OPERATOR        shift and go to state 50
    CLASS           shift and go to state 51
    STRUCT          shift and go to state 52
    UNION           shift and go to state 53

    declaration                    shift and go to state 54
    decl_specifiers                shift and go to state 5
    declarator_list                shift and go to state 6
    asm_declaration                shift and go to state 7
    function_definition            shift and go to state 8
    template_declaration           shift and go to state 9
    decl_specifier                 shift and go to state 10
    init_declarator                shift and go to state 11
    declarator                     shift and go to state 14
    storage_class_specifier        shift and go to state 16
    type_specifier                 shift and go to state 17
    name                           shift and go to state 19
    unary2_operator                shift and go to state 20
    simple_type_name               shift and go to state 25
    class_specifier                shift and go to state 26
    enum_specifier                 shift and go to state 27
    elaborated_type_specifier      shift and go to state 28
    operator_function_name         shift and go to state 32
    class_head                     shift and go to state 46
    class_key                      shift and go to state 48

state 4

    (10) declaration_seq -> declaration .

    ASM             reduce using rule 10 (declaration_seq -> declaration .)
    TEMPLATE        reduce using rule 10 (declaration_seq -> declaration .)
    TYPEDEF         reduce using rule 10 (declaration_seq -> declaration .)
    LPAREN          reduce using rule 10 (declaration_seq -> declaration .)
    AUTO            reduce using rule 10 (declaration_seq -> declaration .)
    STATIC          reduce using rule 10 (declaration_seq -> declaration .)
    EXTERN          reduce using rule 10 (declaration_seq -> declaration .)
    VIRTUAL         reduce using rule 10 (declaration_seq -> declaration .)
    CONST           reduce using rule 10 (declaration_seq -> declaration .)
    VOLATILE        reduce using rule 10 (declaration_seq -> declaration .)
    IDENTIFIER      reduce using rule 10 (declaration_seq -> declaration .)
    BNOP            reduce using rule 10 (declaration_seq -> declaration .)
    MULTOP          reduce using rule 10 (declaration_seq -> declaration .)
    BANDOP          reduce using rule 10 (declaration_seq -> declaration .)
    CHAR            reduce using rule 10 (declaration_seq -> declaration .)
    SHORT           reduce using rule 10 (declaration_seq -> declaration .)
    INT             reduce using rule 10 (declaration_seq -> declaration .)
    LONG            reduce using rule 10 (declaration_seq -> declaration .)
    SIGNED          reduce using rule 10 (declaration_seq -> declaration .)
    UNSIGNED        reduce using rule 10 (declaration_seq -> declaration .)
    FLOAT           reduce using rule 10 (declaration_seq -> declaration .)
    DOUBLE          reduce using rule 10 (declaration_seq -> declaration .)
    VOID            reduce using rule 10 (declaration_seq -> declaration .)
    STRING          reduce using rule 10 (declaration_seq -> declaration .)
    ENUM            reduce using rule 10 (declaration_seq -> declaration .)
    TYPE            reduce using rule 10 (declaration_seq -> declaration .)
    OPERATOR        reduce using rule 10 (declaration_seq -> declaration .)
    CLASS           reduce using rule 10 (declaration_seq -> declaration .)
    STRUCT          reduce using rule 10 (declaration_seq -> declaration .)
    UNION           reduce using rule 10 (declaration_seq -> declaration .)
    $end            reduce using rule 10 (declaration_seq -> declaration .)


state 5

    (221) declaration -> decl_specifiers . declarator_list SEMICOLON
    (222) declaration -> decl_specifiers . SEMICOLON
    (147) decl_specifiers -> decl_specifiers . decl_specifier
    (177) function_definition -> decl_specifiers . declarator fct_body
    (230) declarator_list -> . init_declarator
    (231) declarator_list -> . declarator_list COMMA init_declarator
    (149) decl_specifier -> . storage_class_specifier
    (150) decl_specifier -> . type_specifier
    (151) decl_specifier -> . TYPEDEF
    (253) declarator -> . name
    (254) declarator -> . unary2_operator declarator
    (255) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (256) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (257) declarator -> . declarator LSPAREN RSPAREN
    (258) declarator -> . LPAREN declarator RPAREN
    (232) init_declarator -> . declarator initializer
    (233) init_declarator -> . declarator
    (152) storage_class_specifier -> . AUTO
    (153) storage_class_specifier -> . STATIC
    (154) storage_class_specifier -> . EXTERN
    (155) storage_class_specifier -> . VIRTUAL
    (156) type_specifier -> . simple_type_name
    (157) type_specifier -> . class_specifier
    (158) type_specifier -> . enum_specifier
    (159) type_specifier -> . elaborated_type_specifier
    (160) type_specifier -> . CONST
    (161) type_specifier -> . VOLATILE
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (162) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (163) class_specifier -> . class_head LCPAREN RCPAREN
    (17) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (18) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (20) enum_specifier -> . ENUM LCPAREN RCPAREN
    (322) elaborated_type_specifier -> . class_key IDENTIFIER
    (323) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (324) elaborated_type_specifier -> . ENUM enum_name
    (325) elaborated_type_specifier -> . TYPE IDENTIFIER
    (326) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (264) operator_function_name -> . OPERATOR operator_name
    (304) class_head -> . class_key base_spec
    (305) class_head -> . class_key
    (306) class_head -> . class_key IDENTIFIER base_spec
    (307) class_head -> . class_key IDENTIFIER
    (328) class_key -> . CLASS
    (329) class_key -> . STRUCT
    (330) class_key -> . UNION
    (331) class_key -> . TEMPLATE

    SEMICOLON       shift and go to state 56
    TYPEDEF         shift and go to state 18
    LPAREN          shift and go to state 13
    AUTO            shift and go to state 21
    STATIC          shift and go to state 22
    EXTERN          shift and go to state 23
    VIRTUAL         shift and go to state 24
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    IDENTIFIER      shift and go to state 31
    BNOP            shift and go to state 33
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    ENUM            shift and go to state 47
    TYPE            shift and go to state 49
    OPERATOR        shift and go to state 50
    CLASS           shift and go to state 51
    STRUCT          shift and go to state 52
    UNION           shift and go to state 53
    TEMPLATE        shift and go to state 59

    declarator_list                shift and go to state 55
    decl_specifier                 shift and go to state 57
    declarator                     shift and go to state 58
    init_declarator                shift and go to state 11
    storage_class_specifier        shift and go to state 16
    type_specifier                 shift and go to state 17
    name                           shift and go to state 19
    unary2_operator                shift and go to state 20
    simple_type_name               shift and go to state 25
    class_specifier                shift and go to state 26
    enum_specifier                 shift and go to state 27
    elaborated_type_specifier      shift and go to state 28
    operator_function_name         shift and go to state 32
    class_head                     shift and go to state 46
    class_key                      shift and go to state 48

state 6

    (223) declaration -> declarator_list . SEMICOLON
    (231) declarator_list -> declarator_list . COMMA init_declarator

    SEMICOLON       shift and go to state 60
    COMMA           shift and go to state 61


state 7

    (224) declaration -> asm_declaration .

    ASM             reduce using rule 224 (declaration -> asm_declaration .)
    TEMPLATE        reduce using rule 224 (declaration -> asm_declaration .)
    TYPEDEF         reduce using rule 224 (declaration -> asm_declaration .)
    LPAREN          reduce using rule 224 (declaration -> asm_declaration .)
    AUTO            reduce using rule 224 (declaration -> asm_declaration .)
    STATIC          reduce using rule 224 (declaration -> asm_declaration .)
    EXTERN          reduce using rule 224 (declaration -> asm_declaration .)
    VIRTUAL         reduce using rule 224 (declaration -> asm_declaration .)
    CONST           reduce using rule 224 (declaration -> asm_declaration .)
    VOLATILE        reduce using rule 224 (declaration -> asm_declaration .)
    IDENTIFIER      reduce using rule 224 (declaration -> asm_declaration .)
    BNOP            reduce using rule 224 (declaration -> asm_declaration .)
    MULTOP          reduce using rule 224 (declaration -> asm_declaration .)
    BANDOP          reduce using rule 224 (declaration -> asm_declaration .)
    CHAR            reduce using rule 224 (declaration -> asm_declaration .)
    SHORT           reduce using rule 224 (declaration -> asm_declaration .)
    INT             reduce using rule 224 (declaration -> asm_declaration .)
    LONG            reduce using rule 224 (declaration -> asm_declaration .)
    SIGNED          reduce using rule 224 (declaration -> asm_declaration .)
    UNSIGNED        reduce using rule 224 (declaration -> asm_declaration .)
    FLOAT           reduce using rule 224 (declaration -> asm_declaration .)
    DOUBLE          reduce using rule 224 (declaration -> asm_declaration .)
    VOID            reduce using rule 224 (declaration -> asm_declaration .)
    STRING          reduce using rule 224 (declaration -> asm_declaration .)
    ENUM            reduce using rule 224 (declaration -> asm_declaration .)
    TYPE            reduce using rule 224 (declaration -> asm_declaration .)
    OPERATOR        reduce using rule 224 (declaration -> asm_declaration .)
    CLASS           reduce using rule 224 (declaration -> asm_declaration .)
    STRUCT          reduce using rule 224 (declaration -> asm_declaration .)
    UNION           reduce using rule 224 (declaration -> asm_declaration .)
    $end            reduce using rule 224 (declaration -> asm_declaration .)
    RCPAREN         reduce using rule 224 (declaration -> asm_declaration .)
    CASE            reduce using rule 224 (declaration -> asm_declaration .)
    DEFAULT         reduce using rule 224 (declaration -> asm_declaration .)
    SEMICOLON       reduce using rule 224 (declaration -> asm_declaration .)
    LCPAREN         reduce using rule 224 (declaration -> asm_declaration .)
    IF              reduce using rule 224 (declaration -> asm_declaration .)
    SWITCH          reduce using rule 224 (declaration -> asm_declaration .)
    WHILE           reduce using rule 224 (declaration -> asm_declaration .)
    DO              reduce using rule 224 (declaration -> asm_declaration .)
    FOR             reduce using rule 224 (declaration -> asm_declaration .)
    BREAK           reduce using rule 224 (declaration -> asm_declaration .)
    CONTINUE        reduce using rule 224 (declaration -> asm_declaration .)
    RETURN          reduce using rule 224 (declaration -> asm_declaration .)
    GOTO            reduce using rule 224 (declaration -> asm_declaration .)
    TRY             reduce using rule 224 (declaration -> asm_declaration .)
    DPLUSOP         reduce using rule 224 (declaration -> asm_declaration .)
    DMINUSOP        reduce using rule 224 (declaration -> asm_declaration .)
    SIZEOF          reduce using rule 224 (declaration -> asm_declaration .)
    PLUSOP          reduce using rule 224 (declaration -> asm_declaration .)
    MINUSOP         reduce using rule 224 (declaration -> asm_declaration .)
    NOTSYM          reduce using rule 224 (declaration -> asm_declaration .)
    NEW             reduce using rule 224 (declaration -> asm_declaration .)
    DELETE          reduce using rule 224 (declaration -> asm_declaration .)
    THIS            reduce using rule 224 (declaration -> asm_declaration .)
    NUMBER          reduce using rule 224 (declaration -> asm_declaration .)
    STRING_L        reduce using rule 224 (declaration -> asm_declaration .)
    SCHAR           reduce using rule 224 (declaration -> asm_declaration .)
    ELSE            reduce using rule 224 (declaration -> asm_declaration .)


state 8

    (225) declaration -> function_definition .

    ASM             reduce using rule 225 (declaration -> function_definition .)
    TEMPLATE        reduce using rule 225 (declaration -> function_definition .)
    TYPEDEF         reduce using rule 225 (declaration -> function_definition .)
    LPAREN          reduce using rule 225 (declaration -> function_definition .)
    AUTO            reduce using rule 225 (declaration -> function_definition .)
    STATIC          reduce using rule 225 (declaration -> function_definition .)
    EXTERN          reduce using rule 225 (declaration -> function_definition .)
    VIRTUAL         reduce using rule 225 (declaration -> function_definition .)
    CONST           reduce using rule 225 (declaration -> function_definition .)
    VOLATILE        reduce using rule 225 (declaration -> function_definition .)
    IDENTIFIER      reduce using rule 225 (declaration -> function_definition .)
    BNOP            reduce using rule 225 (declaration -> function_definition .)
    MULTOP          reduce using rule 225 (declaration -> function_definition .)
    BANDOP          reduce using rule 225 (declaration -> function_definition .)
    CHAR            reduce using rule 225 (declaration -> function_definition .)
    SHORT           reduce using rule 225 (declaration -> function_definition .)
    INT             reduce using rule 225 (declaration -> function_definition .)
    LONG            reduce using rule 225 (declaration -> function_definition .)
    SIGNED          reduce using rule 225 (declaration -> function_definition .)
    UNSIGNED        reduce using rule 225 (declaration -> function_definition .)
    FLOAT           reduce using rule 225 (declaration -> function_definition .)
    DOUBLE          reduce using rule 225 (declaration -> function_definition .)
    VOID            reduce using rule 225 (declaration -> function_definition .)
    STRING          reduce using rule 225 (declaration -> function_definition .)
    ENUM            reduce using rule 225 (declaration -> function_definition .)
    TYPE            reduce using rule 225 (declaration -> function_definition .)
    OPERATOR        reduce using rule 225 (declaration -> function_definition .)
    CLASS           reduce using rule 225 (declaration -> function_definition .)
    STRUCT          reduce using rule 225 (declaration -> function_definition .)
    UNION           reduce using rule 225 (declaration -> function_definition .)
    $end            reduce using rule 225 (declaration -> function_definition .)
    RCPAREN         reduce using rule 225 (declaration -> function_definition .)
    CASE            reduce using rule 225 (declaration -> function_definition .)
    DEFAULT         reduce using rule 225 (declaration -> function_definition .)
    SEMICOLON       reduce using rule 225 (declaration -> function_definition .)
    LCPAREN         reduce using rule 225 (declaration -> function_definition .)
    IF              reduce using rule 225 (declaration -> function_definition .)
    SWITCH          reduce using rule 225 (declaration -> function_definition .)
    WHILE           reduce using rule 225 (declaration -> function_definition .)
    DO              reduce using rule 225 (declaration -> function_definition .)
    FOR             reduce using rule 225 (declaration -> function_definition .)
    BREAK           reduce using rule 225 (declaration -> function_definition .)
    CONTINUE        reduce using rule 225 (declaration -> function_definition .)
    RETURN          reduce using rule 225 (declaration -> function_definition .)
    GOTO            reduce using rule 225 (declaration -> function_definition .)
    TRY             reduce using rule 225 (declaration -> function_definition .)
    DPLUSOP         reduce using rule 225 (declaration -> function_definition .)
    DMINUSOP        reduce using rule 225 (declaration -> function_definition .)
    SIZEOF          reduce using rule 225 (declaration -> function_definition .)
    PLUSOP          reduce using rule 225 (declaration -> function_definition .)
    MINUSOP         reduce using rule 225 (declaration -> function_definition .)
    NOTSYM          reduce using rule 225 (declaration -> function_definition .)
    NEW             reduce using rule 225 (declaration -> function_definition .)
    DELETE          reduce using rule 225 (declaration -> function_definition .)
    THIS            reduce using rule 225 (declaration -> function_definition .)
    NUMBER          reduce using rule 225 (declaration -> function_definition .)
    STRING_L        reduce using rule 225 (declaration -> function_definition .)
    SCHAR           reduce using rule 225 (declaration -> function_definition .)
    ELSE            reduce using rule 225 (declaration -> function_definition .)


state 9

    (226) declaration -> template_declaration .

    ASM             reduce using rule 226 (declaration -> template_declaration .)
    TEMPLATE        reduce using rule 226 (declaration -> template_declaration .)
    TYPEDEF         reduce using rule 226 (declaration -> template_declaration .)
    LPAREN          reduce using rule 226 (declaration -> template_declaration .)
    AUTO            reduce using rule 226 (declaration -> template_declaration .)
    STATIC          reduce using rule 226 (declaration -> template_declaration .)
    EXTERN          reduce using rule 226 (declaration -> template_declaration .)
    VIRTUAL         reduce using rule 226 (declaration -> template_declaration .)
    CONST           reduce using rule 226 (declaration -> template_declaration .)
    VOLATILE        reduce using rule 226 (declaration -> template_declaration .)
    IDENTIFIER      reduce using rule 226 (declaration -> template_declaration .)
    BNOP            reduce using rule 226 (declaration -> template_declaration .)
    MULTOP          reduce using rule 226 (declaration -> template_declaration .)
    BANDOP          reduce using rule 226 (declaration -> template_declaration .)
    CHAR            reduce using rule 226 (declaration -> template_declaration .)
    SHORT           reduce using rule 226 (declaration -> template_declaration .)
    INT             reduce using rule 226 (declaration -> template_declaration .)
    LONG            reduce using rule 226 (declaration -> template_declaration .)
    SIGNED          reduce using rule 226 (declaration -> template_declaration .)
    UNSIGNED        reduce using rule 226 (declaration -> template_declaration .)
    FLOAT           reduce using rule 226 (declaration -> template_declaration .)
    DOUBLE          reduce using rule 226 (declaration -> template_declaration .)
    VOID            reduce using rule 226 (declaration -> template_declaration .)
    STRING          reduce using rule 226 (declaration -> template_declaration .)
    ENUM            reduce using rule 226 (declaration -> template_declaration .)
    TYPE            reduce using rule 226 (declaration -> template_declaration .)
    OPERATOR        reduce using rule 226 (declaration -> template_declaration .)
    CLASS           reduce using rule 226 (declaration -> template_declaration .)
    STRUCT          reduce using rule 226 (declaration -> template_declaration .)
    UNION           reduce using rule 226 (declaration -> template_declaration .)
    $end            reduce using rule 226 (declaration -> template_declaration .)
    RCPAREN         reduce using rule 226 (declaration -> template_declaration .)
    CASE            reduce using rule 226 (declaration -> template_declaration .)
    DEFAULT         reduce using rule 226 (declaration -> template_declaration .)
    SEMICOLON       reduce using rule 226 (declaration -> template_declaration .)
    LCPAREN         reduce using rule 226 (declaration -> template_declaration .)
    IF              reduce using rule 226 (declaration -> template_declaration .)
    SWITCH          reduce using rule 226 (declaration -> template_declaration .)
    WHILE           reduce using rule 226 (declaration -> template_declaration .)
    DO              reduce using rule 226 (declaration -> template_declaration .)
    FOR             reduce using rule 226 (declaration -> template_declaration .)
    BREAK           reduce using rule 226 (declaration -> template_declaration .)
    CONTINUE        reduce using rule 226 (declaration -> template_declaration .)
    RETURN          reduce using rule 226 (declaration -> template_declaration .)
    GOTO            reduce using rule 226 (declaration -> template_declaration .)
    TRY             reduce using rule 226 (declaration -> template_declaration .)
    DPLUSOP         reduce using rule 226 (declaration -> template_declaration .)
    DMINUSOP        reduce using rule 226 (declaration -> template_declaration .)
    SIZEOF          reduce using rule 226 (declaration -> template_declaration .)
    PLUSOP          reduce using rule 226 (declaration -> template_declaration .)
    MINUSOP         reduce using rule 226 (declaration -> template_declaration .)
    NOTSYM          reduce using rule 226 (declaration -> template_declaration .)
    NEW             reduce using rule 226 (declaration -> template_declaration .)
    DELETE          reduce using rule 226 (declaration -> template_declaration .)
    THIS            reduce using rule 226 (declaration -> template_declaration .)
    NUMBER          reduce using rule 226 (declaration -> template_declaration .)
    STRING_L        reduce using rule 226 (declaration -> template_declaration .)
    SCHAR           reduce using rule 226 (declaration -> template_declaration .)
    ELSE            reduce using rule 226 (declaration -> template_declaration .)


state 10

    (148) decl_specifiers -> decl_specifier .

    SEMICOLON       reduce using rule 148 (decl_specifiers -> decl_specifier .)
    TYPEDEF         reduce using rule 148 (decl_specifiers -> decl_specifier .)
    LPAREN          reduce using rule 148 (decl_specifiers -> decl_specifier .)
    AUTO            reduce using rule 148 (decl_specifiers -> decl_specifier .)
    STATIC          reduce using rule 148 (decl_specifiers -> decl_specifier .)
    EXTERN          reduce using rule 148 (decl_specifiers -> decl_specifier .)
    VIRTUAL         reduce using rule 148 (decl_specifiers -> decl_specifier .)
    CONST           reduce using rule 148 (decl_specifiers -> decl_specifier .)
    VOLATILE        reduce using rule 148 (decl_specifiers -> decl_specifier .)
    IDENTIFIER      reduce using rule 148 (decl_specifiers -> decl_specifier .)
    BNOP            reduce using rule 148 (decl_specifiers -> decl_specifier .)
    MULTOP          reduce using rule 148 (decl_specifiers -> decl_specifier .)
    BANDOP          reduce using rule 148 (decl_specifiers -> decl_specifier .)
    CHAR            reduce using rule 148 (decl_specifiers -> decl_specifier .)
    SHORT           reduce using rule 148 (decl_specifiers -> decl_specifier .)
    INT             reduce using rule 148 (decl_specifiers -> decl_specifier .)
    LONG            reduce using rule 148 (decl_specifiers -> decl_specifier .)
    SIGNED          reduce using rule 148 (decl_specifiers -> decl_specifier .)
    UNSIGNED        reduce using rule 148 (decl_specifiers -> decl_specifier .)
    FLOAT           reduce using rule 148 (decl_specifiers -> decl_specifier .)
    DOUBLE          reduce using rule 148 (decl_specifiers -> decl_specifier .)
    VOID            reduce using rule 148 (decl_specifiers -> decl_specifier .)
    STRING          reduce using rule 148 (decl_specifiers -> decl_specifier .)
    ENUM            reduce using rule 148 (decl_specifiers -> decl_specifier .)
    TYPE            reduce using rule 148 (decl_specifiers -> decl_specifier .)
    OPERATOR        reduce using rule 148 (decl_specifiers -> decl_specifier .)
    CLASS           reduce using rule 148 (decl_specifiers -> decl_specifier .)
    STRUCT          reduce using rule 148 (decl_specifiers -> decl_specifier .)
    UNION           reduce using rule 148 (decl_specifiers -> decl_specifier .)
    TEMPLATE        reduce using rule 148 (decl_specifiers -> decl_specifier .)
    EQUAL           reduce using rule 148 (decl_specifiers -> decl_specifier .)
    LSPAREN         reduce using rule 148 (decl_specifiers -> decl_specifier .)
    COMMA           reduce using rule 148 (decl_specifiers -> decl_specifier .)
    RPAREN          reduce using rule 148 (decl_specifiers -> decl_specifier .)
    RTEMPLATE       reduce using rule 148 (decl_specifiers -> decl_specifier .)
    COLON           reduce using rule 148 (decl_specifiers -> decl_specifier .)


state 11

    (230) declarator_list -> init_declarator .

    SEMICOLON       reduce using rule 230 (declarator_list -> init_declarator .)
    COMMA           reduce using rule 230 (declarator_list -> init_declarator .)


state 12

    (242) asm_declaration -> ASM . LPAREN STRING_L RPAREN SEMICOLON

    LPAREN          shift and go to state 62


state 13

    (258) declarator -> LPAREN . declarator RPAREN
    (253) declarator -> . name
    (254) declarator -> . unary2_operator declarator
    (255) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (256) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (257) declarator -> . declarator LSPAREN RSPAREN
    (258) declarator -> . LPAREN declarator RPAREN
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (264) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 13
    IDENTIFIER      shift and go to state 31
    BNOP            shift and go to state 33
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    OPERATOR        shift and go to state 50

    declarator                     shift and go to state 63
    name                           shift and go to state 19
    unary2_operator                shift and go to state 20
    operator_function_name         shift and go to state 32

state 14

    (178) function_definition -> declarator . fct_body
    (232) init_declarator -> declarator . initializer
    (233) init_declarator -> declarator .
    (255) declarator -> declarator . LPAREN argument_declaration_list RPAREN
    (256) declarator -> declarator . LSPAREN constant_expression RSPAREN
    (257) declarator -> declarator . LSPAREN RSPAREN
    (179) fct_body -> . compound_statement
    (234) initializer -> . EQUAL assignment_expression
    (235) initializer -> . EQUAL LCPAREN initializer_list RCPAREN
    (236) initializer -> . EQUAL LCPAREN initializer_list COMMA RCPAREN
    (237) initializer -> . LPAREN expression_list RPAREN
    (180) compound_statement -> . LCPAREN statement_list RCPAREN
    (181) compound_statement -> . LCPAREN RCPAREN

    SEMICOLON       reduce using rule 233 (init_declarator -> declarator .)
    COMMA           reduce using rule 233 (init_declarator -> declarator .)
    LPAREN          shift and go to state 66
    LSPAREN         shift and go to state 67
    EQUAL           shift and go to state 69
    LCPAREN         shift and go to state 70

    fct_body                       shift and go to state 64
    initializer                    shift and go to state 65
    compound_statement             shift and go to state 68

state 15

    (227) template_declaration -> TEMPLATE . LTEMPLATE template_argument_list RTEMPLATE declaration
    (331) class_key -> TEMPLATE .

    LTEMPLATE       shift and go to state 71
    IDENTIFIER      reduce using rule 331 (class_key -> TEMPLATE .)
    COLON           reduce using rule 331 (class_key -> TEMPLATE .)
    LCPAREN         reduce using rule 331 (class_key -> TEMPLATE .)


state 16

    (149) decl_specifier -> storage_class_specifier .

    SEMICOLON       reduce using rule 149 (decl_specifier -> storage_class_specifier .)
    TYPEDEF         reduce using rule 149 (decl_specifier -> storage_class_specifier .)
    LPAREN          reduce using rule 149 (decl_specifier -> storage_class_specifier .)
    AUTO            reduce using rule 149 (decl_specifier -> storage_class_specifier .)
    STATIC          reduce using rule 149 (decl_specifier -> storage_class_specifier .)
    EXTERN          reduce using rule 149 (decl_specifier -> storage_class_specifier .)
    VIRTUAL         reduce using rule 149 (decl_specifier -> storage_class_specifier .)
    CONST           reduce using rule 149 (decl_specifier -> storage_class_specifier .)
    VOLATILE        reduce using rule 149 (decl_specifier -> storage_class_specifier .)
    IDENTIFIER      reduce using rule 149 (decl_specifier -> storage_class_specifier .)
    BNOP            reduce using rule 149 (decl_specifier -> storage_class_specifier .)
    MULTOP          reduce using rule 149 (decl_specifier -> storage_class_specifier .)
    BANDOP          reduce using rule 149 (decl_specifier -> storage_class_specifier .)
    CHAR            reduce using rule 149 (decl_specifier -> storage_class_specifier .)
    SHORT           reduce using rule 149 (decl_specifier -> storage_class_specifier .)
    INT             reduce using rule 149 (decl_specifier -> storage_class_specifier .)
    LONG            reduce using rule 149 (decl_specifier -> storage_class_specifier .)
    SIGNED          reduce using rule 149 (decl_specifier -> storage_class_specifier .)
    UNSIGNED        reduce using rule 149 (decl_specifier -> storage_class_specifier .)
    FLOAT           reduce using rule 149 (decl_specifier -> storage_class_specifier .)
    DOUBLE          reduce using rule 149 (decl_specifier -> storage_class_specifier .)
    VOID            reduce using rule 149 (decl_specifier -> storage_class_specifier .)
    STRING          reduce using rule 149 (decl_specifier -> storage_class_specifier .)
    ENUM            reduce using rule 149 (decl_specifier -> storage_class_specifier .)
    TYPE            reduce using rule 149 (decl_specifier -> storage_class_specifier .)
    OPERATOR        reduce using rule 149 (decl_specifier -> storage_class_specifier .)
    CLASS           reduce using rule 149 (decl_specifier -> storage_class_specifier .)
    STRUCT          reduce using rule 149 (decl_specifier -> storage_class_specifier .)
    UNION           reduce using rule 149 (decl_specifier -> storage_class_specifier .)
    TEMPLATE        reduce using rule 149 (decl_specifier -> storage_class_specifier .)
    EQUAL           reduce using rule 149 (decl_specifier -> storage_class_specifier .)
    LSPAREN         reduce using rule 149 (decl_specifier -> storage_class_specifier .)
    COMMA           reduce using rule 149 (decl_specifier -> storage_class_specifier .)
    RPAREN          reduce using rule 149 (decl_specifier -> storage_class_specifier .)
    RTEMPLATE       reduce using rule 149 (decl_specifier -> storage_class_specifier .)
    COLON           reduce using rule 149 (decl_specifier -> storage_class_specifier .)


state 17

    (150) decl_specifier -> type_specifier .

    SEMICOLON       reduce using rule 150 (decl_specifier -> type_specifier .)
    TYPEDEF         reduce using rule 150 (decl_specifier -> type_specifier .)
    LPAREN          reduce using rule 150 (decl_specifier -> type_specifier .)
    AUTO            reduce using rule 150 (decl_specifier -> type_specifier .)
    STATIC          reduce using rule 150 (decl_specifier -> type_specifier .)
    EXTERN          reduce using rule 150 (decl_specifier -> type_specifier .)
    VIRTUAL         reduce using rule 150 (decl_specifier -> type_specifier .)
    CONST           reduce using rule 150 (decl_specifier -> type_specifier .)
    VOLATILE        reduce using rule 150 (decl_specifier -> type_specifier .)
    IDENTIFIER      reduce using rule 150 (decl_specifier -> type_specifier .)
    BNOP            reduce using rule 150 (decl_specifier -> type_specifier .)
    MULTOP          reduce using rule 150 (decl_specifier -> type_specifier .)
    BANDOP          reduce using rule 150 (decl_specifier -> type_specifier .)
    CHAR            reduce using rule 150 (decl_specifier -> type_specifier .)
    SHORT           reduce using rule 150 (decl_specifier -> type_specifier .)
    INT             reduce using rule 150 (decl_specifier -> type_specifier .)
    LONG            reduce using rule 150 (decl_specifier -> type_specifier .)
    SIGNED          reduce using rule 150 (decl_specifier -> type_specifier .)
    UNSIGNED        reduce using rule 150 (decl_specifier -> type_specifier .)
    FLOAT           reduce using rule 150 (decl_specifier -> type_specifier .)
    DOUBLE          reduce using rule 150 (decl_specifier -> type_specifier .)
    VOID            reduce using rule 150 (decl_specifier -> type_specifier .)
    STRING          reduce using rule 150 (decl_specifier -> type_specifier .)
    ENUM            reduce using rule 150 (decl_specifier -> type_specifier .)
    TYPE            reduce using rule 150 (decl_specifier -> type_specifier .)
    OPERATOR        reduce using rule 150 (decl_specifier -> type_specifier .)
    CLASS           reduce using rule 150 (decl_specifier -> type_specifier .)
    STRUCT          reduce using rule 150 (decl_specifier -> type_specifier .)
    UNION           reduce using rule 150 (decl_specifier -> type_specifier .)
    TEMPLATE        reduce using rule 150 (decl_specifier -> type_specifier .)
    EQUAL           reduce using rule 150 (decl_specifier -> type_specifier .)
    LSPAREN         reduce using rule 150 (decl_specifier -> type_specifier .)
    COMMA           reduce using rule 150 (decl_specifier -> type_specifier .)
    RPAREN          reduce using rule 150 (decl_specifier -> type_specifier .)
    RTEMPLATE       reduce using rule 150 (decl_specifier -> type_specifier .)
    COLON           reduce using rule 150 (decl_specifier -> type_specifier .)


state 18

    (151) decl_specifier -> TYPEDEF .

    SEMICOLON       reduce using rule 151 (decl_specifier -> TYPEDEF .)
    TYPEDEF         reduce using rule 151 (decl_specifier -> TYPEDEF .)
    LPAREN          reduce using rule 151 (decl_specifier -> TYPEDEF .)
    AUTO            reduce using rule 151 (decl_specifier -> TYPEDEF .)
    STATIC          reduce using rule 151 (decl_specifier -> TYPEDEF .)
    EXTERN          reduce using rule 151 (decl_specifier -> TYPEDEF .)
    VIRTUAL         reduce using rule 151 (decl_specifier -> TYPEDEF .)
    CONST           reduce using rule 151 (decl_specifier -> TYPEDEF .)
    VOLATILE        reduce using rule 151 (decl_specifier -> TYPEDEF .)
    IDENTIFIER      reduce using rule 151 (decl_specifier -> TYPEDEF .)
    BNOP            reduce using rule 151 (decl_specifier -> TYPEDEF .)
    MULTOP          reduce using rule 151 (decl_specifier -> TYPEDEF .)
    BANDOP          reduce using rule 151 (decl_specifier -> TYPEDEF .)
    CHAR            reduce using rule 151 (decl_specifier -> TYPEDEF .)
    SHORT           reduce using rule 151 (decl_specifier -> TYPEDEF .)
    INT             reduce using rule 151 (decl_specifier -> TYPEDEF .)
    LONG            reduce using rule 151 (decl_specifier -> TYPEDEF .)
    SIGNED          reduce using rule 151 (decl_specifier -> TYPEDEF .)
    UNSIGNED        reduce using rule 151 (decl_specifier -> TYPEDEF .)
    FLOAT           reduce using rule 151 (decl_specifier -> TYPEDEF .)
    DOUBLE          reduce using rule 151 (decl_specifier -> TYPEDEF .)
    VOID            reduce using rule 151 (decl_specifier -> TYPEDEF .)
    STRING          reduce using rule 151 (decl_specifier -> TYPEDEF .)
    ENUM            reduce using rule 151 (decl_specifier -> TYPEDEF .)
    TYPE            reduce using rule 151 (decl_specifier -> TYPEDEF .)
    OPERATOR        reduce using rule 151 (decl_specifier -> TYPEDEF .)
    CLASS           reduce using rule 151 (decl_specifier -> TYPEDEF .)
    STRUCT          reduce using rule 151 (decl_specifier -> TYPEDEF .)
    UNION           reduce using rule 151 (decl_specifier -> TYPEDEF .)
    TEMPLATE        reduce using rule 151 (decl_specifier -> TYPEDEF .)
    EQUAL           reduce using rule 151 (decl_specifier -> TYPEDEF .)
    LSPAREN         reduce using rule 151 (decl_specifier -> TYPEDEF .)
    COMMA           reduce using rule 151 (decl_specifier -> TYPEDEF .)
    RPAREN          reduce using rule 151 (decl_specifier -> TYPEDEF .)
    RTEMPLATE       reduce using rule 151 (decl_specifier -> TYPEDEF .)
    COLON           reduce using rule 151 (decl_specifier -> TYPEDEF .)


state 19

    (253) declarator -> name .

    LPAREN          reduce using rule 253 (declarator -> name .)
    LSPAREN         reduce using rule 253 (declarator -> name .)
    EQUAL           reduce using rule 253 (declarator -> name .)
    LCPAREN         reduce using rule 253 (declarator -> name .)
    SEMICOLON       reduce using rule 253 (declarator -> name .)
    COMMA           reduce using rule 253 (declarator -> name .)
    RPAREN          reduce using rule 253 (declarator -> name .)
    RTEMPLATE       reduce using rule 253 (declarator -> name .)


state 20

    (254) declarator -> unary2_operator . declarator
    (253) declarator -> . name
    (254) declarator -> . unary2_operator declarator
    (255) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (256) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (257) declarator -> . declarator LSPAREN RSPAREN
    (258) declarator -> . LPAREN declarator RPAREN
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (264) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 13
    IDENTIFIER      shift and go to state 31
    BNOP            shift and go to state 33
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    OPERATOR        shift and go to state 50

    unary2_operator                shift and go to state 20
    declarator                     shift and go to state 72
    name                           shift and go to state 19
    operator_function_name         shift and go to state 32

state 21

    (152) storage_class_specifier -> AUTO .

    SEMICOLON       reduce using rule 152 (storage_class_specifier -> AUTO .)
    TYPEDEF         reduce using rule 152 (storage_class_specifier -> AUTO .)
    LPAREN          reduce using rule 152 (storage_class_specifier -> AUTO .)
    AUTO            reduce using rule 152 (storage_class_specifier -> AUTO .)
    STATIC          reduce using rule 152 (storage_class_specifier -> AUTO .)
    EXTERN          reduce using rule 152 (storage_class_specifier -> AUTO .)
    VIRTUAL         reduce using rule 152 (storage_class_specifier -> AUTO .)
    CONST           reduce using rule 152 (storage_class_specifier -> AUTO .)
    VOLATILE        reduce using rule 152 (storage_class_specifier -> AUTO .)
    IDENTIFIER      reduce using rule 152 (storage_class_specifier -> AUTO .)
    BNOP            reduce using rule 152 (storage_class_specifier -> AUTO .)
    MULTOP          reduce using rule 152 (storage_class_specifier -> AUTO .)
    BANDOP          reduce using rule 152 (storage_class_specifier -> AUTO .)
    CHAR            reduce using rule 152 (storage_class_specifier -> AUTO .)
    SHORT           reduce using rule 152 (storage_class_specifier -> AUTO .)
    INT             reduce using rule 152 (storage_class_specifier -> AUTO .)
    LONG            reduce using rule 152 (storage_class_specifier -> AUTO .)
    SIGNED          reduce using rule 152 (storage_class_specifier -> AUTO .)
    UNSIGNED        reduce using rule 152 (storage_class_specifier -> AUTO .)
    FLOAT           reduce using rule 152 (storage_class_specifier -> AUTO .)
    DOUBLE          reduce using rule 152 (storage_class_specifier -> AUTO .)
    VOID            reduce using rule 152 (storage_class_specifier -> AUTO .)
    STRING          reduce using rule 152 (storage_class_specifier -> AUTO .)
    ENUM            reduce using rule 152 (storage_class_specifier -> AUTO .)
    TYPE            reduce using rule 152 (storage_class_specifier -> AUTO .)
    OPERATOR        reduce using rule 152 (storage_class_specifier -> AUTO .)
    CLASS           reduce using rule 152 (storage_class_specifier -> AUTO .)
    STRUCT          reduce using rule 152 (storage_class_specifier -> AUTO .)
    UNION           reduce using rule 152 (storage_class_specifier -> AUTO .)
    TEMPLATE        reduce using rule 152 (storage_class_specifier -> AUTO .)
    EQUAL           reduce using rule 152 (storage_class_specifier -> AUTO .)
    LSPAREN         reduce using rule 152 (storage_class_specifier -> AUTO .)
    COMMA           reduce using rule 152 (storage_class_specifier -> AUTO .)
    RPAREN          reduce using rule 152 (storage_class_specifier -> AUTO .)
    RTEMPLATE       reduce using rule 152 (storage_class_specifier -> AUTO .)
    COLON           reduce using rule 152 (storage_class_specifier -> AUTO .)


state 22

    (153) storage_class_specifier -> STATIC .

    SEMICOLON       reduce using rule 153 (storage_class_specifier -> STATIC .)
    TYPEDEF         reduce using rule 153 (storage_class_specifier -> STATIC .)
    LPAREN          reduce using rule 153 (storage_class_specifier -> STATIC .)
    AUTO            reduce using rule 153 (storage_class_specifier -> STATIC .)
    STATIC          reduce using rule 153 (storage_class_specifier -> STATIC .)
    EXTERN          reduce using rule 153 (storage_class_specifier -> STATIC .)
    VIRTUAL         reduce using rule 153 (storage_class_specifier -> STATIC .)
    CONST           reduce using rule 153 (storage_class_specifier -> STATIC .)
    VOLATILE        reduce using rule 153 (storage_class_specifier -> STATIC .)
    IDENTIFIER      reduce using rule 153 (storage_class_specifier -> STATIC .)
    BNOP            reduce using rule 153 (storage_class_specifier -> STATIC .)
    MULTOP          reduce using rule 153 (storage_class_specifier -> STATIC .)
    BANDOP          reduce using rule 153 (storage_class_specifier -> STATIC .)
    CHAR            reduce using rule 153 (storage_class_specifier -> STATIC .)
    SHORT           reduce using rule 153 (storage_class_specifier -> STATIC .)
    INT             reduce using rule 153 (storage_class_specifier -> STATIC .)
    LONG            reduce using rule 153 (storage_class_specifier -> STATIC .)
    SIGNED          reduce using rule 153 (storage_class_specifier -> STATIC .)
    UNSIGNED        reduce using rule 153 (storage_class_specifier -> STATIC .)
    FLOAT           reduce using rule 153 (storage_class_specifier -> STATIC .)
    DOUBLE          reduce using rule 153 (storage_class_specifier -> STATIC .)
    VOID            reduce using rule 153 (storage_class_specifier -> STATIC .)
    STRING          reduce using rule 153 (storage_class_specifier -> STATIC .)
    ENUM            reduce using rule 153 (storage_class_specifier -> STATIC .)
    TYPE            reduce using rule 153 (storage_class_specifier -> STATIC .)
    OPERATOR        reduce using rule 153 (storage_class_specifier -> STATIC .)
    CLASS           reduce using rule 153 (storage_class_specifier -> STATIC .)
    STRUCT          reduce using rule 153 (storage_class_specifier -> STATIC .)
    UNION           reduce using rule 153 (storage_class_specifier -> STATIC .)
    TEMPLATE        reduce using rule 153 (storage_class_specifier -> STATIC .)
    EQUAL           reduce using rule 153 (storage_class_specifier -> STATIC .)
    LSPAREN         reduce using rule 153 (storage_class_specifier -> STATIC .)
    COMMA           reduce using rule 153 (storage_class_specifier -> STATIC .)
    RPAREN          reduce using rule 153 (storage_class_specifier -> STATIC .)
    RTEMPLATE       reduce using rule 153 (storage_class_specifier -> STATIC .)
    COLON           reduce using rule 153 (storage_class_specifier -> STATIC .)


state 23

    (154) storage_class_specifier -> EXTERN .

    SEMICOLON       reduce using rule 154 (storage_class_specifier -> EXTERN .)
    TYPEDEF         reduce using rule 154 (storage_class_specifier -> EXTERN .)
    LPAREN          reduce using rule 154 (storage_class_specifier -> EXTERN .)
    AUTO            reduce using rule 154 (storage_class_specifier -> EXTERN .)
    STATIC          reduce using rule 154 (storage_class_specifier -> EXTERN .)
    EXTERN          reduce using rule 154 (storage_class_specifier -> EXTERN .)
    VIRTUAL         reduce using rule 154 (storage_class_specifier -> EXTERN .)
    CONST           reduce using rule 154 (storage_class_specifier -> EXTERN .)
    VOLATILE        reduce using rule 154 (storage_class_specifier -> EXTERN .)
    IDENTIFIER      reduce using rule 154 (storage_class_specifier -> EXTERN .)
    BNOP            reduce using rule 154 (storage_class_specifier -> EXTERN .)
    MULTOP          reduce using rule 154 (storage_class_specifier -> EXTERN .)
    BANDOP          reduce using rule 154 (storage_class_specifier -> EXTERN .)
    CHAR            reduce using rule 154 (storage_class_specifier -> EXTERN .)
    SHORT           reduce using rule 154 (storage_class_specifier -> EXTERN .)
    INT             reduce using rule 154 (storage_class_specifier -> EXTERN .)
    LONG            reduce using rule 154 (storage_class_specifier -> EXTERN .)
    SIGNED          reduce using rule 154 (storage_class_specifier -> EXTERN .)
    UNSIGNED        reduce using rule 154 (storage_class_specifier -> EXTERN .)
    FLOAT           reduce using rule 154 (storage_class_specifier -> EXTERN .)
    DOUBLE          reduce using rule 154 (storage_class_specifier -> EXTERN .)
    VOID            reduce using rule 154 (storage_class_specifier -> EXTERN .)
    STRING          reduce using rule 154 (storage_class_specifier -> EXTERN .)
    ENUM            reduce using rule 154 (storage_class_specifier -> EXTERN .)
    TYPE            reduce using rule 154 (storage_class_specifier -> EXTERN .)
    OPERATOR        reduce using rule 154 (storage_class_specifier -> EXTERN .)
    CLASS           reduce using rule 154 (storage_class_specifier -> EXTERN .)
    STRUCT          reduce using rule 154 (storage_class_specifier -> EXTERN .)
    UNION           reduce using rule 154 (storage_class_specifier -> EXTERN .)
    TEMPLATE        reduce using rule 154 (storage_class_specifier -> EXTERN .)
    EQUAL           reduce using rule 154 (storage_class_specifier -> EXTERN .)
    LSPAREN         reduce using rule 154 (storage_class_specifier -> EXTERN .)
    COMMA           reduce using rule 154 (storage_class_specifier -> EXTERN .)
    RPAREN          reduce using rule 154 (storage_class_specifier -> EXTERN .)
    RTEMPLATE       reduce using rule 154 (storage_class_specifier -> EXTERN .)
    COLON           reduce using rule 154 (storage_class_specifier -> EXTERN .)


state 24

    (155) storage_class_specifier -> VIRTUAL .

    SEMICOLON       reduce using rule 155 (storage_class_specifier -> VIRTUAL .)
    TYPEDEF         reduce using rule 155 (storage_class_specifier -> VIRTUAL .)
    LPAREN          reduce using rule 155 (storage_class_specifier -> VIRTUAL .)
    AUTO            reduce using rule 155 (storage_class_specifier -> VIRTUAL .)
    STATIC          reduce using rule 155 (storage_class_specifier -> VIRTUAL .)
    EXTERN          reduce using rule 155 (storage_class_specifier -> VIRTUAL .)
    VIRTUAL         reduce using rule 155 (storage_class_specifier -> VIRTUAL .)
    CONST           reduce using rule 155 (storage_class_specifier -> VIRTUAL .)
    VOLATILE        reduce using rule 155 (storage_class_specifier -> VIRTUAL .)
    IDENTIFIER      reduce using rule 155 (storage_class_specifier -> VIRTUAL .)
    BNOP            reduce using rule 155 (storage_class_specifier -> VIRTUAL .)
    MULTOP          reduce using rule 155 (storage_class_specifier -> VIRTUAL .)
    BANDOP          reduce using rule 155 (storage_class_specifier -> VIRTUAL .)
    CHAR            reduce using rule 155 (storage_class_specifier -> VIRTUAL .)
    SHORT           reduce using rule 155 (storage_class_specifier -> VIRTUAL .)
    INT             reduce using rule 155 (storage_class_specifier -> VIRTUAL .)
    LONG            reduce using rule 155 (storage_class_specifier -> VIRTUAL .)
    SIGNED          reduce using rule 155 (storage_class_specifier -> VIRTUAL .)
    UNSIGNED        reduce using rule 155 (storage_class_specifier -> VIRTUAL .)
    FLOAT           reduce using rule 155 (storage_class_specifier -> VIRTUAL .)
    DOUBLE          reduce using rule 155 (storage_class_specifier -> VIRTUAL .)
    VOID            reduce using rule 155 (storage_class_specifier -> VIRTUAL .)
    STRING          reduce using rule 155 (storage_class_specifier -> VIRTUAL .)
    ENUM            reduce using rule 155 (storage_class_specifier -> VIRTUAL .)
    TYPE            reduce using rule 155 (storage_class_specifier -> VIRTUAL .)
    OPERATOR        reduce using rule 155 (storage_class_specifier -> VIRTUAL .)
    CLASS           reduce using rule 155 (storage_class_specifier -> VIRTUAL .)
    STRUCT          reduce using rule 155 (storage_class_specifier -> VIRTUAL .)
    UNION           reduce using rule 155 (storage_class_specifier -> VIRTUAL .)
    TEMPLATE        reduce using rule 155 (storage_class_specifier -> VIRTUAL .)
    EQUAL           reduce using rule 155 (storage_class_specifier -> VIRTUAL .)
    LSPAREN         reduce using rule 155 (storage_class_specifier -> VIRTUAL .)
    COMMA           reduce using rule 155 (storage_class_specifier -> VIRTUAL .)
    RPAREN          reduce using rule 155 (storage_class_specifier -> VIRTUAL .)
    RTEMPLATE       reduce using rule 155 (storage_class_specifier -> VIRTUAL .)
    COLON           reduce using rule 155 (storage_class_specifier -> VIRTUAL .)


state 25

    (156) type_specifier -> simple_type_name .

    SEMICOLON       reduce using rule 156 (type_specifier -> simple_type_name .)
    TYPEDEF         reduce using rule 156 (type_specifier -> simple_type_name .)
    LPAREN          reduce using rule 156 (type_specifier -> simple_type_name .)
    AUTO            reduce using rule 156 (type_specifier -> simple_type_name .)
    STATIC          reduce using rule 156 (type_specifier -> simple_type_name .)
    EXTERN          reduce using rule 156 (type_specifier -> simple_type_name .)
    VIRTUAL         reduce using rule 156 (type_specifier -> simple_type_name .)
    CONST           reduce using rule 156 (type_specifier -> simple_type_name .)
    VOLATILE        reduce using rule 156 (type_specifier -> simple_type_name .)
    IDENTIFIER      reduce using rule 156 (type_specifier -> simple_type_name .)
    BNOP            reduce using rule 156 (type_specifier -> simple_type_name .)
    MULTOP          reduce using rule 156 (type_specifier -> simple_type_name .)
    BANDOP          reduce using rule 156 (type_specifier -> simple_type_name .)
    CHAR            reduce using rule 156 (type_specifier -> simple_type_name .)
    SHORT           reduce using rule 156 (type_specifier -> simple_type_name .)
    INT             reduce using rule 156 (type_specifier -> simple_type_name .)
    LONG            reduce using rule 156 (type_specifier -> simple_type_name .)
    SIGNED          reduce using rule 156 (type_specifier -> simple_type_name .)
    UNSIGNED        reduce using rule 156 (type_specifier -> simple_type_name .)
    FLOAT           reduce using rule 156 (type_specifier -> simple_type_name .)
    DOUBLE          reduce using rule 156 (type_specifier -> simple_type_name .)
    VOID            reduce using rule 156 (type_specifier -> simple_type_name .)
    STRING          reduce using rule 156 (type_specifier -> simple_type_name .)
    ENUM            reduce using rule 156 (type_specifier -> simple_type_name .)
    TYPE            reduce using rule 156 (type_specifier -> simple_type_name .)
    OPERATOR        reduce using rule 156 (type_specifier -> simple_type_name .)
    CLASS           reduce using rule 156 (type_specifier -> simple_type_name .)
    STRUCT          reduce using rule 156 (type_specifier -> simple_type_name .)
    UNION           reduce using rule 156 (type_specifier -> simple_type_name .)
    TEMPLATE        reduce using rule 156 (type_specifier -> simple_type_name .)
    EQUAL           reduce using rule 156 (type_specifier -> simple_type_name .)
    LSPAREN         reduce using rule 156 (type_specifier -> simple_type_name .)
    RTEMPLATE       reduce using rule 156 (type_specifier -> simple_type_name .)
    COMMA           reduce using rule 156 (type_specifier -> simple_type_name .)
    COLON           reduce using rule 156 (type_specifier -> simple_type_name .)
    RPAREN          reduce using rule 156 (type_specifier -> simple_type_name .)
    MULTEQOP        reduce using rule 156 (type_specifier -> simple_type_name .)
    DIVEQOP         reduce using rule 156 (type_specifier -> simple_type_name .)
    MODEQOP         reduce using rule 156 (type_specifier -> simple_type_name .)
    PLUSEQOP        reduce using rule 156 (type_specifier -> simple_type_name .)
    MINUSEQOP       reduce using rule 156 (type_specifier -> simple_type_name .)
    LSHIFTEQOP      reduce using rule 156 (type_specifier -> simple_type_name .)
    RSHIFTEQOP      reduce using rule 156 (type_specifier -> simple_type_name .)
    BANDEQOP        reduce using rule 156 (type_specifier -> simple_type_name .)
    BOREQOP         reduce using rule 156 (type_specifier -> simple_type_name .)
    DOTSTAR         reduce using rule 156 (type_specifier -> simple_type_name .)
    ARROWSTAR       reduce using rule 156 (type_specifier -> simple_type_name .)
    DIVOP           reduce using rule 156 (type_specifier -> simple_type_name .)
    MODOP           reduce using rule 156 (type_specifier -> simple_type_name .)
    PLUSOP          reduce using rule 156 (type_specifier -> simple_type_name .)
    MINUSOP         reduce using rule 156 (type_specifier -> simple_type_name .)
    LSHIFT          reduce using rule 156 (type_specifier -> simple_type_name .)
    RSHIFT          reduce using rule 156 (type_specifier -> simple_type_name .)
    LTCOMP          reduce using rule 156 (type_specifier -> simple_type_name .)
    GTCOMP          reduce using rule 156 (type_specifier -> simple_type_name .)
    LTECOMP         reduce using rule 156 (type_specifier -> simple_type_name .)
    GTECOMP         reduce using rule 156 (type_specifier -> simple_type_name .)
    EQCOMP          reduce using rule 156 (type_specifier -> simple_type_name .)
    NEQCOMP         reduce using rule 156 (type_specifier -> simple_type_name .)
    XOROP           reduce using rule 156 (type_specifier -> simple_type_name .)
    OROP            reduce using rule 156 (type_specifier -> simple_type_name .)
    ANDOP           reduce using rule 156 (type_specifier -> simple_type_name .)
    QUESMARK        reduce using rule 156 (type_specifier -> simple_type_name .)
    RSPAREN         reduce using rule 156 (type_specifier -> simple_type_name .)
    RCPAREN         reduce using rule 156 (type_specifier -> simple_type_name .)


state 26

    (157) type_specifier -> class_specifier .

    SEMICOLON       reduce using rule 157 (type_specifier -> class_specifier .)
    TYPEDEF         reduce using rule 157 (type_specifier -> class_specifier .)
    LPAREN          reduce using rule 157 (type_specifier -> class_specifier .)
    AUTO            reduce using rule 157 (type_specifier -> class_specifier .)
    STATIC          reduce using rule 157 (type_specifier -> class_specifier .)
    EXTERN          reduce using rule 157 (type_specifier -> class_specifier .)
    VIRTUAL         reduce using rule 157 (type_specifier -> class_specifier .)
    CONST           reduce using rule 157 (type_specifier -> class_specifier .)
    VOLATILE        reduce using rule 157 (type_specifier -> class_specifier .)
    IDENTIFIER      reduce using rule 157 (type_specifier -> class_specifier .)
    BNOP            reduce using rule 157 (type_specifier -> class_specifier .)
    MULTOP          reduce using rule 157 (type_specifier -> class_specifier .)
    BANDOP          reduce using rule 157 (type_specifier -> class_specifier .)
    CHAR            reduce using rule 157 (type_specifier -> class_specifier .)
    SHORT           reduce using rule 157 (type_specifier -> class_specifier .)
    INT             reduce using rule 157 (type_specifier -> class_specifier .)
    LONG            reduce using rule 157 (type_specifier -> class_specifier .)
    SIGNED          reduce using rule 157 (type_specifier -> class_specifier .)
    UNSIGNED        reduce using rule 157 (type_specifier -> class_specifier .)
    FLOAT           reduce using rule 157 (type_specifier -> class_specifier .)
    DOUBLE          reduce using rule 157 (type_specifier -> class_specifier .)
    VOID            reduce using rule 157 (type_specifier -> class_specifier .)
    STRING          reduce using rule 157 (type_specifier -> class_specifier .)
    ENUM            reduce using rule 157 (type_specifier -> class_specifier .)
    TYPE            reduce using rule 157 (type_specifier -> class_specifier .)
    OPERATOR        reduce using rule 157 (type_specifier -> class_specifier .)
    CLASS           reduce using rule 157 (type_specifier -> class_specifier .)
    STRUCT          reduce using rule 157 (type_specifier -> class_specifier .)
    UNION           reduce using rule 157 (type_specifier -> class_specifier .)
    TEMPLATE        reduce using rule 157 (type_specifier -> class_specifier .)
    EQUAL           reduce using rule 157 (type_specifier -> class_specifier .)
    LSPAREN         reduce using rule 157 (type_specifier -> class_specifier .)
    COMMA           reduce using rule 157 (type_specifier -> class_specifier .)
    RPAREN          reduce using rule 157 (type_specifier -> class_specifier .)
    RTEMPLATE       reduce using rule 157 (type_specifier -> class_specifier .)
    COLON           reduce using rule 157 (type_specifier -> class_specifier .)
    MULTEQOP        reduce using rule 157 (type_specifier -> class_specifier .)
    DIVEQOP         reduce using rule 157 (type_specifier -> class_specifier .)
    MODEQOP         reduce using rule 157 (type_specifier -> class_specifier .)
    PLUSEQOP        reduce using rule 157 (type_specifier -> class_specifier .)
    MINUSEQOP       reduce using rule 157 (type_specifier -> class_specifier .)
    LSHIFTEQOP      reduce using rule 157 (type_specifier -> class_specifier .)
    RSHIFTEQOP      reduce using rule 157 (type_specifier -> class_specifier .)
    BANDEQOP        reduce using rule 157 (type_specifier -> class_specifier .)
    BOREQOP         reduce using rule 157 (type_specifier -> class_specifier .)
    DOTSTAR         reduce using rule 157 (type_specifier -> class_specifier .)
    ARROWSTAR       reduce using rule 157 (type_specifier -> class_specifier .)
    DIVOP           reduce using rule 157 (type_specifier -> class_specifier .)
    MODOP           reduce using rule 157 (type_specifier -> class_specifier .)
    PLUSOP          reduce using rule 157 (type_specifier -> class_specifier .)
    MINUSOP         reduce using rule 157 (type_specifier -> class_specifier .)
    LSHIFT          reduce using rule 157 (type_specifier -> class_specifier .)
    RSHIFT          reduce using rule 157 (type_specifier -> class_specifier .)
    LTCOMP          reduce using rule 157 (type_specifier -> class_specifier .)
    GTCOMP          reduce using rule 157 (type_specifier -> class_specifier .)
    LTECOMP         reduce using rule 157 (type_specifier -> class_specifier .)
    GTECOMP         reduce using rule 157 (type_specifier -> class_specifier .)
    EQCOMP          reduce using rule 157 (type_specifier -> class_specifier .)
    NEQCOMP         reduce using rule 157 (type_specifier -> class_specifier .)
    XOROP           reduce using rule 157 (type_specifier -> class_specifier .)
    OROP            reduce using rule 157 (type_specifier -> class_specifier .)
    ANDOP           reduce using rule 157 (type_specifier -> class_specifier .)
    QUESMARK        reduce using rule 157 (type_specifier -> class_specifier .)
    RSPAREN         reduce using rule 157 (type_specifier -> class_specifier .)
    RCPAREN         reduce using rule 157 (type_specifier -> class_specifier .)


state 27

    (158) type_specifier -> enum_specifier .

    SEMICOLON       reduce using rule 158 (type_specifier -> enum_specifier .)
    TYPEDEF         reduce using rule 158 (type_specifier -> enum_specifier .)
    LPAREN          reduce using rule 158 (type_specifier -> enum_specifier .)
    AUTO            reduce using rule 158 (type_specifier -> enum_specifier .)
    STATIC          reduce using rule 158 (type_specifier -> enum_specifier .)
    EXTERN          reduce using rule 158 (type_specifier -> enum_specifier .)
    VIRTUAL         reduce using rule 158 (type_specifier -> enum_specifier .)
    CONST           reduce using rule 158 (type_specifier -> enum_specifier .)
    VOLATILE        reduce using rule 158 (type_specifier -> enum_specifier .)
    IDENTIFIER      reduce using rule 158 (type_specifier -> enum_specifier .)
    BNOP            reduce using rule 158 (type_specifier -> enum_specifier .)
    MULTOP          reduce using rule 158 (type_specifier -> enum_specifier .)
    BANDOP          reduce using rule 158 (type_specifier -> enum_specifier .)
    CHAR            reduce using rule 158 (type_specifier -> enum_specifier .)
    SHORT           reduce using rule 158 (type_specifier -> enum_specifier .)
    INT             reduce using rule 158 (type_specifier -> enum_specifier .)
    LONG            reduce using rule 158 (type_specifier -> enum_specifier .)
    SIGNED          reduce using rule 158 (type_specifier -> enum_specifier .)
    UNSIGNED        reduce using rule 158 (type_specifier -> enum_specifier .)
    FLOAT           reduce using rule 158 (type_specifier -> enum_specifier .)
    DOUBLE          reduce using rule 158 (type_specifier -> enum_specifier .)
    VOID            reduce using rule 158 (type_specifier -> enum_specifier .)
    STRING          reduce using rule 158 (type_specifier -> enum_specifier .)
    ENUM            reduce using rule 158 (type_specifier -> enum_specifier .)
    TYPE            reduce using rule 158 (type_specifier -> enum_specifier .)
    OPERATOR        reduce using rule 158 (type_specifier -> enum_specifier .)
    CLASS           reduce using rule 158 (type_specifier -> enum_specifier .)
    STRUCT          reduce using rule 158 (type_specifier -> enum_specifier .)
    UNION           reduce using rule 158 (type_specifier -> enum_specifier .)
    TEMPLATE        reduce using rule 158 (type_specifier -> enum_specifier .)
    EQUAL           reduce using rule 158 (type_specifier -> enum_specifier .)
    LSPAREN         reduce using rule 158 (type_specifier -> enum_specifier .)
    COMMA           reduce using rule 158 (type_specifier -> enum_specifier .)
    RPAREN          reduce using rule 158 (type_specifier -> enum_specifier .)
    RTEMPLATE       reduce using rule 158 (type_specifier -> enum_specifier .)
    COLON           reduce using rule 158 (type_specifier -> enum_specifier .)
    MULTEQOP        reduce using rule 158 (type_specifier -> enum_specifier .)
    DIVEQOP         reduce using rule 158 (type_specifier -> enum_specifier .)
    MODEQOP         reduce using rule 158 (type_specifier -> enum_specifier .)
    PLUSEQOP        reduce using rule 158 (type_specifier -> enum_specifier .)
    MINUSEQOP       reduce using rule 158 (type_specifier -> enum_specifier .)
    LSHIFTEQOP      reduce using rule 158 (type_specifier -> enum_specifier .)
    RSHIFTEQOP      reduce using rule 158 (type_specifier -> enum_specifier .)
    BANDEQOP        reduce using rule 158 (type_specifier -> enum_specifier .)
    BOREQOP         reduce using rule 158 (type_specifier -> enum_specifier .)
    DOTSTAR         reduce using rule 158 (type_specifier -> enum_specifier .)
    ARROWSTAR       reduce using rule 158 (type_specifier -> enum_specifier .)
    DIVOP           reduce using rule 158 (type_specifier -> enum_specifier .)
    MODOP           reduce using rule 158 (type_specifier -> enum_specifier .)
    PLUSOP          reduce using rule 158 (type_specifier -> enum_specifier .)
    MINUSOP         reduce using rule 158 (type_specifier -> enum_specifier .)
    LSHIFT          reduce using rule 158 (type_specifier -> enum_specifier .)
    RSHIFT          reduce using rule 158 (type_specifier -> enum_specifier .)
    LTCOMP          reduce using rule 158 (type_specifier -> enum_specifier .)
    GTCOMP          reduce using rule 158 (type_specifier -> enum_specifier .)
    LTECOMP         reduce using rule 158 (type_specifier -> enum_specifier .)
    GTECOMP         reduce using rule 158 (type_specifier -> enum_specifier .)
    EQCOMP          reduce using rule 158 (type_specifier -> enum_specifier .)
    NEQCOMP         reduce using rule 158 (type_specifier -> enum_specifier .)
    XOROP           reduce using rule 158 (type_specifier -> enum_specifier .)
    OROP            reduce using rule 158 (type_specifier -> enum_specifier .)
    ANDOP           reduce using rule 158 (type_specifier -> enum_specifier .)
    QUESMARK        reduce using rule 158 (type_specifier -> enum_specifier .)
    RSPAREN         reduce using rule 158 (type_specifier -> enum_specifier .)
    RCPAREN         reduce using rule 158 (type_specifier -> enum_specifier .)


state 28

    (159) type_specifier -> elaborated_type_specifier .

    SEMICOLON       reduce using rule 159 (type_specifier -> elaborated_type_specifier .)
    TYPEDEF         reduce using rule 159 (type_specifier -> elaborated_type_specifier .)
    LPAREN          reduce using rule 159 (type_specifier -> elaborated_type_specifier .)
    AUTO            reduce using rule 159 (type_specifier -> elaborated_type_specifier .)
    STATIC          reduce using rule 159 (type_specifier -> elaborated_type_specifier .)
    EXTERN          reduce using rule 159 (type_specifier -> elaborated_type_specifier .)
    VIRTUAL         reduce using rule 159 (type_specifier -> elaborated_type_specifier .)
    CONST           reduce using rule 159 (type_specifier -> elaborated_type_specifier .)
    VOLATILE        reduce using rule 159 (type_specifier -> elaborated_type_specifier .)
    IDENTIFIER      reduce using rule 159 (type_specifier -> elaborated_type_specifier .)
    BNOP            reduce using rule 159 (type_specifier -> elaborated_type_specifier .)
    MULTOP          reduce using rule 159 (type_specifier -> elaborated_type_specifier .)
    BANDOP          reduce using rule 159 (type_specifier -> elaborated_type_specifier .)
    CHAR            reduce using rule 159 (type_specifier -> elaborated_type_specifier .)
    SHORT           reduce using rule 159 (type_specifier -> elaborated_type_specifier .)
    INT             reduce using rule 159 (type_specifier -> elaborated_type_specifier .)
    LONG            reduce using rule 159 (type_specifier -> elaborated_type_specifier .)
    SIGNED          reduce using rule 159 (type_specifier -> elaborated_type_specifier .)
    UNSIGNED        reduce using rule 159 (type_specifier -> elaborated_type_specifier .)
    FLOAT           reduce using rule 159 (type_specifier -> elaborated_type_specifier .)
    DOUBLE          reduce using rule 159 (type_specifier -> elaborated_type_specifier .)
    VOID            reduce using rule 159 (type_specifier -> elaborated_type_specifier .)
    STRING          reduce using rule 159 (type_specifier -> elaborated_type_specifier .)
    ENUM            reduce using rule 159 (type_specifier -> elaborated_type_specifier .)
    TYPE            reduce using rule 159 (type_specifier -> elaborated_type_specifier .)
    OPERATOR        reduce using rule 159 (type_specifier -> elaborated_type_specifier .)
    CLASS           reduce using rule 159 (type_specifier -> elaborated_type_specifier .)
    STRUCT          reduce using rule 159 (type_specifier -> elaborated_type_specifier .)
    UNION           reduce using rule 159 (type_specifier -> elaborated_type_specifier .)
    TEMPLATE        reduce using rule 159 (type_specifier -> elaborated_type_specifier .)
    EQUAL           reduce using rule 159 (type_specifier -> elaborated_type_specifier .)
    LSPAREN         reduce using rule 159 (type_specifier -> elaborated_type_specifier .)
    COMMA           reduce using rule 159 (type_specifier -> elaborated_type_specifier .)
    RPAREN          reduce using rule 159 (type_specifier -> elaborated_type_specifier .)
    RTEMPLATE       reduce using rule 159 (type_specifier -> elaborated_type_specifier .)
    COLON           reduce using rule 159 (type_specifier -> elaborated_type_specifier .)
    MULTEQOP        reduce using rule 159 (type_specifier -> elaborated_type_specifier .)
    DIVEQOP         reduce using rule 159 (type_specifier -> elaborated_type_specifier .)
    MODEQOP         reduce using rule 159 (type_specifier -> elaborated_type_specifier .)
    PLUSEQOP        reduce using rule 159 (type_specifier -> elaborated_type_specifier .)
    MINUSEQOP       reduce using rule 159 (type_specifier -> elaborated_type_specifier .)
    LSHIFTEQOP      reduce using rule 159 (type_specifier -> elaborated_type_specifier .)
    RSHIFTEQOP      reduce using rule 159 (type_specifier -> elaborated_type_specifier .)
    BANDEQOP        reduce using rule 159 (type_specifier -> elaborated_type_specifier .)
    BOREQOP         reduce using rule 159 (type_specifier -> elaborated_type_specifier .)
    DOTSTAR         reduce using rule 159 (type_specifier -> elaborated_type_specifier .)
    ARROWSTAR       reduce using rule 159 (type_specifier -> elaborated_type_specifier .)
    DIVOP           reduce using rule 159 (type_specifier -> elaborated_type_specifier .)
    MODOP           reduce using rule 159 (type_specifier -> elaborated_type_specifier .)
    PLUSOP          reduce using rule 159 (type_specifier -> elaborated_type_specifier .)
    MINUSOP         reduce using rule 159 (type_specifier -> elaborated_type_specifier .)
    LSHIFT          reduce using rule 159 (type_specifier -> elaborated_type_specifier .)
    RSHIFT          reduce using rule 159 (type_specifier -> elaborated_type_specifier .)
    LTCOMP          reduce using rule 159 (type_specifier -> elaborated_type_specifier .)
    GTCOMP          reduce using rule 159 (type_specifier -> elaborated_type_specifier .)
    LTECOMP         reduce using rule 159 (type_specifier -> elaborated_type_specifier .)
    GTECOMP         reduce using rule 159 (type_specifier -> elaborated_type_specifier .)
    EQCOMP          reduce using rule 159 (type_specifier -> elaborated_type_specifier .)
    NEQCOMP         reduce using rule 159 (type_specifier -> elaborated_type_specifier .)
    XOROP           reduce using rule 159 (type_specifier -> elaborated_type_specifier .)
    OROP            reduce using rule 159 (type_specifier -> elaborated_type_specifier .)
    ANDOP           reduce using rule 159 (type_specifier -> elaborated_type_specifier .)
    QUESMARK        reduce using rule 159 (type_specifier -> elaborated_type_specifier .)
    RSPAREN         reduce using rule 159 (type_specifier -> elaborated_type_specifier .)
    RCPAREN         reduce using rule 159 (type_specifier -> elaborated_type_specifier .)


state 29

    (160) type_specifier -> CONST .

    SEMICOLON       reduce using rule 160 (type_specifier -> CONST .)
    TYPEDEF         reduce using rule 160 (type_specifier -> CONST .)
    LPAREN          reduce using rule 160 (type_specifier -> CONST .)
    AUTO            reduce using rule 160 (type_specifier -> CONST .)
    STATIC          reduce using rule 160 (type_specifier -> CONST .)
    EXTERN          reduce using rule 160 (type_specifier -> CONST .)
    VIRTUAL         reduce using rule 160 (type_specifier -> CONST .)
    CONST           reduce using rule 160 (type_specifier -> CONST .)
    VOLATILE        reduce using rule 160 (type_specifier -> CONST .)
    IDENTIFIER      reduce using rule 160 (type_specifier -> CONST .)
    BNOP            reduce using rule 160 (type_specifier -> CONST .)
    MULTOP          reduce using rule 160 (type_specifier -> CONST .)
    BANDOP          reduce using rule 160 (type_specifier -> CONST .)
    CHAR            reduce using rule 160 (type_specifier -> CONST .)
    SHORT           reduce using rule 160 (type_specifier -> CONST .)
    INT             reduce using rule 160 (type_specifier -> CONST .)
    LONG            reduce using rule 160 (type_specifier -> CONST .)
    SIGNED          reduce using rule 160 (type_specifier -> CONST .)
    UNSIGNED        reduce using rule 160 (type_specifier -> CONST .)
    FLOAT           reduce using rule 160 (type_specifier -> CONST .)
    DOUBLE          reduce using rule 160 (type_specifier -> CONST .)
    VOID            reduce using rule 160 (type_specifier -> CONST .)
    STRING          reduce using rule 160 (type_specifier -> CONST .)
    ENUM            reduce using rule 160 (type_specifier -> CONST .)
    TYPE            reduce using rule 160 (type_specifier -> CONST .)
    OPERATOR        reduce using rule 160 (type_specifier -> CONST .)
    CLASS           reduce using rule 160 (type_specifier -> CONST .)
    STRUCT          reduce using rule 160 (type_specifier -> CONST .)
    UNION           reduce using rule 160 (type_specifier -> CONST .)
    TEMPLATE        reduce using rule 160 (type_specifier -> CONST .)
    EQUAL           reduce using rule 160 (type_specifier -> CONST .)
    LSPAREN         reduce using rule 160 (type_specifier -> CONST .)
    COMMA           reduce using rule 160 (type_specifier -> CONST .)
    RPAREN          reduce using rule 160 (type_specifier -> CONST .)
    RTEMPLATE       reduce using rule 160 (type_specifier -> CONST .)
    COLON           reduce using rule 160 (type_specifier -> CONST .)
    MULTEQOP        reduce using rule 160 (type_specifier -> CONST .)
    DIVEQOP         reduce using rule 160 (type_specifier -> CONST .)
    MODEQOP         reduce using rule 160 (type_specifier -> CONST .)
    PLUSEQOP        reduce using rule 160 (type_specifier -> CONST .)
    MINUSEQOP       reduce using rule 160 (type_specifier -> CONST .)
    LSHIFTEQOP      reduce using rule 160 (type_specifier -> CONST .)
    RSHIFTEQOP      reduce using rule 160 (type_specifier -> CONST .)
    BANDEQOP        reduce using rule 160 (type_specifier -> CONST .)
    BOREQOP         reduce using rule 160 (type_specifier -> CONST .)
    DOTSTAR         reduce using rule 160 (type_specifier -> CONST .)
    ARROWSTAR       reduce using rule 160 (type_specifier -> CONST .)
    DIVOP           reduce using rule 160 (type_specifier -> CONST .)
    MODOP           reduce using rule 160 (type_specifier -> CONST .)
    PLUSOP          reduce using rule 160 (type_specifier -> CONST .)
    MINUSOP         reduce using rule 160 (type_specifier -> CONST .)
    LSHIFT          reduce using rule 160 (type_specifier -> CONST .)
    RSHIFT          reduce using rule 160 (type_specifier -> CONST .)
    LTCOMP          reduce using rule 160 (type_specifier -> CONST .)
    GTCOMP          reduce using rule 160 (type_specifier -> CONST .)
    LTECOMP         reduce using rule 160 (type_specifier -> CONST .)
    GTECOMP         reduce using rule 160 (type_specifier -> CONST .)
    EQCOMP          reduce using rule 160 (type_specifier -> CONST .)
    NEQCOMP         reduce using rule 160 (type_specifier -> CONST .)
    XOROP           reduce using rule 160 (type_specifier -> CONST .)
    OROP            reduce using rule 160 (type_specifier -> CONST .)
    ANDOP           reduce using rule 160 (type_specifier -> CONST .)
    QUESMARK        reduce using rule 160 (type_specifier -> CONST .)
    RSPAREN         reduce using rule 160 (type_specifier -> CONST .)
    RCPAREN         reduce using rule 160 (type_specifier -> CONST .)


state 30

    (161) type_specifier -> VOLATILE .

    SEMICOLON       reduce using rule 161 (type_specifier -> VOLATILE .)
    TYPEDEF         reduce using rule 161 (type_specifier -> VOLATILE .)
    LPAREN          reduce using rule 161 (type_specifier -> VOLATILE .)
    AUTO            reduce using rule 161 (type_specifier -> VOLATILE .)
    STATIC          reduce using rule 161 (type_specifier -> VOLATILE .)
    EXTERN          reduce using rule 161 (type_specifier -> VOLATILE .)
    VIRTUAL         reduce using rule 161 (type_specifier -> VOLATILE .)
    CONST           reduce using rule 161 (type_specifier -> VOLATILE .)
    VOLATILE        reduce using rule 161 (type_specifier -> VOLATILE .)
    IDENTIFIER      reduce using rule 161 (type_specifier -> VOLATILE .)
    BNOP            reduce using rule 161 (type_specifier -> VOLATILE .)
    MULTOP          reduce using rule 161 (type_specifier -> VOLATILE .)
    BANDOP          reduce using rule 161 (type_specifier -> VOLATILE .)
    CHAR            reduce using rule 161 (type_specifier -> VOLATILE .)
    SHORT           reduce using rule 161 (type_specifier -> VOLATILE .)
    INT             reduce using rule 161 (type_specifier -> VOLATILE .)
    LONG            reduce using rule 161 (type_specifier -> VOLATILE .)
    SIGNED          reduce using rule 161 (type_specifier -> VOLATILE .)
    UNSIGNED        reduce using rule 161 (type_specifier -> VOLATILE .)
    FLOAT           reduce using rule 161 (type_specifier -> VOLATILE .)
    DOUBLE          reduce using rule 161 (type_specifier -> VOLATILE .)
    VOID            reduce using rule 161 (type_specifier -> VOLATILE .)
    STRING          reduce using rule 161 (type_specifier -> VOLATILE .)
    ENUM            reduce using rule 161 (type_specifier -> VOLATILE .)
    TYPE            reduce using rule 161 (type_specifier -> VOLATILE .)
    OPERATOR        reduce using rule 161 (type_specifier -> VOLATILE .)
    CLASS           reduce using rule 161 (type_specifier -> VOLATILE .)
    STRUCT          reduce using rule 161 (type_specifier -> VOLATILE .)
    UNION           reduce using rule 161 (type_specifier -> VOLATILE .)
    TEMPLATE        reduce using rule 161 (type_specifier -> VOLATILE .)
    EQUAL           reduce using rule 161 (type_specifier -> VOLATILE .)
    LSPAREN         reduce using rule 161 (type_specifier -> VOLATILE .)
    COMMA           reduce using rule 161 (type_specifier -> VOLATILE .)
    RPAREN          reduce using rule 161 (type_specifier -> VOLATILE .)
    RTEMPLATE       reduce using rule 161 (type_specifier -> VOLATILE .)
    COLON           reduce using rule 161 (type_specifier -> VOLATILE .)
    MULTEQOP        reduce using rule 161 (type_specifier -> VOLATILE .)
    DIVEQOP         reduce using rule 161 (type_specifier -> VOLATILE .)
    MODEQOP         reduce using rule 161 (type_specifier -> VOLATILE .)
    PLUSEQOP        reduce using rule 161 (type_specifier -> VOLATILE .)
    MINUSEQOP       reduce using rule 161 (type_specifier -> VOLATILE .)
    LSHIFTEQOP      reduce using rule 161 (type_specifier -> VOLATILE .)
    RSHIFTEQOP      reduce using rule 161 (type_specifier -> VOLATILE .)
    BANDEQOP        reduce using rule 161 (type_specifier -> VOLATILE .)
    BOREQOP         reduce using rule 161 (type_specifier -> VOLATILE .)
    DOTSTAR         reduce using rule 161 (type_specifier -> VOLATILE .)
    ARROWSTAR       reduce using rule 161 (type_specifier -> VOLATILE .)
    DIVOP           reduce using rule 161 (type_specifier -> VOLATILE .)
    MODOP           reduce using rule 161 (type_specifier -> VOLATILE .)
    PLUSOP          reduce using rule 161 (type_specifier -> VOLATILE .)
    MINUSOP         reduce using rule 161 (type_specifier -> VOLATILE .)
    LSHIFT          reduce using rule 161 (type_specifier -> VOLATILE .)
    RSHIFT          reduce using rule 161 (type_specifier -> VOLATILE .)
    LTCOMP          reduce using rule 161 (type_specifier -> VOLATILE .)
    GTCOMP          reduce using rule 161 (type_specifier -> VOLATILE .)
    LTECOMP         reduce using rule 161 (type_specifier -> VOLATILE .)
    GTECOMP         reduce using rule 161 (type_specifier -> VOLATILE .)
    EQCOMP          reduce using rule 161 (type_specifier -> VOLATILE .)
    NEQCOMP         reduce using rule 161 (type_specifier -> VOLATILE .)
    XOROP           reduce using rule 161 (type_specifier -> VOLATILE .)
    OROP            reduce using rule 161 (type_specifier -> VOLATILE .)
    ANDOP           reduce using rule 161 (type_specifier -> VOLATILE .)
    QUESMARK        reduce using rule 161 (type_specifier -> VOLATILE .)
    RSPAREN         reduce using rule 161 (type_specifier -> VOLATILE .)
    RCPAREN         reduce using rule 161 (type_specifier -> VOLATILE .)


state 31

    (259) name -> IDENTIFIER .

    LPAREN          reduce using rule 259 (name -> IDENTIFIER .)
    LSPAREN         reduce using rule 259 (name -> IDENTIFIER .)
    EQUAL           reduce using rule 259 (name -> IDENTIFIER .)
    LCPAREN         reduce using rule 259 (name -> IDENTIFIER .)
    SEMICOLON       reduce using rule 259 (name -> IDENTIFIER .)
    COMMA           reduce using rule 259 (name -> IDENTIFIER .)
    RPAREN          reduce using rule 259 (name -> IDENTIFIER .)
    DOT             reduce using rule 259 (name -> IDENTIFIER .)
    ARROW           reduce using rule 259 (name -> IDENTIFIER .)
    DPLUSOP         reduce using rule 259 (name -> IDENTIFIER .)
    DMINUSOP        reduce using rule 259 (name -> IDENTIFIER .)
    LTEMPLATE       reduce using rule 259 (name -> IDENTIFIER .)
    MULTEQOP        reduce using rule 259 (name -> IDENTIFIER .)
    DIVEQOP         reduce using rule 259 (name -> IDENTIFIER .)
    MODEQOP         reduce using rule 259 (name -> IDENTIFIER .)
    PLUSEQOP        reduce using rule 259 (name -> IDENTIFIER .)
    MINUSEQOP       reduce using rule 259 (name -> IDENTIFIER .)
    LSHIFTEQOP      reduce using rule 259 (name -> IDENTIFIER .)
    RSHIFTEQOP      reduce using rule 259 (name -> IDENTIFIER .)
    BANDEQOP        reduce using rule 259 (name -> IDENTIFIER .)
    BOREQOP         reduce using rule 259 (name -> IDENTIFIER .)
    DOTSTAR         reduce using rule 259 (name -> IDENTIFIER .)
    ARROWSTAR       reduce using rule 259 (name -> IDENTIFIER .)
    MULTOP          reduce using rule 259 (name -> IDENTIFIER .)
    DIVOP           reduce using rule 259 (name -> IDENTIFIER .)
    MODOP           reduce using rule 259 (name -> IDENTIFIER .)
    PLUSOP          reduce using rule 259 (name -> IDENTIFIER .)
    MINUSOP         reduce using rule 259 (name -> IDENTIFIER .)
    LSHIFT          reduce using rule 259 (name -> IDENTIFIER .)
    RSHIFT          reduce using rule 259 (name -> IDENTIFIER .)
    LTCOMP          reduce using rule 259 (name -> IDENTIFIER .)
    GTCOMP          reduce using rule 259 (name -> IDENTIFIER .)
    LTECOMP         reduce using rule 259 (name -> IDENTIFIER .)
    GTECOMP         reduce using rule 259 (name -> IDENTIFIER .)
    EQCOMP          reduce using rule 259 (name -> IDENTIFIER .)
    NEQCOMP         reduce using rule 259 (name -> IDENTIFIER .)
    BANDOP          reduce using rule 259 (name -> IDENTIFIER .)
    XOROP           reduce using rule 259 (name -> IDENTIFIER .)
    OROP            reduce using rule 259 (name -> IDENTIFIER .)
    ANDOP           reduce using rule 259 (name -> IDENTIFIER .)
    QUESMARK        reduce using rule 259 (name -> IDENTIFIER .)
    RSPAREN         reduce using rule 259 (name -> IDENTIFIER .)
    RTEMPLATE       reduce using rule 259 (name -> IDENTIFIER .)
    RCPAREN         reduce using rule 259 (name -> IDENTIFIER .)
    COLON           reduce using rule 259 (name -> IDENTIFIER .)


state 32

    (260) name -> operator_function_name .

    LPAREN          reduce using rule 260 (name -> operator_function_name .)
    LSPAREN         reduce using rule 260 (name -> operator_function_name .)
    EQUAL           reduce using rule 260 (name -> operator_function_name .)
    LCPAREN         reduce using rule 260 (name -> operator_function_name .)
    SEMICOLON       reduce using rule 260 (name -> operator_function_name .)
    COMMA           reduce using rule 260 (name -> operator_function_name .)
    RPAREN          reduce using rule 260 (name -> operator_function_name .)
    DOT             reduce using rule 260 (name -> operator_function_name .)
    ARROW           reduce using rule 260 (name -> operator_function_name .)
    DPLUSOP         reduce using rule 260 (name -> operator_function_name .)
    DMINUSOP        reduce using rule 260 (name -> operator_function_name .)
    LTEMPLATE       reduce using rule 260 (name -> operator_function_name .)
    MULTEQOP        reduce using rule 260 (name -> operator_function_name .)
    DIVEQOP         reduce using rule 260 (name -> operator_function_name .)
    MODEQOP         reduce using rule 260 (name -> operator_function_name .)
    PLUSEQOP        reduce using rule 260 (name -> operator_function_name .)
    MINUSEQOP       reduce using rule 260 (name -> operator_function_name .)
    LSHIFTEQOP      reduce using rule 260 (name -> operator_function_name .)
    RSHIFTEQOP      reduce using rule 260 (name -> operator_function_name .)
    BANDEQOP        reduce using rule 260 (name -> operator_function_name .)
    BOREQOP         reduce using rule 260 (name -> operator_function_name .)
    DOTSTAR         reduce using rule 260 (name -> operator_function_name .)
    ARROWSTAR       reduce using rule 260 (name -> operator_function_name .)
    MULTOP          reduce using rule 260 (name -> operator_function_name .)
    DIVOP           reduce using rule 260 (name -> operator_function_name .)
    MODOP           reduce using rule 260 (name -> operator_function_name .)
    PLUSOP          reduce using rule 260 (name -> operator_function_name .)
    MINUSOP         reduce using rule 260 (name -> operator_function_name .)
    LSHIFT          reduce using rule 260 (name -> operator_function_name .)
    RSHIFT          reduce using rule 260 (name -> operator_function_name .)
    LTCOMP          reduce using rule 260 (name -> operator_function_name .)
    GTCOMP          reduce using rule 260 (name -> operator_function_name .)
    LTECOMP         reduce using rule 260 (name -> operator_function_name .)
    GTECOMP         reduce using rule 260 (name -> operator_function_name .)
    EQCOMP          reduce using rule 260 (name -> operator_function_name .)
    NEQCOMP         reduce using rule 260 (name -> operator_function_name .)
    BANDOP          reduce using rule 260 (name -> operator_function_name .)
    XOROP           reduce using rule 260 (name -> operator_function_name .)
    OROP            reduce using rule 260 (name -> operator_function_name .)
    ANDOP           reduce using rule 260 (name -> operator_function_name .)
    QUESMARK        reduce using rule 260 (name -> operator_function_name .)
    RSPAREN         reduce using rule 260 (name -> operator_function_name .)
    RTEMPLATE       reduce using rule 260 (name -> operator_function_name .)
    RCPAREN         reduce using rule 260 (name -> operator_function_name .)
    COLON           reduce using rule 260 (name -> operator_function_name .)


state 33

    (261) name -> BNOP . IDENTIFIER

    IDENTIFIER      shift and go to state 73


state 34

    (104) unary2_operator -> MULTOP .

    LPAREN          reduce using rule 104 (unary2_operator -> MULTOP .)
    IDENTIFIER      reduce using rule 104 (unary2_operator -> MULTOP .)
    BNOP            reduce using rule 104 (unary2_operator -> MULTOP .)
    MULTOP          reduce using rule 104 (unary2_operator -> MULTOP .)
    BANDOP          reduce using rule 104 (unary2_operator -> MULTOP .)
    OPERATOR        reduce using rule 104 (unary2_operator -> MULTOP .)
    DPLUSOP         reduce using rule 104 (unary2_operator -> MULTOP .)
    DMINUSOP        reduce using rule 104 (unary2_operator -> MULTOP .)
    SIZEOF          reduce using rule 104 (unary2_operator -> MULTOP .)
    PLUSOP          reduce using rule 104 (unary2_operator -> MULTOP .)
    MINUSOP         reduce using rule 104 (unary2_operator -> MULTOP .)
    NOTSYM          reduce using rule 104 (unary2_operator -> MULTOP .)
    NEW             reduce using rule 104 (unary2_operator -> MULTOP .)
    DELETE          reduce using rule 104 (unary2_operator -> MULTOP .)
    THIS            reduce using rule 104 (unary2_operator -> MULTOP .)
    CHAR            reduce using rule 104 (unary2_operator -> MULTOP .)
    SHORT           reduce using rule 104 (unary2_operator -> MULTOP .)
    INT             reduce using rule 104 (unary2_operator -> MULTOP .)
    LONG            reduce using rule 104 (unary2_operator -> MULTOP .)
    SIGNED          reduce using rule 104 (unary2_operator -> MULTOP .)
    UNSIGNED        reduce using rule 104 (unary2_operator -> MULTOP .)
    FLOAT           reduce using rule 104 (unary2_operator -> MULTOP .)
    DOUBLE          reduce using rule 104 (unary2_operator -> MULTOP .)
    VOID            reduce using rule 104 (unary2_operator -> MULTOP .)
    STRING          reduce using rule 104 (unary2_operator -> MULTOP .)
    NUMBER          reduce using rule 104 (unary2_operator -> MULTOP .)
    STRING_L        reduce using rule 104 (unary2_operator -> MULTOP .)
    SCHAR           reduce using rule 104 (unary2_operator -> MULTOP .)
    LSPAREN         reduce using rule 104 (unary2_operator -> MULTOP .)
    EQUAL           reduce using rule 104 (unary2_operator -> MULTOP .)
    COMMA           reduce using rule 104 (unary2_operator -> MULTOP .)
    RPAREN          reduce using rule 104 (unary2_operator -> MULTOP .)
    RTEMPLATE       reduce using rule 104 (unary2_operator -> MULTOP .)


state 35

    (105) unary2_operator -> BANDOP .

    LPAREN          reduce using rule 105 (unary2_operator -> BANDOP .)
    IDENTIFIER      reduce using rule 105 (unary2_operator -> BANDOP .)
    BNOP            reduce using rule 105 (unary2_operator -> BANDOP .)
    MULTOP          reduce using rule 105 (unary2_operator -> BANDOP .)
    BANDOP          reduce using rule 105 (unary2_operator -> BANDOP .)
    OPERATOR        reduce using rule 105 (unary2_operator -> BANDOP .)
    DPLUSOP         reduce using rule 105 (unary2_operator -> BANDOP .)
    DMINUSOP        reduce using rule 105 (unary2_operator -> BANDOP .)
    SIZEOF          reduce using rule 105 (unary2_operator -> BANDOP .)
    PLUSOP          reduce using rule 105 (unary2_operator -> BANDOP .)
    MINUSOP         reduce using rule 105 (unary2_operator -> BANDOP .)
    NOTSYM          reduce using rule 105 (unary2_operator -> BANDOP .)
    NEW             reduce using rule 105 (unary2_operator -> BANDOP .)
    DELETE          reduce using rule 105 (unary2_operator -> BANDOP .)
    THIS            reduce using rule 105 (unary2_operator -> BANDOP .)
    CHAR            reduce using rule 105 (unary2_operator -> BANDOP .)
    SHORT           reduce using rule 105 (unary2_operator -> BANDOP .)
    INT             reduce using rule 105 (unary2_operator -> BANDOP .)
    LONG            reduce using rule 105 (unary2_operator -> BANDOP .)
    SIGNED          reduce using rule 105 (unary2_operator -> BANDOP .)
    UNSIGNED        reduce using rule 105 (unary2_operator -> BANDOP .)
    FLOAT           reduce using rule 105 (unary2_operator -> BANDOP .)
    DOUBLE          reduce using rule 105 (unary2_operator -> BANDOP .)
    VOID            reduce using rule 105 (unary2_operator -> BANDOP .)
    STRING          reduce using rule 105 (unary2_operator -> BANDOP .)
    NUMBER          reduce using rule 105 (unary2_operator -> BANDOP .)
    STRING_L        reduce using rule 105 (unary2_operator -> BANDOP .)
    SCHAR           reduce using rule 105 (unary2_operator -> BANDOP .)
    LSPAREN         reduce using rule 105 (unary2_operator -> BANDOP .)
    EQUAL           reduce using rule 105 (unary2_operator -> BANDOP .)
    COMMA           reduce using rule 105 (unary2_operator -> BANDOP .)
    RPAREN          reduce using rule 105 (unary2_operator -> BANDOP .)
    RTEMPLATE       reduce using rule 105 (unary2_operator -> BANDOP .)


state 36

    (332) simple_type_name -> CHAR .

    SEMICOLON       reduce using rule 332 (simple_type_name -> CHAR .)
    TYPEDEF         reduce using rule 332 (simple_type_name -> CHAR .)
    LPAREN          reduce using rule 332 (simple_type_name -> CHAR .)
    AUTO            reduce using rule 332 (simple_type_name -> CHAR .)
    STATIC          reduce using rule 332 (simple_type_name -> CHAR .)
    EXTERN          reduce using rule 332 (simple_type_name -> CHAR .)
    VIRTUAL         reduce using rule 332 (simple_type_name -> CHAR .)
    CONST           reduce using rule 332 (simple_type_name -> CHAR .)
    VOLATILE        reduce using rule 332 (simple_type_name -> CHAR .)
    IDENTIFIER      reduce using rule 332 (simple_type_name -> CHAR .)
    BNOP            reduce using rule 332 (simple_type_name -> CHAR .)
    MULTOP          reduce using rule 332 (simple_type_name -> CHAR .)
    BANDOP          reduce using rule 332 (simple_type_name -> CHAR .)
    CHAR            reduce using rule 332 (simple_type_name -> CHAR .)
    SHORT           reduce using rule 332 (simple_type_name -> CHAR .)
    INT             reduce using rule 332 (simple_type_name -> CHAR .)
    LONG            reduce using rule 332 (simple_type_name -> CHAR .)
    SIGNED          reduce using rule 332 (simple_type_name -> CHAR .)
    UNSIGNED        reduce using rule 332 (simple_type_name -> CHAR .)
    FLOAT           reduce using rule 332 (simple_type_name -> CHAR .)
    DOUBLE          reduce using rule 332 (simple_type_name -> CHAR .)
    VOID            reduce using rule 332 (simple_type_name -> CHAR .)
    STRING          reduce using rule 332 (simple_type_name -> CHAR .)
    ENUM            reduce using rule 332 (simple_type_name -> CHAR .)
    TYPE            reduce using rule 332 (simple_type_name -> CHAR .)
    OPERATOR        reduce using rule 332 (simple_type_name -> CHAR .)
    CLASS           reduce using rule 332 (simple_type_name -> CHAR .)
    STRUCT          reduce using rule 332 (simple_type_name -> CHAR .)
    UNION           reduce using rule 332 (simple_type_name -> CHAR .)
    TEMPLATE        reduce using rule 332 (simple_type_name -> CHAR .)
    EQUAL           reduce using rule 332 (simple_type_name -> CHAR .)
    LSPAREN         reduce using rule 332 (simple_type_name -> CHAR .)
    COMMA           reduce using rule 332 (simple_type_name -> CHAR .)
    RPAREN          reduce using rule 332 (simple_type_name -> CHAR .)
    RTEMPLATE       reduce using rule 332 (simple_type_name -> CHAR .)
    COLON           reduce using rule 332 (simple_type_name -> CHAR .)
    MULTEQOP        reduce using rule 332 (simple_type_name -> CHAR .)
    DIVEQOP         reduce using rule 332 (simple_type_name -> CHAR .)
    MODEQOP         reduce using rule 332 (simple_type_name -> CHAR .)
    PLUSEQOP        reduce using rule 332 (simple_type_name -> CHAR .)
    MINUSEQOP       reduce using rule 332 (simple_type_name -> CHAR .)
    LSHIFTEQOP      reduce using rule 332 (simple_type_name -> CHAR .)
    RSHIFTEQOP      reduce using rule 332 (simple_type_name -> CHAR .)
    BANDEQOP        reduce using rule 332 (simple_type_name -> CHAR .)
    BOREQOP         reduce using rule 332 (simple_type_name -> CHAR .)
    DOTSTAR         reduce using rule 332 (simple_type_name -> CHAR .)
    ARROWSTAR       reduce using rule 332 (simple_type_name -> CHAR .)
    DIVOP           reduce using rule 332 (simple_type_name -> CHAR .)
    MODOP           reduce using rule 332 (simple_type_name -> CHAR .)
    PLUSOP          reduce using rule 332 (simple_type_name -> CHAR .)
    MINUSOP         reduce using rule 332 (simple_type_name -> CHAR .)
    LSHIFT          reduce using rule 332 (simple_type_name -> CHAR .)
    RSHIFT          reduce using rule 332 (simple_type_name -> CHAR .)
    LTCOMP          reduce using rule 332 (simple_type_name -> CHAR .)
    GTCOMP          reduce using rule 332 (simple_type_name -> CHAR .)
    LTECOMP         reduce using rule 332 (simple_type_name -> CHAR .)
    GTECOMP         reduce using rule 332 (simple_type_name -> CHAR .)
    EQCOMP          reduce using rule 332 (simple_type_name -> CHAR .)
    NEQCOMP         reduce using rule 332 (simple_type_name -> CHAR .)
    XOROP           reduce using rule 332 (simple_type_name -> CHAR .)
    OROP            reduce using rule 332 (simple_type_name -> CHAR .)
    ANDOP           reduce using rule 332 (simple_type_name -> CHAR .)
    QUESMARK        reduce using rule 332 (simple_type_name -> CHAR .)
    RSPAREN         reduce using rule 332 (simple_type_name -> CHAR .)
    RCPAREN         reduce using rule 332 (simple_type_name -> CHAR .)


state 37

    (333) simple_type_name -> SHORT .

    SEMICOLON       reduce using rule 333 (simple_type_name -> SHORT .)
    TYPEDEF         reduce using rule 333 (simple_type_name -> SHORT .)
    LPAREN          reduce using rule 333 (simple_type_name -> SHORT .)
    AUTO            reduce using rule 333 (simple_type_name -> SHORT .)
    STATIC          reduce using rule 333 (simple_type_name -> SHORT .)
    EXTERN          reduce using rule 333 (simple_type_name -> SHORT .)
    VIRTUAL         reduce using rule 333 (simple_type_name -> SHORT .)
    CONST           reduce using rule 333 (simple_type_name -> SHORT .)
    VOLATILE        reduce using rule 333 (simple_type_name -> SHORT .)
    IDENTIFIER      reduce using rule 333 (simple_type_name -> SHORT .)
    BNOP            reduce using rule 333 (simple_type_name -> SHORT .)
    MULTOP          reduce using rule 333 (simple_type_name -> SHORT .)
    BANDOP          reduce using rule 333 (simple_type_name -> SHORT .)
    CHAR            reduce using rule 333 (simple_type_name -> SHORT .)
    SHORT           reduce using rule 333 (simple_type_name -> SHORT .)
    INT             reduce using rule 333 (simple_type_name -> SHORT .)
    LONG            reduce using rule 333 (simple_type_name -> SHORT .)
    SIGNED          reduce using rule 333 (simple_type_name -> SHORT .)
    UNSIGNED        reduce using rule 333 (simple_type_name -> SHORT .)
    FLOAT           reduce using rule 333 (simple_type_name -> SHORT .)
    DOUBLE          reduce using rule 333 (simple_type_name -> SHORT .)
    VOID            reduce using rule 333 (simple_type_name -> SHORT .)
    STRING          reduce using rule 333 (simple_type_name -> SHORT .)
    ENUM            reduce using rule 333 (simple_type_name -> SHORT .)
    TYPE            reduce using rule 333 (simple_type_name -> SHORT .)
    OPERATOR        reduce using rule 333 (simple_type_name -> SHORT .)
    CLASS           reduce using rule 333 (simple_type_name -> SHORT .)
    STRUCT          reduce using rule 333 (simple_type_name -> SHORT .)
    UNION           reduce using rule 333 (simple_type_name -> SHORT .)
    TEMPLATE        reduce using rule 333 (simple_type_name -> SHORT .)
    EQUAL           reduce using rule 333 (simple_type_name -> SHORT .)
    LSPAREN         reduce using rule 333 (simple_type_name -> SHORT .)
    COMMA           reduce using rule 333 (simple_type_name -> SHORT .)
    RPAREN          reduce using rule 333 (simple_type_name -> SHORT .)
    RTEMPLATE       reduce using rule 333 (simple_type_name -> SHORT .)
    COLON           reduce using rule 333 (simple_type_name -> SHORT .)
    MULTEQOP        reduce using rule 333 (simple_type_name -> SHORT .)
    DIVEQOP         reduce using rule 333 (simple_type_name -> SHORT .)
    MODEQOP         reduce using rule 333 (simple_type_name -> SHORT .)
    PLUSEQOP        reduce using rule 333 (simple_type_name -> SHORT .)
    MINUSEQOP       reduce using rule 333 (simple_type_name -> SHORT .)
    LSHIFTEQOP      reduce using rule 333 (simple_type_name -> SHORT .)
    RSHIFTEQOP      reduce using rule 333 (simple_type_name -> SHORT .)
    BANDEQOP        reduce using rule 333 (simple_type_name -> SHORT .)
    BOREQOP         reduce using rule 333 (simple_type_name -> SHORT .)
    DOTSTAR         reduce using rule 333 (simple_type_name -> SHORT .)
    ARROWSTAR       reduce using rule 333 (simple_type_name -> SHORT .)
    DIVOP           reduce using rule 333 (simple_type_name -> SHORT .)
    MODOP           reduce using rule 333 (simple_type_name -> SHORT .)
    PLUSOP          reduce using rule 333 (simple_type_name -> SHORT .)
    MINUSOP         reduce using rule 333 (simple_type_name -> SHORT .)
    LSHIFT          reduce using rule 333 (simple_type_name -> SHORT .)
    RSHIFT          reduce using rule 333 (simple_type_name -> SHORT .)
    LTCOMP          reduce using rule 333 (simple_type_name -> SHORT .)
    GTCOMP          reduce using rule 333 (simple_type_name -> SHORT .)
    LTECOMP         reduce using rule 333 (simple_type_name -> SHORT .)
    GTECOMP         reduce using rule 333 (simple_type_name -> SHORT .)
    EQCOMP          reduce using rule 333 (simple_type_name -> SHORT .)
    NEQCOMP         reduce using rule 333 (simple_type_name -> SHORT .)
    XOROP           reduce using rule 333 (simple_type_name -> SHORT .)
    OROP            reduce using rule 333 (simple_type_name -> SHORT .)
    ANDOP           reduce using rule 333 (simple_type_name -> SHORT .)
    QUESMARK        reduce using rule 333 (simple_type_name -> SHORT .)
    RSPAREN         reduce using rule 333 (simple_type_name -> SHORT .)
    RCPAREN         reduce using rule 333 (simple_type_name -> SHORT .)


state 38

    (334) simple_type_name -> INT .

    SEMICOLON       reduce using rule 334 (simple_type_name -> INT .)
    TYPEDEF         reduce using rule 334 (simple_type_name -> INT .)
    LPAREN          reduce using rule 334 (simple_type_name -> INT .)
    AUTO            reduce using rule 334 (simple_type_name -> INT .)
    STATIC          reduce using rule 334 (simple_type_name -> INT .)
    EXTERN          reduce using rule 334 (simple_type_name -> INT .)
    VIRTUAL         reduce using rule 334 (simple_type_name -> INT .)
    CONST           reduce using rule 334 (simple_type_name -> INT .)
    VOLATILE        reduce using rule 334 (simple_type_name -> INT .)
    IDENTIFIER      reduce using rule 334 (simple_type_name -> INT .)
    BNOP            reduce using rule 334 (simple_type_name -> INT .)
    MULTOP          reduce using rule 334 (simple_type_name -> INT .)
    BANDOP          reduce using rule 334 (simple_type_name -> INT .)
    CHAR            reduce using rule 334 (simple_type_name -> INT .)
    SHORT           reduce using rule 334 (simple_type_name -> INT .)
    INT             reduce using rule 334 (simple_type_name -> INT .)
    LONG            reduce using rule 334 (simple_type_name -> INT .)
    SIGNED          reduce using rule 334 (simple_type_name -> INT .)
    UNSIGNED        reduce using rule 334 (simple_type_name -> INT .)
    FLOAT           reduce using rule 334 (simple_type_name -> INT .)
    DOUBLE          reduce using rule 334 (simple_type_name -> INT .)
    VOID            reduce using rule 334 (simple_type_name -> INT .)
    STRING          reduce using rule 334 (simple_type_name -> INT .)
    ENUM            reduce using rule 334 (simple_type_name -> INT .)
    TYPE            reduce using rule 334 (simple_type_name -> INT .)
    OPERATOR        reduce using rule 334 (simple_type_name -> INT .)
    CLASS           reduce using rule 334 (simple_type_name -> INT .)
    STRUCT          reduce using rule 334 (simple_type_name -> INT .)
    UNION           reduce using rule 334 (simple_type_name -> INT .)
    TEMPLATE        reduce using rule 334 (simple_type_name -> INT .)
    EQUAL           reduce using rule 334 (simple_type_name -> INT .)
    LSPAREN         reduce using rule 334 (simple_type_name -> INT .)
    COMMA           reduce using rule 334 (simple_type_name -> INT .)
    RPAREN          reduce using rule 334 (simple_type_name -> INT .)
    RTEMPLATE       reduce using rule 334 (simple_type_name -> INT .)
    COLON           reduce using rule 334 (simple_type_name -> INT .)
    MULTEQOP        reduce using rule 334 (simple_type_name -> INT .)
    DIVEQOP         reduce using rule 334 (simple_type_name -> INT .)
    MODEQOP         reduce using rule 334 (simple_type_name -> INT .)
    PLUSEQOP        reduce using rule 334 (simple_type_name -> INT .)
    MINUSEQOP       reduce using rule 334 (simple_type_name -> INT .)
    LSHIFTEQOP      reduce using rule 334 (simple_type_name -> INT .)
    RSHIFTEQOP      reduce using rule 334 (simple_type_name -> INT .)
    BANDEQOP        reduce using rule 334 (simple_type_name -> INT .)
    BOREQOP         reduce using rule 334 (simple_type_name -> INT .)
    DOTSTAR         reduce using rule 334 (simple_type_name -> INT .)
    ARROWSTAR       reduce using rule 334 (simple_type_name -> INT .)
    DIVOP           reduce using rule 334 (simple_type_name -> INT .)
    MODOP           reduce using rule 334 (simple_type_name -> INT .)
    PLUSOP          reduce using rule 334 (simple_type_name -> INT .)
    MINUSOP         reduce using rule 334 (simple_type_name -> INT .)
    LSHIFT          reduce using rule 334 (simple_type_name -> INT .)
    RSHIFT          reduce using rule 334 (simple_type_name -> INT .)
    LTCOMP          reduce using rule 334 (simple_type_name -> INT .)
    GTCOMP          reduce using rule 334 (simple_type_name -> INT .)
    LTECOMP         reduce using rule 334 (simple_type_name -> INT .)
    GTECOMP         reduce using rule 334 (simple_type_name -> INT .)
    EQCOMP          reduce using rule 334 (simple_type_name -> INT .)
    NEQCOMP         reduce using rule 334 (simple_type_name -> INT .)
    XOROP           reduce using rule 334 (simple_type_name -> INT .)
    OROP            reduce using rule 334 (simple_type_name -> INT .)
    ANDOP           reduce using rule 334 (simple_type_name -> INT .)
    QUESMARK        reduce using rule 334 (simple_type_name -> INT .)
    RSPAREN         reduce using rule 334 (simple_type_name -> INT .)
    RCPAREN         reduce using rule 334 (simple_type_name -> INT .)


state 39

    (335) simple_type_name -> LONG .

    SEMICOLON       reduce using rule 335 (simple_type_name -> LONG .)
    TYPEDEF         reduce using rule 335 (simple_type_name -> LONG .)
    LPAREN          reduce using rule 335 (simple_type_name -> LONG .)
    AUTO            reduce using rule 335 (simple_type_name -> LONG .)
    STATIC          reduce using rule 335 (simple_type_name -> LONG .)
    EXTERN          reduce using rule 335 (simple_type_name -> LONG .)
    VIRTUAL         reduce using rule 335 (simple_type_name -> LONG .)
    CONST           reduce using rule 335 (simple_type_name -> LONG .)
    VOLATILE        reduce using rule 335 (simple_type_name -> LONG .)
    IDENTIFIER      reduce using rule 335 (simple_type_name -> LONG .)
    BNOP            reduce using rule 335 (simple_type_name -> LONG .)
    MULTOP          reduce using rule 335 (simple_type_name -> LONG .)
    BANDOP          reduce using rule 335 (simple_type_name -> LONG .)
    CHAR            reduce using rule 335 (simple_type_name -> LONG .)
    SHORT           reduce using rule 335 (simple_type_name -> LONG .)
    INT             reduce using rule 335 (simple_type_name -> LONG .)
    LONG            reduce using rule 335 (simple_type_name -> LONG .)
    SIGNED          reduce using rule 335 (simple_type_name -> LONG .)
    UNSIGNED        reduce using rule 335 (simple_type_name -> LONG .)
    FLOAT           reduce using rule 335 (simple_type_name -> LONG .)
    DOUBLE          reduce using rule 335 (simple_type_name -> LONG .)
    VOID            reduce using rule 335 (simple_type_name -> LONG .)
    STRING          reduce using rule 335 (simple_type_name -> LONG .)
    ENUM            reduce using rule 335 (simple_type_name -> LONG .)
    TYPE            reduce using rule 335 (simple_type_name -> LONG .)
    OPERATOR        reduce using rule 335 (simple_type_name -> LONG .)
    CLASS           reduce using rule 335 (simple_type_name -> LONG .)
    STRUCT          reduce using rule 335 (simple_type_name -> LONG .)
    UNION           reduce using rule 335 (simple_type_name -> LONG .)
    TEMPLATE        reduce using rule 335 (simple_type_name -> LONG .)
    EQUAL           reduce using rule 335 (simple_type_name -> LONG .)
    LSPAREN         reduce using rule 335 (simple_type_name -> LONG .)
    COMMA           reduce using rule 335 (simple_type_name -> LONG .)
    RPAREN          reduce using rule 335 (simple_type_name -> LONG .)
    RTEMPLATE       reduce using rule 335 (simple_type_name -> LONG .)
    COLON           reduce using rule 335 (simple_type_name -> LONG .)
    MULTEQOP        reduce using rule 335 (simple_type_name -> LONG .)
    DIVEQOP         reduce using rule 335 (simple_type_name -> LONG .)
    MODEQOP         reduce using rule 335 (simple_type_name -> LONG .)
    PLUSEQOP        reduce using rule 335 (simple_type_name -> LONG .)
    MINUSEQOP       reduce using rule 335 (simple_type_name -> LONG .)
    LSHIFTEQOP      reduce using rule 335 (simple_type_name -> LONG .)
    RSHIFTEQOP      reduce using rule 335 (simple_type_name -> LONG .)
    BANDEQOP        reduce using rule 335 (simple_type_name -> LONG .)
    BOREQOP         reduce using rule 335 (simple_type_name -> LONG .)
    DOTSTAR         reduce using rule 335 (simple_type_name -> LONG .)
    ARROWSTAR       reduce using rule 335 (simple_type_name -> LONG .)
    DIVOP           reduce using rule 335 (simple_type_name -> LONG .)
    MODOP           reduce using rule 335 (simple_type_name -> LONG .)
    PLUSOP          reduce using rule 335 (simple_type_name -> LONG .)
    MINUSOP         reduce using rule 335 (simple_type_name -> LONG .)
    LSHIFT          reduce using rule 335 (simple_type_name -> LONG .)
    RSHIFT          reduce using rule 335 (simple_type_name -> LONG .)
    LTCOMP          reduce using rule 335 (simple_type_name -> LONG .)
    GTCOMP          reduce using rule 335 (simple_type_name -> LONG .)
    LTECOMP         reduce using rule 335 (simple_type_name -> LONG .)
    GTECOMP         reduce using rule 335 (simple_type_name -> LONG .)
    EQCOMP          reduce using rule 335 (simple_type_name -> LONG .)
    NEQCOMP         reduce using rule 335 (simple_type_name -> LONG .)
    XOROP           reduce using rule 335 (simple_type_name -> LONG .)
    OROP            reduce using rule 335 (simple_type_name -> LONG .)
    ANDOP           reduce using rule 335 (simple_type_name -> LONG .)
    QUESMARK        reduce using rule 335 (simple_type_name -> LONG .)
    RSPAREN         reduce using rule 335 (simple_type_name -> LONG .)
    RCPAREN         reduce using rule 335 (simple_type_name -> LONG .)


state 40

    (336) simple_type_name -> SIGNED .

    SEMICOLON       reduce using rule 336 (simple_type_name -> SIGNED .)
    TYPEDEF         reduce using rule 336 (simple_type_name -> SIGNED .)
    LPAREN          reduce using rule 336 (simple_type_name -> SIGNED .)
    AUTO            reduce using rule 336 (simple_type_name -> SIGNED .)
    STATIC          reduce using rule 336 (simple_type_name -> SIGNED .)
    EXTERN          reduce using rule 336 (simple_type_name -> SIGNED .)
    VIRTUAL         reduce using rule 336 (simple_type_name -> SIGNED .)
    CONST           reduce using rule 336 (simple_type_name -> SIGNED .)
    VOLATILE        reduce using rule 336 (simple_type_name -> SIGNED .)
    IDENTIFIER      reduce using rule 336 (simple_type_name -> SIGNED .)
    BNOP            reduce using rule 336 (simple_type_name -> SIGNED .)
    MULTOP          reduce using rule 336 (simple_type_name -> SIGNED .)
    BANDOP          reduce using rule 336 (simple_type_name -> SIGNED .)
    CHAR            reduce using rule 336 (simple_type_name -> SIGNED .)
    SHORT           reduce using rule 336 (simple_type_name -> SIGNED .)
    INT             reduce using rule 336 (simple_type_name -> SIGNED .)
    LONG            reduce using rule 336 (simple_type_name -> SIGNED .)
    SIGNED          reduce using rule 336 (simple_type_name -> SIGNED .)
    UNSIGNED        reduce using rule 336 (simple_type_name -> SIGNED .)
    FLOAT           reduce using rule 336 (simple_type_name -> SIGNED .)
    DOUBLE          reduce using rule 336 (simple_type_name -> SIGNED .)
    VOID            reduce using rule 336 (simple_type_name -> SIGNED .)
    STRING          reduce using rule 336 (simple_type_name -> SIGNED .)
    ENUM            reduce using rule 336 (simple_type_name -> SIGNED .)
    TYPE            reduce using rule 336 (simple_type_name -> SIGNED .)
    OPERATOR        reduce using rule 336 (simple_type_name -> SIGNED .)
    CLASS           reduce using rule 336 (simple_type_name -> SIGNED .)
    STRUCT          reduce using rule 336 (simple_type_name -> SIGNED .)
    UNION           reduce using rule 336 (simple_type_name -> SIGNED .)
    TEMPLATE        reduce using rule 336 (simple_type_name -> SIGNED .)
    EQUAL           reduce using rule 336 (simple_type_name -> SIGNED .)
    LSPAREN         reduce using rule 336 (simple_type_name -> SIGNED .)
    COMMA           reduce using rule 336 (simple_type_name -> SIGNED .)
    RPAREN          reduce using rule 336 (simple_type_name -> SIGNED .)
    RTEMPLATE       reduce using rule 336 (simple_type_name -> SIGNED .)
    COLON           reduce using rule 336 (simple_type_name -> SIGNED .)
    MULTEQOP        reduce using rule 336 (simple_type_name -> SIGNED .)
    DIVEQOP         reduce using rule 336 (simple_type_name -> SIGNED .)
    MODEQOP         reduce using rule 336 (simple_type_name -> SIGNED .)
    PLUSEQOP        reduce using rule 336 (simple_type_name -> SIGNED .)
    MINUSEQOP       reduce using rule 336 (simple_type_name -> SIGNED .)
    LSHIFTEQOP      reduce using rule 336 (simple_type_name -> SIGNED .)
    RSHIFTEQOP      reduce using rule 336 (simple_type_name -> SIGNED .)
    BANDEQOP        reduce using rule 336 (simple_type_name -> SIGNED .)
    BOREQOP         reduce using rule 336 (simple_type_name -> SIGNED .)
    DOTSTAR         reduce using rule 336 (simple_type_name -> SIGNED .)
    ARROWSTAR       reduce using rule 336 (simple_type_name -> SIGNED .)
    DIVOP           reduce using rule 336 (simple_type_name -> SIGNED .)
    MODOP           reduce using rule 336 (simple_type_name -> SIGNED .)
    PLUSOP          reduce using rule 336 (simple_type_name -> SIGNED .)
    MINUSOP         reduce using rule 336 (simple_type_name -> SIGNED .)
    LSHIFT          reduce using rule 336 (simple_type_name -> SIGNED .)
    RSHIFT          reduce using rule 336 (simple_type_name -> SIGNED .)
    LTCOMP          reduce using rule 336 (simple_type_name -> SIGNED .)
    GTCOMP          reduce using rule 336 (simple_type_name -> SIGNED .)
    LTECOMP         reduce using rule 336 (simple_type_name -> SIGNED .)
    GTECOMP         reduce using rule 336 (simple_type_name -> SIGNED .)
    EQCOMP          reduce using rule 336 (simple_type_name -> SIGNED .)
    NEQCOMP         reduce using rule 336 (simple_type_name -> SIGNED .)
    XOROP           reduce using rule 336 (simple_type_name -> SIGNED .)
    OROP            reduce using rule 336 (simple_type_name -> SIGNED .)
    ANDOP           reduce using rule 336 (simple_type_name -> SIGNED .)
    QUESMARK        reduce using rule 336 (simple_type_name -> SIGNED .)
    RSPAREN         reduce using rule 336 (simple_type_name -> SIGNED .)
    RCPAREN         reduce using rule 336 (simple_type_name -> SIGNED .)


state 41

    (337) simple_type_name -> UNSIGNED .

    SEMICOLON       reduce using rule 337 (simple_type_name -> UNSIGNED .)
    TYPEDEF         reduce using rule 337 (simple_type_name -> UNSIGNED .)
    LPAREN          reduce using rule 337 (simple_type_name -> UNSIGNED .)
    AUTO            reduce using rule 337 (simple_type_name -> UNSIGNED .)
    STATIC          reduce using rule 337 (simple_type_name -> UNSIGNED .)
    EXTERN          reduce using rule 337 (simple_type_name -> UNSIGNED .)
    VIRTUAL         reduce using rule 337 (simple_type_name -> UNSIGNED .)
    CONST           reduce using rule 337 (simple_type_name -> UNSIGNED .)
    VOLATILE        reduce using rule 337 (simple_type_name -> UNSIGNED .)
    IDENTIFIER      reduce using rule 337 (simple_type_name -> UNSIGNED .)
    BNOP            reduce using rule 337 (simple_type_name -> UNSIGNED .)
    MULTOP          reduce using rule 337 (simple_type_name -> UNSIGNED .)
    BANDOP          reduce using rule 337 (simple_type_name -> UNSIGNED .)
    CHAR            reduce using rule 337 (simple_type_name -> UNSIGNED .)
    SHORT           reduce using rule 337 (simple_type_name -> UNSIGNED .)
    INT             reduce using rule 337 (simple_type_name -> UNSIGNED .)
    LONG            reduce using rule 337 (simple_type_name -> UNSIGNED .)
    SIGNED          reduce using rule 337 (simple_type_name -> UNSIGNED .)
    UNSIGNED        reduce using rule 337 (simple_type_name -> UNSIGNED .)
    FLOAT           reduce using rule 337 (simple_type_name -> UNSIGNED .)
    DOUBLE          reduce using rule 337 (simple_type_name -> UNSIGNED .)
    VOID            reduce using rule 337 (simple_type_name -> UNSIGNED .)
    STRING          reduce using rule 337 (simple_type_name -> UNSIGNED .)
    ENUM            reduce using rule 337 (simple_type_name -> UNSIGNED .)
    TYPE            reduce using rule 337 (simple_type_name -> UNSIGNED .)
    OPERATOR        reduce using rule 337 (simple_type_name -> UNSIGNED .)
    CLASS           reduce using rule 337 (simple_type_name -> UNSIGNED .)
    STRUCT          reduce using rule 337 (simple_type_name -> UNSIGNED .)
    UNION           reduce using rule 337 (simple_type_name -> UNSIGNED .)
    TEMPLATE        reduce using rule 337 (simple_type_name -> UNSIGNED .)
    EQUAL           reduce using rule 337 (simple_type_name -> UNSIGNED .)
    LSPAREN         reduce using rule 337 (simple_type_name -> UNSIGNED .)
    COMMA           reduce using rule 337 (simple_type_name -> UNSIGNED .)
    RPAREN          reduce using rule 337 (simple_type_name -> UNSIGNED .)
    RTEMPLATE       reduce using rule 337 (simple_type_name -> UNSIGNED .)
    COLON           reduce using rule 337 (simple_type_name -> UNSIGNED .)
    MULTEQOP        reduce using rule 337 (simple_type_name -> UNSIGNED .)
    DIVEQOP         reduce using rule 337 (simple_type_name -> UNSIGNED .)
    MODEQOP         reduce using rule 337 (simple_type_name -> UNSIGNED .)
    PLUSEQOP        reduce using rule 337 (simple_type_name -> UNSIGNED .)
    MINUSEQOP       reduce using rule 337 (simple_type_name -> UNSIGNED .)
    LSHIFTEQOP      reduce using rule 337 (simple_type_name -> UNSIGNED .)
    RSHIFTEQOP      reduce using rule 337 (simple_type_name -> UNSIGNED .)
    BANDEQOP        reduce using rule 337 (simple_type_name -> UNSIGNED .)
    BOREQOP         reduce using rule 337 (simple_type_name -> UNSIGNED .)
    DOTSTAR         reduce using rule 337 (simple_type_name -> UNSIGNED .)
    ARROWSTAR       reduce using rule 337 (simple_type_name -> UNSIGNED .)
    DIVOP           reduce using rule 337 (simple_type_name -> UNSIGNED .)
    MODOP           reduce using rule 337 (simple_type_name -> UNSIGNED .)
    PLUSOP          reduce using rule 337 (simple_type_name -> UNSIGNED .)
    MINUSOP         reduce using rule 337 (simple_type_name -> UNSIGNED .)
    LSHIFT          reduce using rule 337 (simple_type_name -> UNSIGNED .)
    RSHIFT          reduce using rule 337 (simple_type_name -> UNSIGNED .)
    LTCOMP          reduce using rule 337 (simple_type_name -> UNSIGNED .)
    GTCOMP          reduce using rule 337 (simple_type_name -> UNSIGNED .)
    LTECOMP         reduce using rule 337 (simple_type_name -> UNSIGNED .)
    GTECOMP         reduce using rule 337 (simple_type_name -> UNSIGNED .)
    EQCOMP          reduce using rule 337 (simple_type_name -> UNSIGNED .)
    NEQCOMP         reduce using rule 337 (simple_type_name -> UNSIGNED .)
    XOROP           reduce using rule 337 (simple_type_name -> UNSIGNED .)
    OROP            reduce using rule 337 (simple_type_name -> UNSIGNED .)
    ANDOP           reduce using rule 337 (simple_type_name -> UNSIGNED .)
    QUESMARK        reduce using rule 337 (simple_type_name -> UNSIGNED .)
    RSPAREN         reduce using rule 337 (simple_type_name -> UNSIGNED .)
    RCPAREN         reduce using rule 337 (simple_type_name -> UNSIGNED .)


state 42

    (338) simple_type_name -> FLOAT .

    SEMICOLON       reduce using rule 338 (simple_type_name -> FLOAT .)
    TYPEDEF         reduce using rule 338 (simple_type_name -> FLOAT .)
    LPAREN          reduce using rule 338 (simple_type_name -> FLOAT .)
    AUTO            reduce using rule 338 (simple_type_name -> FLOAT .)
    STATIC          reduce using rule 338 (simple_type_name -> FLOAT .)
    EXTERN          reduce using rule 338 (simple_type_name -> FLOAT .)
    VIRTUAL         reduce using rule 338 (simple_type_name -> FLOAT .)
    CONST           reduce using rule 338 (simple_type_name -> FLOAT .)
    VOLATILE        reduce using rule 338 (simple_type_name -> FLOAT .)
    IDENTIFIER      reduce using rule 338 (simple_type_name -> FLOAT .)
    BNOP            reduce using rule 338 (simple_type_name -> FLOAT .)
    MULTOP          reduce using rule 338 (simple_type_name -> FLOAT .)
    BANDOP          reduce using rule 338 (simple_type_name -> FLOAT .)
    CHAR            reduce using rule 338 (simple_type_name -> FLOAT .)
    SHORT           reduce using rule 338 (simple_type_name -> FLOAT .)
    INT             reduce using rule 338 (simple_type_name -> FLOAT .)
    LONG            reduce using rule 338 (simple_type_name -> FLOAT .)
    SIGNED          reduce using rule 338 (simple_type_name -> FLOAT .)
    UNSIGNED        reduce using rule 338 (simple_type_name -> FLOAT .)
    FLOAT           reduce using rule 338 (simple_type_name -> FLOAT .)
    DOUBLE          reduce using rule 338 (simple_type_name -> FLOAT .)
    VOID            reduce using rule 338 (simple_type_name -> FLOAT .)
    STRING          reduce using rule 338 (simple_type_name -> FLOAT .)
    ENUM            reduce using rule 338 (simple_type_name -> FLOAT .)
    TYPE            reduce using rule 338 (simple_type_name -> FLOAT .)
    OPERATOR        reduce using rule 338 (simple_type_name -> FLOAT .)
    CLASS           reduce using rule 338 (simple_type_name -> FLOAT .)
    STRUCT          reduce using rule 338 (simple_type_name -> FLOAT .)
    UNION           reduce using rule 338 (simple_type_name -> FLOAT .)
    TEMPLATE        reduce using rule 338 (simple_type_name -> FLOAT .)
    EQUAL           reduce using rule 338 (simple_type_name -> FLOAT .)
    LSPAREN         reduce using rule 338 (simple_type_name -> FLOAT .)
    COMMA           reduce using rule 338 (simple_type_name -> FLOAT .)
    RPAREN          reduce using rule 338 (simple_type_name -> FLOAT .)
    RTEMPLATE       reduce using rule 338 (simple_type_name -> FLOAT .)
    COLON           reduce using rule 338 (simple_type_name -> FLOAT .)
    MULTEQOP        reduce using rule 338 (simple_type_name -> FLOAT .)
    DIVEQOP         reduce using rule 338 (simple_type_name -> FLOAT .)
    MODEQOP         reduce using rule 338 (simple_type_name -> FLOAT .)
    PLUSEQOP        reduce using rule 338 (simple_type_name -> FLOAT .)
    MINUSEQOP       reduce using rule 338 (simple_type_name -> FLOAT .)
    LSHIFTEQOP      reduce using rule 338 (simple_type_name -> FLOAT .)
    RSHIFTEQOP      reduce using rule 338 (simple_type_name -> FLOAT .)
    BANDEQOP        reduce using rule 338 (simple_type_name -> FLOAT .)
    BOREQOP         reduce using rule 338 (simple_type_name -> FLOAT .)
    DOTSTAR         reduce using rule 338 (simple_type_name -> FLOAT .)
    ARROWSTAR       reduce using rule 338 (simple_type_name -> FLOAT .)
    DIVOP           reduce using rule 338 (simple_type_name -> FLOAT .)
    MODOP           reduce using rule 338 (simple_type_name -> FLOAT .)
    PLUSOP          reduce using rule 338 (simple_type_name -> FLOAT .)
    MINUSOP         reduce using rule 338 (simple_type_name -> FLOAT .)
    LSHIFT          reduce using rule 338 (simple_type_name -> FLOAT .)
    RSHIFT          reduce using rule 338 (simple_type_name -> FLOAT .)
    LTCOMP          reduce using rule 338 (simple_type_name -> FLOAT .)
    GTCOMP          reduce using rule 338 (simple_type_name -> FLOAT .)
    LTECOMP         reduce using rule 338 (simple_type_name -> FLOAT .)
    GTECOMP         reduce using rule 338 (simple_type_name -> FLOAT .)
    EQCOMP          reduce using rule 338 (simple_type_name -> FLOAT .)
    NEQCOMP         reduce using rule 338 (simple_type_name -> FLOAT .)
    XOROP           reduce using rule 338 (simple_type_name -> FLOAT .)
    OROP            reduce using rule 338 (simple_type_name -> FLOAT .)
    ANDOP           reduce using rule 338 (simple_type_name -> FLOAT .)
    QUESMARK        reduce using rule 338 (simple_type_name -> FLOAT .)
    RSPAREN         reduce using rule 338 (simple_type_name -> FLOAT .)
    RCPAREN         reduce using rule 338 (simple_type_name -> FLOAT .)


state 43

    (339) simple_type_name -> DOUBLE .

    SEMICOLON       reduce using rule 339 (simple_type_name -> DOUBLE .)
    TYPEDEF         reduce using rule 339 (simple_type_name -> DOUBLE .)
    LPAREN          reduce using rule 339 (simple_type_name -> DOUBLE .)
    AUTO            reduce using rule 339 (simple_type_name -> DOUBLE .)
    STATIC          reduce using rule 339 (simple_type_name -> DOUBLE .)
    EXTERN          reduce using rule 339 (simple_type_name -> DOUBLE .)
    VIRTUAL         reduce using rule 339 (simple_type_name -> DOUBLE .)
    CONST           reduce using rule 339 (simple_type_name -> DOUBLE .)
    VOLATILE        reduce using rule 339 (simple_type_name -> DOUBLE .)
    IDENTIFIER      reduce using rule 339 (simple_type_name -> DOUBLE .)
    BNOP            reduce using rule 339 (simple_type_name -> DOUBLE .)
    MULTOP          reduce using rule 339 (simple_type_name -> DOUBLE .)
    BANDOP          reduce using rule 339 (simple_type_name -> DOUBLE .)
    CHAR            reduce using rule 339 (simple_type_name -> DOUBLE .)
    SHORT           reduce using rule 339 (simple_type_name -> DOUBLE .)
    INT             reduce using rule 339 (simple_type_name -> DOUBLE .)
    LONG            reduce using rule 339 (simple_type_name -> DOUBLE .)
    SIGNED          reduce using rule 339 (simple_type_name -> DOUBLE .)
    UNSIGNED        reduce using rule 339 (simple_type_name -> DOUBLE .)
    FLOAT           reduce using rule 339 (simple_type_name -> DOUBLE .)
    DOUBLE          reduce using rule 339 (simple_type_name -> DOUBLE .)
    VOID            reduce using rule 339 (simple_type_name -> DOUBLE .)
    STRING          reduce using rule 339 (simple_type_name -> DOUBLE .)
    ENUM            reduce using rule 339 (simple_type_name -> DOUBLE .)
    TYPE            reduce using rule 339 (simple_type_name -> DOUBLE .)
    OPERATOR        reduce using rule 339 (simple_type_name -> DOUBLE .)
    CLASS           reduce using rule 339 (simple_type_name -> DOUBLE .)
    STRUCT          reduce using rule 339 (simple_type_name -> DOUBLE .)
    UNION           reduce using rule 339 (simple_type_name -> DOUBLE .)
    TEMPLATE        reduce using rule 339 (simple_type_name -> DOUBLE .)
    EQUAL           reduce using rule 339 (simple_type_name -> DOUBLE .)
    LSPAREN         reduce using rule 339 (simple_type_name -> DOUBLE .)
    COMMA           reduce using rule 339 (simple_type_name -> DOUBLE .)
    RPAREN          reduce using rule 339 (simple_type_name -> DOUBLE .)
    RTEMPLATE       reduce using rule 339 (simple_type_name -> DOUBLE .)
    COLON           reduce using rule 339 (simple_type_name -> DOUBLE .)
    MULTEQOP        reduce using rule 339 (simple_type_name -> DOUBLE .)
    DIVEQOP         reduce using rule 339 (simple_type_name -> DOUBLE .)
    MODEQOP         reduce using rule 339 (simple_type_name -> DOUBLE .)
    PLUSEQOP        reduce using rule 339 (simple_type_name -> DOUBLE .)
    MINUSEQOP       reduce using rule 339 (simple_type_name -> DOUBLE .)
    LSHIFTEQOP      reduce using rule 339 (simple_type_name -> DOUBLE .)
    RSHIFTEQOP      reduce using rule 339 (simple_type_name -> DOUBLE .)
    BANDEQOP        reduce using rule 339 (simple_type_name -> DOUBLE .)
    BOREQOP         reduce using rule 339 (simple_type_name -> DOUBLE .)
    DOTSTAR         reduce using rule 339 (simple_type_name -> DOUBLE .)
    ARROWSTAR       reduce using rule 339 (simple_type_name -> DOUBLE .)
    DIVOP           reduce using rule 339 (simple_type_name -> DOUBLE .)
    MODOP           reduce using rule 339 (simple_type_name -> DOUBLE .)
    PLUSOP          reduce using rule 339 (simple_type_name -> DOUBLE .)
    MINUSOP         reduce using rule 339 (simple_type_name -> DOUBLE .)
    LSHIFT          reduce using rule 339 (simple_type_name -> DOUBLE .)
    RSHIFT          reduce using rule 339 (simple_type_name -> DOUBLE .)
    LTCOMP          reduce using rule 339 (simple_type_name -> DOUBLE .)
    GTCOMP          reduce using rule 339 (simple_type_name -> DOUBLE .)
    LTECOMP         reduce using rule 339 (simple_type_name -> DOUBLE .)
    GTECOMP         reduce using rule 339 (simple_type_name -> DOUBLE .)
    EQCOMP          reduce using rule 339 (simple_type_name -> DOUBLE .)
    NEQCOMP         reduce using rule 339 (simple_type_name -> DOUBLE .)
    XOROP           reduce using rule 339 (simple_type_name -> DOUBLE .)
    OROP            reduce using rule 339 (simple_type_name -> DOUBLE .)
    ANDOP           reduce using rule 339 (simple_type_name -> DOUBLE .)
    QUESMARK        reduce using rule 339 (simple_type_name -> DOUBLE .)
    RSPAREN         reduce using rule 339 (simple_type_name -> DOUBLE .)
    RCPAREN         reduce using rule 339 (simple_type_name -> DOUBLE .)


state 44

    (340) simple_type_name -> VOID .

    SEMICOLON       reduce using rule 340 (simple_type_name -> VOID .)
    TYPEDEF         reduce using rule 340 (simple_type_name -> VOID .)
    LPAREN          reduce using rule 340 (simple_type_name -> VOID .)
    AUTO            reduce using rule 340 (simple_type_name -> VOID .)
    STATIC          reduce using rule 340 (simple_type_name -> VOID .)
    EXTERN          reduce using rule 340 (simple_type_name -> VOID .)
    VIRTUAL         reduce using rule 340 (simple_type_name -> VOID .)
    CONST           reduce using rule 340 (simple_type_name -> VOID .)
    VOLATILE        reduce using rule 340 (simple_type_name -> VOID .)
    IDENTIFIER      reduce using rule 340 (simple_type_name -> VOID .)
    BNOP            reduce using rule 340 (simple_type_name -> VOID .)
    MULTOP          reduce using rule 340 (simple_type_name -> VOID .)
    BANDOP          reduce using rule 340 (simple_type_name -> VOID .)
    CHAR            reduce using rule 340 (simple_type_name -> VOID .)
    SHORT           reduce using rule 340 (simple_type_name -> VOID .)
    INT             reduce using rule 340 (simple_type_name -> VOID .)
    LONG            reduce using rule 340 (simple_type_name -> VOID .)
    SIGNED          reduce using rule 340 (simple_type_name -> VOID .)
    UNSIGNED        reduce using rule 340 (simple_type_name -> VOID .)
    FLOAT           reduce using rule 340 (simple_type_name -> VOID .)
    DOUBLE          reduce using rule 340 (simple_type_name -> VOID .)
    VOID            reduce using rule 340 (simple_type_name -> VOID .)
    STRING          reduce using rule 340 (simple_type_name -> VOID .)
    ENUM            reduce using rule 340 (simple_type_name -> VOID .)
    TYPE            reduce using rule 340 (simple_type_name -> VOID .)
    OPERATOR        reduce using rule 340 (simple_type_name -> VOID .)
    CLASS           reduce using rule 340 (simple_type_name -> VOID .)
    STRUCT          reduce using rule 340 (simple_type_name -> VOID .)
    UNION           reduce using rule 340 (simple_type_name -> VOID .)
    TEMPLATE        reduce using rule 340 (simple_type_name -> VOID .)
    EQUAL           reduce using rule 340 (simple_type_name -> VOID .)
    LSPAREN         reduce using rule 340 (simple_type_name -> VOID .)
    COMMA           reduce using rule 340 (simple_type_name -> VOID .)
    RPAREN          reduce using rule 340 (simple_type_name -> VOID .)
    RTEMPLATE       reduce using rule 340 (simple_type_name -> VOID .)
    COLON           reduce using rule 340 (simple_type_name -> VOID .)
    MULTEQOP        reduce using rule 340 (simple_type_name -> VOID .)
    DIVEQOP         reduce using rule 340 (simple_type_name -> VOID .)
    MODEQOP         reduce using rule 340 (simple_type_name -> VOID .)
    PLUSEQOP        reduce using rule 340 (simple_type_name -> VOID .)
    MINUSEQOP       reduce using rule 340 (simple_type_name -> VOID .)
    LSHIFTEQOP      reduce using rule 340 (simple_type_name -> VOID .)
    RSHIFTEQOP      reduce using rule 340 (simple_type_name -> VOID .)
    BANDEQOP        reduce using rule 340 (simple_type_name -> VOID .)
    BOREQOP         reduce using rule 340 (simple_type_name -> VOID .)
    DOTSTAR         reduce using rule 340 (simple_type_name -> VOID .)
    ARROWSTAR       reduce using rule 340 (simple_type_name -> VOID .)
    DIVOP           reduce using rule 340 (simple_type_name -> VOID .)
    MODOP           reduce using rule 340 (simple_type_name -> VOID .)
    PLUSOP          reduce using rule 340 (simple_type_name -> VOID .)
    MINUSOP         reduce using rule 340 (simple_type_name -> VOID .)
    LSHIFT          reduce using rule 340 (simple_type_name -> VOID .)
    RSHIFT          reduce using rule 340 (simple_type_name -> VOID .)
    LTCOMP          reduce using rule 340 (simple_type_name -> VOID .)
    GTCOMP          reduce using rule 340 (simple_type_name -> VOID .)
    LTECOMP         reduce using rule 340 (simple_type_name -> VOID .)
    GTECOMP         reduce using rule 340 (simple_type_name -> VOID .)
    EQCOMP          reduce using rule 340 (simple_type_name -> VOID .)
    NEQCOMP         reduce using rule 340 (simple_type_name -> VOID .)
    XOROP           reduce using rule 340 (simple_type_name -> VOID .)
    OROP            reduce using rule 340 (simple_type_name -> VOID .)
    ANDOP           reduce using rule 340 (simple_type_name -> VOID .)
    QUESMARK        reduce using rule 340 (simple_type_name -> VOID .)
    RSPAREN         reduce using rule 340 (simple_type_name -> VOID .)
    RCPAREN         reduce using rule 340 (simple_type_name -> VOID .)


state 45

    (341) simple_type_name -> STRING .

    SEMICOLON       reduce using rule 341 (simple_type_name -> STRING .)
    TYPEDEF         reduce using rule 341 (simple_type_name -> STRING .)
    LPAREN          reduce using rule 341 (simple_type_name -> STRING .)
    AUTO            reduce using rule 341 (simple_type_name -> STRING .)
    STATIC          reduce using rule 341 (simple_type_name -> STRING .)
    EXTERN          reduce using rule 341 (simple_type_name -> STRING .)
    VIRTUAL         reduce using rule 341 (simple_type_name -> STRING .)
    CONST           reduce using rule 341 (simple_type_name -> STRING .)
    VOLATILE        reduce using rule 341 (simple_type_name -> STRING .)
    IDENTIFIER      reduce using rule 341 (simple_type_name -> STRING .)
    BNOP            reduce using rule 341 (simple_type_name -> STRING .)
    MULTOP          reduce using rule 341 (simple_type_name -> STRING .)
    BANDOP          reduce using rule 341 (simple_type_name -> STRING .)
    CHAR            reduce using rule 341 (simple_type_name -> STRING .)
    SHORT           reduce using rule 341 (simple_type_name -> STRING .)
    INT             reduce using rule 341 (simple_type_name -> STRING .)
    LONG            reduce using rule 341 (simple_type_name -> STRING .)
    SIGNED          reduce using rule 341 (simple_type_name -> STRING .)
    UNSIGNED        reduce using rule 341 (simple_type_name -> STRING .)
    FLOAT           reduce using rule 341 (simple_type_name -> STRING .)
    DOUBLE          reduce using rule 341 (simple_type_name -> STRING .)
    VOID            reduce using rule 341 (simple_type_name -> STRING .)
    STRING          reduce using rule 341 (simple_type_name -> STRING .)
    ENUM            reduce using rule 341 (simple_type_name -> STRING .)
    TYPE            reduce using rule 341 (simple_type_name -> STRING .)
    OPERATOR        reduce using rule 341 (simple_type_name -> STRING .)
    CLASS           reduce using rule 341 (simple_type_name -> STRING .)
    STRUCT          reduce using rule 341 (simple_type_name -> STRING .)
    UNION           reduce using rule 341 (simple_type_name -> STRING .)
    TEMPLATE        reduce using rule 341 (simple_type_name -> STRING .)
    EQUAL           reduce using rule 341 (simple_type_name -> STRING .)
    LSPAREN         reduce using rule 341 (simple_type_name -> STRING .)
    COMMA           reduce using rule 341 (simple_type_name -> STRING .)
    RPAREN          reduce using rule 341 (simple_type_name -> STRING .)
    RTEMPLATE       reduce using rule 341 (simple_type_name -> STRING .)
    COLON           reduce using rule 341 (simple_type_name -> STRING .)
    MULTEQOP        reduce using rule 341 (simple_type_name -> STRING .)
    DIVEQOP         reduce using rule 341 (simple_type_name -> STRING .)
    MODEQOP         reduce using rule 341 (simple_type_name -> STRING .)
    PLUSEQOP        reduce using rule 341 (simple_type_name -> STRING .)
    MINUSEQOP       reduce using rule 341 (simple_type_name -> STRING .)
    LSHIFTEQOP      reduce using rule 341 (simple_type_name -> STRING .)
    RSHIFTEQOP      reduce using rule 341 (simple_type_name -> STRING .)
    BANDEQOP        reduce using rule 341 (simple_type_name -> STRING .)
    BOREQOP         reduce using rule 341 (simple_type_name -> STRING .)
    DOTSTAR         reduce using rule 341 (simple_type_name -> STRING .)
    ARROWSTAR       reduce using rule 341 (simple_type_name -> STRING .)
    DIVOP           reduce using rule 341 (simple_type_name -> STRING .)
    MODOP           reduce using rule 341 (simple_type_name -> STRING .)
    PLUSOP          reduce using rule 341 (simple_type_name -> STRING .)
    MINUSOP         reduce using rule 341 (simple_type_name -> STRING .)
    LSHIFT          reduce using rule 341 (simple_type_name -> STRING .)
    RSHIFT          reduce using rule 341 (simple_type_name -> STRING .)
    LTCOMP          reduce using rule 341 (simple_type_name -> STRING .)
    GTCOMP          reduce using rule 341 (simple_type_name -> STRING .)
    LTECOMP         reduce using rule 341 (simple_type_name -> STRING .)
    GTECOMP         reduce using rule 341 (simple_type_name -> STRING .)
    EQCOMP          reduce using rule 341 (simple_type_name -> STRING .)
    NEQCOMP         reduce using rule 341 (simple_type_name -> STRING .)
    XOROP           reduce using rule 341 (simple_type_name -> STRING .)
    OROP            reduce using rule 341 (simple_type_name -> STRING .)
    ANDOP           reduce using rule 341 (simple_type_name -> STRING .)
    QUESMARK        reduce using rule 341 (simple_type_name -> STRING .)
    RSPAREN         reduce using rule 341 (simple_type_name -> STRING .)
    RCPAREN         reduce using rule 341 (simple_type_name -> STRING .)


state 46

    (162) class_specifier -> class_head . LCPAREN member_list RCPAREN
    (163) class_specifier -> class_head . LCPAREN RCPAREN

    LCPAREN         shift and go to state 74


state 47

    (17) enum_specifier -> ENUM . IDENTIFIER LCPAREN enum_list RCPAREN
    (18) enum_specifier -> ENUM . LCPAREN enum_list RCPAREN
    (19) enum_specifier -> ENUM . IDENTIFIER LCPAREN RCPAREN
    (20) enum_specifier -> ENUM . LCPAREN RCPAREN
    (324) elaborated_type_specifier -> ENUM . enum_name
    (327) enum_name -> . IDENTIFIER

    IDENTIFIER      shift and go to state 75
    LCPAREN         shift and go to state 76

    enum_name                      shift and go to state 77

state 48

    (322) elaborated_type_specifier -> class_key . IDENTIFIER
    (323) elaborated_type_specifier -> class_key . IDENTIFIER template_class_name
    (304) class_head -> class_key . base_spec
    (305) class_head -> class_key .
    (306) class_head -> class_key . IDENTIFIER base_spec
    (307) class_head -> class_key . IDENTIFIER
    (308) base_spec -> . COLON base_list

    IDENTIFIER      shift and go to state 78
    LCPAREN         reduce using rule 305 (class_head -> class_key .)
    COLON           shift and go to state 80

    base_spec                      shift and go to state 79

state 49

    (325) elaborated_type_specifier -> TYPE . IDENTIFIER
    (326) elaborated_type_specifier -> TYPE . IDENTIFIER template_class_name

    IDENTIFIER      shift and go to state 81


state 50

    (264) operator_function_name -> OPERATOR . operator_name
    (265) operator_name -> . NEW
    (266) operator_name -> . DELETE
    (267) operator_name -> . PLUSOP
    (268) operator_name -> . MINUSOP
    (269) operator_name -> . MULTOP
    (270) operator_name -> . DIVOP
    (271) operator_name -> . MODOP
    (272) operator_name -> . XOROP
    (273) operator_name -> . BANDOP
    (274) operator_name -> . BNOP
    (275) operator_name -> . NOTSYM
    (276) operator_name -> . EQUAL
    (277) operator_name -> . LTCOMP
    (278) operator_name -> . GTCOMP
    (279) operator_name -> . PLUSEQOP
    (280) operator_name -> . MINUSEQOP
    (281) operator_name -> . MULTEQOP
    (282) operator_name -> . DIVEQOP
    (283) operator_name -> . MODEQOP
    (284) operator_name -> . XOREQOP
    (285) operator_name -> . BANDEQOP
    (286) operator_name -> . LSHIFT
    (287) operator_name -> . RSHIFT
    (288) operator_name -> . RSHIFTEQOP
    (289) operator_name -> . LSHIFTEQOP
    (290) operator_name -> . EQCOMP
    (291) operator_name -> . NEQCOMP
    (292) operator_name -> . LTECOMP
    (293) operator_name -> . GTECOMP
    (294) operator_name -> . ANDOP
    (295) operator_name -> . OROP
    (296) operator_name -> . DPLUSOP
    (297) operator_name -> . DMINUSOP
    (298) operator_name -> . COMMA
    (299) operator_name -> . ARROWSTAR
    (300) operator_name -> . ARROW
    (301) operator_name -> . LPAREN RPAREN
    (302) operator_name -> . LSPAREN RSPAREN

    NEW             shift and go to state 83
    DELETE          shift and go to state 84
    PLUSOP          shift and go to state 85
    MINUSOP         shift and go to state 86
    MULTOP          shift and go to state 87
    DIVOP           shift and go to state 88
    MODOP           shift and go to state 89
    XOROP           shift and go to state 90
    BANDOP          shift and go to state 91
    BNOP            shift and go to state 92
    NOTSYM          shift and go to state 93
    EQUAL           shift and go to state 94
    LTCOMP          shift and go to state 95
    GTCOMP          shift and go to state 96
    PLUSEQOP        shift and go to state 97
    MINUSEQOP       shift and go to state 98
    MULTEQOP        shift and go to state 99
    DIVEQOP         shift and go to state 100
    MODEQOP         shift and go to state 101
    XOREQOP         shift and go to state 102
    BANDEQOP        shift and go to state 103
    LSHIFT          shift and go to state 104
    RSHIFT          shift and go to state 105
    RSHIFTEQOP      shift and go to state 106
    LSHIFTEQOP      shift and go to state 107
    EQCOMP          shift and go to state 108
    NEQCOMP         shift and go to state 109
    LTECOMP         shift and go to state 110
    GTECOMP         shift and go to state 111
    ANDOP           shift and go to state 112
    OROP            shift and go to state 113
    DPLUSOP         shift and go to state 114
    DMINUSOP        shift and go to state 115
    COMMA           shift and go to state 116
    ARROWSTAR       shift and go to state 117
    ARROW           shift and go to state 118
    LPAREN          shift and go to state 119
    LSPAREN         shift and go to state 120

    operator_name                  shift and go to state 82

state 51

    (328) class_key -> CLASS .

    IDENTIFIER      reduce using rule 328 (class_key -> CLASS .)
    COLON           reduce using rule 328 (class_key -> CLASS .)
    LCPAREN         reduce using rule 328 (class_key -> CLASS .)


state 52

    (329) class_key -> STRUCT .

    IDENTIFIER      reduce using rule 329 (class_key -> STRUCT .)
    COLON           reduce using rule 329 (class_key -> STRUCT .)
    LCPAREN         reduce using rule 329 (class_key -> STRUCT .)


state 53

    (330) class_key -> UNION .

    IDENTIFIER      reduce using rule 330 (class_key -> UNION .)
    COLON           reduce using rule 330 (class_key -> UNION .)
    LCPAREN         reduce using rule 330 (class_key -> UNION .)


state 54

    (9) declaration_seq -> declaration_seq declaration .

    ASM             reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    TEMPLATE        reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    TYPEDEF         reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    LPAREN          reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    AUTO            reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    STATIC          reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    EXTERN          reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    VIRTUAL         reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    CONST           reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    VOLATILE        reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    IDENTIFIER      reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    BNOP            reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    MULTOP          reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    BANDOP          reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    CHAR            reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    SHORT           reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    INT             reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    LONG            reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    SIGNED          reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    UNSIGNED        reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    FLOAT           reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    DOUBLE          reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    VOID            reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    STRING          reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    ENUM            reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    TYPE            reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    OPERATOR        reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    CLASS           reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    STRUCT          reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    UNION           reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    $end            reduce using rule 9 (declaration_seq -> declaration_seq declaration .)


state 55

    (221) declaration -> decl_specifiers declarator_list . SEMICOLON
    (231) declarator_list -> declarator_list . COMMA init_declarator

    SEMICOLON       shift and go to state 121
    COMMA           shift and go to state 61


state 56

    (222) declaration -> decl_specifiers SEMICOLON .

    ASM             reduce using rule 222 (declaration -> decl_specifiers SEMICOLON .)
    TEMPLATE        reduce using rule 222 (declaration -> decl_specifiers SEMICOLON .)
    TYPEDEF         reduce using rule 222 (declaration -> decl_specifiers SEMICOLON .)
    LPAREN          reduce using rule 222 (declaration -> decl_specifiers SEMICOLON .)
    AUTO            reduce using rule 222 (declaration -> decl_specifiers SEMICOLON .)
    STATIC          reduce using rule 222 (declaration -> decl_specifiers SEMICOLON .)
    EXTERN          reduce using rule 222 (declaration -> decl_specifiers SEMICOLON .)
    VIRTUAL         reduce using rule 222 (declaration -> decl_specifiers SEMICOLON .)
    CONST           reduce using rule 222 (declaration -> decl_specifiers SEMICOLON .)
    VOLATILE        reduce using rule 222 (declaration -> decl_specifiers SEMICOLON .)
    IDENTIFIER      reduce using rule 222 (declaration -> decl_specifiers SEMICOLON .)
    BNOP            reduce using rule 222 (declaration -> decl_specifiers SEMICOLON .)
    MULTOP          reduce using rule 222 (declaration -> decl_specifiers SEMICOLON .)
    BANDOP          reduce using rule 222 (declaration -> decl_specifiers SEMICOLON .)
    CHAR            reduce using rule 222 (declaration -> decl_specifiers SEMICOLON .)
    SHORT           reduce using rule 222 (declaration -> decl_specifiers SEMICOLON .)
    INT             reduce using rule 222 (declaration -> decl_specifiers SEMICOLON .)
    LONG            reduce using rule 222 (declaration -> decl_specifiers SEMICOLON .)
    SIGNED          reduce using rule 222 (declaration -> decl_specifiers SEMICOLON .)
    UNSIGNED        reduce using rule 222 (declaration -> decl_specifiers SEMICOLON .)
    FLOAT           reduce using rule 222 (declaration -> decl_specifiers SEMICOLON .)
    DOUBLE          reduce using rule 222 (declaration -> decl_specifiers SEMICOLON .)
    VOID            reduce using rule 222 (declaration -> decl_specifiers SEMICOLON .)
    STRING          reduce using rule 222 (declaration -> decl_specifiers SEMICOLON .)
    ENUM            reduce using rule 222 (declaration -> decl_specifiers SEMICOLON .)
    TYPE            reduce using rule 222 (declaration -> decl_specifiers SEMICOLON .)
    OPERATOR        reduce using rule 222 (declaration -> decl_specifiers SEMICOLON .)
    CLASS           reduce using rule 222 (declaration -> decl_specifiers SEMICOLON .)
    STRUCT          reduce using rule 222 (declaration -> decl_specifiers SEMICOLON .)
    UNION           reduce using rule 222 (declaration -> decl_specifiers SEMICOLON .)
    $end            reduce using rule 222 (declaration -> decl_specifiers SEMICOLON .)
    RCPAREN         reduce using rule 222 (declaration -> decl_specifiers SEMICOLON .)
    CASE            reduce using rule 222 (declaration -> decl_specifiers SEMICOLON .)
    DEFAULT         reduce using rule 222 (declaration -> decl_specifiers SEMICOLON .)
    SEMICOLON       reduce using rule 222 (declaration -> decl_specifiers SEMICOLON .)
    LCPAREN         reduce using rule 222 (declaration -> decl_specifiers SEMICOLON .)
    IF              reduce using rule 222 (declaration -> decl_specifiers SEMICOLON .)
    SWITCH          reduce using rule 222 (declaration -> decl_specifiers SEMICOLON .)
    WHILE           reduce using rule 222 (declaration -> decl_specifiers SEMICOLON .)
    DO              reduce using rule 222 (declaration -> decl_specifiers SEMICOLON .)
    FOR             reduce using rule 222 (declaration -> decl_specifiers SEMICOLON .)
    BREAK           reduce using rule 222 (declaration -> decl_specifiers SEMICOLON .)
    CONTINUE        reduce using rule 222 (declaration -> decl_specifiers SEMICOLON .)
    RETURN          reduce using rule 222 (declaration -> decl_specifiers SEMICOLON .)
    GOTO            reduce using rule 222 (declaration -> decl_specifiers SEMICOLON .)
    TRY             reduce using rule 222 (declaration -> decl_specifiers SEMICOLON .)
    DPLUSOP         reduce using rule 222 (declaration -> decl_specifiers SEMICOLON .)
    DMINUSOP        reduce using rule 222 (declaration -> decl_specifiers SEMICOLON .)
    SIZEOF          reduce using rule 222 (declaration -> decl_specifiers SEMICOLON .)
    PLUSOP          reduce using rule 222 (declaration -> decl_specifiers SEMICOLON .)
    MINUSOP         reduce using rule 222 (declaration -> decl_specifiers SEMICOLON .)
    NOTSYM          reduce using rule 222 (declaration -> decl_specifiers SEMICOLON .)
    NEW             reduce using rule 222 (declaration -> decl_specifiers SEMICOLON .)
    DELETE          reduce using rule 222 (declaration -> decl_specifiers SEMICOLON .)
    THIS            reduce using rule 222 (declaration -> decl_specifiers SEMICOLON .)
    NUMBER          reduce using rule 222 (declaration -> decl_specifiers SEMICOLON .)
    STRING_L        reduce using rule 222 (declaration -> decl_specifiers SEMICOLON .)
    SCHAR           reduce using rule 222 (declaration -> decl_specifiers SEMICOLON .)
    ELSE            reduce using rule 222 (declaration -> decl_specifiers SEMICOLON .)


state 57

    (147) decl_specifiers -> decl_specifiers decl_specifier .

    SEMICOLON       reduce using rule 147 (decl_specifiers -> decl_specifiers decl_specifier .)
    TYPEDEF         reduce using rule 147 (decl_specifiers -> decl_specifiers decl_specifier .)
    LPAREN          reduce using rule 147 (decl_specifiers -> decl_specifiers decl_specifier .)
    AUTO            reduce using rule 147 (decl_specifiers -> decl_specifiers decl_specifier .)
    STATIC          reduce using rule 147 (decl_specifiers -> decl_specifiers decl_specifier .)
    EXTERN          reduce using rule 147 (decl_specifiers -> decl_specifiers decl_specifier .)
    VIRTUAL         reduce using rule 147 (decl_specifiers -> decl_specifiers decl_specifier .)
    CONST           reduce using rule 147 (decl_specifiers -> decl_specifiers decl_specifier .)
    VOLATILE        reduce using rule 147 (decl_specifiers -> decl_specifiers decl_specifier .)
    IDENTIFIER      reduce using rule 147 (decl_specifiers -> decl_specifiers decl_specifier .)
    BNOP            reduce using rule 147 (decl_specifiers -> decl_specifiers decl_specifier .)
    MULTOP          reduce using rule 147 (decl_specifiers -> decl_specifiers decl_specifier .)
    BANDOP          reduce using rule 147 (decl_specifiers -> decl_specifiers decl_specifier .)
    CHAR            reduce using rule 147 (decl_specifiers -> decl_specifiers decl_specifier .)
    SHORT           reduce using rule 147 (decl_specifiers -> decl_specifiers decl_specifier .)
    INT             reduce using rule 147 (decl_specifiers -> decl_specifiers decl_specifier .)
    LONG            reduce using rule 147 (decl_specifiers -> decl_specifiers decl_specifier .)
    SIGNED          reduce using rule 147 (decl_specifiers -> decl_specifiers decl_specifier .)
    UNSIGNED        reduce using rule 147 (decl_specifiers -> decl_specifiers decl_specifier .)
    FLOAT           reduce using rule 147 (decl_specifiers -> decl_specifiers decl_specifier .)
    DOUBLE          reduce using rule 147 (decl_specifiers -> decl_specifiers decl_specifier .)
    VOID            reduce using rule 147 (decl_specifiers -> decl_specifiers decl_specifier .)
    STRING          reduce using rule 147 (decl_specifiers -> decl_specifiers decl_specifier .)
    ENUM            reduce using rule 147 (decl_specifiers -> decl_specifiers decl_specifier .)
    TYPE            reduce using rule 147 (decl_specifiers -> decl_specifiers decl_specifier .)
    OPERATOR        reduce using rule 147 (decl_specifiers -> decl_specifiers decl_specifier .)
    CLASS           reduce using rule 147 (decl_specifiers -> decl_specifiers decl_specifier .)
    STRUCT          reduce using rule 147 (decl_specifiers -> decl_specifiers decl_specifier .)
    UNION           reduce using rule 147 (decl_specifiers -> decl_specifiers decl_specifier .)
    TEMPLATE        reduce using rule 147 (decl_specifiers -> decl_specifiers decl_specifier .)
    EQUAL           reduce using rule 147 (decl_specifiers -> decl_specifiers decl_specifier .)
    LSPAREN         reduce using rule 147 (decl_specifiers -> decl_specifiers decl_specifier .)
    COMMA           reduce using rule 147 (decl_specifiers -> decl_specifiers decl_specifier .)
    RPAREN          reduce using rule 147 (decl_specifiers -> decl_specifiers decl_specifier .)
    RTEMPLATE       reduce using rule 147 (decl_specifiers -> decl_specifiers decl_specifier .)
    COLON           reduce using rule 147 (decl_specifiers -> decl_specifiers decl_specifier .)


state 58

    (177) function_definition -> decl_specifiers declarator . fct_body
    (255) declarator -> declarator . LPAREN argument_declaration_list RPAREN
    (256) declarator -> declarator . LSPAREN constant_expression RSPAREN
    (257) declarator -> declarator . LSPAREN RSPAREN
    (232) init_declarator -> declarator . initializer
    (233) init_declarator -> declarator .
    (179) fct_body -> . compound_statement
    (234) initializer -> . EQUAL assignment_expression
    (235) initializer -> . EQUAL LCPAREN initializer_list RCPAREN
    (236) initializer -> . EQUAL LCPAREN initializer_list COMMA RCPAREN
    (237) initializer -> . LPAREN expression_list RPAREN
    (180) compound_statement -> . LCPAREN statement_list RCPAREN
    (181) compound_statement -> . LCPAREN RCPAREN

    LPAREN          shift and go to state 66
    LSPAREN         shift and go to state 67
    SEMICOLON       reduce using rule 233 (init_declarator -> declarator .)
    COMMA           reduce using rule 233 (init_declarator -> declarator .)
    EQUAL           shift and go to state 69
    LCPAREN         shift and go to state 70

    fct_body                       shift and go to state 122
    initializer                    shift and go to state 65
    compound_statement             shift and go to state 68

state 59

    (331) class_key -> TEMPLATE .

    IDENTIFIER      reduce using rule 331 (class_key -> TEMPLATE .)
    COLON           reduce using rule 331 (class_key -> TEMPLATE .)
    LCPAREN         reduce using rule 331 (class_key -> TEMPLATE .)


state 60

    (223) declaration -> declarator_list SEMICOLON .

    ASM             reduce using rule 223 (declaration -> declarator_list SEMICOLON .)
    TEMPLATE        reduce using rule 223 (declaration -> declarator_list SEMICOLON .)
    TYPEDEF         reduce using rule 223 (declaration -> declarator_list SEMICOLON .)
    LPAREN          reduce using rule 223 (declaration -> declarator_list SEMICOLON .)
    AUTO            reduce using rule 223 (declaration -> declarator_list SEMICOLON .)
    STATIC          reduce using rule 223 (declaration -> declarator_list SEMICOLON .)
    EXTERN          reduce using rule 223 (declaration -> declarator_list SEMICOLON .)
    VIRTUAL         reduce using rule 223 (declaration -> declarator_list SEMICOLON .)
    CONST           reduce using rule 223 (declaration -> declarator_list SEMICOLON .)
    VOLATILE        reduce using rule 223 (declaration -> declarator_list SEMICOLON .)
    IDENTIFIER      reduce using rule 223 (declaration -> declarator_list SEMICOLON .)
    BNOP            reduce using rule 223 (declaration -> declarator_list SEMICOLON .)
    MULTOP          reduce using rule 223 (declaration -> declarator_list SEMICOLON .)
    BANDOP          reduce using rule 223 (declaration -> declarator_list SEMICOLON .)
    CHAR            reduce using rule 223 (declaration -> declarator_list SEMICOLON .)
    SHORT           reduce using rule 223 (declaration -> declarator_list SEMICOLON .)
    INT             reduce using rule 223 (declaration -> declarator_list SEMICOLON .)
    LONG            reduce using rule 223 (declaration -> declarator_list SEMICOLON .)
    SIGNED          reduce using rule 223 (declaration -> declarator_list SEMICOLON .)
    UNSIGNED        reduce using rule 223 (declaration -> declarator_list SEMICOLON .)
    FLOAT           reduce using rule 223 (declaration -> declarator_list SEMICOLON .)
    DOUBLE          reduce using rule 223 (declaration -> declarator_list SEMICOLON .)
    VOID            reduce using rule 223 (declaration -> declarator_list SEMICOLON .)
    STRING          reduce using rule 223 (declaration -> declarator_list SEMICOLON .)
    ENUM            reduce using rule 223 (declaration -> declarator_list SEMICOLON .)
    TYPE            reduce using rule 223 (declaration -> declarator_list SEMICOLON .)
    OPERATOR        reduce using rule 223 (declaration -> declarator_list SEMICOLON .)
    CLASS           reduce using rule 223 (declaration -> declarator_list SEMICOLON .)
    STRUCT          reduce using rule 223 (declaration -> declarator_list SEMICOLON .)
    UNION           reduce using rule 223 (declaration -> declarator_list SEMICOLON .)
    $end            reduce using rule 223 (declaration -> declarator_list SEMICOLON .)
    RCPAREN         reduce using rule 223 (declaration -> declarator_list SEMICOLON .)
    CASE            reduce using rule 223 (declaration -> declarator_list SEMICOLON .)
    DEFAULT         reduce using rule 223 (declaration -> declarator_list SEMICOLON .)
    SEMICOLON       reduce using rule 223 (declaration -> declarator_list SEMICOLON .)
    LCPAREN         reduce using rule 223 (declaration -> declarator_list SEMICOLON .)
    IF              reduce using rule 223 (declaration -> declarator_list SEMICOLON .)
    SWITCH          reduce using rule 223 (declaration -> declarator_list SEMICOLON .)
    WHILE           reduce using rule 223 (declaration -> declarator_list SEMICOLON .)
    DO              reduce using rule 223 (declaration -> declarator_list SEMICOLON .)
    FOR             reduce using rule 223 (declaration -> declarator_list SEMICOLON .)
    BREAK           reduce using rule 223 (declaration -> declarator_list SEMICOLON .)
    CONTINUE        reduce using rule 223 (declaration -> declarator_list SEMICOLON .)
    RETURN          reduce using rule 223 (declaration -> declarator_list SEMICOLON .)
    GOTO            reduce using rule 223 (declaration -> declarator_list SEMICOLON .)
    TRY             reduce using rule 223 (declaration -> declarator_list SEMICOLON .)
    DPLUSOP         reduce using rule 223 (declaration -> declarator_list SEMICOLON .)
    DMINUSOP        reduce using rule 223 (declaration -> declarator_list SEMICOLON .)
    SIZEOF          reduce using rule 223 (declaration -> declarator_list SEMICOLON .)
    PLUSOP          reduce using rule 223 (declaration -> declarator_list SEMICOLON .)
    MINUSOP         reduce using rule 223 (declaration -> declarator_list SEMICOLON .)
    NOTSYM          reduce using rule 223 (declaration -> declarator_list SEMICOLON .)
    NEW             reduce using rule 223 (declaration -> declarator_list SEMICOLON .)
    DELETE          reduce using rule 223 (declaration -> declarator_list SEMICOLON .)
    THIS            reduce using rule 223 (declaration -> declarator_list SEMICOLON .)
    NUMBER          reduce using rule 223 (declaration -> declarator_list SEMICOLON .)
    STRING_L        reduce using rule 223 (declaration -> declarator_list SEMICOLON .)
    SCHAR           reduce using rule 223 (declaration -> declarator_list SEMICOLON .)
    ELSE            reduce using rule 223 (declaration -> declarator_list SEMICOLON .)


state 61

    (231) declarator_list -> declarator_list COMMA . init_declarator
    (232) init_declarator -> . declarator initializer
    (233) init_declarator -> . declarator
    (253) declarator -> . name
    (254) declarator -> . unary2_operator declarator
    (255) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (256) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (257) declarator -> . declarator LSPAREN RSPAREN
    (258) declarator -> . LPAREN declarator RPAREN
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (264) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 13
    IDENTIFIER      shift and go to state 31
    BNOP            shift and go to state 33
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    OPERATOR        shift and go to state 50

    init_declarator                shift and go to state 123
    declarator                     shift and go to state 124
    name                           shift and go to state 19
    unary2_operator                shift and go to state 20
    operator_function_name         shift and go to state 32

state 62

    (242) asm_declaration -> ASM LPAREN . STRING_L RPAREN SEMICOLON

    STRING_L        shift and go to state 125


state 63

    (258) declarator -> LPAREN declarator . RPAREN
    (255) declarator -> declarator . LPAREN argument_declaration_list RPAREN
    (256) declarator -> declarator . LSPAREN constant_expression RSPAREN
    (257) declarator -> declarator . LSPAREN RSPAREN

    RPAREN          shift and go to state 127
    LPAREN          shift and go to state 126
    LSPAREN         shift and go to state 67


state 64

    (178) function_definition -> declarator fct_body .

    ASM             reduce using rule 178 (function_definition -> declarator fct_body .)
    TEMPLATE        reduce using rule 178 (function_definition -> declarator fct_body .)
    TYPEDEF         reduce using rule 178 (function_definition -> declarator fct_body .)
    LPAREN          reduce using rule 178 (function_definition -> declarator fct_body .)
    AUTO            reduce using rule 178 (function_definition -> declarator fct_body .)
    STATIC          reduce using rule 178 (function_definition -> declarator fct_body .)
    EXTERN          reduce using rule 178 (function_definition -> declarator fct_body .)
    VIRTUAL         reduce using rule 178 (function_definition -> declarator fct_body .)
    CONST           reduce using rule 178 (function_definition -> declarator fct_body .)
    VOLATILE        reduce using rule 178 (function_definition -> declarator fct_body .)
    IDENTIFIER      reduce using rule 178 (function_definition -> declarator fct_body .)
    BNOP            reduce using rule 178 (function_definition -> declarator fct_body .)
    MULTOP          reduce using rule 178 (function_definition -> declarator fct_body .)
    BANDOP          reduce using rule 178 (function_definition -> declarator fct_body .)
    CHAR            reduce using rule 178 (function_definition -> declarator fct_body .)
    SHORT           reduce using rule 178 (function_definition -> declarator fct_body .)
    INT             reduce using rule 178 (function_definition -> declarator fct_body .)
    LONG            reduce using rule 178 (function_definition -> declarator fct_body .)
    SIGNED          reduce using rule 178 (function_definition -> declarator fct_body .)
    UNSIGNED        reduce using rule 178 (function_definition -> declarator fct_body .)
    FLOAT           reduce using rule 178 (function_definition -> declarator fct_body .)
    DOUBLE          reduce using rule 178 (function_definition -> declarator fct_body .)
    VOID            reduce using rule 178 (function_definition -> declarator fct_body .)
    STRING          reduce using rule 178 (function_definition -> declarator fct_body .)
    ENUM            reduce using rule 178 (function_definition -> declarator fct_body .)
    TYPE            reduce using rule 178 (function_definition -> declarator fct_body .)
    OPERATOR        reduce using rule 178 (function_definition -> declarator fct_body .)
    CLASS           reduce using rule 178 (function_definition -> declarator fct_body .)
    STRUCT          reduce using rule 178 (function_definition -> declarator fct_body .)
    UNION           reduce using rule 178 (function_definition -> declarator fct_body .)
    $end            reduce using rule 178 (function_definition -> declarator fct_body .)
    RCPAREN         reduce using rule 178 (function_definition -> declarator fct_body .)
    CASE            reduce using rule 178 (function_definition -> declarator fct_body .)
    DEFAULT         reduce using rule 178 (function_definition -> declarator fct_body .)
    SEMICOLON       reduce using rule 178 (function_definition -> declarator fct_body .)
    LCPAREN         reduce using rule 178 (function_definition -> declarator fct_body .)
    IF              reduce using rule 178 (function_definition -> declarator fct_body .)
    SWITCH          reduce using rule 178 (function_definition -> declarator fct_body .)
    WHILE           reduce using rule 178 (function_definition -> declarator fct_body .)
    DO              reduce using rule 178 (function_definition -> declarator fct_body .)
    FOR             reduce using rule 178 (function_definition -> declarator fct_body .)
    BREAK           reduce using rule 178 (function_definition -> declarator fct_body .)
    CONTINUE        reduce using rule 178 (function_definition -> declarator fct_body .)
    RETURN          reduce using rule 178 (function_definition -> declarator fct_body .)
    GOTO            reduce using rule 178 (function_definition -> declarator fct_body .)
    TRY             reduce using rule 178 (function_definition -> declarator fct_body .)
    DPLUSOP         reduce using rule 178 (function_definition -> declarator fct_body .)
    DMINUSOP        reduce using rule 178 (function_definition -> declarator fct_body .)
    SIZEOF          reduce using rule 178 (function_definition -> declarator fct_body .)
    PLUSOP          reduce using rule 178 (function_definition -> declarator fct_body .)
    MINUSOP         reduce using rule 178 (function_definition -> declarator fct_body .)
    NOTSYM          reduce using rule 178 (function_definition -> declarator fct_body .)
    NEW             reduce using rule 178 (function_definition -> declarator fct_body .)
    DELETE          reduce using rule 178 (function_definition -> declarator fct_body .)
    THIS            reduce using rule 178 (function_definition -> declarator fct_body .)
    NUMBER          reduce using rule 178 (function_definition -> declarator fct_body .)
    STRING_L        reduce using rule 178 (function_definition -> declarator fct_body .)
    SCHAR           reduce using rule 178 (function_definition -> declarator fct_body .)
    COLON           reduce using rule 178 (function_definition -> declarator fct_body .)
    PRIVATE         reduce using rule 178 (function_definition -> declarator fct_body .)
    PROTECTED       reduce using rule 178 (function_definition -> declarator fct_body .)
    PUBLIC          reduce using rule 178 (function_definition -> declarator fct_body .)
    ELSE            reduce using rule 178 (function_definition -> declarator fct_body .)


state 65

    (232) init_declarator -> declarator initializer .

    SEMICOLON       reduce using rule 232 (init_declarator -> declarator initializer .)
    COMMA           reduce using rule 232 (init_declarator -> declarator initializer .)


state 66

    (255) declarator -> declarator LPAREN . argument_declaration_list RPAREN
    (237) initializer -> LPAREN . expression_list RPAREN
    (137) argument_declaration_list -> . arg_declaration_list
    (138) argument_declaration_list -> . empty
    (245) expression_list -> . assignment_expression
    (246) expression_list -> . expression_list COMMA assignment_expression
    (139) arg_declaration_list -> . argument_declaration
    (140) arg_declaration_list -> . argument_declaration COMMA arg_declaration_list
    (11) empty -> .
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (141) argument_declaration -> . decl_specifiers declarator
    (142) argument_declaration -> . decl_specifiers declarator EQUAL expression
    (143) argument_declaration -> . decl_specifiers abstract_declarator
    (144) argument_declaration -> . decl_specifiers
    (145) argument_declaration -> . decl_specifiers abstract_declarator EQUAL expression
    (146) argument_declaration -> . decl_specifiers EQUAL expression
    (26) conditional_expression -> . logical_OR_expression
    (27) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (147) decl_specifiers -> . decl_specifiers decl_specifier
    (148) decl_specifiers -> . decl_specifier
    (28) logical_OR_expression -> . logical_AND_expression
    (29) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (149) decl_specifier -> . storage_class_specifier
    (150) decl_specifier -> . type_specifier
    (151) decl_specifier -> . TYPEDEF
    (30) logical_AND_expression -> . inclusive_OR_expression
    (31) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (152) storage_class_specifier -> . AUTO
    (153) storage_class_specifier -> . STATIC
    (154) storage_class_specifier -> . EXTERN
    (155) storage_class_specifier -> . VIRTUAL
    (156) type_specifier -> . simple_type_name
    (157) type_specifier -> . class_specifier
    (158) type_specifier -> . enum_specifier
    (159) type_specifier -> . elaborated_type_specifier
    (160) type_specifier -> . CONST
    (161) type_specifier -> . VOLATILE
    (32) inclusive_OR_expression -> . exclusive_OR_expression
    (33) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (162) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (163) class_specifier -> . class_head LCPAREN RCPAREN
    (17) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (18) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (20) enum_specifier -> . ENUM LCPAREN RCPAREN
    (322) elaborated_type_specifier -> . class_key IDENTIFIER
    (323) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (324) elaborated_type_specifier -> . ENUM enum_name
    (325) elaborated_type_specifier -> . TYPE IDENTIFIER
    (326) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (264) operator_function_name -> . OPERATOR operator_name
    (304) class_head -> . class_key base_spec
    (305) class_head -> . class_key
    (306) class_head -> . class_key IDENTIFIER base_spec
    (307) class_head -> . class_key IDENTIFIER
    (328) class_key -> . CLASS
    (329) class_key -> . STRUCT
    (330) class_key -> . UNION
    (331) class_key -> . TEMPLATE
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          reduce using rule 11 (empty -> .)
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    TYPEDEF         shift and go to state 18
    THIS            shift and go to state 160
    LPAREN          shift and go to state 128
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    AUTO            shift and go to state 21
    STATIC          shift and go to state 22
    EXTERN          shift and go to state 23
    VIRTUAL         shift and go to state 24
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    ENUM            shift and go to state 47
    TYPE            shift and go to state 49
    OPERATOR        shift and go to state 50
    CLASS           shift and go to state 51
    STRUCT          shift and go to state 52
    UNION           shift and go to state 53
    TEMPLATE        shift and go to state 59

    argument_declaration_list      shift and go to state 129
    expression_list                shift and go to state 130
    arg_declaration_list           shift and go to state 131
    empty                          shift and go to state 132
    assignment_expression          shift and go to state 133
    argument_declaration           shift and go to state 134
    conditional_expression         shift and go to state 135
    unary_expression               shift and go to state 136
    decl_specifiers                shift and go to state 137
    logical_OR_expression          shift and go to state 138
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    cast_expression                shift and go to state 143
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    decl_specifier                 shift and go to state 10
    logical_AND_expression         shift and go to state 148
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 150
    name                           shift and go to state 151
    storage_class_specifier        shift and go to state 16
    type_specifier                 shift and go to state 17
    inclusive_OR_expression        shift and go to state 158
    literal                        shift and go to state 159
    class_specifier                shift and go to state 26
    enum_specifier                 shift and go to state 27
    elaborated_type_specifier      shift and go to state 28
    exclusive_OR_expression        shift and go to state 161
    operator_function_name         shift and go to state 32
    class_head                     shift and go to state 46
    class_key                      shift and go to state 48
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171

state 67

    (256) declarator -> declarator LSPAREN . constant_expression RSPAREN
    (257) declarator -> declarator LSPAREN . RSPAREN
    (25) constant_expression -> . conditional_expression
    (26) conditional_expression -> . logical_OR_expression
    (27) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (28) logical_OR_expression -> . logical_AND_expression
    (29) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (30) logical_AND_expression -> . inclusive_OR_expression
    (31) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (32) inclusive_OR_expression -> . exclusive_OR_expression
    (33) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (264) operator_function_name -> . OPERATOR operator_name

    RSPAREN         shift and go to state 173
    LPAREN          shift and go to state 176
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    constant_expression            shift and go to state 172
    conditional_expression         shift and go to state 174
    logical_OR_expression          shift and go to state 138
    logical_AND_expression         shift and go to state 148
    inclusive_OR_expression        shift and go to state 158
    exclusive_OR_expression        shift and go to state 161
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171
    cast_expression                shift and go to state 143
    unary_expression               shift and go to state 175
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    name                           shift and go to state 151
    literal                        shift and go to state 159
    operator_function_name         shift and go to state 32

state 68

    (179) fct_body -> compound_statement .

    ASM             reduce using rule 179 (fct_body -> compound_statement .)
    TEMPLATE        reduce using rule 179 (fct_body -> compound_statement .)
    TYPEDEF         reduce using rule 179 (fct_body -> compound_statement .)
    LPAREN          reduce using rule 179 (fct_body -> compound_statement .)
    AUTO            reduce using rule 179 (fct_body -> compound_statement .)
    STATIC          reduce using rule 179 (fct_body -> compound_statement .)
    EXTERN          reduce using rule 179 (fct_body -> compound_statement .)
    VIRTUAL         reduce using rule 179 (fct_body -> compound_statement .)
    CONST           reduce using rule 179 (fct_body -> compound_statement .)
    VOLATILE        reduce using rule 179 (fct_body -> compound_statement .)
    IDENTIFIER      reduce using rule 179 (fct_body -> compound_statement .)
    BNOP            reduce using rule 179 (fct_body -> compound_statement .)
    MULTOP          reduce using rule 179 (fct_body -> compound_statement .)
    BANDOP          reduce using rule 179 (fct_body -> compound_statement .)
    CHAR            reduce using rule 179 (fct_body -> compound_statement .)
    SHORT           reduce using rule 179 (fct_body -> compound_statement .)
    INT             reduce using rule 179 (fct_body -> compound_statement .)
    LONG            reduce using rule 179 (fct_body -> compound_statement .)
    SIGNED          reduce using rule 179 (fct_body -> compound_statement .)
    UNSIGNED        reduce using rule 179 (fct_body -> compound_statement .)
    FLOAT           reduce using rule 179 (fct_body -> compound_statement .)
    DOUBLE          reduce using rule 179 (fct_body -> compound_statement .)
    VOID            reduce using rule 179 (fct_body -> compound_statement .)
    STRING          reduce using rule 179 (fct_body -> compound_statement .)
    ENUM            reduce using rule 179 (fct_body -> compound_statement .)
    TYPE            reduce using rule 179 (fct_body -> compound_statement .)
    OPERATOR        reduce using rule 179 (fct_body -> compound_statement .)
    CLASS           reduce using rule 179 (fct_body -> compound_statement .)
    STRUCT          reduce using rule 179 (fct_body -> compound_statement .)
    UNION           reduce using rule 179 (fct_body -> compound_statement .)
    $end            reduce using rule 179 (fct_body -> compound_statement .)
    RCPAREN         reduce using rule 179 (fct_body -> compound_statement .)
    CASE            reduce using rule 179 (fct_body -> compound_statement .)
    DEFAULT         reduce using rule 179 (fct_body -> compound_statement .)
    SEMICOLON       reduce using rule 179 (fct_body -> compound_statement .)
    LCPAREN         reduce using rule 179 (fct_body -> compound_statement .)
    IF              reduce using rule 179 (fct_body -> compound_statement .)
    SWITCH          reduce using rule 179 (fct_body -> compound_statement .)
    WHILE           reduce using rule 179 (fct_body -> compound_statement .)
    DO              reduce using rule 179 (fct_body -> compound_statement .)
    FOR             reduce using rule 179 (fct_body -> compound_statement .)
    BREAK           reduce using rule 179 (fct_body -> compound_statement .)
    CONTINUE        reduce using rule 179 (fct_body -> compound_statement .)
    RETURN          reduce using rule 179 (fct_body -> compound_statement .)
    GOTO            reduce using rule 179 (fct_body -> compound_statement .)
    TRY             reduce using rule 179 (fct_body -> compound_statement .)
    DPLUSOP         reduce using rule 179 (fct_body -> compound_statement .)
    DMINUSOP        reduce using rule 179 (fct_body -> compound_statement .)
    SIZEOF          reduce using rule 179 (fct_body -> compound_statement .)
    PLUSOP          reduce using rule 179 (fct_body -> compound_statement .)
    MINUSOP         reduce using rule 179 (fct_body -> compound_statement .)
    NOTSYM          reduce using rule 179 (fct_body -> compound_statement .)
    NEW             reduce using rule 179 (fct_body -> compound_statement .)
    DELETE          reduce using rule 179 (fct_body -> compound_statement .)
    THIS            reduce using rule 179 (fct_body -> compound_statement .)
    NUMBER          reduce using rule 179 (fct_body -> compound_statement .)
    STRING_L        reduce using rule 179 (fct_body -> compound_statement .)
    SCHAR           reduce using rule 179 (fct_body -> compound_statement .)
    ELSE            reduce using rule 179 (fct_body -> compound_statement .)
    COLON           reduce using rule 179 (fct_body -> compound_statement .)
    PRIVATE         reduce using rule 179 (fct_body -> compound_statement .)
    PROTECTED       reduce using rule 179 (fct_body -> compound_statement .)
    PUBLIC          reduce using rule 179 (fct_body -> compound_statement .)


state 69

    (234) initializer -> EQUAL . assignment_expression
    (235) initializer -> EQUAL . LCPAREN initializer_list RCPAREN
    (236) initializer -> EQUAL . LCPAREN initializer_list COMMA RCPAREN
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (26) conditional_expression -> . logical_OR_expression
    (27) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (28) logical_OR_expression -> . logical_AND_expression
    (29) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (30) logical_AND_expression -> . inclusive_OR_expression
    (31) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (32) inclusive_OR_expression -> . exclusive_OR_expression
    (33) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (264) operator_function_name -> . OPERATOR operator_name
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LCPAREN         shift and go to state 179
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    LPAREN          shift and go to state 128
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    assignment_expression          shift and go to state 178
    conditional_expression         shift and go to state 135
    unary_expression               shift and go to state 136
    logical_OR_expression          shift and go to state 138
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    cast_expression                shift and go to state 143
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    logical_AND_expression         shift and go to state 148
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    name                           shift and go to state 151
    inclusive_OR_expression        shift and go to state 158
    literal                        shift and go to state 159
    exclusive_OR_expression        shift and go to state 161
    operator_function_name         shift and go to state 32
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171

state 70

    (180) compound_statement -> LCPAREN . statement_list RCPAREN
    (181) compound_statement -> LCPAREN . RCPAREN
    (182) statement_list -> . statement
    (183) statement_list -> . statement_list statement
    (184) statement -> . labeled_statement
    (185) statement -> . expression_statement
    (186) statement -> . compound_statement
    (187) statement -> . selection_statement
    (188) statement -> . iteration_statement
    (189) statement -> . jump_statement
    (190) statement -> . declaration_statement
    (191) statement -> . try_block
    (207) labeled_statement -> . IDENTIFIER COLON statement
    (208) labeled_statement -> . CASE constant_expression COLON statement
    (209) labeled_statement -> . DEFAULT COLON statement
    (218) expression_statement -> . expression SEMICOLON
    (219) expression_statement -> . SEMICOLON
    (180) compound_statement -> . LCPAREN statement_list RCPAREN
    (181) compound_statement -> . LCPAREN RCPAREN
    (197) selection_statement -> . IF LPAREN expression RPAREN statement
    (198) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (199) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (210) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (211) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (212) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (213) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (214) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (215) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (192) jump_statement -> . BREAK SEMICOLON
    (193) jump_statement -> . CONTINUE SEMICOLON
    (194) jump_statement -> . RETURN expression SEMICOLON
    (195) jump_statement -> . RETURN SEMICOLON
    (196) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (220) declaration_statement -> . declaration
    (200) try_block -> . TRY compound_statement handler_list
    (59) expression -> . assignment_expression
    (60) expression -> . expression COMMA assignment_expression
    (221) declaration -> . decl_specifiers declarator_list SEMICOLON
    (222) declaration -> . decl_specifiers SEMICOLON
    (223) declaration -> . declarator_list SEMICOLON
    (224) declaration -> . asm_declaration
    (225) declaration -> . function_definition
    (226) declaration -> . template_declaration
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (147) decl_specifiers -> . decl_specifiers decl_specifier
    (148) decl_specifiers -> . decl_specifier
    (230) declarator_list -> . init_declarator
    (231) declarator_list -> . declarator_list COMMA init_declarator
    (242) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (177) function_definition -> . decl_specifiers declarator fct_body
    (178) function_definition -> . declarator fct_body
    (227) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (26) conditional_expression -> . logical_OR_expression
    (27) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (149) decl_specifier -> . storage_class_specifier
    (150) decl_specifier -> . type_specifier
    (151) decl_specifier -> . TYPEDEF
    (232) init_declarator -> . declarator initializer
    (233) init_declarator -> . declarator
    (253) declarator -> . name
    (254) declarator -> . unary2_operator declarator
    (255) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (256) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (257) declarator -> . declarator LSPAREN RSPAREN
    (258) declarator -> . LPAREN declarator RPAREN
    (28) logical_OR_expression -> . logical_AND_expression
    (29) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (152) storage_class_specifier -> . AUTO
    (153) storage_class_specifier -> . STATIC
    (154) storage_class_specifier -> . EXTERN
    (155) storage_class_specifier -> . VIRTUAL
    (156) type_specifier -> . simple_type_name
    (157) type_specifier -> . class_specifier
    (158) type_specifier -> . enum_specifier
    (159) type_specifier -> . elaborated_type_specifier
    (160) type_specifier -> . CONST
    (161) type_specifier -> . VOLATILE
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (30) logical_AND_expression -> . inclusive_OR_expression
    (31) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (162) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (163) class_specifier -> . class_head LCPAREN RCPAREN
    (17) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (18) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (20) enum_specifier -> . ENUM LCPAREN RCPAREN
    (322) elaborated_type_specifier -> . class_key IDENTIFIER
    (323) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (324) elaborated_type_specifier -> . ENUM enum_name
    (325) elaborated_type_specifier -> . TYPE IDENTIFIER
    (326) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (264) operator_function_name -> . OPERATOR operator_name
    (32) inclusive_OR_expression -> . exclusive_OR_expression
    (33) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (304) class_head -> . class_key base_spec
    (305) class_head -> . class_key
    (306) class_head -> . class_key IDENTIFIER base_spec
    (307) class_head -> . class_key IDENTIFIER
    (328) class_key -> . CLASS
    (329) class_key -> . STRUCT
    (330) class_key -> . UNION
    (331) class_key -> . TEMPLATE
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RCPAREN         shift and go to state 181
    IDENTIFIER      shift and go to state 191
    CASE            shift and go to state 192
    DEFAULT         shift and go to state 193
    SEMICOLON       shift and go to state 195
    LCPAREN         shift and go to state 70
    IF              shift and go to state 196
    SWITCH          shift and go to state 198
    WHILE           shift and go to state 199
    DO              shift and go to state 200
    FOR             shift and go to state 201
    BREAK           shift and go to state 202
    CONTINUE        shift and go to state 203
    RETURN          shift and go to state 204
    GOTO            shift and go to state 205
    TRY             shift and go to state 207
    ASM             shift and go to state 12
    TEMPLATE        shift and go to state 15
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    TYPEDEF         shift and go to state 18
    LPAREN          shift and go to state 197
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    AUTO            shift and go to state 21
    STATIC          shift and go to state 22
    EXTERN          shift and go to state 23
    VIRTUAL         shift and go to state 24
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    THIS            shift and go to state 160
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    ENUM            shift and go to state 47
    TYPE            shift and go to state 49
    OPERATOR        shift and go to state 50
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    CLASS           shift and go to state 51
    STRUCT          shift and go to state 52
    UNION           shift and go to state 53

    statement_list                 shift and go to state 180
    statement                      shift and go to state 182
    labeled_statement              shift and go to state 183
    expression_statement           shift and go to state 184
    compound_statement             shift and go to state 185
    selection_statement            shift and go to state 186
    iteration_statement            shift and go to state 187
    jump_statement                 shift and go to state 188
    declaration_statement          shift and go to state 189
    try_block                      shift and go to state 190
    expression                     shift and go to state 194
    declaration                    shift and go to state 206
    assignment_expression          shift and go to state 208
    decl_specifiers                shift and go to state 5
    declarator_list                shift and go to state 6
    asm_declaration                shift and go to state 7
    function_definition            shift and go to state 8
    template_declaration           shift and go to state 9
    conditional_expression         shift and go to state 135
    unary_expression               shift and go to state 136
    decl_specifier                 shift and go to state 10
    init_declarator                shift and go to state 11
    declarator                     shift and go to state 14
    logical_OR_expression          shift and go to state 138
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    cast_expression                shift and go to state 143
    unary2_operator                shift and go to state 209
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    storage_class_specifier        shift and go to state 16
    type_specifier                 shift and go to state 17
    name                           shift and go to state 210
    logical_AND_expression         shift and go to state 148
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 150
    class_specifier                shift and go to state 26
    enum_specifier                 shift and go to state 27
    elaborated_type_specifier      shift and go to state 28
    operator_function_name         shift and go to state 32
    inclusive_OR_expression        shift and go to state 158
    literal                        shift and go to state 159
    class_head                     shift and go to state 46
    class_key                      shift and go to state 48
    exclusive_OR_expression        shift and go to state 161
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171

state 71

    (227) template_declaration -> TEMPLATE LTEMPLATE . template_argument_list RTEMPLATE declaration
    (228) template_argument_list -> . argument_declaration
    (229) template_argument_list -> . template_argument_list COMMA argument_declaration
    (141) argument_declaration -> . decl_specifiers declarator
    (142) argument_declaration -> . decl_specifiers declarator EQUAL expression
    (143) argument_declaration -> . decl_specifiers abstract_declarator
    (144) argument_declaration -> . decl_specifiers
    (145) argument_declaration -> . decl_specifiers abstract_declarator EQUAL expression
    (146) argument_declaration -> . decl_specifiers EQUAL expression
    (147) decl_specifiers -> . decl_specifiers decl_specifier
    (148) decl_specifiers -> . decl_specifier
    (149) decl_specifier -> . storage_class_specifier
    (150) decl_specifier -> . type_specifier
    (151) decl_specifier -> . TYPEDEF
    (152) storage_class_specifier -> . AUTO
    (153) storage_class_specifier -> . STATIC
    (154) storage_class_specifier -> . EXTERN
    (155) storage_class_specifier -> . VIRTUAL
    (156) type_specifier -> . simple_type_name
    (157) type_specifier -> . class_specifier
    (158) type_specifier -> . enum_specifier
    (159) type_specifier -> . elaborated_type_specifier
    (160) type_specifier -> . CONST
    (161) type_specifier -> . VOLATILE
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (162) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (163) class_specifier -> . class_head LCPAREN RCPAREN
    (17) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (18) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (20) enum_specifier -> . ENUM LCPAREN RCPAREN
    (322) elaborated_type_specifier -> . class_key IDENTIFIER
    (323) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (324) elaborated_type_specifier -> . ENUM enum_name
    (325) elaborated_type_specifier -> . TYPE IDENTIFIER
    (326) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (304) class_head -> . class_key base_spec
    (305) class_head -> . class_key
    (306) class_head -> . class_key IDENTIFIER base_spec
    (307) class_head -> . class_key IDENTIFIER
    (328) class_key -> . CLASS
    (329) class_key -> . STRUCT
    (330) class_key -> . UNION
    (331) class_key -> . TEMPLATE

    TYPEDEF         shift and go to state 18
    AUTO            shift and go to state 21
    STATIC          shift and go to state 22
    EXTERN          shift and go to state 23
    VIRTUAL         shift and go to state 24
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    ENUM            shift and go to state 47
    TYPE            shift and go to state 49
    CLASS           shift and go to state 51
    STRUCT          shift and go to state 52
    UNION           shift and go to state 53
    TEMPLATE        shift and go to state 59

    template_argument_list         shift and go to state 211
    argument_declaration           shift and go to state 212
    decl_specifiers                shift and go to state 137
    decl_specifier                 shift and go to state 10
    storage_class_specifier        shift and go to state 16
    type_specifier                 shift and go to state 17
    simple_type_name               shift and go to state 25
    class_specifier                shift and go to state 26
    enum_specifier                 shift and go to state 27
    elaborated_type_specifier      shift and go to state 28
    class_head                     shift and go to state 46
    class_key                      shift and go to state 48

state 72

    (254) declarator -> unary2_operator declarator .
    (255) declarator -> declarator . LPAREN argument_declaration_list RPAREN
    (256) declarator -> declarator . LSPAREN constant_expression RSPAREN
    (257) declarator -> declarator . LSPAREN RSPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LSPAREN resolved as shift
    EQUAL           reduce using rule 254 (declarator -> unary2_operator declarator .)
    LCPAREN         reduce using rule 254 (declarator -> unary2_operator declarator .)
    SEMICOLON       reduce using rule 254 (declarator -> unary2_operator declarator .)
    COMMA           reduce using rule 254 (declarator -> unary2_operator declarator .)
    RPAREN          reduce using rule 254 (declarator -> unary2_operator declarator .)
    RTEMPLATE       reduce using rule 254 (declarator -> unary2_operator declarator .)
    LPAREN          shift and go to state 126
    LSPAREN         shift and go to state 67

  ! LPAREN          [ reduce using rule 254 (declarator -> unary2_operator declarator .) ]
  ! LSPAREN         [ reduce using rule 254 (declarator -> unary2_operator declarator .) ]


state 73

    (261) name -> BNOP IDENTIFIER .

    LPAREN          reduce using rule 261 (name -> BNOP IDENTIFIER .)
    LSPAREN         reduce using rule 261 (name -> BNOP IDENTIFIER .)
    EQUAL           reduce using rule 261 (name -> BNOP IDENTIFIER .)
    LCPAREN         reduce using rule 261 (name -> BNOP IDENTIFIER .)
    SEMICOLON       reduce using rule 261 (name -> BNOP IDENTIFIER .)
    COMMA           reduce using rule 261 (name -> BNOP IDENTIFIER .)
    RPAREN          reduce using rule 261 (name -> BNOP IDENTIFIER .)
    DOT             reduce using rule 261 (name -> BNOP IDENTIFIER .)
    ARROW           reduce using rule 261 (name -> BNOP IDENTIFIER .)
    DPLUSOP         reduce using rule 261 (name -> BNOP IDENTIFIER .)
    DMINUSOP        reduce using rule 261 (name -> BNOP IDENTIFIER .)
    LTEMPLATE       reduce using rule 261 (name -> BNOP IDENTIFIER .)
    MULTEQOP        reduce using rule 261 (name -> BNOP IDENTIFIER .)
    DIVEQOP         reduce using rule 261 (name -> BNOP IDENTIFIER .)
    MODEQOP         reduce using rule 261 (name -> BNOP IDENTIFIER .)
    PLUSEQOP        reduce using rule 261 (name -> BNOP IDENTIFIER .)
    MINUSEQOP       reduce using rule 261 (name -> BNOP IDENTIFIER .)
    LSHIFTEQOP      reduce using rule 261 (name -> BNOP IDENTIFIER .)
    RSHIFTEQOP      reduce using rule 261 (name -> BNOP IDENTIFIER .)
    BANDEQOP        reduce using rule 261 (name -> BNOP IDENTIFIER .)
    BOREQOP         reduce using rule 261 (name -> BNOP IDENTIFIER .)
    DOTSTAR         reduce using rule 261 (name -> BNOP IDENTIFIER .)
    ARROWSTAR       reduce using rule 261 (name -> BNOP IDENTIFIER .)
    MULTOP          reduce using rule 261 (name -> BNOP IDENTIFIER .)
    DIVOP           reduce using rule 261 (name -> BNOP IDENTIFIER .)
    MODOP           reduce using rule 261 (name -> BNOP IDENTIFIER .)
    PLUSOP          reduce using rule 261 (name -> BNOP IDENTIFIER .)
    MINUSOP         reduce using rule 261 (name -> BNOP IDENTIFIER .)
    LSHIFT          reduce using rule 261 (name -> BNOP IDENTIFIER .)
    RSHIFT          reduce using rule 261 (name -> BNOP IDENTIFIER .)
    LTCOMP          reduce using rule 261 (name -> BNOP IDENTIFIER .)
    GTCOMP          reduce using rule 261 (name -> BNOP IDENTIFIER .)
    LTECOMP         reduce using rule 261 (name -> BNOP IDENTIFIER .)
    GTECOMP         reduce using rule 261 (name -> BNOP IDENTIFIER .)
    EQCOMP          reduce using rule 261 (name -> BNOP IDENTIFIER .)
    NEQCOMP         reduce using rule 261 (name -> BNOP IDENTIFIER .)
    BANDOP          reduce using rule 261 (name -> BNOP IDENTIFIER .)
    XOROP           reduce using rule 261 (name -> BNOP IDENTIFIER .)
    OROP            reduce using rule 261 (name -> BNOP IDENTIFIER .)
    ANDOP           reduce using rule 261 (name -> BNOP IDENTIFIER .)
    QUESMARK        reduce using rule 261 (name -> BNOP IDENTIFIER .)
    RSPAREN         reduce using rule 261 (name -> BNOP IDENTIFIER .)
    RTEMPLATE       reduce using rule 261 (name -> BNOP IDENTIFIER .)
    RCPAREN         reduce using rule 261 (name -> BNOP IDENTIFIER .)
    COLON           reduce using rule 261 (name -> BNOP IDENTIFIER .)


state 74

    (162) class_specifier -> class_head LCPAREN . member_list RCPAREN
    (163) class_specifier -> class_head LCPAREN . RCPAREN
    (164) member_list -> . member_access_list
    (165) member_list -> . access_list
    (166) member_list -> . member_list access_list
    (169) member_access_list -> . member_declaration member_access_list
    (170) member_access_list -> . member_declaration
    (167) access_list -> . access_specifier COLON member_access_list
    (168) access_list -> . access_specifier COLON
    (171) member_declaration -> . decl_specifiers member_declarator_list SEMICOLON
    (172) member_declaration -> . member_declarator_list SEMICOLON
    (173) member_declaration -> . decl_specifiers SEMICOLON
    (174) member_declaration -> . SEMICOLON
    (175) member_declaration -> . function_definition SEMICOLON
    (176) member_declaration -> . function_definition
    (319) access_specifier -> . PRIVATE
    (320) access_specifier -> . PROTECTED
    (321) access_specifier -> . PUBLIC
    (147) decl_specifiers -> . decl_specifiers decl_specifier
    (148) decl_specifiers -> . decl_specifier
    (247) member_declarator_list -> . member_declarator
    (248) member_declarator_list -> . member_declarator_list COMMA member_declarator
    (177) function_definition -> . decl_specifiers declarator fct_body
    (178) function_definition -> . declarator fct_body
    (149) decl_specifier -> . storage_class_specifier
    (150) decl_specifier -> . type_specifier
    (151) decl_specifier -> . TYPEDEF
    (249) member_declarator -> . declarator pure_specifier
    (250) member_declarator -> . declarator
    (251) member_declarator -> . IDENTIFIER COLON constant_expression
    (252) member_declarator -> . COLON constant_expression
    (253) declarator -> . name
    (254) declarator -> . unary2_operator declarator
    (255) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (256) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (257) declarator -> . declarator LSPAREN RSPAREN
    (258) declarator -> . LPAREN declarator RPAREN
    (152) storage_class_specifier -> . AUTO
    (153) storage_class_specifier -> . STATIC
    (154) storage_class_specifier -> . EXTERN
    (155) storage_class_specifier -> . VIRTUAL
    (156) type_specifier -> . simple_type_name
    (157) type_specifier -> . class_specifier
    (158) type_specifier -> . enum_specifier
    (159) type_specifier -> . elaborated_type_specifier
    (160) type_specifier -> . CONST
    (161) type_specifier -> . VOLATILE
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (162) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (163) class_specifier -> . class_head LCPAREN RCPAREN
    (17) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (18) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (20) enum_specifier -> . ENUM LCPAREN RCPAREN
    (322) elaborated_type_specifier -> . class_key IDENTIFIER
    (323) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (324) elaborated_type_specifier -> . ENUM enum_name
    (325) elaborated_type_specifier -> . TYPE IDENTIFIER
    (326) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (264) operator_function_name -> . OPERATOR operator_name
    (304) class_head -> . class_key base_spec
    (305) class_head -> . class_key
    (306) class_head -> . class_key IDENTIFIER base_spec
    (307) class_head -> . class_key IDENTIFIER
    (328) class_key -> . CLASS
    (329) class_key -> . STRUCT
    (330) class_key -> . UNION
    (331) class_key -> . TEMPLATE

    RCPAREN         shift and go to state 214
    SEMICOLON       shift and go to state 222
    PRIVATE         shift and go to state 224
    PROTECTED       shift and go to state 225
    PUBLIC          shift and go to state 226
    TYPEDEF         shift and go to state 18
    IDENTIFIER      shift and go to state 229
    COLON           shift and go to state 219
    LPAREN          shift and go to state 13
    AUTO            shift and go to state 21
    STATIC          shift and go to state 22
    EXTERN          shift and go to state 23
    VIRTUAL         shift and go to state 24
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    BNOP            shift and go to state 33
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    ENUM            shift and go to state 47
    TYPE            shift and go to state 49
    OPERATOR        shift and go to state 50
    CLASS           shift and go to state 51
    STRUCT          shift and go to state 52
    UNION           shift and go to state 53
    TEMPLATE        shift and go to state 59

    class_head                     shift and go to state 46
    member_list                    shift and go to state 213
    member_access_list             shift and go to state 215
    access_list                    shift and go to state 216
    member_declaration             shift and go to state 217
    access_specifier               shift and go to state 218
    decl_specifiers                shift and go to state 220
    member_declarator_list         shift and go to state 221
    function_definition            shift and go to state 223
    decl_specifier                 shift and go to state 10
    member_declarator              shift and go to state 227
    declarator                     shift and go to state 228
    storage_class_specifier        shift and go to state 16
    type_specifier                 shift and go to state 17
    name                           shift and go to state 19
    unary2_operator                shift and go to state 20
    simple_type_name               shift and go to state 25
    class_specifier                shift and go to state 26
    enum_specifier                 shift and go to state 27
    elaborated_type_specifier      shift and go to state 28
    operator_function_name         shift and go to state 32
    class_key                      shift and go to state 48

state 75

    (17) enum_specifier -> ENUM IDENTIFIER . LCPAREN enum_list RCPAREN
    (19) enum_specifier -> ENUM IDENTIFIER . LCPAREN RCPAREN
    (327) enum_name -> IDENTIFIER .

    LCPAREN         shift and go to state 230
    SEMICOLON       reduce using rule 327 (enum_name -> IDENTIFIER .)
    TYPEDEF         reduce using rule 327 (enum_name -> IDENTIFIER .)
    LPAREN          reduce using rule 327 (enum_name -> IDENTIFIER .)
    AUTO            reduce using rule 327 (enum_name -> IDENTIFIER .)
    STATIC          reduce using rule 327 (enum_name -> IDENTIFIER .)
    EXTERN          reduce using rule 327 (enum_name -> IDENTIFIER .)
    VIRTUAL         reduce using rule 327 (enum_name -> IDENTIFIER .)
    CONST           reduce using rule 327 (enum_name -> IDENTIFIER .)
    VOLATILE        reduce using rule 327 (enum_name -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 327 (enum_name -> IDENTIFIER .)
    BNOP            reduce using rule 327 (enum_name -> IDENTIFIER .)
    MULTOP          reduce using rule 327 (enum_name -> IDENTIFIER .)
    BANDOP          reduce using rule 327 (enum_name -> IDENTIFIER .)
    CHAR            reduce using rule 327 (enum_name -> IDENTIFIER .)
    SHORT           reduce using rule 327 (enum_name -> IDENTIFIER .)
    INT             reduce using rule 327 (enum_name -> IDENTIFIER .)
    LONG            reduce using rule 327 (enum_name -> IDENTIFIER .)
    SIGNED          reduce using rule 327 (enum_name -> IDENTIFIER .)
    UNSIGNED        reduce using rule 327 (enum_name -> IDENTIFIER .)
    FLOAT           reduce using rule 327 (enum_name -> IDENTIFIER .)
    DOUBLE          reduce using rule 327 (enum_name -> IDENTIFIER .)
    VOID            reduce using rule 327 (enum_name -> IDENTIFIER .)
    STRING          reduce using rule 327 (enum_name -> IDENTIFIER .)
    ENUM            reduce using rule 327 (enum_name -> IDENTIFIER .)
    TYPE            reduce using rule 327 (enum_name -> IDENTIFIER .)
    OPERATOR        reduce using rule 327 (enum_name -> IDENTIFIER .)
    CLASS           reduce using rule 327 (enum_name -> IDENTIFIER .)
    STRUCT          reduce using rule 327 (enum_name -> IDENTIFIER .)
    UNION           reduce using rule 327 (enum_name -> IDENTIFIER .)
    TEMPLATE        reduce using rule 327 (enum_name -> IDENTIFIER .)
    EQUAL           reduce using rule 327 (enum_name -> IDENTIFIER .)
    LSPAREN         reduce using rule 327 (enum_name -> IDENTIFIER .)
    COMMA           reduce using rule 327 (enum_name -> IDENTIFIER .)
    RPAREN          reduce using rule 327 (enum_name -> IDENTIFIER .)
    RTEMPLATE       reduce using rule 327 (enum_name -> IDENTIFIER .)
    COLON           reduce using rule 327 (enum_name -> IDENTIFIER .)
    MULTEQOP        reduce using rule 327 (enum_name -> IDENTIFIER .)
    DIVEQOP         reduce using rule 327 (enum_name -> IDENTIFIER .)
    MODEQOP         reduce using rule 327 (enum_name -> IDENTIFIER .)
    PLUSEQOP        reduce using rule 327 (enum_name -> IDENTIFIER .)
    MINUSEQOP       reduce using rule 327 (enum_name -> IDENTIFIER .)
    LSHIFTEQOP      reduce using rule 327 (enum_name -> IDENTIFIER .)
    RSHIFTEQOP      reduce using rule 327 (enum_name -> IDENTIFIER .)
    BANDEQOP        reduce using rule 327 (enum_name -> IDENTIFIER .)
    BOREQOP         reduce using rule 327 (enum_name -> IDENTIFIER .)
    DOTSTAR         reduce using rule 327 (enum_name -> IDENTIFIER .)
    ARROWSTAR       reduce using rule 327 (enum_name -> IDENTIFIER .)
    DIVOP           reduce using rule 327 (enum_name -> IDENTIFIER .)
    MODOP           reduce using rule 327 (enum_name -> IDENTIFIER .)
    PLUSOP          reduce using rule 327 (enum_name -> IDENTIFIER .)
    MINUSOP         reduce using rule 327 (enum_name -> IDENTIFIER .)
    LSHIFT          reduce using rule 327 (enum_name -> IDENTIFIER .)
    RSHIFT          reduce using rule 327 (enum_name -> IDENTIFIER .)
    LTCOMP          reduce using rule 327 (enum_name -> IDENTIFIER .)
    GTCOMP          reduce using rule 327 (enum_name -> IDENTIFIER .)
    LTECOMP         reduce using rule 327 (enum_name -> IDENTIFIER .)
    GTECOMP         reduce using rule 327 (enum_name -> IDENTIFIER .)
    EQCOMP          reduce using rule 327 (enum_name -> IDENTIFIER .)
    NEQCOMP         reduce using rule 327 (enum_name -> IDENTIFIER .)
    XOROP           reduce using rule 327 (enum_name -> IDENTIFIER .)
    OROP            reduce using rule 327 (enum_name -> IDENTIFIER .)
    ANDOP           reduce using rule 327 (enum_name -> IDENTIFIER .)
    QUESMARK        reduce using rule 327 (enum_name -> IDENTIFIER .)
    RSPAREN         reduce using rule 327 (enum_name -> IDENTIFIER .)
    RCPAREN         reduce using rule 327 (enum_name -> IDENTIFIER .)


state 76

    (18) enum_specifier -> ENUM LCPAREN . enum_list RCPAREN
    (20) enum_specifier -> ENUM LCPAREN . RCPAREN
    (21) enum_list -> . enumerator
    (22) enum_list -> . enum_list COMMA enumerator
    (23) enumerator -> . IDENTIFIER
    (24) enumerator -> . IDENTIFIER EQUAL constant_expression

    RCPAREN         shift and go to state 232
    IDENTIFIER      shift and go to state 234

    enum_list                      shift and go to state 231
    enumerator                     shift and go to state 233

state 77

    (324) elaborated_type_specifier -> ENUM enum_name .

    SEMICOLON       reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)
    TYPEDEF         reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)
    LPAREN          reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)
    AUTO            reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)
    STATIC          reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)
    EXTERN          reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)
    VIRTUAL         reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)
    CONST           reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)
    VOLATILE        reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)
    IDENTIFIER      reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)
    BNOP            reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)
    MULTOP          reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)
    BANDOP          reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)
    CHAR            reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)
    SHORT           reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)
    INT             reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)
    LONG            reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)
    SIGNED          reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)
    UNSIGNED        reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)
    FLOAT           reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)
    DOUBLE          reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)
    VOID            reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)
    STRING          reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)
    ENUM            reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)
    TYPE            reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)
    OPERATOR        reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)
    CLASS           reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)
    STRUCT          reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)
    UNION           reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)
    TEMPLATE        reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)
    EQUAL           reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)
    LSPAREN         reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)
    COMMA           reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)
    RPAREN          reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)
    RTEMPLATE       reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)
    COLON           reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)
    MULTEQOP        reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)
    DIVEQOP         reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)
    MODEQOP         reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)
    PLUSEQOP        reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)
    MINUSEQOP       reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)
    LSHIFTEQOP      reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)
    RSHIFTEQOP      reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)
    BANDEQOP        reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)
    BOREQOP         reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)
    DOTSTAR         reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)
    ARROWSTAR       reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)
    DIVOP           reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)
    MODOP           reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)
    PLUSOP          reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)
    MINUSOP         reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)
    LSHIFT          reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)
    RSHIFT          reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)
    LTCOMP          reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)
    GTCOMP          reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)
    LTECOMP         reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)
    GTECOMP         reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)
    EQCOMP          reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)
    NEQCOMP         reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)
    XOROP           reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)
    OROP            reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)
    ANDOP           reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)
    QUESMARK        reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)
    RSPAREN         reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)
    RCPAREN         reduce using rule 324 (elaborated_type_specifier -> ENUM enum_name .)


state 78

    (322) elaborated_type_specifier -> class_key IDENTIFIER .
    (323) elaborated_type_specifier -> class_key IDENTIFIER . template_class_name
    (306) class_head -> class_key IDENTIFIER . base_spec
    (307) class_head -> class_key IDENTIFIER .
    (12) template_class_name -> . LTEMPLATE template_arg_list RTEMPLATE
    (308) base_spec -> . COLON base_list

  ! shift/reduce conflict for COLON resolved as shift
    SEMICOLON       reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .)
    TYPEDEF         reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .)
    LPAREN          reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .)
    AUTO            reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .)
    STATIC          reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .)
    EXTERN          reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .)
    VIRTUAL         reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .)
    CONST           reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .)
    VOLATILE        reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .)
    IDENTIFIER      reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .)
    BNOP            reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .)
    MULTOP          reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .)
    BANDOP          reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .)
    CHAR            reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .)
    SHORT           reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .)
    INT             reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .)
    LONG            reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .)
    SIGNED          reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .)
    UNSIGNED        reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .)
    FLOAT           reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .)
    DOUBLE          reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .)
    VOID            reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .)
    STRING          reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .)
    ENUM            reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .)
    TYPE            reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .)
    OPERATOR        reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .)
    CLASS           reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .)
    STRUCT          reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .)
    UNION           reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .)
    TEMPLATE        reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .)
    EQUAL           reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .)
    LSPAREN         reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .)
    COMMA           reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .)
    RPAREN          reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .)
    RTEMPLATE       reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .)
    MULTEQOP        reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .)
    DIVEQOP         reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .)
    MODEQOP         reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .)
    PLUSEQOP        reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .)
    MINUSEQOP       reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .)
    LSHIFTEQOP      reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .)
    RSHIFTEQOP      reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .)
    BANDEQOP        reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .)
    BOREQOP         reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .)
    DOTSTAR         reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .)
    ARROWSTAR       reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .)
    DIVOP           reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .)
    MODOP           reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .)
    PLUSOP          reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .)
    MINUSOP         reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .)
    LSHIFT          reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .)
    RSHIFT          reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .)
    LTCOMP          reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .)
    GTCOMP          reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .)
    LTECOMP         reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .)
    GTECOMP         reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .)
    EQCOMP          reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .)
    NEQCOMP         reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .)
    XOROP           reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .)
    OROP            reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .)
    ANDOP           reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .)
    QUESMARK        reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .)
    RSPAREN         reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .)
    RCPAREN         reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .)
    LCPAREN         reduce using rule 307 (class_head -> class_key IDENTIFIER .)
    LTEMPLATE       shift and go to state 237
    COLON           shift and go to state 80

  ! COLON           [ reduce using rule 322 (elaborated_type_specifier -> class_key IDENTIFIER .) ]

    template_class_name            shift and go to state 235
    base_spec                      shift and go to state 236

state 79

    (304) class_head -> class_key base_spec .

    LCPAREN         reduce using rule 304 (class_head -> class_key base_spec .)


state 80

    (308) base_spec -> COLON . base_list
    (309) base_list -> . base_specifier
    (310) base_list -> . base_list COMMA base_specifier
    (311) base_specifier -> . class_key IDENTIFIER
    (312) base_specifier -> . access_specifier class_key IDENTIFIER
    (313) base_specifier -> . class_key IDENTIFIER template_class_name
    (314) base_specifier -> . access_specifier class_key IDENTIFIER template_class_name
    (315) base_specifier -> . IDENTIFIER
    (316) base_specifier -> . access_specifier IDENTIFIER
    (317) base_specifier -> . IDENTIFIER template_class_name
    (318) base_specifier -> . access_specifier IDENTIFIER template_class_name
    (328) class_key -> . CLASS
    (329) class_key -> . STRUCT
    (330) class_key -> . UNION
    (331) class_key -> . TEMPLATE
    (319) access_specifier -> . PRIVATE
    (320) access_specifier -> . PROTECTED
    (321) access_specifier -> . PUBLIC

    IDENTIFIER      shift and go to state 241
    CLASS           shift and go to state 51
    STRUCT          shift and go to state 52
    UNION           shift and go to state 53
    TEMPLATE        shift and go to state 59
    PRIVATE         shift and go to state 224
    PROTECTED       shift and go to state 225
    PUBLIC          shift and go to state 226

    base_list                      shift and go to state 238
    base_specifier                 shift and go to state 239
    class_key                      shift and go to state 240
    access_specifier               shift and go to state 242

state 81

    (325) elaborated_type_specifier -> TYPE IDENTIFIER .
    (326) elaborated_type_specifier -> TYPE IDENTIFIER . template_class_name
    (12) template_class_name -> . LTEMPLATE template_arg_list RTEMPLATE

    SEMICOLON       reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    TYPEDEF         reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    LPAREN          reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    AUTO            reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    STATIC          reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    EXTERN          reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    VIRTUAL         reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    CONST           reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    VOLATILE        reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    IDENTIFIER      reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    BNOP            reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    MULTOP          reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    BANDOP          reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    CHAR            reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    SHORT           reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    INT             reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    LONG            reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    SIGNED          reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    UNSIGNED        reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    FLOAT           reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    DOUBLE          reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    VOID            reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    STRING          reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    ENUM            reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    TYPE            reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    OPERATOR        reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    CLASS           reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    STRUCT          reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    UNION           reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    TEMPLATE        reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    EQUAL           reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    LSPAREN         reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    COMMA           reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    RPAREN          reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    RTEMPLATE       reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    COLON           reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    MULTEQOP        reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    DIVEQOP         reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    MODEQOP         reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    PLUSEQOP        reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    MINUSEQOP       reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    LSHIFTEQOP      reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    RSHIFTEQOP      reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    BANDEQOP        reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    BOREQOP         reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    DOTSTAR         reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    ARROWSTAR       reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    DIVOP           reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    MODOP           reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    PLUSOP          reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    MINUSOP         reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    LSHIFT          reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    RSHIFT          reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    LTCOMP          reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    GTCOMP          reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    LTECOMP         reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    GTECOMP         reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    EQCOMP          reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    NEQCOMP         reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    XOROP           reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    OROP            reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    ANDOP           reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    QUESMARK        reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    RSPAREN         reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    RCPAREN         reduce using rule 325 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    LTEMPLATE       shift and go to state 237

    template_class_name            shift and go to state 243

state 82

    (264) operator_function_name -> OPERATOR operator_name .

    LPAREN          reduce using rule 264 (operator_function_name -> OPERATOR operator_name .)
    LSPAREN         reduce using rule 264 (operator_function_name -> OPERATOR operator_name .)
    EQUAL           reduce using rule 264 (operator_function_name -> OPERATOR operator_name .)
    LCPAREN         reduce using rule 264 (operator_function_name -> OPERATOR operator_name .)
    SEMICOLON       reduce using rule 264 (operator_function_name -> OPERATOR operator_name .)
    COMMA           reduce using rule 264 (operator_function_name -> OPERATOR operator_name .)
    RPAREN          reduce using rule 264 (operator_function_name -> OPERATOR operator_name .)
    DOT             reduce using rule 264 (operator_function_name -> OPERATOR operator_name .)
    ARROW           reduce using rule 264 (operator_function_name -> OPERATOR operator_name .)
    DPLUSOP         reduce using rule 264 (operator_function_name -> OPERATOR operator_name .)
    DMINUSOP        reduce using rule 264 (operator_function_name -> OPERATOR operator_name .)
    LTEMPLATE       reduce using rule 264 (operator_function_name -> OPERATOR operator_name .)
    MULTEQOP        reduce using rule 264 (operator_function_name -> OPERATOR operator_name .)
    DIVEQOP         reduce using rule 264 (operator_function_name -> OPERATOR operator_name .)
    MODEQOP         reduce using rule 264 (operator_function_name -> OPERATOR operator_name .)
    PLUSEQOP        reduce using rule 264 (operator_function_name -> OPERATOR operator_name .)
    MINUSEQOP       reduce using rule 264 (operator_function_name -> OPERATOR operator_name .)
    LSHIFTEQOP      reduce using rule 264 (operator_function_name -> OPERATOR operator_name .)
    RSHIFTEQOP      reduce using rule 264 (operator_function_name -> OPERATOR operator_name .)
    BANDEQOP        reduce using rule 264 (operator_function_name -> OPERATOR operator_name .)
    BOREQOP         reduce using rule 264 (operator_function_name -> OPERATOR operator_name .)
    DOTSTAR         reduce using rule 264 (operator_function_name -> OPERATOR operator_name .)
    ARROWSTAR       reduce using rule 264 (operator_function_name -> OPERATOR operator_name .)
    MULTOP          reduce using rule 264 (operator_function_name -> OPERATOR operator_name .)
    DIVOP           reduce using rule 264 (operator_function_name -> OPERATOR operator_name .)
    MODOP           reduce using rule 264 (operator_function_name -> OPERATOR operator_name .)
    PLUSOP          reduce using rule 264 (operator_function_name -> OPERATOR operator_name .)
    MINUSOP         reduce using rule 264 (operator_function_name -> OPERATOR operator_name .)
    LSHIFT          reduce using rule 264 (operator_function_name -> OPERATOR operator_name .)
    RSHIFT          reduce using rule 264 (operator_function_name -> OPERATOR operator_name .)
    LTCOMP          reduce using rule 264 (operator_function_name -> OPERATOR operator_name .)
    GTCOMP          reduce using rule 264 (operator_function_name -> OPERATOR operator_name .)
    LTECOMP         reduce using rule 264 (operator_function_name -> OPERATOR operator_name .)
    GTECOMP         reduce using rule 264 (operator_function_name -> OPERATOR operator_name .)
    EQCOMP          reduce using rule 264 (operator_function_name -> OPERATOR operator_name .)
    NEQCOMP         reduce using rule 264 (operator_function_name -> OPERATOR operator_name .)
    BANDOP          reduce using rule 264 (operator_function_name -> OPERATOR operator_name .)
    XOROP           reduce using rule 264 (operator_function_name -> OPERATOR operator_name .)
    OROP            reduce using rule 264 (operator_function_name -> OPERATOR operator_name .)
    ANDOP           reduce using rule 264 (operator_function_name -> OPERATOR operator_name .)
    QUESMARK        reduce using rule 264 (operator_function_name -> OPERATOR operator_name .)
    RSPAREN         reduce using rule 264 (operator_function_name -> OPERATOR operator_name .)
    RTEMPLATE       reduce using rule 264 (operator_function_name -> OPERATOR operator_name .)
    RCPAREN         reduce using rule 264 (operator_function_name -> OPERATOR operator_name .)
    COLON           reduce using rule 264 (operator_function_name -> OPERATOR operator_name .)


state 83

    (265) operator_name -> NEW .

    LPAREN          reduce using rule 265 (operator_name -> NEW .)
    LSPAREN         reduce using rule 265 (operator_name -> NEW .)
    EQUAL           reduce using rule 265 (operator_name -> NEW .)
    LCPAREN         reduce using rule 265 (operator_name -> NEW .)
    SEMICOLON       reduce using rule 265 (operator_name -> NEW .)
    COMMA           reduce using rule 265 (operator_name -> NEW .)
    RPAREN          reduce using rule 265 (operator_name -> NEW .)
    DOT             reduce using rule 265 (operator_name -> NEW .)
    ARROW           reduce using rule 265 (operator_name -> NEW .)
    DPLUSOP         reduce using rule 265 (operator_name -> NEW .)
    DMINUSOP        reduce using rule 265 (operator_name -> NEW .)
    LTEMPLATE       reduce using rule 265 (operator_name -> NEW .)
    MULTEQOP        reduce using rule 265 (operator_name -> NEW .)
    DIVEQOP         reduce using rule 265 (operator_name -> NEW .)
    MODEQOP         reduce using rule 265 (operator_name -> NEW .)
    PLUSEQOP        reduce using rule 265 (operator_name -> NEW .)
    MINUSEQOP       reduce using rule 265 (operator_name -> NEW .)
    LSHIFTEQOP      reduce using rule 265 (operator_name -> NEW .)
    RSHIFTEQOP      reduce using rule 265 (operator_name -> NEW .)
    BANDEQOP        reduce using rule 265 (operator_name -> NEW .)
    BOREQOP         reduce using rule 265 (operator_name -> NEW .)
    DOTSTAR         reduce using rule 265 (operator_name -> NEW .)
    ARROWSTAR       reduce using rule 265 (operator_name -> NEW .)
    MULTOP          reduce using rule 265 (operator_name -> NEW .)
    DIVOP           reduce using rule 265 (operator_name -> NEW .)
    MODOP           reduce using rule 265 (operator_name -> NEW .)
    PLUSOP          reduce using rule 265 (operator_name -> NEW .)
    MINUSOP         reduce using rule 265 (operator_name -> NEW .)
    LSHIFT          reduce using rule 265 (operator_name -> NEW .)
    RSHIFT          reduce using rule 265 (operator_name -> NEW .)
    LTCOMP          reduce using rule 265 (operator_name -> NEW .)
    GTCOMP          reduce using rule 265 (operator_name -> NEW .)
    LTECOMP         reduce using rule 265 (operator_name -> NEW .)
    GTECOMP         reduce using rule 265 (operator_name -> NEW .)
    EQCOMP          reduce using rule 265 (operator_name -> NEW .)
    NEQCOMP         reduce using rule 265 (operator_name -> NEW .)
    BANDOP          reduce using rule 265 (operator_name -> NEW .)
    XOROP           reduce using rule 265 (operator_name -> NEW .)
    OROP            reduce using rule 265 (operator_name -> NEW .)
    ANDOP           reduce using rule 265 (operator_name -> NEW .)
    QUESMARK        reduce using rule 265 (operator_name -> NEW .)
    RSPAREN         reduce using rule 265 (operator_name -> NEW .)
    RTEMPLATE       reduce using rule 265 (operator_name -> NEW .)
    RCPAREN         reduce using rule 265 (operator_name -> NEW .)
    COLON           reduce using rule 265 (operator_name -> NEW .)


state 84

    (266) operator_name -> DELETE .

    LPAREN          reduce using rule 266 (operator_name -> DELETE .)
    LSPAREN         reduce using rule 266 (operator_name -> DELETE .)
    EQUAL           reduce using rule 266 (operator_name -> DELETE .)
    LCPAREN         reduce using rule 266 (operator_name -> DELETE .)
    SEMICOLON       reduce using rule 266 (operator_name -> DELETE .)
    COMMA           reduce using rule 266 (operator_name -> DELETE .)
    RPAREN          reduce using rule 266 (operator_name -> DELETE .)
    DOT             reduce using rule 266 (operator_name -> DELETE .)
    ARROW           reduce using rule 266 (operator_name -> DELETE .)
    DPLUSOP         reduce using rule 266 (operator_name -> DELETE .)
    DMINUSOP        reduce using rule 266 (operator_name -> DELETE .)
    LTEMPLATE       reduce using rule 266 (operator_name -> DELETE .)
    MULTEQOP        reduce using rule 266 (operator_name -> DELETE .)
    DIVEQOP         reduce using rule 266 (operator_name -> DELETE .)
    MODEQOP         reduce using rule 266 (operator_name -> DELETE .)
    PLUSEQOP        reduce using rule 266 (operator_name -> DELETE .)
    MINUSEQOP       reduce using rule 266 (operator_name -> DELETE .)
    LSHIFTEQOP      reduce using rule 266 (operator_name -> DELETE .)
    RSHIFTEQOP      reduce using rule 266 (operator_name -> DELETE .)
    BANDEQOP        reduce using rule 266 (operator_name -> DELETE .)
    BOREQOP         reduce using rule 266 (operator_name -> DELETE .)
    DOTSTAR         reduce using rule 266 (operator_name -> DELETE .)
    ARROWSTAR       reduce using rule 266 (operator_name -> DELETE .)
    MULTOP          reduce using rule 266 (operator_name -> DELETE .)
    DIVOP           reduce using rule 266 (operator_name -> DELETE .)
    MODOP           reduce using rule 266 (operator_name -> DELETE .)
    PLUSOP          reduce using rule 266 (operator_name -> DELETE .)
    MINUSOP         reduce using rule 266 (operator_name -> DELETE .)
    LSHIFT          reduce using rule 266 (operator_name -> DELETE .)
    RSHIFT          reduce using rule 266 (operator_name -> DELETE .)
    LTCOMP          reduce using rule 266 (operator_name -> DELETE .)
    GTCOMP          reduce using rule 266 (operator_name -> DELETE .)
    LTECOMP         reduce using rule 266 (operator_name -> DELETE .)
    GTECOMP         reduce using rule 266 (operator_name -> DELETE .)
    EQCOMP          reduce using rule 266 (operator_name -> DELETE .)
    NEQCOMP         reduce using rule 266 (operator_name -> DELETE .)
    BANDOP          reduce using rule 266 (operator_name -> DELETE .)
    XOROP           reduce using rule 266 (operator_name -> DELETE .)
    OROP            reduce using rule 266 (operator_name -> DELETE .)
    ANDOP           reduce using rule 266 (operator_name -> DELETE .)
    QUESMARK        reduce using rule 266 (operator_name -> DELETE .)
    RSPAREN         reduce using rule 266 (operator_name -> DELETE .)
    RTEMPLATE       reduce using rule 266 (operator_name -> DELETE .)
    RCPAREN         reduce using rule 266 (operator_name -> DELETE .)
    COLON           reduce using rule 266 (operator_name -> DELETE .)


state 85

    (267) operator_name -> PLUSOP .

    LPAREN          reduce using rule 267 (operator_name -> PLUSOP .)
    LSPAREN         reduce using rule 267 (operator_name -> PLUSOP .)
    EQUAL           reduce using rule 267 (operator_name -> PLUSOP .)
    LCPAREN         reduce using rule 267 (operator_name -> PLUSOP .)
    SEMICOLON       reduce using rule 267 (operator_name -> PLUSOP .)
    COMMA           reduce using rule 267 (operator_name -> PLUSOP .)
    RPAREN          reduce using rule 267 (operator_name -> PLUSOP .)
    DOT             reduce using rule 267 (operator_name -> PLUSOP .)
    ARROW           reduce using rule 267 (operator_name -> PLUSOP .)
    DPLUSOP         reduce using rule 267 (operator_name -> PLUSOP .)
    DMINUSOP        reduce using rule 267 (operator_name -> PLUSOP .)
    LTEMPLATE       reduce using rule 267 (operator_name -> PLUSOP .)
    MULTEQOP        reduce using rule 267 (operator_name -> PLUSOP .)
    DIVEQOP         reduce using rule 267 (operator_name -> PLUSOP .)
    MODEQOP         reduce using rule 267 (operator_name -> PLUSOP .)
    PLUSEQOP        reduce using rule 267 (operator_name -> PLUSOP .)
    MINUSEQOP       reduce using rule 267 (operator_name -> PLUSOP .)
    LSHIFTEQOP      reduce using rule 267 (operator_name -> PLUSOP .)
    RSHIFTEQOP      reduce using rule 267 (operator_name -> PLUSOP .)
    BANDEQOP        reduce using rule 267 (operator_name -> PLUSOP .)
    BOREQOP         reduce using rule 267 (operator_name -> PLUSOP .)
    DOTSTAR         reduce using rule 267 (operator_name -> PLUSOP .)
    ARROWSTAR       reduce using rule 267 (operator_name -> PLUSOP .)
    MULTOP          reduce using rule 267 (operator_name -> PLUSOP .)
    DIVOP           reduce using rule 267 (operator_name -> PLUSOP .)
    MODOP           reduce using rule 267 (operator_name -> PLUSOP .)
    PLUSOP          reduce using rule 267 (operator_name -> PLUSOP .)
    MINUSOP         reduce using rule 267 (operator_name -> PLUSOP .)
    LSHIFT          reduce using rule 267 (operator_name -> PLUSOP .)
    RSHIFT          reduce using rule 267 (operator_name -> PLUSOP .)
    LTCOMP          reduce using rule 267 (operator_name -> PLUSOP .)
    GTCOMP          reduce using rule 267 (operator_name -> PLUSOP .)
    LTECOMP         reduce using rule 267 (operator_name -> PLUSOP .)
    GTECOMP         reduce using rule 267 (operator_name -> PLUSOP .)
    EQCOMP          reduce using rule 267 (operator_name -> PLUSOP .)
    NEQCOMP         reduce using rule 267 (operator_name -> PLUSOP .)
    BANDOP          reduce using rule 267 (operator_name -> PLUSOP .)
    XOROP           reduce using rule 267 (operator_name -> PLUSOP .)
    OROP            reduce using rule 267 (operator_name -> PLUSOP .)
    ANDOP           reduce using rule 267 (operator_name -> PLUSOP .)
    QUESMARK        reduce using rule 267 (operator_name -> PLUSOP .)
    RSPAREN         reduce using rule 267 (operator_name -> PLUSOP .)
    RTEMPLATE       reduce using rule 267 (operator_name -> PLUSOP .)
    RCPAREN         reduce using rule 267 (operator_name -> PLUSOP .)
    COLON           reduce using rule 267 (operator_name -> PLUSOP .)


state 86

    (268) operator_name -> MINUSOP .

    LPAREN          reduce using rule 268 (operator_name -> MINUSOP .)
    LSPAREN         reduce using rule 268 (operator_name -> MINUSOP .)
    EQUAL           reduce using rule 268 (operator_name -> MINUSOP .)
    LCPAREN         reduce using rule 268 (operator_name -> MINUSOP .)
    SEMICOLON       reduce using rule 268 (operator_name -> MINUSOP .)
    COMMA           reduce using rule 268 (operator_name -> MINUSOP .)
    RPAREN          reduce using rule 268 (operator_name -> MINUSOP .)
    DOT             reduce using rule 268 (operator_name -> MINUSOP .)
    ARROW           reduce using rule 268 (operator_name -> MINUSOP .)
    DPLUSOP         reduce using rule 268 (operator_name -> MINUSOP .)
    DMINUSOP        reduce using rule 268 (operator_name -> MINUSOP .)
    LTEMPLATE       reduce using rule 268 (operator_name -> MINUSOP .)
    MULTEQOP        reduce using rule 268 (operator_name -> MINUSOP .)
    DIVEQOP         reduce using rule 268 (operator_name -> MINUSOP .)
    MODEQOP         reduce using rule 268 (operator_name -> MINUSOP .)
    PLUSEQOP        reduce using rule 268 (operator_name -> MINUSOP .)
    MINUSEQOP       reduce using rule 268 (operator_name -> MINUSOP .)
    LSHIFTEQOP      reduce using rule 268 (operator_name -> MINUSOP .)
    RSHIFTEQOP      reduce using rule 268 (operator_name -> MINUSOP .)
    BANDEQOP        reduce using rule 268 (operator_name -> MINUSOP .)
    BOREQOP         reduce using rule 268 (operator_name -> MINUSOP .)
    DOTSTAR         reduce using rule 268 (operator_name -> MINUSOP .)
    ARROWSTAR       reduce using rule 268 (operator_name -> MINUSOP .)
    MULTOP          reduce using rule 268 (operator_name -> MINUSOP .)
    DIVOP           reduce using rule 268 (operator_name -> MINUSOP .)
    MODOP           reduce using rule 268 (operator_name -> MINUSOP .)
    PLUSOP          reduce using rule 268 (operator_name -> MINUSOP .)
    MINUSOP         reduce using rule 268 (operator_name -> MINUSOP .)
    LSHIFT          reduce using rule 268 (operator_name -> MINUSOP .)
    RSHIFT          reduce using rule 268 (operator_name -> MINUSOP .)
    LTCOMP          reduce using rule 268 (operator_name -> MINUSOP .)
    GTCOMP          reduce using rule 268 (operator_name -> MINUSOP .)
    LTECOMP         reduce using rule 268 (operator_name -> MINUSOP .)
    GTECOMP         reduce using rule 268 (operator_name -> MINUSOP .)
    EQCOMP          reduce using rule 268 (operator_name -> MINUSOP .)
    NEQCOMP         reduce using rule 268 (operator_name -> MINUSOP .)
    BANDOP          reduce using rule 268 (operator_name -> MINUSOP .)
    XOROP           reduce using rule 268 (operator_name -> MINUSOP .)
    OROP            reduce using rule 268 (operator_name -> MINUSOP .)
    ANDOP           reduce using rule 268 (operator_name -> MINUSOP .)
    QUESMARK        reduce using rule 268 (operator_name -> MINUSOP .)
    RSPAREN         reduce using rule 268 (operator_name -> MINUSOP .)
    RTEMPLATE       reduce using rule 268 (operator_name -> MINUSOP .)
    RCPAREN         reduce using rule 268 (operator_name -> MINUSOP .)
    COLON           reduce using rule 268 (operator_name -> MINUSOP .)


state 87

    (269) operator_name -> MULTOP .

    LPAREN          reduce using rule 269 (operator_name -> MULTOP .)
    LSPAREN         reduce using rule 269 (operator_name -> MULTOP .)
    EQUAL           reduce using rule 269 (operator_name -> MULTOP .)
    LCPAREN         reduce using rule 269 (operator_name -> MULTOP .)
    SEMICOLON       reduce using rule 269 (operator_name -> MULTOP .)
    COMMA           reduce using rule 269 (operator_name -> MULTOP .)
    RPAREN          reduce using rule 269 (operator_name -> MULTOP .)
    DOT             reduce using rule 269 (operator_name -> MULTOP .)
    ARROW           reduce using rule 269 (operator_name -> MULTOP .)
    DPLUSOP         reduce using rule 269 (operator_name -> MULTOP .)
    DMINUSOP        reduce using rule 269 (operator_name -> MULTOP .)
    LTEMPLATE       reduce using rule 269 (operator_name -> MULTOP .)
    MULTEQOP        reduce using rule 269 (operator_name -> MULTOP .)
    DIVEQOP         reduce using rule 269 (operator_name -> MULTOP .)
    MODEQOP         reduce using rule 269 (operator_name -> MULTOP .)
    PLUSEQOP        reduce using rule 269 (operator_name -> MULTOP .)
    MINUSEQOP       reduce using rule 269 (operator_name -> MULTOP .)
    LSHIFTEQOP      reduce using rule 269 (operator_name -> MULTOP .)
    RSHIFTEQOP      reduce using rule 269 (operator_name -> MULTOP .)
    BANDEQOP        reduce using rule 269 (operator_name -> MULTOP .)
    BOREQOP         reduce using rule 269 (operator_name -> MULTOP .)
    DOTSTAR         reduce using rule 269 (operator_name -> MULTOP .)
    ARROWSTAR       reduce using rule 269 (operator_name -> MULTOP .)
    MULTOP          reduce using rule 269 (operator_name -> MULTOP .)
    DIVOP           reduce using rule 269 (operator_name -> MULTOP .)
    MODOP           reduce using rule 269 (operator_name -> MULTOP .)
    PLUSOP          reduce using rule 269 (operator_name -> MULTOP .)
    MINUSOP         reduce using rule 269 (operator_name -> MULTOP .)
    LSHIFT          reduce using rule 269 (operator_name -> MULTOP .)
    RSHIFT          reduce using rule 269 (operator_name -> MULTOP .)
    LTCOMP          reduce using rule 269 (operator_name -> MULTOP .)
    GTCOMP          reduce using rule 269 (operator_name -> MULTOP .)
    LTECOMP         reduce using rule 269 (operator_name -> MULTOP .)
    GTECOMP         reduce using rule 269 (operator_name -> MULTOP .)
    EQCOMP          reduce using rule 269 (operator_name -> MULTOP .)
    NEQCOMP         reduce using rule 269 (operator_name -> MULTOP .)
    BANDOP          reduce using rule 269 (operator_name -> MULTOP .)
    XOROP           reduce using rule 269 (operator_name -> MULTOP .)
    OROP            reduce using rule 269 (operator_name -> MULTOP .)
    ANDOP           reduce using rule 269 (operator_name -> MULTOP .)
    QUESMARK        reduce using rule 269 (operator_name -> MULTOP .)
    RSPAREN         reduce using rule 269 (operator_name -> MULTOP .)
    RTEMPLATE       reduce using rule 269 (operator_name -> MULTOP .)
    RCPAREN         reduce using rule 269 (operator_name -> MULTOP .)
    COLON           reduce using rule 269 (operator_name -> MULTOP .)


state 88

    (270) operator_name -> DIVOP .

    LPAREN          reduce using rule 270 (operator_name -> DIVOP .)
    LSPAREN         reduce using rule 270 (operator_name -> DIVOP .)
    EQUAL           reduce using rule 270 (operator_name -> DIVOP .)
    LCPAREN         reduce using rule 270 (operator_name -> DIVOP .)
    SEMICOLON       reduce using rule 270 (operator_name -> DIVOP .)
    COMMA           reduce using rule 270 (operator_name -> DIVOP .)
    RPAREN          reduce using rule 270 (operator_name -> DIVOP .)
    DOT             reduce using rule 270 (operator_name -> DIVOP .)
    ARROW           reduce using rule 270 (operator_name -> DIVOP .)
    DPLUSOP         reduce using rule 270 (operator_name -> DIVOP .)
    DMINUSOP        reduce using rule 270 (operator_name -> DIVOP .)
    LTEMPLATE       reduce using rule 270 (operator_name -> DIVOP .)
    MULTEQOP        reduce using rule 270 (operator_name -> DIVOP .)
    DIVEQOP         reduce using rule 270 (operator_name -> DIVOP .)
    MODEQOP         reduce using rule 270 (operator_name -> DIVOP .)
    PLUSEQOP        reduce using rule 270 (operator_name -> DIVOP .)
    MINUSEQOP       reduce using rule 270 (operator_name -> DIVOP .)
    LSHIFTEQOP      reduce using rule 270 (operator_name -> DIVOP .)
    RSHIFTEQOP      reduce using rule 270 (operator_name -> DIVOP .)
    BANDEQOP        reduce using rule 270 (operator_name -> DIVOP .)
    BOREQOP         reduce using rule 270 (operator_name -> DIVOP .)
    DOTSTAR         reduce using rule 270 (operator_name -> DIVOP .)
    ARROWSTAR       reduce using rule 270 (operator_name -> DIVOP .)
    MULTOP          reduce using rule 270 (operator_name -> DIVOP .)
    DIVOP           reduce using rule 270 (operator_name -> DIVOP .)
    MODOP           reduce using rule 270 (operator_name -> DIVOP .)
    PLUSOP          reduce using rule 270 (operator_name -> DIVOP .)
    MINUSOP         reduce using rule 270 (operator_name -> DIVOP .)
    LSHIFT          reduce using rule 270 (operator_name -> DIVOP .)
    RSHIFT          reduce using rule 270 (operator_name -> DIVOP .)
    LTCOMP          reduce using rule 270 (operator_name -> DIVOP .)
    GTCOMP          reduce using rule 270 (operator_name -> DIVOP .)
    LTECOMP         reduce using rule 270 (operator_name -> DIVOP .)
    GTECOMP         reduce using rule 270 (operator_name -> DIVOP .)
    EQCOMP          reduce using rule 270 (operator_name -> DIVOP .)
    NEQCOMP         reduce using rule 270 (operator_name -> DIVOP .)
    BANDOP          reduce using rule 270 (operator_name -> DIVOP .)
    XOROP           reduce using rule 270 (operator_name -> DIVOP .)
    OROP            reduce using rule 270 (operator_name -> DIVOP .)
    ANDOP           reduce using rule 270 (operator_name -> DIVOP .)
    QUESMARK        reduce using rule 270 (operator_name -> DIVOP .)
    RSPAREN         reduce using rule 270 (operator_name -> DIVOP .)
    RTEMPLATE       reduce using rule 270 (operator_name -> DIVOP .)
    RCPAREN         reduce using rule 270 (operator_name -> DIVOP .)
    COLON           reduce using rule 270 (operator_name -> DIVOP .)


state 89

    (271) operator_name -> MODOP .

    LPAREN          reduce using rule 271 (operator_name -> MODOP .)
    LSPAREN         reduce using rule 271 (operator_name -> MODOP .)
    EQUAL           reduce using rule 271 (operator_name -> MODOP .)
    LCPAREN         reduce using rule 271 (operator_name -> MODOP .)
    SEMICOLON       reduce using rule 271 (operator_name -> MODOP .)
    COMMA           reduce using rule 271 (operator_name -> MODOP .)
    RPAREN          reduce using rule 271 (operator_name -> MODOP .)
    DOT             reduce using rule 271 (operator_name -> MODOP .)
    ARROW           reduce using rule 271 (operator_name -> MODOP .)
    DPLUSOP         reduce using rule 271 (operator_name -> MODOP .)
    DMINUSOP        reduce using rule 271 (operator_name -> MODOP .)
    LTEMPLATE       reduce using rule 271 (operator_name -> MODOP .)
    MULTEQOP        reduce using rule 271 (operator_name -> MODOP .)
    DIVEQOP         reduce using rule 271 (operator_name -> MODOP .)
    MODEQOP         reduce using rule 271 (operator_name -> MODOP .)
    PLUSEQOP        reduce using rule 271 (operator_name -> MODOP .)
    MINUSEQOP       reduce using rule 271 (operator_name -> MODOP .)
    LSHIFTEQOP      reduce using rule 271 (operator_name -> MODOP .)
    RSHIFTEQOP      reduce using rule 271 (operator_name -> MODOP .)
    BANDEQOP        reduce using rule 271 (operator_name -> MODOP .)
    BOREQOP         reduce using rule 271 (operator_name -> MODOP .)
    DOTSTAR         reduce using rule 271 (operator_name -> MODOP .)
    ARROWSTAR       reduce using rule 271 (operator_name -> MODOP .)
    MULTOP          reduce using rule 271 (operator_name -> MODOP .)
    DIVOP           reduce using rule 271 (operator_name -> MODOP .)
    MODOP           reduce using rule 271 (operator_name -> MODOP .)
    PLUSOP          reduce using rule 271 (operator_name -> MODOP .)
    MINUSOP         reduce using rule 271 (operator_name -> MODOP .)
    LSHIFT          reduce using rule 271 (operator_name -> MODOP .)
    RSHIFT          reduce using rule 271 (operator_name -> MODOP .)
    LTCOMP          reduce using rule 271 (operator_name -> MODOP .)
    GTCOMP          reduce using rule 271 (operator_name -> MODOP .)
    LTECOMP         reduce using rule 271 (operator_name -> MODOP .)
    GTECOMP         reduce using rule 271 (operator_name -> MODOP .)
    EQCOMP          reduce using rule 271 (operator_name -> MODOP .)
    NEQCOMP         reduce using rule 271 (operator_name -> MODOP .)
    BANDOP          reduce using rule 271 (operator_name -> MODOP .)
    XOROP           reduce using rule 271 (operator_name -> MODOP .)
    OROP            reduce using rule 271 (operator_name -> MODOP .)
    ANDOP           reduce using rule 271 (operator_name -> MODOP .)
    QUESMARK        reduce using rule 271 (operator_name -> MODOP .)
    RSPAREN         reduce using rule 271 (operator_name -> MODOP .)
    RTEMPLATE       reduce using rule 271 (operator_name -> MODOP .)
    RCPAREN         reduce using rule 271 (operator_name -> MODOP .)
    COLON           reduce using rule 271 (operator_name -> MODOP .)


state 90

    (272) operator_name -> XOROP .

    LPAREN          reduce using rule 272 (operator_name -> XOROP .)
    LSPAREN         reduce using rule 272 (operator_name -> XOROP .)
    EQUAL           reduce using rule 272 (operator_name -> XOROP .)
    LCPAREN         reduce using rule 272 (operator_name -> XOROP .)
    SEMICOLON       reduce using rule 272 (operator_name -> XOROP .)
    COMMA           reduce using rule 272 (operator_name -> XOROP .)
    RPAREN          reduce using rule 272 (operator_name -> XOROP .)
    DOT             reduce using rule 272 (operator_name -> XOROP .)
    ARROW           reduce using rule 272 (operator_name -> XOROP .)
    DPLUSOP         reduce using rule 272 (operator_name -> XOROP .)
    DMINUSOP        reduce using rule 272 (operator_name -> XOROP .)
    LTEMPLATE       reduce using rule 272 (operator_name -> XOROP .)
    MULTEQOP        reduce using rule 272 (operator_name -> XOROP .)
    DIVEQOP         reduce using rule 272 (operator_name -> XOROP .)
    MODEQOP         reduce using rule 272 (operator_name -> XOROP .)
    PLUSEQOP        reduce using rule 272 (operator_name -> XOROP .)
    MINUSEQOP       reduce using rule 272 (operator_name -> XOROP .)
    LSHIFTEQOP      reduce using rule 272 (operator_name -> XOROP .)
    RSHIFTEQOP      reduce using rule 272 (operator_name -> XOROP .)
    BANDEQOP        reduce using rule 272 (operator_name -> XOROP .)
    BOREQOP         reduce using rule 272 (operator_name -> XOROP .)
    DOTSTAR         reduce using rule 272 (operator_name -> XOROP .)
    ARROWSTAR       reduce using rule 272 (operator_name -> XOROP .)
    MULTOP          reduce using rule 272 (operator_name -> XOROP .)
    DIVOP           reduce using rule 272 (operator_name -> XOROP .)
    MODOP           reduce using rule 272 (operator_name -> XOROP .)
    PLUSOP          reduce using rule 272 (operator_name -> XOROP .)
    MINUSOP         reduce using rule 272 (operator_name -> XOROP .)
    LSHIFT          reduce using rule 272 (operator_name -> XOROP .)
    RSHIFT          reduce using rule 272 (operator_name -> XOROP .)
    LTCOMP          reduce using rule 272 (operator_name -> XOROP .)
    GTCOMP          reduce using rule 272 (operator_name -> XOROP .)
    LTECOMP         reduce using rule 272 (operator_name -> XOROP .)
    GTECOMP         reduce using rule 272 (operator_name -> XOROP .)
    EQCOMP          reduce using rule 272 (operator_name -> XOROP .)
    NEQCOMP         reduce using rule 272 (operator_name -> XOROP .)
    BANDOP          reduce using rule 272 (operator_name -> XOROP .)
    XOROP           reduce using rule 272 (operator_name -> XOROP .)
    OROP            reduce using rule 272 (operator_name -> XOROP .)
    ANDOP           reduce using rule 272 (operator_name -> XOROP .)
    QUESMARK        reduce using rule 272 (operator_name -> XOROP .)
    RSPAREN         reduce using rule 272 (operator_name -> XOROP .)
    RTEMPLATE       reduce using rule 272 (operator_name -> XOROP .)
    RCPAREN         reduce using rule 272 (operator_name -> XOROP .)
    COLON           reduce using rule 272 (operator_name -> XOROP .)


state 91

    (273) operator_name -> BANDOP .

    LPAREN          reduce using rule 273 (operator_name -> BANDOP .)
    LSPAREN         reduce using rule 273 (operator_name -> BANDOP .)
    EQUAL           reduce using rule 273 (operator_name -> BANDOP .)
    LCPAREN         reduce using rule 273 (operator_name -> BANDOP .)
    SEMICOLON       reduce using rule 273 (operator_name -> BANDOP .)
    COMMA           reduce using rule 273 (operator_name -> BANDOP .)
    RPAREN          reduce using rule 273 (operator_name -> BANDOP .)
    DOT             reduce using rule 273 (operator_name -> BANDOP .)
    ARROW           reduce using rule 273 (operator_name -> BANDOP .)
    DPLUSOP         reduce using rule 273 (operator_name -> BANDOP .)
    DMINUSOP        reduce using rule 273 (operator_name -> BANDOP .)
    LTEMPLATE       reduce using rule 273 (operator_name -> BANDOP .)
    MULTEQOP        reduce using rule 273 (operator_name -> BANDOP .)
    DIVEQOP         reduce using rule 273 (operator_name -> BANDOP .)
    MODEQOP         reduce using rule 273 (operator_name -> BANDOP .)
    PLUSEQOP        reduce using rule 273 (operator_name -> BANDOP .)
    MINUSEQOP       reduce using rule 273 (operator_name -> BANDOP .)
    LSHIFTEQOP      reduce using rule 273 (operator_name -> BANDOP .)
    RSHIFTEQOP      reduce using rule 273 (operator_name -> BANDOP .)
    BANDEQOP        reduce using rule 273 (operator_name -> BANDOP .)
    BOREQOP         reduce using rule 273 (operator_name -> BANDOP .)
    DOTSTAR         reduce using rule 273 (operator_name -> BANDOP .)
    ARROWSTAR       reduce using rule 273 (operator_name -> BANDOP .)
    MULTOP          reduce using rule 273 (operator_name -> BANDOP .)
    DIVOP           reduce using rule 273 (operator_name -> BANDOP .)
    MODOP           reduce using rule 273 (operator_name -> BANDOP .)
    PLUSOP          reduce using rule 273 (operator_name -> BANDOP .)
    MINUSOP         reduce using rule 273 (operator_name -> BANDOP .)
    LSHIFT          reduce using rule 273 (operator_name -> BANDOP .)
    RSHIFT          reduce using rule 273 (operator_name -> BANDOP .)
    LTCOMP          reduce using rule 273 (operator_name -> BANDOP .)
    GTCOMP          reduce using rule 273 (operator_name -> BANDOP .)
    LTECOMP         reduce using rule 273 (operator_name -> BANDOP .)
    GTECOMP         reduce using rule 273 (operator_name -> BANDOP .)
    EQCOMP          reduce using rule 273 (operator_name -> BANDOP .)
    NEQCOMP         reduce using rule 273 (operator_name -> BANDOP .)
    BANDOP          reduce using rule 273 (operator_name -> BANDOP .)
    XOROP           reduce using rule 273 (operator_name -> BANDOP .)
    OROP            reduce using rule 273 (operator_name -> BANDOP .)
    ANDOP           reduce using rule 273 (operator_name -> BANDOP .)
    QUESMARK        reduce using rule 273 (operator_name -> BANDOP .)
    RSPAREN         reduce using rule 273 (operator_name -> BANDOP .)
    RTEMPLATE       reduce using rule 273 (operator_name -> BANDOP .)
    RCPAREN         reduce using rule 273 (operator_name -> BANDOP .)
    COLON           reduce using rule 273 (operator_name -> BANDOP .)


state 92

    (274) operator_name -> BNOP .

    LPAREN          reduce using rule 274 (operator_name -> BNOP .)
    LSPAREN         reduce using rule 274 (operator_name -> BNOP .)
    EQUAL           reduce using rule 274 (operator_name -> BNOP .)
    LCPAREN         reduce using rule 274 (operator_name -> BNOP .)
    SEMICOLON       reduce using rule 274 (operator_name -> BNOP .)
    COMMA           reduce using rule 274 (operator_name -> BNOP .)
    RPAREN          reduce using rule 274 (operator_name -> BNOP .)
    DOT             reduce using rule 274 (operator_name -> BNOP .)
    ARROW           reduce using rule 274 (operator_name -> BNOP .)
    DPLUSOP         reduce using rule 274 (operator_name -> BNOP .)
    DMINUSOP        reduce using rule 274 (operator_name -> BNOP .)
    LTEMPLATE       reduce using rule 274 (operator_name -> BNOP .)
    MULTEQOP        reduce using rule 274 (operator_name -> BNOP .)
    DIVEQOP         reduce using rule 274 (operator_name -> BNOP .)
    MODEQOP         reduce using rule 274 (operator_name -> BNOP .)
    PLUSEQOP        reduce using rule 274 (operator_name -> BNOP .)
    MINUSEQOP       reduce using rule 274 (operator_name -> BNOP .)
    LSHIFTEQOP      reduce using rule 274 (operator_name -> BNOP .)
    RSHIFTEQOP      reduce using rule 274 (operator_name -> BNOP .)
    BANDEQOP        reduce using rule 274 (operator_name -> BNOP .)
    BOREQOP         reduce using rule 274 (operator_name -> BNOP .)
    DOTSTAR         reduce using rule 274 (operator_name -> BNOP .)
    ARROWSTAR       reduce using rule 274 (operator_name -> BNOP .)
    MULTOP          reduce using rule 274 (operator_name -> BNOP .)
    DIVOP           reduce using rule 274 (operator_name -> BNOP .)
    MODOP           reduce using rule 274 (operator_name -> BNOP .)
    PLUSOP          reduce using rule 274 (operator_name -> BNOP .)
    MINUSOP         reduce using rule 274 (operator_name -> BNOP .)
    LSHIFT          reduce using rule 274 (operator_name -> BNOP .)
    RSHIFT          reduce using rule 274 (operator_name -> BNOP .)
    LTCOMP          reduce using rule 274 (operator_name -> BNOP .)
    GTCOMP          reduce using rule 274 (operator_name -> BNOP .)
    LTECOMP         reduce using rule 274 (operator_name -> BNOP .)
    GTECOMP         reduce using rule 274 (operator_name -> BNOP .)
    EQCOMP          reduce using rule 274 (operator_name -> BNOP .)
    NEQCOMP         reduce using rule 274 (operator_name -> BNOP .)
    BANDOP          reduce using rule 274 (operator_name -> BNOP .)
    XOROP           reduce using rule 274 (operator_name -> BNOP .)
    OROP            reduce using rule 274 (operator_name -> BNOP .)
    ANDOP           reduce using rule 274 (operator_name -> BNOP .)
    QUESMARK        reduce using rule 274 (operator_name -> BNOP .)
    RSPAREN         reduce using rule 274 (operator_name -> BNOP .)
    RTEMPLATE       reduce using rule 274 (operator_name -> BNOP .)
    RCPAREN         reduce using rule 274 (operator_name -> BNOP .)
    COLON           reduce using rule 274 (operator_name -> BNOP .)


state 93

    (275) operator_name -> NOTSYM .

    LPAREN          reduce using rule 275 (operator_name -> NOTSYM .)
    LSPAREN         reduce using rule 275 (operator_name -> NOTSYM .)
    EQUAL           reduce using rule 275 (operator_name -> NOTSYM .)
    LCPAREN         reduce using rule 275 (operator_name -> NOTSYM .)
    SEMICOLON       reduce using rule 275 (operator_name -> NOTSYM .)
    COMMA           reduce using rule 275 (operator_name -> NOTSYM .)
    RPAREN          reduce using rule 275 (operator_name -> NOTSYM .)
    DOT             reduce using rule 275 (operator_name -> NOTSYM .)
    ARROW           reduce using rule 275 (operator_name -> NOTSYM .)
    DPLUSOP         reduce using rule 275 (operator_name -> NOTSYM .)
    DMINUSOP        reduce using rule 275 (operator_name -> NOTSYM .)
    LTEMPLATE       reduce using rule 275 (operator_name -> NOTSYM .)
    MULTEQOP        reduce using rule 275 (operator_name -> NOTSYM .)
    DIVEQOP         reduce using rule 275 (operator_name -> NOTSYM .)
    MODEQOP         reduce using rule 275 (operator_name -> NOTSYM .)
    PLUSEQOP        reduce using rule 275 (operator_name -> NOTSYM .)
    MINUSEQOP       reduce using rule 275 (operator_name -> NOTSYM .)
    LSHIFTEQOP      reduce using rule 275 (operator_name -> NOTSYM .)
    RSHIFTEQOP      reduce using rule 275 (operator_name -> NOTSYM .)
    BANDEQOP        reduce using rule 275 (operator_name -> NOTSYM .)
    BOREQOP         reduce using rule 275 (operator_name -> NOTSYM .)
    DOTSTAR         reduce using rule 275 (operator_name -> NOTSYM .)
    ARROWSTAR       reduce using rule 275 (operator_name -> NOTSYM .)
    MULTOP          reduce using rule 275 (operator_name -> NOTSYM .)
    DIVOP           reduce using rule 275 (operator_name -> NOTSYM .)
    MODOP           reduce using rule 275 (operator_name -> NOTSYM .)
    PLUSOP          reduce using rule 275 (operator_name -> NOTSYM .)
    MINUSOP         reduce using rule 275 (operator_name -> NOTSYM .)
    LSHIFT          reduce using rule 275 (operator_name -> NOTSYM .)
    RSHIFT          reduce using rule 275 (operator_name -> NOTSYM .)
    LTCOMP          reduce using rule 275 (operator_name -> NOTSYM .)
    GTCOMP          reduce using rule 275 (operator_name -> NOTSYM .)
    LTECOMP         reduce using rule 275 (operator_name -> NOTSYM .)
    GTECOMP         reduce using rule 275 (operator_name -> NOTSYM .)
    EQCOMP          reduce using rule 275 (operator_name -> NOTSYM .)
    NEQCOMP         reduce using rule 275 (operator_name -> NOTSYM .)
    BANDOP          reduce using rule 275 (operator_name -> NOTSYM .)
    XOROP           reduce using rule 275 (operator_name -> NOTSYM .)
    OROP            reduce using rule 275 (operator_name -> NOTSYM .)
    ANDOP           reduce using rule 275 (operator_name -> NOTSYM .)
    QUESMARK        reduce using rule 275 (operator_name -> NOTSYM .)
    RSPAREN         reduce using rule 275 (operator_name -> NOTSYM .)
    RTEMPLATE       reduce using rule 275 (operator_name -> NOTSYM .)
    RCPAREN         reduce using rule 275 (operator_name -> NOTSYM .)
    COLON           reduce using rule 275 (operator_name -> NOTSYM .)


state 94

    (276) operator_name -> EQUAL .

    LPAREN          reduce using rule 276 (operator_name -> EQUAL .)
    LSPAREN         reduce using rule 276 (operator_name -> EQUAL .)
    EQUAL           reduce using rule 276 (operator_name -> EQUAL .)
    LCPAREN         reduce using rule 276 (operator_name -> EQUAL .)
    SEMICOLON       reduce using rule 276 (operator_name -> EQUAL .)
    COMMA           reduce using rule 276 (operator_name -> EQUAL .)
    RPAREN          reduce using rule 276 (operator_name -> EQUAL .)
    DOT             reduce using rule 276 (operator_name -> EQUAL .)
    ARROW           reduce using rule 276 (operator_name -> EQUAL .)
    DPLUSOP         reduce using rule 276 (operator_name -> EQUAL .)
    DMINUSOP        reduce using rule 276 (operator_name -> EQUAL .)
    LTEMPLATE       reduce using rule 276 (operator_name -> EQUAL .)
    MULTEQOP        reduce using rule 276 (operator_name -> EQUAL .)
    DIVEQOP         reduce using rule 276 (operator_name -> EQUAL .)
    MODEQOP         reduce using rule 276 (operator_name -> EQUAL .)
    PLUSEQOP        reduce using rule 276 (operator_name -> EQUAL .)
    MINUSEQOP       reduce using rule 276 (operator_name -> EQUAL .)
    LSHIFTEQOP      reduce using rule 276 (operator_name -> EQUAL .)
    RSHIFTEQOP      reduce using rule 276 (operator_name -> EQUAL .)
    BANDEQOP        reduce using rule 276 (operator_name -> EQUAL .)
    BOREQOP         reduce using rule 276 (operator_name -> EQUAL .)
    DOTSTAR         reduce using rule 276 (operator_name -> EQUAL .)
    ARROWSTAR       reduce using rule 276 (operator_name -> EQUAL .)
    MULTOP          reduce using rule 276 (operator_name -> EQUAL .)
    DIVOP           reduce using rule 276 (operator_name -> EQUAL .)
    MODOP           reduce using rule 276 (operator_name -> EQUAL .)
    PLUSOP          reduce using rule 276 (operator_name -> EQUAL .)
    MINUSOP         reduce using rule 276 (operator_name -> EQUAL .)
    LSHIFT          reduce using rule 276 (operator_name -> EQUAL .)
    RSHIFT          reduce using rule 276 (operator_name -> EQUAL .)
    LTCOMP          reduce using rule 276 (operator_name -> EQUAL .)
    GTCOMP          reduce using rule 276 (operator_name -> EQUAL .)
    LTECOMP         reduce using rule 276 (operator_name -> EQUAL .)
    GTECOMP         reduce using rule 276 (operator_name -> EQUAL .)
    EQCOMP          reduce using rule 276 (operator_name -> EQUAL .)
    NEQCOMP         reduce using rule 276 (operator_name -> EQUAL .)
    BANDOP          reduce using rule 276 (operator_name -> EQUAL .)
    XOROP           reduce using rule 276 (operator_name -> EQUAL .)
    OROP            reduce using rule 276 (operator_name -> EQUAL .)
    ANDOP           reduce using rule 276 (operator_name -> EQUAL .)
    QUESMARK        reduce using rule 276 (operator_name -> EQUAL .)
    RSPAREN         reduce using rule 276 (operator_name -> EQUAL .)
    RTEMPLATE       reduce using rule 276 (operator_name -> EQUAL .)
    RCPAREN         reduce using rule 276 (operator_name -> EQUAL .)
    COLON           reduce using rule 276 (operator_name -> EQUAL .)


state 95

    (277) operator_name -> LTCOMP .

    LPAREN          reduce using rule 277 (operator_name -> LTCOMP .)
    LSPAREN         reduce using rule 277 (operator_name -> LTCOMP .)
    EQUAL           reduce using rule 277 (operator_name -> LTCOMP .)
    LCPAREN         reduce using rule 277 (operator_name -> LTCOMP .)
    SEMICOLON       reduce using rule 277 (operator_name -> LTCOMP .)
    COMMA           reduce using rule 277 (operator_name -> LTCOMP .)
    RPAREN          reduce using rule 277 (operator_name -> LTCOMP .)
    DOT             reduce using rule 277 (operator_name -> LTCOMP .)
    ARROW           reduce using rule 277 (operator_name -> LTCOMP .)
    DPLUSOP         reduce using rule 277 (operator_name -> LTCOMP .)
    DMINUSOP        reduce using rule 277 (operator_name -> LTCOMP .)
    LTEMPLATE       reduce using rule 277 (operator_name -> LTCOMP .)
    MULTEQOP        reduce using rule 277 (operator_name -> LTCOMP .)
    DIVEQOP         reduce using rule 277 (operator_name -> LTCOMP .)
    MODEQOP         reduce using rule 277 (operator_name -> LTCOMP .)
    PLUSEQOP        reduce using rule 277 (operator_name -> LTCOMP .)
    MINUSEQOP       reduce using rule 277 (operator_name -> LTCOMP .)
    LSHIFTEQOP      reduce using rule 277 (operator_name -> LTCOMP .)
    RSHIFTEQOP      reduce using rule 277 (operator_name -> LTCOMP .)
    BANDEQOP        reduce using rule 277 (operator_name -> LTCOMP .)
    BOREQOP         reduce using rule 277 (operator_name -> LTCOMP .)
    DOTSTAR         reduce using rule 277 (operator_name -> LTCOMP .)
    ARROWSTAR       reduce using rule 277 (operator_name -> LTCOMP .)
    MULTOP          reduce using rule 277 (operator_name -> LTCOMP .)
    DIVOP           reduce using rule 277 (operator_name -> LTCOMP .)
    MODOP           reduce using rule 277 (operator_name -> LTCOMP .)
    PLUSOP          reduce using rule 277 (operator_name -> LTCOMP .)
    MINUSOP         reduce using rule 277 (operator_name -> LTCOMP .)
    LSHIFT          reduce using rule 277 (operator_name -> LTCOMP .)
    RSHIFT          reduce using rule 277 (operator_name -> LTCOMP .)
    LTCOMP          reduce using rule 277 (operator_name -> LTCOMP .)
    GTCOMP          reduce using rule 277 (operator_name -> LTCOMP .)
    LTECOMP         reduce using rule 277 (operator_name -> LTCOMP .)
    GTECOMP         reduce using rule 277 (operator_name -> LTCOMP .)
    EQCOMP          reduce using rule 277 (operator_name -> LTCOMP .)
    NEQCOMP         reduce using rule 277 (operator_name -> LTCOMP .)
    BANDOP          reduce using rule 277 (operator_name -> LTCOMP .)
    XOROP           reduce using rule 277 (operator_name -> LTCOMP .)
    OROP            reduce using rule 277 (operator_name -> LTCOMP .)
    ANDOP           reduce using rule 277 (operator_name -> LTCOMP .)
    QUESMARK        reduce using rule 277 (operator_name -> LTCOMP .)
    RSPAREN         reduce using rule 277 (operator_name -> LTCOMP .)
    RTEMPLATE       reduce using rule 277 (operator_name -> LTCOMP .)
    RCPAREN         reduce using rule 277 (operator_name -> LTCOMP .)
    COLON           reduce using rule 277 (operator_name -> LTCOMP .)


state 96

    (278) operator_name -> GTCOMP .

    LPAREN          reduce using rule 278 (operator_name -> GTCOMP .)
    LSPAREN         reduce using rule 278 (operator_name -> GTCOMP .)
    EQUAL           reduce using rule 278 (operator_name -> GTCOMP .)
    LCPAREN         reduce using rule 278 (operator_name -> GTCOMP .)
    SEMICOLON       reduce using rule 278 (operator_name -> GTCOMP .)
    COMMA           reduce using rule 278 (operator_name -> GTCOMP .)
    RPAREN          reduce using rule 278 (operator_name -> GTCOMP .)
    DOT             reduce using rule 278 (operator_name -> GTCOMP .)
    ARROW           reduce using rule 278 (operator_name -> GTCOMP .)
    DPLUSOP         reduce using rule 278 (operator_name -> GTCOMP .)
    DMINUSOP        reduce using rule 278 (operator_name -> GTCOMP .)
    LTEMPLATE       reduce using rule 278 (operator_name -> GTCOMP .)
    MULTEQOP        reduce using rule 278 (operator_name -> GTCOMP .)
    DIVEQOP         reduce using rule 278 (operator_name -> GTCOMP .)
    MODEQOP         reduce using rule 278 (operator_name -> GTCOMP .)
    PLUSEQOP        reduce using rule 278 (operator_name -> GTCOMP .)
    MINUSEQOP       reduce using rule 278 (operator_name -> GTCOMP .)
    LSHIFTEQOP      reduce using rule 278 (operator_name -> GTCOMP .)
    RSHIFTEQOP      reduce using rule 278 (operator_name -> GTCOMP .)
    BANDEQOP        reduce using rule 278 (operator_name -> GTCOMP .)
    BOREQOP         reduce using rule 278 (operator_name -> GTCOMP .)
    DOTSTAR         reduce using rule 278 (operator_name -> GTCOMP .)
    ARROWSTAR       reduce using rule 278 (operator_name -> GTCOMP .)
    MULTOP          reduce using rule 278 (operator_name -> GTCOMP .)
    DIVOP           reduce using rule 278 (operator_name -> GTCOMP .)
    MODOP           reduce using rule 278 (operator_name -> GTCOMP .)
    PLUSOP          reduce using rule 278 (operator_name -> GTCOMP .)
    MINUSOP         reduce using rule 278 (operator_name -> GTCOMP .)
    LSHIFT          reduce using rule 278 (operator_name -> GTCOMP .)
    RSHIFT          reduce using rule 278 (operator_name -> GTCOMP .)
    LTCOMP          reduce using rule 278 (operator_name -> GTCOMP .)
    GTCOMP          reduce using rule 278 (operator_name -> GTCOMP .)
    LTECOMP         reduce using rule 278 (operator_name -> GTCOMP .)
    GTECOMP         reduce using rule 278 (operator_name -> GTCOMP .)
    EQCOMP          reduce using rule 278 (operator_name -> GTCOMP .)
    NEQCOMP         reduce using rule 278 (operator_name -> GTCOMP .)
    BANDOP          reduce using rule 278 (operator_name -> GTCOMP .)
    XOROP           reduce using rule 278 (operator_name -> GTCOMP .)
    OROP            reduce using rule 278 (operator_name -> GTCOMP .)
    ANDOP           reduce using rule 278 (operator_name -> GTCOMP .)
    QUESMARK        reduce using rule 278 (operator_name -> GTCOMP .)
    RSPAREN         reduce using rule 278 (operator_name -> GTCOMP .)
    RTEMPLATE       reduce using rule 278 (operator_name -> GTCOMP .)
    RCPAREN         reduce using rule 278 (operator_name -> GTCOMP .)
    COLON           reduce using rule 278 (operator_name -> GTCOMP .)


state 97

    (279) operator_name -> PLUSEQOP .

    LPAREN          reduce using rule 279 (operator_name -> PLUSEQOP .)
    LSPAREN         reduce using rule 279 (operator_name -> PLUSEQOP .)
    EQUAL           reduce using rule 279 (operator_name -> PLUSEQOP .)
    LCPAREN         reduce using rule 279 (operator_name -> PLUSEQOP .)
    SEMICOLON       reduce using rule 279 (operator_name -> PLUSEQOP .)
    COMMA           reduce using rule 279 (operator_name -> PLUSEQOP .)
    RPAREN          reduce using rule 279 (operator_name -> PLUSEQOP .)
    DOT             reduce using rule 279 (operator_name -> PLUSEQOP .)
    ARROW           reduce using rule 279 (operator_name -> PLUSEQOP .)
    DPLUSOP         reduce using rule 279 (operator_name -> PLUSEQOP .)
    DMINUSOP        reduce using rule 279 (operator_name -> PLUSEQOP .)
    LTEMPLATE       reduce using rule 279 (operator_name -> PLUSEQOP .)
    MULTEQOP        reduce using rule 279 (operator_name -> PLUSEQOP .)
    DIVEQOP         reduce using rule 279 (operator_name -> PLUSEQOP .)
    MODEQOP         reduce using rule 279 (operator_name -> PLUSEQOP .)
    PLUSEQOP        reduce using rule 279 (operator_name -> PLUSEQOP .)
    MINUSEQOP       reduce using rule 279 (operator_name -> PLUSEQOP .)
    LSHIFTEQOP      reduce using rule 279 (operator_name -> PLUSEQOP .)
    RSHIFTEQOP      reduce using rule 279 (operator_name -> PLUSEQOP .)
    BANDEQOP        reduce using rule 279 (operator_name -> PLUSEQOP .)
    BOREQOP         reduce using rule 279 (operator_name -> PLUSEQOP .)
    DOTSTAR         reduce using rule 279 (operator_name -> PLUSEQOP .)
    ARROWSTAR       reduce using rule 279 (operator_name -> PLUSEQOP .)
    MULTOP          reduce using rule 279 (operator_name -> PLUSEQOP .)
    DIVOP           reduce using rule 279 (operator_name -> PLUSEQOP .)
    MODOP           reduce using rule 279 (operator_name -> PLUSEQOP .)
    PLUSOP          reduce using rule 279 (operator_name -> PLUSEQOP .)
    MINUSOP         reduce using rule 279 (operator_name -> PLUSEQOP .)
    LSHIFT          reduce using rule 279 (operator_name -> PLUSEQOP .)
    RSHIFT          reduce using rule 279 (operator_name -> PLUSEQOP .)
    LTCOMP          reduce using rule 279 (operator_name -> PLUSEQOP .)
    GTCOMP          reduce using rule 279 (operator_name -> PLUSEQOP .)
    LTECOMP         reduce using rule 279 (operator_name -> PLUSEQOP .)
    GTECOMP         reduce using rule 279 (operator_name -> PLUSEQOP .)
    EQCOMP          reduce using rule 279 (operator_name -> PLUSEQOP .)
    NEQCOMP         reduce using rule 279 (operator_name -> PLUSEQOP .)
    BANDOP          reduce using rule 279 (operator_name -> PLUSEQOP .)
    XOROP           reduce using rule 279 (operator_name -> PLUSEQOP .)
    OROP            reduce using rule 279 (operator_name -> PLUSEQOP .)
    ANDOP           reduce using rule 279 (operator_name -> PLUSEQOP .)
    QUESMARK        reduce using rule 279 (operator_name -> PLUSEQOP .)
    RSPAREN         reduce using rule 279 (operator_name -> PLUSEQOP .)
    RTEMPLATE       reduce using rule 279 (operator_name -> PLUSEQOP .)
    RCPAREN         reduce using rule 279 (operator_name -> PLUSEQOP .)
    COLON           reduce using rule 279 (operator_name -> PLUSEQOP .)


state 98

    (280) operator_name -> MINUSEQOP .

    LPAREN          reduce using rule 280 (operator_name -> MINUSEQOP .)
    LSPAREN         reduce using rule 280 (operator_name -> MINUSEQOP .)
    EQUAL           reduce using rule 280 (operator_name -> MINUSEQOP .)
    LCPAREN         reduce using rule 280 (operator_name -> MINUSEQOP .)
    SEMICOLON       reduce using rule 280 (operator_name -> MINUSEQOP .)
    COMMA           reduce using rule 280 (operator_name -> MINUSEQOP .)
    RPAREN          reduce using rule 280 (operator_name -> MINUSEQOP .)
    DOT             reduce using rule 280 (operator_name -> MINUSEQOP .)
    ARROW           reduce using rule 280 (operator_name -> MINUSEQOP .)
    DPLUSOP         reduce using rule 280 (operator_name -> MINUSEQOP .)
    DMINUSOP        reduce using rule 280 (operator_name -> MINUSEQOP .)
    LTEMPLATE       reduce using rule 280 (operator_name -> MINUSEQOP .)
    MULTEQOP        reduce using rule 280 (operator_name -> MINUSEQOP .)
    DIVEQOP         reduce using rule 280 (operator_name -> MINUSEQOP .)
    MODEQOP         reduce using rule 280 (operator_name -> MINUSEQOP .)
    PLUSEQOP        reduce using rule 280 (operator_name -> MINUSEQOP .)
    MINUSEQOP       reduce using rule 280 (operator_name -> MINUSEQOP .)
    LSHIFTEQOP      reduce using rule 280 (operator_name -> MINUSEQOP .)
    RSHIFTEQOP      reduce using rule 280 (operator_name -> MINUSEQOP .)
    BANDEQOP        reduce using rule 280 (operator_name -> MINUSEQOP .)
    BOREQOP         reduce using rule 280 (operator_name -> MINUSEQOP .)
    DOTSTAR         reduce using rule 280 (operator_name -> MINUSEQOP .)
    ARROWSTAR       reduce using rule 280 (operator_name -> MINUSEQOP .)
    MULTOP          reduce using rule 280 (operator_name -> MINUSEQOP .)
    DIVOP           reduce using rule 280 (operator_name -> MINUSEQOP .)
    MODOP           reduce using rule 280 (operator_name -> MINUSEQOP .)
    PLUSOP          reduce using rule 280 (operator_name -> MINUSEQOP .)
    MINUSOP         reduce using rule 280 (operator_name -> MINUSEQOP .)
    LSHIFT          reduce using rule 280 (operator_name -> MINUSEQOP .)
    RSHIFT          reduce using rule 280 (operator_name -> MINUSEQOP .)
    LTCOMP          reduce using rule 280 (operator_name -> MINUSEQOP .)
    GTCOMP          reduce using rule 280 (operator_name -> MINUSEQOP .)
    LTECOMP         reduce using rule 280 (operator_name -> MINUSEQOP .)
    GTECOMP         reduce using rule 280 (operator_name -> MINUSEQOP .)
    EQCOMP          reduce using rule 280 (operator_name -> MINUSEQOP .)
    NEQCOMP         reduce using rule 280 (operator_name -> MINUSEQOP .)
    BANDOP          reduce using rule 280 (operator_name -> MINUSEQOP .)
    XOROP           reduce using rule 280 (operator_name -> MINUSEQOP .)
    OROP            reduce using rule 280 (operator_name -> MINUSEQOP .)
    ANDOP           reduce using rule 280 (operator_name -> MINUSEQOP .)
    QUESMARK        reduce using rule 280 (operator_name -> MINUSEQOP .)
    RSPAREN         reduce using rule 280 (operator_name -> MINUSEQOP .)
    RTEMPLATE       reduce using rule 280 (operator_name -> MINUSEQOP .)
    RCPAREN         reduce using rule 280 (operator_name -> MINUSEQOP .)
    COLON           reduce using rule 280 (operator_name -> MINUSEQOP .)


state 99

    (281) operator_name -> MULTEQOP .

    LPAREN          reduce using rule 281 (operator_name -> MULTEQOP .)
    LSPAREN         reduce using rule 281 (operator_name -> MULTEQOP .)
    EQUAL           reduce using rule 281 (operator_name -> MULTEQOP .)
    LCPAREN         reduce using rule 281 (operator_name -> MULTEQOP .)
    SEMICOLON       reduce using rule 281 (operator_name -> MULTEQOP .)
    COMMA           reduce using rule 281 (operator_name -> MULTEQOP .)
    RPAREN          reduce using rule 281 (operator_name -> MULTEQOP .)
    DOT             reduce using rule 281 (operator_name -> MULTEQOP .)
    ARROW           reduce using rule 281 (operator_name -> MULTEQOP .)
    DPLUSOP         reduce using rule 281 (operator_name -> MULTEQOP .)
    DMINUSOP        reduce using rule 281 (operator_name -> MULTEQOP .)
    LTEMPLATE       reduce using rule 281 (operator_name -> MULTEQOP .)
    MULTEQOP        reduce using rule 281 (operator_name -> MULTEQOP .)
    DIVEQOP         reduce using rule 281 (operator_name -> MULTEQOP .)
    MODEQOP         reduce using rule 281 (operator_name -> MULTEQOP .)
    PLUSEQOP        reduce using rule 281 (operator_name -> MULTEQOP .)
    MINUSEQOP       reduce using rule 281 (operator_name -> MULTEQOP .)
    LSHIFTEQOP      reduce using rule 281 (operator_name -> MULTEQOP .)
    RSHIFTEQOP      reduce using rule 281 (operator_name -> MULTEQOP .)
    BANDEQOP        reduce using rule 281 (operator_name -> MULTEQOP .)
    BOREQOP         reduce using rule 281 (operator_name -> MULTEQOP .)
    DOTSTAR         reduce using rule 281 (operator_name -> MULTEQOP .)
    ARROWSTAR       reduce using rule 281 (operator_name -> MULTEQOP .)
    MULTOP          reduce using rule 281 (operator_name -> MULTEQOP .)
    DIVOP           reduce using rule 281 (operator_name -> MULTEQOP .)
    MODOP           reduce using rule 281 (operator_name -> MULTEQOP .)
    PLUSOP          reduce using rule 281 (operator_name -> MULTEQOP .)
    MINUSOP         reduce using rule 281 (operator_name -> MULTEQOP .)
    LSHIFT          reduce using rule 281 (operator_name -> MULTEQOP .)
    RSHIFT          reduce using rule 281 (operator_name -> MULTEQOP .)
    LTCOMP          reduce using rule 281 (operator_name -> MULTEQOP .)
    GTCOMP          reduce using rule 281 (operator_name -> MULTEQOP .)
    LTECOMP         reduce using rule 281 (operator_name -> MULTEQOP .)
    GTECOMP         reduce using rule 281 (operator_name -> MULTEQOP .)
    EQCOMP          reduce using rule 281 (operator_name -> MULTEQOP .)
    NEQCOMP         reduce using rule 281 (operator_name -> MULTEQOP .)
    BANDOP          reduce using rule 281 (operator_name -> MULTEQOP .)
    XOROP           reduce using rule 281 (operator_name -> MULTEQOP .)
    OROP            reduce using rule 281 (operator_name -> MULTEQOP .)
    ANDOP           reduce using rule 281 (operator_name -> MULTEQOP .)
    QUESMARK        reduce using rule 281 (operator_name -> MULTEQOP .)
    RSPAREN         reduce using rule 281 (operator_name -> MULTEQOP .)
    RTEMPLATE       reduce using rule 281 (operator_name -> MULTEQOP .)
    RCPAREN         reduce using rule 281 (operator_name -> MULTEQOP .)
    COLON           reduce using rule 281 (operator_name -> MULTEQOP .)


state 100

    (282) operator_name -> DIVEQOP .

    LPAREN          reduce using rule 282 (operator_name -> DIVEQOP .)
    LSPAREN         reduce using rule 282 (operator_name -> DIVEQOP .)
    EQUAL           reduce using rule 282 (operator_name -> DIVEQOP .)
    LCPAREN         reduce using rule 282 (operator_name -> DIVEQOP .)
    SEMICOLON       reduce using rule 282 (operator_name -> DIVEQOP .)
    COMMA           reduce using rule 282 (operator_name -> DIVEQOP .)
    RPAREN          reduce using rule 282 (operator_name -> DIVEQOP .)
    DOT             reduce using rule 282 (operator_name -> DIVEQOP .)
    ARROW           reduce using rule 282 (operator_name -> DIVEQOP .)
    DPLUSOP         reduce using rule 282 (operator_name -> DIVEQOP .)
    DMINUSOP        reduce using rule 282 (operator_name -> DIVEQOP .)
    LTEMPLATE       reduce using rule 282 (operator_name -> DIVEQOP .)
    MULTEQOP        reduce using rule 282 (operator_name -> DIVEQOP .)
    DIVEQOP         reduce using rule 282 (operator_name -> DIVEQOP .)
    MODEQOP         reduce using rule 282 (operator_name -> DIVEQOP .)
    PLUSEQOP        reduce using rule 282 (operator_name -> DIVEQOP .)
    MINUSEQOP       reduce using rule 282 (operator_name -> DIVEQOP .)
    LSHIFTEQOP      reduce using rule 282 (operator_name -> DIVEQOP .)
    RSHIFTEQOP      reduce using rule 282 (operator_name -> DIVEQOP .)
    BANDEQOP        reduce using rule 282 (operator_name -> DIVEQOP .)
    BOREQOP         reduce using rule 282 (operator_name -> DIVEQOP .)
    DOTSTAR         reduce using rule 282 (operator_name -> DIVEQOP .)
    ARROWSTAR       reduce using rule 282 (operator_name -> DIVEQOP .)
    MULTOP          reduce using rule 282 (operator_name -> DIVEQOP .)
    DIVOP           reduce using rule 282 (operator_name -> DIVEQOP .)
    MODOP           reduce using rule 282 (operator_name -> DIVEQOP .)
    PLUSOP          reduce using rule 282 (operator_name -> DIVEQOP .)
    MINUSOP         reduce using rule 282 (operator_name -> DIVEQOP .)
    LSHIFT          reduce using rule 282 (operator_name -> DIVEQOP .)
    RSHIFT          reduce using rule 282 (operator_name -> DIVEQOP .)
    LTCOMP          reduce using rule 282 (operator_name -> DIVEQOP .)
    GTCOMP          reduce using rule 282 (operator_name -> DIVEQOP .)
    LTECOMP         reduce using rule 282 (operator_name -> DIVEQOP .)
    GTECOMP         reduce using rule 282 (operator_name -> DIVEQOP .)
    EQCOMP          reduce using rule 282 (operator_name -> DIVEQOP .)
    NEQCOMP         reduce using rule 282 (operator_name -> DIVEQOP .)
    BANDOP          reduce using rule 282 (operator_name -> DIVEQOP .)
    XOROP           reduce using rule 282 (operator_name -> DIVEQOP .)
    OROP            reduce using rule 282 (operator_name -> DIVEQOP .)
    ANDOP           reduce using rule 282 (operator_name -> DIVEQOP .)
    QUESMARK        reduce using rule 282 (operator_name -> DIVEQOP .)
    RSPAREN         reduce using rule 282 (operator_name -> DIVEQOP .)
    RTEMPLATE       reduce using rule 282 (operator_name -> DIVEQOP .)
    RCPAREN         reduce using rule 282 (operator_name -> DIVEQOP .)
    COLON           reduce using rule 282 (operator_name -> DIVEQOP .)


state 101

    (283) operator_name -> MODEQOP .

    LPAREN          reduce using rule 283 (operator_name -> MODEQOP .)
    LSPAREN         reduce using rule 283 (operator_name -> MODEQOP .)
    EQUAL           reduce using rule 283 (operator_name -> MODEQOP .)
    LCPAREN         reduce using rule 283 (operator_name -> MODEQOP .)
    SEMICOLON       reduce using rule 283 (operator_name -> MODEQOP .)
    COMMA           reduce using rule 283 (operator_name -> MODEQOP .)
    RPAREN          reduce using rule 283 (operator_name -> MODEQOP .)
    DOT             reduce using rule 283 (operator_name -> MODEQOP .)
    ARROW           reduce using rule 283 (operator_name -> MODEQOP .)
    DPLUSOP         reduce using rule 283 (operator_name -> MODEQOP .)
    DMINUSOP        reduce using rule 283 (operator_name -> MODEQOP .)
    LTEMPLATE       reduce using rule 283 (operator_name -> MODEQOP .)
    MULTEQOP        reduce using rule 283 (operator_name -> MODEQOP .)
    DIVEQOP         reduce using rule 283 (operator_name -> MODEQOP .)
    MODEQOP         reduce using rule 283 (operator_name -> MODEQOP .)
    PLUSEQOP        reduce using rule 283 (operator_name -> MODEQOP .)
    MINUSEQOP       reduce using rule 283 (operator_name -> MODEQOP .)
    LSHIFTEQOP      reduce using rule 283 (operator_name -> MODEQOP .)
    RSHIFTEQOP      reduce using rule 283 (operator_name -> MODEQOP .)
    BANDEQOP        reduce using rule 283 (operator_name -> MODEQOP .)
    BOREQOP         reduce using rule 283 (operator_name -> MODEQOP .)
    DOTSTAR         reduce using rule 283 (operator_name -> MODEQOP .)
    ARROWSTAR       reduce using rule 283 (operator_name -> MODEQOP .)
    MULTOP          reduce using rule 283 (operator_name -> MODEQOP .)
    DIVOP           reduce using rule 283 (operator_name -> MODEQOP .)
    MODOP           reduce using rule 283 (operator_name -> MODEQOP .)
    PLUSOP          reduce using rule 283 (operator_name -> MODEQOP .)
    MINUSOP         reduce using rule 283 (operator_name -> MODEQOP .)
    LSHIFT          reduce using rule 283 (operator_name -> MODEQOP .)
    RSHIFT          reduce using rule 283 (operator_name -> MODEQOP .)
    LTCOMP          reduce using rule 283 (operator_name -> MODEQOP .)
    GTCOMP          reduce using rule 283 (operator_name -> MODEQOP .)
    LTECOMP         reduce using rule 283 (operator_name -> MODEQOP .)
    GTECOMP         reduce using rule 283 (operator_name -> MODEQOP .)
    EQCOMP          reduce using rule 283 (operator_name -> MODEQOP .)
    NEQCOMP         reduce using rule 283 (operator_name -> MODEQOP .)
    BANDOP          reduce using rule 283 (operator_name -> MODEQOP .)
    XOROP           reduce using rule 283 (operator_name -> MODEQOP .)
    OROP            reduce using rule 283 (operator_name -> MODEQOP .)
    ANDOP           reduce using rule 283 (operator_name -> MODEQOP .)
    QUESMARK        reduce using rule 283 (operator_name -> MODEQOP .)
    RSPAREN         reduce using rule 283 (operator_name -> MODEQOP .)
    RTEMPLATE       reduce using rule 283 (operator_name -> MODEQOP .)
    RCPAREN         reduce using rule 283 (operator_name -> MODEQOP .)
    COLON           reduce using rule 283 (operator_name -> MODEQOP .)


state 102

    (284) operator_name -> XOREQOP .

    LPAREN          reduce using rule 284 (operator_name -> XOREQOP .)
    LSPAREN         reduce using rule 284 (operator_name -> XOREQOP .)
    EQUAL           reduce using rule 284 (operator_name -> XOREQOP .)
    LCPAREN         reduce using rule 284 (operator_name -> XOREQOP .)
    SEMICOLON       reduce using rule 284 (operator_name -> XOREQOP .)
    COMMA           reduce using rule 284 (operator_name -> XOREQOP .)
    RPAREN          reduce using rule 284 (operator_name -> XOREQOP .)
    DOT             reduce using rule 284 (operator_name -> XOREQOP .)
    ARROW           reduce using rule 284 (operator_name -> XOREQOP .)
    DPLUSOP         reduce using rule 284 (operator_name -> XOREQOP .)
    DMINUSOP        reduce using rule 284 (operator_name -> XOREQOP .)
    LTEMPLATE       reduce using rule 284 (operator_name -> XOREQOP .)
    MULTEQOP        reduce using rule 284 (operator_name -> XOREQOP .)
    DIVEQOP         reduce using rule 284 (operator_name -> XOREQOP .)
    MODEQOP         reduce using rule 284 (operator_name -> XOREQOP .)
    PLUSEQOP        reduce using rule 284 (operator_name -> XOREQOP .)
    MINUSEQOP       reduce using rule 284 (operator_name -> XOREQOP .)
    LSHIFTEQOP      reduce using rule 284 (operator_name -> XOREQOP .)
    RSHIFTEQOP      reduce using rule 284 (operator_name -> XOREQOP .)
    BANDEQOP        reduce using rule 284 (operator_name -> XOREQOP .)
    BOREQOP         reduce using rule 284 (operator_name -> XOREQOP .)
    DOTSTAR         reduce using rule 284 (operator_name -> XOREQOP .)
    ARROWSTAR       reduce using rule 284 (operator_name -> XOREQOP .)
    MULTOP          reduce using rule 284 (operator_name -> XOREQOP .)
    DIVOP           reduce using rule 284 (operator_name -> XOREQOP .)
    MODOP           reduce using rule 284 (operator_name -> XOREQOP .)
    PLUSOP          reduce using rule 284 (operator_name -> XOREQOP .)
    MINUSOP         reduce using rule 284 (operator_name -> XOREQOP .)
    LSHIFT          reduce using rule 284 (operator_name -> XOREQOP .)
    RSHIFT          reduce using rule 284 (operator_name -> XOREQOP .)
    LTCOMP          reduce using rule 284 (operator_name -> XOREQOP .)
    GTCOMP          reduce using rule 284 (operator_name -> XOREQOP .)
    LTECOMP         reduce using rule 284 (operator_name -> XOREQOP .)
    GTECOMP         reduce using rule 284 (operator_name -> XOREQOP .)
    EQCOMP          reduce using rule 284 (operator_name -> XOREQOP .)
    NEQCOMP         reduce using rule 284 (operator_name -> XOREQOP .)
    BANDOP          reduce using rule 284 (operator_name -> XOREQOP .)
    XOROP           reduce using rule 284 (operator_name -> XOREQOP .)
    OROP            reduce using rule 284 (operator_name -> XOREQOP .)
    ANDOP           reduce using rule 284 (operator_name -> XOREQOP .)
    QUESMARK        reduce using rule 284 (operator_name -> XOREQOP .)
    RSPAREN         reduce using rule 284 (operator_name -> XOREQOP .)
    RTEMPLATE       reduce using rule 284 (operator_name -> XOREQOP .)
    RCPAREN         reduce using rule 284 (operator_name -> XOREQOP .)
    COLON           reduce using rule 284 (operator_name -> XOREQOP .)


state 103

    (285) operator_name -> BANDEQOP .

    LPAREN          reduce using rule 285 (operator_name -> BANDEQOP .)
    LSPAREN         reduce using rule 285 (operator_name -> BANDEQOP .)
    EQUAL           reduce using rule 285 (operator_name -> BANDEQOP .)
    LCPAREN         reduce using rule 285 (operator_name -> BANDEQOP .)
    SEMICOLON       reduce using rule 285 (operator_name -> BANDEQOP .)
    COMMA           reduce using rule 285 (operator_name -> BANDEQOP .)
    RPAREN          reduce using rule 285 (operator_name -> BANDEQOP .)
    DOT             reduce using rule 285 (operator_name -> BANDEQOP .)
    ARROW           reduce using rule 285 (operator_name -> BANDEQOP .)
    DPLUSOP         reduce using rule 285 (operator_name -> BANDEQOP .)
    DMINUSOP        reduce using rule 285 (operator_name -> BANDEQOP .)
    LTEMPLATE       reduce using rule 285 (operator_name -> BANDEQOP .)
    MULTEQOP        reduce using rule 285 (operator_name -> BANDEQOP .)
    DIVEQOP         reduce using rule 285 (operator_name -> BANDEQOP .)
    MODEQOP         reduce using rule 285 (operator_name -> BANDEQOP .)
    PLUSEQOP        reduce using rule 285 (operator_name -> BANDEQOP .)
    MINUSEQOP       reduce using rule 285 (operator_name -> BANDEQOP .)
    LSHIFTEQOP      reduce using rule 285 (operator_name -> BANDEQOP .)
    RSHIFTEQOP      reduce using rule 285 (operator_name -> BANDEQOP .)
    BANDEQOP        reduce using rule 285 (operator_name -> BANDEQOP .)
    BOREQOP         reduce using rule 285 (operator_name -> BANDEQOP .)
    DOTSTAR         reduce using rule 285 (operator_name -> BANDEQOP .)
    ARROWSTAR       reduce using rule 285 (operator_name -> BANDEQOP .)
    MULTOP          reduce using rule 285 (operator_name -> BANDEQOP .)
    DIVOP           reduce using rule 285 (operator_name -> BANDEQOP .)
    MODOP           reduce using rule 285 (operator_name -> BANDEQOP .)
    PLUSOP          reduce using rule 285 (operator_name -> BANDEQOP .)
    MINUSOP         reduce using rule 285 (operator_name -> BANDEQOP .)
    LSHIFT          reduce using rule 285 (operator_name -> BANDEQOP .)
    RSHIFT          reduce using rule 285 (operator_name -> BANDEQOP .)
    LTCOMP          reduce using rule 285 (operator_name -> BANDEQOP .)
    GTCOMP          reduce using rule 285 (operator_name -> BANDEQOP .)
    LTECOMP         reduce using rule 285 (operator_name -> BANDEQOP .)
    GTECOMP         reduce using rule 285 (operator_name -> BANDEQOP .)
    EQCOMP          reduce using rule 285 (operator_name -> BANDEQOP .)
    NEQCOMP         reduce using rule 285 (operator_name -> BANDEQOP .)
    BANDOP          reduce using rule 285 (operator_name -> BANDEQOP .)
    XOROP           reduce using rule 285 (operator_name -> BANDEQOP .)
    OROP            reduce using rule 285 (operator_name -> BANDEQOP .)
    ANDOP           reduce using rule 285 (operator_name -> BANDEQOP .)
    QUESMARK        reduce using rule 285 (operator_name -> BANDEQOP .)
    RSPAREN         reduce using rule 285 (operator_name -> BANDEQOP .)
    RTEMPLATE       reduce using rule 285 (operator_name -> BANDEQOP .)
    RCPAREN         reduce using rule 285 (operator_name -> BANDEQOP .)
    COLON           reduce using rule 285 (operator_name -> BANDEQOP .)


state 104

    (286) operator_name -> LSHIFT .

    LPAREN          reduce using rule 286 (operator_name -> LSHIFT .)
    LSPAREN         reduce using rule 286 (operator_name -> LSHIFT .)
    EQUAL           reduce using rule 286 (operator_name -> LSHIFT .)
    LCPAREN         reduce using rule 286 (operator_name -> LSHIFT .)
    SEMICOLON       reduce using rule 286 (operator_name -> LSHIFT .)
    COMMA           reduce using rule 286 (operator_name -> LSHIFT .)
    RPAREN          reduce using rule 286 (operator_name -> LSHIFT .)
    DOT             reduce using rule 286 (operator_name -> LSHIFT .)
    ARROW           reduce using rule 286 (operator_name -> LSHIFT .)
    DPLUSOP         reduce using rule 286 (operator_name -> LSHIFT .)
    DMINUSOP        reduce using rule 286 (operator_name -> LSHIFT .)
    LTEMPLATE       reduce using rule 286 (operator_name -> LSHIFT .)
    MULTEQOP        reduce using rule 286 (operator_name -> LSHIFT .)
    DIVEQOP         reduce using rule 286 (operator_name -> LSHIFT .)
    MODEQOP         reduce using rule 286 (operator_name -> LSHIFT .)
    PLUSEQOP        reduce using rule 286 (operator_name -> LSHIFT .)
    MINUSEQOP       reduce using rule 286 (operator_name -> LSHIFT .)
    LSHIFTEQOP      reduce using rule 286 (operator_name -> LSHIFT .)
    RSHIFTEQOP      reduce using rule 286 (operator_name -> LSHIFT .)
    BANDEQOP        reduce using rule 286 (operator_name -> LSHIFT .)
    BOREQOP         reduce using rule 286 (operator_name -> LSHIFT .)
    DOTSTAR         reduce using rule 286 (operator_name -> LSHIFT .)
    ARROWSTAR       reduce using rule 286 (operator_name -> LSHIFT .)
    MULTOP          reduce using rule 286 (operator_name -> LSHIFT .)
    DIVOP           reduce using rule 286 (operator_name -> LSHIFT .)
    MODOP           reduce using rule 286 (operator_name -> LSHIFT .)
    PLUSOP          reduce using rule 286 (operator_name -> LSHIFT .)
    MINUSOP         reduce using rule 286 (operator_name -> LSHIFT .)
    LSHIFT          reduce using rule 286 (operator_name -> LSHIFT .)
    RSHIFT          reduce using rule 286 (operator_name -> LSHIFT .)
    LTCOMP          reduce using rule 286 (operator_name -> LSHIFT .)
    GTCOMP          reduce using rule 286 (operator_name -> LSHIFT .)
    LTECOMP         reduce using rule 286 (operator_name -> LSHIFT .)
    GTECOMP         reduce using rule 286 (operator_name -> LSHIFT .)
    EQCOMP          reduce using rule 286 (operator_name -> LSHIFT .)
    NEQCOMP         reduce using rule 286 (operator_name -> LSHIFT .)
    BANDOP          reduce using rule 286 (operator_name -> LSHIFT .)
    XOROP           reduce using rule 286 (operator_name -> LSHIFT .)
    OROP            reduce using rule 286 (operator_name -> LSHIFT .)
    ANDOP           reduce using rule 286 (operator_name -> LSHIFT .)
    QUESMARK        reduce using rule 286 (operator_name -> LSHIFT .)
    RSPAREN         reduce using rule 286 (operator_name -> LSHIFT .)
    RTEMPLATE       reduce using rule 286 (operator_name -> LSHIFT .)
    RCPAREN         reduce using rule 286 (operator_name -> LSHIFT .)
    COLON           reduce using rule 286 (operator_name -> LSHIFT .)


state 105

    (287) operator_name -> RSHIFT .

    LPAREN          reduce using rule 287 (operator_name -> RSHIFT .)
    LSPAREN         reduce using rule 287 (operator_name -> RSHIFT .)
    EQUAL           reduce using rule 287 (operator_name -> RSHIFT .)
    LCPAREN         reduce using rule 287 (operator_name -> RSHIFT .)
    SEMICOLON       reduce using rule 287 (operator_name -> RSHIFT .)
    COMMA           reduce using rule 287 (operator_name -> RSHIFT .)
    RPAREN          reduce using rule 287 (operator_name -> RSHIFT .)
    DOT             reduce using rule 287 (operator_name -> RSHIFT .)
    ARROW           reduce using rule 287 (operator_name -> RSHIFT .)
    DPLUSOP         reduce using rule 287 (operator_name -> RSHIFT .)
    DMINUSOP        reduce using rule 287 (operator_name -> RSHIFT .)
    LTEMPLATE       reduce using rule 287 (operator_name -> RSHIFT .)
    MULTEQOP        reduce using rule 287 (operator_name -> RSHIFT .)
    DIVEQOP         reduce using rule 287 (operator_name -> RSHIFT .)
    MODEQOP         reduce using rule 287 (operator_name -> RSHIFT .)
    PLUSEQOP        reduce using rule 287 (operator_name -> RSHIFT .)
    MINUSEQOP       reduce using rule 287 (operator_name -> RSHIFT .)
    LSHIFTEQOP      reduce using rule 287 (operator_name -> RSHIFT .)
    RSHIFTEQOP      reduce using rule 287 (operator_name -> RSHIFT .)
    BANDEQOP        reduce using rule 287 (operator_name -> RSHIFT .)
    BOREQOP         reduce using rule 287 (operator_name -> RSHIFT .)
    DOTSTAR         reduce using rule 287 (operator_name -> RSHIFT .)
    ARROWSTAR       reduce using rule 287 (operator_name -> RSHIFT .)
    MULTOP          reduce using rule 287 (operator_name -> RSHIFT .)
    DIVOP           reduce using rule 287 (operator_name -> RSHIFT .)
    MODOP           reduce using rule 287 (operator_name -> RSHIFT .)
    PLUSOP          reduce using rule 287 (operator_name -> RSHIFT .)
    MINUSOP         reduce using rule 287 (operator_name -> RSHIFT .)
    LSHIFT          reduce using rule 287 (operator_name -> RSHIFT .)
    RSHIFT          reduce using rule 287 (operator_name -> RSHIFT .)
    LTCOMP          reduce using rule 287 (operator_name -> RSHIFT .)
    GTCOMP          reduce using rule 287 (operator_name -> RSHIFT .)
    LTECOMP         reduce using rule 287 (operator_name -> RSHIFT .)
    GTECOMP         reduce using rule 287 (operator_name -> RSHIFT .)
    EQCOMP          reduce using rule 287 (operator_name -> RSHIFT .)
    NEQCOMP         reduce using rule 287 (operator_name -> RSHIFT .)
    BANDOP          reduce using rule 287 (operator_name -> RSHIFT .)
    XOROP           reduce using rule 287 (operator_name -> RSHIFT .)
    OROP            reduce using rule 287 (operator_name -> RSHIFT .)
    ANDOP           reduce using rule 287 (operator_name -> RSHIFT .)
    QUESMARK        reduce using rule 287 (operator_name -> RSHIFT .)
    RSPAREN         reduce using rule 287 (operator_name -> RSHIFT .)
    RTEMPLATE       reduce using rule 287 (operator_name -> RSHIFT .)
    RCPAREN         reduce using rule 287 (operator_name -> RSHIFT .)
    COLON           reduce using rule 287 (operator_name -> RSHIFT .)


state 106

    (288) operator_name -> RSHIFTEQOP .

    LPAREN          reduce using rule 288 (operator_name -> RSHIFTEQOP .)
    LSPAREN         reduce using rule 288 (operator_name -> RSHIFTEQOP .)
    EQUAL           reduce using rule 288 (operator_name -> RSHIFTEQOP .)
    LCPAREN         reduce using rule 288 (operator_name -> RSHIFTEQOP .)
    SEMICOLON       reduce using rule 288 (operator_name -> RSHIFTEQOP .)
    COMMA           reduce using rule 288 (operator_name -> RSHIFTEQOP .)
    RPAREN          reduce using rule 288 (operator_name -> RSHIFTEQOP .)
    DOT             reduce using rule 288 (operator_name -> RSHIFTEQOP .)
    ARROW           reduce using rule 288 (operator_name -> RSHIFTEQOP .)
    DPLUSOP         reduce using rule 288 (operator_name -> RSHIFTEQOP .)
    DMINUSOP        reduce using rule 288 (operator_name -> RSHIFTEQOP .)
    LTEMPLATE       reduce using rule 288 (operator_name -> RSHIFTEQOP .)
    MULTEQOP        reduce using rule 288 (operator_name -> RSHIFTEQOP .)
    DIVEQOP         reduce using rule 288 (operator_name -> RSHIFTEQOP .)
    MODEQOP         reduce using rule 288 (operator_name -> RSHIFTEQOP .)
    PLUSEQOP        reduce using rule 288 (operator_name -> RSHIFTEQOP .)
    MINUSEQOP       reduce using rule 288 (operator_name -> RSHIFTEQOP .)
    LSHIFTEQOP      reduce using rule 288 (operator_name -> RSHIFTEQOP .)
    RSHIFTEQOP      reduce using rule 288 (operator_name -> RSHIFTEQOP .)
    BANDEQOP        reduce using rule 288 (operator_name -> RSHIFTEQOP .)
    BOREQOP         reduce using rule 288 (operator_name -> RSHIFTEQOP .)
    DOTSTAR         reduce using rule 288 (operator_name -> RSHIFTEQOP .)
    ARROWSTAR       reduce using rule 288 (operator_name -> RSHIFTEQOP .)
    MULTOP          reduce using rule 288 (operator_name -> RSHIFTEQOP .)
    DIVOP           reduce using rule 288 (operator_name -> RSHIFTEQOP .)
    MODOP           reduce using rule 288 (operator_name -> RSHIFTEQOP .)
    PLUSOP          reduce using rule 288 (operator_name -> RSHIFTEQOP .)
    MINUSOP         reduce using rule 288 (operator_name -> RSHIFTEQOP .)
    LSHIFT          reduce using rule 288 (operator_name -> RSHIFTEQOP .)
    RSHIFT          reduce using rule 288 (operator_name -> RSHIFTEQOP .)
    LTCOMP          reduce using rule 288 (operator_name -> RSHIFTEQOP .)
    GTCOMP          reduce using rule 288 (operator_name -> RSHIFTEQOP .)
    LTECOMP         reduce using rule 288 (operator_name -> RSHIFTEQOP .)
    GTECOMP         reduce using rule 288 (operator_name -> RSHIFTEQOP .)
    EQCOMP          reduce using rule 288 (operator_name -> RSHIFTEQOP .)
    NEQCOMP         reduce using rule 288 (operator_name -> RSHIFTEQOP .)
    BANDOP          reduce using rule 288 (operator_name -> RSHIFTEQOP .)
    XOROP           reduce using rule 288 (operator_name -> RSHIFTEQOP .)
    OROP            reduce using rule 288 (operator_name -> RSHIFTEQOP .)
    ANDOP           reduce using rule 288 (operator_name -> RSHIFTEQOP .)
    QUESMARK        reduce using rule 288 (operator_name -> RSHIFTEQOP .)
    RSPAREN         reduce using rule 288 (operator_name -> RSHIFTEQOP .)
    RTEMPLATE       reduce using rule 288 (operator_name -> RSHIFTEQOP .)
    RCPAREN         reduce using rule 288 (operator_name -> RSHIFTEQOP .)
    COLON           reduce using rule 288 (operator_name -> RSHIFTEQOP .)


state 107

    (289) operator_name -> LSHIFTEQOP .

    LPAREN          reduce using rule 289 (operator_name -> LSHIFTEQOP .)
    LSPAREN         reduce using rule 289 (operator_name -> LSHIFTEQOP .)
    EQUAL           reduce using rule 289 (operator_name -> LSHIFTEQOP .)
    LCPAREN         reduce using rule 289 (operator_name -> LSHIFTEQOP .)
    SEMICOLON       reduce using rule 289 (operator_name -> LSHIFTEQOP .)
    COMMA           reduce using rule 289 (operator_name -> LSHIFTEQOP .)
    RPAREN          reduce using rule 289 (operator_name -> LSHIFTEQOP .)
    DOT             reduce using rule 289 (operator_name -> LSHIFTEQOP .)
    ARROW           reduce using rule 289 (operator_name -> LSHIFTEQOP .)
    DPLUSOP         reduce using rule 289 (operator_name -> LSHIFTEQOP .)
    DMINUSOP        reduce using rule 289 (operator_name -> LSHIFTEQOP .)
    LTEMPLATE       reduce using rule 289 (operator_name -> LSHIFTEQOP .)
    MULTEQOP        reduce using rule 289 (operator_name -> LSHIFTEQOP .)
    DIVEQOP         reduce using rule 289 (operator_name -> LSHIFTEQOP .)
    MODEQOP         reduce using rule 289 (operator_name -> LSHIFTEQOP .)
    PLUSEQOP        reduce using rule 289 (operator_name -> LSHIFTEQOP .)
    MINUSEQOP       reduce using rule 289 (operator_name -> LSHIFTEQOP .)
    LSHIFTEQOP      reduce using rule 289 (operator_name -> LSHIFTEQOP .)
    RSHIFTEQOP      reduce using rule 289 (operator_name -> LSHIFTEQOP .)
    BANDEQOP        reduce using rule 289 (operator_name -> LSHIFTEQOP .)
    BOREQOP         reduce using rule 289 (operator_name -> LSHIFTEQOP .)
    DOTSTAR         reduce using rule 289 (operator_name -> LSHIFTEQOP .)
    ARROWSTAR       reduce using rule 289 (operator_name -> LSHIFTEQOP .)
    MULTOP          reduce using rule 289 (operator_name -> LSHIFTEQOP .)
    DIVOP           reduce using rule 289 (operator_name -> LSHIFTEQOP .)
    MODOP           reduce using rule 289 (operator_name -> LSHIFTEQOP .)
    PLUSOP          reduce using rule 289 (operator_name -> LSHIFTEQOP .)
    MINUSOP         reduce using rule 289 (operator_name -> LSHIFTEQOP .)
    LSHIFT          reduce using rule 289 (operator_name -> LSHIFTEQOP .)
    RSHIFT          reduce using rule 289 (operator_name -> LSHIFTEQOP .)
    LTCOMP          reduce using rule 289 (operator_name -> LSHIFTEQOP .)
    GTCOMP          reduce using rule 289 (operator_name -> LSHIFTEQOP .)
    LTECOMP         reduce using rule 289 (operator_name -> LSHIFTEQOP .)
    GTECOMP         reduce using rule 289 (operator_name -> LSHIFTEQOP .)
    EQCOMP          reduce using rule 289 (operator_name -> LSHIFTEQOP .)
    NEQCOMP         reduce using rule 289 (operator_name -> LSHIFTEQOP .)
    BANDOP          reduce using rule 289 (operator_name -> LSHIFTEQOP .)
    XOROP           reduce using rule 289 (operator_name -> LSHIFTEQOP .)
    OROP            reduce using rule 289 (operator_name -> LSHIFTEQOP .)
    ANDOP           reduce using rule 289 (operator_name -> LSHIFTEQOP .)
    QUESMARK        reduce using rule 289 (operator_name -> LSHIFTEQOP .)
    RSPAREN         reduce using rule 289 (operator_name -> LSHIFTEQOP .)
    RTEMPLATE       reduce using rule 289 (operator_name -> LSHIFTEQOP .)
    RCPAREN         reduce using rule 289 (operator_name -> LSHIFTEQOP .)
    COLON           reduce using rule 289 (operator_name -> LSHIFTEQOP .)


state 108

    (290) operator_name -> EQCOMP .

    LPAREN          reduce using rule 290 (operator_name -> EQCOMP .)
    LSPAREN         reduce using rule 290 (operator_name -> EQCOMP .)
    EQUAL           reduce using rule 290 (operator_name -> EQCOMP .)
    LCPAREN         reduce using rule 290 (operator_name -> EQCOMP .)
    SEMICOLON       reduce using rule 290 (operator_name -> EQCOMP .)
    COMMA           reduce using rule 290 (operator_name -> EQCOMP .)
    RPAREN          reduce using rule 290 (operator_name -> EQCOMP .)
    DOT             reduce using rule 290 (operator_name -> EQCOMP .)
    ARROW           reduce using rule 290 (operator_name -> EQCOMP .)
    DPLUSOP         reduce using rule 290 (operator_name -> EQCOMP .)
    DMINUSOP        reduce using rule 290 (operator_name -> EQCOMP .)
    LTEMPLATE       reduce using rule 290 (operator_name -> EQCOMP .)
    MULTEQOP        reduce using rule 290 (operator_name -> EQCOMP .)
    DIVEQOP         reduce using rule 290 (operator_name -> EQCOMP .)
    MODEQOP         reduce using rule 290 (operator_name -> EQCOMP .)
    PLUSEQOP        reduce using rule 290 (operator_name -> EQCOMP .)
    MINUSEQOP       reduce using rule 290 (operator_name -> EQCOMP .)
    LSHIFTEQOP      reduce using rule 290 (operator_name -> EQCOMP .)
    RSHIFTEQOP      reduce using rule 290 (operator_name -> EQCOMP .)
    BANDEQOP        reduce using rule 290 (operator_name -> EQCOMP .)
    BOREQOP         reduce using rule 290 (operator_name -> EQCOMP .)
    DOTSTAR         reduce using rule 290 (operator_name -> EQCOMP .)
    ARROWSTAR       reduce using rule 290 (operator_name -> EQCOMP .)
    MULTOP          reduce using rule 290 (operator_name -> EQCOMP .)
    DIVOP           reduce using rule 290 (operator_name -> EQCOMP .)
    MODOP           reduce using rule 290 (operator_name -> EQCOMP .)
    PLUSOP          reduce using rule 290 (operator_name -> EQCOMP .)
    MINUSOP         reduce using rule 290 (operator_name -> EQCOMP .)
    LSHIFT          reduce using rule 290 (operator_name -> EQCOMP .)
    RSHIFT          reduce using rule 290 (operator_name -> EQCOMP .)
    LTCOMP          reduce using rule 290 (operator_name -> EQCOMP .)
    GTCOMP          reduce using rule 290 (operator_name -> EQCOMP .)
    LTECOMP         reduce using rule 290 (operator_name -> EQCOMP .)
    GTECOMP         reduce using rule 290 (operator_name -> EQCOMP .)
    EQCOMP          reduce using rule 290 (operator_name -> EQCOMP .)
    NEQCOMP         reduce using rule 290 (operator_name -> EQCOMP .)
    BANDOP          reduce using rule 290 (operator_name -> EQCOMP .)
    XOROP           reduce using rule 290 (operator_name -> EQCOMP .)
    OROP            reduce using rule 290 (operator_name -> EQCOMP .)
    ANDOP           reduce using rule 290 (operator_name -> EQCOMP .)
    QUESMARK        reduce using rule 290 (operator_name -> EQCOMP .)
    RSPAREN         reduce using rule 290 (operator_name -> EQCOMP .)
    RTEMPLATE       reduce using rule 290 (operator_name -> EQCOMP .)
    RCPAREN         reduce using rule 290 (operator_name -> EQCOMP .)
    COLON           reduce using rule 290 (operator_name -> EQCOMP .)


state 109

    (291) operator_name -> NEQCOMP .

    LPAREN          reduce using rule 291 (operator_name -> NEQCOMP .)
    LSPAREN         reduce using rule 291 (operator_name -> NEQCOMP .)
    EQUAL           reduce using rule 291 (operator_name -> NEQCOMP .)
    LCPAREN         reduce using rule 291 (operator_name -> NEQCOMP .)
    SEMICOLON       reduce using rule 291 (operator_name -> NEQCOMP .)
    COMMA           reduce using rule 291 (operator_name -> NEQCOMP .)
    RPAREN          reduce using rule 291 (operator_name -> NEQCOMP .)
    DOT             reduce using rule 291 (operator_name -> NEQCOMP .)
    ARROW           reduce using rule 291 (operator_name -> NEQCOMP .)
    DPLUSOP         reduce using rule 291 (operator_name -> NEQCOMP .)
    DMINUSOP        reduce using rule 291 (operator_name -> NEQCOMP .)
    LTEMPLATE       reduce using rule 291 (operator_name -> NEQCOMP .)
    MULTEQOP        reduce using rule 291 (operator_name -> NEQCOMP .)
    DIVEQOP         reduce using rule 291 (operator_name -> NEQCOMP .)
    MODEQOP         reduce using rule 291 (operator_name -> NEQCOMP .)
    PLUSEQOP        reduce using rule 291 (operator_name -> NEQCOMP .)
    MINUSEQOP       reduce using rule 291 (operator_name -> NEQCOMP .)
    LSHIFTEQOP      reduce using rule 291 (operator_name -> NEQCOMP .)
    RSHIFTEQOP      reduce using rule 291 (operator_name -> NEQCOMP .)
    BANDEQOP        reduce using rule 291 (operator_name -> NEQCOMP .)
    BOREQOP         reduce using rule 291 (operator_name -> NEQCOMP .)
    DOTSTAR         reduce using rule 291 (operator_name -> NEQCOMP .)
    ARROWSTAR       reduce using rule 291 (operator_name -> NEQCOMP .)
    MULTOP          reduce using rule 291 (operator_name -> NEQCOMP .)
    DIVOP           reduce using rule 291 (operator_name -> NEQCOMP .)
    MODOP           reduce using rule 291 (operator_name -> NEQCOMP .)
    PLUSOP          reduce using rule 291 (operator_name -> NEQCOMP .)
    MINUSOP         reduce using rule 291 (operator_name -> NEQCOMP .)
    LSHIFT          reduce using rule 291 (operator_name -> NEQCOMP .)
    RSHIFT          reduce using rule 291 (operator_name -> NEQCOMP .)
    LTCOMP          reduce using rule 291 (operator_name -> NEQCOMP .)
    GTCOMP          reduce using rule 291 (operator_name -> NEQCOMP .)
    LTECOMP         reduce using rule 291 (operator_name -> NEQCOMP .)
    GTECOMP         reduce using rule 291 (operator_name -> NEQCOMP .)
    EQCOMP          reduce using rule 291 (operator_name -> NEQCOMP .)
    NEQCOMP         reduce using rule 291 (operator_name -> NEQCOMP .)
    BANDOP          reduce using rule 291 (operator_name -> NEQCOMP .)
    XOROP           reduce using rule 291 (operator_name -> NEQCOMP .)
    OROP            reduce using rule 291 (operator_name -> NEQCOMP .)
    ANDOP           reduce using rule 291 (operator_name -> NEQCOMP .)
    QUESMARK        reduce using rule 291 (operator_name -> NEQCOMP .)
    RSPAREN         reduce using rule 291 (operator_name -> NEQCOMP .)
    RTEMPLATE       reduce using rule 291 (operator_name -> NEQCOMP .)
    RCPAREN         reduce using rule 291 (operator_name -> NEQCOMP .)
    COLON           reduce using rule 291 (operator_name -> NEQCOMP .)


state 110

    (292) operator_name -> LTECOMP .

    LPAREN          reduce using rule 292 (operator_name -> LTECOMP .)
    LSPAREN         reduce using rule 292 (operator_name -> LTECOMP .)
    EQUAL           reduce using rule 292 (operator_name -> LTECOMP .)
    LCPAREN         reduce using rule 292 (operator_name -> LTECOMP .)
    SEMICOLON       reduce using rule 292 (operator_name -> LTECOMP .)
    COMMA           reduce using rule 292 (operator_name -> LTECOMP .)
    RPAREN          reduce using rule 292 (operator_name -> LTECOMP .)
    DOT             reduce using rule 292 (operator_name -> LTECOMP .)
    ARROW           reduce using rule 292 (operator_name -> LTECOMP .)
    DPLUSOP         reduce using rule 292 (operator_name -> LTECOMP .)
    DMINUSOP        reduce using rule 292 (operator_name -> LTECOMP .)
    LTEMPLATE       reduce using rule 292 (operator_name -> LTECOMP .)
    MULTEQOP        reduce using rule 292 (operator_name -> LTECOMP .)
    DIVEQOP         reduce using rule 292 (operator_name -> LTECOMP .)
    MODEQOP         reduce using rule 292 (operator_name -> LTECOMP .)
    PLUSEQOP        reduce using rule 292 (operator_name -> LTECOMP .)
    MINUSEQOP       reduce using rule 292 (operator_name -> LTECOMP .)
    LSHIFTEQOP      reduce using rule 292 (operator_name -> LTECOMP .)
    RSHIFTEQOP      reduce using rule 292 (operator_name -> LTECOMP .)
    BANDEQOP        reduce using rule 292 (operator_name -> LTECOMP .)
    BOREQOP         reduce using rule 292 (operator_name -> LTECOMP .)
    DOTSTAR         reduce using rule 292 (operator_name -> LTECOMP .)
    ARROWSTAR       reduce using rule 292 (operator_name -> LTECOMP .)
    MULTOP          reduce using rule 292 (operator_name -> LTECOMP .)
    DIVOP           reduce using rule 292 (operator_name -> LTECOMP .)
    MODOP           reduce using rule 292 (operator_name -> LTECOMP .)
    PLUSOP          reduce using rule 292 (operator_name -> LTECOMP .)
    MINUSOP         reduce using rule 292 (operator_name -> LTECOMP .)
    LSHIFT          reduce using rule 292 (operator_name -> LTECOMP .)
    RSHIFT          reduce using rule 292 (operator_name -> LTECOMP .)
    LTCOMP          reduce using rule 292 (operator_name -> LTECOMP .)
    GTCOMP          reduce using rule 292 (operator_name -> LTECOMP .)
    LTECOMP         reduce using rule 292 (operator_name -> LTECOMP .)
    GTECOMP         reduce using rule 292 (operator_name -> LTECOMP .)
    EQCOMP          reduce using rule 292 (operator_name -> LTECOMP .)
    NEQCOMP         reduce using rule 292 (operator_name -> LTECOMP .)
    BANDOP          reduce using rule 292 (operator_name -> LTECOMP .)
    XOROP           reduce using rule 292 (operator_name -> LTECOMP .)
    OROP            reduce using rule 292 (operator_name -> LTECOMP .)
    ANDOP           reduce using rule 292 (operator_name -> LTECOMP .)
    QUESMARK        reduce using rule 292 (operator_name -> LTECOMP .)
    RSPAREN         reduce using rule 292 (operator_name -> LTECOMP .)
    RTEMPLATE       reduce using rule 292 (operator_name -> LTECOMP .)
    RCPAREN         reduce using rule 292 (operator_name -> LTECOMP .)
    COLON           reduce using rule 292 (operator_name -> LTECOMP .)


state 111

    (293) operator_name -> GTECOMP .

    LPAREN          reduce using rule 293 (operator_name -> GTECOMP .)
    LSPAREN         reduce using rule 293 (operator_name -> GTECOMP .)
    EQUAL           reduce using rule 293 (operator_name -> GTECOMP .)
    LCPAREN         reduce using rule 293 (operator_name -> GTECOMP .)
    SEMICOLON       reduce using rule 293 (operator_name -> GTECOMP .)
    COMMA           reduce using rule 293 (operator_name -> GTECOMP .)
    RPAREN          reduce using rule 293 (operator_name -> GTECOMP .)
    DOT             reduce using rule 293 (operator_name -> GTECOMP .)
    ARROW           reduce using rule 293 (operator_name -> GTECOMP .)
    DPLUSOP         reduce using rule 293 (operator_name -> GTECOMP .)
    DMINUSOP        reduce using rule 293 (operator_name -> GTECOMP .)
    LTEMPLATE       reduce using rule 293 (operator_name -> GTECOMP .)
    MULTEQOP        reduce using rule 293 (operator_name -> GTECOMP .)
    DIVEQOP         reduce using rule 293 (operator_name -> GTECOMP .)
    MODEQOP         reduce using rule 293 (operator_name -> GTECOMP .)
    PLUSEQOP        reduce using rule 293 (operator_name -> GTECOMP .)
    MINUSEQOP       reduce using rule 293 (operator_name -> GTECOMP .)
    LSHIFTEQOP      reduce using rule 293 (operator_name -> GTECOMP .)
    RSHIFTEQOP      reduce using rule 293 (operator_name -> GTECOMP .)
    BANDEQOP        reduce using rule 293 (operator_name -> GTECOMP .)
    BOREQOP         reduce using rule 293 (operator_name -> GTECOMP .)
    DOTSTAR         reduce using rule 293 (operator_name -> GTECOMP .)
    ARROWSTAR       reduce using rule 293 (operator_name -> GTECOMP .)
    MULTOP          reduce using rule 293 (operator_name -> GTECOMP .)
    DIVOP           reduce using rule 293 (operator_name -> GTECOMP .)
    MODOP           reduce using rule 293 (operator_name -> GTECOMP .)
    PLUSOP          reduce using rule 293 (operator_name -> GTECOMP .)
    MINUSOP         reduce using rule 293 (operator_name -> GTECOMP .)
    LSHIFT          reduce using rule 293 (operator_name -> GTECOMP .)
    RSHIFT          reduce using rule 293 (operator_name -> GTECOMP .)
    LTCOMP          reduce using rule 293 (operator_name -> GTECOMP .)
    GTCOMP          reduce using rule 293 (operator_name -> GTECOMP .)
    LTECOMP         reduce using rule 293 (operator_name -> GTECOMP .)
    GTECOMP         reduce using rule 293 (operator_name -> GTECOMP .)
    EQCOMP          reduce using rule 293 (operator_name -> GTECOMP .)
    NEQCOMP         reduce using rule 293 (operator_name -> GTECOMP .)
    BANDOP          reduce using rule 293 (operator_name -> GTECOMP .)
    XOROP           reduce using rule 293 (operator_name -> GTECOMP .)
    OROP            reduce using rule 293 (operator_name -> GTECOMP .)
    ANDOP           reduce using rule 293 (operator_name -> GTECOMP .)
    QUESMARK        reduce using rule 293 (operator_name -> GTECOMP .)
    RSPAREN         reduce using rule 293 (operator_name -> GTECOMP .)
    RTEMPLATE       reduce using rule 293 (operator_name -> GTECOMP .)
    RCPAREN         reduce using rule 293 (operator_name -> GTECOMP .)
    COLON           reduce using rule 293 (operator_name -> GTECOMP .)


state 112

    (294) operator_name -> ANDOP .

    LPAREN          reduce using rule 294 (operator_name -> ANDOP .)
    LSPAREN         reduce using rule 294 (operator_name -> ANDOP .)
    EQUAL           reduce using rule 294 (operator_name -> ANDOP .)
    LCPAREN         reduce using rule 294 (operator_name -> ANDOP .)
    SEMICOLON       reduce using rule 294 (operator_name -> ANDOP .)
    COMMA           reduce using rule 294 (operator_name -> ANDOP .)
    RPAREN          reduce using rule 294 (operator_name -> ANDOP .)
    DOT             reduce using rule 294 (operator_name -> ANDOP .)
    ARROW           reduce using rule 294 (operator_name -> ANDOP .)
    DPLUSOP         reduce using rule 294 (operator_name -> ANDOP .)
    DMINUSOP        reduce using rule 294 (operator_name -> ANDOP .)
    LTEMPLATE       reduce using rule 294 (operator_name -> ANDOP .)
    MULTEQOP        reduce using rule 294 (operator_name -> ANDOP .)
    DIVEQOP         reduce using rule 294 (operator_name -> ANDOP .)
    MODEQOP         reduce using rule 294 (operator_name -> ANDOP .)
    PLUSEQOP        reduce using rule 294 (operator_name -> ANDOP .)
    MINUSEQOP       reduce using rule 294 (operator_name -> ANDOP .)
    LSHIFTEQOP      reduce using rule 294 (operator_name -> ANDOP .)
    RSHIFTEQOP      reduce using rule 294 (operator_name -> ANDOP .)
    BANDEQOP        reduce using rule 294 (operator_name -> ANDOP .)
    BOREQOP         reduce using rule 294 (operator_name -> ANDOP .)
    DOTSTAR         reduce using rule 294 (operator_name -> ANDOP .)
    ARROWSTAR       reduce using rule 294 (operator_name -> ANDOP .)
    MULTOP          reduce using rule 294 (operator_name -> ANDOP .)
    DIVOP           reduce using rule 294 (operator_name -> ANDOP .)
    MODOP           reduce using rule 294 (operator_name -> ANDOP .)
    PLUSOP          reduce using rule 294 (operator_name -> ANDOP .)
    MINUSOP         reduce using rule 294 (operator_name -> ANDOP .)
    LSHIFT          reduce using rule 294 (operator_name -> ANDOP .)
    RSHIFT          reduce using rule 294 (operator_name -> ANDOP .)
    LTCOMP          reduce using rule 294 (operator_name -> ANDOP .)
    GTCOMP          reduce using rule 294 (operator_name -> ANDOP .)
    LTECOMP         reduce using rule 294 (operator_name -> ANDOP .)
    GTECOMP         reduce using rule 294 (operator_name -> ANDOP .)
    EQCOMP          reduce using rule 294 (operator_name -> ANDOP .)
    NEQCOMP         reduce using rule 294 (operator_name -> ANDOP .)
    BANDOP          reduce using rule 294 (operator_name -> ANDOP .)
    XOROP           reduce using rule 294 (operator_name -> ANDOP .)
    OROP            reduce using rule 294 (operator_name -> ANDOP .)
    ANDOP           reduce using rule 294 (operator_name -> ANDOP .)
    QUESMARK        reduce using rule 294 (operator_name -> ANDOP .)
    RSPAREN         reduce using rule 294 (operator_name -> ANDOP .)
    RTEMPLATE       reduce using rule 294 (operator_name -> ANDOP .)
    RCPAREN         reduce using rule 294 (operator_name -> ANDOP .)
    COLON           reduce using rule 294 (operator_name -> ANDOP .)


state 113

    (295) operator_name -> OROP .

    LPAREN          reduce using rule 295 (operator_name -> OROP .)
    LSPAREN         reduce using rule 295 (operator_name -> OROP .)
    EQUAL           reduce using rule 295 (operator_name -> OROP .)
    LCPAREN         reduce using rule 295 (operator_name -> OROP .)
    SEMICOLON       reduce using rule 295 (operator_name -> OROP .)
    COMMA           reduce using rule 295 (operator_name -> OROP .)
    RPAREN          reduce using rule 295 (operator_name -> OROP .)
    DOT             reduce using rule 295 (operator_name -> OROP .)
    ARROW           reduce using rule 295 (operator_name -> OROP .)
    DPLUSOP         reduce using rule 295 (operator_name -> OROP .)
    DMINUSOP        reduce using rule 295 (operator_name -> OROP .)
    LTEMPLATE       reduce using rule 295 (operator_name -> OROP .)
    MULTEQOP        reduce using rule 295 (operator_name -> OROP .)
    DIVEQOP         reduce using rule 295 (operator_name -> OROP .)
    MODEQOP         reduce using rule 295 (operator_name -> OROP .)
    PLUSEQOP        reduce using rule 295 (operator_name -> OROP .)
    MINUSEQOP       reduce using rule 295 (operator_name -> OROP .)
    LSHIFTEQOP      reduce using rule 295 (operator_name -> OROP .)
    RSHIFTEQOP      reduce using rule 295 (operator_name -> OROP .)
    BANDEQOP        reduce using rule 295 (operator_name -> OROP .)
    BOREQOP         reduce using rule 295 (operator_name -> OROP .)
    DOTSTAR         reduce using rule 295 (operator_name -> OROP .)
    ARROWSTAR       reduce using rule 295 (operator_name -> OROP .)
    MULTOP          reduce using rule 295 (operator_name -> OROP .)
    DIVOP           reduce using rule 295 (operator_name -> OROP .)
    MODOP           reduce using rule 295 (operator_name -> OROP .)
    PLUSOP          reduce using rule 295 (operator_name -> OROP .)
    MINUSOP         reduce using rule 295 (operator_name -> OROP .)
    LSHIFT          reduce using rule 295 (operator_name -> OROP .)
    RSHIFT          reduce using rule 295 (operator_name -> OROP .)
    LTCOMP          reduce using rule 295 (operator_name -> OROP .)
    GTCOMP          reduce using rule 295 (operator_name -> OROP .)
    LTECOMP         reduce using rule 295 (operator_name -> OROP .)
    GTECOMP         reduce using rule 295 (operator_name -> OROP .)
    EQCOMP          reduce using rule 295 (operator_name -> OROP .)
    NEQCOMP         reduce using rule 295 (operator_name -> OROP .)
    BANDOP          reduce using rule 295 (operator_name -> OROP .)
    XOROP           reduce using rule 295 (operator_name -> OROP .)
    OROP            reduce using rule 295 (operator_name -> OROP .)
    ANDOP           reduce using rule 295 (operator_name -> OROP .)
    QUESMARK        reduce using rule 295 (operator_name -> OROP .)
    RSPAREN         reduce using rule 295 (operator_name -> OROP .)
    RTEMPLATE       reduce using rule 295 (operator_name -> OROP .)
    RCPAREN         reduce using rule 295 (operator_name -> OROP .)
    COLON           reduce using rule 295 (operator_name -> OROP .)


state 114

    (296) operator_name -> DPLUSOP .

    LPAREN          reduce using rule 296 (operator_name -> DPLUSOP .)
    LSPAREN         reduce using rule 296 (operator_name -> DPLUSOP .)
    EQUAL           reduce using rule 296 (operator_name -> DPLUSOP .)
    LCPAREN         reduce using rule 296 (operator_name -> DPLUSOP .)
    SEMICOLON       reduce using rule 296 (operator_name -> DPLUSOP .)
    COMMA           reduce using rule 296 (operator_name -> DPLUSOP .)
    RPAREN          reduce using rule 296 (operator_name -> DPLUSOP .)
    DOT             reduce using rule 296 (operator_name -> DPLUSOP .)
    ARROW           reduce using rule 296 (operator_name -> DPLUSOP .)
    DPLUSOP         reduce using rule 296 (operator_name -> DPLUSOP .)
    DMINUSOP        reduce using rule 296 (operator_name -> DPLUSOP .)
    LTEMPLATE       reduce using rule 296 (operator_name -> DPLUSOP .)
    MULTEQOP        reduce using rule 296 (operator_name -> DPLUSOP .)
    DIVEQOP         reduce using rule 296 (operator_name -> DPLUSOP .)
    MODEQOP         reduce using rule 296 (operator_name -> DPLUSOP .)
    PLUSEQOP        reduce using rule 296 (operator_name -> DPLUSOP .)
    MINUSEQOP       reduce using rule 296 (operator_name -> DPLUSOP .)
    LSHIFTEQOP      reduce using rule 296 (operator_name -> DPLUSOP .)
    RSHIFTEQOP      reduce using rule 296 (operator_name -> DPLUSOP .)
    BANDEQOP        reduce using rule 296 (operator_name -> DPLUSOP .)
    BOREQOP         reduce using rule 296 (operator_name -> DPLUSOP .)
    DOTSTAR         reduce using rule 296 (operator_name -> DPLUSOP .)
    ARROWSTAR       reduce using rule 296 (operator_name -> DPLUSOP .)
    MULTOP          reduce using rule 296 (operator_name -> DPLUSOP .)
    DIVOP           reduce using rule 296 (operator_name -> DPLUSOP .)
    MODOP           reduce using rule 296 (operator_name -> DPLUSOP .)
    PLUSOP          reduce using rule 296 (operator_name -> DPLUSOP .)
    MINUSOP         reduce using rule 296 (operator_name -> DPLUSOP .)
    LSHIFT          reduce using rule 296 (operator_name -> DPLUSOP .)
    RSHIFT          reduce using rule 296 (operator_name -> DPLUSOP .)
    LTCOMP          reduce using rule 296 (operator_name -> DPLUSOP .)
    GTCOMP          reduce using rule 296 (operator_name -> DPLUSOP .)
    LTECOMP         reduce using rule 296 (operator_name -> DPLUSOP .)
    GTECOMP         reduce using rule 296 (operator_name -> DPLUSOP .)
    EQCOMP          reduce using rule 296 (operator_name -> DPLUSOP .)
    NEQCOMP         reduce using rule 296 (operator_name -> DPLUSOP .)
    BANDOP          reduce using rule 296 (operator_name -> DPLUSOP .)
    XOROP           reduce using rule 296 (operator_name -> DPLUSOP .)
    OROP            reduce using rule 296 (operator_name -> DPLUSOP .)
    ANDOP           reduce using rule 296 (operator_name -> DPLUSOP .)
    QUESMARK        reduce using rule 296 (operator_name -> DPLUSOP .)
    RSPAREN         reduce using rule 296 (operator_name -> DPLUSOP .)
    RTEMPLATE       reduce using rule 296 (operator_name -> DPLUSOP .)
    RCPAREN         reduce using rule 296 (operator_name -> DPLUSOP .)
    COLON           reduce using rule 296 (operator_name -> DPLUSOP .)


state 115

    (297) operator_name -> DMINUSOP .

    LPAREN          reduce using rule 297 (operator_name -> DMINUSOP .)
    LSPAREN         reduce using rule 297 (operator_name -> DMINUSOP .)
    EQUAL           reduce using rule 297 (operator_name -> DMINUSOP .)
    LCPAREN         reduce using rule 297 (operator_name -> DMINUSOP .)
    SEMICOLON       reduce using rule 297 (operator_name -> DMINUSOP .)
    COMMA           reduce using rule 297 (operator_name -> DMINUSOP .)
    RPAREN          reduce using rule 297 (operator_name -> DMINUSOP .)
    DOT             reduce using rule 297 (operator_name -> DMINUSOP .)
    ARROW           reduce using rule 297 (operator_name -> DMINUSOP .)
    DPLUSOP         reduce using rule 297 (operator_name -> DMINUSOP .)
    DMINUSOP        reduce using rule 297 (operator_name -> DMINUSOP .)
    LTEMPLATE       reduce using rule 297 (operator_name -> DMINUSOP .)
    MULTEQOP        reduce using rule 297 (operator_name -> DMINUSOP .)
    DIVEQOP         reduce using rule 297 (operator_name -> DMINUSOP .)
    MODEQOP         reduce using rule 297 (operator_name -> DMINUSOP .)
    PLUSEQOP        reduce using rule 297 (operator_name -> DMINUSOP .)
    MINUSEQOP       reduce using rule 297 (operator_name -> DMINUSOP .)
    LSHIFTEQOP      reduce using rule 297 (operator_name -> DMINUSOP .)
    RSHIFTEQOP      reduce using rule 297 (operator_name -> DMINUSOP .)
    BANDEQOP        reduce using rule 297 (operator_name -> DMINUSOP .)
    BOREQOP         reduce using rule 297 (operator_name -> DMINUSOP .)
    DOTSTAR         reduce using rule 297 (operator_name -> DMINUSOP .)
    ARROWSTAR       reduce using rule 297 (operator_name -> DMINUSOP .)
    MULTOP          reduce using rule 297 (operator_name -> DMINUSOP .)
    DIVOP           reduce using rule 297 (operator_name -> DMINUSOP .)
    MODOP           reduce using rule 297 (operator_name -> DMINUSOP .)
    PLUSOP          reduce using rule 297 (operator_name -> DMINUSOP .)
    MINUSOP         reduce using rule 297 (operator_name -> DMINUSOP .)
    LSHIFT          reduce using rule 297 (operator_name -> DMINUSOP .)
    RSHIFT          reduce using rule 297 (operator_name -> DMINUSOP .)
    LTCOMP          reduce using rule 297 (operator_name -> DMINUSOP .)
    GTCOMP          reduce using rule 297 (operator_name -> DMINUSOP .)
    LTECOMP         reduce using rule 297 (operator_name -> DMINUSOP .)
    GTECOMP         reduce using rule 297 (operator_name -> DMINUSOP .)
    EQCOMP          reduce using rule 297 (operator_name -> DMINUSOP .)
    NEQCOMP         reduce using rule 297 (operator_name -> DMINUSOP .)
    BANDOP          reduce using rule 297 (operator_name -> DMINUSOP .)
    XOROP           reduce using rule 297 (operator_name -> DMINUSOP .)
    OROP            reduce using rule 297 (operator_name -> DMINUSOP .)
    ANDOP           reduce using rule 297 (operator_name -> DMINUSOP .)
    QUESMARK        reduce using rule 297 (operator_name -> DMINUSOP .)
    RSPAREN         reduce using rule 297 (operator_name -> DMINUSOP .)
    RTEMPLATE       reduce using rule 297 (operator_name -> DMINUSOP .)
    RCPAREN         reduce using rule 297 (operator_name -> DMINUSOP .)
    COLON           reduce using rule 297 (operator_name -> DMINUSOP .)


state 116

    (298) operator_name -> COMMA .

    LPAREN          reduce using rule 298 (operator_name -> COMMA .)
    LSPAREN         reduce using rule 298 (operator_name -> COMMA .)
    EQUAL           reduce using rule 298 (operator_name -> COMMA .)
    LCPAREN         reduce using rule 298 (operator_name -> COMMA .)
    SEMICOLON       reduce using rule 298 (operator_name -> COMMA .)
    COMMA           reduce using rule 298 (operator_name -> COMMA .)
    RPAREN          reduce using rule 298 (operator_name -> COMMA .)
    DOT             reduce using rule 298 (operator_name -> COMMA .)
    ARROW           reduce using rule 298 (operator_name -> COMMA .)
    DPLUSOP         reduce using rule 298 (operator_name -> COMMA .)
    DMINUSOP        reduce using rule 298 (operator_name -> COMMA .)
    LTEMPLATE       reduce using rule 298 (operator_name -> COMMA .)
    MULTEQOP        reduce using rule 298 (operator_name -> COMMA .)
    DIVEQOP         reduce using rule 298 (operator_name -> COMMA .)
    MODEQOP         reduce using rule 298 (operator_name -> COMMA .)
    PLUSEQOP        reduce using rule 298 (operator_name -> COMMA .)
    MINUSEQOP       reduce using rule 298 (operator_name -> COMMA .)
    LSHIFTEQOP      reduce using rule 298 (operator_name -> COMMA .)
    RSHIFTEQOP      reduce using rule 298 (operator_name -> COMMA .)
    BANDEQOP        reduce using rule 298 (operator_name -> COMMA .)
    BOREQOP         reduce using rule 298 (operator_name -> COMMA .)
    DOTSTAR         reduce using rule 298 (operator_name -> COMMA .)
    ARROWSTAR       reduce using rule 298 (operator_name -> COMMA .)
    MULTOP          reduce using rule 298 (operator_name -> COMMA .)
    DIVOP           reduce using rule 298 (operator_name -> COMMA .)
    MODOP           reduce using rule 298 (operator_name -> COMMA .)
    PLUSOP          reduce using rule 298 (operator_name -> COMMA .)
    MINUSOP         reduce using rule 298 (operator_name -> COMMA .)
    LSHIFT          reduce using rule 298 (operator_name -> COMMA .)
    RSHIFT          reduce using rule 298 (operator_name -> COMMA .)
    LTCOMP          reduce using rule 298 (operator_name -> COMMA .)
    GTCOMP          reduce using rule 298 (operator_name -> COMMA .)
    LTECOMP         reduce using rule 298 (operator_name -> COMMA .)
    GTECOMP         reduce using rule 298 (operator_name -> COMMA .)
    EQCOMP          reduce using rule 298 (operator_name -> COMMA .)
    NEQCOMP         reduce using rule 298 (operator_name -> COMMA .)
    BANDOP          reduce using rule 298 (operator_name -> COMMA .)
    XOROP           reduce using rule 298 (operator_name -> COMMA .)
    OROP            reduce using rule 298 (operator_name -> COMMA .)
    ANDOP           reduce using rule 298 (operator_name -> COMMA .)
    QUESMARK        reduce using rule 298 (operator_name -> COMMA .)
    RSPAREN         reduce using rule 298 (operator_name -> COMMA .)
    RTEMPLATE       reduce using rule 298 (operator_name -> COMMA .)
    RCPAREN         reduce using rule 298 (operator_name -> COMMA .)
    COLON           reduce using rule 298 (operator_name -> COMMA .)


state 117

    (299) operator_name -> ARROWSTAR .

    LPAREN          reduce using rule 299 (operator_name -> ARROWSTAR .)
    LSPAREN         reduce using rule 299 (operator_name -> ARROWSTAR .)
    EQUAL           reduce using rule 299 (operator_name -> ARROWSTAR .)
    LCPAREN         reduce using rule 299 (operator_name -> ARROWSTAR .)
    SEMICOLON       reduce using rule 299 (operator_name -> ARROWSTAR .)
    COMMA           reduce using rule 299 (operator_name -> ARROWSTAR .)
    RPAREN          reduce using rule 299 (operator_name -> ARROWSTAR .)
    DOT             reduce using rule 299 (operator_name -> ARROWSTAR .)
    ARROW           reduce using rule 299 (operator_name -> ARROWSTAR .)
    DPLUSOP         reduce using rule 299 (operator_name -> ARROWSTAR .)
    DMINUSOP        reduce using rule 299 (operator_name -> ARROWSTAR .)
    LTEMPLATE       reduce using rule 299 (operator_name -> ARROWSTAR .)
    MULTEQOP        reduce using rule 299 (operator_name -> ARROWSTAR .)
    DIVEQOP         reduce using rule 299 (operator_name -> ARROWSTAR .)
    MODEQOP         reduce using rule 299 (operator_name -> ARROWSTAR .)
    PLUSEQOP        reduce using rule 299 (operator_name -> ARROWSTAR .)
    MINUSEQOP       reduce using rule 299 (operator_name -> ARROWSTAR .)
    LSHIFTEQOP      reduce using rule 299 (operator_name -> ARROWSTAR .)
    RSHIFTEQOP      reduce using rule 299 (operator_name -> ARROWSTAR .)
    BANDEQOP        reduce using rule 299 (operator_name -> ARROWSTAR .)
    BOREQOP         reduce using rule 299 (operator_name -> ARROWSTAR .)
    DOTSTAR         reduce using rule 299 (operator_name -> ARROWSTAR .)
    ARROWSTAR       reduce using rule 299 (operator_name -> ARROWSTAR .)
    MULTOP          reduce using rule 299 (operator_name -> ARROWSTAR .)
    DIVOP           reduce using rule 299 (operator_name -> ARROWSTAR .)
    MODOP           reduce using rule 299 (operator_name -> ARROWSTAR .)
    PLUSOP          reduce using rule 299 (operator_name -> ARROWSTAR .)
    MINUSOP         reduce using rule 299 (operator_name -> ARROWSTAR .)
    LSHIFT          reduce using rule 299 (operator_name -> ARROWSTAR .)
    RSHIFT          reduce using rule 299 (operator_name -> ARROWSTAR .)
    LTCOMP          reduce using rule 299 (operator_name -> ARROWSTAR .)
    GTCOMP          reduce using rule 299 (operator_name -> ARROWSTAR .)
    LTECOMP         reduce using rule 299 (operator_name -> ARROWSTAR .)
    GTECOMP         reduce using rule 299 (operator_name -> ARROWSTAR .)
    EQCOMP          reduce using rule 299 (operator_name -> ARROWSTAR .)
    NEQCOMP         reduce using rule 299 (operator_name -> ARROWSTAR .)
    BANDOP          reduce using rule 299 (operator_name -> ARROWSTAR .)
    XOROP           reduce using rule 299 (operator_name -> ARROWSTAR .)
    OROP            reduce using rule 299 (operator_name -> ARROWSTAR .)
    ANDOP           reduce using rule 299 (operator_name -> ARROWSTAR .)
    QUESMARK        reduce using rule 299 (operator_name -> ARROWSTAR .)
    RSPAREN         reduce using rule 299 (operator_name -> ARROWSTAR .)
    RTEMPLATE       reduce using rule 299 (operator_name -> ARROWSTAR .)
    RCPAREN         reduce using rule 299 (operator_name -> ARROWSTAR .)
    COLON           reduce using rule 299 (operator_name -> ARROWSTAR .)


state 118

    (300) operator_name -> ARROW .

    LPAREN          reduce using rule 300 (operator_name -> ARROW .)
    LSPAREN         reduce using rule 300 (operator_name -> ARROW .)
    EQUAL           reduce using rule 300 (operator_name -> ARROW .)
    LCPAREN         reduce using rule 300 (operator_name -> ARROW .)
    SEMICOLON       reduce using rule 300 (operator_name -> ARROW .)
    COMMA           reduce using rule 300 (operator_name -> ARROW .)
    RPAREN          reduce using rule 300 (operator_name -> ARROW .)
    DOT             reduce using rule 300 (operator_name -> ARROW .)
    ARROW           reduce using rule 300 (operator_name -> ARROW .)
    DPLUSOP         reduce using rule 300 (operator_name -> ARROW .)
    DMINUSOP        reduce using rule 300 (operator_name -> ARROW .)
    LTEMPLATE       reduce using rule 300 (operator_name -> ARROW .)
    MULTEQOP        reduce using rule 300 (operator_name -> ARROW .)
    DIVEQOP         reduce using rule 300 (operator_name -> ARROW .)
    MODEQOP         reduce using rule 300 (operator_name -> ARROW .)
    PLUSEQOP        reduce using rule 300 (operator_name -> ARROW .)
    MINUSEQOP       reduce using rule 300 (operator_name -> ARROW .)
    LSHIFTEQOP      reduce using rule 300 (operator_name -> ARROW .)
    RSHIFTEQOP      reduce using rule 300 (operator_name -> ARROW .)
    BANDEQOP        reduce using rule 300 (operator_name -> ARROW .)
    BOREQOP         reduce using rule 300 (operator_name -> ARROW .)
    DOTSTAR         reduce using rule 300 (operator_name -> ARROW .)
    ARROWSTAR       reduce using rule 300 (operator_name -> ARROW .)
    MULTOP          reduce using rule 300 (operator_name -> ARROW .)
    DIVOP           reduce using rule 300 (operator_name -> ARROW .)
    MODOP           reduce using rule 300 (operator_name -> ARROW .)
    PLUSOP          reduce using rule 300 (operator_name -> ARROW .)
    MINUSOP         reduce using rule 300 (operator_name -> ARROW .)
    LSHIFT          reduce using rule 300 (operator_name -> ARROW .)
    RSHIFT          reduce using rule 300 (operator_name -> ARROW .)
    LTCOMP          reduce using rule 300 (operator_name -> ARROW .)
    GTCOMP          reduce using rule 300 (operator_name -> ARROW .)
    LTECOMP         reduce using rule 300 (operator_name -> ARROW .)
    GTECOMP         reduce using rule 300 (operator_name -> ARROW .)
    EQCOMP          reduce using rule 300 (operator_name -> ARROW .)
    NEQCOMP         reduce using rule 300 (operator_name -> ARROW .)
    BANDOP          reduce using rule 300 (operator_name -> ARROW .)
    XOROP           reduce using rule 300 (operator_name -> ARROW .)
    OROP            reduce using rule 300 (operator_name -> ARROW .)
    ANDOP           reduce using rule 300 (operator_name -> ARROW .)
    QUESMARK        reduce using rule 300 (operator_name -> ARROW .)
    RSPAREN         reduce using rule 300 (operator_name -> ARROW .)
    RTEMPLATE       reduce using rule 300 (operator_name -> ARROW .)
    RCPAREN         reduce using rule 300 (operator_name -> ARROW .)
    COLON           reduce using rule 300 (operator_name -> ARROW .)


state 119

    (301) operator_name -> LPAREN . RPAREN

    RPAREN          shift and go to state 244


state 120

    (302) operator_name -> LSPAREN . RSPAREN

    RSPAREN         shift and go to state 245


state 121

    (221) declaration -> decl_specifiers declarator_list SEMICOLON .

    ASM             reduce using rule 221 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    TEMPLATE        reduce using rule 221 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    TYPEDEF         reduce using rule 221 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    LPAREN          reduce using rule 221 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    AUTO            reduce using rule 221 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    STATIC          reduce using rule 221 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    EXTERN          reduce using rule 221 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    VIRTUAL         reduce using rule 221 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    CONST           reduce using rule 221 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    VOLATILE        reduce using rule 221 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    IDENTIFIER      reduce using rule 221 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    BNOP            reduce using rule 221 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    MULTOP          reduce using rule 221 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    BANDOP          reduce using rule 221 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    CHAR            reduce using rule 221 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    SHORT           reduce using rule 221 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    INT             reduce using rule 221 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    LONG            reduce using rule 221 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    SIGNED          reduce using rule 221 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    UNSIGNED        reduce using rule 221 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    FLOAT           reduce using rule 221 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    DOUBLE          reduce using rule 221 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    VOID            reduce using rule 221 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    STRING          reduce using rule 221 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    ENUM            reduce using rule 221 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    TYPE            reduce using rule 221 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    OPERATOR        reduce using rule 221 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    CLASS           reduce using rule 221 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    STRUCT          reduce using rule 221 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    UNION           reduce using rule 221 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    $end            reduce using rule 221 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    RCPAREN         reduce using rule 221 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    CASE            reduce using rule 221 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    DEFAULT         reduce using rule 221 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    SEMICOLON       reduce using rule 221 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    LCPAREN         reduce using rule 221 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    IF              reduce using rule 221 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    SWITCH          reduce using rule 221 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    WHILE           reduce using rule 221 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    DO              reduce using rule 221 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    FOR             reduce using rule 221 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    BREAK           reduce using rule 221 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    CONTINUE        reduce using rule 221 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    RETURN          reduce using rule 221 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    GOTO            reduce using rule 221 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    TRY             reduce using rule 221 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    DPLUSOP         reduce using rule 221 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    DMINUSOP        reduce using rule 221 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    SIZEOF          reduce using rule 221 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    PLUSOP          reduce using rule 221 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    MINUSOP         reduce using rule 221 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    NOTSYM          reduce using rule 221 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    NEW             reduce using rule 221 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    DELETE          reduce using rule 221 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    THIS            reduce using rule 221 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    NUMBER          reduce using rule 221 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    STRING_L        reduce using rule 221 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    SCHAR           reduce using rule 221 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    ELSE            reduce using rule 221 (declaration -> decl_specifiers declarator_list SEMICOLON .)


state 122

    (177) function_definition -> decl_specifiers declarator fct_body .

    ASM             reduce using rule 177 (function_definition -> decl_specifiers declarator fct_body .)
    TEMPLATE        reduce using rule 177 (function_definition -> decl_specifiers declarator fct_body .)
    TYPEDEF         reduce using rule 177 (function_definition -> decl_specifiers declarator fct_body .)
    LPAREN          reduce using rule 177 (function_definition -> decl_specifiers declarator fct_body .)
    AUTO            reduce using rule 177 (function_definition -> decl_specifiers declarator fct_body .)
    STATIC          reduce using rule 177 (function_definition -> decl_specifiers declarator fct_body .)
    EXTERN          reduce using rule 177 (function_definition -> decl_specifiers declarator fct_body .)
    VIRTUAL         reduce using rule 177 (function_definition -> decl_specifiers declarator fct_body .)
    CONST           reduce using rule 177 (function_definition -> decl_specifiers declarator fct_body .)
    VOLATILE        reduce using rule 177 (function_definition -> decl_specifiers declarator fct_body .)
    IDENTIFIER      reduce using rule 177 (function_definition -> decl_specifiers declarator fct_body .)
    BNOP            reduce using rule 177 (function_definition -> decl_specifiers declarator fct_body .)
    MULTOP          reduce using rule 177 (function_definition -> decl_specifiers declarator fct_body .)
    BANDOP          reduce using rule 177 (function_definition -> decl_specifiers declarator fct_body .)
    CHAR            reduce using rule 177 (function_definition -> decl_specifiers declarator fct_body .)
    SHORT           reduce using rule 177 (function_definition -> decl_specifiers declarator fct_body .)
    INT             reduce using rule 177 (function_definition -> decl_specifiers declarator fct_body .)
    LONG            reduce using rule 177 (function_definition -> decl_specifiers declarator fct_body .)
    SIGNED          reduce using rule 177 (function_definition -> decl_specifiers declarator fct_body .)
    UNSIGNED        reduce using rule 177 (function_definition -> decl_specifiers declarator fct_body .)
    FLOAT           reduce using rule 177 (function_definition -> decl_specifiers declarator fct_body .)
    DOUBLE          reduce using rule 177 (function_definition -> decl_specifiers declarator fct_body .)
    VOID            reduce using rule 177 (function_definition -> decl_specifiers declarator fct_body .)
    STRING          reduce using rule 177 (function_definition -> decl_specifiers declarator fct_body .)
    ENUM            reduce using rule 177 (function_definition -> decl_specifiers declarator fct_body .)
    TYPE            reduce using rule 177 (function_definition -> decl_specifiers declarator fct_body .)
    OPERATOR        reduce using rule 177 (function_definition -> decl_specifiers declarator fct_body .)
    CLASS           reduce using rule 177 (function_definition -> decl_specifiers declarator fct_body .)
    STRUCT          reduce using rule 177 (function_definition -> decl_specifiers declarator fct_body .)
    UNION           reduce using rule 177 (function_definition -> decl_specifiers declarator fct_body .)
    $end            reduce using rule 177 (function_definition -> decl_specifiers declarator fct_body .)
    RCPAREN         reduce using rule 177 (function_definition -> decl_specifiers declarator fct_body .)
    CASE            reduce using rule 177 (function_definition -> decl_specifiers declarator fct_body .)
    DEFAULT         reduce using rule 177 (function_definition -> decl_specifiers declarator fct_body .)
    SEMICOLON       reduce using rule 177 (function_definition -> decl_specifiers declarator fct_body .)
    LCPAREN         reduce using rule 177 (function_definition -> decl_specifiers declarator fct_body .)
    IF              reduce using rule 177 (function_definition -> decl_specifiers declarator fct_body .)
    SWITCH          reduce using rule 177 (function_definition -> decl_specifiers declarator fct_body .)
    WHILE           reduce using rule 177 (function_definition -> decl_specifiers declarator fct_body .)
    DO              reduce using rule 177 (function_definition -> decl_specifiers declarator fct_body .)
    FOR             reduce using rule 177 (function_definition -> decl_specifiers declarator fct_body .)
    BREAK           reduce using rule 177 (function_definition -> decl_specifiers declarator fct_body .)
    CONTINUE        reduce using rule 177 (function_definition -> decl_specifiers declarator fct_body .)
    RETURN          reduce using rule 177 (function_definition -> decl_specifiers declarator fct_body .)
    GOTO            reduce using rule 177 (function_definition -> decl_specifiers declarator fct_body .)
    TRY             reduce using rule 177 (function_definition -> decl_specifiers declarator fct_body .)
    DPLUSOP         reduce using rule 177 (function_definition -> decl_specifiers declarator fct_body .)
    DMINUSOP        reduce using rule 177 (function_definition -> decl_specifiers declarator fct_body .)
    SIZEOF          reduce using rule 177 (function_definition -> decl_specifiers declarator fct_body .)
    PLUSOP          reduce using rule 177 (function_definition -> decl_specifiers declarator fct_body .)
    MINUSOP         reduce using rule 177 (function_definition -> decl_specifiers declarator fct_body .)
    NOTSYM          reduce using rule 177 (function_definition -> decl_specifiers declarator fct_body .)
    NEW             reduce using rule 177 (function_definition -> decl_specifiers declarator fct_body .)
    DELETE          reduce using rule 177 (function_definition -> decl_specifiers declarator fct_body .)
    THIS            reduce using rule 177 (function_definition -> decl_specifiers declarator fct_body .)
    NUMBER          reduce using rule 177 (function_definition -> decl_specifiers declarator fct_body .)
    STRING_L        reduce using rule 177 (function_definition -> decl_specifiers declarator fct_body .)
    SCHAR           reduce using rule 177 (function_definition -> decl_specifiers declarator fct_body .)
    COLON           reduce using rule 177 (function_definition -> decl_specifiers declarator fct_body .)
    PRIVATE         reduce using rule 177 (function_definition -> decl_specifiers declarator fct_body .)
    PROTECTED       reduce using rule 177 (function_definition -> decl_specifiers declarator fct_body .)
    PUBLIC          reduce using rule 177 (function_definition -> decl_specifiers declarator fct_body .)
    ELSE            reduce using rule 177 (function_definition -> decl_specifiers declarator fct_body .)


state 123

    (231) declarator_list -> declarator_list COMMA init_declarator .

    SEMICOLON       reduce using rule 231 (declarator_list -> declarator_list COMMA init_declarator .)
    COMMA           reduce using rule 231 (declarator_list -> declarator_list COMMA init_declarator .)


state 124

    (232) init_declarator -> declarator . initializer
    (233) init_declarator -> declarator .
    (255) declarator -> declarator . LPAREN argument_declaration_list RPAREN
    (256) declarator -> declarator . LSPAREN constant_expression RSPAREN
    (257) declarator -> declarator . LSPAREN RSPAREN
    (234) initializer -> . EQUAL assignment_expression
    (235) initializer -> . EQUAL LCPAREN initializer_list RCPAREN
    (236) initializer -> . EQUAL LCPAREN initializer_list COMMA RCPAREN
    (237) initializer -> . LPAREN expression_list RPAREN

    SEMICOLON       reduce using rule 233 (init_declarator -> declarator .)
    COMMA           reduce using rule 233 (init_declarator -> declarator .)
    LPAREN          shift and go to state 66
    LSPAREN         shift and go to state 67
    EQUAL           shift and go to state 69

    initializer                    shift and go to state 65

state 125

    (242) asm_declaration -> ASM LPAREN STRING_L . RPAREN SEMICOLON

    RPAREN          shift and go to state 246


state 126

    (255) declarator -> declarator LPAREN . argument_declaration_list RPAREN
    (137) argument_declaration_list -> . arg_declaration_list
    (138) argument_declaration_list -> . empty
    (139) arg_declaration_list -> . argument_declaration
    (140) arg_declaration_list -> . argument_declaration COMMA arg_declaration_list
    (11) empty -> .
    (141) argument_declaration -> . decl_specifiers declarator
    (142) argument_declaration -> . decl_specifiers declarator EQUAL expression
    (143) argument_declaration -> . decl_specifiers abstract_declarator
    (144) argument_declaration -> . decl_specifiers
    (145) argument_declaration -> . decl_specifiers abstract_declarator EQUAL expression
    (146) argument_declaration -> . decl_specifiers EQUAL expression
    (147) decl_specifiers -> . decl_specifiers decl_specifier
    (148) decl_specifiers -> . decl_specifier
    (149) decl_specifier -> . storage_class_specifier
    (150) decl_specifier -> . type_specifier
    (151) decl_specifier -> . TYPEDEF
    (152) storage_class_specifier -> . AUTO
    (153) storage_class_specifier -> . STATIC
    (154) storage_class_specifier -> . EXTERN
    (155) storage_class_specifier -> . VIRTUAL
    (156) type_specifier -> . simple_type_name
    (157) type_specifier -> . class_specifier
    (158) type_specifier -> . enum_specifier
    (159) type_specifier -> . elaborated_type_specifier
    (160) type_specifier -> . CONST
    (161) type_specifier -> . VOLATILE
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (162) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (163) class_specifier -> . class_head LCPAREN RCPAREN
    (17) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (18) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (20) enum_specifier -> . ENUM LCPAREN RCPAREN
    (322) elaborated_type_specifier -> . class_key IDENTIFIER
    (323) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (324) elaborated_type_specifier -> . ENUM enum_name
    (325) elaborated_type_specifier -> . TYPE IDENTIFIER
    (326) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (304) class_head -> . class_key base_spec
    (305) class_head -> . class_key
    (306) class_head -> . class_key IDENTIFIER base_spec
    (307) class_head -> . class_key IDENTIFIER
    (328) class_key -> . CLASS
    (329) class_key -> . STRUCT
    (330) class_key -> . UNION
    (331) class_key -> . TEMPLATE

    RPAREN          reduce using rule 11 (empty -> .)
    TYPEDEF         shift and go to state 18
    AUTO            shift and go to state 21
    STATIC          shift and go to state 22
    EXTERN          shift and go to state 23
    VIRTUAL         shift and go to state 24
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    ENUM            shift and go to state 47
    TYPE            shift and go to state 49
    CLASS           shift and go to state 51
    STRUCT          shift and go to state 52
    UNION           shift and go to state 53
    TEMPLATE        shift and go to state 59

    argument_declaration_list      shift and go to state 129
    arg_declaration_list           shift and go to state 131
    empty                          shift and go to state 132
    argument_declaration           shift and go to state 134
    decl_specifiers                shift and go to state 137
    decl_specifier                 shift and go to state 10
    storage_class_specifier        shift and go to state 16
    type_specifier                 shift and go to state 17
    simple_type_name               shift and go to state 25
    class_specifier                shift and go to state 26
    enum_specifier                 shift and go to state 27
    elaborated_type_specifier      shift and go to state 28
    class_head                     shift and go to state 46
    class_key                      shift and go to state 48

state 127

    (258) declarator -> LPAREN declarator RPAREN .

    LPAREN          reduce using rule 258 (declarator -> LPAREN declarator RPAREN .)
    LSPAREN         reduce using rule 258 (declarator -> LPAREN declarator RPAREN .)
    EQUAL           reduce using rule 258 (declarator -> LPAREN declarator RPAREN .)
    LCPAREN         reduce using rule 258 (declarator -> LPAREN declarator RPAREN .)
    SEMICOLON       reduce using rule 258 (declarator -> LPAREN declarator RPAREN .)
    COMMA           reduce using rule 258 (declarator -> LPAREN declarator RPAREN .)
    RPAREN          reduce using rule 258 (declarator -> LPAREN declarator RPAREN .)
    RTEMPLATE       reduce using rule 258 (declarator -> LPAREN declarator RPAREN .)


state 128

    (119) primary_expression -> LPAREN . expression RPAREN
    (125) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (59) expression -> . assignment_expression
    (60) expression -> . expression COMMA assignment_expression
    (126) type_name -> . type_specifier_list abstract_declarator
    (127) type_name -> . type_specifier_list
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (262) type_specifier_list -> . type_specifier type_specifier_list
    (263) type_specifier_list -> . type_specifier
    (26) conditional_expression -> . logical_OR_expression
    (27) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (156) type_specifier -> . simple_type_name
    (157) type_specifier -> . class_specifier
    (158) type_specifier -> . enum_specifier
    (159) type_specifier -> . elaborated_type_specifier
    (160) type_specifier -> . CONST
    (161) type_specifier -> . VOLATILE
    (28) logical_OR_expression -> . logical_AND_expression
    (29) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (162) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (163) class_specifier -> . class_head LCPAREN RCPAREN
    (17) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (18) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (20) enum_specifier -> . ENUM LCPAREN RCPAREN
    (322) elaborated_type_specifier -> . class_key IDENTIFIER
    (323) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (324) elaborated_type_specifier -> . ENUM enum_name
    (325) elaborated_type_specifier -> . TYPE IDENTIFIER
    (326) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (30) logical_AND_expression -> . inclusive_OR_expression
    (31) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (304) class_head -> . class_key base_spec
    (305) class_head -> . class_key
    (306) class_head -> . class_key IDENTIFIER base_spec
    (307) class_head -> . class_key IDENTIFIER
    (328) class_key -> . CLASS
    (329) class_key -> . STRUCT
    (330) class_key -> . UNION
    (331) class_key -> . TEMPLATE
    (32) inclusive_OR_expression -> . exclusive_OR_expression
    (33) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (264) operator_function_name -> . OPERATOR operator_name
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    ENUM            shift and go to state 47
    TYPE            shift and go to state 49
    THIS            shift and go to state 160
    LPAREN          shift and go to state 128
    CLASS           shift and go to state 51
    STRUCT          shift and go to state 52
    UNION           shift and go to state 53
    TEMPLATE        shift and go to state 59
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    expression                     shift and go to state 247
    type_name                      shift and go to state 248
    cast_expression                shift and go to state 143
    assignment_expression          shift and go to state 208
    type_specifier_list            shift and go to state 249
    conditional_expression         shift and go to state 135
    unary_expression               shift and go to state 136
    type_specifier                 shift and go to state 250
    logical_OR_expression          shift and go to state 138
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    simple_type_name               shift and go to state 251
    class_specifier                shift and go to state 26
    enum_specifier                 shift and go to state 27
    elaborated_type_specifier      shift and go to state 28
    logical_AND_expression         shift and go to state 148
    primary_expression             shift and go to state 149
    name                           shift and go to state 151
    class_head                     shift and go to state 46
    class_key                      shift and go to state 48
    inclusive_OR_expression        shift and go to state 158
    literal                        shift and go to state 159
    exclusive_OR_expression        shift and go to state 161
    operator_function_name         shift and go to state 32
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171

state 129

    (255) declarator -> declarator LPAREN argument_declaration_list . RPAREN

    RPAREN          shift and go to state 252


state 130

    (237) initializer -> LPAREN expression_list . RPAREN
    (246) expression_list -> expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 253
    COMMA           shift and go to state 254


state 131

    (137) argument_declaration_list -> arg_declaration_list .

    RPAREN          reduce using rule 137 (argument_declaration_list -> arg_declaration_list .)


state 132

    (138) argument_declaration_list -> empty .

    RPAREN          reduce using rule 138 (argument_declaration_list -> empty .)


state 133

    (245) expression_list -> assignment_expression .

    RPAREN          reduce using rule 245 (expression_list -> assignment_expression .)
    COMMA           reduce using rule 245 (expression_list -> assignment_expression .)


state 134

    (139) arg_declaration_list -> argument_declaration .
    (140) arg_declaration_list -> argument_declaration . COMMA arg_declaration_list

    RPAREN          reduce using rule 139 (arg_declaration_list -> argument_declaration .)
    COMMA           shift and go to state 255


state 135

    (61) assignment_expression -> conditional_expression .

    RPAREN          reduce using rule 61 (assignment_expression -> conditional_expression .)
    COMMA           reduce using rule 61 (assignment_expression -> conditional_expression .)
    SEMICOLON       reduce using rule 61 (assignment_expression -> conditional_expression .)
    RCPAREN         reduce using rule 61 (assignment_expression -> conditional_expression .)
    RTEMPLATE       reduce using rule 61 (assignment_expression -> conditional_expression .)
    COLON           reduce using rule 61 (assignment_expression -> conditional_expression .)
    RSPAREN         reduce using rule 61 (assignment_expression -> conditional_expression .)


state 136

    (62) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (124) cast_expression -> unary_expression .
    (63) assignment_operator -> . EQUAL
    (64) assignment_operator -> . MULTEQOP
    (65) assignment_operator -> . DIVEQOP
    (66) assignment_operator -> . MODEQOP
    (67) assignment_operator -> . PLUSEQOP
    (68) assignment_operator -> . MINUSEQOP
    (69) assignment_operator -> . LSHIFTEQOP
    (70) assignment_operator -> . RSHIFTEQOP
    (71) assignment_operator -> . BANDEQOP
    (72) assignment_operator -> . BOREQOP

    DOTSTAR         reduce using rule 124 (cast_expression -> unary_expression .)
    ARROWSTAR       reduce using rule 124 (cast_expression -> unary_expression .)
    MULTOP          reduce using rule 124 (cast_expression -> unary_expression .)
    DIVOP           reduce using rule 124 (cast_expression -> unary_expression .)
    MODOP           reduce using rule 124 (cast_expression -> unary_expression .)
    PLUSOP          reduce using rule 124 (cast_expression -> unary_expression .)
    MINUSOP         reduce using rule 124 (cast_expression -> unary_expression .)
    LSHIFT          reduce using rule 124 (cast_expression -> unary_expression .)
    RSHIFT          reduce using rule 124 (cast_expression -> unary_expression .)
    LTCOMP          reduce using rule 124 (cast_expression -> unary_expression .)
    GTCOMP          reduce using rule 124 (cast_expression -> unary_expression .)
    LTECOMP         reduce using rule 124 (cast_expression -> unary_expression .)
    GTECOMP         reduce using rule 124 (cast_expression -> unary_expression .)
    EQCOMP          reduce using rule 124 (cast_expression -> unary_expression .)
    NEQCOMP         reduce using rule 124 (cast_expression -> unary_expression .)
    BANDOP          reduce using rule 124 (cast_expression -> unary_expression .)
    XOROP           reduce using rule 124 (cast_expression -> unary_expression .)
    OROP            reduce using rule 124 (cast_expression -> unary_expression .)
    ANDOP           reduce using rule 124 (cast_expression -> unary_expression .)
    QUESMARK        reduce using rule 124 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 124 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 124 (cast_expression -> unary_expression .)
    SEMICOLON       reduce using rule 124 (cast_expression -> unary_expression .)
    RCPAREN         reduce using rule 124 (cast_expression -> unary_expression .)
    RTEMPLATE       reduce using rule 124 (cast_expression -> unary_expression .)
    COLON           reduce using rule 124 (cast_expression -> unary_expression .)
    RSPAREN         reduce using rule 124 (cast_expression -> unary_expression .)
    EQUAL           shift and go to state 257
    MULTEQOP        shift and go to state 258
    DIVEQOP         shift and go to state 259
    MODEQOP         shift and go to state 260
    PLUSEQOP        shift and go to state 261
    MINUSEQOP       shift and go to state 262
    LSHIFTEQOP      shift and go to state 263
    RSHIFTEQOP      shift and go to state 264
    BANDEQOP        shift and go to state 265
    BOREQOP         shift and go to state 266

    assignment_operator            shift and go to state 256

state 137

    (141) argument_declaration -> decl_specifiers . declarator
    (142) argument_declaration -> decl_specifiers . declarator EQUAL expression
    (143) argument_declaration -> decl_specifiers . abstract_declarator
    (144) argument_declaration -> decl_specifiers .
    (145) argument_declaration -> decl_specifiers . abstract_declarator EQUAL expression
    (146) argument_declaration -> decl_specifiers . EQUAL expression
    (147) decl_specifiers -> decl_specifiers . decl_specifier
    (253) declarator -> . name
    (254) declarator -> . unary2_operator declarator
    (255) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (256) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (257) declarator -> . declarator LSPAREN RSPAREN
    (258) declarator -> . LPAREN declarator RPAREN
    (128) abstract_declarator -> . unary2_operator abstract_declarator
    (129) abstract_declarator -> . unary2_operator
    (130) abstract_declarator -> . abstract_declarator LPAREN argument_declaration_list RPAREN
    (131) abstract_declarator -> . LPAREN argument_declaration_list RPAREN
    (132) abstract_declarator -> . abstract_declarator LSPAREN constant_expression RSPAREN
    (133) abstract_declarator -> . LSPAREN constant_expression RSPAREN
    (134) abstract_declarator -> . abstract_declarator LSPAREN RSPAREN
    (135) abstract_declarator -> . LSPAREN RSPAREN
    (136) abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (149) decl_specifier -> . storage_class_specifier
    (150) decl_specifier -> . type_specifier
    (151) decl_specifier -> . TYPEDEF
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (152) storage_class_specifier -> . AUTO
    (153) storage_class_specifier -> . STATIC
    (154) storage_class_specifier -> . EXTERN
    (155) storage_class_specifier -> . VIRTUAL
    (156) type_specifier -> . simple_type_name
    (157) type_specifier -> . class_specifier
    (158) type_specifier -> . enum_specifier
    (159) type_specifier -> . elaborated_type_specifier
    (160) type_specifier -> . CONST
    (161) type_specifier -> . VOLATILE
    (264) operator_function_name -> . OPERATOR operator_name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (162) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (163) class_specifier -> . class_head LCPAREN RCPAREN
    (17) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (18) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (20) enum_specifier -> . ENUM LCPAREN RCPAREN
    (322) elaborated_type_specifier -> . class_key IDENTIFIER
    (323) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (324) elaborated_type_specifier -> . ENUM enum_name
    (325) elaborated_type_specifier -> . TYPE IDENTIFIER
    (326) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (304) class_head -> . class_key base_spec
    (305) class_head -> . class_key
    (306) class_head -> . class_key IDENTIFIER base_spec
    (307) class_head -> . class_key IDENTIFIER
    (328) class_key -> . CLASS
    (329) class_key -> . STRUCT
    (330) class_key -> . UNION
    (331) class_key -> . TEMPLATE

    COMMA           reduce using rule 144 (argument_declaration -> decl_specifiers .)
    RPAREN          reduce using rule 144 (argument_declaration -> decl_specifiers .)
    RTEMPLATE       reduce using rule 144 (argument_declaration -> decl_specifiers .)
    EQUAL           shift and go to state 268
    LPAREN          shift and go to state 271
    LSPAREN         shift and go to state 272
    TYPEDEF         shift and go to state 18
    IDENTIFIER      shift and go to state 31
    BNOP            shift and go to state 33
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    AUTO            shift and go to state 21
    STATIC          shift and go to state 22
    EXTERN          shift and go to state 23
    VIRTUAL         shift and go to state 24
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    OPERATOR        shift and go to state 50
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    ENUM            shift and go to state 47
    TYPE            shift and go to state 49
    CLASS           shift and go to state 51
    STRUCT          shift and go to state 52
    UNION           shift and go to state 53
    TEMPLATE        shift and go to state 59

    declarator                     shift and go to state 267
    abstract_declarator            shift and go to state 269
    decl_specifier                 shift and go to state 57
    name                           shift and go to state 19
    unary2_operator                shift and go to state 270
    storage_class_specifier        shift and go to state 16
    type_specifier                 shift and go to state 17
    operator_function_name         shift and go to state 32
    simple_type_name               shift and go to state 25
    class_specifier                shift and go to state 26
    enum_specifier                 shift and go to state 27
    elaborated_type_specifier      shift and go to state 28
    class_head                     shift and go to state 46
    class_key                      shift and go to state 48

state 138

    (26) conditional_expression -> logical_OR_expression .
    (27) conditional_expression -> logical_OR_expression . QUESMARK expression COLON conditional_expression
    (29) logical_OR_expression -> logical_OR_expression . OROP logical_AND_expression

    RPAREN          reduce using rule 26 (conditional_expression -> logical_OR_expression .)
    COMMA           reduce using rule 26 (conditional_expression -> logical_OR_expression .)
    RSPAREN         reduce using rule 26 (conditional_expression -> logical_OR_expression .)
    SEMICOLON       reduce using rule 26 (conditional_expression -> logical_OR_expression .)
    RCPAREN         reduce using rule 26 (conditional_expression -> logical_OR_expression .)
    COLON           reduce using rule 26 (conditional_expression -> logical_OR_expression .)
    RTEMPLATE       reduce using rule 26 (conditional_expression -> logical_OR_expression .)
    QUESMARK        shift and go to state 273
    OROP            shift and go to state 274


state 139

    (73) unary_expression -> postfix_expression .
    (107) postfix_expression -> postfix_expression . LSPAREN expression RSPAREN
    (108) postfix_expression -> postfix_expression . LPAREN expression_list RPAREN
    (109) postfix_expression -> postfix_expression . template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> postfix_expression . LPAREN RPAREN
    (113) postfix_expression -> postfix_expression . DOT name
    (114) postfix_expression -> postfix_expression . ARROW name
    (115) postfix_expression -> postfix_expression . DPLUSOP
    (116) postfix_expression -> postfix_expression . DMINUSOP
    (12) template_class_name -> . LTEMPLATE template_arg_list RTEMPLATE

    EQUAL           reduce using rule 73 (unary_expression -> postfix_expression .)
    MULTEQOP        reduce using rule 73 (unary_expression -> postfix_expression .)
    DIVEQOP         reduce using rule 73 (unary_expression -> postfix_expression .)
    MODEQOP         reduce using rule 73 (unary_expression -> postfix_expression .)
    PLUSEQOP        reduce using rule 73 (unary_expression -> postfix_expression .)
    MINUSEQOP       reduce using rule 73 (unary_expression -> postfix_expression .)
    LSHIFTEQOP      reduce using rule 73 (unary_expression -> postfix_expression .)
    RSHIFTEQOP      reduce using rule 73 (unary_expression -> postfix_expression .)
    BANDEQOP        reduce using rule 73 (unary_expression -> postfix_expression .)
    BOREQOP         reduce using rule 73 (unary_expression -> postfix_expression .)
    DOTSTAR         reduce using rule 73 (unary_expression -> postfix_expression .)
    ARROWSTAR       reduce using rule 73 (unary_expression -> postfix_expression .)
    MULTOP          reduce using rule 73 (unary_expression -> postfix_expression .)
    DIVOP           reduce using rule 73 (unary_expression -> postfix_expression .)
    MODOP           reduce using rule 73 (unary_expression -> postfix_expression .)
    PLUSOP          reduce using rule 73 (unary_expression -> postfix_expression .)
    MINUSOP         reduce using rule 73 (unary_expression -> postfix_expression .)
    LSHIFT          reduce using rule 73 (unary_expression -> postfix_expression .)
    RSHIFT          reduce using rule 73 (unary_expression -> postfix_expression .)
    LTCOMP          reduce using rule 73 (unary_expression -> postfix_expression .)
    GTCOMP          reduce using rule 73 (unary_expression -> postfix_expression .)
    LTECOMP         reduce using rule 73 (unary_expression -> postfix_expression .)
    GTECOMP         reduce using rule 73 (unary_expression -> postfix_expression .)
    EQCOMP          reduce using rule 73 (unary_expression -> postfix_expression .)
    NEQCOMP         reduce using rule 73 (unary_expression -> postfix_expression .)
    BANDOP          reduce using rule 73 (unary_expression -> postfix_expression .)
    XOROP           reduce using rule 73 (unary_expression -> postfix_expression .)
    OROP            reduce using rule 73 (unary_expression -> postfix_expression .)
    ANDOP           reduce using rule 73 (unary_expression -> postfix_expression .)
    QUESMARK        reduce using rule 73 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 73 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 73 (unary_expression -> postfix_expression .)
    RSPAREN         reduce using rule 73 (unary_expression -> postfix_expression .)
    SEMICOLON       reduce using rule 73 (unary_expression -> postfix_expression .)
    RCPAREN         reduce using rule 73 (unary_expression -> postfix_expression .)
    COLON           reduce using rule 73 (unary_expression -> postfix_expression .)
    RTEMPLATE       reduce using rule 73 (unary_expression -> postfix_expression .)
    LSPAREN         shift and go to state 275
    LPAREN          shift and go to state 276
    DOT             shift and go to state 278
    ARROW           shift and go to state 279
    DPLUSOP         shift and go to state 280
    DMINUSOP        shift and go to state 281
    LTEMPLATE       shift and go to state 237

    template_class_name            shift and go to state 277

state 140

    (74) unary_expression -> DPLUSOP . unary_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (264) operator_function_name -> . OPERATOR operator_name

    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    LPAREN          shift and go to state 283
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    unary_expression               shift and go to state 282
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    name                           shift and go to state 151
    literal                        shift and go to state 159
    operator_function_name         shift and go to state 32

state 141

    (75) unary_expression -> DMINUSOP . unary_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (264) operator_function_name -> . OPERATOR operator_name

    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    LPAREN          shift and go to state 283
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    unary_expression               shift and go to state 284
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    name                           shift and go to state 151
    literal                        shift and go to state 159
    operator_function_name         shift and go to state 32

state 142

    (76) unary_expression -> unary1_operator . cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (264) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 176
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    unary1_operator                shift and go to state 142
    cast_expression                shift and go to state 285
    unary_expression               shift and go to state 175
    postfix_expression             shift and go to state 139
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    name                           shift and go to state 151
    literal                        shift and go to state 159
    operator_function_name         shift and go to state 32

state 143

    (56) pm_expression -> cast_expression .

    DOTSTAR         reduce using rule 56 (pm_expression -> cast_expression .)
    ARROWSTAR       reduce using rule 56 (pm_expression -> cast_expression .)
    MULTOP          reduce using rule 56 (pm_expression -> cast_expression .)
    DIVOP           reduce using rule 56 (pm_expression -> cast_expression .)
    MODOP           reduce using rule 56 (pm_expression -> cast_expression .)
    PLUSOP          reduce using rule 56 (pm_expression -> cast_expression .)
    MINUSOP         reduce using rule 56 (pm_expression -> cast_expression .)
    LSHIFT          reduce using rule 56 (pm_expression -> cast_expression .)
    RSHIFT          reduce using rule 56 (pm_expression -> cast_expression .)
    LTCOMP          reduce using rule 56 (pm_expression -> cast_expression .)
    GTCOMP          reduce using rule 56 (pm_expression -> cast_expression .)
    LTECOMP         reduce using rule 56 (pm_expression -> cast_expression .)
    GTECOMP         reduce using rule 56 (pm_expression -> cast_expression .)
    EQCOMP          reduce using rule 56 (pm_expression -> cast_expression .)
    NEQCOMP         reduce using rule 56 (pm_expression -> cast_expression .)
    BANDOP          reduce using rule 56 (pm_expression -> cast_expression .)
    XOROP           reduce using rule 56 (pm_expression -> cast_expression .)
    OROP            reduce using rule 56 (pm_expression -> cast_expression .)
    ANDOP           reduce using rule 56 (pm_expression -> cast_expression .)
    QUESMARK        reduce using rule 56 (pm_expression -> cast_expression .)
    RPAREN          reduce using rule 56 (pm_expression -> cast_expression .)
    COMMA           reduce using rule 56 (pm_expression -> cast_expression .)
    RSPAREN         reduce using rule 56 (pm_expression -> cast_expression .)
    SEMICOLON       reduce using rule 56 (pm_expression -> cast_expression .)
    RCPAREN         reduce using rule 56 (pm_expression -> cast_expression .)
    COLON           reduce using rule 56 (pm_expression -> cast_expression .)
    RTEMPLATE       reduce using rule 56 (pm_expression -> cast_expression .)


state 144

    (77) unary_expression -> unary2_operator . cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (264) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 176
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    unary2_operator                shift and go to state 144
    cast_expression                shift and go to state 286
    unary_expression               shift and go to state 175
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    name                           shift and go to state 151
    literal                        shift and go to state 159
    operator_function_name         shift and go to state 32

state 145

    (78) unary_expression -> SIZEOF . unary_expression
    (79) unary_expression -> SIZEOF . LPAREN type_name RPAREN
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (264) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 288
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    unary_expression               shift and go to state 287
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    name                           shift and go to state 151
    literal                        shift and go to state 159
    operator_function_name         shift and go to state 32

state 146

    (80) unary_expression -> allocation_expression .

    EQUAL           reduce using rule 80 (unary_expression -> allocation_expression .)
    MULTEQOP        reduce using rule 80 (unary_expression -> allocation_expression .)
    DIVEQOP         reduce using rule 80 (unary_expression -> allocation_expression .)
    MODEQOP         reduce using rule 80 (unary_expression -> allocation_expression .)
    PLUSEQOP        reduce using rule 80 (unary_expression -> allocation_expression .)
    MINUSEQOP       reduce using rule 80 (unary_expression -> allocation_expression .)
    LSHIFTEQOP      reduce using rule 80 (unary_expression -> allocation_expression .)
    RSHIFTEQOP      reduce using rule 80 (unary_expression -> allocation_expression .)
    BANDEQOP        reduce using rule 80 (unary_expression -> allocation_expression .)
    BOREQOP         reduce using rule 80 (unary_expression -> allocation_expression .)
    DOTSTAR         reduce using rule 80 (unary_expression -> allocation_expression .)
    ARROWSTAR       reduce using rule 80 (unary_expression -> allocation_expression .)
    MULTOP          reduce using rule 80 (unary_expression -> allocation_expression .)
    DIVOP           reduce using rule 80 (unary_expression -> allocation_expression .)
    MODOP           reduce using rule 80 (unary_expression -> allocation_expression .)
    PLUSOP          reduce using rule 80 (unary_expression -> allocation_expression .)
    MINUSOP         reduce using rule 80 (unary_expression -> allocation_expression .)
    LSHIFT          reduce using rule 80 (unary_expression -> allocation_expression .)
    RSHIFT          reduce using rule 80 (unary_expression -> allocation_expression .)
    LTCOMP          reduce using rule 80 (unary_expression -> allocation_expression .)
    GTCOMP          reduce using rule 80 (unary_expression -> allocation_expression .)
    LTECOMP         reduce using rule 80 (unary_expression -> allocation_expression .)
    GTECOMP         reduce using rule 80 (unary_expression -> allocation_expression .)
    EQCOMP          reduce using rule 80 (unary_expression -> allocation_expression .)
    NEQCOMP         reduce using rule 80 (unary_expression -> allocation_expression .)
    BANDOP          reduce using rule 80 (unary_expression -> allocation_expression .)
    XOROP           reduce using rule 80 (unary_expression -> allocation_expression .)
    OROP            reduce using rule 80 (unary_expression -> allocation_expression .)
    ANDOP           reduce using rule 80 (unary_expression -> allocation_expression .)
    QUESMARK        reduce using rule 80 (unary_expression -> allocation_expression .)
    RPAREN          reduce using rule 80 (unary_expression -> allocation_expression .)
    COMMA           reduce using rule 80 (unary_expression -> allocation_expression .)
    RSPAREN         reduce using rule 80 (unary_expression -> allocation_expression .)
    SEMICOLON       reduce using rule 80 (unary_expression -> allocation_expression .)
    RCPAREN         reduce using rule 80 (unary_expression -> allocation_expression .)
    COLON           reduce using rule 80 (unary_expression -> allocation_expression .)
    RTEMPLATE       reduce using rule 80 (unary_expression -> allocation_expression .)


state 147

    (81) unary_expression -> deallocation_expression .

    EQUAL           reduce using rule 81 (unary_expression -> deallocation_expression .)
    MULTEQOP        reduce using rule 81 (unary_expression -> deallocation_expression .)
    DIVEQOP         reduce using rule 81 (unary_expression -> deallocation_expression .)
    MODEQOP         reduce using rule 81 (unary_expression -> deallocation_expression .)
    PLUSEQOP        reduce using rule 81 (unary_expression -> deallocation_expression .)
    MINUSEQOP       reduce using rule 81 (unary_expression -> deallocation_expression .)
    LSHIFTEQOP      reduce using rule 81 (unary_expression -> deallocation_expression .)
    RSHIFTEQOP      reduce using rule 81 (unary_expression -> deallocation_expression .)
    BANDEQOP        reduce using rule 81 (unary_expression -> deallocation_expression .)
    BOREQOP         reduce using rule 81 (unary_expression -> deallocation_expression .)
    DOTSTAR         reduce using rule 81 (unary_expression -> deallocation_expression .)
    ARROWSTAR       reduce using rule 81 (unary_expression -> deallocation_expression .)
    MULTOP          reduce using rule 81 (unary_expression -> deallocation_expression .)
    DIVOP           reduce using rule 81 (unary_expression -> deallocation_expression .)
    MODOP           reduce using rule 81 (unary_expression -> deallocation_expression .)
    PLUSOP          reduce using rule 81 (unary_expression -> deallocation_expression .)
    MINUSOP         reduce using rule 81 (unary_expression -> deallocation_expression .)
    LSHIFT          reduce using rule 81 (unary_expression -> deallocation_expression .)
    RSHIFT          reduce using rule 81 (unary_expression -> deallocation_expression .)
    LTCOMP          reduce using rule 81 (unary_expression -> deallocation_expression .)
    GTCOMP          reduce using rule 81 (unary_expression -> deallocation_expression .)
    LTECOMP         reduce using rule 81 (unary_expression -> deallocation_expression .)
    GTECOMP         reduce using rule 81 (unary_expression -> deallocation_expression .)
    EQCOMP          reduce using rule 81 (unary_expression -> deallocation_expression .)
    NEQCOMP         reduce using rule 81 (unary_expression -> deallocation_expression .)
    BANDOP          reduce using rule 81 (unary_expression -> deallocation_expression .)
    XOROP           reduce using rule 81 (unary_expression -> deallocation_expression .)
    OROP            reduce using rule 81 (unary_expression -> deallocation_expression .)
    ANDOP           reduce using rule 81 (unary_expression -> deallocation_expression .)
    QUESMARK        reduce using rule 81 (unary_expression -> deallocation_expression .)
    RPAREN          reduce using rule 81 (unary_expression -> deallocation_expression .)
    COMMA           reduce using rule 81 (unary_expression -> deallocation_expression .)
    RSPAREN         reduce using rule 81 (unary_expression -> deallocation_expression .)
    SEMICOLON       reduce using rule 81 (unary_expression -> deallocation_expression .)
    RCPAREN         reduce using rule 81 (unary_expression -> deallocation_expression .)
    COLON           reduce using rule 81 (unary_expression -> deallocation_expression .)
    RTEMPLATE       reduce using rule 81 (unary_expression -> deallocation_expression .)


state 148

    (28) logical_OR_expression -> logical_AND_expression .
    (31) logical_AND_expression -> logical_AND_expression . ANDOP inclusive_OR_expression

    QUESMARK        reduce using rule 28 (logical_OR_expression -> logical_AND_expression .)
    OROP            reduce using rule 28 (logical_OR_expression -> logical_AND_expression .)
    RPAREN          reduce using rule 28 (logical_OR_expression -> logical_AND_expression .)
    COMMA           reduce using rule 28 (logical_OR_expression -> logical_AND_expression .)
    RSPAREN         reduce using rule 28 (logical_OR_expression -> logical_AND_expression .)
    SEMICOLON       reduce using rule 28 (logical_OR_expression -> logical_AND_expression .)
    RCPAREN         reduce using rule 28 (logical_OR_expression -> logical_AND_expression .)
    COLON           reduce using rule 28 (logical_OR_expression -> logical_AND_expression .)
    RTEMPLATE       reduce using rule 28 (logical_OR_expression -> logical_AND_expression .)
    ANDOP           shift and go to state 289


state 149

    (106) postfix_expression -> primary_expression .

    LSPAREN         reduce using rule 106 (postfix_expression -> primary_expression .)
    LPAREN          reduce using rule 106 (postfix_expression -> primary_expression .)
    DOT             reduce using rule 106 (postfix_expression -> primary_expression .)
    ARROW           reduce using rule 106 (postfix_expression -> primary_expression .)
    DPLUSOP         reduce using rule 106 (postfix_expression -> primary_expression .)
    DMINUSOP        reduce using rule 106 (postfix_expression -> primary_expression .)
    LTEMPLATE       reduce using rule 106 (postfix_expression -> primary_expression .)
    EQUAL           reduce using rule 106 (postfix_expression -> primary_expression .)
    MULTEQOP        reduce using rule 106 (postfix_expression -> primary_expression .)
    DIVEQOP         reduce using rule 106 (postfix_expression -> primary_expression .)
    MODEQOP         reduce using rule 106 (postfix_expression -> primary_expression .)
    PLUSEQOP        reduce using rule 106 (postfix_expression -> primary_expression .)
    MINUSEQOP       reduce using rule 106 (postfix_expression -> primary_expression .)
    LSHIFTEQOP      reduce using rule 106 (postfix_expression -> primary_expression .)
    RSHIFTEQOP      reduce using rule 106 (postfix_expression -> primary_expression .)
    BANDEQOP        reduce using rule 106 (postfix_expression -> primary_expression .)
    BOREQOP         reduce using rule 106 (postfix_expression -> primary_expression .)
    DOTSTAR         reduce using rule 106 (postfix_expression -> primary_expression .)
    ARROWSTAR       reduce using rule 106 (postfix_expression -> primary_expression .)
    MULTOP          reduce using rule 106 (postfix_expression -> primary_expression .)
    DIVOP           reduce using rule 106 (postfix_expression -> primary_expression .)
    MODOP           reduce using rule 106 (postfix_expression -> primary_expression .)
    PLUSOP          reduce using rule 106 (postfix_expression -> primary_expression .)
    MINUSOP         reduce using rule 106 (postfix_expression -> primary_expression .)
    LSHIFT          reduce using rule 106 (postfix_expression -> primary_expression .)
    RSHIFT          reduce using rule 106 (postfix_expression -> primary_expression .)
    LTCOMP          reduce using rule 106 (postfix_expression -> primary_expression .)
    GTCOMP          reduce using rule 106 (postfix_expression -> primary_expression .)
    LTECOMP         reduce using rule 106 (postfix_expression -> primary_expression .)
    GTECOMP         reduce using rule 106 (postfix_expression -> primary_expression .)
    EQCOMP          reduce using rule 106 (postfix_expression -> primary_expression .)
    NEQCOMP         reduce using rule 106 (postfix_expression -> primary_expression .)
    BANDOP          reduce using rule 106 (postfix_expression -> primary_expression .)
    XOROP           reduce using rule 106 (postfix_expression -> primary_expression .)
    OROP            reduce using rule 106 (postfix_expression -> primary_expression .)
    ANDOP           reduce using rule 106 (postfix_expression -> primary_expression .)
    QUESMARK        reduce using rule 106 (postfix_expression -> primary_expression .)
    RPAREN          reduce using rule 106 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 106 (postfix_expression -> primary_expression .)
    RSPAREN         reduce using rule 106 (postfix_expression -> primary_expression .)
    SEMICOLON       reduce using rule 106 (postfix_expression -> primary_expression .)
    RCPAREN         reduce using rule 106 (postfix_expression -> primary_expression .)
    COLON           reduce using rule 106 (postfix_expression -> primary_expression .)
    RTEMPLATE       reduce using rule 106 (postfix_expression -> primary_expression .)


state 150

    (111) postfix_expression -> simple_type_name . LPAREN expression_list RPAREN
    (112) postfix_expression -> simple_type_name . LPAREN RPAREN
    (156) type_specifier -> simple_type_name .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 290
    EQUAL           reduce using rule 156 (type_specifier -> simple_type_name .)
    LSPAREN         reduce using rule 156 (type_specifier -> simple_type_name .)
    TYPEDEF         reduce using rule 156 (type_specifier -> simple_type_name .)
    IDENTIFIER      reduce using rule 156 (type_specifier -> simple_type_name .)
    BNOP            reduce using rule 156 (type_specifier -> simple_type_name .)
    MULTOP          reduce using rule 156 (type_specifier -> simple_type_name .)
    BANDOP          reduce using rule 156 (type_specifier -> simple_type_name .)
    AUTO            reduce using rule 156 (type_specifier -> simple_type_name .)
    STATIC          reduce using rule 156 (type_specifier -> simple_type_name .)
    EXTERN          reduce using rule 156 (type_specifier -> simple_type_name .)
    VIRTUAL         reduce using rule 156 (type_specifier -> simple_type_name .)
    CONST           reduce using rule 156 (type_specifier -> simple_type_name .)
    VOLATILE        reduce using rule 156 (type_specifier -> simple_type_name .)
    OPERATOR        reduce using rule 156 (type_specifier -> simple_type_name .)
    CHAR            reduce using rule 156 (type_specifier -> simple_type_name .)
    SHORT           reduce using rule 156 (type_specifier -> simple_type_name .)
    INT             reduce using rule 156 (type_specifier -> simple_type_name .)
    LONG            reduce using rule 156 (type_specifier -> simple_type_name .)
    SIGNED          reduce using rule 156 (type_specifier -> simple_type_name .)
    UNSIGNED        reduce using rule 156 (type_specifier -> simple_type_name .)
    FLOAT           reduce using rule 156 (type_specifier -> simple_type_name .)
    DOUBLE          reduce using rule 156 (type_specifier -> simple_type_name .)
    VOID            reduce using rule 156 (type_specifier -> simple_type_name .)
    STRING          reduce using rule 156 (type_specifier -> simple_type_name .)
    ENUM            reduce using rule 156 (type_specifier -> simple_type_name .)
    TYPE            reduce using rule 156 (type_specifier -> simple_type_name .)
    CLASS           reduce using rule 156 (type_specifier -> simple_type_name .)
    STRUCT          reduce using rule 156 (type_specifier -> simple_type_name .)
    UNION           reduce using rule 156 (type_specifier -> simple_type_name .)
    TEMPLATE        reduce using rule 156 (type_specifier -> simple_type_name .)
    COMMA           reduce using rule 156 (type_specifier -> simple_type_name .)
    RPAREN          reduce using rule 156 (type_specifier -> simple_type_name .)
    SEMICOLON       reduce using rule 156 (type_specifier -> simple_type_name .)

  ! LPAREN          [ reduce using rule 156 (type_specifier -> simple_type_name .) ]


state 151

    (120) primary_expression -> name .

    LSPAREN         reduce using rule 120 (primary_expression -> name .)
    LPAREN          reduce using rule 120 (primary_expression -> name .)
    DOT             reduce using rule 120 (primary_expression -> name .)
    ARROW           reduce using rule 120 (primary_expression -> name .)
    DPLUSOP         reduce using rule 120 (primary_expression -> name .)
    DMINUSOP        reduce using rule 120 (primary_expression -> name .)
    LTEMPLATE       reduce using rule 120 (primary_expression -> name .)
    EQUAL           reduce using rule 120 (primary_expression -> name .)
    MULTEQOP        reduce using rule 120 (primary_expression -> name .)
    DIVEQOP         reduce using rule 120 (primary_expression -> name .)
    MODEQOP         reduce using rule 120 (primary_expression -> name .)
    PLUSEQOP        reduce using rule 120 (primary_expression -> name .)
    MINUSEQOP       reduce using rule 120 (primary_expression -> name .)
    LSHIFTEQOP      reduce using rule 120 (primary_expression -> name .)
    RSHIFTEQOP      reduce using rule 120 (primary_expression -> name .)
    BANDEQOP        reduce using rule 120 (primary_expression -> name .)
    BOREQOP         reduce using rule 120 (primary_expression -> name .)
    DOTSTAR         reduce using rule 120 (primary_expression -> name .)
    ARROWSTAR       reduce using rule 120 (primary_expression -> name .)
    MULTOP          reduce using rule 120 (primary_expression -> name .)
    DIVOP           reduce using rule 120 (primary_expression -> name .)
    MODOP           reduce using rule 120 (primary_expression -> name .)
    PLUSOP          reduce using rule 120 (primary_expression -> name .)
    MINUSOP         reduce using rule 120 (primary_expression -> name .)
    LSHIFT          reduce using rule 120 (primary_expression -> name .)
    RSHIFT          reduce using rule 120 (primary_expression -> name .)
    LTCOMP          reduce using rule 120 (primary_expression -> name .)
    GTCOMP          reduce using rule 120 (primary_expression -> name .)
    LTECOMP         reduce using rule 120 (primary_expression -> name .)
    GTECOMP         reduce using rule 120 (primary_expression -> name .)
    EQCOMP          reduce using rule 120 (primary_expression -> name .)
    NEQCOMP         reduce using rule 120 (primary_expression -> name .)
    BANDOP          reduce using rule 120 (primary_expression -> name .)
    XOROP           reduce using rule 120 (primary_expression -> name .)
    OROP            reduce using rule 120 (primary_expression -> name .)
    ANDOP           reduce using rule 120 (primary_expression -> name .)
    QUESMARK        reduce using rule 120 (primary_expression -> name .)
    RPAREN          reduce using rule 120 (primary_expression -> name .)
    COMMA           reduce using rule 120 (primary_expression -> name .)
    RSPAREN         reduce using rule 120 (primary_expression -> name .)
    SEMICOLON       reduce using rule 120 (primary_expression -> name .)
    RCPAREN         reduce using rule 120 (primary_expression -> name .)
    COLON           reduce using rule 120 (primary_expression -> name .)
    RTEMPLATE       reduce using rule 120 (primary_expression -> name .)


state 152

    (100) unary1_operator -> PLUSOP .

    LPAREN          reduce using rule 100 (unary1_operator -> PLUSOP .)
    DPLUSOP         reduce using rule 100 (unary1_operator -> PLUSOP .)
    DMINUSOP        reduce using rule 100 (unary1_operator -> PLUSOP .)
    SIZEOF          reduce using rule 100 (unary1_operator -> PLUSOP .)
    PLUSOP          reduce using rule 100 (unary1_operator -> PLUSOP .)
    MINUSOP         reduce using rule 100 (unary1_operator -> PLUSOP .)
    NOTSYM          reduce using rule 100 (unary1_operator -> PLUSOP .)
    BNOP            reduce using rule 100 (unary1_operator -> PLUSOP .)
    MULTOP          reduce using rule 100 (unary1_operator -> PLUSOP .)
    BANDOP          reduce using rule 100 (unary1_operator -> PLUSOP .)
    NEW             reduce using rule 100 (unary1_operator -> PLUSOP .)
    DELETE          reduce using rule 100 (unary1_operator -> PLUSOP .)
    THIS            reduce using rule 100 (unary1_operator -> PLUSOP .)
    CHAR            reduce using rule 100 (unary1_operator -> PLUSOP .)
    SHORT           reduce using rule 100 (unary1_operator -> PLUSOP .)
    INT             reduce using rule 100 (unary1_operator -> PLUSOP .)
    LONG            reduce using rule 100 (unary1_operator -> PLUSOP .)
    SIGNED          reduce using rule 100 (unary1_operator -> PLUSOP .)
    UNSIGNED        reduce using rule 100 (unary1_operator -> PLUSOP .)
    FLOAT           reduce using rule 100 (unary1_operator -> PLUSOP .)
    DOUBLE          reduce using rule 100 (unary1_operator -> PLUSOP .)
    VOID            reduce using rule 100 (unary1_operator -> PLUSOP .)
    STRING          reduce using rule 100 (unary1_operator -> PLUSOP .)
    NUMBER          reduce using rule 100 (unary1_operator -> PLUSOP .)
    STRING_L        reduce using rule 100 (unary1_operator -> PLUSOP .)
    SCHAR           reduce using rule 100 (unary1_operator -> PLUSOP .)
    IDENTIFIER      reduce using rule 100 (unary1_operator -> PLUSOP .)
    OPERATOR        reduce using rule 100 (unary1_operator -> PLUSOP .)


state 153

    (101) unary1_operator -> MINUSOP .

    LPAREN          reduce using rule 101 (unary1_operator -> MINUSOP .)
    DPLUSOP         reduce using rule 101 (unary1_operator -> MINUSOP .)
    DMINUSOP        reduce using rule 101 (unary1_operator -> MINUSOP .)
    SIZEOF          reduce using rule 101 (unary1_operator -> MINUSOP .)
    PLUSOP          reduce using rule 101 (unary1_operator -> MINUSOP .)
    MINUSOP         reduce using rule 101 (unary1_operator -> MINUSOP .)
    NOTSYM          reduce using rule 101 (unary1_operator -> MINUSOP .)
    BNOP            reduce using rule 101 (unary1_operator -> MINUSOP .)
    MULTOP          reduce using rule 101 (unary1_operator -> MINUSOP .)
    BANDOP          reduce using rule 101 (unary1_operator -> MINUSOP .)
    NEW             reduce using rule 101 (unary1_operator -> MINUSOP .)
    DELETE          reduce using rule 101 (unary1_operator -> MINUSOP .)
    THIS            reduce using rule 101 (unary1_operator -> MINUSOP .)
    CHAR            reduce using rule 101 (unary1_operator -> MINUSOP .)
    SHORT           reduce using rule 101 (unary1_operator -> MINUSOP .)
    INT             reduce using rule 101 (unary1_operator -> MINUSOP .)
    LONG            reduce using rule 101 (unary1_operator -> MINUSOP .)
    SIGNED          reduce using rule 101 (unary1_operator -> MINUSOP .)
    UNSIGNED        reduce using rule 101 (unary1_operator -> MINUSOP .)
    FLOAT           reduce using rule 101 (unary1_operator -> MINUSOP .)
    DOUBLE          reduce using rule 101 (unary1_operator -> MINUSOP .)
    VOID            reduce using rule 101 (unary1_operator -> MINUSOP .)
    STRING          reduce using rule 101 (unary1_operator -> MINUSOP .)
    NUMBER          reduce using rule 101 (unary1_operator -> MINUSOP .)
    STRING_L        reduce using rule 101 (unary1_operator -> MINUSOP .)
    SCHAR           reduce using rule 101 (unary1_operator -> MINUSOP .)
    IDENTIFIER      reduce using rule 101 (unary1_operator -> MINUSOP .)
    OPERATOR        reduce using rule 101 (unary1_operator -> MINUSOP .)


state 154

    (102) unary1_operator -> NOTSYM .

    LPAREN          reduce using rule 102 (unary1_operator -> NOTSYM .)
    DPLUSOP         reduce using rule 102 (unary1_operator -> NOTSYM .)
    DMINUSOP        reduce using rule 102 (unary1_operator -> NOTSYM .)
    SIZEOF          reduce using rule 102 (unary1_operator -> NOTSYM .)
    PLUSOP          reduce using rule 102 (unary1_operator -> NOTSYM .)
    MINUSOP         reduce using rule 102 (unary1_operator -> NOTSYM .)
    NOTSYM          reduce using rule 102 (unary1_operator -> NOTSYM .)
    BNOP            reduce using rule 102 (unary1_operator -> NOTSYM .)
    MULTOP          reduce using rule 102 (unary1_operator -> NOTSYM .)
    BANDOP          reduce using rule 102 (unary1_operator -> NOTSYM .)
    NEW             reduce using rule 102 (unary1_operator -> NOTSYM .)
    DELETE          reduce using rule 102 (unary1_operator -> NOTSYM .)
    THIS            reduce using rule 102 (unary1_operator -> NOTSYM .)
    CHAR            reduce using rule 102 (unary1_operator -> NOTSYM .)
    SHORT           reduce using rule 102 (unary1_operator -> NOTSYM .)
    INT             reduce using rule 102 (unary1_operator -> NOTSYM .)
    LONG            reduce using rule 102 (unary1_operator -> NOTSYM .)
    SIGNED          reduce using rule 102 (unary1_operator -> NOTSYM .)
    UNSIGNED        reduce using rule 102 (unary1_operator -> NOTSYM .)
    FLOAT           reduce using rule 102 (unary1_operator -> NOTSYM .)
    DOUBLE          reduce using rule 102 (unary1_operator -> NOTSYM .)
    VOID            reduce using rule 102 (unary1_operator -> NOTSYM .)
    STRING          reduce using rule 102 (unary1_operator -> NOTSYM .)
    NUMBER          reduce using rule 102 (unary1_operator -> NOTSYM .)
    STRING_L        reduce using rule 102 (unary1_operator -> NOTSYM .)
    SCHAR           reduce using rule 102 (unary1_operator -> NOTSYM .)
    IDENTIFIER      reduce using rule 102 (unary1_operator -> NOTSYM .)
    OPERATOR        reduce using rule 102 (unary1_operator -> NOTSYM .)


state 155

    (103) unary1_operator -> BNOP .
    (261) name -> BNOP . IDENTIFIER

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    LPAREN          reduce using rule 103 (unary1_operator -> BNOP .)
    DPLUSOP         reduce using rule 103 (unary1_operator -> BNOP .)
    DMINUSOP        reduce using rule 103 (unary1_operator -> BNOP .)
    SIZEOF          reduce using rule 103 (unary1_operator -> BNOP .)
    PLUSOP          reduce using rule 103 (unary1_operator -> BNOP .)
    MINUSOP         reduce using rule 103 (unary1_operator -> BNOP .)
    NOTSYM          reduce using rule 103 (unary1_operator -> BNOP .)
    BNOP            reduce using rule 103 (unary1_operator -> BNOP .)
    MULTOP          reduce using rule 103 (unary1_operator -> BNOP .)
    BANDOP          reduce using rule 103 (unary1_operator -> BNOP .)
    NEW             reduce using rule 103 (unary1_operator -> BNOP .)
    DELETE          reduce using rule 103 (unary1_operator -> BNOP .)
    THIS            reduce using rule 103 (unary1_operator -> BNOP .)
    CHAR            reduce using rule 103 (unary1_operator -> BNOP .)
    SHORT           reduce using rule 103 (unary1_operator -> BNOP .)
    INT             reduce using rule 103 (unary1_operator -> BNOP .)
    LONG            reduce using rule 103 (unary1_operator -> BNOP .)
    SIGNED          reduce using rule 103 (unary1_operator -> BNOP .)
    UNSIGNED        reduce using rule 103 (unary1_operator -> BNOP .)
    FLOAT           reduce using rule 103 (unary1_operator -> BNOP .)
    DOUBLE          reduce using rule 103 (unary1_operator -> BNOP .)
    VOID            reduce using rule 103 (unary1_operator -> BNOP .)
    STRING          reduce using rule 103 (unary1_operator -> BNOP .)
    NUMBER          reduce using rule 103 (unary1_operator -> BNOP .)
    STRING_L        reduce using rule 103 (unary1_operator -> BNOP .)
    SCHAR           reduce using rule 103 (unary1_operator -> BNOP .)
    OPERATOR        reduce using rule 103 (unary1_operator -> BNOP .)
    IDENTIFIER      shift and go to state 73

  ! IDENTIFIER      [ reduce using rule 103 (unary1_operator -> BNOP .) ]


state 156

    (83) allocation_expression -> NEW . placement new_type_name new_initializer
    (84) allocation_expression -> NEW . new_type_name new_initializer
    (85) allocation_expression -> NEW . placement new_type_name
    (86) allocation_expression -> NEW . new_type_name
    (87) allocation_expression -> NEW . placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> NEW . LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> NEW . placement LPAREN type_name RPAREN
    (90) allocation_expression -> NEW . LPAREN type_name RPAREN
    (97) placement -> . LPAREN expression_list RPAREN
    (91) new_type_name -> . type_specifier_list new_declarator
    (92) new_type_name -> . type_specifier_list
    (262) type_specifier_list -> . type_specifier type_specifier_list
    (263) type_specifier_list -> . type_specifier
    (156) type_specifier -> . simple_type_name
    (157) type_specifier -> . class_specifier
    (158) type_specifier -> . enum_specifier
    (159) type_specifier -> . elaborated_type_specifier
    (160) type_specifier -> . CONST
    (161) type_specifier -> . VOLATILE
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (162) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (163) class_specifier -> . class_head LCPAREN RCPAREN
    (17) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (18) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (20) enum_specifier -> . ENUM LCPAREN RCPAREN
    (322) elaborated_type_specifier -> . class_key IDENTIFIER
    (323) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (324) elaborated_type_specifier -> . ENUM enum_name
    (325) elaborated_type_specifier -> . TYPE IDENTIFIER
    (326) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (304) class_head -> . class_key base_spec
    (305) class_head -> . class_key
    (306) class_head -> . class_key IDENTIFIER base_spec
    (307) class_head -> . class_key IDENTIFIER
    (328) class_key -> . CLASS
    (329) class_key -> . STRUCT
    (330) class_key -> . UNION
    (331) class_key -> . TEMPLATE

    LPAREN          shift and go to state 293
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    ENUM            shift and go to state 47
    TYPE            shift and go to state 49
    CLASS           shift and go to state 51
    STRUCT          shift and go to state 52
    UNION           shift and go to state 53
    TEMPLATE        shift and go to state 59

    placement                      shift and go to state 291
    new_type_name                  shift and go to state 292
    type_specifier_list            shift and go to state 294
    type_specifier                 shift and go to state 250
    simple_type_name               shift and go to state 25
    class_specifier                shift and go to state 26
    enum_specifier                 shift and go to state 27
    elaborated_type_specifier      shift and go to state 28
    class_head                     shift and go to state 46
    class_key                      shift and go to state 48

state 157

    (82) deallocation_expression -> DELETE . cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (264) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 176
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    cast_expression                shift and go to state 295
    unary_expression               shift and go to state 175
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    name                           shift and go to state 151
    literal                        shift and go to state 159
    operator_function_name         shift and go to state 32

state 158

    (30) logical_AND_expression -> inclusive_OR_expression .
    (33) inclusive_OR_expression -> inclusive_OR_expression . OROP exclusive_OR_expression

  ! shift/reduce conflict for OROP resolved as shift
    ANDOP           reduce using rule 30 (logical_AND_expression -> inclusive_OR_expression .)
    QUESMARK        reduce using rule 30 (logical_AND_expression -> inclusive_OR_expression .)
    RPAREN          reduce using rule 30 (logical_AND_expression -> inclusive_OR_expression .)
    COMMA           reduce using rule 30 (logical_AND_expression -> inclusive_OR_expression .)
    RSPAREN         reduce using rule 30 (logical_AND_expression -> inclusive_OR_expression .)
    SEMICOLON       reduce using rule 30 (logical_AND_expression -> inclusive_OR_expression .)
    RCPAREN         reduce using rule 30 (logical_AND_expression -> inclusive_OR_expression .)
    COLON           reduce using rule 30 (logical_AND_expression -> inclusive_OR_expression .)
    RTEMPLATE       reduce using rule 30 (logical_AND_expression -> inclusive_OR_expression .)
    OROP            shift and go to state 296

  ! OROP            [ reduce using rule 30 (logical_AND_expression -> inclusive_OR_expression .) ]


state 159

    (117) primary_expression -> literal .

    LSPAREN         reduce using rule 117 (primary_expression -> literal .)
    LPAREN          reduce using rule 117 (primary_expression -> literal .)
    DOT             reduce using rule 117 (primary_expression -> literal .)
    ARROW           reduce using rule 117 (primary_expression -> literal .)
    DPLUSOP         reduce using rule 117 (primary_expression -> literal .)
    DMINUSOP        reduce using rule 117 (primary_expression -> literal .)
    LTEMPLATE       reduce using rule 117 (primary_expression -> literal .)
    EQUAL           reduce using rule 117 (primary_expression -> literal .)
    MULTEQOP        reduce using rule 117 (primary_expression -> literal .)
    DIVEQOP         reduce using rule 117 (primary_expression -> literal .)
    MODEQOP         reduce using rule 117 (primary_expression -> literal .)
    PLUSEQOP        reduce using rule 117 (primary_expression -> literal .)
    MINUSEQOP       reduce using rule 117 (primary_expression -> literal .)
    LSHIFTEQOP      reduce using rule 117 (primary_expression -> literal .)
    RSHIFTEQOP      reduce using rule 117 (primary_expression -> literal .)
    BANDEQOP        reduce using rule 117 (primary_expression -> literal .)
    BOREQOP         reduce using rule 117 (primary_expression -> literal .)
    DOTSTAR         reduce using rule 117 (primary_expression -> literal .)
    ARROWSTAR       reduce using rule 117 (primary_expression -> literal .)
    MULTOP          reduce using rule 117 (primary_expression -> literal .)
    DIVOP           reduce using rule 117 (primary_expression -> literal .)
    MODOP           reduce using rule 117 (primary_expression -> literal .)
    PLUSOP          reduce using rule 117 (primary_expression -> literal .)
    MINUSOP         reduce using rule 117 (primary_expression -> literal .)
    LSHIFT          reduce using rule 117 (primary_expression -> literal .)
    RSHIFT          reduce using rule 117 (primary_expression -> literal .)
    LTCOMP          reduce using rule 117 (primary_expression -> literal .)
    GTCOMP          reduce using rule 117 (primary_expression -> literal .)
    LTECOMP         reduce using rule 117 (primary_expression -> literal .)
    GTECOMP         reduce using rule 117 (primary_expression -> literal .)
    EQCOMP          reduce using rule 117 (primary_expression -> literal .)
    NEQCOMP         reduce using rule 117 (primary_expression -> literal .)
    BANDOP          reduce using rule 117 (primary_expression -> literal .)
    XOROP           reduce using rule 117 (primary_expression -> literal .)
    OROP            reduce using rule 117 (primary_expression -> literal .)
    ANDOP           reduce using rule 117 (primary_expression -> literal .)
    QUESMARK        reduce using rule 117 (primary_expression -> literal .)
    RPAREN          reduce using rule 117 (primary_expression -> literal .)
    COMMA           reduce using rule 117 (primary_expression -> literal .)
    RSPAREN         reduce using rule 117 (primary_expression -> literal .)
    SEMICOLON       reduce using rule 117 (primary_expression -> literal .)
    RCPAREN         reduce using rule 117 (primary_expression -> literal .)
    COLON           reduce using rule 117 (primary_expression -> literal .)
    RTEMPLATE       reduce using rule 117 (primary_expression -> literal .)


state 160

    (118) primary_expression -> THIS .

    LSPAREN         reduce using rule 118 (primary_expression -> THIS .)
    LPAREN          reduce using rule 118 (primary_expression -> THIS .)
    DOT             reduce using rule 118 (primary_expression -> THIS .)
    ARROW           reduce using rule 118 (primary_expression -> THIS .)
    DPLUSOP         reduce using rule 118 (primary_expression -> THIS .)
    DMINUSOP        reduce using rule 118 (primary_expression -> THIS .)
    LTEMPLATE       reduce using rule 118 (primary_expression -> THIS .)
    EQUAL           reduce using rule 118 (primary_expression -> THIS .)
    MULTEQOP        reduce using rule 118 (primary_expression -> THIS .)
    DIVEQOP         reduce using rule 118 (primary_expression -> THIS .)
    MODEQOP         reduce using rule 118 (primary_expression -> THIS .)
    PLUSEQOP        reduce using rule 118 (primary_expression -> THIS .)
    MINUSEQOP       reduce using rule 118 (primary_expression -> THIS .)
    LSHIFTEQOP      reduce using rule 118 (primary_expression -> THIS .)
    RSHIFTEQOP      reduce using rule 118 (primary_expression -> THIS .)
    BANDEQOP        reduce using rule 118 (primary_expression -> THIS .)
    BOREQOP         reduce using rule 118 (primary_expression -> THIS .)
    DOTSTAR         reduce using rule 118 (primary_expression -> THIS .)
    ARROWSTAR       reduce using rule 118 (primary_expression -> THIS .)
    MULTOP          reduce using rule 118 (primary_expression -> THIS .)
    DIVOP           reduce using rule 118 (primary_expression -> THIS .)
    MODOP           reduce using rule 118 (primary_expression -> THIS .)
    PLUSOP          reduce using rule 118 (primary_expression -> THIS .)
    MINUSOP         reduce using rule 118 (primary_expression -> THIS .)
    LSHIFT          reduce using rule 118 (primary_expression -> THIS .)
    RSHIFT          reduce using rule 118 (primary_expression -> THIS .)
    LTCOMP          reduce using rule 118 (primary_expression -> THIS .)
    GTCOMP          reduce using rule 118 (primary_expression -> THIS .)
    LTECOMP         reduce using rule 118 (primary_expression -> THIS .)
    GTECOMP         reduce using rule 118 (primary_expression -> THIS .)
    EQCOMP          reduce using rule 118 (primary_expression -> THIS .)
    NEQCOMP         reduce using rule 118 (primary_expression -> THIS .)
    BANDOP          reduce using rule 118 (primary_expression -> THIS .)
    XOROP           reduce using rule 118 (primary_expression -> THIS .)
    OROP            reduce using rule 118 (primary_expression -> THIS .)
    ANDOP           reduce using rule 118 (primary_expression -> THIS .)
    QUESMARK        reduce using rule 118 (primary_expression -> THIS .)
    RPAREN          reduce using rule 118 (primary_expression -> THIS .)
    COMMA           reduce using rule 118 (primary_expression -> THIS .)
    RSPAREN         reduce using rule 118 (primary_expression -> THIS .)
    SEMICOLON       reduce using rule 118 (primary_expression -> THIS .)
    RCPAREN         reduce using rule 118 (primary_expression -> THIS .)
    COLON           reduce using rule 118 (primary_expression -> THIS .)
    RTEMPLATE       reduce using rule 118 (primary_expression -> THIS .)


state 161

    (32) inclusive_OR_expression -> exclusive_OR_expression .
    (35) exclusive_OR_expression -> exclusive_OR_expression . XOROP AND_expression

    OROP            reduce using rule 32 (inclusive_OR_expression -> exclusive_OR_expression .)
    ANDOP           reduce using rule 32 (inclusive_OR_expression -> exclusive_OR_expression .)
    QUESMARK        reduce using rule 32 (inclusive_OR_expression -> exclusive_OR_expression .)
    RPAREN          reduce using rule 32 (inclusive_OR_expression -> exclusive_OR_expression .)
    COMMA           reduce using rule 32 (inclusive_OR_expression -> exclusive_OR_expression .)
    RSPAREN         reduce using rule 32 (inclusive_OR_expression -> exclusive_OR_expression .)
    SEMICOLON       reduce using rule 32 (inclusive_OR_expression -> exclusive_OR_expression .)
    RCPAREN         reduce using rule 32 (inclusive_OR_expression -> exclusive_OR_expression .)
    COLON           reduce using rule 32 (inclusive_OR_expression -> exclusive_OR_expression .)
    RTEMPLATE       reduce using rule 32 (inclusive_OR_expression -> exclusive_OR_expression .)
    XOROP           shift and go to state 297


state 162

    (121) literal -> NUMBER .

    LSPAREN         reduce using rule 121 (literal -> NUMBER .)
    LPAREN          reduce using rule 121 (literal -> NUMBER .)
    DOT             reduce using rule 121 (literal -> NUMBER .)
    ARROW           reduce using rule 121 (literal -> NUMBER .)
    DPLUSOP         reduce using rule 121 (literal -> NUMBER .)
    DMINUSOP        reduce using rule 121 (literal -> NUMBER .)
    LTEMPLATE       reduce using rule 121 (literal -> NUMBER .)
    EQUAL           reduce using rule 121 (literal -> NUMBER .)
    MULTEQOP        reduce using rule 121 (literal -> NUMBER .)
    DIVEQOP         reduce using rule 121 (literal -> NUMBER .)
    MODEQOP         reduce using rule 121 (literal -> NUMBER .)
    PLUSEQOP        reduce using rule 121 (literal -> NUMBER .)
    MINUSEQOP       reduce using rule 121 (literal -> NUMBER .)
    LSHIFTEQOP      reduce using rule 121 (literal -> NUMBER .)
    RSHIFTEQOP      reduce using rule 121 (literal -> NUMBER .)
    BANDEQOP        reduce using rule 121 (literal -> NUMBER .)
    BOREQOP         reduce using rule 121 (literal -> NUMBER .)
    DOTSTAR         reduce using rule 121 (literal -> NUMBER .)
    ARROWSTAR       reduce using rule 121 (literal -> NUMBER .)
    MULTOP          reduce using rule 121 (literal -> NUMBER .)
    DIVOP           reduce using rule 121 (literal -> NUMBER .)
    MODOP           reduce using rule 121 (literal -> NUMBER .)
    PLUSOP          reduce using rule 121 (literal -> NUMBER .)
    MINUSOP         reduce using rule 121 (literal -> NUMBER .)
    LSHIFT          reduce using rule 121 (literal -> NUMBER .)
    RSHIFT          reduce using rule 121 (literal -> NUMBER .)
    LTCOMP          reduce using rule 121 (literal -> NUMBER .)
    GTCOMP          reduce using rule 121 (literal -> NUMBER .)
    LTECOMP         reduce using rule 121 (literal -> NUMBER .)
    GTECOMP         reduce using rule 121 (literal -> NUMBER .)
    EQCOMP          reduce using rule 121 (literal -> NUMBER .)
    NEQCOMP         reduce using rule 121 (literal -> NUMBER .)
    BANDOP          reduce using rule 121 (literal -> NUMBER .)
    XOROP           reduce using rule 121 (literal -> NUMBER .)
    OROP            reduce using rule 121 (literal -> NUMBER .)
    ANDOP           reduce using rule 121 (literal -> NUMBER .)
    QUESMARK        reduce using rule 121 (literal -> NUMBER .)
    RPAREN          reduce using rule 121 (literal -> NUMBER .)
    COMMA           reduce using rule 121 (literal -> NUMBER .)
    RSPAREN         reduce using rule 121 (literal -> NUMBER .)
    SEMICOLON       reduce using rule 121 (literal -> NUMBER .)
    RCPAREN         reduce using rule 121 (literal -> NUMBER .)
    COLON           reduce using rule 121 (literal -> NUMBER .)
    RTEMPLATE       reduce using rule 121 (literal -> NUMBER .)


state 163

    (122) literal -> STRING_L .

    LSPAREN         reduce using rule 122 (literal -> STRING_L .)
    LPAREN          reduce using rule 122 (literal -> STRING_L .)
    DOT             reduce using rule 122 (literal -> STRING_L .)
    ARROW           reduce using rule 122 (literal -> STRING_L .)
    DPLUSOP         reduce using rule 122 (literal -> STRING_L .)
    DMINUSOP        reduce using rule 122 (literal -> STRING_L .)
    LTEMPLATE       reduce using rule 122 (literal -> STRING_L .)
    EQUAL           reduce using rule 122 (literal -> STRING_L .)
    MULTEQOP        reduce using rule 122 (literal -> STRING_L .)
    DIVEQOP         reduce using rule 122 (literal -> STRING_L .)
    MODEQOP         reduce using rule 122 (literal -> STRING_L .)
    PLUSEQOP        reduce using rule 122 (literal -> STRING_L .)
    MINUSEQOP       reduce using rule 122 (literal -> STRING_L .)
    LSHIFTEQOP      reduce using rule 122 (literal -> STRING_L .)
    RSHIFTEQOP      reduce using rule 122 (literal -> STRING_L .)
    BANDEQOP        reduce using rule 122 (literal -> STRING_L .)
    BOREQOP         reduce using rule 122 (literal -> STRING_L .)
    DOTSTAR         reduce using rule 122 (literal -> STRING_L .)
    ARROWSTAR       reduce using rule 122 (literal -> STRING_L .)
    MULTOP          reduce using rule 122 (literal -> STRING_L .)
    DIVOP           reduce using rule 122 (literal -> STRING_L .)
    MODOP           reduce using rule 122 (literal -> STRING_L .)
    PLUSOP          reduce using rule 122 (literal -> STRING_L .)
    MINUSOP         reduce using rule 122 (literal -> STRING_L .)
    LSHIFT          reduce using rule 122 (literal -> STRING_L .)
    RSHIFT          reduce using rule 122 (literal -> STRING_L .)
    LTCOMP          reduce using rule 122 (literal -> STRING_L .)
    GTCOMP          reduce using rule 122 (literal -> STRING_L .)
    LTECOMP         reduce using rule 122 (literal -> STRING_L .)
    GTECOMP         reduce using rule 122 (literal -> STRING_L .)
    EQCOMP          reduce using rule 122 (literal -> STRING_L .)
    NEQCOMP         reduce using rule 122 (literal -> STRING_L .)
    BANDOP          reduce using rule 122 (literal -> STRING_L .)
    XOROP           reduce using rule 122 (literal -> STRING_L .)
    OROP            reduce using rule 122 (literal -> STRING_L .)
    ANDOP           reduce using rule 122 (literal -> STRING_L .)
    QUESMARK        reduce using rule 122 (literal -> STRING_L .)
    RPAREN          reduce using rule 122 (literal -> STRING_L .)
    COMMA           reduce using rule 122 (literal -> STRING_L .)
    RSPAREN         reduce using rule 122 (literal -> STRING_L .)
    SEMICOLON       reduce using rule 122 (literal -> STRING_L .)
    RCPAREN         reduce using rule 122 (literal -> STRING_L .)
    COLON           reduce using rule 122 (literal -> STRING_L .)
    RTEMPLATE       reduce using rule 122 (literal -> STRING_L .)


state 164

    (123) literal -> SCHAR .

    LSPAREN         reduce using rule 123 (literal -> SCHAR .)
    LPAREN          reduce using rule 123 (literal -> SCHAR .)
    DOT             reduce using rule 123 (literal -> SCHAR .)
    ARROW           reduce using rule 123 (literal -> SCHAR .)
    DPLUSOP         reduce using rule 123 (literal -> SCHAR .)
    DMINUSOP        reduce using rule 123 (literal -> SCHAR .)
    LTEMPLATE       reduce using rule 123 (literal -> SCHAR .)
    EQUAL           reduce using rule 123 (literal -> SCHAR .)
    MULTEQOP        reduce using rule 123 (literal -> SCHAR .)
    DIVEQOP         reduce using rule 123 (literal -> SCHAR .)
    MODEQOP         reduce using rule 123 (literal -> SCHAR .)
    PLUSEQOP        reduce using rule 123 (literal -> SCHAR .)
    MINUSEQOP       reduce using rule 123 (literal -> SCHAR .)
    LSHIFTEQOP      reduce using rule 123 (literal -> SCHAR .)
    RSHIFTEQOP      reduce using rule 123 (literal -> SCHAR .)
    BANDEQOP        reduce using rule 123 (literal -> SCHAR .)
    BOREQOP         reduce using rule 123 (literal -> SCHAR .)
    DOTSTAR         reduce using rule 123 (literal -> SCHAR .)
    ARROWSTAR       reduce using rule 123 (literal -> SCHAR .)
    MULTOP          reduce using rule 123 (literal -> SCHAR .)
    DIVOP           reduce using rule 123 (literal -> SCHAR .)
    MODOP           reduce using rule 123 (literal -> SCHAR .)
    PLUSOP          reduce using rule 123 (literal -> SCHAR .)
    MINUSOP         reduce using rule 123 (literal -> SCHAR .)
    LSHIFT          reduce using rule 123 (literal -> SCHAR .)
    RSHIFT          reduce using rule 123 (literal -> SCHAR .)
    LTCOMP          reduce using rule 123 (literal -> SCHAR .)
    GTCOMP          reduce using rule 123 (literal -> SCHAR .)
    LTECOMP         reduce using rule 123 (literal -> SCHAR .)
    GTECOMP         reduce using rule 123 (literal -> SCHAR .)
    EQCOMP          reduce using rule 123 (literal -> SCHAR .)
    NEQCOMP         reduce using rule 123 (literal -> SCHAR .)
    BANDOP          reduce using rule 123 (literal -> SCHAR .)
    XOROP           reduce using rule 123 (literal -> SCHAR .)
    OROP            reduce using rule 123 (literal -> SCHAR .)
    ANDOP           reduce using rule 123 (literal -> SCHAR .)
    QUESMARK        reduce using rule 123 (literal -> SCHAR .)
    RPAREN          reduce using rule 123 (literal -> SCHAR .)
    COMMA           reduce using rule 123 (literal -> SCHAR .)
    RSPAREN         reduce using rule 123 (literal -> SCHAR .)
    SEMICOLON       reduce using rule 123 (literal -> SCHAR .)
    RCPAREN         reduce using rule 123 (literal -> SCHAR .)
    COLON           reduce using rule 123 (literal -> SCHAR .)
    RTEMPLATE       reduce using rule 123 (literal -> SCHAR .)


state 165

    (34) exclusive_OR_expression -> AND_expression .
    (37) AND_expression -> AND_expression . BANDOP equality_expression

    XOROP           reduce using rule 34 (exclusive_OR_expression -> AND_expression .)
    OROP            reduce using rule 34 (exclusive_OR_expression -> AND_expression .)
    ANDOP           reduce using rule 34 (exclusive_OR_expression -> AND_expression .)
    QUESMARK        reduce using rule 34 (exclusive_OR_expression -> AND_expression .)
    RPAREN          reduce using rule 34 (exclusive_OR_expression -> AND_expression .)
    COMMA           reduce using rule 34 (exclusive_OR_expression -> AND_expression .)
    RSPAREN         reduce using rule 34 (exclusive_OR_expression -> AND_expression .)
    SEMICOLON       reduce using rule 34 (exclusive_OR_expression -> AND_expression .)
    RCPAREN         reduce using rule 34 (exclusive_OR_expression -> AND_expression .)
    COLON           reduce using rule 34 (exclusive_OR_expression -> AND_expression .)
    RTEMPLATE       reduce using rule 34 (exclusive_OR_expression -> AND_expression .)
    BANDOP          shift and go to state 298


state 166

    (36) AND_expression -> equality_expression .
    (39) equality_expression -> equality_expression . EQCOMP relational_expression
    (40) equality_expression -> equality_expression . NEQCOMP relational_expression

    BANDOP          reduce using rule 36 (AND_expression -> equality_expression .)
    XOROP           reduce using rule 36 (AND_expression -> equality_expression .)
    OROP            reduce using rule 36 (AND_expression -> equality_expression .)
    ANDOP           reduce using rule 36 (AND_expression -> equality_expression .)
    QUESMARK        reduce using rule 36 (AND_expression -> equality_expression .)
    RPAREN          reduce using rule 36 (AND_expression -> equality_expression .)
    COMMA           reduce using rule 36 (AND_expression -> equality_expression .)
    RSPAREN         reduce using rule 36 (AND_expression -> equality_expression .)
    SEMICOLON       reduce using rule 36 (AND_expression -> equality_expression .)
    RCPAREN         reduce using rule 36 (AND_expression -> equality_expression .)
    COLON           reduce using rule 36 (AND_expression -> equality_expression .)
    RTEMPLATE       reduce using rule 36 (AND_expression -> equality_expression .)
    EQCOMP          shift and go to state 299
    NEQCOMP         shift and go to state 300


state 167

    (38) equality_expression -> relational_expression .
    (42) relational_expression -> relational_expression . LTCOMP shift_expression
    (43) relational_expression -> relational_expression . GTCOMP shift_expression
    (44) relational_expression -> relational_expression . LTECOMP shift_expression
    (45) relational_expression -> relational_expression . GTECOMP shift_expression

    EQCOMP          reduce using rule 38 (equality_expression -> relational_expression .)
    NEQCOMP         reduce using rule 38 (equality_expression -> relational_expression .)
    BANDOP          reduce using rule 38 (equality_expression -> relational_expression .)
    XOROP           reduce using rule 38 (equality_expression -> relational_expression .)
    OROP            reduce using rule 38 (equality_expression -> relational_expression .)
    ANDOP           reduce using rule 38 (equality_expression -> relational_expression .)
    QUESMARK        reduce using rule 38 (equality_expression -> relational_expression .)
    RPAREN          reduce using rule 38 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 38 (equality_expression -> relational_expression .)
    RSPAREN         reduce using rule 38 (equality_expression -> relational_expression .)
    SEMICOLON       reduce using rule 38 (equality_expression -> relational_expression .)
    RCPAREN         reduce using rule 38 (equality_expression -> relational_expression .)
    COLON           reduce using rule 38 (equality_expression -> relational_expression .)
    RTEMPLATE       reduce using rule 38 (equality_expression -> relational_expression .)
    LTCOMP          shift and go to state 301
    GTCOMP          shift and go to state 302
    LTECOMP         shift and go to state 303
    GTECOMP         shift and go to state 304


state 168

    (41) relational_expression -> shift_expression .
    (47) shift_expression -> shift_expression . LSHIFT additive_expression
    (48) shift_expression -> shift_expression . RSHIFT additive_expression

    LTCOMP          reduce using rule 41 (relational_expression -> shift_expression .)
    GTCOMP          reduce using rule 41 (relational_expression -> shift_expression .)
    LTECOMP         reduce using rule 41 (relational_expression -> shift_expression .)
    GTECOMP         reduce using rule 41 (relational_expression -> shift_expression .)
    EQCOMP          reduce using rule 41 (relational_expression -> shift_expression .)
    NEQCOMP         reduce using rule 41 (relational_expression -> shift_expression .)
    BANDOP          reduce using rule 41 (relational_expression -> shift_expression .)
    XOROP           reduce using rule 41 (relational_expression -> shift_expression .)
    OROP            reduce using rule 41 (relational_expression -> shift_expression .)
    ANDOP           reduce using rule 41 (relational_expression -> shift_expression .)
    QUESMARK        reduce using rule 41 (relational_expression -> shift_expression .)
    RPAREN          reduce using rule 41 (relational_expression -> shift_expression .)
    COMMA           reduce using rule 41 (relational_expression -> shift_expression .)
    RSPAREN         reduce using rule 41 (relational_expression -> shift_expression .)
    SEMICOLON       reduce using rule 41 (relational_expression -> shift_expression .)
    RCPAREN         reduce using rule 41 (relational_expression -> shift_expression .)
    COLON           reduce using rule 41 (relational_expression -> shift_expression .)
    RTEMPLATE       reduce using rule 41 (relational_expression -> shift_expression .)
    LSHIFT          shift and go to state 305
    RSHIFT          shift and go to state 306


state 169

    (46) shift_expression -> additive_expression .
    (50) additive_expression -> additive_expression . PLUSOP multiplicative_expression
    (51) additive_expression -> additive_expression . MINUSOP multiplicative_expression

    LSHIFT          reduce using rule 46 (shift_expression -> additive_expression .)
    RSHIFT          reduce using rule 46 (shift_expression -> additive_expression .)
    LTCOMP          reduce using rule 46 (shift_expression -> additive_expression .)
    GTCOMP          reduce using rule 46 (shift_expression -> additive_expression .)
    LTECOMP         reduce using rule 46 (shift_expression -> additive_expression .)
    GTECOMP         reduce using rule 46 (shift_expression -> additive_expression .)
    EQCOMP          reduce using rule 46 (shift_expression -> additive_expression .)
    NEQCOMP         reduce using rule 46 (shift_expression -> additive_expression .)
    BANDOP          reduce using rule 46 (shift_expression -> additive_expression .)
    XOROP           reduce using rule 46 (shift_expression -> additive_expression .)
    OROP            reduce using rule 46 (shift_expression -> additive_expression .)
    ANDOP           reduce using rule 46 (shift_expression -> additive_expression .)
    QUESMARK        reduce using rule 46 (shift_expression -> additive_expression .)
    RPAREN          reduce using rule 46 (shift_expression -> additive_expression .)
    COMMA           reduce using rule 46 (shift_expression -> additive_expression .)
    RSPAREN         reduce using rule 46 (shift_expression -> additive_expression .)
    SEMICOLON       reduce using rule 46 (shift_expression -> additive_expression .)
    RCPAREN         reduce using rule 46 (shift_expression -> additive_expression .)
    COLON           reduce using rule 46 (shift_expression -> additive_expression .)
    RTEMPLATE       reduce using rule 46 (shift_expression -> additive_expression .)
    PLUSOP          shift and go to state 307
    MINUSOP         shift and go to state 308


state 170

    (49) additive_expression -> multiplicative_expression .
    (53) multiplicative_expression -> multiplicative_expression . MULTOP pm_expression
    (54) multiplicative_expression -> multiplicative_expression . DIVOP pm_expression
    (55) multiplicative_expression -> multiplicative_expression . MODOP pm_expression

    PLUSOP          reduce using rule 49 (additive_expression -> multiplicative_expression .)
    MINUSOP         reduce using rule 49 (additive_expression -> multiplicative_expression .)
    LSHIFT          reduce using rule 49 (additive_expression -> multiplicative_expression .)
    RSHIFT          reduce using rule 49 (additive_expression -> multiplicative_expression .)
    LTCOMP          reduce using rule 49 (additive_expression -> multiplicative_expression .)
    GTCOMP          reduce using rule 49 (additive_expression -> multiplicative_expression .)
    LTECOMP         reduce using rule 49 (additive_expression -> multiplicative_expression .)
    GTECOMP         reduce using rule 49 (additive_expression -> multiplicative_expression .)
    EQCOMP          reduce using rule 49 (additive_expression -> multiplicative_expression .)
    NEQCOMP         reduce using rule 49 (additive_expression -> multiplicative_expression .)
    BANDOP          reduce using rule 49 (additive_expression -> multiplicative_expression .)
    XOROP           reduce using rule 49 (additive_expression -> multiplicative_expression .)
    OROP            reduce using rule 49 (additive_expression -> multiplicative_expression .)
    ANDOP           reduce using rule 49 (additive_expression -> multiplicative_expression .)
    QUESMARK        reduce using rule 49 (additive_expression -> multiplicative_expression .)
    RPAREN          reduce using rule 49 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 49 (additive_expression -> multiplicative_expression .)
    RSPAREN         reduce using rule 49 (additive_expression -> multiplicative_expression .)
    SEMICOLON       reduce using rule 49 (additive_expression -> multiplicative_expression .)
    RCPAREN         reduce using rule 49 (additive_expression -> multiplicative_expression .)
    COLON           reduce using rule 49 (additive_expression -> multiplicative_expression .)
    RTEMPLATE       reduce using rule 49 (additive_expression -> multiplicative_expression .)
    MULTOP          shift and go to state 309
    DIVOP           shift and go to state 310
    MODOP           shift and go to state 311


state 171

    (52) multiplicative_expression -> pm_expression .
    (57) pm_expression -> pm_expression . DOTSTAR cast_expression
    (58) pm_expression -> pm_expression . ARROWSTAR cast_expression

    MULTOP          reduce using rule 52 (multiplicative_expression -> pm_expression .)
    DIVOP           reduce using rule 52 (multiplicative_expression -> pm_expression .)
    MODOP           reduce using rule 52 (multiplicative_expression -> pm_expression .)
    PLUSOP          reduce using rule 52 (multiplicative_expression -> pm_expression .)
    MINUSOP         reduce using rule 52 (multiplicative_expression -> pm_expression .)
    LSHIFT          reduce using rule 52 (multiplicative_expression -> pm_expression .)
    RSHIFT          reduce using rule 52 (multiplicative_expression -> pm_expression .)
    LTCOMP          reduce using rule 52 (multiplicative_expression -> pm_expression .)
    GTCOMP          reduce using rule 52 (multiplicative_expression -> pm_expression .)
    LTECOMP         reduce using rule 52 (multiplicative_expression -> pm_expression .)
    GTECOMP         reduce using rule 52 (multiplicative_expression -> pm_expression .)
    EQCOMP          reduce using rule 52 (multiplicative_expression -> pm_expression .)
    NEQCOMP         reduce using rule 52 (multiplicative_expression -> pm_expression .)
    BANDOP          reduce using rule 52 (multiplicative_expression -> pm_expression .)
    XOROP           reduce using rule 52 (multiplicative_expression -> pm_expression .)
    OROP            reduce using rule 52 (multiplicative_expression -> pm_expression .)
    ANDOP           reduce using rule 52 (multiplicative_expression -> pm_expression .)
    QUESMARK        reduce using rule 52 (multiplicative_expression -> pm_expression .)
    RPAREN          reduce using rule 52 (multiplicative_expression -> pm_expression .)
    COMMA           reduce using rule 52 (multiplicative_expression -> pm_expression .)
    RSPAREN         reduce using rule 52 (multiplicative_expression -> pm_expression .)
    SEMICOLON       reduce using rule 52 (multiplicative_expression -> pm_expression .)
    RCPAREN         reduce using rule 52 (multiplicative_expression -> pm_expression .)
    COLON           reduce using rule 52 (multiplicative_expression -> pm_expression .)
    RTEMPLATE       reduce using rule 52 (multiplicative_expression -> pm_expression .)
    DOTSTAR         shift and go to state 312
    ARROWSTAR       shift and go to state 313


state 172

    (256) declarator -> declarator LSPAREN constant_expression . RSPAREN

    RSPAREN         shift and go to state 314


state 173

    (257) declarator -> declarator LSPAREN RSPAREN .

    LPAREN          reduce using rule 257 (declarator -> declarator LSPAREN RSPAREN .)
    LSPAREN         reduce using rule 257 (declarator -> declarator LSPAREN RSPAREN .)
    EQUAL           reduce using rule 257 (declarator -> declarator LSPAREN RSPAREN .)
    LCPAREN         reduce using rule 257 (declarator -> declarator LSPAREN RSPAREN .)
    SEMICOLON       reduce using rule 257 (declarator -> declarator LSPAREN RSPAREN .)
    COMMA           reduce using rule 257 (declarator -> declarator LSPAREN RSPAREN .)
    RPAREN          reduce using rule 257 (declarator -> declarator LSPAREN RSPAREN .)
    RTEMPLATE       reduce using rule 257 (declarator -> declarator LSPAREN RSPAREN .)


state 174

    (25) constant_expression -> conditional_expression .

    RSPAREN         reduce using rule 25 (constant_expression -> conditional_expression .)
    COLON           reduce using rule 25 (constant_expression -> conditional_expression .)
    SEMICOLON       reduce using rule 25 (constant_expression -> conditional_expression .)
    COMMA           reduce using rule 25 (constant_expression -> conditional_expression .)
    RCPAREN         reduce using rule 25 (constant_expression -> conditional_expression .)


state 175

    (124) cast_expression -> unary_expression .

    DOTSTAR         reduce using rule 124 (cast_expression -> unary_expression .)
    ARROWSTAR       reduce using rule 124 (cast_expression -> unary_expression .)
    MULTOP          reduce using rule 124 (cast_expression -> unary_expression .)
    DIVOP           reduce using rule 124 (cast_expression -> unary_expression .)
    MODOP           reduce using rule 124 (cast_expression -> unary_expression .)
    PLUSOP          reduce using rule 124 (cast_expression -> unary_expression .)
    MINUSOP         reduce using rule 124 (cast_expression -> unary_expression .)
    LSHIFT          reduce using rule 124 (cast_expression -> unary_expression .)
    RSHIFT          reduce using rule 124 (cast_expression -> unary_expression .)
    LTCOMP          reduce using rule 124 (cast_expression -> unary_expression .)
    GTCOMP          reduce using rule 124 (cast_expression -> unary_expression .)
    LTECOMP         reduce using rule 124 (cast_expression -> unary_expression .)
    GTECOMP         reduce using rule 124 (cast_expression -> unary_expression .)
    EQCOMP          reduce using rule 124 (cast_expression -> unary_expression .)
    NEQCOMP         reduce using rule 124 (cast_expression -> unary_expression .)
    BANDOP          reduce using rule 124 (cast_expression -> unary_expression .)
    XOROP           reduce using rule 124 (cast_expression -> unary_expression .)
    OROP            reduce using rule 124 (cast_expression -> unary_expression .)
    ANDOP           reduce using rule 124 (cast_expression -> unary_expression .)
    QUESMARK        reduce using rule 124 (cast_expression -> unary_expression .)
    RSPAREN         reduce using rule 124 (cast_expression -> unary_expression .)
    EQUAL           reduce using rule 124 (cast_expression -> unary_expression .)
    MULTEQOP        reduce using rule 124 (cast_expression -> unary_expression .)
    DIVEQOP         reduce using rule 124 (cast_expression -> unary_expression .)
    MODEQOP         reduce using rule 124 (cast_expression -> unary_expression .)
    PLUSEQOP        reduce using rule 124 (cast_expression -> unary_expression .)
    MINUSEQOP       reduce using rule 124 (cast_expression -> unary_expression .)
    LSHIFTEQOP      reduce using rule 124 (cast_expression -> unary_expression .)
    RSHIFTEQOP      reduce using rule 124 (cast_expression -> unary_expression .)
    BANDEQOP        reduce using rule 124 (cast_expression -> unary_expression .)
    BOREQOP         reduce using rule 124 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 124 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 124 (cast_expression -> unary_expression .)
    SEMICOLON       reduce using rule 124 (cast_expression -> unary_expression .)
    RCPAREN         reduce using rule 124 (cast_expression -> unary_expression .)
    COLON           reduce using rule 124 (cast_expression -> unary_expression .)
    RTEMPLATE       reduce using rule 124 (cast_expression -> unary_expression .)


state 176

    (125) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (119) primary_expression -> LPAREN . expression RPAREN
    (126) type_name -> . type_specifier_list abstract_declarator
    (127) type_name -> . type_specifier_list
    (59) expression -> . assignment_expression
    (60) expression -> . expression COMMA assignment_expression
    (262) type_specifier_list -> . type_specifier type_specifier_list
    (263) type_specifier_list -> . type_specifier
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (156) type_specifier -> . simple_type_name
    (157) type_specifier -> . class_specifier
    (158) type_specifier -> . enum_specifier
    (159) type_specifier -> . elaborated_type_specifier
    (160) type_specifier -> . CONST
    (161) type_specifier -> . VOLATILE
    (26) conditional_expression -> . logical_OR_expression
    (27) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (162) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (163) class_specifier -> . class_head LCPAREN RCPAREN
    (17) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (18) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (20) enum_specifier -> . ENUM LCPAREN RCPAREN
    (322) elaborated_type_specifier -> . class_key IDENTIFIER
    (323) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (324) elaborated_type_specifier -> . ENUM enum_name
    (325) elaborated_type_specifier -> . TYPE IDENTIFIER
    (326) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (28) logical_OR_expression -> . logical_AND_expression
    (29) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (304) class_head -> . class_key base_spec
    (305) class_head -> . class_key
    (306) class_head -> . class_key IDENTIFIER base_spec
    (307) class_head -> . class_key IDENTIFIER
    (328) class_key -> . CLASS
    (329) class_key -> . STRUCT
    (330) class_key -> . UNION
    (331) class_key -> . TEMPLATE
    (30) logical_AND_expression -> . inclusive_OR_expression
    (31) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (32) inclusive_OR_expression -> . exclusive_OR_expression
    (33) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (264) operator_function_name -> . OPERATOR operator_name
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression

    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    ENUM            shift and go to state 47
    TYPE            shift and go to state 49
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    CLASS           shift and go to state 51
    STRUCT          shift and go to state 52
    UNION           shift and go to state 53
    TEMPLATE        shift and go to state 59
    THIS            shift and go to state 160
    LPAREN          shift and go to state 128
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    type_name                      shift and go to state 248
    cast_expression                shift and go to state 143
    expression                     shift and go to state 247
    type_specifier_list            shift and go to state 249
    assignment_expression          shift and go to state 208
    type_specifier                 shift and go to state 250
    conditional_expression         shift and go to state 135
    unary_expression               shift and go to state 136
    simple_type_name               shift and go to state 251
    class_specifier                shift and go to state 26
    enum_specifier                 shift and go to state 27
    elaborated_type_specifier      shift and go to state 28
    logical_OR_expression          shift and go to state 138
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    class_head                     shift and go to state 46
    class_key                      shift and go to state 48
    logical_AND_expression         shift and go to state 148
    primary_expression             shift and go to state 149
    name                           shift and go to state 151
    inclusive_OR_expression        shift and go to state 158
    literal                        shift and go to state 159
    exclusive_OR_expression        shift and go to state 161
    operator_function_name         shift and go to state 32
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171

state 177

    (111) postfix_expression -> simple_type_name . LPAREN expression_list RPAREN
    (112) postfix_expression -> simple_type_name . LPAREN RPAREN

    LPAREN          shift and go to state 290


state 178

    (234) initializer -> EQUAL assignment_expression .

    SEMICOLON       reduce using rule 234 (initializer -> EQUAL assignment_expression .)
    COMMA           reduce using rule 234 (initializer -> EQUAL assignment_expression .)


state 179

    (235) initializer -> EQUAL LCPAREN . initializer_list RCPAREN
    (236) initializer -> EQUAL LCPAREN . initializer_list COMMA RCPAREN
    (238) initializer_list -> . assignment_expression
    (239) initializer_list -> . initializer_list COMMA assignment_expression
    (240) initializer_list -> . LCPAREN initializer_list RCPAREN
    (241) initializer_list -> . LCPAREN initializer_list COMMA RCPAREN
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (26) conditional_expression -> . logical_OR_expression
    (27) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (28) logical_OR_expression -> . logical_AND_expression
    (29) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (30) logical_AND_expression -> . inclusive_OR_expression
    (31) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (32) inclusive_OR_expression -> . exclusive_OR_expression
    (33) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (264) operator_function_name -> . OPERATOR operator_name
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LCPAREN         shift and go to state 315
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    LPAREN          shift and go to state 128
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    initializer_list               shift and go to state 316
    assignment_expression          shift and go to state 317
    conditional_expression         shift and go to state 135
    unary_expression               shift and go to state 136
    logical_OR_expression          shift and go to state 138
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    cast_expression                shift and go to state 143
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    logical_AND_expression         shift and go to state 148
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    name                           shift and go to state 151
    inclusive_OR_expression        shift and go to state 158
    literal                        shift and go to state 159
    exclusive_OR_expression        shift and go to state 161
    operator_function_name         shift and go to state 32
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171

state 180

    (180) compound_statement -> LCPAREN statement_list . RCPAREN
    (183) statement_list -> statement_list . statement
    (184) statement -> . labeled_statement
    (185) statement -> . expression_statement
    (186) statement -> . compound_statement
    (187) statement -> . selection_statement
    (188) statement -> . iteration_statement
    (189) statement -> . jump_statement
    (190) statement -> . declaration_statement
    (191) statement -> . try_block
    (207) labeled_statement -> . IDENTIFIER COLON statement
    (208) labeled_statement -> . CASE constant_expression COLON statement
    (209) labeled_statement -> . DEFAULT COLON statement
    (218) expression_statement -> . expression SEMICOLON
    (219) expression_statement -> . SEMICOLON
    (180) compound_statement -> . LCPAREN statement_list RCPAREN
    (181) compound_statement -> . LCPAREN RCPAREN
    (197) selection_statement -> . IF LPAREN expression RPAREN statement
    (198) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (199) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (210) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (211) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (212) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (213) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (214) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (215) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (192) jump_statement -> . BREAK SEMICOLON
    (193) jump_statement -> . CONTINUE SEMICOLON
    (194) jump_statement -> . RETURN expression SEMICOLON
    (195) jump_statement -> . RETURN SEMICOLON
    (196) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (220) declaration_statement -> . declaration
    (200) try_block -> . TRY compound_statement handler_list
    (59) expression -> . assignment_expression
    (60) expression -> . expression COMMA assignment_expression
    (221) declaration -> . decl_specifiers declarator_list SEMICOLON
    (222) declaration -> . decl_specifiers SEMICOLON
    (223) declaration -> . declarator_list SEMICOLON
    (224) declaration -> . asm_declaration
    (225) declaration -> . function_definition
    (226) declaration -> . template_declaration
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (147) decl_specifiers -> . decl_specifiers decl_specifier
    (148) decl_specifiers -> . decl_specifier
    (230) declarator_list -> . init_declarator
    (231) declarator_list -> . declarator_list COMMA init_declarator
    (242) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (177) function_definition -> . decl_specifiers declarator fct_body
    (178) function_definition -> . declarator fct_body
    (227) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (26) conditional_expression -> . logical_OR_expression
    (27) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (149) decl_specifier -> . storage_class_specifier
    (150) decl_specifier -> . type_specifier
    (151) decl_specifier -> . TYPEDEF
    (232) init_declarator -> . declarator initializer
    (233) init_declarator -> . declarator
    (253) declarator -> . name
    (254) declarator -> . unary2_operator declarator
    (255) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (256) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (257) declarator -> . declarator LSPAREN RSPAREN
    (258) declarator -> . LPAREN declarator RPAREN
    (28) logical_OR_expression -> . logical_AND_expression
    (29) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (152) storage_class_specifier -> . AUTO
    (153) storage_class_specifier -> . STATIC
    (154) storage_class_specifier -> . EXTERN
    (155) storage_class_specifier -> . VIRTUAL
    (156) type_specifier -> . simple_type_name
    (157) type_specifier -> . class_specifier
    (158) type_specifier -> . enum_specifier
    (159) type_specifier -> . elaborated_type_specifier
    (160) type_specifier -> . CONST
    (161) type_specifier -> . VOLATILE
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (30) logical_AND_expression -> . inclusive_OR_expression
    (31) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (162) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (163) class_specifier -> . class_head LCPAREN RCPAREN
    (17) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (18) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (20) enum_specifier -> . ENUM LCPAREN RCPAREN
    (322) elaborated_type_specifier -> . class_key IDENTIFIER
    (323) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (324) elaborated_type_specifier -> . ENUM enum_name
    (325) elaborated_type_specifier -> . TYPE IDENTIFIER
    (326) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (264) operator_function_name -> . OPERATOR operator_name
    (32) inclusive_OR_expression -> . exclusive_OR_expression
    (33) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (304) class_head -> . class_key base_spec
    (305) class_head -> . class_key
    (306) class_head -> . class_key IDENTIFIER base_spec
    (307) class_head -> . class_key IDENTIFIER
    (328) class_key -> . CLASS
    (329) class_key -> . STRUCT
    (330) class_key -> . UNION
    (331) class_key -> . TEMPLATE
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RCPAREN         shift and go to state 318
    IDENTIFIER      shift and go to state 191
    CASE            shift and go to state 192
    DEFAULT         shift and go to state 193
    SEMICOLON       shift and go to state 195
    LCPAREN         shift and go to state 70
    IF              shift and go to state 196
    SWITCH          shift and go to state 198
    WHILE           shift and go to state 199
    DO              shift and go to state 200
    FOR             shift and go to state 201
    BREAK           shift and go to state 202
    CONTINUE        shift and go to state 203
    RETURN          shift and go to state 204
    GOTO            shift and go to state 205
    TRY             shift and go to state 207
    ASM             shift and go to state 12
    TEMPLATE        shift and go to state 15
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    TYPEDEF         shift and go to state 18
    LPAREN          shift and go to state 197
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    AUTO            shift and go to state 21
    STATIC          shift and go to state 22
    EXTERN          shift and go to state 23
    VIRTUAL         shift and go to state 24
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    THIS            shift and go to state 160
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    ENUM            shift and go to state 47
    TYPE            shift and go to state 49
    OPERATOR        shift and go to state 50
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    CLASS           shift and go to state 51
    STRUCT          shift and go to state 52
    UNION           shift and go to state 53

    statement                      shift and go to state 319
    labeled_statement              shift and go to state 183
    expression_statement           shift and go to state 184
    compound_statement             shift and go to state 185
    selection_statement            shift and go to state 186
    iteration_statement            shift and go to state 187
    jump_statement                 shift and go to state 188
    declaration_statement          shift and go to state 189
    try_block                      shift and go to state 190
    expression                     shift and go to state 194
    declaration                    shift and go to state 206
    assignment_expression          shift and go to state 208
    decl_specifiers                shift and go to state 5
    declarator_list                shift and go to state 6
    asm_declaration                shift and go to state 7
    function_definition            shift and go to state 8
    template_declaration           shift and go to state 9
    conditional_expression         shift and go to state 135
    unary_expression               shift and go to state 136
    decl_specifier                 shift and go to state 10
    init_declarator                shift and go to state 11
    declarator                     shift and go to state 14
    logical_OR_expression          shift and go to state 138
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    cast_expression                shift and go to state 143
    unary2_operator                shift and go to state 209
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    storage_class_specifier        shift and go to state 16
    type_specifier                 shift and go to state 17
    name                           shift and go to state 210
    logical_AND_expression         shift and go to state 148
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 150
    class_specifier                shift and go to state 26
    enum_specifier                 shift and go to state 27
    elaborated_type_specifier      shift and go to state 28
    operator_function_name         shift and go to state 32
    inclusive_OR_expression        shift and go to state 158
    literal                        shift and go to state 159
    class_head                     shift and go to state 46
    class_key                      shift and go to state 48
    exclusive_OR_expression        shift and go to state 161
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171

state 181

    (181) compound_statement -> LCPAREN RCPAREN .

    ASM             reduce using rule 181 (compound_statement -> LCPAREN RCPAREN .)
    TEMPLATE        reduce using rule 181 (compound_statement -> LCPAREN RCPAREN .)
    TYPEDEF         reduce using rule 181 (compound_statement -> LCPAREN RCPAREN .)
    LPAREN          reduce using rule 181 (compound_statement -> LCPAREN RCPAREN .)
    AUTO            reduce using rule 181 (compound_statement -> LCPAREN RCPAREN .)
    STATIC          reduce using rule 181 (compound_statement -> LCPAREN RCPAREN .)
    EXTERN          reduce using rule 181 (compound_statement -> LCPAREN RCPAREN .)
    VIRTUAL         reduce using rule 181 (compound_statement -> LCPAREN RCPAREN .)
    CONST           reduce using rule 181 (compound_statement -> LCPAREN RCPAREN .)
    VOLATILE        reduce using rule 181 (compound_statement -> LCPAREN RCPAREN .)
    IDENTIFIER      reduce using rule 181 (compound_statement -> LCPAREN RCPAREN .)
    BNOP            reduce using rule 181 (compound_statement -> LCPAREN RCPAREN .)
    MULTOP          reduce using rule 181 (compound_statement -> LCPAREN RCPAREN .)
    BANDOP          reduce using rule 181 (compound_statement -> LCPAREN RCPAREN .)
    CHAR            reduce using rule 181 (compound_statement -> LCPAREN RCPAREN .)
    SHORT           reduce using rule 181 (compound_statement -> LCPAREN RCPAREN .)
    INT             reduce using rule 181 (compound_statement -> LCPAREN RCPAREN .)
    LONG            reduce using rule 181 (compound_statement -> LCPAREN RCPAREN .)
    SIGNED          reduce using rule 181 (compound_statement -> LCPAREN RCPAREN .)
    UNSIGNED        reduce using rule 181 (compound_statement -> LCPAREN RCPAREN .)
    FLOAT           reduce using rule 181 (compound_statement -> LCPAREN RCPAREN .)
    DOUBLE          reduce using rule 181 (compound_statement -> LCPAREN RCPAREN .)
    VOID            reduce using rule 181 (compound_statement -> LCPAREN RCPAREN .)
    STRING          reduce using rule 181 (compound_statement -> LCPAREN RCPAREN .)
    ENUM            reduce using rule 181 (compound_statement -> LCPAREN RCPAREN .)
    TYPE            reduce using rule 181 (compound_statement -> LCPAREN RCPAREN .)
    OPERATOR        reduce using rule 181 (compound_statement -> LCPAREN RCPAREN .)
    CLASS           reduce using rule 181 (compound_statement -> LCPAREN RCPAREN .)
    STRUCT          reduce using rule 181 (compound_statement -> LCPAREN RCPAREN .)
    UNION           reduce using rule 181 (compound_statement -> LCPAREN RCPAREN .)
    $end            reduce using rule 181 (compound_statement -> LCPAREN RCPAREN .)
    RCPAREN         reduce using rule 181 (compound_statement -> LCPAREN RCPAREN .)
    CASE            reduce using rule 181 (compound_statement -> LCPAREN RCPAREN .)
    DEFAULT         reduce using rule 181 (compound_statement -> LCPAREN RCPAREN .)
    SEMICOLON       reduce using rule 181 (compound_statement -> LCPAREN RCPAREN .)
    LCPAREN         reduce using rule 181 (compound_statement -> LCPAREN RCPAREN .)
    IF              reduce using rule 181 (compound_statement -> LCPAREN RCPAREN .)
    SWITCH          reduce using rule 181 (compound_statement -> LCPAREN RCPAREN .)
    WHILE           reduce using rule 181 (compound_statement -> LCPAREN RCPAREN .)
    DO              reduce using rule 181 (compound_statement -> LCPAREN RCPAREN .)
    FOR             reduce using rule 181 (compound_statement -> LCPAREN RCPAREN .)
    BREAK           reduce using rule 181 (compound_statement -> LCPAREN RCPAREN .)
    CONTINUE        reduce using rule 181 (compound_statement -> LCPAREN RCPAREN .)
    RETURN          reduce using rule 181 (compound_statement -> LCPAREN RCPAREN .)
    GOTO            reduce using rule 181 (compound_statement -> LCPAREN RCPAREN .)
    TRY             reduce using rule 181 (compound_statement -> LCPAREN RCPAREN .)
    DPLUSOP         reduce using rule 181 (compound_statement -> LCPAREN RCPAREN .)
    DMINUSOP        reduce using rule 181 (compound_statement -> LCPAREN RCPAREN .)
    SIZEOF          reduce using rule 181 (compound_statement -> LCPAREN RCPAREN .)
    PLUSOP          reduce using rule 181 (compound_statement -> LCPAREN RCPAREN .)
    MINUSOP         reduce using rule 181 (compound_statement -> LCPAREN RCPAREN .)
    NOTSYM          reduce using rule 181 (compound_statement -> LCPAREN RCPAREN .)
    NEW             reduce using rule 181 (compound_statement -> LCPAREN RCPAREN .)
    DELETE          reduce using rule 181 (compound_statement -> LCPAREN RCPAREN .)
    THIS            reduce using rule 181 (compound_statement -> LCPAREN RCPAREN .)
    NUMBER          reduce using rule 181 (compound_statement -> LCPAREN RCPAREN .)
    STRING_L        reduce using rule 181 (compound_statement -> LCPAREN RCPAREN .)
    SCHAR           reduce using rule 181 (compound_statement -> LCPAREN RCPAREN .)
    ELSE            reduce using rule 181 (compound_statement -> LCPAREN RCPAREN .)
    CATCH           reduce using rule 181 (compound_statement -> LCPAREN RCPAREN .)
    COLON           reduce using rule 181 (compound_statement -> LCPAREN RCPAREN .)
    PRIVATE         reduce using rule 181 (compound_statement -> LCPAREN RCPAREN .)
    PROTECTED       reduce using rule 181 (compound_statement -> LCPAREN RCPAREN .)
    PUBLIC          reduce using rule 181 (compound_statement -> LCPAREN RCPAREN .)


state 182

    (182) statement_list -> statement .

    RCPAREN         reduce using rule 182 (statement_list -> statement .)
    IDENTIFIER      reduce using rule 182 (statement_list -> statement .)
    CASE            reduce using rule 182 (statement_list -> statement .)
    DEFAULT         reduce using rule 182 (statement_list -> statement .)
    SEMICOLON       reduce using rule 182 (statement_list -> statement .)
    LCPAREN         reduce using rule 182 (statement_list -> statement .)
    IF              reduce using rule 182 (statement_list -> statement .)
    SWITCH          reduce using rule 182 (statement_list -> statement .)
    WHILE           reduce using rule 182 (statement_list -> statement .)
    DO              reduce using rule 182 (statement_list -> statement .)
    FOR             reduce using rule 182 (statement_list -> statement .)
    BREAK           reduce using rule 182 (statement_list -> statement .)
    CONTINUE        reduce using rule 182 (statement_list -> statement .)
    RETURN          reduce using rule 182 (statement_list -> statement .)
    GOTO            reduce using rule 182 (statement_list -> statement .)
    TRY             reduce using rule 182 (statement_list -> statement .)
    ASM             reduce using rule 182 (statement_list -> statement .)
    TEMPLATE        reduce using rule 182 (statement_list -> statement .)
    DPLUSOP         reduce using rule 182 (statement_list -> statement .)
    DMINUSOP        reduce using rule 182 (statement_list -> statement .)
    SIZEOF          reduce using rule 182 (statement_list -> statement .)
    TYPEDEF         reduce using rule 182 (statement_list -> statement .)
    LPAREN          reduce using rule 182 (statement_list -> statement .)
    PLUSOP          reduce using rule 182 (statement_list -> statement .)
    MINUSOP         reduce using rule 182 (statement_list -> statement .)
    NOTSYM          reduce using rule 182 (statement_list -> statement .)
    BNOP            reduce using rule 182 (statement_list -> statement .)
    MULTOP          reduce using rule 182 (statement_list -> statement .)
    BANDOP          reduce using rule 182 (statement_list -> statement .)
    NEW             reduce using rule 182 (statement_list -> statement .)
    DELETE          reduce using rule 182 (statement_list -> statement .)
    AUTO            reduce using rule 182 (statement_list -> statement .)
    STATIC          reduce using rule 182 (statement_list -> statement .)
    EXTERN          reduce using rule 182 (statement_list -> statement .)
    VIRTUAL         reduce using rule 182 (statement_list -> statement .)
    CONST           reduce using rule 182 (statement_list -> statement .)
    VOLATILE        reduce using rule 182 (statement_list -> statement .)
    THIS            reduce using rule 182 (statement_list -> statement .)
    CHAR            reduce using rule 182 (statement_list -> statement .)
    SHORT           reduce using rule 182 (statement_list -> statement .)
    INT             reduce using rule 182 (statement_list -> statement .)
    LONG            reduce using rule 182 (statement_list -> statement .)
    SIGNED          reduce using rule 182 (statement_list -> statement .)
    UNSIGNED        reduce using rule 182 (statement_list -> statement .)
    FLOAT           reduce using rule 182 (statement_list -> statement .)
    DOUBLE          reduce using rule 182 (statement_list -> statement .)
    VOID            reduce using rule 182 (statement_list -> statement .)
    STRING          reduce using rule 182 (statement_list -> statement .)
    ENUM            reduce using rule 182 (statement_list -> statement .)
    TYPE            reduce using rule 182 (statement_list -> statement .)
    OPERATOR        reduce using rule 182 (statement_list -> statement .)
    NUMBER          reduce using rule 182 (statement_list -> statement .)
    STRING_L        reduce using rule 182 (statement_list -> statement .)
    SCHAR           reduce using rule 182 (statement_list -> statement .)
    CLASS           reduce using rule 182 (statement_list -> statement .)
    STRUCT          reduce using rule 182 (statement_list -> statement .)
    UNION           reduce using rule 182 (statement_list -> statement .)


state 183

    (184) statement -> labeled_statement .

    RCPAREN         reduce using rule 184 (statement -> labeled_statement .)
    IDENTIFIER      reduce using rule 184 (statement -> labeled_statement .)
    CASE            reduce using rule 184 (statement -> labeled_statement .)
    DEFAULT         reduce using rule 184 (statement -> labeled_statement .)
    SEMICOLON       reduce using rule 184 (statement -> labeled_statement .)
    LCPAREN         reduce using rule 184 (statement -> labeled_statement .)
    IF              reduce using rule 184 (statement -> labeled_statement .)
    SWITCH          reduce using rule 184 (statement -> labeled_statement .)
    WHILE           reduce using rule 184 (statement -> labeled_statement .)
    DO              reduce using rule 184 (statement -> labeled_statement .)
    FOR             reduce using rule 184 (statement -> labeled_statement .)
    BREAK           reduce using rule 184 (statement -> labeled_statement .)
    CONTINUE        reduce using rule 184 (statement -> labeled_statement .)
    RETURN          reduce using rule 184 (statement -> labeled_statement .)
    GOTO            reduce using rule 184 (statement -> labeled_statement .)
    TRY             reduce using rule 184 (statement -> labeled_statement .)
    ASM             reduce using rule 184 (statement -> labeled_statement .)
    TEMPLATE        reduce using rule 184 (statement -> labeled_statement .)
    DPLUSOP         reduce using rule 184 (statement -> labeled_statement .)
    DMINUSOP        reduce using rule 184 (statement -> labeled_statement .)
    SIZEOF          reduce using rule 184 (statement -> labeled_statement .)
    TYPEDEF         reduce using rule 184 (statement -> labeled_statement .)
    LPAREN          reduce using rule 184 (statement -> labeled_statement .)
    PLUSOP          reduce using rule 184 (statement -> labeled_statement .)
    MINUSOP         reduce using rule 184 (statement -> labeled_statement .)
    NOTSYM          reduce using rule 184 (statement -> labeled_statement .)
    BNOP            reduce using rule 184 (statement -> labeled_statement .)
    MULTOP          reduce using rule 184 (statement -> labeled_statement .)
    BANDOP          reduce using rule 184 (statement -> labeled_statement .)
    NEW             reduce using rule 184 (statement -> labeled_statement .)
    DELETE          reduce using rule 184 (statement -> labeled_statement .)
    AUTO            reduce using rule 184 (statement -> labeled_statement .)
    STATIC          reduce using rule 184 (statement -> labeled_statement .)
    EXTERN          reduce using rule 184 (statement -> labeled_statement .)
    VIRTUAL         reduce using rule 184 (statement -> labeled_statement .)
    CONST           reduce using rule 184 (statement -> labeled_statement .)
    VOLATILE        reduce using rule 184 (statement -> labeled_statement .)
    THIS            reduce using rule 184 (statement -> labeled_statement .)
    CHAR            reduce using rule 184 (statement -> labeled_statement .)
    SHORT           reduce using rule 184 (statement -> labeled_statement .)
    INT             reduce using rule 184 (statement -> labeled_statement .)
    LONG            reduce using rule 184 (statement -> labeled_statement .)
    SIGNED          reduce using rule 184 (statement -> labeled_statement .)
    UNSIGNED        reduce using rule 184 (statement -> labeled_statement .)
    FLOAT           reduce using rule 184 (statement -> labeled_statement .)
    DOUBLE          reduce using rule 184 (statement -> labeled_statement .)
    VOID            reduce using rule 184 (statement -> labeled_statement .)
    STRING          reduce using rule 184 (statement -> labeled_statement .)
    ENUM            reduce using rule 184 (statement -> labeled_statement .)
    TYPE            reduce using rule 184 (statement -> labeled_statement .)
    OPERATOR        reduce using rule 184 (statement -> labeled_statement .)
    NUMBER          reduce using rule 184 (statement -> labeled_statement .)
    STRING_L        reduce using rule 184 (statement -> labeled_statement .)
    SCHAR           reduce using rule 184 (statement -> labeled_statement .)
    CLASS           reduce using rule 184 (statement -> labeled_statement .)
    STRUCT          reduce using rule 184 (statement -> labeled_statement .)
    UNION           reduce using rule 184 (statement -> labeled_statement .)
    ELSE            reduce using rule 184 (statement -> labeled_statement .)


state 184

    (185) statement -> expression_statement .

    RCPAREN         reduce using rule 185 (statement -> expression_statement .)
    IDENTIFIER      reduce using rule 185 (statement -> expression_statement .)
    CASE            reduce using rule 185 (statement -> expression_statement .)
    DEFAULT         reduce using rule 185 (statement -> expression_statement .)
    SEMICOLON       reduce using rule 185 (statement -> expression_statement .)
    LCPAREN         reduce using rule 185 (statement -> expression_statement .)
    IF              reduce using rule 185 (statement -> expression_statement .)
    SWITCH          reduce using rule 185 (statement -> expression_statement .)
    WHILE           reduce using rule 185 (statement -> expression_statement .)
    DO              reduce using rule 185 (statement -> expression_statement .)
    FOR             reduce using rule 185 (statement -> expression_statement .)
    BREAK           reduce using rule 185 (statement -> expression_statement .)
    CONTINUE        reduce using rule 185 (statement -> expression_statement .)
    RETURN          reduce using rule 185 (statement -> expression_statement .)
    GOTO            reduce using rule 185 (statement -> expression_statement .)
    TRY             reduce using rule 185 (statement -> expression_statement .)
    ASM             reduce using rule 185 (statement -> expression_statement .)
    TEMPLATE        reduce using rule 185 (statement -> expression_statement .)
    DPLUSOP         reduce using rule 185 (statement -> expression_statement .)
    DMINUSOP        reduce using rule 185 (statement -> expression_statement .)
    SIZEOF          reduce using rule 185 (statement -> expression_statement .)
    TYPEDEF         reduce using rule 185 (statement -> expression_statement .)
    LPAREN          reduce using rule 185 (statement -> expression_statement .)
    PLUSOP          reduce using rule 185 (statement -> expression_statement .)
    MINUSOP         reduce using rule 185 (statement -> expression_statement .)
    NOTSYM          reduce using rule 185 (statement -> expression_statement .)
    BNOP            reduce using rule 185 (statement -> expression_statement .)
    MULTOP          reduce using rule 185 (statement -> expression_statement .)
    BANDOP          reduce using rule 185 (statement -> expression_statement .)
    NEW             reduce using rule 185 (statement -> expression_statement .)
    DELETE          reduce using rule 185 (statement -> expression_statement .)
    AUTO            reduce using rule 185 (statement -> expression_statement .)
    STATIC          reduce using rule 185 (statement -> expression_statement .)
    EXTERN          reduce using rule 185 (statement -> expression_statement .)
    VIRTUAL         reduce using rule 185 (statement -> expression_statement .)
    CONST           reduce using rule 185 (statement -> expression_statement .)
    VOLATILE        reduce using rule 185 (statement -> expression_statement .)
    THIS            reduce using rule 185 (statement -> expression_statement .)
    CHAR            reduce using rule 185 (statement -> expression_statement .)
    SHORT           reduce using rule 185 (statement -> expression_statement .)
    INT             reduce using rule 185 (statement -> expression_statement .)
    LONG            reduce using rule 185 (statement -> expression_statement .)
    SIGNED          reduce using rule 185 (statement -> expression_statement .)
    UNSIGNED        reduce using rule 185 (statement -> expression_statement .)
    FLOAT           reduce using rule 185 (statement -> expression_statement .)
    DOUBLE          reduce using rule 185 (statement -> expression_statement .)
    VOID            reduce using rule 185 (statement -> expression_statement .)
    STRING          reduce using rule 185 (statement -> expression_statement .)
    ENUM            reduce using rule 185 (statement -> expression_statement .)
    TYPE            reduce using rule 185 (statement -> expression_statement .)
    OPERATOR        reduce using rule 185 (statement -> expression_statement .)
    NUMBER          reduce using rule 185 (statement -> expression_statement .)
    STRING_L        reduce using rule 185 (statement -> expression_statement .)
    SCHAR           reduce using rule 185 (statement -> expression_statement .)
    CLASS           reduce using rule 185 (statement -> expression_statement .)
    STRUCT          reduce using rule 185 (statement -> expression_statement .)
    UNION           reduce using rule 185 (statement -> expression_statement .)
    ELSE            reduce using rule 185 (statement -> expression_statement .)


state 185

    (186) statement -> compound_statement .

    RCPAREN         reduce using rule 186 (statement -> compound_statement .)
    IDENTIFIER      reduce using rule 186 (statement -> compound_statement .)
    CASE            reduce using rule 186 (statement -> compound_statement .)
    DEFAULT         reduce using rule 186 (statement -> compound_statement .)
    SEMICOLON       reduce using rule 186 (statement -> compound_statement .)
    LCPAREN         reduce using rule 186 (statement -> compound_statement .)
    IF              reduce using rule 186 (statement -> compound_statement .)
    SWITCH          reduce using rule 186 (statement -> compound_statement .)
    WHILE           reduce using rule 186 (statement -> compound_statement .)
    DO              reduce using rule 186 (statement -> compound_statement .)
    FOR             reduce using rule 186 (statement -> compound_statement .)
    BREAK           reduce using rule 186 (statement -> compound_statement .)
    CONTINUE        reduce using rule 186 (statement -> compound_statement .)
    RETURN          reduce using rule 186 (statement -> compound_statement .)
    GOTO            reduce using rule 186 (statement -> compound_statement .)
    TRY             reduce using rule 186 (statement -> compound_statement .)
    ASM             reduce using rule 186 (statement -> compound_statement .)
    TEMPLATE        reduce using rule 186 (statement -> compound_statement .)
    DPLUSOP         reduce using rule 186 (statement -> compound_statement .)
    DMINUSOP        reduce using rule 186 (statement -> compound_statement .)
    SIZEOF          reduce using rule 186 (statement -> compound_statement .)
    TYPEDEF         reduce using rule 186 (statement -> compound_statement .)
    LPAREN          reduce using rule 186 (statement -> compound_statement .)
    PLUSOP          reduce using rule 186 (statement -> compound_statement .)
    MINUSOP         reduce using rule 186 (statement -> compound_statement .)
    NOTSYM          reduce using rule 186 (statement -> compound_statement .)
    BNOP            reduce using rule 186 (statement -> compound_statement .)
    MULTOP          reduce using rule 186 (statement -> compound_statement .)
    BANDOP          reduce using rule 186 (statement -> compound_statement .)
    NEW             reduce using rule 186 (statement -> compound_statement .)
    DELETE          reduce using rule 186 (statement -> compound_statement .)
    AUTO            reduce using rule 186 (statement -> compound_statement .)
    STATIC          reduce using rule 186 (statement -> compound_statement .)
    EXTERN          reduce using rule 186 (statement -> compound_statement .)
    VIRTUAL         reduce using rule 186 (statement -> compound_statement .)
    CONST           reduce using rule 186 (statement -> compound_statement .)
    VOLATILE        reduce using rule 186 (statement -> compound_statement .)
    THIS            reduce using rule 186 (statement -> compound_statement .)
    CHAR            reduce using rule 186 (statement -> compound_statement .)
    SHORT           reduce using rule 186 (statement -> compound_statement .)
    INT             reduce using rule 186 (statement -> compound_statement .)
    LONG            reduce using rule 186 (statement -> compound_statement .)
    SIGNED          reduce using rule 186 (statement -> compound_statement .)
    UNSIGNED        reduce using rule 186 (statement -> compound_statement .)
    FLOAT           reduce using rule 186 (statement -> compound_statement .)
    DOUBLE          reduce using rule 186 (statement -> compound_statement .)
    VOID            reduce using rule 186 (statement -> compound_statement .)
    STRING          reduce using rule 186 (statement -> compound_statement .)
    ENUM            reduce using rule 186 (statement -> compound_statement .)
    TYPE            reduce using rule 186 (statement -> compound_statement .)
    OPERATOR        reduce using rule 186 (statement -> compound_statement .)
    NUMBER          reduce using rule 186 (statement -> compound_statement .)
    STRING_L        reduce using rule 186 (statement -> compound_statement .)
    SCHAR           reduce using rule 186 (statement -> compound_statement .)
    CLASS           reduce using rule 186 (statement -> compound_statement .)
    STRUCT          reduce using rule 186 (statement -> compound_statement .)
    UNION           reduce using rule 186 (statement -> compound_statement .)
    ELSE            reduce using rule 186 (statement -> compound_statement .)


state 186

    (187) statement -> selection_statement .

    RCPAREN         reduce using rule 187 (statement -> selection_statement .)
    IDENTIFIER      reduce using rule 187 (statement -> selection_statement .)
    CASE            reduce using rule 187 (statement -> selection_statement .)
    DEFAULT         reduce using rule 187 (statement -> selection_statement .)
    SEMICOLON       reduce using rule 187 (statement -> selection_statement .)
    LCPAREN         reduce using rule 187 (statement -> selection_statement .)
    IF              reduce using rule 187 (statement -> selection_statement .)
    SWITCH          reduce using rule 187 (statement -> selection_statement .)
    WHILE           reduce using rule 187 (statement -> selection_statement .)
    DO              reduce using rule 187 (statement -> selection_statement .)
    FOR             reduce using rule 187 (statement -> selection_statement .)
    BREAK           reduce using rule 187 (statement -> selection_statement .)
    CONTINUE        reduce using rule 187 (statement -> selection_statement .)
    RETURN          reduce using rule 187 (statement -> selection_statement .)
    GOTO            reduce using rule 187 (statement -> selection_statement .)
    TRY             reduce using rule 187 (statement -> selection_statement .)
    ASM             reduce using rule 187 (statement -> selection_statement .)
    TEMPLATE        reduce using rule 187 (statement -> selection_statement .)
    DPLUSOP         reduce using rule 187 (statement -> selection_statement .)
    DMINUSOP        reduce using rule 187 (statement -> selection_statement .)
    SIZEOF          reduce using rule 187 (statement -> selection_statement .)
    TYPEDEF         reduce using rule 187 (statement -> selection_statement .)
    LPAREN          reduce using rule 187 (statement -> selection_statement .)
    PLUSOP          reduce using rule 187 (statement -> selection_statement .)
    MINUSOP         reduce using rule 187 (statement -> selection_statement .)
    NOTSYM          reduce using rule 187 (statement -> selection_statement .)
    BNOP            reduce using rule 187 (statement -> selection_statement .)
    MULTOP          reduce using rule 187 (statement -> selection_statement .)
    BANDOP          reduce using rule 187 (statement -> selection_statement .)
    NEW             reduce using rule 187 (statement -> selection_statement .)
    DELETE          reduce using rule 187 (statement -> selection_statement .)
    AUTO            reduce using rule 187 (statement -> selection_statement .)
    STATIC          reduce using rule 187 (statement -> selection_statement .)
    EXTERN          reduce using rule 187 (statement -> selection_statement .)
    VIRTUAL         reduce using rule 187 (statement -> selection_statement .)
    CONST           reduce using rule 187 (statement -> selection_statement .)
    VOLATILE        reduce using rule 187 (statement -> selection_statement .)
    THIS            reduce using rule 187 (statement -> selection_statement .)
    CHAR            reduce using rule 187 (statement -> selection_statement .)
    SHORT           reduce using rule 187 (statement -> selection_statement .)
    INT             reduce using rule 187 (statement -> selection_statement .)
    LONG            reduce using rule 187 (statement -> selection_statement .)
    SIGNED          reduce using rule 187 (statement -> selection_statement .)
    UNSIGNED        reduce using rule 187 (statement -> selection_statement .)
    FLOAT           reduce using rule 187 (statement -> selection_statement .)
    DOUBLE          reduce using rule 187 (statement -> selection_statement .)
    VOID            reduce using rule 187 (statement -> selection_statement .)
    STRING          reduce using rule 187 (statement -> selection_statement .)
    ENUM            reduce using rule 187 (statement -> selection_statement .)
    TYPE            reduce using rule 187 (statement -> selection_statement .)
    OPERATOR        reduce using rule 187 (statement -> selection_statement .)
    NUMBER          reduce using rule 187 (statement -> selection_statement .)
    STRING_L        reduce using rule 187 (statement -> selection_statement .)
    SCHAR           reduce using rule 187 (statement -> selection_statement .)
    CLASS           reduce using rule 187 (statement -> selection_statement .)
    STRUCT          reduce using rule 187 (statement -> selection_statement .)
    UNION           reduce using rule 187 (statement -> selection_statement .)
    ELSE            reduce using rule 187 (statement -> selection_statement .)


state 187

    (188) statement -> iteration_statement .

    RCPAREN         reduce using rule 188 (statement -> iteration_statement .)
    IDENTIFIER      reduce using rule 188 (statement -> iteration_statement .)
    CASE            reduce using rule 188 (statement -> iteration_statement .)
    DEFAULT         reduce using rule 188 (statement -> iteration_statement .)
    SEMICOLON       reduce using rule 188 (statement -> iteration_statement .)
    LCPAREN         reduce using rule 188 (statement -> iteration_statement .)
    IF              reduce using rule 188 (statement -> iteration_statement .)
    SWITCH          reduce using rule 188 (statement -> iteration_statement .)
    WHILE           reduce using rule 188 (statement -> iteration_statement .)
    DO              reduce using rule 188 (statement -> iteration_statement .)
    FOR             reduce using rule 188 (statement -> iteration_statement .)
    BREAK           reduce using rule 188 (statement -> iteration_statement .)
    CONTINUE        reduce using rule 188 (statement -> iteration_statement .)
    RETURN          reduce using rule 188 (statement -> iteration_statement .)
    GOTO            reduce using rule 188 (statement -> iteration_statement .)
    TRY             reduce using rule 188 (statement -> iteration_statement .)
    ASM             reduce using rule 188 (statement -> iteration_statement .)
    TEMPLATE        reduce using rule 188 (statement -> iteration_statement .)
    DPLUSOP         reduce using rule 188 (statement -> iteration_statement .)
    DMINUSOP        reduce using rule 188 (statement -> iteration_statement .)
    SIZEOF          reduce using rule 188 (statement -> iteration_statement .)
    TYPEDEF         reduce using rule 188 (statement -> iteration_statement .)
    LPAREN          reduce using rule 188 (statement -> iteration_statement .)
    PLUSOP          reduce using rule 188 (statement -> iteration_statement .)
    MINUSOP         reduce using rule 188 (statement -> iteration_statement .)
    NOTSYM          reduce using rule 188 (statement -> iteration_statement .)
    BNOP            reduce using rule 188 (statement -> iteration_statement .)
    MULTOP          reduce using rule 188 (statement -> iteration_statement .)
    BANDOP          reduce using rule 188 (statement -> iteration_statement .)
    NEW             reduce using rule 188 (statement -> iteration_statement .)
    DELETE          reduce using rule 188 (statement -> iteration_statement .)
    AUTO            reduce using rule 188 (statement -> iteration_statement .)
    STATIC          reduce using rule 188 (statement -> iteration_statement .)
    EXTERN          reduce using rule 188 (statement -> iteration_statement .)
    VIRTUAL         reduce using rule 188 (statement -> iteration_statement .)
    CONST           reduce using rule 188 (statement -> iteration_statement .)
    VOLATILE        reduce using rule 188 (statement -> iteration_statement .)
    THIS            reduce using rule 188 (statement -> iteration_statement .)
    CHAR            reduce using rule 188 (statement -> iteration_statement .)
    SHORT           reduce using rule 188 (statement -> iteration_statement .)
    INT             reduce using rule 188 (statement -> iteration_statement .)
    LONG            reduce using rule 188 (statement -> iteration_statement .)
    SIGNED          reduce using rule 188 (statement -> iteration_statement .)
    UNSIGNED        reduce using rule 188 (statement -> iteration_statement .)
    FLOAT           reduce using rule 188 (statement -> iteration_statement .)
    DOUBLE          reduce using rule 188 (statement -> iteration_statement .)
    VOID            reduce using rule 188 (statement -> iteration_statement .)
    STRING          reduce using rule 188 (statement -> iteration_statement .)
    ENUM            reduce using rule 188 (statement -> iteration_statement .)
    TYPE            reduce using rule 188 (statement -> iteration_statement .)
    OPERATOR        reduce using rule 188 (statement -> iteration_statement .)
    NUMBER          reduce using rule 188 (statement -> iteration_statement .)
    STRING_L        reduce using rule 188 (statement -> iteration_statement .)
    SCHAR           reduce using rule 188 (statement -> iteration_statement .)
    CLASS           reduce using rule 188 (statement -> iteration_statement .)
    STRUCT          reduce using rule 188 (statement -> iteration_statement .)
    UNION           reduce using rule 188 (statement -> iteration_statement .)
    ELSE            reduce using rule 188 (statement -> iteration_statement .)


state 188

    (189) statement -> jump_statement .

    RCPAREN         reduce using rule 189 (statement -> jump_statement .)
    IDENTIFIER      reduce using rule 189 (statement -> jump_statement .)
    CASE            reduce using rule 189 (statement -> jump_statement .)
    DEFAULT         reduce using rule 189 (statement -> jump_statement .)
    SEMICOLON       reduce using rule 189 (statement -> jump_statement .)
    LCPAREN         reduce using rule 189 (statement -> jump_statement .)
    IF              reduce using rule 189 (statement -> jump_statement .)
    SWITCH          reduce using rule 189 (statement -> jump_statement .)
    WHILE           reduce using rule 189 (statement -> jump_statement .)
    DO              reduce using rule 189 (statement -> jump_statement .)
    FOR             reduce using rule 189 (statement -> jump_statement .)
    BREAK           reduce using rule 189 (statement -> jump_statement .)
    CONTINUE        reduce using rule 189 (statement -> jump_statement .)
    RETURN          reduce using rule 189 (statement -> jump_statement .)
    GOTO            reduce using rule 189 (statement -> jump_statement .)
    TRY             reduce using rule 189 (statement -> jump_statement .)
    ASM             reduce using rule 189 (statement -> jump_statement .)
    TEMPLATE        reduce using rule 189 (statement -> jump_statement .)
    DPLUSOP         reduce using rule 189 (statement -> jump_statement .)
    DMINUSOP        reduce using rule 189 (statement -> jump_statement .)
    SIZEOF          reduce using rule 189 (statement -> jump_statement .)
    TYPEDEF         reduce using rule 189 (statement -> jump_statement .)
    LPAREN          reduce using rule 189 (statement -> jump_statement .)
    PLUSOP          reduce using rule 189 (statement -> jump_statement .)
    MINUSOP         reduce using rule 189 (statement -> jump_statement .)
    NOTSYM          reduce using rule 189 (statement -> jump_statement .)
    BNOP            reduce using rule 189 (statement -> jump_statement .)
    MULTOP          reduce using rule 189 (statement -> jump_statement .)
    BANDOP          reduce using rule 189 (statement -> jump_statement .)
    NEW             reduce using rule 189 (statement -> jump_statement .)
    DELETE          reduce using rule 189 (statement -> jump_statement .)
    AUTO            reduce using rule 189 (statement -> jump_statement .)
    STATIC          reduce using rule 189 (statement -> jump_statement .)
    EXTERN          reduce using rule 189 (statement -> jump_statement .)
    VIRTUAL         reduce using rule 189 (statement -> jump_statement .)
    CONST           reduce using rule 189 (statement -> jump_statement .)
    VOLATILE        reduce using rule 189 (statement -> jump_statement .)
    THIS            reduce using rule 189 (statement -> jump_statement .)
    CHAR            reduce using rule 189 (statement -> jump_statement .)
    SHORT           reduce using rule 189 (statement -> jump_statement .)
    INT             reduce using rule 189 (statement -> jump_statement .)
    LONG            reduce using rule 189 (statement -> jump_statement .)
    SIGNED          reduce using rule 189 (statement -> jump_statement .)
    UNSIGNED        reduce using rule 189 (statement -> jump_statement .)
    FLOAT           reduce using rule 189 (statement -> jump_statement .)
    DOUBLE          reduce using rule 189 (statement -> jump_statement .)
    VOID            reduce using rule 189 (statement -> jump_statement .)
    STRING          reduce using rule 189 (statement -> jump_statement .)
    ENUM            reduce using rule 189 (statement -> jump_statement .)
    TYPE            reduce using rule 189 (statement -> jump_statement .)
    OPERATOR        reduce using rule 189 (statement -> jump_statement .)
    NUMBER          reduce using rule 189 (statement -> jump_statement .)
    STRING_L        reduce using rule 189 (statement -> jump_statement .)
    SCHAR           reduce using rule 189 (statement -> jump_statement .)
    CLASS           reduce using rule 189 (statement -> jump_statement .)
    STRUCT          reduce using rule 189 (statement -> jump_statement .)
    UNION           reduce using rule 189 (statement -> jump_statement .)
    ELSE            reduce using rule 189 (statement -> jump_statement .)


state 189

    (190) statement -> declaration_statement .

    RCPAREN         reduce using rule 190 (statement -> declaration_statement .)
    IDENTIFIER      reduce using rule 190 (statement -> declaration_statement .)
    CASE            reduce using rule 190 (statement -> declaration_statement .)
    DEFAULT         reduce using rule 190 (statement -> declaration_statement .)
    SEMICOLON       reduce using rule 190 (statement -> declaration_statement .)
    LCPAREN         reduce using rule 190 (statement -> declaration_statement .)
    IF              reduce using rule 190 (statement -> declaration_statement .)
    SWITCH          reduce using rule 190 (statement -> declaration_statement .)
    WHILE           reduce using rule 190 (statement -> declaration_statement .)
    DO              reduce using rule 190 (statement -> declaration_statement .)
    FOR             reduce using rule 190 (statement -> declaration_statement .)
    BREAK           reduce using rule 190 (statement -> declaration_statement .)
    CONTINUE        reduce using rule 190 (statement -> declaration_statement .)
    RETURN          reduce using rule 190 (statement -> declaration_statement .)
    GOTO            reduce using rule 190 (statement -> declaration_statement .)
    TRY             reduce using rule 190 (statement -> declaration_statement .)
    ASM             reduce using rule 190 (statement -> declaration_statement .)
    TEMPLATE        reduce using rule 190 (statement -> declaration_statement .)
    DPLUSOP         reduce using rule 190 (statement -> declaration_statement .)
    DMINUSOP        reduce using rule 190 (statement -> declaration_statement .)
    SIZEOF          reduce using rule 190 (statement -> declaration_statement .)
    TYPEDEF         reduce using rule 190 (statement -> declaration_statement .)
    LPAREN          reduce using rule 190 (statement -> declaration_statement .)
    PLUSOP          reduce using rule 190 (statement -> declaration_statement .)
    MINUSOP         reduce using rule 190 (statement -> declaration_statement .)
    NOTSYM          reduce using rule 190 (statement -> declaration_statement .)
    BNOP            reduce using rule 190 (statement -> declaration_statement .)
    MULTOP          reduce using rule 190 (statement -> declaration_statement .)
    BANDOP          reduce using rule 190 (statement -> declaration_statement .)
    NEW             reduce using rule 190 (statement -> declaration_statement .)
    DELETE          reduce using rule 190 (statement -> declaration_statement .)
    AUTO            reduce using rule 190 (statement -> declaration_statement .)
    STATIC          reduce using rule 190 (statement -> declaration_statement .)
    EXTERN          reduce using rule 190 (statement -> declaration_statement .)
    VIRTUAL         reduce using rule 190 (statement -> declaration_statement .)
    CONST           reduce using rule 190 (statement -> declaration_statement .)
    VOLATILE        reduce using rule 190 (statement -> declaration_statement .)
    THIS            reduce using rule 190 (statement -> declaration_statement .)
    CHAR            reduce using rule 190 (statement -> declaration_statement .)
    SHORT           reduce using rule 190 (statement -> declaration_statement .)
    INT             reduce using rule 190 (statement -> declaration_statement .)
    LONG            reduce using rule 190 (statement -> declaration_statement .)
    SIGNED          reduce using rule 190 (statement -> declaration_statement .)
    UNSIGNED        reduce using rule 190 (statement -> declaration_statement .)
    FLOAT           reduce using rule 190 (statement -> declaration_statement .)
    DOUBLE          reduce using rule 190 (statement -> declaration_statement .)
    VOID            reduce using rule 190 (statement -> declaration_statement .)
    STRING          reduce using rule 190 (statement -> declaration_statement .)
    ENUM            reduce using rule 190 (statement -> declaration_statement .)
    TYPE            reduce using rule 190 (statement -> declaration_statement .)
    OPERATOR        reduce using rule 190 (statement -> declaration_statement .)
    NUMBER          reduce using rule 190 (statement -> declaration_statement .)
    STRING_L        reduce using rule 190 (statement -> declaration_statement .)
    SCHAR           reduce using rule 190 (statement -> declaration_statement .)
    CLASS           reduce using rule 190 (statement -> declaration_statement .)
    STRUCT          reduce using rule 190 (statement -> declaration_statement .)
    UNION           reduce using rule 190 (statement -> declaration_statement .)
    ELSE            reduce using rule 190 (statement -> declaration_statement .)


state 190

    (191) statement -> try_block .

    RCPAREN         reduce using rule 191 (statement -> try_block .)
    IDENTIFIER      reduce using rule 191 (statement -> try_block .)
    CASE            reduce using rule 191 (statement -> try_block .)
    DEFAULT         reduce using rule 191 (statement -> try_block .)
    SEMICOLON       reduce using rule 191 (statement -> try_block .)
    LCPAREN         reduce using rule 191 (statement -> try_block .)
    IF              reduce using rule 191 (statement -> try_block .)
    SWITCH          reduce using rule 191 (statement -> try_block .)
    WHILE           reduce using rule 191 (statement -> try_block .)
    DO              reduce using rule 191 (statement -> try_block .)
    FOR             reduce using rule 191 (statement -> try_block .)
    BREAK           reduce using rule 191 (statement -> try_block .)
    CONTINUE        reduce using rule 191 (statement -> try_block .)
    RETURN          reduce using rule 191 (statement -> try_block .)
    GOTO            reduce using rule 191 (statement -> try_block .)
    TRY             reduce using rule 191 (statement -> try_block .)
    ASM             reduce using rule 191 (statement -> try_block .)
    TEMPLATE        reduce using rule 191 (statement -> try_block .)
    DPLUSOP         reduce using rule 191 (statement -> try_block .)
    DMINUSOP        reduce using rule 191 (statement -> try_block .)
    SIZEOF          reduce using rule 191 (statement -> try_block .)
    TYPEDEF         reduce using rule 191 (statement -> try_block .)
    LPAREN          reduce using rule 191 (statement -> try_block .)
    PLUSOP          reduce using rule 191 (statement -> try_block .)
    MINUSOP         reduce using rule 191 (statement -> try_block .)
    NOTSYM          reduce using rule 191 (statement -> try_block .)
    BNOP            reduce using rule 191 (statement -> try_block .)
    MULTOP          reduce using rule 191 (statement -> try_block .)
    BANDOP          reduce using rule 191 (statement -> try_block .)
    NEW             reduce using rule 191 (statement -> try_block .)
    DELETE          reduce using rule 191 (statement -> try_block .)
    AUTO            reduce using rule 191 (statement -> try_block .)
    STATIC          reduce using rule 191 (statement -> try_block .)
    EXTERN          reduce using rule 191 (statement -> try_block .)
    VIRTUAL         reduce using rule 191 (statement -> try_block .)
    CONST           reduce using rule 191 (statement -> try_block .)
    VOLATILE        reduce using rule 191 (statement -> try_block .)
    THIS            reduce using rule 191 (statement -> try_block .)
    CHAR            reduce using rule 191 (statement -> try_block .)
    SHORT           reduce using rule 191 (statement -> try_block .)
    INT             reduce using rule 191 (statement -> try_block .)
    LONG            reduce using rule 191 (statement -> try_block .)
    SIGNED          reduce using rule 191 (statement -> try_block .)
    UNSIGNED        reduce using rule 191 (statement -> try_block .)
    FLOAT           reduce using rule 191 (statement -> try_block .)
    DOUBLE          reduce using rule 191 (statement -> try_block .)
    VOID            reduce using rule 191 (statement -> try_block .)
    STRING          reduce using rule 191 (statement -> try_block .)
    ENUM            reduce using rule 191 (statement -> try_block .)
    TYPE            reduce using rule 191 (statement -> try_block .)
    OPERATOR        reduce using rule 191 (statement -> try_block .)
    NUMBER          reduce using rule 191 (statement -> try_block .)
    STRING_L        reduce using rule 191 (statement -> try_block .)
    SCHAR           reduce using rule 191 (statement -> try_block .)
    CLASS           reduce using rule 191 (statement -> try_block .)
    STRUCT          reduce using rule 191 (statement -> try_block .)
    UNION           reduce using rule 191 (statement -> try_block .)
    ELSE            reduce using rule 191 (statement -> try_block .)


state 191

    (207) labeled_statement -> IDENTIFIER . COLON statement
    (259) name -> IDENTIFIER .

    COLON           shift and go to state 320
    LPAREN          reduce using rule 259 (name -> IDENTIFIER .)
    LSPAREN         reduce using rule 259 (name -> IDENTIFIER .)
    EQUAL           reduce using rule 259 (name -> IDENTIFIER .)
    LCPAREN         reduce using rule 259 (name -> IDENTIFIER .)
    SEMICOLON       reduce using rule 259 (name -> IDENTIFIER .)
    COMMA           reduce using rule 259 (name -> IDENTIFIER .)
    DOT             reduce using rule 259 (name -> IDENTIFIER .)
    ARROW           reduce using rule 259 (name -> IDENTIFIER .)
    DPLUSOP         reduce using rule 259 (name -> IDENTIFIER .)
    DMINUSOP        reduce using rule 259 (name -> IDENTIFIER .)
    LTEMPLATE       reduce using rule 259 (name -> IDENTIFIER .)
    MULTEQOP        reduce using rule 259 (name -> IDENTIFIER .)
    DIVEQOP         reduce using rule 259 (name -> IDENTIFIER .)
    MODEQOP         reduce using rule 259 (name -> IDENTIFIER .)
    PLUSEQOP        reduce using rule 259 (name -> IDENTIFIER .)
    MINUSEQOP       reduce using rule 259 (name -> IDENTIFIER .)
    LSHIFTEQOP      reduce using rule 259 (name -> IDENTIFIER .)
    RSHIFTEQOP      reduce using rule 259 (name -> IDENTIFIER .)
    BANDEQOP        reduce using rule 259 (name -> IDENTIFIER .)
    BOREQOP         reduce using rule 259 (name -> IDENTIFIER .)
    DOTSTAR         reduce using rule 259 (name -> IDENTIFIER .)
    ARROWSTAR       reduce using rule 259 (name -> IDENTIFIER .)
    MULTOP          reduce using rule 259 (name -> IDENTIFIER .)
    DIVOP           reduce using rule 259 (name -> IDENTIFIER .)
    MODOP           reduce using rule 259 (name -> IDENTIFIER .)
    PLUSOP          reduce using rule 259 (name -> IDENTIFIER .)
    MINUSOP         reduce using rule 259 (name -> IDENTIFIER .)
    LSHIFT          reduce using rule 259 (name -> IDENTIFIER .)
    RSHIFT          reduce using rule 259 (name -> IDENTIFIER .)
    LTCOMP          reduce using rule 259 (name -> IDENTIFIER .)
    GTCOMP          reduce using rule 259 (name -> IDENTIFIER .)
    LTECOMP         reduce using rule 259 (name -> IDENTIFIER .)
    GTECOMP         reduce using rule 259 (name -> IDENTIFIER .)
    EQCOMP          reduce using rule 259 (name -> IDENTIFIER .)
    NEQCOMP         reduce using rule 259 (name -> IDENTIFIER .)
    BANDOP          reduce using rule 259 (name -> IDENTIFIER .)
    XOROP           reduce using rule 259 (name -> IDENTIFIER .)
    OROP            reduce using rule 259 (name -> IDENTIFIER .)
    ANDOP           reduce using rule 259 (name -> IDENTIFIER .)
    QUESMARK        reduce using rule 259 (name -> IDENTIFIER .)


state 192

    (208) labeled_statement -> CASE . constant_expression COLON statement
    (25) constant_expression -> . conditional_expression
    (26) conditional_expression -> . logical_OR_expression
    (27) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (28) logical_OR_expression -> . logical_AND_expression
    (29) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (30) logical_AND_expression -> . inclusive_OR_expression
    (31) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (32) inclusive_OR_expression -> . exclusive_OR_expression
    (33) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (264) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 176
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    constant_expression            shift and go to state 321
    conditional_expression         shift and go to state 174
    logical_OR_expression          shift and go to state 138
    logical_AND_expression         shift and go to state 148
    inclusive_OR_expression        shift and go to state 158
    exclusive_OR_expression        shift and go to state 161
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171
    cast_expression                shift and go to state 143
    unary_expression               shift and go to state 175
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    name                           shift and go to state 151
    literal                        shift and go to state 159
    operator_function_name         shift and go to state 32

state 193

    (209) labeled_statement -> DEFAULT . COLON statement

    COLON           shift and go to state 322


state 194

    (218) expression_statement -> expression . SEMICOLON
    (60) expression -> expression . COMMA assignment_expression

    SEMICOLON       shift and go to state 323
    COMMA           shift and go to state 324


state 195

    (219) expression_statement -> SEMICOLON .

    RCPAREN         reduce using rule 219 (expression_statement -> SEMICOLON .)
    IDENTIFIER      reduce using rule 219 (expression_statement -> SEMICOLON .)
    CASE            reduce using rule 219 (expression_statement -> SEMICOLON .)
    DEFAULT         reduce using rule 219 (expression_statement -> SEMICOLON .)
    SEMICOLON       reduce using rule 219 (expression_statement -> SEMICOLON .)
    LCPAREN         reduce using rule 219 (expression_statement -> SEMICOLON .)
    IF              reduce using rule 219 (expression_statement -> SEMICOLON .)
    SWITCH          reduce using rule 219 (expression_statement -> SEMICOLON .)
    WHILE           reduce using rule 219 (expression_statement -> SEMICOLON .)
    DO              reduce using rule 219 (expression_statement -> SEMICOLON .)
    FOR             reduce using rule 219 (expression_statement -> SEMICOLON .)
    BREAK           reduce using rule 219 (expression_statement -> SEMICOLON .)
    CONTINUE        reduce using rule 219 (expression_statement -> SEMICOLON .)
    RETURN          reduce using rule 219 (expression_statement -> SEMICOLON .)
    GOTO            reduce using rule 219 (expression_statement -> SEMICOLON .)
    TRY             reduce using rule 219 (expression_statement -> SEMICOLON .)
    ASM             reduce using rule 219 (expression_statement -> SEMICOLON .)
    TEMPLATE        reduce using rule 219 (expression_statement -> SEMICOLON .)
    DPLUSOP         reduce using rule 219 (expression_statement -> SEMICOLON .)
    DMINUSOP        reduce using rule 219 (expression_statement -> SEMICOLON .)
    SIZEOF          reduce using rule 219 (expression_statement -> SEMICOLON .)
    TYPEDEF         reduce using rule 219 (expression_statement -> SEMICOLON .)
    LPAREN          reduce using rule 219 (expression_statement -> SEMICOLON .)
    PLUSOP          reduce using rule 219 (expression_statement -> SEMICOLON .)
    MINUSOP         reduce using rule 219 (expression_statement -> SEMICOLON .)
    NOTSYM          reduce using rule 219 (expression_statement -> SEMICOLON .)
    BNOP            reduce using rule 219 (expression_statement -> SEMICOLON .)
    MULTOP          reduce using rule 219 (expression_statement -> SEMICOLON .)
    BANDOP          reduce using rule 219 (expression_statement -> SEMICOLON .)
    NEW             reduce using rule 219 (expression_statement -> SEMICOLON .)
    DELETE          reduce using rule 219 (expression_statement -> SEMICOLON .)
    AUTO            reduce using rule 219 (expression_statement -> SEMICOLON .)
    STATIC          reduce using rule 219 (expression_statement -> SEMICOLON .)
    EXTERN          reduce using rule 219 (expression_statement -> SEMICOLON .)
    VIRTUAL         reduce using rule 219 (expression_statement -> SEMICOLON .)
    CONST           reduce using rule 219 (expression_statement -> SEMICOLON .)
    VOLATILE        reduce using rule 219 (expression_statement -> SEMICOLON .)
    THIS            reduce using rule 219 (expression_statement -> SEMICOLON .)
    CHAR            reduce using rule 219 (expression_statement -> SEMICOLON .)
    SHORT           reduce using rule 219 (expression_statement -> SEMICOLON .)
    INT             reduce using rule 219 (expression_statement -> SEMICOLON .)
    LONG            reduce using rule 219 (expression_statement -> SEMICOLON .)
    SIGNED          reduce using rule 219 (expression_statement -> SEMICOLON .)
    UNSIGNED        reduce using rule 219 (expression_statement -> SEMICOLON .)
    FLOAT           reduce using rule 219 (expression_statement -> SEMICOLON .)
    DOUBLE          reduce using rule 219 (expression_statement -> SEMICOLON .)
    VOID            reduce using rule 219 (expression_statement -> SEMICOLON .)
    STRING          reduce using rule 219 (expression_statement -> SEMICOLON .)
    ENUM            reduce using rule 219 (expression_statement -> SEMICOLON .)
    TYPE            reduce using rule 219 (expression_statement -> SEMICOLON .)
    OPERATOR        reduce using rule 219 (expression_statement -> SEMICOLON .)
    NUMBER          reduce using rule 219 (expression_statement -> SEMICOLON .)
    STRING_L        reduce using rule 219 (expression_statement -> SEMICOLON .)
    SCHAR           reduce using rule 219 (expression_statement -> SEMICOLON .)
    CLASS           reduce using rule 219 (expression_statement -> SEMICOLON .)
    STRUCT          reduce using rule 219 (expression_statement -> SEMICOLON .)
    UNION           reduce using rule 219 (expression_statement -> SEMICOLON .)
    ELSE            reduce using rule 219 (expression_statement -> SEMICOLON .)


state 196

    (197) selection_statement -> IF . LPAREN expression RPAREN statement
    (198) selection_statement -> IF . LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 325


state 197

    (258) declarator -> LPAREN . declarator RPAREN
    (119) primary_expression -> LPAREN . expression RPAREN
    (125) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (253) declarator -> . name
    (254) declarator -> . unary2_operator declarator
    (255) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (256) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (257) declarator -> . declarator LSPAREN RSPAREN
    (258) declarator -> . LPAREN declarator RPAREN
    (59) expression -> . assignment_expression
    (60) expression -> . expression COMMA assignment_expression
    (126) type_name -> . type_specifier_list abstract_declarator
    (127) type_name -> . type_specifier_list
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (262) type_specifier_list -> . type_specifier type_specifier_list
    (263) type_specifier_list -> . type_specifier
    (264) operator_function_name -> . OPERATOR operator_name
    (26) conditional_expression -> . logical_OR_expression
    (27) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (156) type_specifier -> . simple_type_name
    (157) type_specifier -> . class_specifier
    (158) type_specifier -> . enum_specifier
    (159) type_specifier -> . elaborated_type_specifier
    (160) type_specifier -> . CONST
    (161) type_specifier -> . VOLATILE
    (28) logical_OR_expression -> . logical_AND_expression
    (29) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (162) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (163) class_specifier -> . class_head LCPAREN RCPAREN
    (17) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (18) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (20) enum_specifier -> . ENUM LCPAREN RCPAREN
    (322) elaborated_type_specifier -> . class_key IDENTIFIER
    (323) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (324) elaborated_type_specifier -> . ENUM enum_name
    (325) elaborated_type_specifier -> . TYPE IDENTIFIER
    (326) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (30) logical_AND_expression -> . inclusive_OR_expression
    (31) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (304) class_head -> . class_key base_spec
    (305) class_head -> . class_key
    (306) class_head -> . class_key IDENTIFIER base_spec
    (307) class_head -> . class_key IDENTIFIER
    (328) class_key -> . CLASS
    (329) class_key -> . STRUCT
    (330) class_key -> . UNION
    (331) class_key -> . TEMPLATE
    (32) inclusive_OR_expression -> . exclusive_OR_expression
    (33) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LPAREN          shift and go to state 197
    IDENTIFIER      shift and go to state 31
    BNOP            shift and go to state 327
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    OPERATOR        shift and go to state 50
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    ENUM            shift and go to state 47
    TYPE            shift and go to state 49
    THIS            shift and go to state 160
    CLASS           shift and go to state 51
    STRUCT          shift and go to state 52
    UNION           shift and go to state 53
    TEMPLATE        shift and go to state 59
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164

    declarator                     shift and go to state 63
    expression                     shift and go to state 247
    type_name                      shift and go to state 248
    cast_expression                shift and go to state 143
    name                           shift and go to state 210
    unary2_operator                shift and go to state 326
    assignment_expression          shift and go to state 208
    type_specifier_list            shift and go to state 249
    operator_function_name         shift and go to state 32
    conditional_expression         shift and go to state 135
    unary_expression               shift and go to state 136
    type_specifier                 shift and go to state 250
    logical_OR_expression          shift and go to state 138
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    simple_type_name               shift and go to state 251
    class_specifier                shift and go to state 26
    enum_specifier                 shift and go to state 27
    elaborated_type_specifier      shift and go to state 28
    logical_AND_expression         shift and go to state 148
    primary_expression             shift and go to state 149
    class_head                     shift and go to state 46
    class_key                      shift and go to state 48
    inclusive_OR_expression        shift and go to state 158
    literal                        shift and go to state 159
    exclusive_OR_expression        shift and go to state 161
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171

state 198

    (199) selection_statement -> SWITCH . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 328


state 199

    (210) iteration_statement -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 329


state 200

    (211) iteration_statement -> DO . statement WHILE LPAREN expression RPAREN SEMICOLON
    (184) statement -> . labeled_statement
    (185) statement -> . expression_statement
    (186) statement -> . compound_statement
    (187) statement -> . selection_statement
    (188) statement -> . iteration_statement
    (189) statement -> . jump_statement
    (190) statement -> . declaration_statement
    (191) statement -> . try_block
    (207) labeled_statement -> . IDENTIFIER COLON statement
    (208) labeled_statement -> . CASE constant_expression COLON statement
    (209) labeled_statement -> . DEFAULT COLON statement
    (218) expression_statement -> . expression SEMICOLON
    (219) expression_statement -> . SEMICOLON
    (180) compound_statement -> . LCPAREN statement_list RCPAREN
    (181) compound_statement -> . LCPAREN RCPAREN
    (197) selection_statement -> . IF LPAREN expression RPAREN statement
    (198) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (199) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (210) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (211) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (212) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (213) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (214) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (215) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (192) jump_statement -> . BREAK SEMICOLON
    (193) jump_statement -> . CONTINUE SEMICOLON
    (194) jump_statement -> . RETURN expression SEMICOLON
    (195) jump_statement -> . RETURN SEMICOLON
    (196) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (220) declaration_statement -> . declaration
    (200) try_block -> . TRY compound_statement handler_list
    (59) expression -> . assignment_expression
    (60) expression -> . expression COMMA assignment_expression
    (221) declaration -> . decl_specifiers declarator_list SEMICOLON
    (222) declaration -> . decl_specifiers SEMICOLON
    (223) declaration -> . declarator_list SEMICOLON
    (224) declaration -> . asm_declaration
    (225) declaration -> . function_definition
    (226) declaration -> . template_declaration
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (147) decl_specifiers -> . decl_specifiers decl_specifier
    (148) decl_specifiers -> . decl_specifier
    (230) declarator_list -> . init_declarator
    (231) declarator_list -> . declarator_list COMMA init_declarator
    (242) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (177) function_definition -> . decl_specifiers declarator fct_body
    (178) function_definition -> . declarator fct_body
    (227) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (26) conditional_expression -> . logical_OR_expression
    (27) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (149) decl_specifier -> . storage_class_specifier
    (150) decl_specifier -> . type_specifier
    (151) decl_specifier -> . TYPEDEF
    (232) init_declarator -> . declarator initializer
    (233) init_declarator -> . declarator
    (253) declarator -> . name
    (254) declarator -> . unary2_operator declarator
    (255) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (256) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (257) declarator -> . declarator LSPAREN RSPAREN
    (258) declarator -> . LPAREN declarator RPAREN
    (28) logical_OR_expression -> . logical_AND_expression
    (29) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (152) storage_class_specifier -> . AUTO
    (153) storage_class_specifier -> . STATIC
    (154) storage_class_specifier -> . EXTERN
    (155) storage_class_specifier -> . VIRTUAL
    (156) type_specifier -> . simple_type_name
    (157) type_specifier -> . class_specifier
    (158) type_specifier -> . enum_specifier
    (159) type_specifier -> . elaborated_type_specifier
    (160) type_specifier -> . CONST
    (161) type_specifier -> . VOLATILE
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (30) logical_AND_expression -> . inclusive_OR_expression
    (31) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (162) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (163) class_specifier -> . class_head LCPAREN RCPAREN
    (17) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (18) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (20) enum_specifier -> . ENUM LCPAREN RCPAREN
    (322) elaborated_type_specifier -> . class_key IDENTIFIER
    (323) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (324) elaborated_type_specifier -> . ENUM enum_name
    (325) elaborated_type_specifier -> . TYPE IDENTIFIER
    (326) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (264) operator_function_name -> . OPERATOR operator_name
    (32) inclusive_OR_expression -> . exclusive_OR_expression
    (33) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (304) class_head -> . class_key base_spec
    (305) class_head -> . class_key
    (306) class_head -> . class_key IDENTIFIER base_spec
    (307) class_head -> . class_key IDENTIFIER
    (328) class_key -> . CLASS
    (329) class_key -> . STRUCT
    (330) class_key -> . UNION
    (331) class_key -> . TEMPLATE
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 191
    CASE            shift and go to state 192
    DEFAULT         shift and go to state 193
    SEMICOLON       shift and go to state 195
    LCPAREN         shift and go to state 70
    IF              shift and go to state 196
    SWITCH          shift and go to state 198
    WHILE           shift and go to state 199
    DO              shift and go to state 200
    FOR             shift and go to state 201
    BREAK           shift and go to state 202
    CONTINUE        shift and go to state 203
    RETURN          shift and go to state 204
    GOTO            shift and go to state 205
    TRY             shift and go to state 207
    ASM             shift and go to state 12
    TEMPLATE        shift and go to state 15
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    TYPEDEF         shift and go to state 18
    LPAREN          shift and go to state 197
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    AUTO            shift and go to state 21
    STATIC          shift and go to state 22
    EXTERN          shift and go to state 23
    VIRTUAL         shift and go to state 24
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    THIS            shift and go to state 160
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    ENUM            shift and go to state 47
    TYPE            shift and go to state 49
    OPERATOR        shift and go to state 50
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    CLASS           shift and go to state 51
    STRUCT          shift and go to state 52
    UNION           shift and go to state 53

    statement                      shift and go to state 330
    expression                     shift and go to state 194
    labeled_statement              shift and go to state 183
    expression_statement           shift and go to state 184
    compound_statement             shift and go to state 185
    selection_statement            shift and go to state 186
    iteration_statement            shift and go to state 187
    jump_statement                 shift and go to state 188
    declaration_statement          shift and go to state 189
    try_block                      shift and go to state 190
    declaration                    shift and go to state 206
    assignment_expression          shift and go to state 208
    decl_specifiers                shift and go to state 5
    declarator_list                shift and go to state 6
    asm_declaration                shift and go to state 7
    function_definition            shift and go to state 8
    template_declaration           shift and go to state 9
    conditional_expression         shift and go to state 135
    unary_expression               shift and go to state 136
    decl_specifier                 shift and go to state 10
    init_declarator                shift and go to state 11
    declarator                     shift and go to state 14
    logical_OR_expression          shift and go to state 138
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    cast_expression                shift and go to state 143
    unary2_operator                shift and go to state 209
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    storage_class_specifier        shift and go to state 16
    type_specifier                 shift and go to state 17
    name                           shift and go to state 210
    logical_AND_expression         shift and go to state 148
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 150
    class_specifier                shift and go to state 26
    enum_specifier                 shift and go to state 27
    elaborated_type_specifier      shift and go to state 28
    operator_function_name         shift and go to state 32
    inclusive_OR_expression        shift and go to state 158
    literal                        shift and go to state 159
    class_head                     shift and go to state 46
    class_key                      shift and go to state 48
    exclusive_OR_expression        shift and go to state 161
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171

state 201

    (212) iteration_statement -> FOR . LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (213) iteration_statement -> FOR . LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (214) iteration_statement -> FOR . LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (215) iteration_statement -> FOR . LPAREN for_init_statement SEMICOLON RPAREN statement

    LPAREN          shift and go to state 331


state 202

    (192) jump_statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 332


state 203

    (193) jump_statement -> CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 333


state 204

    (194) jump_statement -> RETURN . expression SEMICOLON
    (195) jump_statement -> RETURN . SEMICOLON
    (59) expression -> . assignment_expression
    (60) expression -> . expression COMMA assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (26) conditional_expression -> . logical_OR_expression
    (27) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (28) logical_OR_expression -> . logical_AND_expression
    (29) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (30) logical_AND_expression -> . inclusive_OR_expression
    (31) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (32) inclusive_OR_expression -> . exclusive_OR_expression
    (33) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (264) operator_function_name -> . OPERATOR operator_name
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMICOLON       shift and go to state 335
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    LPAREN          shift and go to state 128
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    expression                     shift and go to state 334
    assignment_expression          shift and go to state 208
    conditional_expression         shift and go to state 135
    unary_expression               shift and go to state 136
    logical_OR_expression          shift and go to state 138
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    cast_expression                shift and go to state 143
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    logical_AND_expression         shift and go to state 148
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    name                           shift and go to state 151
    inclusive_OR_expression        shift and go to state 158
    literal                        shift and go to state 159
    exclusive_OR_expression        shift and go to state 161
    operator_function_name         shift and go to state 32
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171

state 205

    (196) jump_statement -> GOTO . IDENTIFIER SEMICOLON

    IDENTIFIER      shift and go to state 336


state 206

    (220) declaration_statement -> declaration .

    RCPAREN         reduce using rule 220 (declaration_statement -> declaration .)
    IDENTIFIER      reduce using rule 220 (declaration_statement -> declaration .)
    CASE            reduce using rule 220 (declaration_statement -> declaration .)
    DEFAULT         reduce using rule 220 (declaration_statement -> declaration .)
    SEMICOLON       reduce using rule 220 (declaration_statement -> declaration .)
    LCPAREN         reduce using rule 220 (declaration_statement -> declaration .)
    IF              reduce using rule 220 (declaration_statement -> declaration .)
    SWITCH          reduce using rule 220 (declaration_statement -> declaration .)
    WHILE           reduce using rule 220 (declaration_statement -> declaration .)
    DO              reduce using rule 220 (declaration_statement -> declaration .)
    FOR             reduce using rule 220 (declaration_statement -> declaration .)
    BREAK           reduce using rule 220 (declaration_statement -> declaration .)
    CONTINUE        reduce using rule 220 (declaration_statement -> declaration .)
    RETURN          reduce using rule 220 (declaration_statement -> declaration .)
    GOTO            reduce using rule 220 (declaration_statement -> declaration .)
    TRY             reduce using rule 220 (declaration_statement -> declaration .)
    ASM             reduce using rule 220 (declaration_statement -> declaration .)
    TEMPLATE        reduce using rule 220 (declaration_statement -> declaration .)
    DPLUSOP         reduce using rule 220 (declaration_statement -> declaration .)
    DMINUSOP        reduce using rule 220 (declaration_statement -> declaration .)
    SIZEOF          reduce using rule 220 (declaration_statement -> declaration .)
    TYPEDEF         reduce using rule 220 (declaration_statement -> declaration .)
    LPAREN          reduce using rule 220 (declaration_statement -> declaration .)
    PLUSOP          reduce using rule 220 (declaration_statement -> declaration .)
    MINUSOP         reduce using rule 220 (declaration_statement -> declaration .)
    NOTSYM          reduce using rule 220 (declaration_statement -> declaration .)
    BNOP            reduce using rule 220 (declaration_statement -> declaration .)
    MULTOP          reduce using rule 220 (declaration_statement -> declaration .)
    BANDOP          reduce using rule 220 (declaration_statement -> declaration .)
    NEW             reduce using rule 220 (declaration_statement -> declaration .)
    DELETE          reduce using rule 220 (declaration_statement -> declaration .)
    AUTO            reduce using rule 220 (declaration_statement -> declaration .)
    STATIC          reduce using rule 220 (declaration_statement -> declaration .)
    EXTERN          reduce using rule 220 (declaration_statement -> declaration .)
    VIRTUAL         reduce using rule 220 (declaration_statement -> declaration .)
    CONST           reduce using rule 220 (declaration_statement -> declaration .)
    VOLATILE        reduce using rule 220 (declaration_statement -> declaration .)
    THIS            reduce using rule 220 (declaration_statement -> declaration .)
    CHAR            reduce using rule 220 (declaration_statement -> declaration .)
    SHORT           reduce using rule 220 (declaration_statement -> declaration .)
    INT             reduce using rule 220 (declaration_statement -> declaration .)
    LONG            reduce using rule 220 (declaration_statement -> declaration .)
    SIGNED          reduce using rule 220 (declaration_statement -> declaration .)
    UNSIGNED        reduce using rule 220 (declaration_statement -> declaration .)
    FLOAT           reduce using rule 220 (declaration_statement -> declaration .)
    DOUBLE          reduce using rule 220 (declaration_statement -> declaration .)
    VOID            reduce using rule 220 (declaration_statement -> declaration .)
    STRING          reduce using rule 220 (declaration_statement -> declaration .)
    ENUM            reduce using rule 220 (declaration_statement -> declaration .)
    TYPE            reduce using rule 220 (declaration_statement -> declaration .)
    OPERATOR        reduce using rule 220 (declaration_statement -> declaration .)
    NUMBER          reduce using rule 220 (declaration_statement -> declaration .)
    STRING_L        reduce using rule 220 (declaration_statement -> declaration .)
    SCHAR           reduce using rule 220 (declaration_statement -> declaration .)
    CLASS           reduce using rule 220 (declaration_statement -> declaration .)
    STRUCT          reduce using rule 220 (declaration_statement -> declaration .)
    UNION           reduce using rule 220 (declaration_statement -> declaration .)
    ELSE            reduce using rule 220 (declaration_statement -> declaration .)


state 207

    (200) try_block -> TRY . compound_statement handler_list
    (180) compound_statement -> . LCPAREN statement_list RCPAREN
    (181) compound_statement -> . LCPAREN RCPAREN

    LCPAREN         shift and go to state 70

    compound_statement             shift and go to state 337

state 208

    (59) expression -> assignment_expression .

    SEMICOLON       reduce using rule 59 (expression -> assignment_expression .)
    COMMA           reduce using rule 59 (expression -> assignment_expression .)
    RPAREN          reduce using rule 59 (expression -> assignment_expression .)
    RTEMPLATE       reduce using rule 59 (expression -> assignment_expression .)
    COLON           reduce using rule 59 (expression -> assignment_expression .)
    RSPAREN         reduce using rule 59 (expression -> assignment_expression .)


state 209

    (77) unary_expression -> unary2_operator . cast_expression
    (254) declarator -> unary2_operator . declarator
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (253) declarator -> . name
    (254) declarator -> . unary2_operator declarator
    (255) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (256) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (257) declarator -> . declarator LSPAREN RSPAREN
    (258) declarator -> . LPAREN declarator RPAREN
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (264) operator_function_name -> . OPERATOR operator_name
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR

    LPAREN          shift and go to state 338
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    IDENTIFIER      shift and go to state 31
    BNOP            shift and go to state 327
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    OPERATOR        shift and go to state 50
    THIS            shift and go to state 160
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164

    unary2_operator                shift and go to state 326
    cast_expression                shift and go to state 286
    declarator                     shift and go to state 72
    unary_expression               shift and go to state 175
    name                           shift and go to state 210
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    operator_function_name         shift and go to state 32
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    literal                        shift and go to state 159

state 210

    (253) declarator -> name .
    (120) primary_expression -> name .

  ! reduce/reduce conflict for LSPAREN resolved using rule 120 (primary_expression -> name .)
  ! reduce/reduce conflict for LPAREN resolved using rule 120 (primary_expression -> name .)
  ! reduce/reduce conflict for EQUAL resolved using rule 120 (primary_expression -> name .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 120 (primary_expression -> name .)
  ! reduce/reduce conflict for COMMA resolved using rule 120 (primary_expression -> name .)
  ! reduce/reduce conflict for RPAREN resolved using rule 120 (primary_expression -> name .)
    LCPAREN         reduce using rule 253 (declarator -> name .)
    LSPAREN         reduce using rule 120 (primary_expression -> name .)
    LPAREN          reduce using rule 120 (primary_expression -> name .)
    DOT             reduce using rule 120 (primary_expression -> name .)
    ARROW           reduce using rule 120 (primary_expression -> name .)
    DPLUSOP         reduce using rule 120 (primary_expression -> name .)
    DMINUSOP        reduce using rule 120 (primary_expression -> name .)
    LTEMPLATE       reduce using rule 120 (primary_expression -> name .)
    EQUAL           reduce using rule 120 (primary_expression -> name .)
    MULTEQOP        reduce using rule 120 (primary_expression -> name .)
    DIVEQOP         reduce using rule 120 (primary_expression -> name .)
    MODEQOP         reduce using rule 120 (primary_expression -> name .)
    PLUSEQOP        reduce using rule 120 (primary_expression -> name .)
    MINUSEQOP       reduce using rule 120 (primary_expression -> name .)
    LSHIFTEQOP      reduce using rule 120 (primary_expression -> name .)
    RSHIFTEQOP      reduce using rule 120 (primary_expression -> name .)
    BANDEQOP        reduce using rule 120 (primary_expression -> name .)
    BOREQOP         reduce using rule 120 (primary_expression -> name .)
    DOTSTAR         reduce using rule 120 (primary_expression -> name .)
    ARROWSTAR       reduce using rule 120 (primary_expression -> name .)
    MULTOP          reduce using rule 120 (primary_expression -> name .)
    DIVOP           reduce using rule 120 (primary_expression -> name .)
    MODOP           reduce using rule 120 (primary_expression -> name .)
    PLUSOP          reduce using rule 120 (primary_expression -> name .)
    MINUSOP         reduce using rule 120 (primary_expression -> name .)
    LSHIFT          reduce using rule 120 (primary_expression -> name .)
    RSHIFT          reduce using rule 120 (primary_expression -> name .)
    LTCOMP          reduce using rule 120 (primary_expression -> name .)
    GTCOMP          reduce using rule 120 (primary_expression -> name .)
    LTECOMP         reduce using rule 120 (primary_expression -> name .)
    GTECOMP         reduce using rule 120 (primary_expression -> name .)
    EQCOMP          reduce using rule 120 (primary_expression -> name .)
    NEQCOMP         reduce using rule 120 (primary_expression -> name .)
    BANDOP          reduce using rule 120 (primary_expression -> name .)
    XOROP           reduce using rule 120 (primary_expression -> name .)
    OROP            reduce using rule 120 (primary_expression -> name .)
    ANDOP           reduce using rule 120 (primary_expression -> name .)
    QUESMARK        reduce using rule 120 (primary_expression -> name .)
    SEMICOLON       reduce using rule 120 (primary_expression -> name .)
    COMMA           reduce using rule 120 (primary_expression -> name .)
    RPAREN          reduce using rule 120 (primary_expression -> name .)

  ! LPAREN          [ reduce using rule 253 (declarator -> name .) ]
  ! LSPAREN         [ reduce using rule 253 (declarator -> name .) ]
  ! EQUAL           [ reduce using rule 253 (declarator -> name .) ]
  ! SEMICOLON       [ reduce using rule 253 (declarator -> name .) ]
  ! COMMA           [ reduce using rule 253 (declarator -> name .) ]
  ! RPAREN          [ reduce using rule 253 (declarator -> name .) ]


state 211

    (227) template_declaration -> TEMPLATE LTEMPLATE template_argument_list . RTEMPLATE declaration
    (229) template_argument_list -> template_argument_list . COMMA argument_declaration

    RTEMPLATE       shift and go to state 339
    COMMA           shift and go to state 340


state 212

    (228) template_argument_list -> argument_declaration .

    RTEMPLATE       reduce using rule 228 (template_argument_list -> argument_declaration .)
    COMMA           reduce using rule 228 (template_argument_list -> argument_declaration .)


state 213

    (162) class_specifier -> class_head LCPAREN member_list . RCPAREN
    (166) member_list -> member_list . access_list
    (167) access_list -> . access_specifier COLON member_access_list
    (168) access_list -> . access_specifier COLON
    (319) access_specifier -> . PRIVATE
    (320) access_specifier -> . PROTECTED
    (321) access_specifier -> . PUBLIC

    RCPAREN         shift and go to state 341
    PRIVATE         shift and go to state 224
    PROTECTED       shift and go to state 225
    PUBLIC          shift and go to state 226

    access_list                    shift and go to state 342
    access_specifier               shift and go to state 218

state 214

    (163) class_specifier -> class_head LCPAREN RCPAREN .

    SEMICOLON       reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)
    TYPEDEF         reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)
    LPAREN          reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)
    AUTO            reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)
    STATIC          reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)
    EXTERN          reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)
    VIRTUAL         reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)
    CONST           reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)
    VOLATILE        reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)
    IDENTIFIER      reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)
    BNOP            reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)
    MULTOP          reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)
    BANDOP          reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)
    CHAR            reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)
    SHORT           reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)
    INT             reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)
    LONG            reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)
    SIGNED          reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)
    UNSIGNED        reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)
    FLOAT           reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)
    DOUBLE          reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)
    VOID            reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)
    STRING          reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)
    ENUM            reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)
    TYPE            reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)
    OPERATOR        reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)
    CLASS           reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)
    STRUCT          reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)
    UNION           reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)
    TEMPLATE        reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)
    EQUAL           reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)
    LSPAREN         reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)
    COMMA           reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)
    RPAREN          reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)
    RTEMPLATE       reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)
    COLON           reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)
    MULTEQOP        reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)
    DIVEQOP         reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)
    MODEQOP         reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)
    PLUSEQOP        reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)
    MINUSEQOP       reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)
    LSHIFTEQOP      reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)
    RSHIFTEQOP      reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)
    BANDEQOP        reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)
    BOREQOP         reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)
    DOTSTAR         reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)
    ARROWSTAR       reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)
    DIVOP           reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)
    MODOP           reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)
    PLUSOP          reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)
    MINUSOP         reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)
    LSHIFT          reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)
    RSHIFT          reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)
    LTCOMP          reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)
    GTCOMP          reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)
    LTECOMP         reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)
    GTECOMP         reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)
    EQCOMP          reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)
    NEQCOMP         reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)
    XOROP           reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)
    OROP            reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)
    ANDOP           reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)
    QUESMARK        reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)
    RSPAREN         reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)
    RCPAREN         reduce using rule 163 (class_specifier -> class_head LCPAREN RCPAREN .)


state 215

    (164) member_list -> member_access_list .

    RCPAREN         reduce using rule 164 (member_list -> member_access_list .)
    PRIVATE         reduce using rule 164 (member_list -> member_access_list .)
    PROTECTED       reduce using rule 164 (member_list -> member_access_list .)
    PUBLIC          reduce using rule 164 (member_list -> member_access_list .)


state 216

    (165) member_list -> access_list .

    RCPAREN         reduce using rule 165 (member_list -> access_list .)
    PRIVATE         reduce using rule 165 (member_list -> access_list .)
    PROTECTED       reduce using rule 165 (member_list -> access_list .)
    PUBLIC          reduce using rule 165 (member_list -> access_list .)


state 217

    (169) member_access_list -> member_declaration . member_access_list
    (170) member_access_list -> member_declaration .
    (169) member_access_list -> . member_declaration member_access_list
    (170) member_access_list -> . member_declaration
    (171) member_declaration -> . decl_specifiers member_declarator_list SEMICOLON
    (172) member_declaration -> . member_declarator_list SEMICOLON
    (173) member_declaration -> . decl_specifiers SEMICOLON
    (174) member_declaration -> . SEMICOLON
    (175) member_declaration -> . function_definition SEMICOLON
    (176) member_declaration -> . function_definition
    (147) decl_specifiers -> . decl_specifiers decl_specifier
    (148) decl_specifiers -> . decl_specifier
    (247) member_declarator_list -> . member_declarator
    (248) member_declarator_list -> . member_declarator_list COMMA member_declarator
    (177) function_definition -> . decl_specifiers declarator fct_body
    (178) function_definition -> . declarator fct_body
    (149) decl_specifier -> . storage_class_specifier
    (150) decl_specifier -> . type_specifier
    (151) decl_specifier -> . TYPEDEF
    (249) member_declarator -> . declarator pure_specifier
    (250) member_declarator -> . declarator
    (251) member_declarator -> . IDENTIFIER COLON constant_expression
    (252) member_declarator -> . COLON constant_expression
    (253) declarator -> . name
    (254) declarator -> . unary2_operator declarator
    (255) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (256) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (257) declarator -> . declarator LSPAREN RSPAREN
    (258) declarator -> . LPAREN declarator RPAREN
    (152) storage_class_specifier -> . AUTO
    (153) storage_class_specifier -> . STATIC
    (154) storage_class_specifier -> . EXTERN
    (155) storage_class_specifier -> . VIRTUAL
    (156) type_specifier -> . simple_type_name
    (157) type_specifier -> . class_specifier
    (158) type_specifier -> . enum_specifier
    (159) type_specifier -> . elaborated_type_specifier
    (160) type_specifier -> . CONST
    (161) type_specifier -> . VOLATILE
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (162) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (163) class_specifier -> . class_head LCPAREN RCPAREN
    (17) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (18) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (20) enum_specifier -> . ENUM LCPAREN RCPAREN
    (322) elaborated_type_specifier -> . class_key IDENTIFIER
    (323) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (324) elaborated_type_specifier -> . ENUM enum_name
    (325) elaborated_type_specifier -> . TYPE IDENTIFIER
    (326) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (264) operator_function_name -> . OPERATOR operator_name
    (304) class_head -> . class_key base_spec
    (305) class_head -> . class_key
    (306) class_head -> . class_key IDENTIFIER base_spec
    (307) class_head -> . class_key IDENTIFIER
    (328) class_key -> . CLASS
    (329) class_key -> . STRUCT
    (330) class_key -> . UNION
    (331) class_key -> . TEMPLATE

    RCPAREN         reduce using rule 170 (member_access_list -> member_declaration .)
    PRIVATE         reduce using rule 170 (member_access_list -> member_declaration .)
    PROTECTED       reduce using rule 170 (member_access_list -> member_declaration .)
    PUBLIC          reduce using rule 170 (member_access_list -> member_declaration .)
    SEMICOLON       shift and go to state 222
    TYPEDEF         shift and go to state 18
    IDENTIFIER      shift and go to state 229
    COLON           shift and go to state 219
    LPAREN          shift and go to state 13
    AUTO            shift and go to state 21
    STATIC          shift and go to state 22
    EXTERN          shift and go to state 23
    VIRTUAL         shift and go to state 24
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    BNOP            shift and go to state 33
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    ENUM            shift and go to state 47
    TYPE            shift and go to state 49
    OPERATOR        shift and go to state 50
    CLASS           shift and go to state 51
    STRUCT          shift and go to state 52
    UNION           shift and go to state 53
    TEMPLATE        shift and go to state 59

    member_declaration             shift and go to state 217
    member_access_list             shift and go to state 343
    decl_specifiers                shift and go to state 220
    member_declarator_list         shift and go to state 221
    function_definition            shift and go to state 223
    decl_specifier                 shift and go to state 10
    member_declarator              shift and go to state 227
    declarator                     shift and go to state 228
    storage_class_specifier        shift and go to state 16
    type_specifier                 shift and go to state 17
    name                           shift and go to state 19
    unary2_operator                shift and go to state 20
    simple_type_name               shift and go to state 25
    class_specifier                shift and go to state 26
    enum_specifier                 shift and go to state 27
    elaborated_type_specifier      shift and go to state 28
    operator_function_name         shift and go to state 32
    class_head                     shift and go to state 46
    class_key                      shift and go to state 48

state 218

    (167) access_list -> access_specifier . COLON member_access_list
    (168) access_list -> access_specifier . COLON

    COLON           shift and go to state 344


state 219

    (252) member_declarator -> COLON . constant_expression
    (25) constant_expression -> . conditional_expression
    (26) conditional_expression -> . logical_OR_expression
    (27) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (28) logical_OR_expression -> . logical_AND_expression
    (29) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (30) logical_AND_expression -> . inclusive_OR_expression
    (31) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (32) inclusive_OR_expression -> . exclusive_OR_expression
    (33) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (264) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 176
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    constant_expression            shift and go to state 345
    conditional_expression         shift and go to state 174
    logical_OR_expression          shift and go to state 138
    logical_AND_expression         shift and go to state 148
    inclusive_OR_expression        shift and go to state 158
    exclusive_OR_expression        shift and go to state 161
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171
    cast_expression                shift and go to state 143
    unary_expression               shift and go to state 175
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    name                           shift and go to state 151
    literal                        shift and go to state 159
    operator_function_name         shift and go to state 32

state 220

    (171) member_declaration -> decl_specifiers . member_declarator_list SEMICOLON
    (173) member_declaration -> decl_specifiers . SEMICOLON
    (147) decl_specifiers -> decl_specifiers . decl_specifier
    (177) function_definition -> decl_specifiers . declarator fct_body
    (247) member_declarator_list -> . member_declarator
    (248) member_declarator_list -> . member_declarator_list COMMA member_declarator
    (149) decl_specifier -> . storage_class_specifier
    (150) decl_specifier -> . type_specifier
    (151) decl_specifier -> . TYPEDEF
    (253) declarator -> . name
    (254) declarator -> . unary2_operator declarator
    (255) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (256) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (257) declarator -> . declarator LSPAREN RSPAREN
    (258) declarator -> . LPAREN declarator RPAREN
    (249) member_declarator -> . declarator pure_specifier
    (250) member_declarator -> . declarator
    (251) member_declarator -> . IDENTIFIER COLON constant_expression
    (252) member_declarator -> . COLON constant_expression
    (152) storage_class_specifier -> . AUTO
    (153) storage_class_specifier -> . STATIC
    (154) storage_class_specifier -> . EXTERN
    (155) storage_class_specifier -> . VIRTUAL
    (156) type_specifier -> . simple_type_name
    (157) type_specifier -> . class_specifier
    (158) type_specifier -> . enum_specifier
    (159) type_specifier -> . elaborated_type_specifier
    (160) type_specifier -> . CONST
    (161) type_specifier -> . VOLATILE
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (162) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (163) class_specifier -> . class_head LCPAREN RCPAREN
    (17) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (18) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (20) enum_specifier -> . ENUM LCPAREN RCPAREN
    (322) elaborated_type_specifier -> . class_key IDENTIFIER
    (323) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (324) elaborated_type_specifier -> . ENUM enum_name
    (325) elaborated_type_specifier -> . TYPE IDENTIFIER
    (326) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (264) operator_function_name -> . OPERATOR operator_name
    (304) class_head -> . class_key base_spec
    (305) class_head -> . class_key
    (306) class_head -> . class_key IDENTIFIER base_spec
    (307) class_head -> . class_key IDENTIFIER
    (328) class_key -> . CLASS
    (329) class_key -> . STRUCT
    (330) class_key -> . UNION
    (331) class_key -> . TEMPLATE

    SEMICOLON       shift and go to state 347
    TYPEDEF         shift and go to state 18
    LPAREN          shift and go to state 13
    IDENTIFIER      shift and go to state 229
    COLON           shift and go to state 219
    AUTO            shift and go to state 21
    STATIC          shift and go to state 22
    EXTERN          shift and go to state 23
    VIRTUAL         shift and go to state 24
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    BNOP            shift and go to state 33
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    ENUM            shift and go to state 47
    TYPE            shift and go to state 49
    OPERATOR        shift and go to state 50
    CLASS           shift and go to state 51
    STRUCT          shift and go to state 52
    UNION           shift and go to state 53
    TEMPLATE        shift and go to state 59

    member_declarator_list         shift and go to state 346
    decl_specifier                 shift and go to state 57
    declarator                     shift and go to state 348
    member_declarator              shift and go to state 227
    storage_class_specifier        shift and go to state 16
    type_specifier                 shift and go to state 17
    name                           shift and go to state 19
    unary2_operator                shift and go to state 20
    simple_type_name               shift and go to state 25
    class_specifier                shift and go to state 26
    enum_specifier                 shift and go to state 27
    elaborated_type_specifier      shift and go to state 28
    operator_function_name         shift and go to state 32
    class_head                     shift and go to state 46
    class_key                      shift and go to state 48

state 221

    (172) member_declaration -> member_declarator_list . SEMICOLON
    (248) member_declarator_list -> member_declarator_list . COMMA member_declarator

    SEMICOLON       shift and go to state 349
    COMMA           shift and go to state 350


state 222

    (174) member_declaration -> SEMICOLON .

    SEMICOLON       reduce using rule 174 (member_declaration -> SEMICOLON .)
    TYPEDEF         reduce using rule 174 (member_declaration -> SEMICOLON .)
    IDENTIFIER      reduce using rule 174 (member_declaration -> SEMICOLON .)
    COLON           reduce using rule 174 (member_declaration -> SEMICOLON .)
    LPAREN          reduce using rule 174 (member_declaration -> SEMICOLON .)
    AUTO            reduce using rule 174 (member_declaration -> SEMICOLON .)
    STATIC          reduce using rule 174 (member_declaration -> SEMICOLON .)
    EXTERN          reduce using rule 174 (member_declaration -> SEMICOLON .)
    VIRTUAL         reduce using rule 174 (member_declaration -> SEMICOLON .)
    CONST           reduce using rule 174 (member_declaration -> SEMICOLON .)
    VOLATILE        reduce using rule 174 (member_declaration -> SEMICOLON .)
    BNOP            reduce using rule 174 (member_declaration -> SEMICOLON .)
    MULTOP          reduce using rule 174 (member_declaration -> SEMICOLON .)
    BANDOP          reduce using rule 174 (member_declaration -> SEMICOLON .)
    CHAR            reduce using rule 174 (member_declaration -> SEMICOLON .)
    SHORT           reduce using rule 174 (member_declaration -> SEMICOLON .)
    INT             reduce using rule 174 (member_declaration -> SEMICOLON .)
    LONG            reduce using rule 174 (member_declaration -> SEMICOLON .)
    SIGNED          reduce using rule 174 (member_declaration -> SEMICOLON .)
    UNSIGNED        reduce using rule 174 (member_declaration -> SEMICOLON .)
    FLOAT           reduce using rule 174 (member_declaration -> SEMICOLON .)
    DOUBLE          reduce using rule 174 (member_declaration -> SEMICOLON .)
    VOID            reduce using rule 174 (member_declaration -> SEMICOLON .)
    STRING          reduce using rule 174 (member_declaration -> SEMICOLON .)
    ENUM            reduce using rule 174 (member_declaration -> SEMICOLON .)
    TYPE            reduce using rule 174 (member_declaration -> SEMICOLON .)
    OPERATOR        reduce using rule 174 (member_declaration -> SEMICOLON .)
    CLASS           reduce using rule 174 (member_declaration -> SEMICOLON .)
    STRUCT          reduce using rule 174 (member_declaration -> SEMICOLON .)
    UNION           reduce using rule 174 (member_declaration -> SEMICOLON .)
    TEMPLATE        reduce using rule 174 (member_declaration -> SEMICOLON .)
    RCPAREN         reduce using rule 174 (member_declaration -> SEMICOLON .)
    PRIVATE         reduce using rule 174 (member_declaration -> SEMICOLON .)
    PROTECTED       reduce using rule 174 (member_declaration -> SEMICOLON .)
    PUBLIC          reduce using rule 174 (member_declaration -> SEMICOLON .)


state 223

    (175) member_declaration -> function_definition . SEMICOLON
    (176) member_declaration -> function_definition .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 351
    TYPEDEF         reduce using rule 176 (member_declaration -> function_definition .)
    IDENTIFIER      reduce using rule 176 (member_declaration -> function_definition .)
    COLON           reduce using rule 176 (member_declaration -> function_definition .)
    LPAREN          reduce using rule 176 (member_declaration -> function_definition .)
    AUTO            reduce using rule 176 (member_declaration -> function_definition .)
    STATIC          reduce using rule 176 (member_declaration -> function_definition .)
    EXTERN          reduce using rule 176 (member_declaration -> function_definition .)
    VIRTUAL         reduce using rule 176 (member_declaration -> function_definition .)
    CONST           reduce using rule 176 (member_declaration -> function_definition .)
    VOLATILE        reduce using rule 176 (member_declaration -> function_definition .)
    BNOP            reduce using rule 176 (member_declaration -> function_definition .)
    MULTOP          reduce using rule 176 (member_declaration -> function_definition .)
    BANDOP          reduce using rule 176 (member_declaration -> function_definition .)
    CHAR            reduce using rule 176 (member_declaration -> function_definition .)
    SHORT           reduce using rule 176 (member_declaration -> function_definition .)
    INT             reduce using rule 176 (member_declaration -> function_definition .)
    LONG            reduce using rule 176 (member_declaration -> function_definition .)
    SIGNED          reduce using rule 176 (member_declaration -> function_definition .)
    UNSIGNED        reduce using rule 176 (member_declaration -> function_definition .)
    FLOAT           reduce using rule 176 (member_declaration -> function_definition .)
    DOUBLE          reduce using rule 176 (member_declaration -> function_definition .)
    VOID            reduce using rule 176 (member_declaration -> function_definition .)
    STRING          reduce using rule 176 (member_declaration -> function_definition .)
    ENUM            reduce using rule 176 (member_declaration -> function_definition .)
    TYPE            reduce using rule 176 (member_declaration -> function_definition .)
    OPERATOR        reduce using rule 176 (member_declaration -> function_definition .)
    CLASS           reduce using rule 176 (member_declaration -> function_definition .)
    STRUCT          reduce using rule 176 (member_declaration -> function_definition .)
    UNION           reduce using rule 176 (member_declaration -> function_definition .)
    TEMPLATE        reduce using rule 176 (member_declaration -> function_definition .)
    RCPAREN         reduce using rule 176 (member_declaration -> function_definition .)
    PRIVATE         reduce using rule 176 (member_declaration -> function_definition .)
    PROTECTED       reduce using rule 176 (member_declaration -> function_definition .)
    PUBLIC          reduce using rule 176 (member_declaration -> function_definition .)

  ! SEMICOLON       [ reduce using rule 176 (member_declaration -> function_definition .) ]


state 224

    (319) access_specifier -> PRIVATE .

    COLON           reduce using rule 319 (access_specifier -> PRIVATE .)
    IDENTIFIER      reduce using rule 319 (access_specifier -> PRIVATE .)
    CLASS           reduce using rule 319 (access_specifier -> PRIVATE .)
    STRUCT          reduce using rule 319 (access_specifier -> PRIVATE .)
    UNION           reduce using rule 319 (access_specifier -> PRIVATE .)
    TEMPLATE        reduce using rule 319 (access_specifier -> PRIVATE .)


state 225

    (320) access_specifier -> PROTECTED .

    COLON           reduce using rule 320 (access_specifier -> PROTECTED .)
    IDENTIFIER      reduce using rule 320 (access_specifier -> PROTECTED .)
    CLASS           reduce using rule 320 (access_specifier -> PROTECTED .)
    STRUCT          reduce using rule 320 (access_specifier -> PROTECTED .)
    UNION           reduce using rule 320 (access_specifier -> PROTECTED .)
    TEMPLATE        reduce using rule 320 (access_specifier -> PROTECTED .)


state 226

    (321) access_specifier -> PUBLIC .

    COLON           reduce using rule 321 (access_specifier -> PUBLIC .)
    IDENTIFIER      reduce using rule 321 (access_specifier -> PUBLIC .)
    CLASS           reduce using rule 321 (access_specifier -> PUBLIC .)
    STRUCT          reduce using rule 321 (access_specifier -> PUBLIC .)
    UNION           reduce using rule 321 (access_specifier -> PUBLIC .)
    TEMPLATE        reduce using rule 321 (access_specifier -> PUBLIC .)


state 227

    (247) member_declarator_list -> member_declarator .

    SEMICOLON       reduce using rule 247 (member_declarator_list -> member_declarator .)
    COMMA           reduce using rule 247 (member_declarator_list -> member_declarator .)


state 228

    (178) function_definition -> declarator . fct_body
    (249) member_declarator -> declarator . pure_specifier
    (250) member_declarator -> declarator .
    (255) declarator -> declarator . LPAREN argument_declaration_list RPAREN
    (256) declarator -> declarator . LSPAREN constant_expression RSPAREN
    (257) declarator -> declarator . LSPAREN RSPAREN
    (179) fct_body -> . compound_statement
    (303) pure_specifier -> . EQUAL NUMBER
    (180) compound_statement -> . LCPAREN statement_list RCPAREN
    (181) compound_statement -> . LCPAREN RCPAREN

    SEMICOLON       reduce using rule 250 (member_declarator -> declarator .)
    COMMA           reduce using rule 250 (member_declarator -> declarator .)
    LPAREN          shift and go to state 126
    LSPAREN         shift and go to state 67
    EQUAL           shift and go to state 353
    LCPAREN         shift and go to state 70

    fct_body                       shift and go to state 64
    pure_specifier                 shift and go to state 352
    compound_statement             shift and go to state 68

state 229

    (251) member_declarator -> IDENTIFIER . COLON constant_expression
    (259) name -> IDENTIFIER .

    COLON           shift and go to state 354
    LPAREN          reduce using rule 259 (name -> IDENTIFIER .)
    LSPAREN         reduce using rule 259 (name -> IDENTIFIER .)
    EQUAL           reduce using rule 259 (name -> IDENTIFIER .)
    LCPAREN         reduce using rule 259 (name -> IDENTIFIER .)
    SEMICOLON       reduce using rule 259 (name -> IDENTIFIER .)
    COMMA           reduce using rule 259 (name -> IDENTIFIER .)


state 230

    (17) enum_specifier -> ENUM IDENTIFIER LCPAREN . enum_list RCPAREN
    (19) enum_specifier -> ENUM IDENTIFIER LCPAREN . RCPAREN
    (21) enum_list -> . enumerator
    (22) enum_list -> . enum_list COMMA enumerator
    (23) enumerator -> . IDENTIFIER
    (24) enumerator -> . IDENTIFIER EQUAL constant_expression

    RCPAREN         shift and go to state 356
    IDENTIFIER      shift and go to state 234

    enum_list                      shift and go to state 355
    enumerator                     shift and go to state 233

state 231

    (18) enum_specifier -> ENUM LCPAREN enum_list . RCPAREN
    (22) enum_list -> enum_list . COMMA enumerator

    RCPAREN         shift and go to state 357
    COMMA           shift and go to state 358


state 232

    (20) enum_specifier -> ENUM LCPAREN RCPAREN .

    SEMICOLON       reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    TYPEDEF         reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    LPAREN          reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    AUTO            reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    STATIC          reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    EXTERN          reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    VIRTUAL         reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    CONST           reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    VOLATILE        reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    IDENTIFIER      reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    BNOP            reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    MULTOP          reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    BANDOP          reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    CHAR            reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    SHORT           reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    INT             reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    LONG            reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    SIGNED          reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    UNSIGNED        reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    FLOAT           reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    DOUBLE          reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    VOID            reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    STRING          reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    ENUM            reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    TYPE            reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    OPERATOR        reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    CLASS           reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    STRUCT          reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    UNION           reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    TEMPLATE        reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    EQUAL           reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    LSPAREN         reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    COMMA           reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    RPAREN          reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    RTEMPLATE       reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    COLON           reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    MULTEQOP        reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    DIVEQOP         reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    MODEQOP         reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    PLUSEQOP        reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    MINUSEQOP       reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    LSHIFTEQOP      reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    RSHIFTEQOP      reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    BANDEQOP        reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    BOREQOP         reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    DOTSTAR         reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    ARROWSTAR       reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    DIVOP           reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    MODOP           reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    PLUSOP          reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    MINUSOP         reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    LSHIFT          reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    RSHIFT          reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    LTCOMP          reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    GTCOMP          reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    LTECOMP         reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    GTECOMP         reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    EQCOMP          reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    NEQCOMP         reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    XOROP           reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    OROP            reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    ANDOP           reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    QUESMARK        reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    RSPAREN         reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    RCPAREN         reduce using rule 20 (enum_specifier -> ENUM LCPAREN RCPAREN .)


state 233

    (21) enum_list -> enumerator .

    RCPAREN         reduce using rule 21 (enum_list -> enumerator .)
    COMMA           reduce using rule 21 (enum_list -> enumerator .)


state 234

    (23) enumerator -> IDENTIFIER .
    (24) enumerator -> IDENTIFIER . EQUAL constant_expression

    RCPAREN         reduce using rule 23 (enumerator -> IDENTIFIER .)
    COMMA           reduce using rule 23 (enumerator -> IDENTIFIER .)
    EQUAL           shift and go to state 359


state 235

    (323) elaborated_type_specifier -> class_key IDENTIFIER template_class_name .

    SEMICOLON       reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    TYPEDEF         reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    LPAREN          reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    AUTO            reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    STATIC          reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    EXTERN          reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    VIRTUAL         reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    CONST           reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    VOLATILE        reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    IDENTIFIER      reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    BNOP            reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    MULTOP          reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    BANDOP          reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    CHAR            reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    SHORT           reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    INT             reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    LONG            reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    SIGNED          reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    UNSIGNED        reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    FLOAT           reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    DOUBLE          reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    VOID            reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    STRING          reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    ENUM            reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    TYPE            reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    OPERATOR        reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    CLASS           reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    STRUCT          reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    UNION           reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    TEMPLATE        reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    EQUAL           reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    LSPAREN         reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    COMMA           reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    RPAREN          reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    RTEMPLATE       reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    COLON           reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    MULTEQOP        reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    DIVEQOP         reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    MODEQOP         reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    PLUSEQOP        reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    MINUSEQOP       reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    LSHIFTEQOP      reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    RSHIFTEQOP      reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    BANDEQOP        reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    BOREQOP         reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    DOTSTAR         reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    ARROWSTAR       reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    DIVOP           reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    MODOP           reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    PLUSOP          reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    MINUSOP         reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    LSHIFT          reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    RSHIFT          reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    LTCOMP          reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    GTCOMP          reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    LTECOMP         reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    GTECOMP         reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    EQCOMP          reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    NEQCOMP         reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    XOROP           reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    OROP            reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    ANDOP           reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    QUESMARK        reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    RSPAREN         reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    RCPAREN         reduce using rule 323 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)


state 236

    (306) class_head -> class_key IDENTIFIER base_spec .

    LCPAREN         reduce using rule 306 (class_head -> class_key IDENTIFIER base_spec .)


state 237

    (12) template_class_name -> LTEMPLATE . template_arg_list RTEMPLATE
    (13) template_arg_list -> . template_arg
    (14) template_arg_list -> . template_arg_list COMMA template_arg
    (15) template_arg -> . expression
    (16) template_arg -> . type_name
    (59) expression -> . assignment_expression
    (60) expression -> . expression COMMA assignment_expression
    (126) type_name -> . type_specifier_list abstract_declarator
    (127) type_name -> . type_specifier_list
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (262) type_specifier_list -> . type_specifier type_specifier_list
    (263) type_specifier_list -> . type_specifier
    (26) conditional_expression -> . logical_OR_expression
    (27) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (156) type_specifier -> . simple_type_name
    (157) type_specifier -> . class_specifier
    (158) type_specifier -> . enum_specifier
    (159) type_specifier -> . elaborated_type_specifier
    (160) type_specifier -> . CONST
    (161) type_specifier -> . VOLATILE
    (28) logical_OR_expression -> . logical_AND_expression
    (29) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (162) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (163) class_specifier -> . class_head LCPAREN RCPAREN
    (17) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (18) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (20) enum_specifier -> . ENUM LCPAREN RCPAREN
    (322) elaborated_type_specifier -> . class_key IDENTIFIER
    (323) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (324) elaborated_type_specifier -> . ENUM enum_name
    (325) elaborated_type_specifier -> . TYPE IDENTIFIER
    (326) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (30) logical_AND_expression -> . inclusive_OR_expression
    (31) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (304) class_head -> . class_key base_spec
    (305) class_head -> . class_key
    (306) class_head -> . class_key IDENTIFIER base_spec
    (307) class_head -> . class_key IDENTIFIER
    (328) class_key -> . CLASS
    (329) class_key -> . STRUCT
    (330) class_key -> . UNION
    (331) class_key -> . TEMPLATE
    (32) inclusive_OR_expression -> . exclusive_OR_expression
    (33) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (264) operator_function_name -> . OPERATOR operator_name
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    ENUM            shift and go to state 47
    TYPE            shift and go to state 49
    THIS            shift and go to state 160
    LPAREN          shift and go to state 128
    CLASS           shift and go to state 51
    STRUCT          shift and go to state 52
    UNION           shift and go to state 53
    TEMPLATE        shift and go to state 59
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    template_arg_list              shift and go to state 360
    template_arg                   shift and go to state 361
    expression                     shift and go to state 362
    type_name                      shift and go to state 363
    assignment_expression          shift and go to state 208
    type_specifier_list            shift and go to state 249
    conditional_expression         shift and go to state 135
    unary_expression               shift and go to state 136
    type_specifier                 shift and go to state 250
    logical_OR_expression          shift and go to state 138
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    cast_expression                shift and go to state 143
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    simple_type_name               shift and go to state 251
    class_specifier                shift and go to state 26
    enum_specifier                 shift and go to state 27
    elaborated_type_specifier      shift and go to state 28
    logical_AND_expression         shift and go to state 148
    primary_expression             shift and go to state 149
    name                           shift and go to state 151
    class_head                     shift and go to state 46
    class_key                      shift and go to state 48
    inclusive_OR_expression        shift and go to state 158
    literal                        shift and go to state 159
    exclusive_OR_expression        shift and go to state 161
    operator_function_name         shift and go to state 32
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171

state 238

    (308) base_spec -> COLON base_list .
    (310) base_list -> base_list . COMMA base_specifier

    LCPAREN         reduce using rule 308 (base_spec -> COLON base_list .)
    COMMA           shift and go to state 364


state 239

    (309) base_list -> base_specifier .

    COMMA           reduce using rule 309 (base_list -> base_specifier .)
    LCPAREN         reduce using rule 309 (base_list -> base_specifier .)


state 240

    (311) base_specifier -> class_key . IDENTIFIER
    (313) base_specifier -> class_key . IDENTIFIER template_class_name

    IDENTIFIER      shift and go to state 365


state 241

    (315) base_specifier -> IDENTIFIER .
    (317) base_specifier -> IDENTIFIER . template_class_name
    (12) template_class_name -> . LTEMPLATE template_arg_list RTEMPLATE

    COMMA           reduce using rule 315 (base_specifier -> IDENTIFIER .)
    LCPAREN         reduce using rule 315 (base_specifier -> IDENTIFIER .)
    LTEMPLATE       shift and go to state 237

    template_class_name            shift and go to state 366

state 242

    (312) base_specifier -> access_specifier . class_key IDENTIFIER
    (314) base_specifier -> access_specifier . class_key IDENTIFIER template_class_name
    (316) base_specifier -> access_specifier . IDENTIFIER
    (318) base_specifier -> access_specifier . IDENTIFIER template_class_name
    (328) class_key -> . CLASS
    (329) class_key -> . STRUCT
    (330) class_key -> . UNION
    (331) class_key -> . TEMPLATE

    IDENTIFIER      shift and go to state 368
    CLASS           shift and go to state 51
    STRUCT          shift and go to state 52
    UNION           shift and go to state 53
    TEMPLATE        shift and go to state 59

    class_key                      shift and go to state 367

state 243

    (326) elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .

    SEMICOLON       reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    TYPEDEF         reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    LPAREN          reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    AUTO            reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    STATIC          reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    EXTERN          reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    VIRTUAL         reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    CONST           reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    VOLATILE        reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    IDENTIFIER      reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    BNOP            reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    MULTOP          reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    BANDOP          reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    CHAR            reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    SHORT           reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    INT             reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    LONG            reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    SIGNED          reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    UNSIGNED        reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    FLOAT           reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    DOUBLE          reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    VOID            reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    STRING          reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    ENUM            reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    TYPE            reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    OPERATOR        reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    CLASS           reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    STRUCT          reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    UNION           reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    TEMPLATE        reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    EQUAL           reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    LSPAREN         reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    COMMA           reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    RPAREN          reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    RTEMPLATE       reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    COLON           reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    MULTEQOP        reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    DIVEQOP         reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    MODEQOP         reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    PLUSEQOP        reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    MINUSEQOP       reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    LSHIFTEQOP      reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    RSHIFTEQOP      reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    BANDEQOP        reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    BOREQOP         reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    DOTSTAR         reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    ARROWSTAR       reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    DIVOP           reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    MODOP           reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    PLUSOP          reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    MINUSOP         reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    LSHIFT          reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    RSHIFT          reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    LTCOMP          reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    GTCOMP          reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    LTECOMP         reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    GTECOMP         reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    EQCOMP          reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    NEQCOMP         reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    XOROP           reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    OROP            reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    ANDOP           reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    QUESMARK        reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    RSPAREN         reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    RCPAREN         reduce using rule 326 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)


state 244

    (301) operator_name -> LPAREN RPAREN .

    LPAREN          reduce using rule 301 (operator_name -> LPAREN RPAREN .)
    LSPAREN         reduce using rule 301 (operator_name -> LPAREN RPAREN .)
    EQUAL           reduce using rule 301 (operator_name -> LPAREN RPAREN .)
    LCPAREN         reduce using rule 301 (operator_name -> LPAREN RPAREN .)
    SEMICOLON       reduce using rule 301 (operator_name -> LPAREN RPAREN .)
    COMMA           reduce using rule 301 (operator_name -> LPAREN RPAREN .)
    RPAREN          reduce using rule 301 (operator_name -> LPAREN RPAREN .)
    DOT             reduce using rule 301 (operator_name -> LPAREN RPAREN .)
    ARROW           reduce using rule 301 (operator_name -> LPAREN RPAREN .)
    DPLUSOP         reduce using rule 301 (operator_name -> LPAREN RPAREN .)
    DMINUSOP        reduce using rule 301 (operator_name -> LPAREN RPAREN .)
    LTEMPLATE       reduce using rule 301 (operator_name -> LPAREN RPAREN .)
    MULTEQOP        reduce using rule 301 (operator_name -> LPAREN RPAREN .)
    DIVEQOP         reduce using rule 301 (operator_name -> LPAREN RPAREN .)
    MODEQOP         reduce using rule 301 (operator_name -> LPAREN RPAREN .)
    PLUSEQOP        reduce using rule 301 (operator_name -> LPAREN RPAREN .)
    MINUSEQOP       reduce using rule 301 (operator_name -> LPAREN RPAREN .)
    LSHIFTEQOP      reduce using rule 301 (operator_name -> LPAREN RPAREN .)
    RSHIFTEQOP      reduce using rule 301 (operator_name -> LPAREN RPAREN .)
    BANDEQOP        reduce using rule 301 (operator_name -> LPAREN RPAREN .)
    BOREQOP         reduce using rule 301 (operator_name -> LPAREN RPAREN .)
    DOTSTAR         reduce using rule 301 (operator_name -> LPAREN RPAREN .)
    ARROWSTAR       reduce using rule 301 (operator_name -> LPAREN RPAREN .)
    MULTOP          reduce using rule 301 (operator_name -> LPAREN RPAREN .)
    DIVOP           reduce using rule 301 (operator_name -> LPAREN RPAREN .)
    MODOP           reduce using rule 301 (operator_name -> LPAREN RPAREN .)
    PLUSOP          reduce using rule 301 (operator_name -> LPAREN RPAREN .)
    MINUSOP         reduce using rule 301 (operator_name -> LPAREN RPAREN .)
    LSHIFT          reduce using rule 301 (operator_name -> LPAREN RPAREN .)
    RSHIFT          reduce using rule 301 (operator_name -> LPAREN RPAREN .)
    LTCOMP          reduce using rule 301 (operator_name -> LPAREN RPAREN .)
    GTCOMP          reduce using rule 301 (operator_name -> LPAREN RPAREN .)
    LTECOMP         reduce using rule 301 (operator_name -> LPAREN RPAREN .)
    GTECOMP         reduce using rule 301 (operator_name -> LPAREN RPAREN .)
    EQCOMP          reduce using rule 301 (operator_name -> LPAREN RPAREN .)
    NEQCOMP         reduce using rule 301 (operator_name -> LPAREN RPAREN .)
    BANDOP          reduce using rule 301 (operator_name -> LPAREN RPAREN .)
    XOROP           reduce using rule 301 (operator_name -> LPAREN RPAREN .)
    OROP            reduce using rule 301 (operator_name -> LPAREN RPAREN .)
    ANDOP           reduce using rule 301 (operator_name -> LPAREN RPAREN .)
    QUESMARK        reduce using rule 301 (operator_name -> LPAREN RPAREN .)
    RSPAREN         reduce using rule 301 (operator_name -> LPAREN RPAREN .)
    RTEMPLATE       reduce using rule 301 (operator_name -> LPAREN RPAREN .)
    RCPAREN         reduce using rule 301 (operator_name -> LPAREN RPAREN .)
    COLON           reduce using rule 301 (operator_name -> LPAREN RPAREN .)


state 245

    (302) operator_name -> LSPAREN RSPAREN .

    LPAREN          reduce using rule 302 (operator_name -> LSPAREN RSPAREN .)
    LSPAREN         reduce using rule 302 (operator_name -> LSPAREN RSPAREN .)
    EQUAL           reduce using rule 302 (operator_name -> LSPAREN RSPAREN .)
    LCPAREN         reduce using rule 302 (operator_name -> LSPAREN RSPAREN .)
    SEMICOLON       reduce using rule 302 (operator_name -> LSPAREN RSPAREN .)
    COMMA           reduce using rule 302 (operator_name -> LSPAREN RSPAREN .)
    RPAREN          reduce using rule 302 (operator_name -> LSPAREN RSPAREN .)
    DOT             reduce using rule 302 (operator_name -> LSPAREN RSPAREN .)
    ARROW           reduce using rule 302 (operator_name -> LSPAREN RSPAREN .)
    DPLUSOP         reduce using rule 302 (operator_name -> LSPAREN RSPAREN .)
    DMINUSOP        reduce using rule 302 (operator_name -> LSPAREN RSPAREN .)
    LTEMPLATE       reduce using rule 302 (operator_name -> LSPAREN RSPAREN .)
    MULTEQOP        reduce using rule 302 (operator_name -> LSPAREN RSPAREN .)
    DIVEQOP         reduce using rule 302 (operator_name -> LSPAREN RSPAREN .)
    MODEQOP         reduce using rule 302 (operator_name -> LSPAREN RSPAREN .)
    PLUSEQOP        reduce using rule 302 (operator_name -> LSPAREN RSPAREN .)
    MINUSEQOP       reduce using rule 302 (operator_name -> LSPAREN RSPAREN .)
    LSHIFTEQOP      reduce using rule 302 (operator_name -> LSPAREN RSPAREN .)
    RSHIFTEQOP      reduce using rule 302 (operator_name -> LSPAREN RSPAREN .)
    BANDEQOP        reduce using rule 302 (operator_name -> LSPAREN RSPAREN .)
    BOREQOP         reduce using rule 302 (operator_name -> LSPAREN RSPAREN .)
    DOTSTAR         reduce using rule 302 (operator_name -> LSPAREN RSPAREN .)
    ARROWSTAR       reduce using rule 302 (operator_name -> LSPAREN RSPAREN .)
    MULTOP          reduce using rule 302 (operator_name -> LSPAREN RSPAREN .)
    DIVOP           reduce using rule 302 (operator_name -> LSPAREN RSPAREN .)
    MODOP           reduce using rule 302 (operator_name -> LSPAREN RSPAREN .)
    PLUSOP          reduce using rule 302 (operator_name -> LSPAREN RSPAREN .)
    MINUSOP         reduce using rule 302 (operator_name -> LSPAREN RSPAREN .)
    LSHIFT          reduce using rule 302 (operator_name -> LSPAREN RSPAREN .)
    RSHIFT          reduce using rule 302 (operator_name -> LSPAREN RSPAREN .)
    LTCOMP          reduce using rule 302 (operator_name -> LSPAREN RSPAREN .)
    GTCOMP          reduce using rule 302 (operator_name -> LSPAREN RSPAREN .)
    LTECOMP         reduce using rule 302 (operator_name -> LSPAREN RSPAREN .)
    GTECOMP         reduce using rule 302 (operator_name -> LSPAREN RSPAREN .)
    EQCOMP          reduce using rule 302 (operator_name -> LSPAREN RSPAREN .)
    NEQCOMP         reduce using rule 302 (operator_name -> LSPAREN RSPAREN .)
    BANDOP          reduce using rule 302 (operator_name -> LSPAREN RSPAREN .)
    XOROP           reduce using rule 302 (operator_name -> LSPAREN RSPAREN .)
    OROP            reduce using rule 302 (operator_name -> LSPAREN RSPAREN .)
    ANDOP           reduce using rule 302 (operator_name -> LSPAREN RSPAREN .)
    QUESMARK        reduce using rule 302 (operator_name -> LSPAREN RSPAREN .)
    RSPAREN         reduce using rule 302 (operator_name -> LSPAREN RSPAREN .)
    RTEMPLATE       reduce using rule 302 (operator_name -> LSPAREN RSPAREN .)
    RCPAREN         reduce using rule 302 (operator_name -> LSPAREN RSPAREN .)
    COLON           reduce using rule 302 (operator_name -> LSPAREN RSPAREN .)


state 246

    (242) asm_declaration -> ASM LPAREN STRING_L RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 369


state 247

    (119) primary_expression -> LPAREN expression . RPAREN
    (60) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 370
    COMMA           shift and go to state 324


state 248

    (125) cast_expression -> LPAREN type_name . RPAREN cast_expression

    RPAREN          shift and go to state 371


state 249

    (126) type_name -> type_specifier_list . abstract_declarator
    (127) type_name -> type_specifier_list .
    (128) abstract_declarator -> . unary2_operator abstract_declarator
    (129) abstract_declarator -> . unary2_operator
    (130) abstract_declarator -> . abstract_declarator LPAREN argument_declaration_list RPAREN
    (131) abstract_declarator -> . LPAREN argument_declaration_list RPAREN
    (132) abstract_declarator -> . abstract_declarator LSPAREN constant_expression RSPAREN
    (133) abstract_declarator -> . LSPAREN constant_expression RSPAREN
    (134) abstract_declarator -> . abstract_declarator LSPAREN RSPAREN
    (135) abstract_declarator -> . LSPAREN RSPAREN
    (136) abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP

    RPAREN          reduce using rule 127 (type_name -> type_specifier_list .)
    RTEMPLATE       reduce using rule 127 (type_name -> type_specifier_list .)
    COMMA           reduce using rule 127 (type_name -> type_specifier_list .)
    LPAREN          shift and go to state 374
    LSPAREN         shift and go to state 272
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35

    abstract_declarator            shift and go to state 372
    unary2_operator                shift and go to state 373

state 250

    (262) type_specifier_list -> type_specifier . type_specifier_list
    (263) type_specifier_list -> type_specifier .
    (262) type_specifier_list -> . type_specifier type_specifier_list
    (263) type_specifier_list -> . type_specifier
    (156) type_specifier -> . simple_type_name
    (157) type_specifier -> . class_specifier
    (158) type_specifier -> . enum_specifier
    (159) type_specifier -> . elaborated_type_specifier
    (160) type_specifier -> . CONST
    (161) type_specifier -> . VOLATILE
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (162) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (163) class_specifier -> . class_head LCPAREN RCPAREN
    (17) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (18) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (20) enum_specifier -> . ENUM LCPAREN RCPAREN
    (322) elaborated_type_specifier -> . class_key IDENTIFIER
    (323) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (324) elaborated_type_specifier -> . ENUM enum_name
    (325) elaborated_type_specifier -> . TYPE IDENTIFIER
    (326) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (304) class_head -> . class_key base_spec
    (305) class_head -> . class_key
    (306) class_head -> . class_key IDENTIFIER base_spec
    (307) class_head -> . class_key IDENTIFIER
    (328) class_key -> . CLASS
    (329) class_key -> . STRUCT
    (330) class_key -> . UNION
    (331) class_key -> . TEMPLATE

    LPAREN          reduce using rule 263 (type_specifier_list -> type_specifier .)
    LSPAREN         reduce using rule 263 (type_specifier_list -> type_specifier .)
    MULTOP          reduce using rule 263 (type_specifier_list -> type_specifier .)
    BANDOP          reduce using rule 263 (type_specifier_list -> type_specifier .)
    RPAREN          reduce using rule 263 (type_specifier_list -> type_specifier .)
    EQUAL           reduce using rule 263 (type_specifier_list -> type_specifier .)
    MULTEQOP        reduce using rule 263 (type_specifier_list -> type_specifier .)
    DIVEQOP         reduce using rule 263 (type_specifier_list -> type_specifier .)
    MODEQOP         reduce using rule 263 (type_specifier_list -> type_specifier .)
    PLUSEQOP        reduce using rule 263 (type_specifier_list -> type_specifier .)
    MINUSEQOP       reduce using rule 263 (type_specifier_list -> type_specifier .)
    LSHIFTEQOP      reduce using rule 263 (type_specifier_list -> type_specifier .)
    RSHIFTEQOP      reduce using rule 263 (type_specifier_list -> type_specifier .)
    BANDEQOP        reduce using rule 263 (type_specifier_list -> type_specifier .)
    BOREQOP         reduce using rule 263 (type_specifier_list -> type_specifier .)
    DOTSTAR         reduce using rule 263 (type_specifier_list -> type_specifier .)
    ARROWSTAR       reduce using rule 263 (type_specifier_list -> type_specifier .)
    DIVOP           reduce using rule 263 (type_specifier_list -> type_specifier .)
    MODOP           reduce using rule 263 (type_specifier_list -> type_specifier .)
    PLUSOP          reduce using rule 263 (type_specifier_list -> type_specifier .)
    MINUSOP         reduce using rule 263 (type_specifier_list -> type_specifier .)
    LSHIFT          reduce using rule 263 (type_specifier_list -> type_specifier .)
    RSHIFT          reduce using rule 263 (type_specifier_list -> type_specifier .)
    LTCOMP          reduce using rule 263 (type_specifier_list -> type_specifier .)
    GTCOMP          reduce using rule 263 (type_specifier_list -> type_specifier .)
    LTECOMP         reduce using rule 263 (type_specifier_list -> type_specifier .)
    GTECOMP         reduce using rule 263 (type_specifier_list -> type_specifier .)
    EQCOMP          reduce using rule 263 (type_specifier_list -> type_specifier .)
    NEQCOMP         reduce using rule 263 (type_specifier_list -> type_specifier .)
    XOROP           reduce using rule 263 (type_specifier_list -> type_specifier .)
    OROP            reduce using rule 263 (type_specifier_list -> type_specifier .)
    ANDOP           reduce using rule 263 (type_specifier_list -> type_specifier .)
    QUESMARK        reduce using rule 263 (type_specifier_list -> type_specifier .)
    COMMA           reduce using rule 263 (type_specifier_list -> type_specifier .)
    RSPAREN         reduce using rule 263 (type_specifier_list -> type_specifier .)
    SEMICOLON       reduce using rule 263 (type_specifier_list -> type_specifier .)
    RCPAREN         reduce using rule 263 (type_specifier_list -> type_specifier .)
    COLON           reduce using rule 263 (type_specifier_list -> type_specifier .)
    RTEMPLATE       reduce using rule 263 (type_specifier_list -> type_specifier .)
    IDENTIFIER      reduce using rule 263 (type_specifier_list -> type_specifier .)
    BNOP            reduce using rule 263 (type_specifier_list -> type_specifier .)
    OPERATOR        reduce using rule 263 (type_specifier_list -> type_specifier .)
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    ENUM            shift and go to state 47
    TYPE            shift and go to state 49
    CLASS           shift and go to state 51
    STRUCT          shift and go to state 52
    UNION           shift and go to state 53
    TEMPLATE        shift and go to state 59

    type_specifier                 shift and go to state 250
    type_specifier_list            shift and go to state 375
    simple_type_name               shift and go to state 25
    class_specifier                shift and go to state 26
    enum_specifier                 shift and go to state 27
    elaborated_type_specifier      shift and go to state 28
    class_head                     shift and go to state 46
    class_key                      shift and go to state 48

state 251

    (156) type_specifier -> simple_type_name .
    (111) postfix_expression -> simple_type_name . LPAREN expression_list RPAREN
    (112) postfix_expression -> simple_type_name . LPAREN RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
    CONST           reduce using rule 156 (type_specifier -> simple_type_name .)
    VOLATILE        reduce using rule 156 (type_specifier -> simple_type_name .)
    CHAR            reduce using rule 156 (type_specifier -> simple_type_name .)
    SHORT           reduce using rule 156 (type_specifier -> simple_type_name .)
    INT             reduce using rule 156 (type_specifier -> simple_type_name .)
    LONG            reduce using rule 156 (type_specifier -> simple_type_name .)
    SIGNED          reduce using rule 156 (type_specifier -> simple_type_name .)
    UNSIGNED        reduce using rule 156 (type_specifier -> simple_type_name .)
    FLOAT           reduce using rule 156 (type_specifier -> simple_type_name .)
    DOUBLE          reduce using rule 156 (type_specifier -> simple_type_name .)
    VOID            reduce using rule 156 (type_specifier -> simple_type_name .)
    STRING          reduce using rule 156 (type_specifier -> simple_type_name .)
    ENUM            reduce using rule 156 (type_specifier -> simple_type_name .)
    TYPE            reduce using rule 156 (type_specifier -> simple_type_name .)
    CLASS           reduce using rule 156 (type_specifier -> simple_type_name .)
    STRUCT          reduce using rule 156 (type_specifier -> simple_type_name .)
    UNION           reduce using rule 156 (type_specifier -> simple_type_name .)
    TEMPLATE        reduce using rule 156 (type_specifier -> simple_type_name .)
    LSPAREN         reduce using rule 156 (type_specifier -> simple_type_name .)
    MULTOP          reduce using rule 156 (type_specifier -> simple_type_name .)
    BANDOP          reduce using rule 156 (type_specifier -> simple_type_name .)
    RPAREN          reduce using rule 156 (type_specifier -> simple_type_name .)
    RTEMPLATE       reduce using rule 156 (type_specifier -> simple_type_name .)
    COMMA           reduce using rule 156 (type_specifier -> simple_type_name .)
    LPAREN          shift and go to state 290

  ! LPAREN          [ reduce using rule 156 (type_specifier -> simple_type_name .) ]


state 252

    (255) declarator -> declarator LPAREN argument_declaration_list RPAREN .

    LPAREN          reduce using rule 255 (declarator -> declarator LPAREN argument_declaration_list RPAREN .)
    LSPAREN         reduce using rule 255 (declarator -> declarator LPAREN argument_declaration_list RPAREN .)
    EQUAL           reduce using rule 255 (declarator -> declarator LPAREN argument_declaration_list RPAREN .)
    LCPAREN         reduce using rule 255 (declarator -> declarator LPAREN argument_declaration_list RPAREN .)
    SEMICOLON       reduce using rule 255 (declarator -> declarator LPAREN argument_declaration_list RPAREN .)
    COMMA           reduce using rule 255 (declarator -> declarator LPAREN argument_declaration_list RPAREN .)
    RPAREN          reduce using rule 255 (declarator -> declarator LPAREN argument_declaration_list RPAREN .)
    RTEMPLATE       reduce using rule 255 (declarator -> declarator LPAREN argument_declaration_list RPAREN .)


state 253

    (237) initializer -> LPAREN expression_list RPAREN .

    SEMICOLON       reduce using rule 237 (initializer -> LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 237 (initializer -> LPAREN expression_list RPAREN .)


state 254

    (246) expression_list -> expression_list COMMA . assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (26) conditional_expression -> . logical_OR_expression
    (27) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (28) logical_OR_expression -> . logical_AND_expression
    (29) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (30) logical_AND_expression -> . inclusive_OR_expression
    (31) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (32) inclusive_OR_expression -> . exclusive_OR_expression
    (33) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (264) operator_function_name -> . OPERATOR operator_name
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    LPAREN          shift and go to state 128
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    assignment_expression          shift and go to state 376
    conditional_expression         shift and go to state 135
    unary_expression               shift and go to state 136
    logical_OR_expression          shift and go to state 138
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    cast_expression                shift and go to state 143
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    logical_AND_expression         shift and go to state 148
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    name                           shift and go to state 151
    inclusive_OR_expression        shift and go to state 158
    literal                        shift and go to state 159
    exclusive_OR_expression        shift and go to state 161
    operator_function_name         shift and go to state 32
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171

state 255

    (140) arg_declaration_list -> argument_declaration COMMA . arg_declaration_list
    (139) arg_declaration_list -> . argument_declaration
    (140) arg_declaration_list -> . argument_declaration COMMA arg_declaration_list
    (141) argument_declaration -> . decl_specifiers declarator
    (142) argument_declaration -> . decl_specifiers declarator EQUAL expression
    (143) argument_declaration -> . decl_specifiers abstract_declarator
    (144) argument_declaration -> . decl_specifiers
    (145) argument_declaration -> . decl_specifiers abstract_declarator EQUAL expression
    (146) argument_declaration -> . decl_specifiers EQUAL expression
    (147) decl_specifiers -> . decl_specifiers decl_specifier
    (148) decl_specifiers -> . decl_specifier
    (149) decl_specifier -> . storage_class_specifier
    (150) decl_specifier -> . type_specifier
    (151) decl_specifier -> . TYPEDEF
    (152) storage_class_specifier -> . AUTO
    (153) storage_class_specifier -> . STATIC
    (154) storage_class_specifier -> . EXTERN
    (155) storage_class_specifier -> . VIRTUAL
    (156) type_specifier -> . simple_type_name
    (157) type_specifier -> . class_specifier
    (158) type_specifier -> . enum_specifier
    (159) type_specifier -> . elaborated_type_specifier
    (160) type_specifier -> . CONST
    (161) type_specifier -> . VOLATILE
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (162) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (163) class_specifier -> . class_head LCPAREN RCPAREN
    (17) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (18) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (20) enum_specifier -> . ENUM LCPAREN RCPAREN
    (322) elaborated_type_specifier -> . class_key IDENTIFIER
    (323) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (324) elaborated_type_specifier -> . ENUM enum_name
    (325) elaborated_type_specifier -> . TYPE IDENTIFIER
    (326) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (304) class_head -> . class_key base_spec
    (305) class_head -> . class_key
    (306) class_head -> . class_key IDENTIFIER base_spec
    (307) class_head -> . class_key IDENTIFIER
    (328) class_key -> . CLASS
    (329) class_key -> . STRUCT
    (330) class_key -> . UNION
    (331) class_key -> . TEMPLATE

    TYPEDEF         shift and go to state 18
    AUTO            shift and go to state 21
    STATIC          shift and go to state 22
    EXTERN          shift and go to state 23
    VIRTUAL         shift and go to state 24
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    ENUM            shift and go to state 47
    TYPE            shift and go to state 49
    CLASS           shift and go to state 51
    STRUCT          shift and go to state 52
    UNION           shift and go to state 53
    TEMPLATE        shift and go to state 59

    argument_declaration           shift and go to state 134
    arg_declaration_list           shift and go to state 377
    decl_specifiers                shift and go to state 137
    decl_specifier                 shift and go to state 10
    storage_class_specifier        shift and go to state 16
    type_specifier                 shift and go to state 17
    simple_type_name               shift and go to state 25
    class_specifier                shift and go to state 26
    enum_specifier                 shift and go to state 27
    elaborated_type_specifier      shift and go to state 28
    class_head                     shift and go to state 46
    class_key                      shift and go to state 48

state 256

    (62) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (26) conditional_expression -> . logical_OR_expression
    (27) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (28) logical_OR_expression -> . logical_AND_expression
    (29) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (30) logical_AND_expression -> . inclusive_OR_expression
    (31) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (32) inclusive_OR_expression -> . exclusive_OR_expression
    (33) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (264) operator_function_name -> . OPERATOR operator_name
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    LPAREN          shift and go to state 128
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    unary_expression               shift and go to state 136
    assignment_expression          shift and go to state 378
    conditional_expression         shift and go to state 135
    logical_OR_expression          shift and go to state 138
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    cast_expression                shift and go to state 143
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    logical_AND_expression         shift and go to state 148
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    name                           shift and go to state 151
    inclusive_OR_expression        shift and go to state 158
    literal                        shift and go to state 159
    exclusive_OR_expression        shift and go to state 161
    operator_function_name         shift and go to state 32
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171

state 257

    (63) assignment_operator -> EQUAL .

    DPLUSOP         reduce using rule 63 (assignment_operator -> EQUAL .)
    DMINUSOP        reduce using rule 63 (assignment_operator -> EQUAL .)
    SIZEOF          reduce using rule 63 (assignment_operator -> EQUAL .)
    PLUSOP          reduce using rule 63 (assignment_operator -> EQUAL .)
    MINUSOP         reduce using rule 63 (assignment_operator -> EQUAL .)
    NOTSYM          reduce using rule 63 (assignment_operator -> EQUAL .)
    BNOP            reduce using rule 63 (assignment_operator -> EQUAL .)
    MULTOP          reduce using rule 63 (assignment_operator -> EQUAL .)
    BANDOP          reduce using rule 63 (assignment_operator -> EQUAL .)
    NEW             reduce using rule 63 (assignment_operator -> EQUAL .)
    DELETE          reduce using rule 63 (assignment_operator -> EQUAL .)
    THIS            reduce using rule 63 (assignment_operator -> EQUAL .)
    LPAREN          reduce using rule 63 (assignment_operator -> EQUAL .)
    CHAR            reduce using rule 63 (assignment_operator -> EQUAL .)
    SHORT           reduce using rule 63 (assignment_operator -> EQUAL .)
    INT             reduce using rule 63 (assignment_operator -> EQUAL .)
    LONG            reduce using rule 63 (assignment_operator -> EQUAL .)
    SIGNED          reduce using rule 63 (assignment_operator -> EQUAL .)
    UNSIGNED        reduce using rule 63 (assignment_operator -> EQUAL .)
    FLOAT           reduce using rule 63 (assignment_operator -> EQUAL .)
    DOUBLE          reduce using rule 63 (assignment_operator -> EQUAL .)
    VOID            reduce using rule 63 (assignment_operator -> EQUAL .)
    STRING          reduce using rule 63 (assignment_operator -> EQUAL .)
    NUMBER          reduce using rule 63 (assignment_operator -> EQUAL .)
    STRING_L        reduce using rule 63 (assignment_operator -> EQUAL .)
    SCHAR           reduce using rule 63 (assignment_operator -> EQUAL .)
    IDENTIFIER      reduce using rule 63 (assignment_operator -> EQUAL .)
    OPERATOR        reduce using rule 63 (assignment_operator -> EQUAL .)


state 258

    (64) assignment_operator -> MULTEQOP .

    DPLUSOP         reduce using rule 64 (assignment_operator -> MULTEQOP .)
    DMINUSOP        reduce using rule 64 (assignment_operator -> MULTEQOP .)
    SIZEOF          reduce using rule 64 (assignment_operator -> MULTEQOP .)
    PLUSOP          reduce using rule 64 (assignment_operator -> MULTEQOP .)
    MINUSOP         reduce using rule 64 (assignment_operator -> MULTEQOP .)
    NOTSYM          reduce using rule 64 (assignment_operator -> MULTEQOP .)
    BNOP            reduce using rule 64 (assignment_operator -> MULTEQOP .)
    MULTOP          reduce using rule 64 (assignment_operator -> MULTEQOP .)
    BANDOP          reduce using rule 64 (assignment_operator -> MULTEQOP .)
    NEW             reduce using rule 64 (assignment_operator -> MULTEQOP .)
    DELETE          reduce using rule 64 (assignment_operator -> MULTEQOP .)
    THIS            reduce using rule 64 (assignment_operator -> MULTEQOP .)
    LPAREN          reduce using rule 64 (assignment_operator -> MULTEQOP .)
    CHAR            reduce using rule 64 (assignment_operator -> MULTEQOP .)
    SHORT           reduce using rule 64 (assignment_operator -> MULTEQOP .)
    INT             reduce using rule 64 (assignment_operator -> MULTEQOP .)
    LONG            reduce using rule 64 (assignment_operator -> MULTEQOP .)
    SIGNED          reduce using rule 64 (assignment_operator -> MULTEQOP .)
    UNSIGNED        reduce using rule 64 (assignment_operator -> MULTEQOP .)
    FLOAT           reduce using rule 64 (assignment_operator -> MULTEQOP .)
    DOUBLE          reduce using rule 64 (assignment_operator -> MULTEQOP .)
    VOID            reduce using rule 64 (assignment_operator -> MULTEQOP .)
    STRING          reduce using rule 64 (assignment_operator -> MULTEQOP .)
    NUMBER          reduce using rule 64 (assignment_operator -> MULTEQOP .)
    STRING_L        reduce using rule 64 (assignment_operator -> MULTEQOP .)
    SCHAR           reduce using rule 64 (assignment_operator -> MULTEQOP .)
    IDENTIFIER      reduce using rule 64 (assignment_operator -> MULTEQOP .)
    OPERATOR        reduce using rule 64 (assignment_operator -> MULTEQOP .)


state 259

    (65) assignment_operator -> DIVEQOP .

    DPLUSOP         reduce using rule 65 (assignment_operator -> DIVEQOP .)
    DMINUSOP        reduce using rule 65 (assignment_operator -> DIVEQOP .)
    SIZEOF          reduce using rule 65 (assignment_operator -> DIVEQOP .)
    PLUSOP          reduce using rule 65 (assignment_operator -> DIVEQOP .)
    MINUSOP         reduce using rule 65 (assignment_operator -> DIVEQOP .)
    NOTSYM          reduce using rule 65 (assignment_operator -> DIVEQOP .)
    BNOP            reduce using rule 65 (assignment_operator -> DIVEQOP .)
    MULTOP          reduce using rule 65 (assignment_operator -> DIVEQOP .)
    BANDOP          reduce using rule 65 (assignment_operator -> DIVEQOP .)
    NEW             reduce using rule 65 (assignment_operator -> DIVEQOP .)
    DELETE          reduce using rule 65 (assignment_operator -> DIVEQOP .)
    THIS            reduce using rule 65 (assignment_operator -> DIVEQOP .)
    LPAREN          reduce using rule 65 (assignment_operator -> DIVEQOP .)
    CHAR            reduce using rule 65 (assignment_operator -> DIVEQOP .)
    SHORT           reduce using rule 65 (assignment_operator -> DIVEQOP .)
    INT             reduce using rule 65 (assignment_operator -> DIVEQOP .)
    LONG            reduce using rule 65 (assignment_operator -> DIVEQOP .)
    SIGNED          reduce using rule 65 (assignment_operator -> DIVEQOP .)
    UNSIGNED        reduce using rule 65 (assignment_operator -> DIVEQOP .)
    FLOAT           reduce using rule 65 (assignment_operator -> DIVEQOP .)
    DOUBLE          reduce using rule 65 (assignment_operator -> DIVEQOP .)
    VOID            reduce using rule 65 (assignment_operator -> DIVEQOP .)
    STRING          reduce using rule 65 (assignment_operator -> DIVEQOP .)
    NUMBER          reduce using rule 65 (assignment_operator -> DIVEQOP .)
    STRING_L        reduce using rule 65 (assignment_operator -> DIVEQOP .)
    SCHAR           reduce using rule 65 (assignment_operator -> DIVEQOP .)
    IDENTIFIER      reduce using rule 65 (assignment_operator -> DIVEQOP .)
    OPERATOR        reduce using rule 65 (assignment_operator -> DIVEQOP .)


state 260

    (66) assignment_operator -> MODEQOP .

    DPLUSOP         reduce using rule 66 (assignment_operator -> MODEQOP .)
    DMINUSOP        reduce using rule 66 (assignment_operator -> MODEQOP .)
    SIZEOF          reduce using rule 66 (assignment_operator -> MODEQOP .)
    PLUSOP          reduce using rule 66 (assignment_operator -> MODEQOP .)
    MINUSOP         reduce using rule 66 (assignment_operator -> MODEQOP .)
    NOTSYM          reduce using rule 66 (assignment_operator -> MODEQOP .)
    BNOP            reduce using rule 66 (assignment_operator -> MODEQOP .)
    MULTOP          reduce using rule 66 (assignment_operator -> MODEQOP .)
    BANDOP          reduce using rule 66 (assignment_operator -> MODEQOP .)
    NEW             reduce using rule 66 (assignment_operator -> MODEQOP .)
    DELETE          reduce using rule 66 (assignment_operator -> MODEQOP .)
    THIS            reduce using rule 66 (assignment_operator -> MODEQOP .)
    LPAREN          reduce using rule 66 (assignment_operator -> MODEQOP .)
    CHAR            reduce using rule 66 (assignment_operator -> MODEQOP .)
    SHORT           reduce using rule 66 (assignment_operator -> MODEQOP .)
    INT             reduce using rule 66 (assignment_operator -> MODEQOP .)
    LONG            reduce using rule 66 (assignment_operator -> MODEQOP .)
    SIGNED          reduce using rule 66 (assignment_operator -> MODEQOP .)
    UNSIGNED        reduce using rule 66 (assignment_operator -> MODEQOP .)
    FLOAT           reduce using rule 66 (assignment_operator -> MODEQOP .)
    DOUBLE          reduce using rule 66 (assignment_operator -> MODEQOP .)
    VOID            reduce using rule 66 (assignment_operator -> MODEQOP .)
    STRING          reduce using rule 66 (assignment_operator -> MODEQOP .)
    NUMBER          reduce using rule 66 (assignment_operator -> MODEQOP .)
    STRING_L        reduce using rule 66 (assignment_operator -> MODEQOP .)
    SCHAR           reduce using rule 66 (assignment_operator -> MODEQOP .)
    IDENTIFIER      reduce using rule 66 (assignment_operator -> MODEQOP .)
    OPERATOR        reduce using rule 66 (assignment_operator -> MODEQOP .)


state 261

    (67) assignment_operator -> PLUSEQOP .

    DPLUSOP         reduce using rule 67 (assignment_operator -> PLUSEQOP .)
    DMINUSOP        reduce using rule 67 (assignment_operator -> PLUSEQOP .)
    SIZEOF          reduce using rule 67 (assignment_operator -> PLUSEQOP .)
    PLUSOP          reduce using rule 67 (assignment_operator -> PLUSEQOP .)
    MINUSOP         reduce using rule 67 (assignment_operator -> PLUSEQOP .)
    NOTSYM          reduce using rule 67 (assignment_operator -> PLUSEQOP .)
    BNOP            reduce using rule 67 (assignment_operator -> PLUSEQOP .)
    MULTOP          reduce using rule 67 (assignment_operator -> PLUSEQOP .)
    BANDOP          reduce using rule 67 (assignment_operator -> PLUSEQOP .)
    NEW             reduce using rule 67 (assignment_operator -> PLUSEQOP .)
    DELETE          reduce using rule 67 (assignment_operator -> PLUSEQOP .)
    THIS            reduce using rule 67 (assignment_operator -> PLUSEQOP .)
    LPAREN          reduce using rule 67 (assignment_operator -> PLUSEQOP .)
    CHAR            reduce using rule 67 (assignment_operator -> PLUSEQOP .)
    SHORT           reduce using rule 67 (assignment_operator -> PLUSEQOP .)
    INT             reduce using rule 67 (assignment_operator -> PLUSEQOP .)
    LONG            reduce using rule 67 (assignment_operator -> PLUSEQOP .)
    SIGNED          reduce using rule 67 (assignment_operator -> PLUSEQOP .)
    UNSIGNED        reduce using rule 67 (assignment_operator -> PLUSEQOP .)
    FLOAT           reduce using rule 67 (assignment_operator -> PLUSEQOP .)
    DOUBLE          reduce using rule 67 (assignment_operator -> PLUSEQOP .)
    VOID            reduce using rule 67 (assignment_operator -> PLUSEQOP .)
    STRING          reduce using rule 67 (assignment_operator -> PLUSEQOP .)
    NUMBER          reduce using rule 67 (assignment_operator -> PLUSEQOP .)
    STRING_L        reduce using rule 67 (assignment_operator -> PLUSEQOP .)
    SCHAR           reduce using rule 67 (assignment_operator -> PLUSEQOP .)
    IDENTIFIER      reduce using rule 67 (assignment_operator -> PLUSEQOP .)
    OPERATOR        reduce using rule 67 (assignment_operator -> PLUSEQOP .)


state 262

    (68) assignment_operator -> MINUSEQOP .

    DPLUSOP         reduce using rule 68 (assignment_operator -> MINUSEQOP .)
    DMINUSOP        reduce using rule 68 (assignment_operator -> MINUSEQOP .)
    SIZEOF          reduce using rule 68 (assignment_operator -> MINUSEQOP .)
    PLUSOP          reduce using rule 68 (assignment_operator -> MINUSEQOP .)
    MINUSOP         reduce using rule 68 (assignment_operator -> MINUSEQOP .)
    NOTSYM          reduce using rule 68 (assignment_operator -> MINUSEQOP .)
    BNOP            reduce using rule 68 (assignment_operator -> MINUSEQOP .)
    MULTOP          reduce using rule 68 (assignment_operator -> MINUSEQOP .)
    BANDOP          reduce using rule 68 (assignment_operator -> MINUSEQOP .)
    NEW             reduce using rule 68 (assignment_operator -> MINUSEQOP .)
    DELETE          reduce using rule 68 (assignment_operator -> MINUSEQOP .)
    THIS            reduce using rule 68 (assignment_operator -> MINUSEQOP .)
    LPAREN          reduce using rule 68 (assignment_operator -> MINUSEQOP .)
    CHAR            reduce using rule 68 (assignment_operator -> MINUSEQOP .)
    SHORT           reduce using rule 68 (assignment_operator -> MINUSEQOP .)
    INT             reduce using rule 68 (assignment_operator -> MINUSEQOP .)
    LONG            reduce using rule 68 (assignment_operator -> MINUSEQOP .)
    SIGNED          reduce using rule 68 (assignment_operator -> MINUSEQOP .)
    UNSIGNED        reduce using rule 68 (assignment_operator -> MINUSEQOP .)
    FLOAT           reduce using rule 68 (assignment_operator -> MINUSEQOP .)
    DOUBLE          reduce using rule 68 (assignment_operator -> MINUSEQOP .)
    VOID            reduce using rule 68 (assignment_operator -> MINUSEQOP .)
    STRING          reduce using rule 68 (assignment_operator -> MINUSEQOP .)
    NUMBER          reduce using rule 68 (assignment_operator -> MINUSEQOP .)
    STRING_L        reduce using rule 68 (assignment_operator -> MINUSEQOP .)
    SCHAR           reduce using rule 68 (assignment_operator -> MINUSEQOP .)
    IDENTIFIER      reduce using rule 68 (assignment_operator -> MINUSEQOP .)
    OPERATOR        reduce using rule 68 (assignment_operator -> MINUSEQOP .)


state 263

    (69) assignment_operator -> LSHIFTEQOP .

    DPLUSOP         reduce using rule 69 (assignment_operator -> LSHIFTEQOP .)
    DMINUSOP        reduce using rule 69 (assignment_operator -> LSHIFTEQOP .)
    SIZEOF          reduce using rule 69 (assignment_operator -> LSHIFTEQOP .)
    PLUSOP          reduce using rule 69 (assignment_operator -> LSHIFTEQOP .)
    MINUSOP         reduce using rule 69 (assignment_operator -> LSHIFTEQOP .)
    NOTSYM          reduce using rule 69 (assignment_operator -> LSHIFTEQOP .)
    BNOP            reduce using rule 69 (assignment_operator -> LSHIFTEQOP .)
    MULTOP          reduce using rule 69 (assignment_operator -> LSHIFTEQOP .)
    BANDOP          reduce using rule 69 (assignment_operator -> LSHIFTEQOP .)
    NEW             reduce using rule 69 (assignment_operator -> LSHIFTEQOP .)
    DELETE          reduce using rule 69 (assignment_operator -> LSHIFTEQOP .)
    THIS            reduce using rule 69 (assignment_operator -> LSHIFTEQOP .)
    LPAREN          reduce using rule 69 (assignment_operator -> LSHIFTEQOP .)
    CHAR            reduce using rule 69 (assignment_operator -> LSHIFTEQOP .)
    SHORT           reduce using rule 69 (assignment_operator -> LSHIFTEQOP .)
    INT             reduce using rule 69 (assignment_operator -> LSHIFTEQOP .)
    LONG            reduce using rule 69 (assignment_operator -> LSHIFTEQOP .)
    SIGNED          reduce using rule 69 (assignment_operator -> LSHIFTEQOP .)
    UNSIGNED        reduce using rule 69 (assignment_operator -> LSHIFTEQOP .)
    FLOAT           reduce using rule 69 (assignment_operator -> LSHIFTEQOP .)
    DOUBLE          reduce using rule 69 (assignment_operator -> LSHIFTEQOP .)
    VOID            reduce using rule 69 (assignment_operator -> LSHIFTEQOP .)
    STRING          reduce using rule 69 (assignment_operator -> LSHIFTEQOP .)
    NUMBER          reduce using rule 69 (assignment_operator -> LSHIFTEQOP .)
    STRING_L        reduce using rule 69 (assignment_operator -> LSHIFTEQOP .)
    SCHAR           reduce using rule 69 (assignment_operator -> LSHIFTEQOP .)
    IDENTIFIER      reduce using rule 69 (assignment_operator -> LSHIFTEQOP .)
    OPERATOR        reduce using rule 69 (assignment_operator -> LSHIFTEQOP .)


state 264

    (70) assignment_operator -> RSHIFTEQOP .

    DPLUSOP         reduce using rule 70 (assignment_operator -> RSHIFTEQOP .)
    DMINUSOP        reduce using rule 70 (assignment_operator -> RSHIFTEQOP .)
    SIZEOF          reduce using rule 70 (assignment_operator -> RSHIFTEQOP .)
    PLUSOP          reduce using rule 70 (assignment_operator -> RSHIFTEQOP .)
    MINUSOP         reduce using rule 70 (assignment_operator -> RSHIFTEQOP .)
    NOTSYM          reduce using rule 70 (assignment_operator -> RSHIFTEQOP .)
    BNOP            reduce using rule 70 (assignment_operator -> RSHIFTEQOP .)
    MULTOP          reduce using rule 70 (assignment_operator -> RSHIFTEQOP .)
    BANDOP          reduce using rule 70 (assignment_operator -> RSHIFTEQOP .)
    NEW             reduce using rule 70 (assignment_operator -> RSHIFTEQOP .)
    DELETE          reduce using rule 70 (assignment_operator -> RSHIFTEQOP .)
    THIS            reduce using rule 70 (assignment_operator -> RSHIFTEQOP .)
    LPAREN          reduce using rule 70 (assignment_operator -> RSHIFTEQOP .)
    CHAR            reduce using rule 70 (assignment_operator -> RSHIFTEQOP .)
    SHORT           reduce using rule 70 (assignment_operator -> RSHIFTEQOP .)
    INT             reduce using rule 70 (assignment_operator -> RSHIFTEQOP .)
    LONG            reduce using rule 70 (assignment_operator -> RSHIFTEQOP .)
    SIGNED          reduce using rule 70 (assignment_operator -> RSHIFTEQOP .)
    UNSIGNED        reduce using rule 70 (assignment_operator -> RSHIFTEQOP .)
    FLOAT           reduce using rule 70 (assignment_operator -> RSHIFTEQOP .)
    DOUBLE          reduce using rule 70 (assignment_operator -> RSHIFTEQOP .)
    VOID            reduce using rule 70 (assignment_operator -> RSHIFTEQOP .)
    STRING          reduce using rule 70 (assignment_operator -> RSHIFTEQOP .)
    NUMBER          reduce using rule 70 (assignment_operator -> RSHIFTEQOP .)
    STRING_L        reduce using rule 70 (assignment_operator -> RSHIFTEQOP .)
    SCHAR           reduce using rule 70 (assignment_operator -> RSHIFTEQOP .)
    IDENTIFIER      reduce using rule 70 (assignment_operator -> RSHIFTEQOP .)
    OPERATOR        reduce using rule 70 (assignment_operator -> RSHIFTEQOP .)


state 265

    (71) assignment_operator -> BANDEQOP .

    DPLUSOP         reduce using rule 71 (assignment_operator -> BANDEQOP .)
    DMINUSOP        reduce using rule 71 (assignment_operator -> BANDEQOP .)
    SIZEOF          reduce using rule 71 (assignment_operator -> BANDEQOP .)
    PLUSOP          reduce using rule 71 (assignment_operator -> BANDEQOP .)
    MINUSOP         reduce using rule 71 (assignment_operator -> BANDEQOP .)
    NOTSYM          reduce using rule 71 (assignment_operator -> BANDEQOP .)
    BNOP            reduce using rule 71 (assignment_operator -> BANDEQOP .)
    MULTOP          reduce using rule 71 (assignment_operator -> BANDEQOP .)
    BANDOP          reduce using rule 71 (assignment_operator -> BANDEQOP .)
    NEW             reduce using rule 71 (assignment_operator -> BANDEQOP .)
    DELETE          reduce using rule 71 (assignment_operator -> BANDEQOP .)
    THIS            reduce using rule 71 (assignment_operator -> BANDEQOP .)
    LPAREN          reduce using rule 71 (assignment_operator -> BANDEQOP .)
    CHAR            reduce using rule 71 (assignment_operator -> BANDEQOP .)
    SHORT           reduce using rule 71 (assignment_operator -> BANDEQOP .)
    INT             reduce using rule 71 (assignment_operator -> BANDEQOP .)
    LONG            reduce using rule 71 (assignment_operator -> BANDEQOP .)
    SIGNED          reduce using rule 71 (assignment_operator -> BANDEQOP .)
    UNSIGNED        reduce using rule 71 (assignment_operator -> BANDEQOP .)
    FLOAT           reduce using rule 71 (assignment_operator -> BANDEQOP .)
    DOUBLE          reduce using rule 71 (assignment_operator -> BANDEQOP .)
    VOID            reduce using rule 71 (assignment_operator -> BANDEQOP .)
    STRING          reduce using rule 71 (assignment_operator -> BANDEQOP .)
    NUMBER          reduce using rule 71 (assignment_operator -> BANDEQOP .)
    STRING_L        reduce using rule 71 (assignment_operator -> BANDEQOP .)
    SCHAR           reduce using rule 71 (assignment_operator -> BANDEQOP .)
    IDENTIFIER      reduce using rule 71 (assignment_operator -> BANDEQOP .)
    OPERATOR        reduce using rule 71 (assignment_operator -> BANDEQOP .)


state 266

    (72) assignment_operator -> BOREQOP .

    DPLUSOP         reduce using rule 72 (assignment_operator -> BOREQOP .)
    DMINUSOP        reduce using rule 72 (assignment_operator -> BOREQOP .)
    SIZEOF          reduce using rule 72 (assignment_operator -> BOREQOP .)
    PLUSOP          reduce using rule 72 (assignment_operator -> BOREQOP .)
    MINUSOP         reduce using rule 72 (assignment_operator -> BOREQOP .)
    NOTSYM          reduce using rule 72 (assignment_operator -> BOREQOP .)
    BNOP            reduce using rule 72 (assignment_operator -> BOREQOP .)
    MULTOP          reduce using rule 72 (assignment_operator -> BOREQOP .)
    BANDOP          reduce using rule 72 (assignment_operator -> BOREQOP .)
    NEW             reduce using rule 72 (assignment_operator -> BOREQOP .)
    DELETE          reduce using rule 72 (assignment_operator -> BOREQOP .)
    THIS            reduce using rule 72 (assignment_operator -> BOREQOP .)
    LPAREN          reduce using rule 72 (assignment_operator -> BOREQOP .)
    CHAR            reduce using rule 72 (assignment_operator -> BOREQOP .)
    SHORT           reduce using rule 72 (assignment_operator -> BOREQOP .)
    INT             reduce using rule 72 (assignment_operator -> BOREQOP .)
    LONG            reduce using rule 72 (assignment_operator -> BOREQOP .)
    SIGNED          reduce using rule 72 (assignment_operator -> BOREQOP .)
    UNSIGNED        reduce using rule 72 (assignment_operator -> BOREQOP .)
    FLOAT           reduce using rule 72 (assignment_operator -> BOREQOP .)
    DOUBLE          reduce using rule 72 (assignment_operator -> BOREQOP .)
    VOID            reduce using rule 72 (assignment_operator -> BOREQOP .)
    STRING          reduce using rule 72 (assignment_operator -> BOREQOP .)
    NUMBER          reduce using rule 72 (assignment_operator -> BOREQOP .)
    STRING_L        reduce using rule 72 (assignment_operator -> BOREQOP .)
    SCHAR           reduce using rule 72 (assignment_operator -> BOREQOP .)
    IDENTIFIER      reduce using rule 72 (assignment_operator -> BOREQOP .)
    OPERATOR        reduce using rule 72 (assignment_operator -> BOREQOP .)


state 267

    (141) argument_declaration -> decl_specifiers declarator .
    (142) argument_declaration -> decl_specifiers declarator . EQUAL expression
    (255) declarator -> declarator . LPAREN argument_declaration_list RPAREN
    (256) declarator -> declarator . LSPAREN constant_expression RSPAREN
    (257) declarator -> declarator . LSPAREN RSPAREN

    COMMA           reduce using rule 141 (argument_declaration -> decl_specifiers declarator .)
    RPAREN          reduce using rule 141 (argument_declaration -> decl_specifiers declarator .)
    RTEMPLATE       reduce using rule 141 (argument_declaration -> decl_specifiers declarator .)
    EQUAL           shift and go to state 379
    LPAREN          shift and go to state 126
    LSPAREN         shift and go to state 67


state 268

    (146) argument_declaration -> decl_specifiers EQUAL . expression
    (59) expression -> . assignment_expression
    (60) expression -> . expression COMMA assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (26) conditional_expression -> . logical_OR_expression
    (27) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (28) logical_OR_expression -> . logical_AND_expression
    (29) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (30) logical_AND_expression -> . inclusive_OR_expression
    (31) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (32) inclusive_OR_expression -> . exclusive_OR_expression
    (33) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (264) operator_function_name -> . OPERATOR operator_name
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    LPAREN          shift and go to state 128
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    expression                     shift and go to state 380
    assignment_expression          shift and go to state 208
    conditional_expression         shift and go to state 135
    unary_expression               shift and go to state 136
    logical_OR_expression          shift and go to state 138
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    cast_expression                shift and go to state 143
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    logical_AND_expression         shift and go to state 148
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    name                           shift and go to state 151
    inclusive_OR_expression        shift and go to state 158
    literal                        shift and go to state 159
    exclusive_OR_expression        shift and go to state 161
    operator_function_name         shift and go to state 32
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171

state 269

    (143) argument_declaration -> decl_specifiers abstract_declarator .
    (145) argument_declaration -> decl_specifiers abstract_declarator . EQUAL expression
    (130) abstract_declarator -> abstract_declarator . LPAREN argument_declaration_list RPAREN
    (132) abstract_declarator -> abstract_declarator . LSPAREN constant_expression RSPAREN
    (134) abstract_declarator -> abstract_declarator . LSPAREN RSPAREN

    COMMA           reduce using rule 143 (argument_declaration -> decl_specifiers abstract_declarator .)
    RPAREN          reduce using rule 143 (argument_declaration -> decl_specifiers abstract_declarator .)
    RTEMPLATE       reduce using rule 143 (argument_declaration -> decl_specifiers abstract_declarator .)
    EQUAL           shift and go to state 381
    LPAREN          shift and go to state 382
    LSPAREN         shift and go to state 383


state 270

    (254) declarator -> unary2_operator . declarator
    (128) abstract_declarator -> unary2_operator . abstract_declarator
    (129) abstract_declarator -> unary2_operator .
    (253) declarator -> . name
    (254) declarator -> . unary2_operator declarator
    (255) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (256) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (257) declarator -> . declarator LSPAREN RSPAREN
    (258) declarator -> . LPAREN declarator RPAREN
    (128) abstract_declarator -> . unary2_operator abstract_declarator
    (129) abstract_declarator -> . unary2_operator
    (130) abstract_declarator -> . abstract_declarator LPAREN argument_declaration_list RPAREN
    (131) abstract_declarator -> . LPAREN argument_declaration_list RPAREN
    (132) abstract_declarator -> . abstract_declarator LSPAREN constant_expression RSPAREN
    (133) abstract_declarator -> . LSPAREN constant_expression RSPAREN
    (134) abstract_declarator -> . abstract_declarator LSPAREN RSPAREN
    (135) abstract_declarator -> . LSPAREN RSPAREN
    (136) abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (264) operator_function_name -> . OPERATOR operator_name

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LSPAREN resolved as shift
    EQUAL           reduce using rule 129 (abstract_declarator -> unary2_operator .)
    COMMA           reduce using rule 129 (abstract_declarator -> unary2_operator .)
    RPAREN          reduce using rule 129 (abstract_declarator -> unary2_operator .)
    RTEMPLATE       reduce using rule 129 (abstract_declarator -> unary2_operator .)
    LPAREN          shift and go to state 271
    LSPAREN         shift and go to state 272
    IDENTIFIER      shift and go to state 31
    BNOP            shift and go to state 33
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    OPERATOR        shift and go to state 50

  ! LPAREN          [ reduce using rule 129 (abstract_declarator -> unary2_operator .) ]
  ! LSPAREN         [ reduce using rule 129 (abstract_declarator -> unary2_operator .) ]

    unary2_operator                shift and go to state 270
    declarator                     shift and go to state 72
    abstract_declarator            shift and go to state 384
    name                           shift and go to state 19
    operator_function_name         shift and go to state 32

state 271

    (258) declarator -> LPAREN . declarator RPAREN
    (131) abstract_declarator -> LPAREN . argument_declaration_list RPAREN
    (136) abstract_declarator -> LPAREN . abstract_declarator RPAREN
    (253) declarator -> . name
    (254) declarator -> . unary2_operator declarator
    (255) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (256) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (257) declarator -> . declarator LSPAREN RSPAREN
    (258) declarator -> . LPAREN declarator RPAREN
    (137) argument_declaration_list -> . arg_declaration_list
    (138) argument_declaration_list -> . empty
    (128) abstract_declarator -> . unary2_operator abstract_declarator
    (129) abstract_declarator -> . unary2_operator
    (130) abstract_declarator -> . abstract_declarator LPAREN argument_declaration_list RPAREN
    (131) abstract_declarator -> . LPAREN argument_declaration_list RPAREN
    (132) abstract_declarator -> . abstract_declarator LSPAREN constant_expression RSPAREN
    (133) abstract_declarator -> . LSPAREN constant_expression RSPAREN
    (134) abstract_declarator -> . abstract_declarator LSPAREN RSPAREN
    (135) abstract_declarator -> . LSPAREN RSPAREN
    (136) abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (139) arg_declaration_list -> . argument_declaration
    (140) arg_declaration_list -> . argument_declaration COMMA arg_declaration_list
    (11) empty -> .
    (264) operator_function_name -> . OPERATOR operator_name
    (141) argument_declaration -> . decl_specifiers declarator
    (142) argument_declaration -> . decl_specifiers declarator EQUAL expression
    (143) argument_declaration -> . decl_specifiers abstract_declarator
    (144) argument_declaration -> . decl_specifiers
    (145) argument_declaration -> . decl_specifiers abstract_declarator EQUAL expression
    (146) argument_declaration -> . decl_specifiers EQUAL expression
    (147) decl_specifiers -> . decl_specifiers decl_specifier
    (148) decl_specifiers -> . decl_specifier
    (149) decl_specifier -> . storage_class_specifier
    (150) decl_specifier -> . type_specifier
    (151) decl_specifier -> . TYPEDEF
    (152) storage_class_specifier -> . AUTO
    (153) storage_class_specifier -> . STATIC
    (154) storage_class_specifier -> . EXTERN
    (155) storage_class_specifier -> . VIRTUAL
    (156) type_specifier -> . simple_type_name
    (157) type_specifier -> . class_specifier
    (158) type_specifier -> . enum_specifier
    (159) type_specifier -> . elaborated_type_specifier
    (160) type_specifier -> . CONST
    (161) type_specifier -> . VOLATILE
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (162) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (163) class_specifier -> . class_head LCPAREN RCPAREN
    (17) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (18) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (20) enum_specifier -> . ENUM LCPAREN RCPAREN
    (322) elaborated_type_specifier -> . class_key IDENTIFIER
    (323) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (324) elaborated_type_specifier -> . ENUM enum_name
    (325) elaborated_type_specifier -> . TYPE IDENTIFIER
    (326) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (304) class_head -> . class_key base_spec
    (305) class_head -> . class_key
    (306) class_head -> . class_key IDENTIFIER base_spec
    (307) class_head -> . class_key IDENTIFIER
    (328) class_key -> . CLASS
    (329) class_key -> . STRUCT
    (330) class_key -> . UNION
    (331) class_key -> . TEMPLATE

    LPAREN          shift and go to state 271
    LSPAREN         shift and go to state 272
    IDENTIFIER      shift and go to state 31
    BNOP            shift and go to state 33
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    RPAREN          reduce using rule 11 (empty -> .)
    OPERATOR        shift and go to state 50
    TYPEDEF         shift and go to state 18
    AUTO            shift and go to state 21
    STATIC          shift and go to state 22
    EXTERN          shift and go to state 23
    VIRTUAL         shift and go to state 24
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    ENUM            shift and go to state 47
    TYPE            shift and go to state 49
    CLASS           shift and go to state 51
    STRUCT          shift and go to state 52
    UNION           shift and go to state 53
    TEMPLATE        shift and go to state 59

    declarator                     shift and go to state 63
    argument_declaration_list      shift and go to state 385
    abstract_declarator            shift and go to state 386
    name                           shift and go to state 19
    unary2_operator                shift and go to state 270
    arg_declaration_list           shift and go to state 131
    empty                          shift and go to state 132
    operator_function_name         shift and go to state 32
    argument_declaration           shift and go to state 134
    decl_specifiers                shift and go to state 137
    decl_specifier                 shift and go to state 10
    storage_class_specifier        shift and go to state 16
    type_specifier                 shift and go to state 17
    simple_type_name               shift and go to state 25
    class_specifier                shift and go to state 26
    enum_specifier                 shift and go to state 27
    elaborated_type_specifier      shift and go to state 28
    class_head                     shift and go to state 46
    class_key                      shift and go to state 48

state 272

    (133) abstract_declarator -> LSPAREN . constant_expression RSPAREN
    (135) abstract_declarator -> LSPAREN . RSPAREN
    (25) constant_expression -> . conditional_expression
    (26) conditional_expression -> . logical_OR_expression
    (27) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (28) logical_OR_expression -> . logical_AND_expression
    (29) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (30) logical_AND_expression -> . inclusive_OR_expression
    (31) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (32) inclusive_OR_expression -> . exclusive_OR_expression
    (33) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (264) operator_function_name -> . OPERATOR operator_name

    RSPAREN         shift and go to state 388
    LPAREN          shift and go to state 176
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    constant_expression            shift and go to state 387
    conditional_expression         shift and go to state 174
    logical_OR_expression          shift and go to state 138
    logical_AND_expression         shift and go to state 148
    inclusive_OR_expression        shift and go to state 158
    exclusive_OR_expression        shift and go to state 161
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171
    cast_expression                shift and go to state 143
    unary_expression               shift and go to state 175
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    name                           shift and go to state 151
    literal                        shift and go to state 159
    operator_function_name         shift and go to state 32

state 273

    (27) conditional_expression -> logical_OR_expression QUESMARK . expression COLON conditional_expression
    (59) expression -> . assignment_expression
    (60) expression -> . expression COMMA assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (26) conditional_expression -> . logical_OR_expression
    (27) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (28) logical_OR_expression -> . logical_AND_expression
    (29) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (30) logical_AND_expression -> . inclusive_OR_expression
    (31) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (32) inclusive_OR_expression -> . exclusive_OR_expression
    (33) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (264) operator_function_name -> . OPERATOR operator_name
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    LPAREN          shift and go to state 128
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    logical_OR_expression          shift and go to state 138
    expression                     shift and go to state 389
    conditional_expression         shift and go to state 135
    assignment_expression          shift and go to state 208
    unary_expression               shift and go to state 136
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    cast_expression                shift and go to state 143
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    logical_AND_expression         shift and go to state 148
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    name                           shift and go to state 151
    inclusive_OR_expression        shift and go to state 158
    literal                        shift and go to state 159
    exclusive_OR_expression        shift and go to state 161
    operator_function_name         shift and go to state 32
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171

state 274

    (29) logical_OR_expression -> logical_OR_expression OROP . logical_AND_expression
    (30) logical_AND_expression -> . inclusive_OR_expression
    (31) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (32) inclusive_OR_expression -> . exclusive_OR_expression
    (33) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (264) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 176
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    logical_AND_expression         shift and go to state 390
    inclusive_OR_expression        shift and go to state 158
    exclusive_OR_expression        shift and go to state 161
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171
    cast_expression                shift and go to state 143
    unary_expression               shift and go to state 175
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    name                           shift and go to state 151
    literal                        shift and go to state 159
    operator_function_name         shift and go to state 32

state 275

    (107) postfix_expression -> postfix_expression LSPAREN . expression RSPAREN
    (59) expression -> . assignment_expression
    (60) expression -> . expression COMMA assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (26) conditional_expression -> . logical_OR_expression
    (27) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (28) logical_OR_expression -> . logical_AND_expression
    (29) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (30) logical_AND_expression -> . inclusive_OR_expression
    (31) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (32) inclusive_OR_expression -> . exclusive_OR_expression
    (33) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (264) operator_function_name -> . OPERATOR operator_name
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    LPAREN          shift and go to state 128
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    postfix_expression             shift and go to state 139
    expression                     shift and go to state 391
    assignment_expression          shift and go to state 208
    conditional_expression         shift and go to state 135
    unary_expression               shift and go to state 136
    logical_OR_expression          shift and go to state 138
    unary1_operator                shift and go to state 142
    cast_expression                shift and go to state 143
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    logical_AND_expression         shift and go to state 148
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    name                           shift and go to state 151
    inclusive_OR_expression        shift and go to state 158
    literal                        shift and go to state 159
    exclusive_OR_expression        shift and go to state 161
    operator_function_name         shift and go to state 32
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171

state 276

    (108) postfix_expression -> postfix_expression LPAREN . expression_list RPAREN
    (110) postfix_expression -> postfix_expression LPAREN . RPAREN
    (245) expression_list -> . assignment_expression
    (246) expression_list -> . expression_list COMMA assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (26) conditional_expression -> . logical_OR_expression
    (27) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (28) logical_OR_expression -> . logical_AND_expression
    (29) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (30) logical_AND_expression -> . inclusive_OR_expression
    (31) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (32) inclusive_OR_expression -> . exclusive_OR_expression
    (33) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (264) operator_function_name -> . OPERATOR operator_name
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 393
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    LPAREN          shift and go to state 128
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    postfix_expression             shift and go to state 139
    expression_list                shift and go to state 392
    assignment_expression          shift and go to state 133
    conditional_expression         shift and go to state 135
    unary_expression               shift and go to state 136
    logical_OR_expression          shift and go to state 138
    unary1_operator                shift and go to state 142
    cast_expression                shift and go to state 143
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    logical_AND_expression         shift and go to state 148
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    name                           shift and go to state 151
    inclusive_OR_expression        shift and go to state 158
    literal                        shift and go to state 159
    exclusive_OR_expression        shift and go to state 161
    operator_function_name         shift and go to state 32
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171

state 277

    (109) postfix_expression -> postfix_expression template_class_name . LPAREN expression_list RPAREN

    LPAREN          shift and go to state 394


state 278

    (113) postfix_expression -> postfix_expression DOT . name
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (264) operator_function_name -> . OPERATOR operator_name

    IDENTIFIER      shift and go to state 31
    BNOP            shift and go to state 33
    OPERATOR        shift and go to state 50

    name                           shift and go to state 395
    operator_function_name         shift and go to state 32

state 279

    (114) postfix_expression -> postfix_expression ARROW . name
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (264) operator_function_name -> . OPERATOR operator_name

    IDENTIFIER      shift and go to state 31
    BNOP            shift and go to state 33
    OPERATOR        shift and go to state 50

    name                           shift and go to state 396
    operator_function_name         shift and go to state 32

state 280

    (115) postfix_expression -> postfix_expression DPLUSOP .

    LSPAREN         reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    LPAREN          reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    DOT             reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    ARROW           reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    DPLUSOP         reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    DMINUSOP        reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    LTEMPLATE       reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    EQUAL           reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    MULTEQOP        reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    DIVEQOP         reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    MODEQOP         reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    PLUSEQOP        reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    MINUSEQOP       reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    LSHIFTEQOP      reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    RSHIFTEQOP      reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    BANDEQOP        reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    BOREQOP         reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    DOTSTAR         reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    ARROWSTAR       reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    MULTOP          reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    DIVOP           reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    MODOP           reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    PLUSOP          reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    MINUSOP         reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    LSHIFT          reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    RSHIFT          reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    LTCOMP          reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    GTCOMP          reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    LTECOMP         reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    GTECOMP         reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    EQCOMP          reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    NEQCOMP         reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    BANDOP          reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    XOROP           reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    OROP            reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    ANDOP           reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    QUESMARK        reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    RPAREN          reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    COMMA           reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    RSPAREN         reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    SEMICOLON       reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    RCPAREN         reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    COLON           reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    RTEMPLATE       reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)


state 281

    (116) postfix_expression -> postfix_expression DMINUSOP .

    LSPAREN         reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    LPAREN          reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    DOT             reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    ARROW           reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    DPLUSOP         reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    DMINUSOP        reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    LTEMPLATE       reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    EQUAL           reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    MULTEQOP        reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    DIVEQOP         reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    MODEQOP         reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    PLUSEQOP        reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    MINUSEQOP       reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    LSHIFTEQOP      reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    RSHIFTEQOP      reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    BANDEQOP        reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    BOREQOP         reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    DOTSTAR         reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    ARROWSTAR       reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    MULTOP          reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    DIVOP           reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    MODOP           reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    PLUSOP          reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    MINUSOP         reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    LSHIFT          reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    RSHIFT          reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    LTCOMP          reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    GTCOMP          reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    LTECOMP         reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    GTECOMP         reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    EQCOMP          reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    NEQCOMP         reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    BANDOP          reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    XOROP           reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    OROP            reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    ANDOP           reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    QUESMARK        reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    RPAREN          reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    COMMA           reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    RSPAREN         reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    SEMICOLON       reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    RCPAREN         reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    COLON           reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    RTEMPLATE       reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)


state 282

    (74) unary_expression -> DPLUSOP unary_expression .

    EQUAL           reduce using rule 74 (unary_expression -> DPLUSOP unary_expression .)
    MULTEQOP        reduce using rule 74 (unary_expression -> DPLUSOP unary_expression .)
    DIVEQOP         reduce using rule 74 (unary_expression -> DPLUSOP unary_expression .)
    MODEQOP         reduce using rule 74 (unary_expression -> DPLUSOP unary_expression .)
    PLUSEQOP        reduce using rule 74 (unary_expression -> DPLUSOP unary_expression .)
    MINUSEQOP       reduce using rule 74 (unary_expression -> DPLUSOP unary_expression .)
    LSHIFTEQOP      reduce using rule 74 (unary_expression -> DPLUSOP unary_expression .)
    RSHIFTEQOP      reduce using rule 74 (unary_expression -> DPLUSOP unary_expression .)
    BANDEQOP        reduce using rule 74 (unary_expression -> DPLUSOP unary_expression .)
    BOREQOP         reduce using rule 74 (unary_expression -> DPLUSOP unary_expression .)
    DOTSTAR         reduce using rule 74 (unary_expression -> DPLUSOP unary_expression .)
    ARROWSTAR       reduce using rule 74 (unary_expression -> DPLUSOP unary_expression .)
    MULTOP          reduce using rule 74 (unary_expression -> DPLUSOP unary_expression .)
    DIVOP           reduce using rule 74 (unary_expression -> DPLUSOP unary_expression .)
    MODOP           reduce using rule 74 (unary_expression -> DPLUSOP unary_expression .)
    PLUSOP          reduce using rule 74 (unary_expression -> DPLUSOP unary_expression .)
    MINUSOP         reduce using rule 74 (unary_expression -> DPLUSOP unary_expression .)
    LSHIFT          reduce using rule 74 (unary_expression -> DPLUSOP unary_expression .)
    RSHIFT          reduce using rule 74 (unary_expression -> DPLUSOP unary_expression .)
    LTCOMP          reduce using rule 74 (unary_expression -> DPLUSOP unary_expression .)
    GTCOMP          reduce using rule 74 (unary_expression -> DPLUSOP unary_expression .)
    LTECOMP         reduce using rule 74 (unary_expression -> DPLUSOP unary_expression .)
    GTECOMP         reduce using rule 74 (unary_expression -> DPLUSOP unary_expression .)
    EQCOMP          reduce using rule 74 (unary_expression -> DPLUSOP unary_expression .)
    NEQCOMP         reduce using rule 74 (unary_expression -> DPLUSOP unary_expression .)
    BANDOP          reduce using rule 74 (unary_expression -> DPLUSOP unary_expression .)
    XOROP           reduce using rule 74 (unary_expression -> DPLUSOP unary_expression .)
    OROP            reduce using rule 74 (unary_expression -> DPLUSOP unary_expression .)
    ANDOP           reduce using rule 74 (unary_expression -> DPLUSOP unary_expression .)
    QUESMARK        reduce using rule 74 (unary_expression -> DPLUSOP unary_expression .)
    RPAREN          reduce using rule 74 (unary_expression -> DPLUSOP unary_expression .)
    COMMA           reduce using rule 74 (unary_expression -> DPLUSOP unary_expression .)
    RSPAREN         reduce using rule 74 (unary_expression -> DPLUSOP unary_expression .)
    SEMICOLON       reduce using rule 74 (unary_expression -> DPLUSOP unary_expression .)
    RCPAREN         reduce using rule 74 (unary_expression -> DPLUSOP unary_expression .)
    COLON           reduce using rule 74 (unary_expression -> DPLUSOP unary_expression .)
    RTEMPLATE       reduce using rule 74 (unary_expression -> DPLUSOP unary_expression .)


state 283

    (119) primary_expression -> LPAREN . expression RPAREN
    (59) expression -> . assignment_expression
    (60) expression -> . expression COMMA assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (26) conditional_expression -> . logical_OR_expression
    (27) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (28) logical_OR_expression -> . logical_AND_expression
    (29) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (30) logical_AND_expression -> . inclusive_OR_expression
    (31) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (32) inclusive_OR_expression -> . exclusive_OR_expression
    (33) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (264) operator_function_name -> . OPERATOR operator_name
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    LPAREN          shift and go to state 128
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    expression                     shift and go to state 247
    assignment_expression          shift and go to state 208
    conditional_expression         shift and go to state 135
    unary_expression               shift and go to state 136
    logical_OR_expression          shift and go to state 138
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    cast_expression                shift and go to state 143
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    logical_AND_expression         shift and go to state 148
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    name                           shift and go to state 151
    inclusive_OR_expression        shift and go to state 158
    literal                        shift and go to state 159
    exclusive_OR_expression        shift and go to state 161
    operator_function_name         shift and go to state 32
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171

state 284

    (75) unary_expression -> DMINUSOP unary_expression .

    EQUAL           reduce using rule 75 (unary_expression -> DMINUSOP unary_expression .)
    MULTEQOP        reduce using rule 75 (unary_expression -> DMINUSOP unary_expression .)
    DIVEQOP         reduce using rule 75 (unary_expression -> DMINUSOP unary_expression .)
    MODEQOP         reduce using rule 75 (unary_expression -> DMINUSOP unary_expression .)
    PLUSEQOP        reduce using rule 75 (unary_expression -> DMINUSOP unary_expression .)
    MINUSEQOP       reduce using rule 75 (unary_expression -> DMINUSOP unary_expression .)
    LSHIFTEQOP      reduce using rule 75 (unary_expression -> DMINUSOP unary_expression .)
    RSHIFTEQOP      reduce using rule 75 (unary_expression -> DMINUSOP unary_expression .)
    BANDEQOP        reduce using rule 75 (unary_expression -> DMINUSOP unary_expression .)
    BOREQOP         reduce using rule 75 (unary_expression -> DMINUSOP unary_expression .)
    DOTSTAR         reduce using rule 75 (unary_expression -> DMINUSOP unary_expression .)
    ARROWSTAR       reduce using rule 75 (unary_expression -> DMINUSOP unary_expression .)
    MULTOP          reduce using rule 75 (unary_expression -> DMINUSOP unary_expression .)
    DIVOP           reduce using rule 75 (unary_expression -> DMINUSOP unary_expression .)
    MODOP           reduce using rule 75 (unary_expression -> DMINUSOP unary_expression .)
    PLUSOP          reduce using rule 75 (unary_expression -> DMINUSOP unary_expression .)
    MINUSOP         reduce using rule 75 (unary_expression -> DMINUSOP unary_expression .)
    LSHIFT          reduce using rule 75 (unary_expression -> DMINUSOP unary_expression .)
    RSHIFT          reduce using rule 75 (unary_expression -> DMINUSOP unary_expression .)
    LTCOMP          reduce using rule 75 (unary_expression -> DMINUSOP unary_expression .)
    GTCOMP          reduce using rule 75 (unary_expression -> DMINUSOP unary_expression .)
    LTECOMP         reduce using rule 75 (unary_expression -> DMINUSOP unary_expression .)
    GTECOMP         reduce using rule 75 (unary_expression -> DMINUSOP unary_expression .)
    EQCOMP          reduce using rule 75 (unary_expression -> DMINUSOP unary_expression .)
    NEQCOMP         reduce using rule 75 (unary_expression -> DMINUSOP unary_expression .)
    BANDOP          reduce using rule 75 (unary_expression -> DMINUSOP unary_expression .)
    XOROP           reduce using rule 75 (unary_expression -> DMINUSOP unary_expression .)
    OROP            reduce using rule 75 (unary_expression -> DMINUSOP unary_expression .)
    ANDOP           reduce using rule 75 (unary_expression -> DMINUSOP unary_expression .)
    QUESMARK        reduce using rule 75 (unary_expression -> DMINUSOP unary_expression .)
    RPAREN          reduce using rule 75 (unary_expression -> DMINUSOP unary_expression .)
    COMMA           reduce using rule 75 (unary_expression -> DMINUSOP unary_expression .)
    RSPAREN         reduce using rule 75 (unary_expression -> DMINUSOP unary_expression .)
    SEMICOLON       reduce using rule 75 (unary_expression -> DMINUSOP unary_expression .)
    RCPAREN         reduce using rule 75 (unary_expression -> DMINUSOP unary_expression .)
    COLON           reduce using rule 75 (unary_expression -> DMINUSOP unary_expression .)
    RTEMPLATE       reduce using rule 75 (unary_expression -> DMINUSOP unary_expression .)


state 285

    (76) unary_expression -> unary1_operator cast_expression .

    EQUAL           reduce using rule 76 (unary_expression -> unary1_operator cast_expression .)
    MULTEQOP        reduce using rule 76 (unary_expression -> unary1_operator cast_expression .)
    DIVEQOP         reduce using rule 76 (unary_expression -> unary1_operator cast_expression .)
    MODEQOP         reduce using rule 76 (unary_expression -> unary1_operator cast_expression .)
    PLUSEQOP        reduce using rule 76 (unary_expression -> unary1_operator cast_expression .)
    MINUSEQOP       reduce using rule 76 (unary_expression -> unary1_operator cast_expression .)
    LSHIFTEQOP      reduce using rule 76 (unary_expression -> unary1_operator cast_expression .)
    RSHIFTEQOP      reduce using rule 76 (unary_expression -> unary1_operator cast_expression .)
    BANDEQOP        reduce using rule 76 (unary_expression -> unary1_operator cast_expression .)
    BOREQOP         reduce using rule 76 (unary_expression -> unary1_operator cast_expression .)
    DOTSTAR         reduce using rule 76 (unary_expression -> unary1_operator cast_expression .)
    ARROWSTAR       reduce using rule 76 (unary_expression -> unary1_operator cast_expression .)
    MULTOP          reduce using rule 76 (unary_expression -> unary1_operator cast_expression .)
    DIVOP           reduce using rule 76 (unary_expression -> unary1_operator cast_expression .)
    MODOP           reduce using rule 76 (unary_expression -> unary1_operator cast_expression .)
    PLUSOP          reduce using rule 76 (unary_expression -> unary1_operator cast_expression .)
    MINUSOP         reduce using rule 76 (unary_expression -> unary1_operator cast_expression .)
    LSHIFT          reduce using rule 76 (unary_expression -> unary1_operator cast_expression .)
    RSHIFT          reduce using rule 76 (unary_expression -> unary1_operator cast_expression .)
    LTCOMP          reduce using rule 76 (unary_expression -> unary1_operator cast_expression .)
    GTCOMP          reduce using rule 76 (unary_expression -> unary1_operator cast_expression .)
    LTECOMP         reduce using rule 76 (unary_expression -> unary1_operator cast_expression .)
    GTECOMP         reduce using rule 76 (unary_expression -> unary1_operator cast_expression .)
    EQCOMP          reduce using rule 76 (unary_expression -> unary1_operator cast_expression .)
    NEQCOMP         reduce using rule 76 (unary_expression -> unary1_operator cast_expression .)
    BANDOP          reduce using rule 76 (unary_expression -> unary1_operator cast_expression .)
    XOROP           reduce using rule 76 (unary_expression -> unary1_operator cast_expression .)
    OROP            reduce using rule 76 (unary_expression -> unary1_operator cast_expression .)
    ANDOP           reduce using rule 76 (unary_expression -> unary1_operator cast_expression .)
    QUESMARK        reduce using rule 76 (unary_expression -> unary1_operator cast_expression .)
    RPAREN          reduce using rule 76 (unary_expression -> unary1_operator cast_expression .)
    COMMA           reduce using rule 76 (unary_expression -> unary1_operator cast_expression .)
    RSPAREN         reduce using rule 76 (unary_expression -> unary1_operator cast_expression .)
    SEMICOLON       reduce using rule 76 (unary_expression -> unary1_operator cast_expression .)
    RCPAREN         reduce using rule 76 (unary_expression -> unary1_operator cast_expression .)
    COLON           reduce using rule 76 (unary_expression -> unary1_operator cast_expression .)
    RTEMPLATE       reduce using rule 76 (unary_expression -> unary1_operator cast_expression .)


state 286

    (77) unary_expression -> unary2_operator cast_expression .

    EQUAL           reduce using rule 77 (unary_expression -> unary2_operator cast_expression .)
    MULTEQOP        reduce using rule 77 (unary_expression -> unary2_operator cast_expression .)
    DIVEQOP         reduce using rule 77 (unary_expression -> unary2_operator cast_expression .)
    MODEQOP         reduce using rule 77 (unary_expression -> unary2_operator cast_expression .)
    PLUSEQOP        reduce using rule 77 (unary_expression -> unary2_operator cast_expression .)
    MINUSEQOP       reduce using rule 77 (unary_expression -> unary2_operator cast_expression .)
    LSHIFTEQOP      reduce using rule 77 (unary_expression -> unary2_operator cast_expression .)
    RSHIFTEQOP      reduce using rule 77 (unary_expression -> unary2_operator cast_expression .)
    BANDEQOP        reduce using rule 77 (unary_expression -> unary2_operator cast_expression .)
    BOREQOP         reduce using rule 77 (unary_expression -> unary2_operator cast_expression .)
    DOTSTAR         reduce using rule 77 (unary_expression -> unary2_operator cast_expression .)
    ARROWSTAR       reduce using rule 77 (unary_expression -> unary2_operator cast_expression .)
    MULTOP          reduce using rule 77 (unary_expression -> unary2_operator cast_expression .)
    DIVOP           reduce using rule 77 (unary_expression -> unary2_operator cast_expression .)
    MODOP           reduce using rule 77 (unary_expression -> unary2_operator cast_expression .)
    PLUSOP          reduce using rule 77 (unary_expression -> unary2_operator cast_expression .)
    MINUSOP         reduce using rule 77 (unary_expression -> unary2_operator cast_expression .)
    LSHIFT          reduce using rule 77 (unary_expression -> unary2_operator cast_expression .)
    RSHIFT          reduce using rule 77 (unary_expression -> unary2_operator cast_expression .)
    LTCOMP          reduce using rule 77 (unary_expression -> unary2_operator cast_expression .)
    GTCOMP          reduce using rule 77 (unary_expression -> unary2_operator cast_expression .)
    LTECOMP         reduce using rule 77 (unary_expression -> unary2_operator cast_expression .)
    GTECOMP         reduce using rule 77 (unary_expression -> unary2_operator cast_expression .)
    EQCOMP          reduce using rule 77 (unary_expression -> unary2_operator cast_expression .)
    NEQCOMP         reduce using rule 77 (unary_expression -> unary2_operator cast_expression .)
    BANDOP          reduce using rule 77 (unary_expression -> unary2_operator cast_expression .)
    XOROP           reduce using rule 77 (unary_expression -> unary2_operator cast_expression .)
    OROP            reduce using rule 77 (unary_expression -> unary2_operator cast_expression .)
    ANDOP           reduce using rule 77 (unary_expression -> unary2_operator cast_expression .)
    QUESMARK        reduce using rule 77 (unary_expression -> unary2_operator cast_expression .)
    RPAREN          reduce using rule 77 (unary_expression -> unary2_operator cast_expression .)
    COMMA           reduce using rule 77 (unary_expression -> unary2_operator cast_expression .)
    RSPAREN         reduce using rule 77 (unary_expression -> unary2_operator cast_expression .)
    SEMICOLON       reduce using rule 77 (unary_expression -> unary2_operator cast_expression .)
    RCPAREN         reduce using rule 77 (unary_expression -> unary2_operator cast_expression .)
    COLON           reduce using rule 77 (unary_expression -> unary2_operator cast_expression .)
    RTEMPLATE       reduce using rule 77 (unary_expression -> unary2_operator cast_expression .)


state 287

    (78) unary_expression -> SIZEOF unary_expression .

    EQUAL           reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    MULTEQOP        reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    DIVEQOP         reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    MODEQOP         reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    PLUSEQOP        reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    MINUSEQOP       reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    LSHIFTEQOP      reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    RSHIFTEQOP      reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    BANDEQOP        reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    BOREQOP         reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    DOTSTAR         reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    ARROWSTAR       reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    MULTOP          reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    DIVOP           reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    MODOP           reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    PLUSOP          reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    MINUSOP         reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    LSHIFT          reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    RSHIFT          reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    LTCOMP          reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    GTCOMP          reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    LTECOMP         reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    GTECOMP         reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    EQCOMP          reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    NEQCOMP         reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    BANDOP          reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    XOROP           reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    OROP            reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    ANDOP           reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    QUESMARK        reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    RPAREN          reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    COMMA           reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    RSPAREN         reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    SEMICOLON       reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    RCPAREN         reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    COLON           reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    RTEMPLATE       reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)


state 288

    (79) unary_expression -> SIZEOF LPAREN . type_name RPAREN
    (119) primary_expression -> LPAREN . expression RPAREN
    (126) type_name -> . type_specifier_list abstract_declarator
    (127) type_name -> . type_specifier_list
    (59) expression -> . assignment_expression
    (60) expression -> . expression COMMA assignment_expression
    (262) type_specifier_list -> . type_specifier type_specifier_list
    (263) type_specifier_list -> . type_specifier
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (156) type_specifier -> . simple_type_name
    (157) type_specifier -> . class_specifier
    (158) type_specifier -> . enum_specifier
    (159) type_specifier -> . elaborated_type_specifier
    (160) type_specifier -> . CONST
    (161) type_specifier -> . VOLATILE
    (26) conditional_expression -> . logical_OR_expression
    (27) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (162) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (163) class_specifier -> . class_head LCPAREN RCPAREN
    (17) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (18) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (20) enum_specifier -> . ENUM LCPAREN RCPAREN
    (322) elaborated_type_specifier -> . class_key IDENTIFIER
    (323) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (324) elaborated_type_specifier -> . ENUM enum_name
    (325) elaborated_type_specifier -> . TYPE IDENTIFIER
    (326) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (28) logical_OR_expression -> . logical_AND_expression
    (29) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (304) class_head -> . class_key base_spec
    (305) class_head -> . class_key
    (306) class_head -> . class_key IDENTIFIER base_spec
    (307) class_head -> . class_key IDENTIFIER
    (328) class_key -> . CLASS
    (329) class_key -> . STRUCT
    (330) class_key -> . UNION
    (331) class_key -> . TEMPLATE
    (30) logical_AND_expression -> . inclusive_OR_expression
    (31) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (32) inclusive_OR_expression -> . exclusive_OR_expression
    (33) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (264) operator_function_name -> . OPERATOR operator_name
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression

    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    ENUM            shift and go to state 47
    TYPE            shift and go to state 49
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    CLASS           shift and go to state 51
    STRUCT          shift and go to state 52
    UNION           shift and go to state 53
    TEMPLATE        shift and go to state 59
    THIS            shift and go to state 160
    LPAREN          shift and go to state 128
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    type_name                      shift and go to state 397
    expression                     shift and go to state 247
    type_specifier_list            shift and go to state 249
    assignment_expression          shift and go to state 208
    type_specifier                 shift and go to state 250
    conditional_expression         shift and go to state 135
    unary_expression               shift and go to state 136
    simple_type_name               shift and go to state 251
    class_specifier                shift and go to state 26
    enum_specifier                 shift and go to state 27
    elaborated_type_specifier      shift and go to state 28
    logical_OR_expression          shift and go to state 138
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    cast_expression                shift and go to state 143
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    class_head                     shift and go to state 46
    class_key                      shift and go to state 48
    logical_AND_expression         shift and go to state 148
    primary_expression             shift and go to state 149
    name                           shift and go to state 151
    inclusive_OR_expression        shift and go to state 158
    literal                        shift and go to state 159
    exclusive_OR_expression        shift and go to state 161
    operator_function_name         shift and go to state 32
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171

state 289

    (31) logical_AND_expression -> logical_AND_expression ANDOP . inclusive_OR_expression
    (32) inclusive_OR_expression -> . exclusive_OR_expression
    (33) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (264) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 176
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    inclusive_OR_expression        shift and go to state 398
    exclusive_OR_expression        shift and go to state 161
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171
    cast_expression                shift and go to state 143
    unary_expression               shift and go to state 175
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    name                           shift and go to state 151
    literal                        shift and go to state 159
    operator_function_name         shift and go to state 32

state 290

    (111) postfix_expression -> simple_type_name LPAREN . expression_list RPAREN
    (112) postfix_expression -> simple_type_name LPAREN . RPAREN
    (245) expression_list -> . assignment_expression
    (246) expression_list -> . expression_list COMMA assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (26) conditional_expression -> . logical_OR_expression
    (27) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (28) logical_OR_expression -> . logical_AND_expression
    (29) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (30) logical_AND_expression -> . inclusive_OR_expression
    (31) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (32) inclusive_OR_expression -> . exclusive_OR_expression
    (33) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (264) operator_function_name -> . OPERATOR operator_name
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 400
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    LPAREN          shift and go to state 128
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    simple_type_name               shift and go to state 177
    expression_list                shift and go to state 399
    assignment_expression          shift and go to state 133
    conditional_expression         shift and go to state 135
    unary_expression               shift and go to state 136
    logical_OR_expression          shift and go to state 138
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    cast_expression                shift and go to state 143
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    logical_AND_expression         shift and go to state 148
    primary_expression             shift and go to state 149
    name                           shift and go to state 151
    inclusive_OR_expression        shift and go to state 158
    literal                        shift and go to state 159
    exclusive_OR_expression        shift and go to state 161
    operator_function_name         shift and go to state 32
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171

state 291

    (83) allocation_expression -> NEW placement . new_type_name new_initializer
    (85) allocation_expression -> NEW placement . new_type_name
    (87) allocation_expression -> NEW placement . LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> NEW placement . LPAREN type_name RPAREN
    (91) new_type_name -> . type_specifier_list new_declarator
    (92) new_type_name -> . type_specifier_list
    (262) type_specifier_list -> . type_specifier type_specifier_list
    (263) type_specifier_list -> . type_specifier
    (156) type_specifier -> . simple_type_name
    (157) type_specifier -> . class_specifier
    (158) type_specifier -> . enum_specifier
    (159) type_specifier -> . elaborated_type_specifier
    (160) type_specifier -> . CONST
    (161) type_specifier -> . VOLATILE
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (162) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (163) class_specifier -> . class_head LCPAREN RCPAREN
    (17) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (18) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (20) enum_specifier -> . ENUM LCPAREN RCPAREN
    (322) elaborated_type_specifier -> . class_key IDENTIFIER
    (323) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (324) elaborated_type_specifier -> . ENUM enum_name
    (325) elaborated_type_specifier -> . TYPE IDENTIFIER
    (326) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (304) class_head -> . class_key base_spec
    (305) class_head -> . class_key
    (306) class_head -> . class_key IDENTIFIER base_spec
    (307) class_head -> . class_key IDENTIFIER
    (328) class_key -> . CLASS
    (329) class_key -> . STRUCT
    (330) class_key -> . UNION
    (331) class_key -> . TEMPLATE

    LPAREN          shift and go to state 402
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    ENUM            shift and go to state 47
    TYPE            shift and go to state 49
    CLASS           shift and go to state 51
    STRUCT          shift and go to state 52
    UNION           shift and go to state 53
    TEMPLATE        shift and go to state 59

    new_type_name                  shift and go to state 401
    type_specifier_list            shift and go to state 294
    type_specifier                 shift and go to state 250
    simple_type_name               shift and go to state 25
    class_specifier                shift and go to state 26
    enum_specifier                 shift and go to state 27
    elaborated_type_specifier      shift and go to state 28
    class_head                     shift and go to state 46
    class_key                      shift and go to state 48

state 292

    (84) allocation_expression -> NEW new_type_name . new_initializer
    (86) allocation_expression -> NEW new_type_name .
    (98) new_initializer -> . LPAREN initializer_list RPAREN
    (99) new_initializer -> . LPAREN RPAREN

    EQUAL           reduce using rule 86 (allocation_expression -> NEW new_type_name .)
    MULTEQOP        reduce using rule 86 (allocation_expression -> NEW new_type_name .)
    DIVEQOP         reduce using rule 86 (allocation_expression -> NEW new_type_name .)
    MODEQOP         reduce using rule 86 (allocation_expression -> NEW new_type_name .)
    PLUSEQOP        reduce using rule 86 (allocation_expression -> NEW new_type_name .)
    MINUSEQOP       reduce using rule 86 (allocation_expression -> NEW new_type_name .)
    LSHIFTEQOP      reduce using rule 86 (allocation_expression -> NEW new_type_name .)
    RSHIFTEQOP      reduce using rule 86 (allocation_expression -> NEW new_type_name .)
    BANDEQOP        reduce using rule 86 (allocation_expression -> NEW new_type_name .)
    BOREQOP         reduce using rule 86 (allocation_expression -> NEW new_type_name .)
    DOTSTAR         reduce using rule 86 (allocation_expression -> NEW new_type_name .)
    ARROWSTAR       reduce using rule 86 (allocation_expression -> NEW new_type_name .)
    MULTOP          reduce using rule 86 (allocation_expression -> NEW new_type_name .)
    DIVOP           reduce using rule 86 (allocation_expression -> NEW new_type_name .)
    MODOP           reduce using rule 86 (allocation_expression -> NEW new_type_name .)
    PLUSOP          reduce using rule 86 (allocation_expression -> NEW new_type_name .)
    MINUSOP         reduce using rule 86 (allocation_expression -> NEW new_type_name .)
    LSHIFT          reduce using rule 86 (allocation_expression -> NEW new_type_name .)
    RSHIFT          reduce using rule 86 (allocation_expression -> NEW new_type_name .)
    LTCOMP          reduce using rule 86 (allocation_expression -> NEW new_type_name .)
    GTCOMP          reduce using rule 86 (allocation_expression -> NEW new_type_name .)
    LTECOMP         reduce using rule 86 (allocation_expression -> NEW new_type_name .)
    GTECOMP         reduce using rule 86 (allocation_expression -> NEW new_type_name .)
    EQCOMP          reduce using rule 86 (allocation_expression -> NEW new_type_name .)
    NEQCOMP         reduce using rule 86 (allocation_expression -> NEW new_type_name .)
    BANDOP          reduce using rule 86 (allocation_expression -> NEW new_type_name .)
    XOROP           reduce using rule 86 (allocation_expression -> NEW new_type_name .)
    OROP            reduce using rule 86 (allocation_expression -> NEW new_type_name .)
    ANDOP           reduce using rule 86 (allocation_expression -> NEW new_type_name .)
    QUESMARK        reduce using rule 86 (allocation_expression -> NEW new_type_name .)
    RPAREN          reduce using rule 86 (allocation_expression -> NEW new_type_name .)
    COMMA           reduce using rule 86 (allocation_expression -> NEW new_type_name .)
    RSPAREN         reduce using rule 86 (allocation_expression -> NEW new_type_name .)
    SEMICOLON       reduce using rule 86 (allocation_expression -> NEW new_type_name .)
    RCPAREN         reduce using rule 86 (allocation_expression -> NEW new_type_name .)
    COLON           reduce using rule 86 (allocation_expression -> NEW new_type_name .)
    RTEMPLATE       reduce using rule 86 (allocation_expression -> NEW new_type_name .)
    LPAREN          shift and go to state 404

    new_initializer                shift and go to state 403

state 293

    (88) allocation_expression -> NEW LPAREN . type_name RPAREN new_initializer
    (90) allocation_expression -> NEW LPAREN . type_name RPAREN
    (97) placement -> LPAREN . expression_list RPAREN
    (126) type_name -> . type_specifier_list abstract_declarator
    (127) type_name -> . type_specifier_list
    (245) expression_list -> . assignment_expression
    (246) expression_list -> . expression_list COMMA assignment_expression
    (262) type_specifier_list -> . type_specifier type_specifier_list
    (263) type_specifier_list -> . type_specifier
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (156) type_specifier -> . simple_type_name
    (157) type_specifier -> . class_specifier
    (158) type_specifier -> . enum_specifier
    (159) type_specifier -> . elaborated_type_specifier
    (160) type_specifier -> . CONST
    (161) type_specifier -> . VOLATILE
    (26) conditional_expression -> . logical_OR_expression
    (27) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (162) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (163) class_specifier -> . class_head LCPAREN RCPAREN
    (17) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (18) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (20) enum_specifier -> . ENUM LCPAREN RCPAREN
    (322) elaborated_type_specifier -> . class_key IDENTIFIER
    (323) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (324) elaborated_type_specifier -> . ENUM enum_name
    (325) elaborated_type_specifier -> . TYPE IDENTIFIER
    (326) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (28) logical_OR_expression -> . logical_AND_expression
    (29) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (304) class_head -> . class_key base_spec
    (305) class_head -> . class_key
    (306) class_head -> . class_key IDENTIFIER base_spec
    (307) class_head -> . class_key IDENTIFIER
    (328) class_key -> . CLASS
    (329) class_key -> . STRUCT
    (330) class_key -> . UNION
    (331) class_key -> . TEMPLATE
    (30) logical_AND_expression -> . inclusive_OR_expression
    (31) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (32) inclusive_OR_expression -> . exclusive_OR_expression
    (33) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (264) operator_function_name -> . OPERATOR operator_name
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression

    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    ENUM            shift and go to state 47
    TYPE            shift and go to state 49
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    CLASS           shift and go to state 51
    STRUCT          shift and go to state 52
    UNION           shift and go to state 53
    TEMPLATE        shift and go to state 59
    THIS            shift and go to state 160
    LPAREN          shift and go to state 128
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    type_name                      shift and go to state 405
    expression_list                shift and go to state 406
    type_specifier_list            shift and go to state 249
    assignment_expression          shift and go to state 133
    type_specifier                 shift and go to state 250
    conditional_expression         shift and go to state 135
    unary_expression               shift and go to state 136
    simple_type_name               shift and go to state 251
    class_specifier                shift and go to state 26
    enum_specifier                 shift and go to state 27
    elaborated_type_specifier      shift and go to state 28
    logical_OR_expression          shift and go to state 138
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    cast_expression                shift and go to state 143
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    class_head                     shift and go to state 46
    class_key                      shift and go to state 48
    logical_AND_expression         shift and go to state 148
    primary_expression             shift and go to state 149
    name                           shift and go to state 151
    inclusive_OR_expression        shift and go to state 158
    literal                        shift and go to state 159
    exclusive_OR_expression        shift and go to state 161
    operator_function_name         shift and go to state 32
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171

state 294

    (91) new_type_name -> type_specifier_list . new_declarator
    (92) new_type_name -> type_specifier_list .
    (93) new_declarator -> . MULTOP new_declarator
    (94) new_declarator -> . MULTOP
    (95) new_declarator -> . new_declarator LSPAREN expression RSPAREN
    (96) new_declarator -> . LSPAREN expression RSPAREN

  ! shift/reduce conflict for MULTOP resolved as shift
    LPAREN          reduce using rule 92 (new_type_name -> type_specifier_list .)
    EQUAL           reduce using rule 92 (new_type_name -> type_specifier_list .)
    MULTEQOP        reduce using rule 92 (new_type_name -> type_specifier_list .)
    DIVEQOP         reduce using rule 92 (new_type_name -> type_specifier_list .)
    MODEQOP         reduce using rule 92 (new_type_name -> type_specifier_list .)
    PLUSEQOP        reduce using rule 92 (new_type_name -> type_specifier_list .)
    MINUSEQOP       reduce using rule 92 (new_type_name -> type_specifier_list .)
    LSHIFTEQOP      reduce using rule 92 (new_type_name -> type_specifier_list .)
    RSHIFTEQOP      reduce using rule 92 (new_type_name -> type_specifier_list .)
    BANDEQOP        reduce using rule 92 (new_type_name -> type_specifier_list .)
    BOREQOP         reduce using rule 92 (new_type_name -> type_specifier_list .)
    DOTSTAR         reduce using rule 92 (new_type_name -> type_specifier_list .)
    ARROWSTAR       reduce using rule 92 (new_type_name -> type_specifier_list .)
    DIVOP           reduce using rule 92 (new_type_name -> type_specifier_list .)
    MODOP           reduce using rule 92 (new_type_name -> type_specifier_list .)
    PLUSOP          reduce using rule 92 (new_type_name -> type_specifier_list .)
    MINUSOP         reduce using rule 92 (new_type_name -> type_specifier_list .)
    LSHIFT          reduce using rule 92 (new_type_name -> type_specifier_list .)
    RSHIFT          reduce using rule 92 (new_type_name -> type_specifier_list .)
    LTCOMP          reduce using rule 92 (new_type_name -> type_specifier_list .)
    GTCOMP          reduce using rule 92 (new_type_name -> type_specifier_list .)
    LTECOMP         reduce using rule 92 (new_type_name -> type_specifier_list .)
    GTECOMP         reduce using rule 92 (new_type_name -> type_specifier_list .)
    EQCOMP          reduce using rule 92 (new_type_name -> type_specifier_list .)
    NEQCOMP         reduce using rule 92 (new_type_name -> type_specifier_list .)
    BANDOP          reduce using rule 92 (new_type_name -> type_specifier_list .)
    XOROP           reduce using rule 92 (new_type_name -> type_specifier_list .)
    OROP            reduce using rule 92 (new_type_name -> type_specifier_list .)
    ANDOP           reduce using rule 92 (new_type_name -> type_specifier_list .)
    QUESMARK        reduce using rule 92 (new_type_name -> type_specifier_list .)
    RPAREN          reduce using rule 92 (new_type_name -> type_specifier_list .)
    COMMA           reduce using rule 92 (new_type_name -> type_specifier_list .)
    RSPAREN         reduce using rule 92 (new_type_name -> type_specifier_list .)
    SEMICOLON       reduce using rule 92 (new_type_name -> type_specifier_list .)
    RCPAREN         reduce using rule 92 (new_type_name -> type_specifier_list .)
    COLON           reduce using rule 92 (new_type_name -> type_specifier_list .)
    RTEMPLATE       reduce using rule 92 (new_type_name -> type_specifier_list .)
    MULTOP          shift and go to state 408
    LSPAREN         shift and go to state 409

  ! MULTOP          [ reduce using rule 92 (new_type_name -> type_specifier_list .) ]

    new_declarator                 shift and go to state 407

state 295

    (82) deallocation_expression -> DELETE cast_expression .

    EQUAL           reduce using rule 82 (deallocation_expression -> DELETE cast_expression .)
    MULTEQOP        reduce using rule 82 (deallocation_expression -> DELETE cast_expression .)
    DIVEQOP         reduce using rule 82 (deallocation_expression -> DELETE cast_expression .)
    MODEQOP         reduce using rule 82 (deallocation_expression -> DELETE cast_expression .)
    PLUSEQOP        reduce using rule 82 (deallocation_expression -> DELETE cast_expression .)
    MINUSEQOP       reduce using rule 82 (deallocation_expression -> DELETE cast_expression .)
    LSHIFTEQOP      reduce using rule 82 (deallocation_expression -> DELETE cast_expression .)
    RSHIFTEQOP      reduce using rule 82 (deallocation_expression -> DELETE cast_expression .)
    BANDEQOP        reduce using rule 82 (deallocation_expression -> DELETE cast_expression .)
    BOREQOP         reduce using rule 82 (deallocation_expression -> DELETE cast_expression .)
    DOTSTAR         reduce using rule 82 (deallocation_expression -> DELETE cast_expression .)
    ARROWSTAR       reduce using rule 82 (deallocation_expression -> DELETE cast_expression .)
    MULTOP          reduce using rule 82 (deallocation_expression -> DELETE cast_expression .)
    DIVOP           reduce using rule 82 (deallocation_expression -> DELETE cast_expression .)
    MODOP           reduce using rule 82 (deallocation_expression -> DELETE cast_expression .)
    PLUSOP          reduce using rule 82 (deallocation_expression -> DELETE cast_expression .)
    MINUSOP         reduce using rule 82 (deallocation_expression -> DELETE cast_expression .)
    LSHIFT          reduce using rule 82 (deallocation_expression -> DELETE cast_expression .)
    RSHIFT          reduce using rule 82 (deallocation_expression -> DELETE cast_expression .)
    LTCOMP          reduce using rule 82 (deallocation_expression -> DELETE cast_expression .)
    GTCOMP          reduce using rule 82 (deallocation_expression -> DELETE cast_expression .)
    LTECOMP         reduce using rule 82 (deallocation_expression -> DELETE cast_expression .)
    GTECOMP         reduce using rule 82 (deallocation_expression -> DELETE cast_expression .)
    EQCOMP          reduce using rule 82 (deallocation_expression -> DELETE cast_expression .)
    NEQCOMP         reduce using rule 82 (deallocation_expression -> DELETE cast_expression .)
    BANDOP          reduce using rule 82 (deallocation_expression -> DELETE cast_expression .)
    XOROP           reduce using rule 82 (deallocation_expression -> DELETE cast_expression .)
    OROP            reduce using rule 82 (deallocation_expression -> DELETE cast_expression .)
    ANDOP           reduce using rule 82 (deallocation_expression -> DELETE cast_expression .)
    QUESMARK        reduce using rule 82 (deallocation_expression -> DELETE cast_expression .)
    RPAREN          reduce using rule 82 (deallocation_expression -> DELETE cast_expression .)
    COMMA           reduce using rule 82 (deallocation_expression -> DELETE cast_expression .)
    RSPAREN         reduce using rule 82 (deallocation_expression -> DELETE cast_expression .)
    SEMICOLON       reduce using rule 82 (deallocation_expression -> DELETE cast_expression .)
    RCPAREN         reduce using rule 82 (deallocation_expression -> DELETE cast_expression .)
    COLON           reduce using rule 82 (deallocation_expression -> DELETE cast_expression .)
    RTEMPLATE       reduce using rule 82 (deallocation_expression -> DELETE cast_expression .)


state 296

    (33) inclusive_OR_expression -> inclusive_OR_expression OROP . exclusive_OR_expression
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (264) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 176
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    exclusive_OR_expression        shift and go to state 410
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171
    cast_expression                shift and go to state 143
    unary_expression               shift and go to state 175
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    name                           shift and go to state 151
    literal                        shift and go to state 159
    operator_function_name         shift and go to state 32

state 297

    (35) exclusive_OR_expression -> exclusive_OR_expression XOROP . AND_expression
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (264) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 176
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    AND_expression                 shift and go to state 411
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171
    cast_expression                shift and go to state 143
    unary_expression               shift and go to state 175
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    name                           shift and go to state 151
    literal                        shift and go to state 159
    operator_function_name         shift and go to state 32

state 298

    (37) AND_expression -> AND_expression BANDOP . equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (264) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 176
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    equality_expression            shift and go to state 412
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171
    cast_expression                shift and go to state 143
    unary_expression               shift and go to state 175
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    name                           shift and go to state 151
    literal                        shift and go to state 159
    operator_function_name         shift and go to state 32

state 299

    (39) equality_expression -> equality_expression EQCOMP . relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (264) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 176
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    relational_expression          shift and go to state 413
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171
    cast_expression                shift and go to state 143
    unary_expression               shift and go to state 175
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    name                           shift and go to state 151
    literal                        shift and go to state 159
    operator_function_name         shift and go to state 32

state 300

    (40) equality_expression -> equality_expression NEQCOMP . relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (264) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 176
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    relational_expression          shift and go to state 414
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171
    cast_expression                shift and go to state 143
    unary_expression               shift and go to state 175
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    name                           shift and go to state 151
    literal                        shift and go to state 159
    operator_function_name         shift and go to state 32

state 301

    (42) relational_expression -> relational_expression LTCOMP . shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (264) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 176
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    shift_expression               shift and go to state 415
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171
    cast_expression                shift and go to state 143
    unary_expression               shift and go to state 175
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    name                           shift and go to state 151
    literal                        shift and go to state 159
    operator_function_name         shift and go to state 32

state 302

    (43) relational_expression -> relational_expression GTCOMP . shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (264) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 176
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    shift_expression               shift and go to state 416
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171
    cast_expression                shift and go to state 143
    unary_expression               shift and go to state 175
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    name                           shift and go to state 151
    literal                        shift and go to state 159
    operator_function_name         shift and go to state 32

state 303

    (44) relational_expression -> relational_expression LTECOMP . shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (264) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 176
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    shift_expression               shift and go to state 417
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171
    cast_expression                shift and go to state 143
    unary_expression               shift and go to state 175
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    name                           shift and go to state 151
    literal                        shift and go to state 159
    operator_function_name         shift and go to state 32

state 304

    (45) relational_expression -> relational_expression GTECOMP . shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (264) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 176
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    shift_expression               shift and go to state 418
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171
    cast_expression                shift and go to state 143
    unary_expression               shift and go to state 175
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    name                           shift and go to state 151
    literal                        shift and go to state 159
    operator_function_name         shift and go to state 32

state 305

    (47) shift_expression -> shift_expression LSHIFT . additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (264) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 176
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    additive_expression            shift and go to state 419
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171
    cast_expression                shift and go to state 143
    unary_expression               shift and go to state 175
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    name                           shift and go to state 151
    literal                        shift and go to state 159
    operator_function_name         shift and go to state 32

state 306

    (48) shift_expression -> shift_expression RSHIFT . additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (264) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 176
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    additive_expression            shift and go to state 420
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171
    cast_expression                shift and go to state 143
    unary_expression               shift and go to state 175
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    name                           shift and go to state 151
    literal                        shift and go to state 159
    operator_function_name         shift and go to state 32

state 307

    (50) additive_expression -> additive_expression PLUSOP . multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (264) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 176
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    multiplicative_expression      shift and go to state 421
    pm_expression                  shift and go to state 171
    cast_expression                shift and go to state 143
    unary_expression               shift and go to state 175
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    name                           shift and go to state 151
    literal                        shift and go to state 159
    operator_function_name         shift and go to state 32

state 308

    (51) additive_expression -> additive_expression MINUSOP . multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (264) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 176
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    multiplicative_expression      shift and go to state 422
    pm_expression                  shift and go to state 171
    cast_expression                shift and go to state 143
    unary_expression               shift and go to state 175
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    name                           shift and go to state 151
    literal                        shift and go to state 159
    operator_function_name         shift and go to state 32

state 309

    (53) multiplicative_expression -> multiplicative_expression MULTOP . pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (264) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 176
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    pm_expression                  shift and go to state 423
    cast_expression                shift and go to state 143
    unary_expression               shift and go to state 175
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    name                           shift and go to state 151
    literal                        shift and go to state 159
    operator_function_name         shift and go to state 32

state 310

    (54) multiplicative_expression -> multiplicative_expression DIVOP . pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (264) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 176
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    pm_expression                  shift and go to state 424
    cast_expression                shift and go to state 143
    unary_expression               shift and go to state 175
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    name                           shift and go to state 151
    literal                        shift and go to state 159
    operator_function_name         shift and go to state 32

state 311

    (55) multiplicative_expression -> multiplicative_expression MODOP . pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (264) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 176
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    pm_expression                  shift and go to state 425
    cast_expression                shift and go to state 143
    unary_expression               shift and go to state 175
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    name                           shift and go to state 151
    literal                        shift and go to state 159
    operator_function_name         shift and go to state 32

state 312

    (57) pm_expression -> pm_expression DOTSTAR . cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (264) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 176
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    cast_expression                shift and go to state 426
    unary_expression               shift and go to state 175
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    name                           shift and go to state 151
    literal                        shift and go to state 159
    operator_function_name         shift and go to state 32

state 313

    (58) pm_expression -> pm_expression ARROWSTAR . cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (264) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 176
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    cast_expression                shift and go to state 427
    unary_expression               shift and go to state 175
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    name                           shift and go to state 151
    literal                        shift and go to state 159
    operator_function_name         shift and go to state 32

state 314

    (256) declarator -> declarator LSPAREN constant_expression RSPAREN .

    LPAREN          reduce using rule 256 (declarator -> declarator LSPAREN constant_expression RSPAREN .)
    LSPAREN         reduce using rule 256 (declarator -> declarator LSPAREN constant_expression RSPAREN .)
    EQUAL           reduce using rule 256 (declarator -> declarator LSPAREN constant_expression RSPAREN .)
    LCPAREN         reduce using rule 256 (declarator -> declarator LSPAREN constant_expression RSPAREN .)
    SEMICOLON       reduce using rule 256 (declarator -> declarator LSPAREN constant_expression RSPAREN .)
    COMMA           reduce using rule 256 (declarator -> declarator LSPAREN constant_expression RSPAREN .)
    RPAREN          reduce using rule 256 (declarator -> declarator LSPAREN constant_expression RSPAREN .)
    RTEMPLATE       reduce using rule 256 (declarator -> declarator LSPAREN constant_expression RSPAREN .)


state 315

    (240) initializer_list -> LCPAREN . initializer_list RCPAREN
    (241) initializer_list -> LCPAREN . initializer_list COMMA RCPAREN
    (238) initializer_list -> . assignment_expression
    (239) initializer_list -> . initializer_list COMMA assignment_expression
    (240) initializer_list -> . LCPAREN initializer_list RCPAREN
    (241) initializer_list -> . LCPAREN initializer_list COMMA RCPAREN
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (26) conditional_expression -> . logical_OR_expression
    (27) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (28) logical_OR_expression -> . logical_AND_expression
    (29) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (30) logical_AND_expression -> . inclusive_OR_expression
    (31) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (32) inclusive_OR_expression -> . exclusive_OR_expression
    (33) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (264) operator_function_name -> . OPERATOR operator_name
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LCPAREN         shift and go to state 315
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    LPAREN          shift and go to state 128
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    initializer_list               shift and go to state 428
    assignment_expression          shift and go to state 317
    conditional_expression         shift and go to state 135
    unary_expression               shift and go to state 136
    logical_OR_expression          shift and go to state 138
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    cast_expression                shift and go to state 143
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    logical_AND_expression         shift and go to state 148
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    name                           shift and go to state 151
    inclusive_OR_expression        shift and go to state 158
    literal                        shift and go to state 159
    exclusive_OR_expression        shift and go to state 161
    operator_function_name         shift and go to state 32
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171

state 316

    (235) initializer -> EQUAL LCPAREN initializer_list . RCPAREN
    (236) initializer -> EQUAL LCPAREN initializer_list . COMMA RCPAREN
    (239) initializer_list -> initializer_list . COMMA assignment_expression

    RCPAREN         shift and go to state 429
    COMMA           shift and go to state 430


state 317

    (238) initializer_list -> assignment_expression .

    RCPAREN         reduce using rule 238 (initializer_list -> assignment_expression .)
    COMMA           reduce using rule 238 (initializer_list -> assignment_expression .)
    RPAREN          reduce using rule 238 (initializer_list -> assignment_expression .)


state 318

    (180) compound_statement -> LCPAREN statement_list RCPAREN .

    ASM             reduce using rule 180 (compound_statement -> LCPAREN statement_list RCPAREN .)
    TEMPLATE        reduce using rule 180 (compound_statement -> LCPAREN statement_list RCPAREN .)
    TYPEDEF         reduce using rule 180 (compound_statement -> LCPAREN statement_list RCPAREN .)
    LPAREN          reduce using rule 180 (compound_statement -> LCPAREN statement_list RCPAREN .)
    AUTO            reduce using rule 180 (compound_statement -> LCPAREN statement_list RCPAREN .)
    STATIC          reduce using rule 180 (compound_statement -> LCPAREN statement_list RCPAREN .)
    EXTERN          reduce using rule 180 (compound_statement -> LCPAREN statement_list RCPAREN .)
    VIRTUAL         reduce using rule 180 (compound_statement -> LCPAREN statement_list RCPAREN .)
    CONST           reduce using rule 180 (compound_statement -> LCPAREN statement_list RCPAREN .)
    VOLATILE        reduce using rule 180 (compound_statement -> LCPAREN statement_list RCPAREN .)
    IDENTIFIER      reduce using rule 180 (compound_statement -> LCPAREN statement_list RCPAREN .)
    BNOP            reduce using rule 180 (compound_statement -> LCPAREN statement_list RCPAREN .)
    MULTOP          reduce using rule 180 (compound_statement -> LCPAREN statement_list RCPAREN .)
    BANDOP          reduce using rule 180 (compound_statement -> LCPAREN statement_list RCPAREN .)
    CHAR            reduce using rule 180 (compound_statement -> LCPAREN statement_list RCPAREN .)
    SHORT           reduce using rule 180 (compound_statement -> LCPAREN statement_list RCPAREN .)
    INT             reduce using rule 180 (compound_statement -> LCPAREN statement_list RCPAREN .)
    LONG            reduce using rule 180 (compound_statement -> LCPAREN statement_list RCPAREN .)
    SIGNED          reduce using rule 180 (compound_statement -> LCPAREN statement_list RCPAREN .)
    UNSIGNED        reduce using rule 180 (compound_statement -> LCPAREN statement_list RCPAREN .)
    FLOAT           reduce using rule 180 (compound_statement -> LCPAREN statement_list RCPAREN .)
    DOUBLE          reduce using rule 180 (compound_statement -> LCPAREN statement_list RCPAREN .)
    VOID            reduce using rule 180 (compound_statement -> LCPAREN statement_list RCPAREN .)
    STRING          reduce using rule 180 (compound_statement -> LCPAREN statement_list RCPAREN .)
    ENUM            reduce using rule 180 (compound_statement -> LCPAREN statement_list RCPAREN .)
    TYPE            reduce using rule 180 (compound_statement -> LCPAREN statement_list RCPAREN .)
    OPERATOR        reduce using rule 180 (compound_statement -> LCPAREN statement_list RCPAREN .)
    CLASS           reduce using rule 180 (compound_statement -> LCPAREN statement_list RCPAREN .)
    STRUCT          reduce using rule 180 (compound_statement -> LCPAREN statement_list RCPAREN .)
    UNION           reduce using rule 180 (compound_statement -> LCPAREN statement_list RCPAREN .)
    $end            reduce using rule 180 (compound_statement -> LCPAREN statement_list RCPAREN .)
    RCPAREN         reduce using rule 180 (compound_statement -> LCPAREN statement_list RCPAREN .)
    CASE            reduce using rule 180 (compound_statement -> LCPAREN statement_list RCPAREN .)
    DEFAULT         reduce using rule 180 (compound_statement -> LCPAREN statement_list RCPAREN .)
    SEMICOLON       reduce using rule 180 (compound_statement -> LCPAREN statement_list RCPAREN .)
    LCPAREN         reduce using rule 180 (compound_statement -> LCPAREN statement_list RCPAREN .)
    IF              reduce using rule 180 (compound_statement -> LCPAREN statement_list RCPAREN .)
    SWITCH          reduce using rule 180 (compound_statement -> LCPAREN statement_list RCPAREN .)
    WHILE           reduce using rule 180 (compound_statement -> LCPAREN statement_list RCPAREN .)
    DO              reduce using rule 180 (compound_statement -> LCPAREN statement_list RCPAREN .)
    FOR             reduce using rule 180 (compound_statement -> LCPAREN statement_list RCPAREN .)
    BREAK           reduce using rule 180 (compound_statement -> LCPAREN statement_list RCPAREN .)
    CONTINUE        reduce using rule 180 (compound_statement -> LCPAREN statement_list RCPAREN .)
    RETURN          reduce using rule 180 (compound_statement -> LCPAREN statement_list RCPAREN .)
    GOTO            reduce using rule 180 (compound_statement -> LCPAREN statement_list RCPAREN .)
    TRY             reduce using rule 180 (compound_statement -> LCPAREN statement_list RCPAREN .)
    DPLUSOP         reduce using rule 180 (compound_statement -> LCPAREN statement_list RCPAREN .)
    DMINUSOP        reduce using rule 180 (compound_statement -> LCPAREN statement_list RCPAREN .)
    SIZEOF          reduce using rule 180 (compound_statement -> LCPAREN statement_list RCPAREN .)
    PLUSOP          reduce using rule 180 (compound_statement -> LCPAREN statement_list RCPAREN .)
    MINUSOP         reduce using rule 180 (compound_statement -> LCPAREN statement_list RCPAREN .)
    NOTSYM          reduce using rule 180 (compound_statement -> LCPAREN statement_list RCPAREN .)
    NEW             reduce using rule 180 (compound_statement -> LCPAREN statement_list RCPAREN .)
    DELETE          reduce using rule 180 (compound_statement -> LCPAREN statement_list RCPAREN .)
    THIS            reduce using rule 180 (compound_statement -> LCPAREN statement_list RCPAREN .)
    NUMBER          reduce using rule 180 (compound_statement -> LCPAREN statement_list RCPAREN .)
    STRING_L        reduce using rule 180 (compound_statement -> LCPAREN statement_list RCPAREN .)
    SCHAR           reduce using rule 180 (compound_statement -> LCPAREN statement_list RCPAREN .)
    ELSE            reduce using rule 180 (compound_statement -> LCPAREN statement_list RCPAREN .)
    CATCH           reduce using rule 180 (compound_statement -> LCPAREN statement_list RCPAREN .)
    COLON           reduce using rule 180 (compound_statement -> LCPAREN statement_list RCPAREN .)
    PRIVATE         reduce using rule 180 (compound_statement -> LCPAREN statement_list RCPAREN .)
    PROTECTED       reduce using rule 180 (compound_statement -> LCPAREN statement_list RCPAREN .)
    PUBLIC          reduce using rule 180 (compound_statement -> LCPAREN statement_list RCPAREN .)


state 319

    (183) statement_list -> statement_list statement .

    RCPAREN         reduce using rule 183 (statement_list -> statement_list statement .)
    IDENTIFIER      reduce using rule 183 (statement_list -> statement_list statement .)
    CASE            reduce using rule 183 (statement_list -> statement_list statement .)
    DEFAULT         reduce using rule 183 (statement_list -> statement_list statement .)
    SEMICOLON       reduce using rule 183 (statement_list -> statement_list statement .)
    LCPAREN         reduce using rule 183 (statement_list -> statement_list statement .)
    IF              reduce using rule 183 (statement_list -> statement_list statement .)
    SWITCH          reduce using rule 183 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 183 (statement_list -> statement_list statement .)
    DO              reduce using rule 183 (statement_list -> statement_list statement .)
    FOR             reduce using rule 183 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 183 (statement_list -> statement_list statement .)
    CONTINUE        reduce using rule 183 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 183 (statement_list -> statement_list statement .)
    GOTO            reduce using rule 183 (statement_list -> statement_list statement .)
    TRY             reduce using rule 183 (statement_list -> statement_list statement .)
    ASM             reduce using rule 183 (statement_list -> statement_list statement .)
    TEMPLATE        reduce using rule 183 (statement_list -> statement_list statement .)
    DPLUSOP         reduce using rule 183 (statement_list -> statement_list statement .)
    DMINUSOP        reduce using rule 183 (statement_list -> statement_list statement .)
    SIZEOF          reduce using rule 183 (statement_list -> statement_list statement .)
    TYPEDEF         reduce using rule 183 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 183 (statement_list -> statement_list statement .)
    PLUSOP          reduce using rule 183 (statement_list -> statement_list statement .)
    MINUSOP         reduce using rule 183 (statement_list -> statement_list statement .)
    NOTSYM          reduce using rule 183 (statement_list -> statement_list statement .)
    BNOP            reduce using rule 183 (statement_list -> statement_list statement .)
    MULTOP          reduce using rule 183 (statement_list -> statement_list statement .)
    BANDOP          reduce using rule 183 (statement_list -> statement_list statement .)
    NEW             reduce using rule 183 (statement_list -> statement_list statement .)
    DELETE          reduce using rule 183 (statement_list -> statement_list statement .)
    AUTO            reduce using rule 183 (statement_list -> statement_list statement .)
    STATIC          reduce using rule 183 (statement_list -> statement_list statement .)
    EXTERN          reduce using rule 183 (statement_list -> statement_list statement .)
    VIRTUAL         reduce using rule 183 (statement_list -> statement_list statement .)
    CONST           reduce using rule 183 (statement_list -> statement_list statement .)
    VOLATILE        reduce using rule 183 (statement_list -> statement_list statement .)
    THIS            reduce using rule 183 (statement_list -> statement_list statement .)
    CHAR            reduce using rule 183 (statement_list -> statement_list statement .)
    SHORT           reduce using rule 183 (statement_list -> statement_list statement .)
    INT             reduce using rule 183 (statement_list -> statement_list statement .)
    LONG            reduce using rule 183 (statement_list -> statement_list statement .)
    SIGNED          reduce using rule 183 (statement_list -> statement_list statement .)
    UNSIGNED        reduce using rule 183 (statement_list -> statement_list statement .)
    FLOAT           reduce using rule 183 (statement_list -> statement_list statement .)
    DOUBLE          reduce using rule 183 (statement_list -> statement_list statement .)
    VOID            reduce using rule 183 (statement_list -> statement_list statement .)
    STRING          reduce using rule 183 (statement_list -> statement_list statement .)
    ENUM            reduce using rule 183 (statement_list -> statement_list statement .)
    TYPE            reduce using rule 183 (statement_list -> statement_list statement .)
    OPERATOR        reduce using rule 183 (statement_list -> statement_list statement .)
    NUMBER          reduce using rule 183 (statement_list -> statement_list statement .)
    STRING_L        reduce using rule 183 (statement_list -> statement_list statement .)
    SCHAR           reduce using rule 183 (statement_list -> statement_list statement .)
    CLASS           reduce using rule 183 (statement_list -> statement_list statement .)
    STRUCT          reduce using rule 183 (statement_list -> statement_list statement .)
    UNION           reduce using rule 183 (statement_list -> statement_list statement .)


state 320

    (207) labeled_statement -> IDENTIFIER COLON . statement
    (184) statement -> . labeled_statement
    (185) statement -> . expression_statement
    (186) statement -> . compound_statement
    (187) statement -> . selection_statement
    (188) statement -> . iteration_statement
    (189) statement -> . jump_statement
    (190) statement -> . declaration_statement
    (191) statement -> . try_block
    (207) labeled_statement -> . IDENTIFIER COLON statement
    (208) labeled_statement -> . CASE constant_expression COLON statement
    (209) labeled_statement -> . DEFAULT COLON statement
    (218) expression_statement -> . expression SEMICOLON
    (219) expression_statement -> . SEMICOLON
    (180) compound_statement -> . LCPAREN statement_list RCPAREN
    (181) compound_statement -> . LCPAREN RCPAREN
    (197) selection_statement -> . IF LPAREN expression RPAREN statement
    (198) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (199) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (210) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (211) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (212) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (213) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (214) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (215) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (192) jump_statement -> . BREAK SEMICOLON
    (193) jump_statement -> . CONTINUE SEMICOLON
    (194) jump_statement -> . RETURN expression SEMICOLON
    (195) jump_statement -> . RETURN SEMICOLON
    (196) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (220) declaration_statement -> . declaration
    (200) try_block -> . TRY compound_statement handler_list
    (59) expression -> . assignment_expression
    (60) expression -> . expression COMMA assignment_expression
    (221) declaration -> . decl_specifiers declarator_list SEMICOLON
    (222) declaration -> . decl_specifiers SEMICOLON
    (223) declaration -> . declarator_list SEMICOLON
    (224) declaration -> . asm_declaration
    (225) declaration -> . function_definition
    (226) declaration -> . template_declaration
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (147) decl_specifiers -> . decl_specifiers decl_specifier
    (148) decl_specifiers -> . decl_specifier
    (230) declarator_list -> . init_declarator
    (231) declarator_list -> . declarator_list COMMA init_declarator
    (242) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (177) function_definition -> . decl_specifiers declarator fct_body
    (178) function_definition -> . declarator fct_body
    (227) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (26) conditional_expression -> . logical_OR_expression
    (27) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (149) decl_specifier -> . storage_class_specifier
    (150) decl_specifier -> . type_specifier
    (151) decl_specifier -> . TYPEDEF
    (232) init_declarator -> . declarator initializer
    (233) init_declarator -> . declarator
    (253) declarator -> . name
    (254) declarator -> . unary2_operator declarator
    (255) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (256) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (257) declarator -> . declarator LSPAREN RSPAREN
    (258) declarator -> . LPAREN declarator RPAREN
    (28) logical_OR_expression -> . logical_AND_expression
    (29) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (152) storage_class_specifier -> . AUTO
    (153) storage_class_specifier -> . STATIC
    (154) storage_class_specifier -> . EXTERN
    (155) storage_class_specifier -> . VIRTUAL
    (156) type_specifier -> . simple_type_name
    (157) type_specifier -> . class_specifier
    (158) type_specifier -> . enum_specifier
    (159) type_specifier -> . elaborated_type_specifier
    (160) type_specifier -> . CONST
    (161) type_specifier -> . VOLATILE
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (30) logical_AND_expression -> . inclusive_OR_expression
    (31) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (162) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (163) class_specifier -> . class_head LCPAREN RCPAREN
    (17) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (18) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (20) enum_specifier -> . ENUM LCPAREN RCPAREN
    (322) elaborated_type_specifier -> . class_key IDENTIFIER
    (323) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (324) elaborated_type_specifier -> . ENUM enum_name
    (325) elaborated_type_specifier -> . TYPE IDENTIFIER
    (326) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (264) operator_function_name -> . OPERATOR operator_name
    (32) inclusive_OR_expression -> . exclusive_OR_expression
    (33) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (304) class_head -> . class_key base_spec
    (305) class_head -> . class_key
    (306) class_head -> . class_key IDENTIFIER base_spec
    (307) class_head -> . class_key IDENTIFIER
    (328) class_key -> . CLASS
    (329) class_key -> . STRUCT
    (330) class_key -> . UNION
    (331) class_key -> . TEMPLATE
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 191
    CASE            shift and go to state 192
    DEFAULT         shift and go to state 193
    SEMICOLON       shift and go to state 195
    LCPAREN         shift and go to state 70
    IF              shift and go to state 196
    SWITCH          shift and go to state 198
    WHILE           shift and go to state 199
    DO              shift and go to state 200
    FOR             shift and go to state 201
    BREAK           shift and go to state 202
    CONTINUE        shift and go to state 203
    RETURN          shift and go to state 204
    GOTO            shift and go to state 205
    TRY             shift and go to state 207
    ASM             shift and go to state 12
    TEMPLATE        shift and go to state 15
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    TYPEDEF         shift and go to state 18
    LPAREN          shift and go to state 197
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    AUTO            shift and go to state 21
    STATIC          shift and go to state 22
    EXTERN          shift and go to state 23
    VIRTUAL         shift and go to state 24
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    THIS            shift and go to state 160
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    ENUM            shift and go to state 47
    TYPE            shift and go to state 49
    OPERATOR        shift and go to state 50
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    CLASS           shift and go to state 51
    STRUCT          shift and go to state 52
    UNION           shift and go to state 53

    statement                      shift and go to state 431
    labeled_statement              shift and go to state 183
    expression_statement           shift and go to state 184
    compound_statement             shift and go to state 185
    selection_statement            shift and go to state 186
    iteration_statement            shift and go to state 187
    jump_statement                 shift and go to state 188
    declaration_statement          shift and go to state 189
    try_block                      shift and go to state 190
    expression                     shift and go to state 194
    declaration                    shift and go to state 206
    assignment_expression          shift and go to state 208
    decl_specifiers                shift and go to state 5
    declarator_list                shift and go to state 6
    asm_declaration                shift and go to state 7
    function_definition            shift and go to state 8
    template_declaration           shift and go to state 9
    conditional_expression         shift and go to state 135
    unary_expression               shift and go to state 136
    decl_specifier                 shift and go to state 10
    init_declarator                shift and go to state 11
    declarator                     shift and go to state 14
    logical_OR_expression          shift and go to state 138
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    cast_expression                shift and go to state 143
    unary2_operator                shift and go to state 209
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    storage_class_specifier        shift and go to state 16
    type_specifier                 shift and go to state 17
    name                           shift and go to state 210
    logical_AND_expression         shift and go to state 148
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 150
    class_specifier                shift and go to state 26
    enum_specifier                 shift and go to state 27
    elaborated_type_specifier      shift and go to state 28
    operator_function_name         shift and go to state 32
    inclusive_OR_expression        shift and go to state 158
    literal                        shift and go to state 159
    class_head                     shift and go to state 46
    class_key                      shift and go to state 48
    exclusive_OR_expression        shift and go to state 161
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171

state 321

    (208) labeled_statement -> CASE constant_expression . COLON statement

    COLON           shift and go to state 432


state 322

    (209) labeled_statement -> DEFAULT COLON . statement
    (184) statement -> . labeled_statement
    (185) statement -> . expression_statement
    (186) statement -> . compound_statement
    (187) statement -> . selection_statement
    (188) statement -> . iteration_statement
    (189) statement -> . jump_statement
    (190) statement -> . declaration_statement
    (191) statement -> . try_block
    (207) labeled_statement -> . IDENTIFIER COLON statement
    (208) labeled_statement -> . CASE constant_expression COLON statement
    (209) labeled_statement -> . DEFAULT COLON statement
    (218) expression_statement -> . expression SEMICOLON
    (219) expression_statement -> . SEMICOLON
    (180) compound_statement -> . LCPAREN statement_list RCPAREN
    (181) compound_statement -> . LCPAREN RCPAREN
    (197) selection_statement -> . IF LPAREN expression RPAREN statement
    (198) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (199) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (210) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (211) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (212) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (213) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (214) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (215) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (192) jump_statement -> . BREAK SEMICOLON
    (193) jump_statement -> . CONTINUE SEMICOLON
    (194) jump_statement -> . RETURN expression SEMICOLON
    (195) jump_statement -> . RETURN SEMICOLON
    (196) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (220) declaration_statement -> . declaration
    (200) try_block -> . TRY compound_statement handler_list
    (59) expression -> . assignment_expression
    (60) expression -> . expression COMMA assignment_expression
    (221) declaration -> . decl_specifiers declarator_list SEMICOLON
    (222) declaration -> . decl_specifiers SEMICOLON
    (223) declaration -> . declarator_list SEMICOLON
    (224) declaration -> . asm_declaration
    (225) declaration -> . function_definition
    (226) declaration -> . template_declaration
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (147) decl_specifiers -> . decl_specifiers decl_specifier
    (148) decl_specifiers -> . decl_specifier
    (230) declarator_list -> . init_declarator
    (231) declarator_list -> . declarator_list COMMA init_declarator
    (242) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (177) function_definition -> . decl_specifiers declarator fct_body
    (178) function_definition -> . declarator fct_body
    (227) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (26) conditional_expression -> . logical_OR_expression
    (27) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (149) decl_specifier -> . storage_class_specifier
    (150) decl_specifier -> . type_specifier
    (151) decl_specifier -> . TYPEDEF
    (232) init_declarator -> . declarator initializer
    (233) init_declarator -> . declarator
    (253) declarator -> . name
    (254) declarator -> . unary2_operator declarator
    (255) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (256) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (257) declarator -> . declarator LSPAREN RSPAREN
    (258) declarator -> . LPAREN declarator RPAREN
    (28) logical_OR_expression -> . logical_AND_expression
    (29) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (152) storage_class_specifier -> . AUTO
    (153) storage_class_specifier -> . STATIC
    (154) storage_class_specifier -> . EXTERN
    (155) storage_class_specifier -> . VIRTUAL
    (156) type_specifier -> . simple_type_name
    (157) type_specifier -> . class_specifier
    (158) type_specifier -> . enum_specifier
    (159) type_specifier -> . elaborated_type_specifier
    (160) type_specifier -> . CONST
    (161) type_specifier -> . VOLATILE
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (30) logical_AND_expression -> . inclusive_OR_expression
    (31) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (162) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (163) class_specifier -> . class_head LCPAREN RCPAREN
    (17) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (18) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (20) enum_specifier -> . ENUM LCPAREN RCPAREN
    (322) elaborated_type_specifier -> . class_key IDENTIFIER
    (323) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (324) elaborated_type_specifier -> . ENUM enum_name
    (325) elaborated_type_specifier -> . TYPE IDENTIFIER
    (326) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (264) operator_function_name -> . OPERATOR operator_name
    (32) inclusive_OR_expression -> . exclusive_OR_expression
    (33) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (304) class_head -> . class_key base_spec
    (305) class_head -> . class_key
    (306) class_head -> . class_key IDENTIFIER base_spec
    (307) class_head -> . class_key IDENTIFIER
    (328) class_key -> . CLASS
    (329) class_key -> . STRUCT
    (330) class_key -> . UNION
    (331) class_key -> . TEMPLATE
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 191
    CASE            shift and go to state 192
    DEFAULT         shift and go to state 193
    SEMICOLON       shift and go to state 195
    LCPAREN         shift and go to state 70
    IF              shift and go to state 196
    SWITCH          shift and go to state 198
    WHILE           shift and go to state 199
    DO              shift and go to state 200
    FOR             shift and go to state 201
    BREAK           shift and go to state 202
    CONTINUE        shift and go to state 203
    RETURN          shift and go to state 204
    GOTO            shift and go to state 205
    TRY             shift and go to state 207
    ASM             shift and go to state 12
    TEMPLATE        shift and go to state 15
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    TYPEDEF         shift and go to state 18
    LPAREN          shift and go to state 197
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    AUTO            shift and go to state 21
    STATIC          shift and go to state 22
    EXTERN          shift and go to state 23
    VIRTUAL         shift and go to state 24
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    THIS            shift and go to state 160
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    ENUM            shift and go to state 47
    TYPE            shift and go to state 49
    OPERATOR        shift and go to state 50
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    CLASS           shift and go to state 51
    STRUCT          shift and go to state 52
    UNION           shift and go to state 53

    statement                      shift and go to state 433
    labeled_statement              shift and go to state 183
    expression_statement           shift and go to state 184
    compound_statement             shift and go to state 185
    selection_statement            shift and go to state 186
    iteration_statement            shift and go to state 187
    jump_statement                 shift and go to state 188
    declaration_statement          shift and go to state 189
    try_block                      shift and go to state 190
    expression                     shift and go to state 194
    declaration                    shift and go to state 206
    assignment_expression          shift and go to state 208
    decl_specifiers                shift and go to state 5
    declarator_list                shift and go to state 6
    asm_declaration                shift and go to state 7
    function_definition            shift and go to state 8
    template_declaration           shift and go to state 9
    conditional_expression         shift and go to state 135
    unary_expression               shift and go to state 136
    decl_specifier                 shift and go to state 10
    init_declarator                shift and go to state 11
    declarator                     shift and go to state 14
    logical_OR_expression          shift and go to state 138
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    cast_expression                shift and go to state 143
    unary2_operator                shift and go to state 209
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    storage_class_specifier        shift and go to state 16
    type_specifier                 shift and go to state 17
    name                           shift and go to state 210
    logical_AND_expression         shift and go to state 148
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 150
    class_specifier                shift and go to state 26
    enum_specifier                 shift and go to state 27
    elaborated_type_specifier      shift and go to state 28
    operator_function_name         shift and go to state 32
    inclusive_OR_expression        shift and go to state 158
    literal                        shift and go to state 159
    class_head                     shift and go to state 46
    class_key                      shift and go to state 48
    exclusive_OR_expression        shift and go to state 161
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171

state 323

    (218) expression_statement -> expression SEMICOLON .

    RCPAREN         reduce using rule 218 (expression_statement -> expression SEMICOLON .)
    IDENTIFIER      reduce using rule 218 (expression_statement -> expression SEMICOLON .)
    CASE            reduce using rule 218 (expression_statement -> expression SEMICOLON .)
    DEFAULT         reduce using rule 218 (expression_statement -> expression SEMICOLON .)
    SEMICOLON       reduce using rule 218 (expression_statement -> expression SEMICOLON .)
    LCPAREN         reduce using rule 218 (expression_statement -> expression SEMICOLON .)
    IF              reduce using rule 218 (expression_statement -> expression SEMICOLON .)
    SWITCH          reduce using rule 218 (expression_statement -> expression SEMICOLON .)
    WHILE           reduce using rule 218 (expression_statement -> expression SEMICOLON .)
    DO              reduce using rule 218 (expression_statement -> expression SEMICOLON .)
    FOR             reduce using rule 218 (expression_statement -> expression SEMICOLON .)
    BREAK           reduce using rule 218 (expression_statement -> expression SEMICOLON .)
    CONTINUE        reduce using rule 218 (expression_statement -> expression SEMICOLON .)
    RETURN          reduce using rule 218 (expression_statement -> expression SEMICOLON .)
    GOTO            reduce using rule 218 (expression_statement -> expression SEMICOLON .)
    TRY             reduce using rule 218 (expression_statement -> expression SEMICOLON .)
    ASM             reduce using rule 218 (expression_statement -> expression SEMICOLON .)
    TEMPLATE        reduce using rule 218 (expression_statement -> expression SEMICOLON .)
    DPLUSOP         reduce using rule 218 (expression_statement -> expression SEMICOLON .)
    DMINUSOP        reduce using rule 218 (expression_statement -> expression SEMICOLON .)
    SIZEOF          reduce using rule 218 (expression_statement -> expression SEMICOLON .)
    TYPEDEF         reduce using rule 218 (expression_statement -> expression SEMICOLON .)
    LPAREN          reduce using rule 218 (expression_statement -> expression SEMICOLON .)
    PLUSOP          reduce using rule 218 (expression_statement -> expression SEMICOLON .)
    MINUSOP         reduce using rule 218 (expression_statement -> expression SEMICOLON .)
    NOTSYM          reduce using rule 218 (expression_statement -> expression SEMICOLON .)
    BNOP            reduce using rule 218 (expression_statement -> expression SEMICOLON .)
    MULTOP          reduce using rule 218 (expression_statement -> expression SEMICOLON .)
    BANDOP          reduce using rule 218 (expression_statement -> expression SEMICOLON .)
    NEW             reduce using rule 218 (expression_statement -> expression SEMICOLON .)
    DELETE          reduce using rule 218 (expression_statement -> expression SEMICOLON .)
    AUTO            reduce using rule 218 (expression_statement -> expression SEMICOLON .)
    STATIC          reduce using rule 218 (expression_statement -> expression SEMICOLON .)
    EXTERN          reduce using rule 218 (expression_statement -> expression SEMICOLON .)
    VIRTUAL         reduce using rule 218 (expression_statement -> expression SEMICOLON .)
    CONST           reduce using rule 218 (expression_statement -> expression SEMICOLON .)
    VOLATILE        reduce using rule 218 (expression_statement -> expression SEMICOLON .)
    THIS            reduce using rule 218 (expression_statement -> expression SEMICOLON .)
    CHAR            reduce using rule 218 (expression_statement -> expression SEMICOLON .)
    SHORT           reduce using rule 218 (expression_statement -> expression SEMICOLON .)
    INT             reduce using rule 218 (expression_statement -> expression SEMICOLON .)
    LONG            reduce using rule 218 (expression_statement -> expression SEMICOLON .)
    SIGNED          reduce using rule 218 (expression_statement -> expression SEMICOLON .)
    UNSIGNED        reduce using rule 218 (expression_statement -> expression SEMICOLON .)
    FLOAT           reduce using rule 218 (expression_statement -> expression SEMICOLON .)
    DOUBLE          reduce using rule 218 (expression_statement -> expression SEMICOLON .)
    VOID            reduce using rule 218 (expression_statement -> expression SEMICOLON .)
    STRING          reduce using rule 218 (expression_statement -> expression SEMICOLON .)
    ENUM            reduce using rule 218 (expression_statement -> expression SEMICOLON .)
    TYPE            reduce using rule 218 (expression_statement -> expression SEMICOLON .)
    OPERATOR        reduce using rule 218 (expression_statement -> expression SEMICOLON .)
    NUMBER          reduce using rule 218 (expression_statement -> expression SEMICOLON .)
    STRING_L        reduce using rule 218 (expression_statement -> expression SEMICOLON .)
    SCHAR           reduce using rule 218 (expression_statement -> expression SEMICOLON .)
    CLASS           reduce using rule 218 (expression_statement -> expression SEMICOLON .)
    STRUCT          reduce using rule 218 (expression_statement -> expression SEMICOLON .)
    UNION           reduce using rule 218 (expression_statement -> expression SEMICOLON .)
    ELSE            reduce using rule 218 (expression_statement -> expression SEMICOLON .)


state 324

    (60) expression -> expression COMMA . assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (26) conditional_expression -> . logical_OR_expression
    (27) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (28) logical_OR_expression -> . logical_AND_expression
    (29) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (30) logical_AND_expression -> . inclusive_OR_expression
    (31) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (32) inclusive_OR_expression -> . exclusive_OR_expression
    (33) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (264) operator_function_name -> . OPERATOR operator_name
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    LPAREN          shift and go to state 128
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    assignment_expression          shift and go to state 434
    conditional_expression         shift and go to state 135
    unary_expression               shift and go to state 136
    logical_OR_expression          shift and go to state 138
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    cast_expression                shift and go to state 143
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    logical_AND_expression         shift and go to state 148
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    name                           shift and go to state 151
    inclusive_OR_expression        shift and go to state 158
    literal                        shift and go to state 159
    exclusive_OR_expression        shift and go to state 161
    operator_function_name         shift and go to state 32
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171

state 325

    (197) selection_statement -> IF LPAREN . expression RPAREN statement
    (198) selection_statement -> IF LPAREN . expression RPAREN statement ELSE statement
    (59) expression -> . assignment_expression
    (60) expression -> . expression COMMA assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (26) conditional_expression -> . logical_OR_expression
    (27) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (28) logical_OR_expression -> . logical_AND_expression
    (29) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (30) logical_AND_expression -> . inclusive_OR_expression
    (31) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (32) inclusive_OR_expression -> . exclusive_OR_expression
    (33) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (264) operator_function_name -> . OPERATOR operator_name
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    LPAREN          shift and go to state 128
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    expression                     shift and go to state 435
    assignment_expression          shift and go to state 208
    conditional_expression         shift and go to state 135
    unary_expression               shift and go to state 136
    logical_OR_expression          shift and go to state 138
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    cast_expression                shift and go to state 143
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    logical_AND_expression         shift and go to state 148
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    name                           shift and go to state 151
    inclusive_OR_expression        shift and go to state 158
    literal                        shift and go to state 159
    exclusive_OR_expression        shift and go to state 161
    operator_function_name         shift and go to state 32
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171

state 326

    (254) declarator -> unary2_operator . declarator
    (77) unary_expression -> unary2_operator . cast_expression
    (253) declarator -> . name
    (254) declarator -> . unary2_operator declarator
    (255) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (256) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (257) declarator -> . declarator LSPAREN RSPAREN
    (258) declarator -> . LPAREN declarator RPAREN
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (264) operator_function_name -> . OPERATOR operator_name
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR

    LPAREN          shift and go to state 436
    IDENTIFIER      shift and go to state 31
    BNOP            shift and go to state 327
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    OPERATOR        shift and go to state 50
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164

    unary2_operator                shift and go to state 326
    declarator                     shift and go to state 72
    cast_expression                shift and go to state 286
    name                           shift and go to state 210
    unary_expression               shift and go to state 175
    operator_function_name         shift and go to state 32
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    literal                        shift and go to state 159

state 327

    (261) name -> BNOP . IDENTIFIER
    (103) unary1_operator -> BNOP .

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    IDENTIFIER      shift and go to state 73
    LPAREN          reduce using rule 103 (unary1_operator -> BNOP .)
    DPLUSOP         reduce using rule 103 (unary1_operator -> BNOP .)
    DMINUSOP        reduce using rule 103 (unary1_operator -> BNOP .)
    SIZEOF          reduce using rule 103 (unary1_operator -> BNOP .)
    PLUSOP          reduce using rule 103 (unary1_operator -> BNOP .)
    MINUSOP         reduce using rule 103 (unary1_operator -> BNOP .)
    NOTSYM          reduce using rule 103 (unary1_operator -> BNOP .)
    BNOP            reduce using rule 103 (unary1_operator -> BNOP .)
    MULTOP          reduce using rule 103 (unary1_operator -> BNOP .)
    BANDOP          reduce using rule 103 (unary1_operator -> BNOP .)
    NEW             reduce using rule 103 (unary1_operator -> BNOP .)
    DELETE          reduce using rule 103 (unary1_operator -> BNOP .)
    THIS            reduce using rule 103 (unary1_operator -> BNOP .)
    CHAR            reduce using rule 103 (unary1_operator -> BNOP .)
    SHORT           reduce using rule 103 (unary1_operator -> BNOP .)
    INT             reduce using rule 103 (unary1_operator -> BNOP .)
    LONG            reduce using rule 103 (unary1_operator -> BNOP .)
    SIGNED          reduce using rule 103 (unary1_operator -> BNOP .)
    UNSIGNED        reduce using rule 103 (unary1_operator -> BNOP .)
    FLOAT           reduce using rule 103 (unary1_operator -> BNOP .)
    DOUBLE          reduce using rule 103 (unary1_operator -> BNOP .)
    VOID            reduce using rule 103 (unary1_operator -> BNOP .)
    STRING          reduce using rule 103 (unary1_operator -> BNOP .)
    NUMBER          reduce using rule 103 (unary1_operator -> BNOP .)
    STRING_L        reduce using rule 103 (unary1_operator -> BNOP .)
    SCHAR           reduce using rule 103 (unary1_operator -> BNOP .)
    OPERATOR        reduce using rule 103 (unary1_operator -> BNOP .)

  ! IDENTIFIER      [ reduce using rule 103 (unary1_operator -> BNOP .) ]


state 328

    (199) selection_statement -> SWITCH LPAREN . expression RPAREN statement
    (59) expression -> . assignment_expression
    (60) expression -> . expression COMMA assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (26) conditional_expression -> . logical_OR_expression
    (27) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (28) logical_OR_expression -> . logical_AND_expression
    (29) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (30) logical_AND_expression -> . inclusive_OR_expression
    (31) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (32) inclusive_OR_expression -> . exclusive_OR_expression
    (33) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (264) operator_function_name -> . OPERATOR operator_name
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    LPAREN          shift and go to state 128
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    expression                     shift and go to state 437
    assignment_expression          shift and go to state 208
    conditional_expression         shift and go to state 135
    unary_expression               shift and go to state 136
    logical_OR_expression          shift and go to state 138
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    cast_expression                shift and go to state 143
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    logical_AND_expression         shift and go to state 148
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    name                           shift and go to state 151
    inclusive_OR_expression        shift and go to state 158
    literal                        shift and go to state 159
    exclusive_OR_expression        shift and go to state 161
    operator_function_name         shift and go to state 32
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171

state 329

    (210) iteration_statement -> WHILE LPAREN . expression RPAREN statement
    (59) expression -> . assignment_expression
    (60) expression -> . expression COMMA assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (26) conditional_expression -> . logical_OR_expression
    (27) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (28) logical_OR_expression -> . logical_AND_expression
    (29) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (30) logical_AND_expression -> . inclusive_OR_expression
    (31) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (32) inclusive_OR_expression -> . exclusive_OR_expression
    (33) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (264) operator_function_name -> . OPERATOR operator_name
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    LPAREN          shift and go to state 128
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    expression                     shift and go to state 438
    assignment_expression          shift and go to state 208
    conditional_expression         shift and go to state 135
    unary_expression               shift and go to state 136
    logical_OR_expression          shift and go to state 138
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    cast_expression                shift and go to state 143
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    logical_AND_expression         shift and go to state 148
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    name                           shift and go to state 151
    inclusive_OR_expression        shift and go to state 158
    literal                        shift and go to state 159
    exclusive_OR_expression        shift and go to state 161
    operator_function_name         shift and go to state 32
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171

state 330

    (211) iteration_statement -> DO statement . WHILE LPAREN expression RPAREN SEMICOLON

    WHILE           shift and go to state 439


state 331

    (212) iteration_statement -> FOR LPAREN . for_init_statement expression SEMICOLON expression RPAREN statement
    (213) iteration_statement -> FOR LPAREN . for_init_statement SEMICOLON expression RPAREN statement
    (214) iteration_statement -> FOR LPAREN . for_init_statement expression SEMICOLON RPAREN statement
    (215) iteration_statement -> FOR LPAREN . for_init_statement SEMICOLON RPAREN statement
    (216) for_init_statement -> . expression_statement
    (217) for_init_statement -> . declaration_statement
    (218) expression_statement -> . expression SEMICOLON
    (219) expression_statement -> . SEMICOLON
    (220) declaration_statement -> . declaration
    (59) expression -> . assignment_expression
    (60) expression -> . expression COMMA assignment_expression
    (221) declaration -> . decl_specifiers declarator_list SEMICOLON
    (222) declaration -> . decl_specifiers SEMICOLON
    (223) declaration -> . declarator_list SEMICOLON
    (224) declaration -> . asm_declaration
    (225) declaration -> . function_definition
    (226) declaration -> . template_declaration
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (147) decl_specifiers -> . decl_specifiers decl_specifier
    (148) decl_specifiers -> . decl_specifier
    (230) declarator_list -> . init_declarator
    (231) declarator_list -> . declarator_list COMMA init_declarator
    (242) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (177) function_definition -> . decl_specifiers declarator fct_body
    (178) function_definition -> . declarator fct_body
    (227) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (26) conditional_expression -> . logical_OR_expression
    (27) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (149) decl_specifier -> . storage_class_specifier
    (150) decl_specifier -> . type_specifier
    (151) decl_specifier -> . TYPEDEF
    (232) init_declarator -> . declarator initializer
    (233) init_declarator -> . declarator
    (253) declarator -> . name
    (254) declarator -> . unary2_operator declarator
    (255) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (256) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (257) declarator -> . declarator LSPAREN RSPAREN
    (258) declarator -> . LPAREN declarator RPAREN
    (28) logical_OR_expression -> . logical_AND_expression
    (29) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (152) storage_class_specifier -> . AUTO
    (153) storage_class_specifier -> . STATIC
    (154) storage_class_specifier -> . EXTERN
    (155) storage_class_specifier -> . VIRTUAL
    (156) type_specifier -> . simple_type_name
    (157) type_specifier -> . class_specifier
    (158) type_specifier -> . enum_specifier
    (159) type_specifier -> . elaborated_type_specifier
    (160) type_specifier -> . CONST
    (161) type_specifier -> . VOLATILE
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (30) logical_AND_expression -> . inclusive_OR_expression
    (31) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (162) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (163) class_specifier -> . class_head LCPAREN RCPAREN
    (17) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (18) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (20) enum_specifier -> . ENUM LCPAREN RCPAREN
    (322) elaborated_type_specifier -> . class_key IDENTIFIER
    (323) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (324) elaborated_type_specifier -> . ENUM enum_name
    (325) elaborated_type_specifier -> . TYPE IDENTIFIER
    (326) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (264) operator_function_name -> . OPERATOR operator_name
    (32) inclusive_OR_expression -> . exclusive_OR_expression
    (33) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (304) class_head -> . class_key base_spec
    (305) class_head -> . class_key
    (306) class_head -> . class_key IDENTIFIER base_spec
    (307) class_head -> . class_key IDENTIFIER
    (328) class_key -> . CLASS
    (329) class_key -> . STRUCT
    (330) class_key -> . UNION
    (331) class_key -> . TEMPLATE
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMICOLON       shift and go to state 195
    ASM             shift and go to state 12
    TEMPLATE        shift and go to state 15
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    TYPEDEF         shift and go to state 18
    LPAREN          shift and go to state 197
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    AUTO            shift and go to state 21
    STATIC          shift and go to state 22
    EXTERN          shift and go to state 23
    VIRTUAL         shift and go to state 24
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    IDENTIFIER      shift and go to state 31
    THIS            shift and go to state 160
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    ENUM            shift and go to state 47
    TYPE            shift and go to state 49
    OPERATOR        shift and go to state 50
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    CLASS           shift and go to state 51
    STRUCT          shift and go to state 52
    UNION           shift and go to state 53

    for_init_statement             shift and go to state 440
    expression                     shift and go to state 194
    expression_statement           shift and go to state 441
    declaration_statement          shift and go to state 442
    declaration                    shift and go to state 206
    assignment_expression          shift and go to state 208
    decl_specifiers                shift and go to state 5
    declarator_list                shift and go to state 6
    asm_declaration                shift and go to state 7
    function_definition            shift and go to state 8
    template_declaration           shift and go to state 9
    conditional_expression         shift and go to state 135
    unary_expression               shift and go to state 136
    decl_specifier                 shift and go to state 10
    init_declarator                shift and go to state 11
    declarator                     shift and go to state 14
    logical_OR_expression          shift and go to state 138
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    cast_expression                shift and go to state 143
    unary2_operator                shift and go to state 209
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    storage_class_specifier        shift and go to state 16
    type_specifier                 shift and go to state 17
    name                           shift and go to state 210
    logical_AND_expression         shift and go to state 148
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 150
    class_specifier                shift and go to state 26
    enum_specifier                 shift and go to state 27
    elaborated_type_specifier      shift and go to state 28
    operator_function_name         shift and go to state 32
    inclusive_OR_expression        shift and go to state 158
    literal                        shift and go to state 159
    class_head                     shift and go to state 46
    class_key                      shift and go to state 48
    exclusive_OR_expression        shift and go to state 161
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171

state 332

    (192) jump_statement -> BREAK SEMICOLON .

    RCPAREN         reduce using rule 192 (jump_statement -> BREAK SEMICOLON .)
    IDENTIFIER      reduce using rule 192 (jump_statement -> BREAK SEMICOLON .)
    CASE            reduce using rule 192 (jump_statement -> BREAK SEMICOLON .)
    DEFAULT         reduce using rule 192 (jump_statement -> BREAK SEMICOLON .)
    SEMICOLON       reduce using rule 192 (jump_statement -> BREAK SEMICOLON .)
    LCPAREN         reduce using rule 192 (jump_statement -> BREAK SEMICOLON .)
    IF              reduce using rule 192 (jump_statement -> BREAK SEMICOLON .)
    SWITCH          reduce using rule 192 (jump_statement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 192 (jump_statement -> BREAK SEMICOLON .)
    DO              reduce using rule 192 (jump_statement -> BREAK SEMICOLON .)
    FOR             reduce using rule 192 (jump_statement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 192 (jump_statement -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 192 (jump_statement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 192 (jump_statement -> BREAK SEMICOLON .)
    GOTO            reduce using rule 192 (jump_statement -> BREAK SEMICOLON .)
    TRY             reduce using rule 192 (jump_statement -> BREAK SEMICOLON .)
    ASM             reduce using rule 192 (jump_statement -> BREAK SEMICOLON .)
    TEMPLATE        reduce using rule 192 (jump_statement -> BREAK SEMICOLON .)
    DPLUSOP         reduce using rule 192 (jump_statement -> BREAK SEMICOLON .)
    DMINUSOP        reduce using rule 192 (jump_statement -> BREAK SEMICOLON .)
    SIZEOF          reduce using rule 192 (jump_statement -> BREAK SEMICOLON .)
    TYPEDEF         reduce using rule 192 (jump_statement -> BREAK SEMICOLON .)
    LPAREN          reduce using rule 192 (jump_statement -> BREAK SEMICOLON .)
    PLUSOP          reduce using rule 192 (jump_statement -> BREAK SEMICOLON .)
    MINUSOP         reduce using rule 192 (jump_statement -> BREAK SEMICOLON .)
    NOTSYM          reduce using rule 192 (jump_statement -> BREAK SEMICOLON .)
    BNOP            reduce using rule 192 (jump_statement -> BREAK SEMICOLON .)
    MULTOP          reduce using rule 192 (jump_statement -> BREAK SEMICOLON .)
    BANDOP          reduce using rule 192 (jump_statement -> BREAK SEMICOLON .)
    NEW             reduce using rule 192 (jump_statement -> BREAK SEMICOLON .)
    DELETE          reduce using rule 192 (jump_statement -> BREAK SEMICOLON .)
    AUTO            reduce using rule 192 (jump_statement -> BREAK SEMICOLON .)
    STATIC          reduce using rule 192 (jump_statement -> BREAK SEMICOLON .)
    EXTERN          reduce using rule 192 (jump_statement -> BREAK SEMICOLON .)
    VIRTUAL         reduce using rule 192 (jump_statement -> BREAK SEMICOLON .)
    CONST           reduce using rule 192 (jump_statement -> BREAK SEMICOLON .)
    VOLATILE        reduce using rule 192 (jump_statement -> BREAK SEMICOLON .)
    THIS            reduce using rule 192 (jump_statement -> BREAK SEMICOLON .)
    CHAR            reduce using rule 192 (jump_statement -> BREAK SEMICOLON .)
    SHORT           reduce using rule 192 (jump_statement -> BREAK SEMICOLON .)
    INT             reduce using rule 192 (jump_statement -> BREAK SEMICOLON .)
    LONG            reduce using rule 192 (jump_statement -> BREAK SEMICOLON .)
    SIGNED          reduce using rule 192 (jump_statement -> BREAK SEMICOLON .)
    UNSIGNED        reduce using rule 192 (jump_statement -> BREAK SEMICOLON .)
    FLOAT           reduce using rule 192 (jump_statement -> BREAK SEMICOLON .)
    DOUBLE          reduce using rule 192 (jump_statement -> BREAK SEMICOLON .)
    VOID            reduce using rule 192 (jump_statement -> BREAK SEMICOLON .)
    STRING          reduce using rule 192 (jump_statement -> BREAK SEMICOLON .)
    ENUM            reduce using rule 192 (jump_statement -> BREAK SEMICOLON .)
    TYPE            reduce using rule 192 (jump_statement -> BREAK SEMICOLON .)
    OPERATOR        reduce using rule 192 (jump_statement -> BREAK SEMICOLON .)
    NUMBER          reduce using rule 192 (jump_statement -> BREAK SEMICOLON .)
    STRING_L        reduce using rule 192 (jump_statement -> BREAK SEMICOLON .)
    SCHAR           reduce using rule 192 (jump_statement -> BREAK SEMICOLON .)
    CLASS           reduce using rule 192 (jump_statement -> BREAK SEMICOLON .)
    STRUCT          reduce using rule 192 (jump_statement -> BREAK SEMICOLON .)
    UNION           reduce using rule 192 (jump_statement -> BREAK SEMICOLON .)
    ELSE            reduce using rule 192 (jump_statement -> BREAK SEMICOLON .)


state 333

    (193) jump_statement -> CONTINUE SEMICOLON .

    RCPAREN         reduce using rule 193 (jump_statement -> CONTINUE SEMICOLON .)
    IDENTIFIER      reduce using rule 193 (jump_statement -> CONTINUE SEMICOLON .)
    CASE            reduce using rule 193 (jump_statement -> CONTINUE SEMICOLON .)
    DEFAULT         reduce using rule 193 (jump_statement -> CONTINUE SEMICOLON .)
    SEMICOLON       reduce using rule 193 (jump_statement -> CONTINUE SEMICOLON .)
    LCPAREN         reduce using rule 193 (jump_statement -> CONTINUE SEMICOLON .)
    IF              reduce using rule 193 (jump_statement -> CONTINUE SEMICOLON .)
    SWITCH          reduce using rule 193 (jump_statement -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 193 (jump_statement -> CONTINUE SEMICOLON .)
    DO              reduce using rule 193 (jump_statement -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 193 (jump_statement -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 193 (jump_statement -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 193 (jump_statement -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 193 (jump_statement -> CONTINUE SEMICOLON .)
    GOTO            reduce using rule 193 (jump_statement -> CONTINUE SEMICOLON .)
    TRY             reduce using rule 193 (jump_statement -> CONTINUE SEMICOLON .)
    ASM             reduce using rule 193 (jump_statement -> CONTINUE SEMICOLON .)
    TEMPLATE        reduce using rule 193 (jump_statement -> CONTINUE SEMICOLON .)
    DPLUSOP         reduce using rule 193 (jump_statement -> CONTINUE SEMICOLON .)
    DMINUSOP        reduce using rule 193 (jump_statement -> CONTINUE SEMICOLON .)
    SIZEOF          reduce using rule 193 (jump_statement -> CONTINUE SEMICOLON .)
    TYPEDEF         reduce using rule 193 (jump_statement -> CONTINUE SEMICOLON .)
    LPAREN          reduce using rule 193 (jump_statement -> CONTINUE SEMICOLON .)
    PLUSOP          reduce using rule 193 (jump_statement -> CONTINUE SEMICOLON .)
    MINUSOP         reduce using rule 193 (jump_statement -> CONTINUE SEMICOLON .)
    NOTSYM          reduce using rule 193 (jump_statement -> CONTINUE SEMICOLON .)
    BNOP            reduce using rule 193 (jump_statement -> CONTINUE SEMICOLON .)
    MULTOP          reduce using rule 193 (jump_statement -> CONTINUE SEMICOLON .)
    BANDOP          reduce using rule 193 (jump_statement -> CONTINUE SEMICOLON .)
    NEW             reduce using rule 193 (jump_statement -> CONTINUE SEMICOLON .)
    DELETE          reduce using rule 193 (jump_statement -> CONTINUE SEMICOLON .)
    AUTO            reduce using rule 193 (jump_statement -> CONTINUE SEMICOLON .)
    STATIC          reduce using rule 193 (jump_statement -> CONTINUE SEMICOLON .)
    EXTERN          reduce using rule 193 (jump_statement -> CONTINUE SEMICOLON .)
    VIRTUAL         reduce using rule 193 (jump_statement -> CONTINUE SEMICOLON .)
    CONST           reduce using rule 193 (jump_statement -> CONTINUE SEMICOLON .)
    VOLATILE        reduce using rule 193 (jump_statement -> CONTINUE SEMICOLON .)
    THIS            reduce using rule 193 (jump_statement -> CONTINUE SEMICOLON .)
    CHAR            reduce using rule 193 (jump_statement -> CONTINUE SEMICOLON .)
    SHORT           reduce using rule 193 (jump_statement -> CONTINUE SEMICOLON .)
    INT             reduce using rule 193 (jump_statement -> CONTINUE SEMICOLON .)
    LONG            reduce using rule 193 (jump_statement -> CONTINUE SEMICOLON .)
    SIGNED          reduce using rule 193 (jump_statement -> CONTINUE SEMICOLON .)
    UNSIGNED        reduce using rule 193 (jump_statement -> CONTINUE SEMICOLON .)
    FLOAT           reduce using rule 193 (jump_statement -> CONTINUE SEMICOLON .)
    DOUBLE          reduce using rule 193 (jump_statement -> CONTINUE SEMICOLON .)
    VOID            reduce using rule 193 (jump_statement -> CONTINUE SEMICOLON .)
    STRING          reduce using rule 193 (jump_statement -> CONTINUE SEMICOLON .)
    ENUM            reduce using rule 193 (jump_statement -> CONTINUE SEMICOLON .)
    TYPE            reduce using rule 193 (jump_statement -> CONTINUE SEMICOLON .)
    OPERATOR        reduce using rule 193 (jump_statement -> CONTINUE SEMICOLON .)
    NUMBER          reduce using rule 193 (jump_statement -> CONTINUE SEMICOLON .)
    STRING_L        reduce using rule 193 (jump_statement -> CONTINUE SEMICOLON .)
    SCHAR           reduce using rule 193 (jump_statement -> CONTINUE SEMICOLON .)
    CLASS           reduce using rule 193 (jump_statement -> CONTINUE SEMICOLON .)
    STRUCT          reduce using rule 193 (jump_statement -> CONTINUE SEMICOLON .)
    UNION           reduce using rule 193 (jump_statement -> CONTINUE SEMICOLON .)
    ELSE            reduce using rule 193 (jump_statement -> CONTINUE SEMICOLON .)


state 334

    (194) jump_statement -> RETURN expression . SEMICOLON
    (60) expression -> expression . COMMA assignment_expression

    SEMICOLON       shift and go to state 443
    COMMA           shift and go to state 324


state 335

    (195) jump_statement -> RETURN SEMICOLON .

    RCPAREN         reduce using rule 195 (jump_statement -> RETURN SEMICOLON .)
    IDENTIFIER      reduce using rule 195 (jump_statement -> RETURN SEMICOLON .)
    CASE            reduce using rule 195 (jump_statement -> RETURN SEMICOLON .)
    DEFAULT         reduce using rule 195 (jump_statement -> RETURN SEMICOLON .)
    SEMICOLON       reduce using rule 195 (jump_statement -> RETURN SEMICOLON .)
    LCPAREN         reduce using rule 195 (jump_statement -> RETURN SEMICOLON .)
    IF              reduce using rule 195 (jump_statement -> RETURN SEMICOLON .)
    SWITCH          reduce using rule 195 (jump_statement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 195 (jump_statement -> RETURN SEMICOLON .)
    DO              reduce using rule 195 (jump_statement -> RETURN SEMICOLON .)
    FOR             reduce using rule 195 (jump_statement -> RETURN SEMICOLON .)
    BREAK           reduce using rule 195 (jump_statement -> RETURN SEMICOLON .)
    CONTINUE        reduce using rule 195 (jump_statement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 195 (jump_statement -> RETURN SEMICOLON .)
    GOTO            reduce using rule 195 (jump_statement -> RETURN SEMICOLON .)
    TRY             reduce using rule 195 (jump_statement -> RETURN SEMICOLON .)
    ASM             reduce using rule 195 (jump_statement -> RETURN SEMICOLON .)
    TEMPLATE        reduce using rule 195 (jump_statement -> RETURN SEMICOLON .)
    DPLUSOP         reduce using rule 195 (jump_statement -> RETURN SEMICOLON .)
    DMINUSOP        reduce using rule 195 (jump_statement -> RETURN SEMICOLON .)
    SIZEOF          reduce using rule 195 (jump_statement -> RETURN SEMICOLON .)
    TYPEDEF         reduce using rule 195 (jump_statement -> RETURN SEMICOLON .)
    LPAREN          reduce using rule 195 (jump_statement -> RETURN SEMICOLON .)
    PLUSOP          reduce using rule 195 (jump_statement -> RETURN SEMICOLON .)
    MINUSOP         reduce using rule 195 (jump_statement -> RETURN SEMICOLON .)
    NOTSYM          reduce using rule 195 (jump_statement -> RETURN SEMICOLON .)
    BNOP            reduce using rule 195 (jump_statement -> RETURN SEMICOLON .)
    MULTOP          reduce using rule 195 (jump_statement -> RETURN SEMICOLON .)
    BANDOP          reduce using rule 195 (jump_statement -> RETURN SEMICOLON .)
    NEW             reduce using rule 195 (jump_statement -> RETURN SEMICOLON .)
    DELETE          reduce using rule 195 (jump_statement -> RETURN SEMICOLON .)
    AUTO            reduce using rule 195 (jump_statement -> RETURN SEMICOLON .)
    STATIC          reduce using rule 195 (jump_statement -> RETURN SEMICOLON .)
    EXTERN          reduce using rule 195 (jump_statement -> RETURN SEMICOLON .)
    VIRTUAL         reduce using rule 195 (jump_statement -> RETURN SEMICOLON .)
    CONST           reduce using rule 195 (jump_statement -> RETURN SEMICOLON .)
    VOLATILE        reduce using rule 195 (jump_statement -> RETURN SEMICOLON .)
    THIS            reduce using rule 195 (jump_statement -> RETURN SEMICOLON .)
    CHAR            reduce using rule 195 (jump_statement -> RETURN SEMICOLON .)
    SHORT           reduce using rule 195 (jump_statement -> RETURN SEMICOLON .)
    INT             reduce using rule 195 (jump_statement -> RETURN SEMICOLON .)
    LONG            reduce using rule 195 (jump_statement -> RETURN SEMICOLON .)
    SIGNED          reduce using rule 195 (jump_statement -> RETURN SEMICOLON .)
    UNSIGNED        reduce using rule 195 (jump_statement -> RETURN SEMICOLON .)
    FLOAT           reduce using rule 195 (jump_statement -> RETURN SEMICOLON .)
    DOUBLE          reduce using rule 195 (jump_statement -> RETURN SEMICOLON .)
    VOID            reduce using rule 195 (jump_statement -> RETURN SEMICOLON .)
    STRING          reduce using rule 195 (jump_statement -> RETURN SEMICOLON .)
    ENUM            reduce using rule 195 (jump_statement -> RETURN SEMICOLON .)
    TYPE            reduce using rule 195 (jump_statement -> RETURN SEMICOLON .)
    OPERATOR        reduce using rule 195 (jump_statement -> RETURN SEMICOLON .)
    NUMBER          reduce using rule 195 (jump_statement -> RETURN SEMICOLON .)
    STRING_L        reduce using rule 195 (jump_statement -> RETURN SEMICOLON .)
    SCHAR           reduce using rule 195 (jump_statement -> RETURN SEMICOLON .)
    CLASS           reduce using rule 195 (jump_statement -> RETURN SEMICOLON .)
    STRUCT          reduce using rule 195 (jump_statement -> RETURN SEMICOLON .)
    UNION           reduce using rule 195 (jump_statement -> RETURN SEMICOLON .)
    ELSE            reduce using rule 195 (jump_statement -> RETURN SEMICOLON .)


state 336

    (196) jump_statement -> GOTO IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 444


state 337

    (200) try_block -> TRY compound_statement . handler_list
    (201) handler_list -> . handler handler_list
    (202) handler_list -> . handler
    (203) handler -> . CATCH LPAREN exception_declaration RPAREN compound_statement

    CATCH           shift and go to state 447

    handler_list                   shift and go to state 445
    handler                        shift and go to state 446

state 338

    (125) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (258) declarator -> LPAREN . declarator RPAREN
    (119) primary_expression -> LPAREN . expression RPAREN
    (126) type_name -> . type_specifier_list abstract_declarator
    (127) type_name -> . type_specifier_list
    (253) declarator -> . name
    (254) declarator -> . unary2_operator declarator
    (255) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (256) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (257) declarator -> . declarator LSPAREN RSPAREN
    (258) declarator -> . LPAREN declarator RPAREN
    (59) expression -> . assignment_expression
    (60) expression -> . expression COMMA assignment_expression
    (262) type_specifier_list -> . type_specifier type_specifier_list
    (263) type_specifier_list -> . type_specifier
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (156) type_specifier -> . simple_type_name
    (157) type_specifier -> . class_specifier
    (158) type_specifier -> . enum_specifier
    (159) type_specifier -> . elaborated_type_specifier
    (160) type_specifier -> . CONST
    (161) type_specifier -> . VOLATILE
    (264) operator_function_name -> . OPERATOR operator_name
    (26) conditional_expression -> . logical_OR_expression
    (27) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (162) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (163) class_specifier -> . class_head LCPAREN RCPAREN
    (17) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (18) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (20) enum_specifier -> . ENUM LCPAREN RCPAREN
    (322) elaborated_type_specifier -> . class_key IDENTIFIER
    (323) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (324) elaborated_type_specifier -> . ENUM enum_name
    (325) elaborated_type_specifier -> . TYPE IDENTIFIER
    (326) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (28) logical_OR_expression -> . logical_AND_expression
    (29) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (304) class_head -> . class_key base_spec
    (305) class_head -> . class_key
    (306) class_head -> . class_key IDENTIFIER base_spec
    (307) class_head -> . class_key IDENTIFIER
    (328) class_key -> . CLASS
    (329) class_key -> . STRUCT
    (330) class_key -> . UNION
    (331) class_key -> . TEMPLATE
    (30) logical_AND_expression -> . inclusive_OR_expression
    (31) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (32) inclusive_OR_expression -> . exclusive_OR_expression
    (33) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LPAREN          shift and go to state 197
    IDENTIFIER      shift and go to state 31
    BNOP            shift and go to state 327
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    OPERATOR        shift and go to state 50
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    ENUM            shift and go to state 47
    TYPE            shift and go to state 49
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    CLASS           shift and go to state 51
    STRUCT          shift and go to state 52
    UNION           shift and go to state 53
    TEMPLATE        shift and go to state 59
    THIS            shift and go to state 160
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164

    type_name                      shift and go to state 248
    cast_expression                shift and go to state 143
    declarator                     shift and go to state 63
    expression                     shift and go to state 247
    type_specifier_list            shift and go to state 249
    name                           shift and go to state 210
    unary2_operator                shift and go to state 326
    assignment_expression          shift and go to state 208
    type_specifier                 shift and go to state 250
    operator_function_name         shift and go to state 32
    conditional_expression         shift and go to state 135
    unary_expression               shift and go to state 136
    simple_type_name               shift and go to state 251
    class_specifier                shift and go to state 26
    enum_specifier                 shift and go to state 27
    elaborated_type_specifier      shift and go to state 28
    logical_OR_expression          shift and go to state 138
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    class_head                     shift and go to state 46
    class_key                      shift and go to state 48
    logical_AND_expression         shift and go to state 148
    primary_expression             shift and go to state 149
    inclusive_OR_expression        shift and go to state 158
    literal                        shift and go to state 159
    exclusive_OR_expression        shift and go to state 161
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171

state 339

    (227) template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE . declaration
    (221) declaration -> . decl_specifiers declarator_list SEMICOLON
    (222) declaration -> . decl_specifiers SEMICOLON
    (223) declaration -> . declarator_list SEMICOLON
    (224) declaration -> . asm_declaration
    (225) declaration -> . function_definition
    (226) declaration -> . template_declaration
    (147) decl_specifiers -> . decl_specifiers decl_specifier
    (148) decl_specifiers -> . decl_specifier
    (230) declarator_list -> . init_declarator
    (231) declarator_list -> . declarator_list COMMA init_declarator
    (242) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (177) function_definition -> . decl_specifiers declarator fct_body
    (178) function_definition -> . declarator fct_body
    (227) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (149) decl_specifier -> . storage_class_specifier
    (150) decl_specifier -> . type_specifier
    (151) decl_specifier -> . TYPEDEF
    (232) init_declarator -> . declarator initializer
    (233) init_declarator -> . declarator
    (253) declarator -> . name
    (254) declarator -> . unary2_operator declarator
    (255) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (256) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (257) declarator -> . declarator LSPAREN RSPAREN
    (258) declarator -> . LPAREN declarator RPAREN
    (152) storage_class_specifier -> . AUTO
    (153) storage_class_specifier -> . STATIC
    (154) storage_class_specifier -> . EXTERN
    (155) storage_class_specifier -> . VIRTUAL
    (156) type_specifier -> . simple_type_name
    (157) type_specifier -> . class_specifier
    (158) type_specifier -> . enum_specifier
    (159) type_specifier -> . elaborated_type_specifier
    (160) type_specifier -> . CONST
    (161) type_specifier -> . VOLATILE
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (162) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (163) class_specifier -> . class_head LCPAREN RCPAREN
    (17) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (18) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (20) enum_specifier -> . ENUM LCPAREN RCPAREN
    (322) elaborated_type_specifier -> . class_key IDENTIFIER
    (323) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (324) elaborated_type_specifier -> . ENUM enum_name
    (325) elaborated_type_specifier -> . TYPE IDENTIFIER
    (326) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (264) operator_function_name -> . OPERATOR operator_name
    (304) class_head -> . class_key base_spec
    (305) class_head -> . class_key
    (306) class_head -> . class_key IDENTIFIER base_spec
    (307) class_head -> . class_key IDENTIFIER
    (328) class_key -> . CLASS
    (329) class_key -> . STRUCT
    (330) class_key -> . UNION
    (331) class_key -> . TEMPLATE

    ASM             shift and go to state 12
    TEMPLATE        shift and go to state 15
    TYPEDEF         shift and go to state 18
    LPAREN          shift and go to state 13
    AUTO            shift and go to state 21
    STATIC          shift and go to state 22
    EXTERN          shift and go to state 23
    VIRTUAL         shift and go to state 24
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    IDENTIFIER      shift and go to state 31
    BNOP            shift and go to state 33
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    ENUM            shift and go to state 47
    TYPE            shift and go to state 49
    OPERATOR        shift and go to state 50
    CLASS           shift and go to state 51
    STRUCT          shift and go to state 52
    UNION           shift and go to state 53

    declaration                    shift and go to state 448
    decl_specifiers                shift and go to state 5
    declarator_list                shift and go to state 6
    asm_declaration                shift and go to state 7
    function_definition            shift and go to state 8
    template_declaration           shift and go to state 9
    decl_specifier                 shift and go to state 10
    init_declarator                shift and go to state 11
    declarator                     shift and go to state 14
    storage_class_specifier        shift and go to state 16
    type_specifier                 shift and go to state 17
    name                           shift and go to state 19
    unary2_operator                shift and go to state 20
    simple_type_name               shift and go to state 25
    class_specifier                shift and go to state 26
    enum_specifier                 shift and go to state 27
    elaborated_type_specifier      shift and go to state 28
    operator_function_name         shift and go to state 32
    class_head                     shift and go to state 46
    class_key                      shift and go to state 48

state 340

    (229) template_argument_list -> template_argument_list COMMA . argument_declaration
    (141) argument_declaration -> . decl_specifiers declarator
    (142) argument_declaration -> . decl_specifiers declarator EQUAL expression
    (143) argument_declaration -> . decl_specifiers abstract_declarator
    (144) argument_declaration -> . decl_specifiers
    (145) argument_declaration -> . decl_specifiers abstract_declarator EQUAL expression
    (146) argument_declaration -> . decl_specifiers EQUAL expression
    (147) decl_specifiers -> . decl_specifiers decl_specifier
    (148) decl_specifiers -> . decl_specifier
    (149) decl_specifier -> . storage_class_specifier
    (150) decl_specifier -> . type_specifier
    (151) decl_specifier -> . TYPEDEF
    (152) storage_class_specifier -> . AUTO
    (153) storage_class_specifier -> . STATIC
    (154) storage_class_specifier -> . EXTERN
    (155) storage_class_specifier -> . VIRTUAL
    (156) type_specifier -> . simple_type_name
    (157) type_specifier -> . class_specifier
    (158) type_specifier -> . enum_specifier
    (159) type_specifier -> . elaborated_type_specifier
    (160) type_specifier -> . CONST
    (161) type_specifier -> . VOLATILE
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (162) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (163) class_specifier -> . class_head LCPAREN RCPAREN
    (17) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (18) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (20) enum_specifier -> . ENUM LCPAREN RCPAREN
    (322) elaborated_type_specifier -> . class_key IDENTIFIER
    (323) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (324) elaborated_type_specifier -> . ENUM enum_name
    (325) elaborated_type_specifier -> . TYPE IDENTIFIER
    (326) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (304) class_head -> . class_key base_spec
    (305) class_head -> . class_key
    (306) class_head -> . class_key IDENTIFIER base_spec
    (307) class_head -> . class_key IDENTIFIER
    (328) class_key -> . CLASS
    (329) class_key -> . STRUCT
    (330) class_key -> . UNION
    (331) class_key -> . TEMPLATE

    TYPEDEF         shift and go to state 18
    AUTO            shift and go to state 21
    STATIC          shift and go to state 22
    EXTERN          shift and go to state 23
    VIRTUAL         shift and go to state 24
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    ENUM            shift and go to state 47
    TYPE            shift and go to state 49
    CLASS           shift and go to state 51
    STRUCT          shift and go to state 52
    UNION           shift and go to state 53
    TEMPLATE        shift and go to state 59

    argument_declaration           shift and go to state 449
    decl_specifiers                shift and go to state 137
    decl_specifier                 shift and go to state 10
    storage_class_specifier        shift and go to state 16
    type_specifier                 shift and go to state 17
    simple_type_name               shift and go to state 25
    class_specifier                shift and go to state 26
    enum_specifier                 shift and go to state 27
    elaborated_type_specifier      shift and go to state 28
    class_head                     shift and go to state 46
    class_key                      shift and go to state 48

state 341

    (162) class_specifier -> class_head LCPAREN member_list RCPAREN .

    SEMICOLON       reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    TYPEDEF         reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    LPAREN          reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    AUTO            reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    STATIC          reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    EXTERN          reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    VIRTUAL         reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    CONST           reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    VOLATILE        reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    IDENTIFIER      reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    BNOP            reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    MULTOP          reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    BANDOP          reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    CHAR            reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    SHORT           reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    INT             reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    LONG            reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    SIGNED          reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    UNSIGNED        reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    FLOAT           reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    DOUBLE          reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    VOID            reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    STRING          reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    ENUM            reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    TYPE            reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    OPERATOR        reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    CLASS           reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    STRUCT          reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    UNION           reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    TEMPLATE        reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    EQUAL           reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    LSPAREN         reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    COMMA           reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    RPAREN          reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    RTEMPLATE       reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    COLON           reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    MULTEQOP        reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    DIVEQOP         reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    MODEQOP         reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    PLUSEQOP        reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    MINUSEQOP       reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    LSHIFTEQOP      reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    RSHIFTEQOP      reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    BANDEQOP        reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    BOREQOP         reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    DOTSTAR         reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    ARROWSTAR       reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    DIVOP           reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    MODOP           reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    PLUSOP          reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    MINUSOP         reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    LSHIFT          reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    RSHIFT          reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    LTCOMP          reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    GTCOMP          reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    LTECOMP         reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    GTECOMP         reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    EQCOMP          reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    NEQCOMP         reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    XOROP           reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    OROP            reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    ANDOP           reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    QUESMARK        reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    RSPAREN         reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    RCPAREN         reduce using rule 162 (class_specifier -> class_head LCPAREN member_list RCPAREN .)


state 342

    (166) member_list -> member_list access_list .

    RCPAREN         reduce using rule 166 (member_list -> member_list access_list .)
    PRIVATE         reduce using rule 166 (member_list -> member_list access_list .)
    PROTECTED       reduce using rule 166 (member_list -> member_list access_list .)
    PUBLIC          reduce using rule 166 (member_list -> member_list access_list .)


state 343

    (169) member_access_list -> member_declaration member_access_list .

    RCPAREN         reduce using rule 169 (member_access_list -> member_declaration member_access_list .)
    PRIVATE         reduce using rule 169 (member_access_list -> member_declaration member_access_list .)
    PROTECTED       reduce using rule 169 (member_access_list -> member_declaration member_access_list .)
    PUBLIC          reduce using rule 169 (member_access_list -> member_declaration member_access_list .)


state 344

    (167) access_list -> access_specifier COLON . member_access_list
    (168) access_list -> access_specifier COLON .
    (169) member_access_list -> . member_declaration member_access_list
    (170) member_access_list -> . member_declaration
    (171) member_declaration -> . decl_specifiers member_declarator_list SEMICOLON
    (172) member_declaration -> . member_declarator_list SEMICOLON
    (173) member_declaration -> . decl_specifiers SEMICOLON
    (174) member_declaration -> . SEMICOLON
    (175) member_declaration -> . function_definition SEMICOLON
    (176) member_declaration -> . function_definition
    (147) decl_specifiers -> . decl_specifiers decl_specifier
    (148) decl_specifiers -> . decl_specifier
    (247) member_declarator_list -> . member_declarator
    (248) member_declarator_list -> . member_declarator_list COMMA member_declarator
    (177) function_definition -> . decl_specifiers declarator fct_body
    (178) function_definition -> . declarator fct_body
    (149) decl_specifier -> . storage_class_specifier
    (150) decl_specifier -> . type_specifier
    (151) decl_specifier -> . TYPEDEF
    (249) member_declarator -> . declarator pure_specifier
    (250) member_declarator -> . declarator
    (251) member_declarator -> . IDENTIFIER COLON constant_expression
    (252) member_declarator -> . COLON constant_expression
    (253) declarator -> . name
    (254) declarator -> . unary2_operator declarator
    (255) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (256) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (257) declarator -> . declarator LSPAREN RSPAREN
    (258) declarator -> . LPAREN declarator RPAREN
    (152) storage_class_specifier -> . AUTO
    (153) storage_class_specifier -> . STATIC
    (154) storage_class_specifier -> . EXTERN
    (155) storage_class_specifier -> . VIRTUAL
    (156) type_specifier -> . simple_type_name
    (157) type_specifier -> . class_specifier
    (158) type_specifier -> . enum_specifier
    (159) type_specifier -> . elaborated_type_specifier
    (160) type_specifier -> . CONST
    (161) type_specifier -> . VOLATILE
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (162) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (163) class_specifier -> . class_head LCPAREN RCPAREN
    (17) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (18) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (20) enum_specifier -> . ENUM LCPAREN RCPAREN
    (322) elaborated_type_specifier -> . class_key IDENTIFIER
    (323) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (324) elaborated_type_specifier -> . ENUM enum_name
    (325) elaborated_type_specifier -> . TYPE IDENTIFIER
    (326) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (264) operator_function_name -> . OPERATOR operator_name
    (304) class_head -> . class_key base_spec
    (305) class_head -> . class_key
    (306) class_head -> . class_key IDENTIFIER base_spec
    (307) class_head -> . class_key IDENTIFIER
    (328) class_key -> . CLASS
    (329) class_key -> . STRUCT
    (330) class_key -> . UNION
    (331) class_key -> . TEMPLATE

    RCPAREN         reduce using rule 168 (access_list -> access_specifier COLON .)
    PRIVATE         reduce using rule 168 (access_list -> access_specifier COLON .)
    PROTECTED       reduce using rule 168 (access_list -> access_specifier COLON .)
    PUBLIC          reduce using rule 168 (access_list -> access_specifier COLON .)
    SEMICOLON       shift and go to state 222
    TYPEDEF         shift and go to state 18
    IDENTIFIER      shift and go to state 229
    COLON           shift and go to state 219
    LPAREN          shift and go to state 13
    AUTO            shift and go to state 21
    STATIC          shift and go to state 22
    EXTERN          shift and go to state 23
    VIRTUAL         shift and go to state 24
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    BNOP            shift and go to state 33
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    ENUM            shift and go to state 47
    TYPE            shift and go to state 49
    OPERATOR        shift and go to state 50
    CLASS           shift and go to state 51
    STRUCT          shift and go to state 52
    UNION           shift and go to state 53
    TEMPLATE        shift and go to state 59

    member_access_list             shift and go to state 450
    member_declaration             shift and go to state 217
    decl_specifiers                shift and go to state 220
    member_declarator_list         shift and go to state 221
    function_definition            shift and go to state 223
    decl_specifier                 shift and go to state 10
    member_declarator              shift and go to state 227
    declarator                     shift and go to state 228
    storage_class_specifier        shift and go to state 16
    type_specifier                 shift and go to state 17
    name                           shift and go to state 19
    unary2_operator                shift and go to state 20
    simple_type_name               shift and go to state 25
    class_specifier                shift and go to state 26
    enum_specifier                 shift and go to state 27
    elaborated_type_specifier      shift and go to state 28
    operator_function_name         shift and go to state 32
    class_head                     shift and go to state 46
    class_key                      shift and go to state 48

state 345

    (252) member_declarator -> COLON constant_expression .

    SEMICOLON       reduce using rule 252 (member_declarator -> COLON constant_expression .)
    COMMA           reduce using rule 252 (member_declarator -> COLON constant_expression .)


state 346

    (171) member_declaration -> decl_specifiers member_declarator_list . SEMICOLON
    (248) member_declarator_list -> member_declarator_list . COMMA member_declarator

    SEMICOLON       shift and go to state 451
    COMMA           shift and go to state 350


state 347

    (173) member_declaration -> decl_specifiers SEMICOLON .

    SEMICOLON       reduce using rule 173 (member_declaration -> decl_specifiers SEMICOLON .)
    TYPEDEF         reduce using rule 173 (member_declaration -> decl_specifiers SEMICOLON .)
    IDENTIFIER      reduce using rule 173 (member_declaration -> decl_specifiers SEMICOLON .)
    COLON           reduce using rule 173 (member_declaration -> decl_specifiers SEMICOLON .)
    LPAREN          reduce using rule 173 (member_declaration -> decl_specifiers SEMICOLON .)
    AUTO            reduce using rule 173 (member_declaration -> decl_specifiers SEMICOLON .)
    STATIC          reduce using rule 173 (member_declaration -> decl_specifiers SEMICOLON .)
    EXTERN          reduce using rule 173 (member_declaration -> decl_specifiers SEMICOLON .)
    VIRTUAL         reduce using rule 173 (member_declaration -> decl_specifiers SEMICOLON .)
    CONST           reduce using rule 173 (member_declaration -> decl_specifiers SEMICOLON .)
    VOLATILE        reduce using rule 173 (member_declaration -> decl_specifiers SEMICOLON .)
    BNOP            reduce using rule 173 (member_declaration -> decl_specifiers SEMICOLON .)
    MULTOP          reduce using rule 173 (member_declaration -> decl_specifiers SEMICOLON .)
    BANDOP          reduce using rule 173 (member_declaration -> decl_specifiers SEMICOLON .)
    CHAR            reduce using rule 173 (member_declaration -> decl_specifiers SEMICOLON .)
    SHORT           reduce using rule 173 (member_declaration -> decl_specifiers SEMICOLON .)
    INT             reduce using rule 173 (member_declaration -> decl_specifiers SEMICOLON .)
    LONG            reduce using rule 173 (member_declaration -> decl_specifiers SEMICOLON .)
    SIGNED          reduce using rule 173 (member_declaration -> decl_specifiers SEMICOLON .)
    UNSIGNED        reduce using rule 173 (member_declaration -> decl_specifiers SEMICOLON .)
    FLOAT           reduce using rule 173 (member_declaration -> decl_specifiers SEMICOLON .)
    DOUBLE          reduce using rule 173 (member_declaration -> decl_specifiers SEMICOLON .)
    VOID            reduce using rule 173 (member_declaration -> decl_specifiers SEMICOLON .)
    STRING          reduce using rule 173 (member_declaration -> decl_specifiers SEMICOLON .)
    ENUM            reduce using rule 173 (member_declaration -> decl_specifiers SEMICOLON .)
    TYPE            reduce using rule 173 (member_declaration -> decl_specifiers SEMICOLON .)
    OPERATOR        reduce using rule 173 (member_declaration -> decl_specifiers SEMICOLON .)
    CLASS           reduce using rule 173 (member_declaration -> decl_specifiers SEMICOLON .)
    STRUCT          reduce using rule 173 (member_declaration -> decl_specifiers SEMICOLON .)
    UNION           reduce using rule 173 (member_declaration -> decl_specifiers SEMICOLON .)
    TEMPLATE        reduce using rule 173 (member_declaration -> decl_specifiers SEMICOLON .)
    RCPAREN         reduce using rule 173 (member_declaration -> decl_specifiers SEMICOLON .)
    PRIVATE         reduce using rule 173 (member_declaration -> decl_specifiers SEMICOLON .)
    PROTECTED       reduce using rule 173 (member_declaration -> decl_specifiers SEMICOLON .)
    PUBLIC          reduce using rule 173 (member_declaration -> decl_specifiers SEMICOLON .)


state 348

    (177) function_definition -> decl_specifiers declarator . fct_body
    (255) declarator -> declarator . LPAREN argument_declaration_list RPAREN
    (256) declarator -> declarator . LSPAREN constant_expression RSPAREN
    (257) declarator -> declarator . LSPAREN RSPAREN
    (249) member_declarator -> declarator . pure_specifier
    (250) member_declarator -> declarator .
    (179) fct_body -> . compound_statement
    (303) pure_specifier -> . EQUAL NUMBER
    (180) compound_statement -> . LCPAREN statement_list RCPAREN
    (181) compound_statement -> . LCPAREN RCPAREN

    LPAREN          shift and go to state 126
    LSPAREN         shift and go to state 67
    SEMICOLON       reduce using rule 250 (member_declarator -> declarator .)
    COMMA           reduce using rule 250 (member_declarator -> declarator .)
    EQUAL           shift and go to state 353
    LCPAREN         shift and go to state 70

    fct_body                       shift and go to state 122
    pure_specifier                 shift and go to state 352
    compound_statement             shift and go to state 68

state 349

    (172) member_declaration -> member_declarator_list SEMICOLON .

    SEMICOLON       reduce using rule 172 (member_declaration -> member_declarator_list SEMICOLON .)
    TYPEDEF         reduce using rule 172 (member_declaration -> member_declarator_list SEMICOLON .)
    IDENTIFIER      reduce using rule 172 (member_declaration -> member_declarator_list SEMICOLON .)
    COLON           reduce using rule 172 (member_declaration -> member_declarator_list SEMICOLON .)
    LPAREN          reduce using rule 172 (member_declaration -> member_declarator_list SEMICOLON .)
    AUTO            reduce using rule 172 (member_declaration -> member_declarator_list SEMICOLON .)
    STATIC          reduce using rule 172 (member_declaration -> member_declarator_list SEMICOLON .)
    EXTERN          reduce using rule 172 (member_declaration -> member_declarator_list SEMICOLON .)
    VIRTUAL         reduce using rule 172 (member_declaration -> member_declarator_list SEMICOLON .)
    CONST           reduce using rule 172 (member_declaration -> member_declarator_list SEMICOLON .)
    VOLATILE        reduce using rule 172 (member_declaration -> member_declarator_list SEMICOLON .)
    BNOP            reduce using rule 172 (member_declaration -> member_declarator_list SEMICOLON .)
    MULTOP          reduce using rule 172 (member_declaration -> member_declarator_list SEMICOLON .)
    BANDOP          reduce using rule 172 (member_declaration -> member_declarator_list SEMICOLON .)
    CHAR            reduce using rule 172 (member_declaration -> member_declarator_list SEMICOLON .)
    SHORT           reduce using rule 172 (member_declaration -> member_declarator_list SEMICOLON .)
    INT             reduce using rule 172 (member_declaration -> member_declarator_list SEMICOLON .)
    LONG            reduce using rule 172 (member_declaration -> member_declarator_list SEMICOLON .)
    SIGNED          reduce using rule 172 (member_declaration -> member_declarator_list SEMICOLON .)
    UNSIGNED        reduce using rule 172 (member_declaration -> member_declarator_list SEMICOLON .)
    FLOAT           reduce using rule 172 (member_declaration -> member_declarator_list SEMICOLON .)
    DOUBLE          reduce using rule 172 (member_declaration -> member_declarator_list SEMICOLON .)
    VOID            reduce using rule 172 (member_declaration -> member_declarator_list SEMICOLON .)
    STRING          reduce using rule 172 (member_declaration -> member_declarator_list SEMICOLON .)
    ENUM            reduce using rule 172 (member_declaration -> member_declarator_list SEMICOLON .)
    TYPE            reduce using rule 172 (member_declaration -> member_declarator_list SEMICOLON .)
    OPERATOR        reduce using rule 172 (member_declaration -> member_declarator_list SEMICOLON .)
    CLASS           reduce using rule 172 (member_declaration -> member_declarator_list SEMICOLON .)
    STRUCT          reduce using rule 172 (member_declaration -> member_declarator_list SEMICOLON .)
    UNION           reduce using rule 172 (member_declaration -> member_declarator_list SEMICOLON .)
    TEMPLATE        reduce using rule 172 (member_declaration -> member_declarator_list SEMICOLON .)
    RCPAREN         reduce using rule 172 (member_declaration -> member_declarator_list SEMICOLON .)
    PRIVATE         reduce using rule 172 (member_declaration -> member_declarator_list SEMICOLON .)
    PROTECTED       reduce using rule 172 (member_declaration -> member_declarator_list SEMICOLON .)
    PUBLIC          reduce using rule 172 (member_declaration -> member_declarator_list SEMICOLON .)


state 350

    (248) member_declarator_list -> member_declarator_list COMMA . member_declarator
    (249) member_declarator -> . declarator pure_specifier
    (250) member_declarator -> . declarator
    (251) member_declarator -> . IDENTIFIER COLON constant_expression
    (252) member_declarator -> . COLON constant_expression
    (253) declarator -> . name
    (254) declarator -> . unary2_operator declarator
    (255) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (256) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (257) declarator -> . declarator LSPAREN RSPAREN
    (258) declarator -> . LPAREN declarator RPAREN
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (264) operator_function_name -> . OPERATOR operator_name

    IDENTIFIER      shift and go to state 229
    COLON           shift and go to state 219
    LPAREN          shift and go to state 13
    BNOP            shift and go to state 33
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    OPERATOR        shift and go to state 50

    member_declarator              shift and go to state 452
    declarator                     shift and go to state 453
    name                           shift and go to state 19
    unary2_operator                shift and go to state 20
    operator_function_name         shift and go to state 32

state 351

    (175) member_declaration -> function_definition SEMICOLON .

    SEMICOLON       reduce using rule 175 (member_declaration -> function_definition SEMICOLON .)
    TYPEDEF         reduce using rule 175 (member_declaration -> function_definition SEMICOLON .)
    IDENTIFIER      reduce using rule 175 (member_declaration -> function_definition SEMICOLON .)
    COLON           reduce using rule 175 (member_declaration -> function_definition SEMICOLON .)
    LPAREN          reduce using rule 175 (member_declaration -> function_definition SEMICOLON .)
    AUTO            reduce using rule 175 (member_declaration -> function_definition SEMICOLON .)
    STATIC          reduce using rule 175 (member_declaration -> function_definition SEMICOLON .)
    EXTERN          reduce using rule 175 (member_declaration -> function_definition SEMICOLON .)
    VIRTUAL         reduce using rule 175 (member_declaration -> function_definition SEMICOLON .)
    CONST           reduce using rule 175 (member_declaration -> function_definition SEMICOLON .)
    VOLATILE        reduce using rule 175 (member_declaration -> function_definition SEMICOLON .)
    BNOP            reduce using rule 175 (member_declaration -> function_definition SEMICOLON .)
    MULTOP          reduce using rule 175 (member_declaration -> function_definition SEMICOLON .)
    BANDOP          reduce using rule 175 (member_declaration -> function_definition SEMICOLON .)
    CHAR            reduce using rule 175 (member_declaration -> function_definition SEMICOLON .)
    SHORT           reduce using rule 175 (member_declaration -> function_definition SEMICOLON .)
    INT             reduce using rule 175 (member_declaration -> function_definition SEMICOLON .)
    LONG            reduce using rule 175 (member_declaration -> function_definition SEMICOLON .)
    SIGNED          reduce using rule 175 (member_declaration -> function_definition SEMICOLON .)
    UNSIGNED        reduce using rule 175 (member_declaration -> function_definition SEMICOLON .)
    FLOAT           reduce using rule 175 (member_declaration -> function_definition SEMICOLON .)
    DOUBLE          reduce using rule 175 (member_declaration -> function_definition SEMICOLON .)
    VOID            reduce using rule 175 (member_declaration -> function_definition SEMICOLON .)
    STRING          reduce using rule 175 (member_declaration -> function_definition SEMICOLON .)
    ENUM            reduce using rule 175 (member_declaration -> function_definition SEMICOLON .)
    TYPE            reduce using rule 175 (member_declaration -> function_definition SEMICOLON .)
    OPERATOR        reduce using rule 175 (member_declaration -> function_definition SEMICOLON .)
    CLASS           reduce using rule 175 (member_declaration -> function_definition SEMICOLON .)
    STRUCT          reduce using rule 175 (member_declaration -> function_definition SEMICOLON .)
    UNION           reduce using rule 175 (member_declaration -> function_definition SEMICOLON .)
    TEMPLATE        reduce using rule 175 (member_declaration -> function_definition SEMICOLON .)
    RCPAREN         reduce using rule 175 (member_declaration -> function_definition SEMICOLON .)
    PRIVATE         reduce using rule 175 (member_declaration -> function_definition SEMICOLON .)
    PROTECTED       reduce using rule 175 (member_declaration -> function_definition SEMICOLON .)
    PUBLIC          reduce using rule 175 (member_declaration -> function_definition SEMICOLON .)


state 352

    (249) member_declarator -> declarator pure_specifier .

    SEMICOLON       reduce using rule 249 (member_declarator -> declarator pure_specifier .)
    COMMA           reduce using rule 249 (member_declarator -> declarator pure_specifier .)


state 353

    (303) pure_specifier -> EQUAL . NUMBER

    NUMBER          shift and go to state 454


state 354

    (251) member_declarator -> IDENTIFIER COLON . constant_expression
    (25) constant_expression -> . conditional_expression
    (26) conditional_expression -> . logical_OR_expression
    (27) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (28) logical_OR_expression -> . logical_AND_expression
    (29) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (30) logical_AND_expression -> . inclusive_OR_expression
    (31) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (32) inclusive_OR_expression -> . exclusive_OR_expression
    (33) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (264) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 176
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    constant_expression            shift and go to state 455
    conditional_expression         shift and go to state 174
    logical_OR_expression          shift and go to state 138
    logical_AND_expression         shift and go to state 148
    inclusive_OR_expression        shift and go to state 158
    exclusive_OR_expression        shift and go to state 161
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171
    cast_expression                shift and go to state 143
    unary_expression               shift and go to state 175
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    name                           shift and go to state 151
    literal                        shift and go to state 159
    operator_function_name         shift and go to state 32

state 355

    (17) enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list . RCPAREN
    (22) enum_list -> enum_list . COMMA enumerator

    RCPAREN         shift and go to state 456
    COMMA           shift and go to state 358


state 356

    (19) enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .

    SEMICOLON       reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    TYPEDEF         reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    LPAREN          reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    AUTO            reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    STATIC          reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    EXTERN          reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    VIRTUAL         reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    CONST           reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    VOLATILE        reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    IDENTIFIER      reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    BNOP            reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    MULTOP          reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    BANDOP          reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    CHAR            reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    SHORT           reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    INT             reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    LONG            reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    SIGNED          reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    UNSIGNED        reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    FLOAT           reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    DOUBLE          reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    VOID            reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    STRING          reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    ENUM            reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    TYPE            reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    OPERATOR        reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    CLASS           reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    STRUCT          reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    UNION           reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    TEMPLATE        reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    EQUAL           reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    LSPAREN         reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    COMMA           reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    RPAREN          reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    RTEMPLATE       reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    COLON           reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    MULTEQOP        reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    DIVEQOP         reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    MODEQOP         reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    PLUSEQOP        reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    MINUSEQOP       reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    LSHIFTEQOP      reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    RSHIFTEQOP      reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    BANDEQOP        reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    BOREQOP         reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    DOTSTAR         reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    ARROWSTAR       reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    DIVOP           reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    MODOP           reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    PLUSOP          reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    MINUSOP         reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    LSHIFT          reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    RSHIFT          reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    LTCOMP          reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    GTCOMP          reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    LTECOMP         reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    GTECOMP         reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    EQCOMP          reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    NEQCOMP         reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    XOROP           reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    OROP            reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    ANDOP           reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    QUESMARK        reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    RSPAREN         reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    RCPAREN         reduce using rule 19 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)


state 357

    (18) enum_specifier -> ENUM LCPAREN enum_list RCPAREN .

    SEMICOLON       reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    TYPEDEF         reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    LPAREN          reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    AUTO            reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    STATIC          reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    EXTERN          reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    VIRTUAL         reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    CONST           reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    VOLATILE        reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    IDENTIFIER      reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    BNOP            reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    MULTOP          reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    BANDOP          reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    CHAR            reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    SHORT           reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    INT             reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    LONG            reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    SIGNED          reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    UNSIGNED        reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    FLOAT           reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    DOUBLE          reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    VOID            reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    STRING          reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    ENUM            reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    TYPE            reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    OPERATOR        reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    CLASS           reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    STRUCT          reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    UNION           reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    TEMPLATE        reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    EQUAL           reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    LSPAREN         reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    COMMA           reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    RPAREN          reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    RTEMPLATE       reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    COLON           reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    MULTEQOP        reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    DIVEQOP         reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    MODEQOP         reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    PLUSEQOP        reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    MINUSEQOP       reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    LSHIFTEQOP      reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    RSHIFTEQOP      reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    BANDEQOP        reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    BOREQOP         reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    DOTSTAR         reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    ARROWSTAR       reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    DIVOP           reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    MODOP           reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    PLUSOP          reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    MINUSOP         reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    LSHIFT          reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    RSHIFT          reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    LTCOMP          reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    GTCOMP          reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    LTECOMP         reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    GTECOMP         reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    EQCOMP          reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    NEQCOMP         reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    XOROP           reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    OROP            reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    ANDOP           reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    QUESMARK        reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    RSPAREN         reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    RCPAREN         reduce using rule 18 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)


state 358

    (22) enum_list -> enum_list COMMA . enumerator
    (23) enumerator -> . IDENTIFIER
    (24) enumerator -> . IDENTIFIER EQUAL constant_expression

    IDENTIFIER      shift and go to state 234

    enumerator                     shift and go to state 457

state 359

    (24) enumerator -> IDENTIFIER EQUAL . constant_expression
    (25) constant_expression -> . conditional_expression
    (26) conditional_expression -> . logical_OR_expression
    (27) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (28) logical_OR_expression -> . logical_AND_expression
    (29) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (30) logical_AND_expression -> . inclusive_OR_expression
    (31) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (32) inclusive_OR_expression -> . exclusive_OR_expression
    (33) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (264) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 176
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    constant_expression            shift and go to state 458
    conditional_expression         shift and go to state 174
    logical_OR_expression          shift and go to state 138
    logical_AND_expression         shift and go to state 148
    inclusive_OR_expression        shift and go to state 158
    exclusive_OR_expression        shift and go to state 161
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171
    cast_expression                shift and go to state 143
    unary_expression               shift and go to state 175
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    name                           shift and go to state 151
    literal                        shift and go to state 159
    operator_function_name         shift and go to state 32

state 360

    (12) template_class_name -> LTEMPLATE template_arg_list . RTEMPLATE
    (14) template_arg_list -> template_arg_list . COMMA template_arg

    RTEMPLATE       shift and go to state 459
    COMMA           shift and go to state 460


state 361

    (13) template_arg_list -> template_arg .

    RTEMPLATE       reduce using rule 13 (template_arg_list -> template_arg .)
    COMMA           reduce using rule 13 (template_arg_list -> template_arg .)


state 362

    (15) template_arg -> expression .
    (60) expression -> expression . COMMA assignment_expression

  ! shift/reduce conflict for COMMA resolved as shift
    RTEMPLATE       reduce using rule 15 (template_arg -> expression .)
    COMMA           shift and go to state 324

  ! COMMA           [ reduce using rule 15 (template_arg -> expression .) ]


state 363

    (16) template_arg -> type_name .

    RTEMPLATE       reduce using rule 16 (template_arg -> type_name .)
    COMMA           reduce using rule 16 (template_arg -> type_name .)


state 364

    (310) base_list -> base_list COMMA . base_specifier
    (311) base_specifier -> . class_key IDENTIFIER
    (312) base_specifier -> . access_specifier class_key IDENTIFIER
    (313) base_specifier -> . class_key IDENTIFIER template_class_name
    (314) base_specifier -> . access_specifier class_key IDENTIFIER template_class_name
    (315) base_specifier -> . IDENTIFIER
    (316) base_specifier -> . access_specifier IDENTIFIER
    (317) base_specifier -> . IDENTIFIER template_class_name
    (318) base_specifier -> . access_specifier IDENTIFIER template_class_name
    (328) class_key -> . CLASS
    (329) class_key -> . STRUCT
    (330) class_key -> . UNION
    (331) class_key -> . TEMPLATE
    (319) access_specifier -> . PRIVATE
    (320) access_specifier -> . PROTECTED
    (321) access_specifier -> . PUBLIC

    IDENTIFIER      shift and go to state 241
    CLASS           shift and go to state 51
    STRUCT          shift and go to state 52
    UNION           shift and go to state 53
    TEMPLATE        shift and go to state 59
    PRIVATE         shift and go to state 224
    PROTECTED       shift and go to state 225
    PUBLIC          shift and go to state 226

    base_specifier                 shift and go to state 461
    class_key                      shift and go to state 240
    access_specifier               shift and go to state 242

state 365

    (311) base_specifier -> class_key IDENTIFIER .
    (313) base_specifier -> class_key IDENTIFIER . template_class_name
    (12) template_class_name -> . LTEMPLATE template_arg_list RTEMPLATE

    COMMA           reduce using rule 311 (base_specifier -> class_key IDENTIFIER .)
    LCPAREN         reduce using rule 311 (base_specifier -> class_key IDENTIFIER .)
    LTEMPLATE       shift and go to state 237

    template_class_name            shift and go to state 462

state 366

    (317) base_specifier -> IDENTIFIER template_class_name .

    COMMA           reduce using rule 317 (base_specifier -> IDENTIFIER template_class_name .)
    LCPAREN         reduce using rule 317 (base_specifier -> IDENTIFIER template_class_name .)


state 367

    (312) base_specifier -> access_specifier class_key . IDENTIFIER
    (314) base_specifier -> access_specifier class_key . IDENTIFIER template_class_name

    IDENTIFIER      shift and go to state 463


state 368

    (316) base_specifier -> access_specifier IDENTIFIER .
    (318) base_specifier -> access_specifier IDENTIFIER . template_class_name
    (12) template_class_name -> . LTEMPLATE template_arg_list RTEMPLATE

    COMMA           reduce using rule 316 (base_specifier -> access_specifier IDENTIFIER .)
    LCPAREN         reduce using rule 316 (base_specifier -> access_specifier IDENTIFIER .)
    LTEMPLATE       shift and go to state 237

    template_class_name            shift and go to state 464

state 369

    (242) asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .

    ASM             reduce using rule 242 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    TEMPLATE        reduce using rule 242 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    TYPEDEF         reduce using rule 242 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    LPAREN          reduce using rule 242 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    AUTO            reduce using rule 242 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    STATIC          reduce using rule 242 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    EXTERN          reduce using rule 242 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    VIRTUAL         reduce using rule 242 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    CONST           reduce using rule 242 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    VOLATILE        reduce using rule 242 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 242 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    BNOP            reduce using rule 242 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    MULTOP          reduce using rule 242 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    BANDOP          reduce using rule 242 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    CHAR            reduce using rule 242 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    SHORT           reduce using rule 242 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    INT             reduce using rule 242 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    LONG            reduce using rule 242 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    SIGNED          reduce using rule 242 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    UNSIGNED        reduce using rule 242 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    FLOAT           reduce using rule 242 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    DOUBLE          reduce using rule 242 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    VOID            reduce using rule 242 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    STRING          reduce using rule 242 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    ENUM            reduce using rule 242 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    TYPE            reduce using rule 242 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    OPERATOR        reduce using rule 242 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    CLASS           reduce using rule 242 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    STRUCT          reduce using rule 242 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    UNION           reduce using rule 242 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    $end            reduce using rule 242 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    RCPAREN         reduce using rule 242 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    CASE            reduce using rule 242 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 242 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 242 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    LCPAREN         reduce using rule 242 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    IF              reduce using rule 242 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    SWITCH          reduce using rule 242 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    WHILE           reduce using rule 242 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    DO              reduce using rule 242 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    FOR             reduce using rule 242 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    BREAK           reduce using rule 242 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 242 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    RETURN          reduce using rule 242 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    GOTO            reduce using rule 242 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    TRY             reduce using rule 242 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    DPLUSOP         reduce using rule 242 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    DMINUSOP        reduce using rule 242 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    SIZEOF          reduce using rule 242 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    PLUSOP          reduce using rule 242 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    MINUSOP         reduce using rule 242 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    NOTSYM          reduce using rule 242 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    NEW             reduce using rule 242 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    DELETE          reduce using rule 242 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    THIS            reduce using rule 242 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    NUMBER          reduce using rule 242 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    STRING_L        reduce using rule 242 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    SCHAR           reduce using rule 242 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    ELSE            reduce using rule 242 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)


state 370

    (119) primary_expression -> LPAREN expression RPAREN .

    LSPAREN         reduce using rule 119 (primary_expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 119 (primary_expression -> LPAREN expression RPAREN .)
    DOT             reduce using rule 119 (primary_expression -> LPAREN expression RPAREN .)
    ARROW           reduce using rule 119 (primary_expression -> LPAREN expression RPAREN .)
    DPLUSOP         reduce using rule 119 (primary_expression -> LPAREN expression RPAREN .)
    DMINUSOP        reduce using rule 119 (primary_expression -> LPAREN expression RPAREN .)
    LTEMPLATE       reduce using rule 119 (primary_expression -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 119 (primary_expression -> LPAREN expression RPAREN .)
    MULTEQOP        reduce using rule 119 (primary_expression -> LPAREN expression RPAREN .)
    DIVEQOP         reduce using rule 119 (primary_expression -> LPAREN expression RPAREN .)
    MODEQOP         reduce using rule 119 (primary_expression -> LPAREN expression RPAREN .)
    PLUSEQOP        reduce using rule 119 (primary_expression -> LPAREN expression RPAREN .)
    MINUSEQOP       reduce using rule 119 (primary_expression -> LPAREN expression RPAREN .)
    LSHIFTEQOP      reduce using rule 119 (primary_expression -> LPAREN expression RPAREN .)
    RSHIFTEQOP      reduce using rule 119 (primary_expression -> LPAREN expression RPAREN .)
    BANDEQOP        reduce using rule 119 (primary_expression -> LPAREN expression RPAREN .)
    BOREQOP         reduce using rule 119 (primary_expression -> LPAREN expression RPAREN .)
    DOTSTAR         reduce using rule 119 (primary_expression -> LPAREN expression RPAREN .)
    ARROWSTAR       reduce using rule 119 (primary_expression -> LPAREN expression RPAREN .)
    MULTOP          reduce using rule 119 (primary_expression -> LPAREN expression RPAREN .)
    DIVOP           reduce using rule 119 (primary_expression -> LPAREN expression RPAREN .)
    MODOP           reduce using rule 119 (primary_expression -> LPAREN expression RPAREN .)
    PLUSOP          reduce using rule 119 (primary_expression -> LPAREN expression RPAREN .)
    MINUSOP         reduce using rule 119 (primary_expression -> LPAREN expression RPAREN .)
    LSHIFT          reduce using rule 119 (primary_expression -> LPAREN expression RPAREN .)
    RSHIFT          reduce using rule 119 (primary_expression -> LPAREN expression RPAREN .)
    LTCOMP          reduce using rule 119 (primary_expression -> LPAREN expression RPAREN .)
    GTCOMP          reduce using rule 119 (primary_expression -> LPAREN expression RPAREN .)
    LTECOMP         reduce using rule 119 (primary_expression -> LPAREN expression RPAREN .)
    GTECOMP         reduce using rule 119 (primary_expression -> LPAREN expression RPAREN .)
    EQCOMP          reduce using rule 119 (primary_expression -> LPAREN expression RPAREN .)
    NEQCOMP         reduce using rule 119 (primary_expression -> LPAREN expression RPAREN .)
    BANDOP          reduce using rule 119 (primary_expression -> LPAREN expression RPAREN .)
    XOROP           reduce using rule 119 (primary_expression -> LPAREN expression RPAREN .)
    OROP            reduce using rule 119 (primary_expression -> LPAREN expression RPAREN .)
    ANDOP           reduce using rule 119 (primary_expression -> LPAREN expression RPAREN .)
    QUESMARK        reduce using rule 119 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 119 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 119 (primary_expression -> LPAREN expression RPAREN .)
    RSPAREN         reduce using rule 119 (primary_expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 119 (primary_expression -> LPAREN expression RPAREN .)
    RCPAREN         reduce using rule 119 (primary_expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 119 (primary_expression -> LPAREN expression RPAREN .)
    RTEMPLATE       reduce using rule 119 (primary_expression -> LPAREN expression RPAREN .)


state 371

    (125) cast_expression -> LPAREN type_name RPAREN . cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (264) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 176
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    cast_expression                shift and go to state 465
    unary_expression               shift and go to state 175
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    name                           shift and go to state 151
    literal                        shift and go to state 159
    operator_function_name         shift and go to state 32

state 372

    (126) type_name -> type_specifier_list abstract_declarator .
    (130) abstract_declarator -> abstract_declarator . LPAREN argument_declaration_list RPAREN
    (132) abstract_declarator -> abstract_declarator . LSPAREN constant_expression RSPAREN
    (134) abstract_declarator -> abstract_declarator . LSPAREN RSPAREN

    RPAREN          reduce using rule 126 (type_name -> type_specifier_list abstract_declarator .)
    RTEMPLATE       reduce using rule 126 (type_name -> type_specifier_list abstract_declarator .)
    COMMA           reduce using rule 126 (type_name -> type_specifier_list abstract_declarator .)
    LPAREN          shift and go to state 382
    LSPAREN         shift and go to state 383


state 373

    (128) abstract_declarator -> unary2_operator . abstract_declarator
    (129) abstract_declarator -> unary2_operator .
    (128) abstract_declarator -> . unary2_operator abstract_declarator
    (129) abstract_declarator -> . unary2_operator
    (130) abstract_declarator -> . abstract_declarator LPAREN argument_declaration_list RPAREN
    (131) abstract_declarator -> . LPAREN argument_declaration_list RPAREN
    (132) abstract_declarator -> . abstract_declarator LSPAREN constant_expression RSPAREN
    (133) abstract_declarator -> . LSPAREN constant_expression RSPAREN
    (134) abstract_declarator -> . abstract_declarator LSPAREN RSPAREN
    (135) abstract_declarator -> . LSPAREN RSPAREN
    (136) abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LSPAREN resolved as shift
    RPAREN          reduce using rule 129 (abstract_declarator -> unary2_operator .)
    RTEMPLATE       reduce using rule 129 (abstract_declarator -> unary2_operator .)
    COMMA           reduce using rule 129 (abstract_declarator -> unary2_operator .)
    LPAREN          shift and go to state 374
    LSPAREN         shift and go to state 272
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35

  ! LPAREN          [ reduce using rule 129 (abstract_declarator -> unary2_operator .) ]
  ! LSPAREN         [ reduce using rule 129 (abstract_declarator -> unary2_operator .) ]

    unary2_operator                shift and go to state 373
    abstract_declarator            shift and go to state 384

state 374

    (131) abstract_declarator -> LPAREN . argument_declaration_list RPAREN
    (136) abstract_declarator -> LPAREN . abstract_declarator RPAREN
    (137) argument_declaration_list -> . arg_declaration_list
    (138) argument_declaration_list -> . empty
    (128) abstract_declarator -> . unary2_operator abstract_declarator
    (129) abstract_declarator -> . unary2_operator
    (130) abstract_declarator -> . abstract_declarator LPAREN argument_declaration_list RPAREN
    (131) abstract_declarator -> . LPAREN argument_declaration_list RPAREN
    (132) abstract_declarator -> . abstract_declarator LSPAREN constant_expression RSPAREN
    (133) abstract_declarator -> . LSPAREN constant_expression RSPAREN
    (134) abstract_declarator -> . abstract_declarator LSPAREN RSPAREN
    (135) abstract_declarator -> . LSPAREN RSPAREN
    (136) abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (139) arg_declaration_list -> . argument_declaration
    (140) arg_declaration_list -> . argument_declaration COMMA arg_declaration_list
    (11) empty -> .
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (141) argument_declaration -> . decl_specifiers declarator
    (142) argument_declaration -> . decl_specifiers declarator EQUAL expression
    (143) argument_declaration -> . decl_specifiers abstract_declarator
    (144) argument_declaration -> . decl_specifiers
    (145) argument_declaration -> . decl_specifiers abstract_declarator EQUAL expression
    (146) argument_declaration -> . decl_specifiers EQUAL expression
    (147) decl_specifiers -> . decl_specifiers decl_specifier
    (148) decl_specifiers -> . decl_specifier
    (149) decl_specifier -> . storage_class_specifier
    (150) decl_specifier -> . type_specifier
    (151) decl_specifier -> . TYPEDEF
    (152) storage_class_specifier -> . AUTO
    (153) storage_class_specifier -> . STATIC
    (154) storage_class_specifier -> . EXTERN
    (155) storage_class_specifier -> . VIRTUAL
    (156) type_specifier -> . simple_type_name
    (157) type_specifier -> . class_specifier
    (158) type_specifier -> . enum_specifier
    (159) type_specifier -> . elaborated_type_specifier
    (160) type_specifier -> . CONST
    (161) type_specifier -> . VOLATILE
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (162) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (163) class_specifier -> . class_head LCPAREN RCPAREN
    (17) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (18) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (20) enum_specifier -> . ENUM LCPAREN RCPAREN
    (322) elaborated_type_specifier -> . class_key IDENTIFIER
    (323) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (324) elaborated_type_specifier -> . ENUM enum_name
    (325) elaborated_type_specifier -> . TYPE IDENTIFIER
    (326) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (304) class_head -> . class_key base_spec
    (305) class_head -> . class_key
    (306) class_head -> . class_key IDENTIFIER base_spec
    (307) class_head -> . class_key IDENTIFIER
    (328) class_key -> . CLASS
    (329) class_key -> . STRUCT
    (330) class_key -> . UNION
    (331) class_key -> . TEMPLATE

    LPAREN          shift and go to state 374
    LSPAREN         shift and go to state 272
    RPAREN          reduce using rule 11 (empty -> .)
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    TYPEDEF         shift and go to state 18
    AUTO            shift and go to state 21
    STATIC          shift and go to state 22
    EXTERN          shift and go to state 23
    VIRTUAL         shift and go to state 24
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    ENUM            shift and go to state 47
    TYPE            shift and go to state 49
    CLASS           shift and go to state 51
    STRUCT          shift and go to state 52
    UNION           shift and go to state 53
    TEMPLATE        shift and go to state 59

    argument_declaration_list      shift and go to state 385
    abstract_declarator            shift and go to state 386
    arg_declaration_list           shift and go to state 131
    empty                          shift and go to state 132
    unary2_operator                shift and go to state 373
    argument_declaration           shift and go to state 134
    decl_specifiers                shift and go to state 137
    decl_specifier                 shift and go to state 10
    storage_class_specifier        shift and go to state 16
    type_specifier                 shift and go to state 17
    simple_type_name               shift and go to state 25
    class_specifier                shift and go to state 26
    enum_specifier                 shift and go to state 27
    elaborated_type_specifier      shift and go to state 28
    class_head                     shift and go to state 46
    class_key                      shift and go to state 48

state 375

    (262) type_specifier_list -> type_specifier type_specifier_list .

    LPAREN          reduce using rule 262 (type_specifier_list -> type_specifier type_specifier_list .)
    LSPAREN         reduce using rule 262 (type_specifier_list -> type_specifier type_specifier_list .)
    MULTOP          reduce using rule 262 (type_specifier_list -> type_specifier type_specifier_list .)
    BANDOP          reduce using rule 262 (type_specifier_list -> type_specifier type_specifier_list .)
    RPAREN          reduce using rule 262 (type_specifier_list -> type_specifier type_specifier_list .)
    EQUAL           reduce using rule 262 (type_specifier_list -> type_specifier type_specifier_list .)
    MULTEQOP        reduce using rule 262 (type_specifier_list -> type_specifier type_specifier_list .)
    DIVEQOP         reduce using rule 262 (type_specifier_list -> type_specifier type_specifier_list .)
    MODEQOP         reduce using rule 262 (type_specifier_list -> type_specifier type_specifier_list .)
    PLUSEQOP        reduce using rule 262 (type_specifier_list -> type_specifier type_specifier_list .)
    MINUSEQOP       reduce using rule 262 (type_specifier_list -> type_specifier type_specifier_list .)
    LSHIFTEQOP      reduce using rule 262 (type_specifier_list -> type_specifier type_specifier_list .)
    RSHIFTEQOP      reduce using rule 262 (type_specifier_list -> type_specifier type_specifier_list .)
    BANDEQOP        reduce using rule 262 (type_specifier_list -> type_specifier type_specifier_list .)
    BOREQOP         reduce using rule 262 (type_specifier_list -> type_specifier type_specifier_list .)
    DOTSTAR         reduce using rule 262 (type_specifier_list -> type_specifier type_specifier_list .)
    ARROWSTAR       reduce using rule 262 (type_specifier_list -> type_specifier type_specifier_list .)
    DIVOP           reduce using rule 262 (type_specifier_list -> type_specifier type_specifier_list .)
    MODOP           reduce using rule 262 (type_specifier_list -> type_specifier type_specifier_list .)
    PLUSOP          reduce using rule 262 (type_specifier_list -> type_specifier type_specifier_list .)
    MINUSOP         reduce using rule 262 (type_specifier_list -> type_specifier type_specifier_list .)
    LSHIFT          reduce using rule 262 (type_specifier_list -> type_specifier type_specifier_list .)
    RSHIFT          reduce using rule 262 (type_specifier_list -> type_specifier type_specifier_list .)
    LTCOMP          reduce using rule 262 (type_specifier_list -> type_specifier type_specifier_list .)
    GTCOMP          reduce using rule 262 (type_specifier_list -> type_specifier type_specifier_list .)
    LTECOMP         reduce using rule 262 (type_specifier_list -> type_specifier type_specifier_list .)
    GTECOMP         reduce using rule 262 (type_specifier_list -> type_specifier type_specifier_list .)
    EQCOMP          reduce using rule 262 (type_specifier_list -> type_specifier type_specifier_list .)
    NEQCOMP         reduce using rule 262 (type_specifier_list -> type_specifier type_specifier_list .)
    XOROP           reduce using rule 262 (type_specifier_list -> type_specifier type_specifier_list .)
    OROP            reduce using rule 262 (type_specifier_list -> type_specifier type_specifier_list .)
    ANDOP           reduce using rule 262 (type_specifier_list -> type_specifier type_specifier_list .)
    QUESMARK        reduce using rule 262 (type_specifier_list -> type_specifier type_specifier_list .)
    COMMA           reduce using rule 262 (type_specifier_list -> type_specifier type_specifier_list .)
    RSPAREN         reduce using rule 262 (type_specifier_list -> type_specifier type_specifier_list .)
    SEMICOLON       reduce using rule 262 (type_specifier_list -> type_specifier type_specifier_list .)
    RCPAREN         reduce using rule 262 (type_specifier_list -> type_specifier type_specifier_list .)
    COLON           reduce using rule 262 (type_specifier_list -> type_specifier type_specifier_list .)
    RTEMPLATE       reduce using rule 262 (type_specifier_list -> type_specifier type_specifier_list .)
    IDENTIFIER      reduce using rule 262 (type_specifier_list -> type_specifier type_specifier_list .)
    BNOP            reduce using rule 262 (type_specifier_list -> type_specifier type_specifier_list .)
    OPERATOR        reduce using rule 262 (type_specifier_list -> type_specifier type_specifier_list .)


state 376

    (246) expression_list -> expression_list COMMA assignment_expression .

    RPAREN          reduce using rule 246 (expression_list -> expression_list COMMA assignment_expression .)
    COMMA           reduce using rule 246 (expression_list -> expression_list COMMA assignment_expression .)


state 377

    (140) arg_declaration_list -> argument_declaration COMMA arg_declaration_list .

    RPAREN          reduce using rule 140 (arg_declaration_list -> argument_declaration COMMA arg_declaration_list .)


state 378

    (62) assignment_expression -> unary_expression assignment_operator assignment_expression .

    RPAREN          reduce using rule 62 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COMMA           reduce using rule 62 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    SEMICOLON       reduce using rule 62 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RCPAREN         reduce using rule 62 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RTEMPLATE       reduce using rule 62 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COLON           reduce using rule 62 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RSPAREN         reduce using rule 62 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 379

    (142) argument_declaration -> decl_specifiers declarator EQUAL . expression
    (59) expression -> . assignment_expression
    (60) expression -> . expression COMMA assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (26) conditional_expression -> . logical_OR_expression
    (27) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (28) logical_OR_expression -> . logical_AND_expression
    (29) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (30) logical_AND_expression -> . inclusive_OR_expression
    (31) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (32) inclusive_OR_expression -> . exclusive_OR_expression
    (33) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (264) operator_function_name -> . OPERATOR operator_name
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    LPAREN          shift and go to state 128
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    expression                     shift and go to state 466
    assignment_expression          shift and go to state 208
    conditional_expression         shift and go to state 135
    unary_expression               shift and go to state 136
    logical_OR_expression          shift and go to state 138
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    cast_expression                shift and go to state 143
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    logical_AND_expression         shift and go to state 148
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    name                           shift and go to state 151
    inclusive_OR_expression        shift and go to state 158
    literal                        shift and go to state 159
    exclusive_OR_expression        shift and go to state 161
    operator_function_name         shift and go to state 32
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171

state 380

    (146) argument_declaration -> decl_specifiers EQUAL expression .
    (60) expression -> expression . COMMA assignment_expression

  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 146 (argument_declaration -> decl_specifiers EQUAL expression .)
    RTEMPLATE       reduce using rule 146 (argument_declaration -> decl_specifiers EQUAL expression .)
    COMMA           shift and go to state 324

  ! COMMA           [ reduce using rule 146 (argument_declaration -> decl_specifiers EQUAL expression .) ]


state 381

    (145) argument_declaration -> decl_specifiers abstract_declarator EQUAL . expression
    (59) expression -> . assignment_expression
    (60) expression -> . expression COMMA assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (26) conditional_expression -> . logical_OR_expression
    (27) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (28) logical_OR_expression -> . logical_AND_expression
    (29) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (30) logical_AND_expression -> . inclusive_OR_expression
    (31) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (32) inclusive_OR_expression -> . exclusive_OR_expression
    (33) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (264) operator_function_name -> . OPERATOR operator_name
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    LPAREN          shift and go to state 128
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    expression                     shift and go to state 467
    assignment_expression          shift and go to state 208
    conditional_expression         shift and go to state 135
    unary_expression               shift and go to state 136
    logical_OR_expression          shift and go to state 138
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    cast_expression                shift and go to state 143
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    logical_AND_expression         shift and go to state 148
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    name                           shift and go to state 151
    inclusive_OR_expression        shift and go to state 158
    literal                        shift and go to state 159
    exclusive_OR_expression        shift and go to state 161
    operator_function_name         shift and go to state 32
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171

state 382

    (130) abstract_declarator -> abstract_declarator LPAREN . argument_declaration_list RPAREN
    (137) argument_declaration_list -> . arg_declaration_list
    (138) argument_declaration_list -> . empty
    (139) arg_declaration_list -> . argument_declaration
    (140) arg_declaration_list -> . argument_declaration COMMA arg_declaration_list
    (11) empty -> .
    (141) argument_declaration -> . decl_specifiers declarator
    (142) argument_declaration -> . decl_specifiers declarator EQUAL expression
    (143) argument_declaration -> . decl_specifiers abstract_declarator
    (144) argument_declaration -> . decl_specifiers
    (145) argument_declaration -> . decl_specifiers abstract_declarator EQUAL expression
    (146) argument_declaration -> . decl_specifiers EQUAL expression
    (147) decl_specifiers -> . decl_specifiers decl_specifier
    (148) decl_specifiers -> . decl_specifier
    (149) decl_specifier -> . storage_class_specifier
    (150) decl_specifier -> . type_specifier
    (151) decl_specifier -> . TYPEDEF
    (152) storage_class_specifier -> . AUTO
    (153) storage_class_specifier -> . STATIC
    (154) storage_class_specifier -> . EXTERN
    (155) storage_class_specifier -> . VIRTUAL
    (156) type_specifier -> . simple_type_name
    (157) type_specifier -> . class_specifier
    (158) type_specifier -> . enum_specifier
    (159) type_specifier -> . elaborated_type_specifier
    (160) type_specifier -> . CONST
    (161) type_specifier -> . VOLATILE
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (162) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (163) class_specifier -> . class_head LCPAREN RCPAREN
    (17) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (18) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (20) enum_specifier -> . ENUM LCPAREN RCPAREN
    (322) elaborated_type_specifier -> . class_key IDENTIFIER
    (323) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (324) elaborated_type_specifier -> . ENUM enum_name
    (325) elaborated_type_specifier -> . TYPE IDENTIFIER
    (326) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (304) class_head -> . class_key base_spec
    (305) class_head -> . class_key
    (306) class_head -> . class_key IDENTIFIER base_spec
    (307) class_head -> . class_key IDENTIFIER
    (328) class_key -> . CLASS
    (329) class_key -> . STRUCT
    (330) class_key -> . UNION
    (331) class_key -> . TEMPLATE

    RPAREN          reduce using rule 11 (empty -> .)
    TYPEDEF         shift and go to state 18
    AUTO            shift and go to state 21
    STATIC          shift and go to state 22
    EXTERN          shift and go to state 23
    VIRTUAL         shift and go to state 24
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    ENUM            shift and go to state 47
    TYPE            shift and go to state 49
    CLASS           shift and go to state 51
    STRUCT          shift and go to state 52
    UNION           shift and go to state 53
    TEMPLATE        shift and go to state 59

    argument_declaration_list      shift and go to state 468
    arg_declaration_list           shift and go to state 131
    empty                          shift and go to state 132
    argument_declaration           shift and go to state 134
    decl_specifiers                shift and go to state 137
    decl_specifier                 shift and go to state 10
    storage_class_specifier        shift and go to state 16
    type_specifier                 shift and go to state 17
    simple_type_name               shift and go to state 25
    class_specifier                shift and go to state 26
    enum_specifier                 shift and go to state 27
    elaborated_type_specifier      shift and go to state 28
    class_head                     shift and go to state 46
    class_key                      shift and go to state 48

state 383

    (132) abstract_declarator -> abstract_declarator LSPAREN . constant_expression RSPAREN
    (134) abstract_declarator -> abstract_declarator LSPAREN . RSPAREN
    (25) constant_expression -> . conditional_expression
    (26) conditional_expression -> . logical_OR_expression
    (27) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (28) logical_OR_expression -> . logical_AND_expression
    (29) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (30) logical_AND_expression -> . inclusive_OR_expression
    (31) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (32) inclusive_OR_expression -> . exclusive_OR_expression
    (33) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (264) operator_function_name -> . OPERATOR operator_name

    RSPAREN         shift and go to state 470
    LPAREN          shift and go to state 176
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    constant_expression            shift and go to state 469
    conditional_expression         shift and go to state 174
    logical_OR_expression          shift and go to state 138
    logical_AND_expression         shift and go to state 148
    inclusive_OR_expression        shift and go to state 158
    exclusive_OR_expression        shift and go to state 161
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171
    cast_expression                shift and go to state 143
    unary_expression               shift and go to state 175
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    name                           shift and go to state 151
    literal                        shift and go to state 159
    operator_function_name         shift and go to state 32

state 384

    (128) abstract_declarator -> unary2_operator abstract_declarator .
    (130) abstract_declarator -> abstract_declarator . LPAREN argument_declaration_list RPAREN
    (132) abstract_declarator -> abstract_declarator . LSPAREN constant_expression RSPAREN
    (134) abstract_declarator -> abstract_declarator . LSPAREN RSPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LSPAREN resolved as shift
    EQUAL           reduce using rule 128 (abstract_declarator -> unary2_operator abstract_declarator .)
    COMMA           reduce using rule 128 (abstract_declarator -> unary2_operator abstract_declarator .)
    RPAREN          reduce using rule 128 (abstract_declarator -> unary2_operator abstract_declarator .)
    RTEMPLATE       reduce using rule 128 (abstract_declarator -> unary2_operator abstract_declarator .)
    LPAREN          shift and go to state 382
    LSPAREN         shift and go to state 383

  ! LPAREN          [ reduce using rule 128 (abstract_declarator -> unary2_operator abstract_declarator .) ]
  ! LSPAREN         [ reduce using rule 128 (abstract_declarator -> unary2_operator abstract_declarator .) ]


state 385

    (131) abstract_declarator -> LPAREN argument_declaration_list . RPAREN

    RPAREN          shift and go to state 471


state 386

    (136) abstract_declarator -> LPAREN abstract_declarator . RPAREN
    (130) abstract_declarator -> abstract_declarator . LPAREN argument_declaration_list RPAREN
    (132) abstract_declarator -> abstract_declarator . LSPAREN constant_expression RSPAREN
    (134) abstract_declarator -> abstract_declarator . LSPAREN RSPAREN

    RPAREN          shift and go to state 472
    LPAREN          shift and go to state 382
    LSPAREN         shift and go to state 383


state 387

    (133) abstract_declarator -> LSPAREN constant_expression . RSPAREN

    RSPAREN         shift and go to state 473


state 388

    (135) abstract_declarator -> LSPAREN RSPAREN .

    EQUAL           reduce using rule 135 (abstract_declarator -> LSPAREN RSPAREN .)
    LPAREN          reduce using rule 135 (abstract_declarator -> LSPAREN RSPAREN .)
    LSPAREN         reduce using rule 135 (abstract_declarator -> LSPAREN RSPAREN .)
    COMMA           reduce using rule 135 (abstract_declarator -> LSPAREN RSPAREN .)
    RPAREN          reduce using rule 135 (abstract_declarator -> LSPAREN RSPAREN .)
    RTEMPLATE       reduce using rule 135 (abstract_declarator -> LSPAREN RSPAREN .)


state 389

    (27) conditional_expression -> logical_OR_expression QUESMARK expression . COLON conditional_expression
    (60) expression -> expression . COMMA assignment_expression

    COLON           shift and go to state 474
    COMMA           shift and go to state 324


state 390

    (29) logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .
    (31) logical_AND_expression -> logical_AND_expression . ANDOP inclusive_OR_expression

    QUESMARK        reduce using rule 29 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    OROP            reduce using rule 29 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    RPAREN          reduce using rule 29 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    COMMA           reduce using rule 29 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    RSPAREN         reduce using rule 29 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    SEMICOLON       reduce using rule 29 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    RCPAREN         reduce using rule 29 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    COLON           reduce using rule 29 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    RTEMPLATE       reduce using rule 29 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    ANDOP           shift and go to state 289


state 391

    (107) postfix_expression -> postfix_expression LSPAREN expression . RSPAREN
    (60) expression -> expression . COMMA assignment_expression

    RSPAREN         shift and go to state 475
    COMMA           shift and go to state 324


state 392

    (108) postfix_expression -> postfix_expression LPAREN expression_list . RPAREN
    (246) expression_list -> expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 476
    COMMA           shift and go to state 254


state 393

    (110) postfix_expression -> postfix_expression LPAREN RPAREN .

    LSPAREN         reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LPAREN          reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DOT             reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ARROW           reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DPLUSOP         reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DMINUSOP        reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LTEMPLATE       reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQUAL           reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MULTEQOP        reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIVEQOP         reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MODEQOP         reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUSEQOP        reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUSEQOP       reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LSHIFTEQOP      reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RSHIFTEQOP      reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    BANDEQOP        reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    BOREQOP         reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DOTSTAR         reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ARROWSTAR       reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MULTOP          reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIVOP           reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MODOP           reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUSOP          reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUSOP         reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LSHIFT          reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RSHIFT          reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LTCOMP          reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GTCOMP          reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LTECOMP         reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GTECOMP         reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQCOMP          reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    NEQCOMP         reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    BANDOP          reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    XOROP           reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    OROP            reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ANDOP           reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    QUESMARK        reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RPAREN          reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COMMA           reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RSPAREN         reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    SEMICOLON       reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RCPAREN         reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COLON           reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RTEMPLATE       reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)


state 394

    (109) postfix_expression -> postfix_expression template_class_name LPAREN . expression_list RPAREN
    (245) expression_list -> . assignment_expression
    (246) expression_list -> . expression_list COMMA assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (26) conditional_expression -> . logical_OR_expression
    (27) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (28) logical_OR_expression -> . logical_AND_expression
    (29) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (30) logical_AND_expression -> . inclusive_OR_expression
    (31) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (32) inclusive_OR_expression -> . exclusive_OR_expression
    (33) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (264) operator_function_name -> . OPERATOR operator_name
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    LPAREN          shift and go to state 128
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    postfix_expression             shift and go to state 139
    expression_list                shift and go to state 477
    assignment_expression          shift and go to state 133
    conditional_expression         shift and go to state 135
    unary_expression               shift and go to state 136
    logical_OR_expression          shift and go to state 138
    unary1_operator                shift and go to state 142
    cast_expression                shift and go to state 143
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    logical_AND_expression         shift and go to state 148
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    name                           shift and go to state 151
    inclusive_OR_expression        shift and go to state 158
    literal                        shift and go to state 159
    exclusive_OR_expression        shift and go to state 161
    operator_function_name         shift and go to state 32
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171

state 395

    (113) postfix_expression -> postfix_expression DOT name .

    LSPAREN         reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    LPAREN          reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    DOT             reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    ARROW           reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    DPLUSOP         reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    DMINUSOP        reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    LTEMPLATE       reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    EQUAL           reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    MULTEQOP        reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    DIVEQOP         reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    MODEQOP         reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    PLUSEQOP        reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    MINUSEQOP       reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    LSHIFTEQOP      reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    RSHIFTEQOP      reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    BANDEQOP        reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    BOREQOP         reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    DOTSTAR         reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    ARROWSTAR       reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    MULTOP          reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    DIVOP           reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    MODOP           reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    PLUSOP          reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    MINUSOP         reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    LSHIFT          reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    RSHIFT          reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    LTCOMP          reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    GTCOMP          reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    LTECOMP         reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    GTECOMP         reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    EQCOMP          reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    NEQCOMP         reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    BANDOP          reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    XOROP           reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    OROP            reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    ANDOP           reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    QUESMARK        reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    RPAREN          reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    COMMA           reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    RSPAREN         reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    SEMICOLON       reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    RCPAREN         reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    COLON           reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    RTEMPLATE       reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)


state 396

    (114) postfix_expression -> postfix_expression ARROW name .

    LSPAREN         reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    LPAREN          reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    DOT             reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    ARROW           reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    DPLUSOP         reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    DMINUSOP        reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    LTEMPLATE       reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    EQUAL           reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    MULTEQOP        reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    DIVEQOP         reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    MODEQOP         reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    PLUSEQOP        reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    MINUSEQOP       reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    LSHIFTEQOP      reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    RSHIFTEQOP      reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    BANDEQOP        reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    BOREQOP         reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    DOTSTAR         reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    ARROWSTAR       reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    MULTOP          reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    DIVOP           reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    MODOP           reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    PLUSOP          reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    MINUSOP         reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    LSHIFT          reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    RSHIFT          reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    LTCOMP          reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    GTCOMP          reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    LTECOMP         reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    GTECOMP         reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    EQCOMP          reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    NEQCOMP         reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    BANDOP          reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    XOROP           reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    OROP            reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    ANDOP           reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    QUESMARK        reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    RPAREN          reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    COMMA           reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    RSPAREN         reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    SEMICOLON       reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    RCPAREN         reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    COLON           reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    RTEMPLATE       reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)


state 397

    (79) unary_expression -> SIZEOF LPAREN type_name . RPAREN

    RPAREN          shift and go to state 478


state 398

    (31) logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .
    (33) inclusive_OR_expression -> inclusive_OR_expression . OROP exclusive_OR_expression

  ! shift/reduce conflict for OROP resolved as shift
    ANDOP           reduce using rule 31 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    QUESMARK        reduce using rule 31 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    RPAREN          reduce using rule 31 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    COMMA           reduce using rule 31 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    RSPAREN         reduce using rule 31 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    SEMICOLON       reduce using rule 31 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    RCPAREN         reduce using rule 31 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    COLON           reduce using rule 31 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    RTEMPLATE       reduce using rule 31 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    OROP            shift and go to state 296

  ! OROP            [ reduce using rule 31 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .) ]


state 399

    (111) postfix_expression -> simple_type_name LPAREN expression_list . RPAREN
    (246) expression_list -> expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 479
    COMMA           shift and go to state 254


state 400

    (112) postfix_expression -> simple_type_name LPAREN RPAREN .

    LSPAREN         reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    LPAREN          reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    DOT             reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    ARROW           reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    DPLUSOP         reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    DMINUSOP        reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    LTEMPLATE       reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    EQUAL           reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    MULTEQOP        reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    DIVEQOP         reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    MODEQOP         reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    PLUSEQOP        reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    MINUSEQOP       reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    LSHIFTEQOP      reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    RSHIFTEQOP      reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    BANDEQOP        reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    BOREQOP         reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    DOTSTAR         reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    ARROWSTAR       reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    MULTOP          reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    DIVOP           reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    MODOP           reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    PLUSOP          reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    MINUSOP         reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    LSHIFT          reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    RSHIFT          reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    LTCOMP          reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    GTCOMP          reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    LTECOMP         reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    GTECOMP         reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    EQCOMP          reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    NEQCOMP         reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    BANDOP          reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    XOROP           reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    OROP            reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    ANDOP           reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    QUESMARK        reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    RPAREN          reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    COMMA           reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    RSPAREN         reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    SEMICOLON       reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    RCPAREN         reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    COLON           reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    RTEMPLATE       reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)


state 401

    (83) allocation_expression -> NEW placement new_type_name . new_initializer
    (85) allocation_expression -> NEW placement new_type_name .
    (98) new_initializer -> . LPAREN initializer_list RPAREN
    (99) new_initializer -> . LPAREN RPAREN

    EQUAL           reduce using rule 85 (allocation_expression -> NEW placement new_type_name .)
    MULTEQOP        reduce using rule 85 (allocation_expression -> NEW placement new_type_name .)
    DIVEQOP         reduce using rule 85 (allocation_expression -> NEW placement new_type_name .)
    MODEQOP         reduce using rule 85 (allocation_expression -> NEW placement new_type_name .)
    PLUSEQOP        reduce using rule 85 (allocation_expression -> NEW placement new_type_name .)
    MINUSEQOP       reduce using rule 85 (allocation_expression -> NEW placement new_type_name .)
    LSHIFTEQOP      reduce using rule 85 (allocation_expression -> NEW placement new_type_name .)
    RSHIFTEQOP      reduce using rule 85 (allocation_expression -> NEW placement new_type_name .)
    BANDEQOP        reduce using rule 85 (allocation_expression -> NEW placement new_type_name .)
    BOREQOP         reduce using rule 85 (allocation_expression -> NEW placement new_type_name .)
    DOTSTAR         reduce using rule 85 (allocation_expression -> NEW placement new_type_name .)
    ARROWSTAR       reduce using rule 85 (allocation_expression -> NEW placement new_type_name .)
    MULTOP          reduce using rule 85 (allocation_expression -> NEW placement new_type_name .)
    DIVOP           reduce using rule 85 (allocation_expression -> NEW placement new_type_name .)
    MODOP           reduce using rule 85 (allocation_expression -> NEW placement new_type_name .)
    PLUSOP          reduce using rule 85 (allocation_expression -> NEW placement new_type_name .)
    MINUSOP         reduce using rule 85 (allocation_expression -> NEW placement new_type_name .)
    LSHIFT          reduce using rule 85 (allocation_expression -> NEW placement new_type_name .)
    RSHIFT          reduce using rule 85 (allocation_expression -> NEW placement new_type_name .)
    LTCOMP          reduce using rule 85 (allocation_expression -> NEW placement new_type_name .)
    GTCOMP          reduce using rule 85 (allocation_expression -> NEW placement new_type_name .)
    LTECOMP         reduce using rule 85 (allocation_expression -> NEW placement new_type_name .)
    GTECOMP         reduce using rule 85 (allocation_expression -> NEW placement new_type_name .)
    EQCOMP          reduce using rule 85 (allocation_expression -> NEW placement new_type_name .)
    NEQCOMP         reduce using rule 85 (allocation_expression -> NEW placement new_type_name .)
    BANDOP          reduce using rule 85 (allocation_expression -> NEW placement new_type_name .)
    XOROP           reduce using rule 85 (allocation_expression -> NEW placement new_type_name .)
    OROP            reduce using rule 85 (allocation_expression -> NEW placement new_type_name .)
    ANDOP           reduce using rule 85 (allocation_expression -> NEW placement new_type_name .)
    QUESMARK        reduce using rule 85 (allocation_expression -> NEW placement new_type_name .)
    RPAREN          reduce using rule 85 (allocation_expression -> NEW placement new_type_name .)
    COMMA           reduce using rule 85 (allocation_expression -> NEW placement new_type_name .)
    RSPAREN         reduce using rule 85 (allocation_expression -> NEW placement new_type_name .)
    SEMICOLON       reduce using rule 85 (allocation_expression -> NEW placement new_type_name .)
    RCPAREN         reduce using rule 85 (allocation_expression -> NEW placement new_type_name .)
    COLON           reduce using rule 85 (allocation_expression -> NEW placement new_type_name .)
    RTEMPLATE       reduce using rule 85 (allocation_expression -> NEW placement new_type_name .)
    LPAREN          shift and go to state 404

    new_initializer                shift and go to state 480

state 402

    (87) allocation_expression -> NEW placement LPAREN . type_name RPAREN new_initializer
    (89) allocation_expression -> NEW placement LPAREN . type_name RPAREN
    (126) type_name -> . type_specifier_list abstract_declarator
    (127) type_name -> . type_specifier_list
    (262) type_specifier_list -> . type_specifier type_specifier_list
    (263) type_specifier_list -> . type_specifier
    (156) type_specifier -> . simple_type_name
    (157) type_specifier -> . class_specifier
    (158) type_specifier -> . enum_specifier
    (159) type_specifier -> . elaborated_type_specifier
    (160) type_specifier -> . CONST
    (161) type_specifier -> . VOLATILE
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (162) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (163) class_specifier -> . class_head LCPAREN RCPAREN
    (17) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (18) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (20) enum_specifier -> . ENUM LCPAREN RCPAREN
    (322) elaborated_type_specifier -> . class_key IDENTIFIER
    (323) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (324) elaborated_type_specifier -> . ENUM enum_name
    (325) elaborated_type_specifier -> . TYPE IDENTIFIER
    (326) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (304) class_head -> . class_key base_spec
    (305) class_head -> . class_key
    (306) class_head -> . class_key IDENTIFIER base_spec
    (307) class_head -> . class_key IDENTIFIER
    (328) class_key -> . CLASS
    (329) class_key -> . STRUCT
    (330) class_key -> . UNION
    (331) class_key -> . TEMPLATE

    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    ENUM            shift and go to state 47
    TYPE            shift and go to state 49
    CLASS           shift and go to state 51
    STRUCT          shift and go to state 52
    UNION           shift and go to state 53
    TEMPLATE        shift and go to state 59

    type_name                      shift and go to state 481
    type_specifier_list            shift and go to state 249
    type_specifier                 shift and go to state 250
    simple_type_name               shift and go to state 25
    class_specifier                shift and go to state 26
    enum_specifier                 shift and go to state 27
    elaborated_type_specifier      shift and go to state 28
    class_head                     shift and go to state 46
    class_key                      shift and go to state 48

state 403

    (84) allocation_expression -> NEW new_type_name new_initializer .

    EQUAL           reduce using rule 84 (allocation_expression -> NEW new_type_name new_initializer .)
    MULTEQOP        reduce using rule 84 (allocation_expression -> NEW new_type_name new_initializer .)
    DIVEQOP         reduce using rule 84 (allocation_expression -> NEW new_type_name new_initializer .)
    MODEQOP         reduce using rule 84 (allocation_expression -> NEW new_type_name new_initializer .)
    PLUSEQOP        reduce using rule 84 (allocation_expression -> NEW new_type_name new_initializer .)
    MINUSEQOP       reduce using rule 84 (allocation_expression -> NEW new_type_name new_initializer .)
    LSHIFTEQOP      reduce using rule 84 (allocation_expression -> NEW new_type_name new_initializer .)
    RSHIFTEQOP      reduce using rule 84 (allocation_expression -> NEW new_type_name new_initializer .)
    BANDEQOP        reduce using rule 84 (allocation_expression -> NEW new_type_name new_initializer .)
    BOREQOP         reduce using rule 84 (allocation_expression -> NEW new_type_name new_initializer .)
    DOTSTAR         reduce using rule 84 (allocation_expression -> NEW new_type_name new_initializer .)
    ARROWSTAR       reduce using rule 84 (allocation_expression -> NEW new_type_name new_initializer .)
    MULTOP          reduce using rule 84 (allocation_expression -> NEW new_type_name new_initializer .)
    DIVOP           reduce using rule 84 (allocation_expression -> NEW new_type_name new_initializer .)
    MODOP           reduce using rule 84 (allocation_expression -> NEW new_type_name new_initializer .)
    PLUSOP          reduce using rule 84 (allocation_expression -> NEW new_type_name new_initializer .)
    MINUSOP         reduce using rule 84 (allocation_expression -> NEW new_type_name new_initializer .)
    LSHIFT          reduce using rule 84 (allocation_expression -> NEW new_type_name new_initializer .)
    RSHIFT          reduce using rule 84 (allocation_expression -> NEW new_type_name new_initializer .)
    LTCOMP          reduce using rule 84 (allocation_expression -> NEW new_type_name new_initializer .)
    GTCOMP          reduce using rule 84 (allocation_expression -> NEW new_type_name new_initializer .)
    LTECOMP         reduce using rule 84 (allocation_expression -> NEW new_type_name new_initializer .)
    GTECOMP         reduce using rule 84 (allocation_expression -> NEW new_type_name new_initializer .)
    EQCOMP          reduce using rule 84 (allocation_expression -> NEW new_type_name new_initializer .)
    NEQCOMP         reduce using rule 84 (allocation_expression -> NEW new_type_name new_initializer .)
    BANDOP          reduce using rule 84 (allocation_expression -> NEW new_type_name new_initializer .)
    XOROP           reduce using rule 84 (allocation_expression -> NEW new_type_name new_initializer .)
    OROP            reduce using rule 84 (allocation_expression -> NEW new_type_name new_initializer .)
    ANDOP           reduce using rule 84 (allocation_expression -> NEW new_type_name new_initializer .)
    QUESMARK        reduce using rule 84 (allocation_expression -> NEW new_type_name new_initializer .)
    RPAREN          reduce using rule 84 (allocation_expression -> NEW new_type_name new_initializer .)
    COMMA           reduce using rule 84 (allocation_expression -> NEW new_type_name new_initializer .)
    RSPAREN         reduce using rule 84 (allocation_expression -> NEW new_type_name new_initializer .)
    SEMICOLON       reduce using rule 84 (allocation_expression -> NEW new_type_name new_initializer .)
    RCPAREN         reduce using rule 84 (allocation_expression -> NEW new_type_name new_initializer .)
    COLON           reduce using rule 84 (allocation_expression -> NEW new_type_name new_initializer .)
    RTEMPLATE       reduce using rule 84 (allocation_expression -> NEW new_type_name new_initializer .)


state 404

    (98) new_initializer -> LPAREN . initializer_list RPAREN
    (99) new_initializer -> LPAREN . RPAREN
    (238) initializer_list -> . assignment_expression
    (239) initializer_list -> . initializer_list COMMA assignment_expression
    (240) initializer_list -> . LCPAREN initializer_list RCPAREN
    (241) initializer_list -> . LCPAREN initializer_list COMMA RCPAREN
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (26) conditional_expression -> . logical_OR_expression
    (27) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (28) logical_OR_expression -> . logical_AND_expression
    (29) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (30) logical_AND_expression -> . inclusive_OR_expression
    (31) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (32) inclusive_OR_expression -> . exclusive_OR_expression
    (33) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (264) operator_function_name -> . OPERATOR operator_name
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 483
    LCPAREN         shift and go to state 315
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    LPAREN          shift and go to state 128
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    initializer_list               shift and go to state 482
    assignment_expression          shift and go to state 317
    conditional_expression         shift and go to state 135
    unary_expression               shift and go to state 136
    logical_OR_expression          shift and go to state 138
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    cast_expression                shift and go to state 143
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    logical_AND_expression         shift and go to state 148
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    name                           shift and go to state 151
    inclusive_OR_expression        shift and go to state 158
    literal                        shift and go to state 159
    exclusive_OR_expression        shift and go to state 161
    operator_function_name         shift and go to state 32
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171

state 405

    (88) allocation_expression -> NEW LPAREN type_name . RPAREN new_initializer
    (90) allocation_expression -> NEW LPAREN type_name . RPAREN

    RPAREN          shift and go to state 484


state 406

    (97) placement -> LPAREN expression_list . RPAREN
    (246) expression_list -> expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 485
    COMMA           shift and go to state 254


state 407

    (91) new_type_name -> type_specifier_list new_declarator .
    (95) new_declarator -> new_declarator . LSPAREN expression RSPAREN

    LPAREN          reduce using rule 91 (new_type_name -> type_specifier_list new_declarator .)
    EQUAL           reduce using rule 91 (new_type_name -> type_specifier_list new_declarator .)
    MULTEQOP        reduce using rule 91 (new_type_name -> type_specifier_list new_declarator .)
    DIVEQOP         reduce using rule 91 (new_type_name -> type_specifier_list new_declarator .)
    MODEQOP         reduce using rule 91 (new_type_name -> type_specifier_list new_declarator .)
    PLUSEQOP        reduce using rule 91 (new_type_name -> type_specifier_list new_declarator .)
    MINUSEQOP       reduce using rule 91 (new_type_name -> type_specifier_list new_declarator .)
    LSHIFTEQOP      reduce using rule 91 (new_type_name -> type_specifier_list new_declarator .)
    RSHIFTEQOP      reduce using rule 91 (new_type_name -> type_specifier_list new_declarator .)
    BANDEQOP        reduce using rule 91 (new_type_name -> type_specifier_list new_declarator .)
    BOREQOP         reduce using rule 91 (new_type_name -> type_specifier_list new_declarator .)
    DOTSTAR         reduce using rule 91 (new_type_name -> type_specifier_list new_declarator .)
    ARROWSTAR       reduce using rule 91 (new_type_name -> type_specifier_list new_declarator .)
    MULTOP          reduce using rule 91 (new_type_name -> type_specifier_list new_declarator .)
    DIVOP           reduce using rule 91 (new_type_name -> type_specifier_list new_declarator .)
    MODOP           reduce using rule 91 (new_type_name -> type_specifier_list new_declarator .)
    PLUSOP          reduce using rule 91 (new_type_name -> type_specifier_list new_declarator .)
    MINUSOP         reduce using rule 91 (new_type_name -> type_specifier_list new_declarator .)
    LSHIFT          reduce using rule 91 (new_type_name -> type_specifier_list new_declarator .)
    RSHIFT          reduce using rule 91 (new_type_name -> type_specifier_list new_declarator .)
    LTCOMP          reduce using rule 91 (new_type_name -> type_specifier_list new_declarator .)
    GTCOMP          reduce using rule 91 (new_type_name -> type_specifier_list new_declarator .)
    LTECOMP         reduce using rule 91 (new_type_name -> type_specifier_list new_declarator .)
    GTECOMP         reduce using rule 91 (new_type_name -> type_specifier_list new_declarator .)
    EQCOMP          reduce using rule 91 (new_type_name -> type_specifier_list new_declarator .)
    NEQCOMP         reduce using rule 91 (new_type_name -> type_specifier_list new_declarator .)
    BANDOP          reduce using rule 91 (new_type_name -> type_specifier_list new_declarator .)
    XOROP           reduce using rule 91 (new_type_name -> type_specifier_list new_declarator .)
    OROP            reduce using rule 91 (new_type_name -> type_specifier_list new_declarator .)
    ANDOP           reduce using rule 91 (new_type_name -> type_specifier_list new_declarator .)
    QUESMARK        reduce using rule 91 (new_type_name -> type_specifier_list new_declarator .)
    RPAREN          reduce using rule 91 (new_type_name -> type_specifier_list new_declarator .)
    COMMA           reduce using rule 91 (new_type_name -> type_specifier_list new_declarator .)
    RSPAREN         reduce using rule 91 (new_type_name -> type_specifier_list new_declarator .)
    SEMICOLON       reduce using rule 91 (new_type_name -> type_specifier_list new_declarator .)
    RCPAREN         reduce using rule 91 (new_type_name -> type_specifier_list new_declarator .)
    COLON           reduce using rule 91 (new_type_name -> type_specifier_list new_declarator .)
    RTEMPLATE       reduce using rule 91 (new_type_name -> type_specifier_list new_declarator .)
    LSPAREN         shift and go to state 486


state 408

    (93) new_declarator -> MULTOP . new_declarator
    (94) new_declarator -> MULTOP .
    (93) new_declarator -> . MULTOP new_declarator
    (94) new_declarator -> . MULTOP
    (95) new_declarator -> . new_declarator LSPAREN expression RSPAREN
    (96) new_declarator -> . LSPAREN expression RSPAREN

    LSPAREN         reduce using rule 94 (new_declarator -> MULTOP .)
    LPAREN          reduce using rule 94 (new_declarator -> MULTOP .)
    EQUAL           reduce using rule 94 (new_declarator -> MULTOP .)
    MULTEQOP        reduce using rule 94 (new_declarator -> MULTOP .)
    DIVEQOP         reduce using rule 94 (new_declarator -> MULTOP .)
    MODEQOP         reduce using rule 94 (new_declarator -> MULTOP .)
    PLUSEQOP        reduce using rule 94 (new_declarator -> MULTOP .)
    MINUSEQOP       reduce using rule 94 (new_declarator -> MULTOP .)
    LSHIFTEQOP      reduce using rule 94 (new_declarator -> MULTOP .)
    RSHIFTEQOP      reduce using rule 94 (new_declarator -> MULTOP .)
    BANDEQOP        reduce using rule 94 (new_declarator -> MULTOP .)
    BOREQOP         reduce using rule 94 (new_declarator -> MULTOP .)
    DOTSTAR         reduce using rule 94 (new_declarator -> MULTOP .)
    ARROWSTAR       reduce using rule 94 (new_declarator -> MULTOP .)
    MULTOP          reduce using rule 94 (new_declarator -> MULTOP .)
    DIVOP           reduce using rule 94 (new_declarator -> MULTOP .)
    MODOP           reduce using rule 94 (new_declarator -> MULTOP .)
    PLUSOP          reduce using rule 94 (new_declarator -> MULTOP .)
    MINUSOP         reduce using rule 94 (new_declarator -> MULTOP .)
    LSHIFT          reduce using rule 94 (new_declarator -> MULTOP .)
    RSHIFT          reduce using rule 94 (new_declarator -> MULTOP .)
    LTCOMP          reduce using rule 94 (new_declarator -> MULTOP .)
    GTCOMP          reduce using rule 94 (new_declarator -> MULTOP .)
    LTECOMP         reduce using rule 94 (new_declarator -> MULTOP .)
    GTECOMP         reduce using rule 94 (new_declarator -> MULTOP .)
    EQCOMP          reduce using rule 94 (new_declarator -> MULTOP .)
    NEQCOMP         reduce using rule 94 (new_declarator -> MULTOP .)
    BANDOP          reduce using rule 94 (new_declarator -> MULTOP .)
    XOROP           reduce using rule 94 (new_declarator -> MULTOP .)
    OROP            reduce using rule 94 (new_declarator -> MULTOP .)
    ANDOP           reduce using rule 94 (new_declarator -> MULTOP .)
    QUESMARK        reduce using rule 94 (new_declarator -> MULTOP .)
    RPAREN          reduce using rule 94 (new_declarator -> MULTOP .)
    COMMA           reduce using rule 94 (new_declarator -> MULTOP .)
    RSPAREN         reduce using rule 94 (new_declarator -> MULTOP .)
    SEMICOLON       reduce using rule 94 (new_declarator -> MULTOP .)
    RCPAREN         reduce using rule 94 (new_declarator -> MULTOP .)
    COLON           reduce using rule 94 (new_declarator -> MULTOP .)
    RTEMPLATE       reduce using rule 94 (new_declarator -> MULTOP .)

  ! MULTOP          [ shift and go to state 408 ]
  ! LSPAREN         [ shift and go to state 409 ]

    new_declarator                 shift and go to state 487

state 409

    (96) new_declarator -> LSPAREN . expression RSPAREN
    (59) expression -> . assignment_expression
    (60) expression -> . expression COMMA assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (26) conditional_expression -> . logical_OR_expression
    (27) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (28) logical_OR_expression -> . logical_AND_expression
    (29) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (30) logical_AND_expression -> . inclusive_OR_expression
    (31) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (32) inclusive_OR_expression -> . exclusive_OR_expression
    (33) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (264) operator_function_name -> . OPERATOR operator_name
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    LPAREN          shift and go to state 128
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    expression                     shift and go to state 488
    assignment_expression          shift and go to state 208
    conditional_expression         shift and go to state 135
    unary_expression               shift and go to state 136
    logical_OR_expression          shift and go to state 138
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    cast_expression                shift and go to state 143
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    logical_AND_expression         shift and go to state 148
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    name                           shift and go to state 151
    inclusive_OR_expression        shift and go to state 158
    literal                        shift and go to state 159
    exclusive_OR_expression        shift and go to state 161
    operator_function_name         shift and go to state 32
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171

state 410

    (33) inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .
    (35) exclusive_OR_expression -> exclusive_OR_expression . XOROP AND_expression

    OROP            reduce using rule 33 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    ANDOP           reduce using rule 33 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    QUESMARK        reduce using rule 33 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    RPAREN          reduce using rule 33 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    COMMA           reduce using rule 33 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    RSPAREN         reduce using rule 33 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    SEMICOLON       reduce using rule 33 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    RCPAREN         reduce using rule 33 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    COLON           reduce using rule 33 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    RTEMPLATE       reduce using rule 33 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    XOROP           shift and go to state 297


state 411

    (35) exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .
    (37) AND_expression -> AND_expression . BANDOP equality_expression

    XOROP           reduce using rule 35 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    OROP            reduce using rule 35 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    ANDOP           reduce using rule 35 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    QUESMARK        reduce using rule 35 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    RPAREN          reduce using rule 35 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    COMMA           reduce using rule 35 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    RSPAREN         reduce using rule 35 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    SEMICOLON       reduce using rule 35 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    RCPAREN         reduce using rule 35 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    COLON           reduce using rule 35 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    RTEMPLATE       reduce using rule 35 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    BANDOP          shift and go to state 298


state 412

    (37) AND_expression -> AND_expression BANDOP equality_expression .
    (39) equality_expression -> equality_expression . EQCOMP relational_expression
    (40) equality_expression -> equality_expression . NEQCOMP relational_expression

    BANDOP          reduce using rule 37 (AND_expression -> AND_expression BANDOP equality_expression .)
    XOROP           reduce using rule 37 (AND_expression -> AND_expression BANDOP equality_expression .)
    OROP            reduce using rule 37 (AND_expression -> AND_expression BANDOP equality_expression .)
    ANDOP           reduce using rule 37 (AND_expression -> AND_expression BANDOP equality_expression .)
    QUESMARK        reduce using rule 37 (AND_expression -> AND_expression BANDOP equality_expression .)
    RPAREN          reduce using rule 37 (AND_expression -> AND_expression BANDOP equality_expression .)
    COMMA           reduce using rule 37 (AND_expression -> AND_expression BANDOP equality_expression .)
    RSPAREN         reduce using rule 37 (AND_expression -> AND_expression BANDOP equality_expression .)
    SEMICOLON       reduce using rule 37 (AND_expression -> AND_expression BANDOP equality_expression .)
    RCPAREN         reduce using rule 37 (AND_expression -> AND_expression BANDOP equality_expression .)
    COLON           reduce using rule 37 (AND_expression -> AND_expression BANDOP equality_expression .)
    RTEMPLATE       reduce using rule 37 (AND_expression -> AND_expression BANDOP equality_expression .)
    EQCOMP          shift and go to state 299
    NEQCOMP         shift and go to state 300


state 413

    (39) equality_expression -> equality_expression EQCOMP relational_expression .
    (42) relational_expression -> relational_expression . LTCOMP shift_expression
    (43) relational_expression -> relational_expression . GTCOMP shift_expression
    (44) relational_expression -> relational_expression . LTECOMP shift_expression
    (45) relational_expression -> relational_expression . GTECOMP shift_expression

    EQCOMP          reduce using rule 39 (equality_expression -> equality_expression EQCOMP relational_expression .)
    NEQCOMP         reduce using rule 39 (equality_expression -> equality_expression EQCOMP relational_expression .)
    BANDOP          reduce using rule 39 (equality_expression -> equality_expression EQCOMP relational_expression .)
    XOROP           reduce using rule 39 (equality_expression -> equality_expression EQCOMP relational_expression .)
    OROP            reduce using rule 39 (equality_expression -> equality_expression EQCOMP relational_expression .)
    ANDOP           reduce using rule 39 (equality_expression -> equality_expression EQCOMP relational_expression .)
    QUESMARK        reduce using rule 39 (equality_expression -> equality_expression EQCOMP relational_expression .)
    RPAREN          reduce using rule 39 (equality_expression -> equality_expression EQCOMP relational_expression .)
    COMMA           reduce using rule 39 (equality_expression -> equality_expression EQCOMP relational_expression .)
    RSPAREN         reduce using rule 39 (equality_expression -> equality_expression EQCOMP relational_expression .)
    SEMICOLON       reduce using rule 39 (equality_expression -> equality_expression EQCOMP relational_expression .)
    RCPAREN         reduce using rule 39 (equality_expression -> equality_expression EQCOMP relational_expression .)
    COLON           reduce using rule 39 (equality_expression -> equality_expression EQCOMP relational_expression .)
    RTEMPLATE       reduce using rule 39 (equality_expression -> equality_expression EQCOMP relational_expression .)
    LTCOMP          shift and go to state 301
    GTCOMP          shift and go to state 302
    LTECOMP         shift and go to state 303
    GTECOMP         shift and go to state 304


state 414

    (40) equality_expression -> equality_expression NEQCOMP relational_expression .
    (42) relational_expression -> relational_expression . LTCOMP shift_expression
    (43) relational_expression -> relational_expression . GTCOMP shift_expression
    (44) relational_expression -> relational_expression . LTECOMP shift_expression
    (45) relational_expression -> relational_expression . GTECOMP shift_expression

    EQCOMP          reduce using rule 40 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    NEQCOMP         reduce using rule 40 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    BANDOP          reduce using rule 40 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    XOROP           reduce using rule 40 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    OROP            reduce using rule 40 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    ANDOP           reduce using rule 40 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    QUESMARK        reduce using rule 40 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    RPAREN          reduce using rule 40 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    COMMA           reduce using rule 40 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    RSPAREN         reduce using rule 40 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    SEMICOLON       reduce using rule 40 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    RCPAREN         reduce using rule 40 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    COLON           reduce using rule 40 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    RTEMPLATE       reduce using rule 40 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    LTCOMP          shift and go to state 301
    GTCOMP          shift and go to state 302
    LTECOMP         shift and go to state 303
    GTECOMP         shift and go to state 304


state 415

    (42) relational_expression -> relational_expression LTCOMP shift_expression .
    (47) shift_expression -> shift_expression . LSHIFT additive_expression
    (48) shift_expression -> shift_expression . RSHIFT additive_expression

    LTCOMP          reduce using rule 42 (relational_expression -> relational_expression LTCOMP shift_expression .)
    GTCOMP          reduce using rule 42 (relational_expression -> relational_expression LTCOMP shift_expression .)
    LTECOMP         reduce using rule 42 (relational_expression -> relational_expression LTCOMP shift_expression .)
    GTECOMP         reduce using rule 42 (relational_expression -> relational_expression LTCOMP shift_expression .)
    EQCOMP          reduce using rule 42 (relational_expression -> relational_expression LTCOMP shift_expression .)
    NEQCOMP         reduce using rule 42 (relational_expression -> relational_expression LTCOMP shift_expression .)
    BANDOP          reduce using rule 42 (relational_expression -> relational_expression LTCOMP shift_expression .)
    XOROP           reduce using rule 42 (relational_expression -> relational_expression LTCOMP shift_expression .)
    OROP            reduce using rule 42 (relational_expression -> relational_expression LTCOMP shift_expression .)
    ANDOP           reduce using rule 42 (relational_expression -> relational_expression LTCOMP shift_expression .)
    QUESMARK        reduce using rule 42 (relational_expression -> relational_expression LTCOMP shift_expression .)
    RPAREN          reduce using rule 42 (relational_expression -> relational_expression LTCOMP shift_expression .)
    COMMA           reduce using rule 42 (relational_expression -> relational_expression LTCOMP shift_expression .)
    RSPAREN         reduce using rule 42 (relational_expression -> relational_expression LTCOMP shift_expression .)
    SEMICOLON       reduce using rule 42 (relational_expression -> relational_expression LTCOMP shift_expression .)
    RCPAREN         reduce using rule 42 (relational_expression -> relational_expression LTCOMP shift_expression .)
    COLON           reduce using rule 42 (relational_expression -> relational_expression LTCOMP shift_expression .)
    RTEMPLATE       reduce using rule 42 (relational_expression -> relational_expression LTCOMP shift_expression .)
    LSHIFT          shift and go to state 305
    RSHIFT          shift and go to state 306


state 416

    (43) relational_expression -> relational_expression GTCOMP shift_expression .
    (47) shift_expression -> shift_expression . LSHIFT additive_expression
    (48) shift_expression -> shift_expression . RSHIFT additive_expression

    LTCOMP          reduce using rule 43 (relational_expression -> relational_expression GTCOMP shift_expression .)
    GTCOMP          reduce using rule 43 (relational_expression -> relational_expression GTCOMP shift_expression .)
    LTECOMP         reduce using rule 43 (relational_expression -> relational_expression GTCOMP shift_expression .)
    GTECOMP         reduce using rule 43 (relational_expression -> relational_expression GTCOMP shift_expression .)
    EQCOMP          reduce using rule 43 (relational_expression -> relational_expression GTCOMP shift_expression .)
    NEQCOMP         reduce using rule 43 (relational_expression -> relational_expression GTCOMP shift_expression .)
    BANDOP          reduce using rule 43 (relational_expression -> relational_expression GTCOMP shift_expression .)
    XOROP           reduce using rule 43 (relational_expression -> relational_expression GTCOMP shift_expression .)
    OROP            reduce using rule 43 (relational_expression -> relational_expression GTCOMP shift_expression .)
    ANDOP           reduce using rule 43 (relational_expression -> relational_expression GTCOMP shift_expression .)
    QUESMARK        reduce using rule 43 (relational_expression -> relational_expression GTCOMP shift_expression .)
    RPAREN          reduce using rule 43 (relational_expression -> relational_expression GTCOMP shift_expression .)
    COMMA           reduce using rule 43 (relational_expression -> relational_expression GTCOMP shift_expression .)
    RSPAREN         reduce using rule 43 (relational_expression -> relational_expression GTCOMP shift_expression .)
    SEMICOLON       reduce using rule 43 (relational_expression -> relational_expression GTCOMP shift_expression .)
    RCPAREN         reduce using rule 43 (relational_expression -> relational_expression GTCOMP shift_expression .)
    COLON           reduce using rule 43 (relational_expression -> relational_expression GTCOMP shift_expression .)
    RTEMPLATE       reduce using rule 43 (relational_expression -> relational_expression GTCOMP shift_expression .)
    LSHIFT          shift and go to state 305
    RSHIFT          shift and go to state 306


state 417

    (44) relational_expression -> relational_expression LTECOMP shift_expression .
    (47) shift_expression -> shift_expression . LSHIFT additive_expression
    (48) shift_expression -> shift_expression . RSHIFT additive_expression

    LTCOMP          reduce using rule 44 (relational_expression -> relational_expression LTECOMP shift_expression .)
    GTCOMP          reduce using rule 44 (relational_expression -> relational_expression LTECOMP shift_expression .)
    LTECOMP         reduce using rule 44 (relational_expression -> relational_expression LTECOMP shift_expression .)
    GTECOMP         reduce using rule 44 (relational_expression -> relational_expression LTECOMP shift_expression .)
    EQCOMP          reduce using rule 44 (relational_expression -> relational_expression LTECOMP shift_expression .)
    NEQCOMP         reduce using rule 44 (relational_expression -> relational_expression LTECOMP shift_expression .)
    BANDOP          reduce using rule 44 (relational_expression -> relational_expression LTECOMP shift_expression .)
    XOROP           reduce using rule 44 (relational_expression -> relational_expression LTECOMP shift_expression .)
    OROP            reduce using rule 44 (relational_expression -> relational_expression LTECOMP shift_expression .)
    ANDOP           reduce using rule 44 (relational_expression -> relational_expression LTECOMP shift_expression .)
    QUESMARK        reduce using rule 44 (relational_expression -> relational_expression LTECOMP shift_expression .)
    RPAREN          reduce using rule 44 (relational_expression -> relational_expression LTECOMP shift_expression .)
    COMMA           reduce using rule 44 (relational_expression -> relational_expression LTECOMP shift_expression .)
    RSPAREN         reduce using rule 44 (relational_expression -> relational_expression LTECOMP shift_expression .)
    SEMICOLON       reduce using rule 44 (relational_expression -> relational_expression LTECOMP shift_expression .)
    RCPAREN         reduce using rule 44 (relational_expression -> relational_expression LTECOMP shift_expression .)
    COLON           reduce using rule 44 (relational_expression -> relational_expression LTECOMP shift_expression .)
    RTEMPLATE       reduce using rule 44 (relational_expression -> relational_expression LTECOMP shift_expression .)
    LSHIFT          shift and go to state 305
    RSHIFT          shift and go to state 306


state 418

    (45) relational_expression -> relational_expression GTECOMP shift_expression .
    (47) shift_expression -> shift_expression . LSHIFT additive_expression
    (48) shift_expression -> shift_expression . RSHIFT additive_expression

    LTCOMP          reduce using rule 45 (relational_expression -> relational_expression GTECOMP shift_expression .)
    GTCOMP          reduce using rule 45 (relational_expression -> relational_expression GTECOMP shift_expression .)
    LTECOMP         reduce using rule 45 (relational_expression -> relational_expression GTECOMP shift_expression .)
    GTECOMP         reduce using rule 45 (relational_expression -> relational_expression GTECOMP shift_expression .)
    EQCOMP          reduce using rule 45 (relational_expression -> relational_expression GTECOMP shift_expression .)
    NEQCOMP         reduce using rule 45 (relational_expression -> relational_expression GTECOMP shift_expression .)
    BANDOP          reduce using rule 45 (relational_expression -> relational_expression GTECOMP shift_expression .)
    XOROP           reduce using rule 45 (relational_expression -> relational_expression GTECOMP shift_expression .)
    OROP            reduce using rule 45 (relational_expression -> relational_expression GTECOMP shift_expression .)
    ANDOP           reduce using rule 45 (relational_expression -> relational_expression GTECOMP shift_expression .)
    QUESMARK        reduce using rule 45 (relational_expression -> relational_expression GTECOMP shift_expression .)
    RPAREN          reduce using rule 45 (relational_expression -> relational_expression GTECOMP shift_expression .)
    COMMA           reduce using rule 45 (relational_expression -> relational_expression GTECOMP shift_expression .)
    RSPAREN         reduce using rule 45 (relational_expression -> relational_expression GTECOMP shift_expression .)
    SEMICOLON       reduce using rule 45 (relational_expression -> relational_expression GTECOMP shift_expression .)
    RCPAREN         reduce using rule 45 (relational_expression -> relational_expression GTECOMP shift_expression .)
    COLON           reduce using rule 45 (relational_expression -> relational_expression GTECOMP shift_expression .)
    RTEMPLATE       reduce using rule 45 (relational_expression -> relational_expression GTECOMP shift_expression .)
    LSHIFT          shift and go to state 305
    RSHIFT          shift and go to state 306


state 419

    (47) shift_expression -> shift_expression LSHIFT additive_expression .
    (50) additive_expression -> additive_expression . PLUSOP multiplicative_expression
    (51) additive_expression -> additive_expression . MINUSOP multiplicative_expression

    LSHIFT          reduce using rule 47 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RSHIFT          reduce using rule 47 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LTCOMP          reduce using rule 47 (shift_expression -> shift_expression LSHIFT additive_expression .)
    GTCOMP          reduce using rule 47 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LTECOMP         reduce using rule 47 (shift_expression -> shift_expression LSHIFT additive_expression .)
    GTECOMP         reduce using rule 47 (shift_expression -> shift_expression LSHIFT additive_expression .)
    EQCOMP          reduce using rule 47 (shift_expression -> shift_expression LSHIFT additive_expression .)
    NEQCOMP         reduce using rule 47 (shift_expression -> shift_expression LSHIFT additive_expression .)
    BANDOP          reduce using rule 47 (shift_expression -> shift_expression LSHIFT additive_expression .)
    XOROP           reduce using rule 47 (shift_expression -> shift_expression LSHIFT additive_expression .)
    OROP            reduce using rule 47 (shift_expression -> shift_expression LSHIFT additive_expression .)
    ANDOP           reduce using rule 47 (shift_expression -> shift_expression LSHIFT additive_expression .)
    QUESMARK        reduce using rule 47 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RPAREN          reduce using rule 47 (shift_expression -> shift_expression LSHIFT additive_expression .)
    COMMA           reduce using rule 47 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RSPAREN         reduce using rule 47 (shift_expression -> shift_expression LSHIFT additive_expression .)
    SEMICOLON       reduce using rule 47 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RCPAREN         reduce using rule 47 (shift_expression -> shift_expression LSHIFT additive_expression .)
    COLON           reduce using rule 47 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RTEMPLATE       reduce using rule 47 (shift_expression -> shift_expression LSHIFT additive_expression .)
    PLUSOP          shift and go to state 307
    MINUSOP         shift and go to state 308


state 420

    (48) shift_expression -> shift_expression RSHIFT additive_expression .
    (50) additive_expression -> additive_expression . PLUSOP multiplicative_expression
    (51) additive_expression -> additive_expression . MINUSOP multiplicative_expression

    LSHIFT          reduce using rule 48 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RSHIFT          reduce using rule 48 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LTCOMP          reduce using rule 48 (shift_expression -> shift_expression RSHIFT additive_expression .)
    GTCOMP          reduce using rule 48 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LTECOMP         reduce using rule 48 (shift_expression -> shift_expression RSHIFT additive_expression .)
    GTECOMP         reduce using rule 48 (shift_expression -> shift_expression RSHIFT additive_expression .)
    EQCOMP          reduce using rule 48 (shift_expression -> shift_expression RSHIFT additive_expression .)
    NEQCOMP         reduce using rule 48 (shift_expression -> shift_expression RSHIFT additive_expression .)
    BANDOP          reduce using rule 48 (shift_expression -> shift_expression RSHIFT additive_expression .)
    XOROP           reduce using rule 48 (shift_expression -> shift_expression RSHIFT additive_expression .)
    OROP            reduce using rule 48 (shift_expression -> shift_expression RSHIFT additive_expression .)
    ANDOP           reduce using rule 48 (shift_expression -> shift_expression RSHIFT additive_expression .)
    QUESMARK        reduce using rule 48 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RPAREN          reduce using rule 48 (shift_expression -> shift_expression RSHIFT additive_expression .)
    COMMA           reduce using rule 48 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RSPAREN         reduce using rule 48 (shift_expression -> shift_expression RSHIFT additive_expression .)
    SEMICOLON       reduce using rule 48 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RCPAREN         reduce using rule 48 (shift_expression -> shift_expression RSHIFT additive_expression .)
    COLON           reduce using rule 48 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RTEMPLATE       reduce using rule 48 (shift_expression -> shift_expression RSHIFT additive_expression .)
    PLUSOP          shift and go to state 307
    MINUSOP         shift and go to state 308


state 421

    (50) additive_expression -> additive_expression PLUSOP multiplicative_expression .
    (53) multiplicative_expression -> multiplicative_expression . MULTOP pm_expression
    (54) multiplicative_expression -> multiplicative_expression . DIVOP pm_expression
    (55) multiplicative_expression -> multiplicative_expression . MODOP pm_expression

    PLUSOP          reduce using rule 50 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    MINUSOP         reduce using rule 50 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    LSHIFT          reduce using rule 50 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    RSHIFT          reduce using rule 50 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    LTCOMP          reduce using rule 50 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    GTCOMP          reduce using rule 50 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    LTECOMP         reduce using rule 50 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    GTECOMP         reduce using rule 50 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    EQCOMP          reduce using rule 50 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    NEQCOMP         reduce using rule 50 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    BANDOP          reduce using rule 50 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    XOROP           reduce using rule 50 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    OROP            reduce using rule 50 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    ANDOP           reduce using rule 50 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    QUESMARK        reduce using rule 50 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    RPAREN          reduce using rule 50 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    COMMA           reduce using rule 50 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    RSPAREN         reduce using rule 50 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    SEMICOLON       reduce using rule 50 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    RCPAREN         reduce using rule 50 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    COLON           reduce using rule 50 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    RTEMPLATE       reduce using rule 50 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    MULTOP          shift and go to state 309
    DIVOP           shift and go to state 310
    MODOP           shift and go to state 311


state 422

    (51) additive_expression -> additive_expression MINUSOP multiplicative_expression .
    (53) multiplicative_expression -> multiplicative_expression . MULTOP pm_expression
    (54) multiplicative_expression -> multiplicative_expression . DIVOP pm_expression
    (55) multiplicative_expression -> multiplicative_expression . MODOP pm_expression

    PLUSOP          reduce using rule 51 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    MINUSOP         reduce using rule 51 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    LSHIFT          reduce using rule 51 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    RSHIFT          reduce using rule 51 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    LTCOMP          reduce using rule 51 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    GTCOMP          reduce using rule 51 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    LTECOMP         reduce using rule 51 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    GTECOMP         reduce using rule 51 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    EQCOMP          reduce using rule 51 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    NEQCOMP         reduce using rule 51 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    BANDOP          reduce using rule 51 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    XOROP           reduce using rule 51 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    OROP            reduce using rule 51 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    ANDOP           reduce using rule 51 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    QUESMARK        reduce using rule 51 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    RPAREN          reduce using rule 51 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    COMMA           reduce using rule 51 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    RSPAREN         reduce using rule 51 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    SEMICOLON       reduce using rule 51 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    RCPAREN         reduce using rule 51 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    COLON           reduce using rule 51 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    RTEMPLATE       reduce using rule 51 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    MULTOP          shift and go to state 309
    DIVOP           shift and go to state 310
    MODOP           shift and go to state 311


state 423

    (53) multiplicative_expression -> multiplicative_expression MULTOP pm_expression .
    (57) pm_expression -> pm_expression . DOTSTAR cast_expression
    (58) pm_expression -> pm_expression . ARROWSTAR cast_expression

    MULTOP          reduce using rule 53 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    DIVOP           reduce using rule 53 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    MODOP           reduce using rule 53 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    PLUSOP          reduce using rule 53 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    MINUSOP         reduce using rule 53 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    LSHIFT          reduce using rule 53 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    RSHIFT          reduce using rule 53 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    LTCOMP          reduce using rule 53 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    GTCOMP          reduce using rule 53 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    LTECOMP         reduce using rule 53 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    GTECOMP         reduce using rule 53 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    EQCOMP          reduce using rule 53 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    NEQCOMP         reduce using rule 53 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    BANDOP          reduce using rule 53 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    XOROP           reduce using rule 53 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    OROP            reduce using rule 53 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    ANDOP           reduce using rule 53 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    QUESMARK        reduce using rule 53 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    RPAREN          reduce using rule 53 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    COMMA           reduce using rule 53 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    RSPAREN         reduce using rule 53 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    SEMICOLON       reduce using rule 53 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    RCPAREN         reduce using rule 53 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    COLON           reduce using rule 53 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    RTEMPLATE       reduce using rule 53 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    DOTSTAR         shift and go to state 312
    ARROWSTAR       shift and go to state 313


state 424

    (54) multiplicative_expression -> multiplicative_expression DIVOP pm_expression .
    (57) pm_expression -> pm_expression . DOTSTAR cast_expression
    (58) pm_expression -> pm_expression . ARROWSTAR cast_expression

    MULTOP          reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    DIVOP           reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    MODOP           reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    PLUSOP          reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    MINUSOP         reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    LSHIFT          reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    RSHIFT          reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    LTCOMP          reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    GTCOMP          reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    LTECOMP         reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    GTECOMP         reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    EQCOMP          reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    NEQCOMP         reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    BANDOP          reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    XOROP           reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    OROP            reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    ANDOP           reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    QUESMARK        reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    RPAREN          reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    COMMA           reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    RSPAREN         reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    SEMICOLON       reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    RCPAREN         reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    COLON           reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    RTEMPLATE       reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    DOTSTAR         shift and go to state 312
    ARROWSTAR       shift and go to state 313


state 425

    (55) multiplicative_expression -> multiplicative_expression MODOP pm_expression .
    (57) pm_expression -> pm_expression . DOTSTAR cast_expression
    (58) pm_expression -> pm_expression . ARROWSTAR cast_expression

    MULTOP          reduce using rule 55 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    DIVOP           reduce using rule 55 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    MODOP           reduce using rule 55 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    PLUSOP          reduce using rule 55 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    MINUSOP         reduce using rule 55 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    LSHIFT          reduce using rule 55 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    RSHIFT          reduce using rule 55 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    LTCOMP          reduce using rule 55 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    GTCOMP          reduce using rule 55 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    LTECOMP         reduce using rule 55 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    GTECOMP         reduce using rule 55 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    EQCOMP          reduce using rule 55 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    NEQCOMP         reduce using rule 55 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    BANDOP          reduce using rule 55 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    XOROP           reduce using rule 55 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    OROP            reduce using rule 55 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    ANDOP           reduce using rule 55 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    QUESMARK        reduce using rule 55 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    RPAREN          reduce using rule 55 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    COMMA           reduce using rule 55 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    RSPAREN         reduce using rule 55 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    SEMICOLON       reduce using rule 55 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    RCPAREN         reduce using rule 55 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    COLON           reduce using rule 55 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    RTEMPLATE       reduce using rule 55 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    DOTSTAR         shift and go to state 312
    ARROWSTAR       shift and go to state 313


state 426

    (57) pm_expression -> pm_expression DOTSTAR cast_expression .

    DOTSTAR         reduce using rule 57 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    ARROWSTAR       reduce using rule 57 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    MULTOP          reduce using rule 57 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    DIVOP           reduce using rule 57 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    MODOP           reduce using rule 57 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    PLUSOP          reduce using rule 57 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    MINUSOP         reduce using rule 57 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    LSHIFT          reduce using rule 57 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    RSHIFT          reduce using rule 57 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    LTCOMP          reduce using rule 57 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    GTCOMP          reduce using rule 57 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    LTECOMP         reduce using rule 57 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    GTECOMP         reduce using rule 57 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    EQCOMP          reduce using rule 57 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    NEQCOMP         reduce using rule 57 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    BANDOP          reduce using rule 57 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    XOROP           reduce using rule 57 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    OROP            reduce using rule 57 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    ANDOP           reduce using rule 57 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    QUESMARK        reduce using rule 57 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    RPAREN          reduce using rule 57 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    COMMA           reduce using rule 57 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    RSPAREN         reduce using rule 57 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    SEMICOLON       reduce using rule 57 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    RCPAREN         reduce using rule 57 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    COLON           reduce using rule 57 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    RTEMPLATE       reduce using rule 57 (pm_expression -> pm_expression DOTSTAR cast_expression .)


state 427

    (58) pm_expression -> pm_expression ARROWSTAR cast_expression .

    DOTSTAR         reduce using rule 58 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    ARROWSTAR       reduce using rule 58 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    MULTOP          reduce using rule 58 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    DIVOP           reduce using rule 58 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    MODOP           reduce using rule 58 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    PLUSOP          reduce using rule 58 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    MINUSOP         reduce using rule 58 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    LSHIFT          reduce using rule 58 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    RSHIFT          reduce using rule 58 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    LTCOMP          reduce using rule 58 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    GTCOMP          reduce using rule 58 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    LTECOMP         reduce using rule 58 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    GTECOMP         reduce using rule 58 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    EQCOMP          reduce using rule 58 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    NEQCOMP         reduce using rule 58 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    BANDOP          reduce using rule 58 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    XOROP           reduce using rule 58 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    OROP            reduce using rule 58 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    ANDOP           reduce using rule 58 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    QUESMARK        reduce using rule 58 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    RPAREN          reduce using rule 58 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    COMMA           reduce using rule 58 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    RSPAREN         reduce using rule 58 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    SEMICOLON       reduce using rule 58 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    RCPAREN         reduce using rule 58 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    COLON           reduce using rule 58 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    RTEMPLATE       reduce using rule 58 (pm_expression -> pm_expression ARROWSTAR cast_expression .)


state 428

    (240) initializer_list -> LCPAREN initializer_list . RCPAREN
    (241) initializer_list -> LCPAREN initializer_list . COMMA RCPAREN
    (239) initializer_list -> initializer_list . COMMA assignment_expression

    RCPAREN         shift and go to state 489
    COMMA           shift and go to state 490


state 429

    (235) initializer -> EQUAL LCPAREN initializer_list RCPAREN .

    SEMICOLON       reduce using rule 235 (initializer -> EQUAL LCPAREN initializer_list RCPAREN .)
    COMMA           reduce using rule 235 (initializer -> EQUAL LCPAREN initializer_list RCPAREN .)


state 430

    (236) initializer -> EQUAL LCPAREN initializer_list COMMA . RCPAREN
    (239) initializer_list -> initializer_list COMMA . assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (26) conditional_expression -> . logical_OR_expression
    (27) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (28) logical_OR_expression -> . logical_AND_expression
    (29) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (30) logical_AND_expression -> . inclusive_OR_expression
    (31) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (32) inclusive_OR_expression -> . exclusive_OR_expression
    (33) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (264) operator_function_name -> . OPERATOR operator_name
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RCPAREN         shift and go to state 491
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    LPAREN          shift and go to state 128
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    assignment_expression          shift and go to state 492
    conditional_expression         shift and go to state 135
    unary_expression               shift and go to state 136
    logical_OR_expression          shift and go to state 138
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    cast_expression                shift and go to state 143
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    logical_AND_expression         shift and go to state 148
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    name                           shift and go to state 151
    inclusive_OR_expression        shift and go to state 158
    literal                        shift and go to state 159
    exclusive_OR_expression        shift and go to state 161
    operator_function_name         shift and go to state 32
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171

state 431

    (207) labeled_statement -> IDENTIFIER COLON statement .

    RCPAREN         reduce using rule 207 (labeled_statement -> IDENTIFIER COLON statement .)
    IDENTIFIER      reduce using rule 207 (labeled_statement -> IDENTIFIER COLON statement .)
    CASE            reduce using rule 207 (labeled_statement -> IDENTIFIER COLON statement .)
    DEFAULT         reduce using rule 207 (labeled_statement -> IDENTIFIER COLON statement .)
    SEMICOLON       reduce using rule 207 (labeled_statement -> IDENTIFIER COLON statement .)
    LCPAREN         reduce using rule 207 (labeled_statement -> IDENTIFIER COLON statement .)
    IF              reduce using rule 207 (labeled_statement -> IDENTIFIER COLON statement .)
    SWITCH          reduce using rule 207 (labeled_statement -> IDENTIFIER COLON statement .)
    WHILE           reduce using rule 207 (labeled_statement -> IDENTIFIER COLON statement .)
    DO              reduce using rule 207 (labeled_statement -> IDENTIFIER COLON statement .)
    FOR             reduce using rule 207 (labeled_statement -> IDENTIFIER COLON statement .)
    BREAK           reduce using rule 207 (labeled_statement -> IDENTIFIER COLON statement .)
    CONTINUE        reduce using rule 207 (labeled_statement -> IDENTIFIER COLON statement .)
    RETURN          reduce using rule 207 (labeled_statement -> IDENTIFIER COLON statement .)
    GOTO            reduce using rule 207 (labeled_statement -> IDENTIFIER COLON statement .)
    TRY             reduce using rule 207 (labeled_statement -> IDENTIFIER COLON statement .)
    ASM             reduce using rule 207 (labeled_statement -> IDENTIFIER COLON statement .)
    TEMPLATE        reduce using rule 207 (labeled_statement -> IDENTIFIER COLON statement .)
    DPLUSOP         reduce using rule 207 (labeled_statement -> IDENTIFIER COLON statement .)
    DMINUSOP        reduce using rule 207 (labeled_statement -> IDENTIFIER COLON statement .)
    SIZEOF          reduce using rule 207 (labeled_statement -> IDENTIFIER COLON statement .)
    TYPEDEF         reduce using rule 207 (labeled_statement -> IDENTIFIER COLON statement .)
    LPAREN          reduce using rule 207 (labeled_statement -> IDENTIFIER COLON statement .)
    PLUSOP          reduce using rule 207 (labeled_statement -> IDENTIFIER COLON statement .)
    MINUSOP         reduce using rule 207 (labeled_statement -> IDENTIFIER COLON statement .)
    NOTSYM          reduce using rule 207 (labeled_statement -> IDENTIFIER COLON statement .)
    BNOP            reduce using rule 207 (labeled_statement -> IDENTIFIER COLON statement .)
    MULTOP          reduce using rule 207 (labeled_statement -> IDENTIFIER COLON statement .)
    BANDOP          reduce using rule 207 (labeled_statement -> IDENTIFIER COLON statement .)
    NEW             reduce using rule 207 (labeled_statement -> IDENTIFIER COLON statement .)
    DELETE          reduce using rule 207 (labeled_statement -> IDENTIFIER COLON statement .)
    AUTO            reduce using rule 207 (labeled_statement -> IDENTIFIER COLON statement .)
    STATIC          reduce using rule 207 (labeled_statement -> IDENTIFIER COLON statement .)
    EXTERN          reduce using rule 207 (labeled_statement -> IDENTIFIER COLON statement .)
    VIRTUAL         reduce using rule 207 (labeled_statement -> IDENTIFIER COLON statement .)
    CONST           reduce using rule 207 (labeled_statement -> IDENTIFIER COLON statement .)
    VOLATILE        reduce using rule 207 (labeled_statement -> IDENTIFIER COLON statement .)
    THIS            reduce using rule 207 (labeled_statement -> IDENTIFIER COLON statement .)
    CHAR            reduce using rule 207 (labeled_statement -> IDENTIFIER COLON statement .)
    SHORT           reduce using rule 207 (labeled_statement -> IDENTIFIER COLON statement .)
    INT             reduce using rule 207 (labeled_statement -> IDENTIFIER COLON statement .)
    LONG            reduce using rule 207 (labeled_statement -> IDENTIFIER COLON statement .)
    SIGNED          reduce using rule 207 (labeled_statement -> IDENTIFIER COLON statement .)
    UNSIGNED        reduce using rule 207 (labeled_statement -> IDENTIFIER COLON statement .)
    FLOAT           reduce using rule 207 (labeled_statement -> IDENTIFIER COLON statement .)
    DOUBLE          reduce using rule 207 (labeled_statement -> IDENTIFIER COLON statement .)
    VOID            reduce using rule 207 (labeled_statement -> IDENTIFIER COLON statement .)
    STRING          reduce using rule 207 (labeled_statement -> IDENTIFIER COLON statement .)
    ENUM            reduce using rule 207 (labeled_statement -> IDENTIFIER COLON statement .)
    TYPE            reduce using rule 207 (labeled_statement -> IDENTIFIER COLON statement .)
    OPERATOR        reduce using rule 207 (labeled_statement -> IDENTIFIER COLON statement .)
    NUMBER          reduce using rule 207 (labeled_statement -> IDENTIFIER COLON statement .)
    STRING_L        reduce using rule 207 (labeled_statement -> IDENTIFIER COLON statement .)
    SCHAR           reduce using rule 207 (labeled_statement -> IDENTIFIER COLON statement .)
    CLASS           reduce using rule 207 (labeled_statement -> IDENTIFIER COLON statement .)
    STRUCT          reduce using rule 207 (labeled_statement -> IDENTIFIER COLON statement .)
    UNION           reduce using rule 207 (labeled_statement -> IDENTIFIER COLON statement .)
    ELSE            reduce using rule 207 (labeled_statement -> IDENTIFIER COLON statement .)


state 432

    (208) labeled_statement -> CASE constant_expression COLON . statement
    (184) statement -> . labeled_statement
    (185) statement -> . expression_statement
    (186) statement -> . compound_statement
    (187) statement -> . selection_statement
    (188) statement -> . iteration_statement
    (189) statement -> . jump_statement
    (190) statement -> . declaration_statement
    (191) statement -> . try_block
    (207) labeled_statement -> . IDENTIFIER COLON statement
    (208) labeled_statement -> . CASE constant_expression COLON statement
    (209) labeled_statement -> . DEFAULT COLON statement
    (218) expression_statement -> . expression SEMICOLON
    (219) expression_statement -> . SEMICOLON
    (180) compound_statement -> . LCPAREN statement_list RCPAREN
    (181) compound_statement -> . LCPAREN RCPAREN
    (197) selection_statement -> . IF LPAREN expression RPAREN statement
    (198) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (199) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (210) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (211) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (212) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (213) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (214) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (215) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (192) jump_statement -> . BREAK SEMICOLON
    (193) jump_statement -> . CONTINUE SEMICOLON
    (194) jump_statement -> . RETURN expression SEMICOLON
    (195) jump_statement -> . RETURN SEMICOLON
    (196) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (220) declaration_statement -> . declaration
    (200) try_block -> . TRY compound_statement handler_list
    (59) expression -> . assignment_expression
    (60) expression -> . expression COMMA assignment_expression
    (221) declaration -> . decl_specifiers declarator_list SEMICOLON
    (222) declaration -> . decl_specifiers SEMICOLON
    (223) declaration -> . declarator_list SEMICOLON
    (224) declaration -> . asm_declaration
    (225) declaration -> . function_definition
    (226) declaration -> . template_declaration
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (147) decl_specifiers -> . decl_specifiers decl_specifier
    (148) decl_specifiers -> . decl_specifier
    (230) declarator_list -> . init_declarator
    (231) declarator_list -> . declarator_list COMMA init_declarator
    (242) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (177) function_definition -> . decl_specifiers declarator fct_body
    (178) function_definition -> . declarator fct_body
    (227) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (26) conditional_expression -> . logical_OR_expression
    (27) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (149) decl_specifier -> . storage_class_specifier
    (150) decl_specifier -> . type_specifier
    (151) decl_specifier -> . TYPEDEF
    (232) init_declarator -> . declarator initializer
    (233) init_declarator -> . declarator
    (253) declarator -> . name
    (254) declarator -> . unary2_operator declarator
    (255) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (256) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (257) declarator -> . declarator LSPAREN RSPAREN
    (258) declarator -> . LPAREN declarator RPAREN
    (28) logical_OR_expression -> . logical_AND_expression
    (29) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (152) storage_class_specifier -> . AUTO
    (153) storage_class_specifier -> . STATIC
    (154) storage_class_specifier -> . EXTERN
    (155) storage_class_specifier -> . VIRTUAL
    (156) type_specifier -> . simple_type_name
    (157) type_specifier -> . class_specifier
    (158) type_specifier -> . enum_specifier
    (159) type_specifier -> . elaborated_type_specifier
    (160) type_specifier -> . CONST
    (161) type_specifier -> . VOLATILE
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (30) logical_AND_expression -> . inclusive_OR_expression
    (31) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (162) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (163) class_specifier -> . class_head LCPAREN RCPAREN
    (17) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (18) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (20) enum_specifier -> . ENUM LCPAREN RCPAREN
    (322) elaborated_type_specifier -> . class_key IDENTIFIER
    (323) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (324) elaborated_type_specifier -> . ENUM enum_name
    (325) elaborated_type_specifier -> . TYPE IDENTIFIER
    (326) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (264) operator_function_name -> . OPERATOR operator_name
    (32) inclusive_OR_expression -> . exclusive_OR_expression
    (33) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (304) class_head -> . class_key base_spec
    (305) class_head -> . class_key
    (306) class_head -> . class_key IDENTIFIER base_spec
    (307) class_head -> . class_key IDENTIFIER
    (328) class_key -> . CLASS
    (329) class_key -> . STRUCT
    (330) class_key -> . UNION
    (331) class_key -> . TEMPLATE
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 191
    CASE            shift and go to state 192
    DEFAULT         shift and go to state 193
    SEMICOLON       shift and go to state 195
    LCPAREN         shift and go to state 70
    IF              shift and go to state 196
    SWITCH          shift and go to state 198
    WHILE           shift and go to state 199
    DO              shift and go to state 200
    FOR             shift and go to state 201
    BREAK           shift and go to state 202
    CONTINUE        shift and go to state 203
    RETURN          shift and go to state 204
    GOTO            shift and go to state 205
    TRY             shift and go to state 207
    ASM             shift and go to state 12
    TEMPLATE        shift and go to state 15
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    TYPEDEF         shift and go to state 18
    LPAREN          shift and go to state 197
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    AUTO            shift and go to state 21
    STATIC          shift and go to state 22
    EXTERN          shift and go to state 23
    VIRTUAL         shift and go to state 24
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    THIS            shift and go to state 160
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    ENUM            shift and go to state 47
    TYPE            shift and go to state 49
    OPERATOR        shift and go to state 50
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    CLASS           shift and go to state 51
    STRUCT          shift and go to state 52
    UNION           shift and go to state 53

    statement                      shift and go to state 493
    labeled_statement              shift and go to state 183
    expression_statement           shift and go to state 184
    compound_statement             shift and go to state 185
    selection_statement            shift and go to state 186
    iteration_statement            shift and go to state 187
    jump_statement                 shift and go to state 188
    declaration_statement          shift and go to state 189
    try_block                      shift and go to state 190
    expression                     shift and go to state 194
    declaration                    shift and go to state 206
    assignment_expression          shift and go to state 208
    decl_specifiers                shift and go to state 5
    declarator_list                shift and go to state 6
    asm_declaration                shift and go to state 7
    function_definition            shift and go to state 8
    template_declaration           shift and go to state 9
    conditional_expression         shift and go to state 135
    unary_expression               shift and go to state 136
    decl_specifier                 shift and go to state 10
    init_declarator                shift and go to state 11
    declarator                     shift and go to state 14
    logical_OR_expression          shift and go to state 138
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    cast_expression                shift and go to state 143
    unary2_operator                shift and go to state 209
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    storage_class_specifier        shift and go to state 16
    type_specifier                 shift and go to state 17
    name                           shift and go to state 210
    logical_AND_expression         shift and go to state 148
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 150
    class_specifier                shift and go to state 26
    enum_specifier                 shift and go to state 27
    elaborated_type_specifier      shift and go to state 28
    operator_function_name         shift and go to state 32
    inclusive_OR_expression        shift and go to state 158
    literal                        shift and go to state 159
    class_head                     shift and go to state 46
    class_key                      shift and go to state 48
    exclusive_OR_expression        shift and go to state 161
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171

state 433

    (209) labeled_statement -> DEFAULT COLON statement .

    RCPAREN         reduce using rule 209 (labeled_statement -> DEFAULT COLON statement .)
    IDENTIFIER      reduce using rule 209 (labeled_statement -> DEFAULT COLON statement .)
    CASE            reduce using rule 209 (labeled_statement -> DEFAULT COLON statement .)
    DEFAULT         reduce using rule 209 (labeled_statement -> DEFAULT COLON statement .)
    SEMICOLON       reduce using rule 209 (labeled_statement -> DEFAULT COLON statement .)
    LCPAREN         reduce using rule 209 (labeled_statement -> DEFAULT COLON statement .)
    IF              reduce using rule 209 (labeled_statement -> DEFAULT COLON statement .)
    SWITCH          reduce using rule 209 (labeled_statement -> DEFAULT COLON statement .)
    WHILE           reduce using rule 209 (labeled_statement -> DEFAULT COLON statement .)
    DO              reduce using rule 209 (labeled_statement -> DEFAULT COLON statement .)
    FOR             reduce using rule 209 (labeled_statement -> DEFAULT COLON statement .)
    BREAK           reduce using rule 209 (labeled_statement -> DEFAULT COLON statement .)
    CONTINUE        reduce using rule 209 (labeled_statement -> DEFAULT COLON statement .)
    RETURN          reduce using rule 209 (labeled_statement -> DEFAULT COLON statement .)
    GOTO            reduce using rule 209 (labeled_statement -> DEFAULT COLON statement .)
    TRY             reduce using rule 209 (labeled_statement -> DEFAULT COLON statement .)
    ASM             reduce using rule 209 (labeled_statement -> DEFAULT COLON statement .)
    TEMPLATE        reduce using rule 209 (labeled_statement -> DEFAULT COLON statement .)
    DPLUSOP         reduce using rule 209 (labeled_statement -> DEFAULT COLON statement .)
    DMINUSOP        reduce using rule 209 (labeled_statement -> DEFAULT COLON statement .)
    SIZEOF          reduce using rule 209 (labeled_statement -> DEFAULT COLON statement .)
    TYPEDEF         reduce using rule 209 (labeled_statement -> DEFAULT COLON statement .)
    LPAREN          reduce using rule 209 (labeled_statement -> DEFAULT COLON statement .)
    PLUSOP          reduce using rule 209 (labeled_statement -> DEFAULT COLON statement .)
    MINUSOP         reduce using rule 209 (labeled_statement -> DEFAULT COLON statement .)
    NOTSYM          reduce using rule 209 (labeled_statement -> DEFAULT COLON statement .)
    BNOP            reduce using rule 209 (labeled_statement -> DEFAULT COLON statement .)
    MULTOP          reduce using rule 209 (labeled_statement -> DEFAULT COLON statement .)
    BANDOP          reduce using rule 209 (labeled_statement -> DEFAULT COLON statement .)
    NEW             reduce using rule 209 (labeled_statement -> DEFAULT COLON statement .)
    DELETE          reduce using rule 209 (labeled_statement -> DEFAULT COLON statement .)
    AUTO            reduce using rule 209 (labeled_statement -> DEFAULT COLON statement .)
    STATIC          reduce using rule 209 (labeled_statement -> DEFAULT COLON statement .)
    EXTERN          reduce using rule 209 (labeled_statement -> DEFAULT COLON statement .)
    VIRTUAL         reduce using rule 209 (labeled_statement -> DEFAULT COLON statement .)
    CONST           reduce using rule 209 (labeled_statement -> DEFAULT COLON statement .)
    VOLATILE        reduce using rule 209 (labeled_statement -> DEFAULT COLON statement .)
    THIS            reduce using rule 209 (labeled_statement -> DEFAULT COLON statement .)
    CHAR            reduce using rule 209 (labeled_statement -> DEFAULT COLON statement .)
    SHORT           reduce using rule 209 (labeled_statement -> DEFAULT COLON statement .)
    INT             reduce using rule 209 (labeled_statement -> DEFAULT COLON statement .)
    LONG            reduce using rule 209 (labeled_statement -> DEFAULT COLON statement .)
    SIGNED          reduce using rule 209 (labeled_statement -> DEFAULT COLON statement .)
    UNSIGNED        reduce using rule 209 (labeled_statement -> DEFAULT COLON statement .)
    FLOAT           reduce using rule 209 (labeled_statement -> DEFAULT COLON statement .)
    DOUBLE          reduce using rule 209 (labeled_statement -> DEFAULT COLON statement .)
    VOID            reduce using rule 209 (labeled_statement -> DEFAULT COLON statement .)
    STRING          reduce using rule 209 (labeled_statement -> DEFAULT COLON statement .)
    ENUM            reduce using rule 209 (labeled_statement -> DEFAULT COLON statement .)
    TYPE            reduce using rule 209 (labeled_statement -> DEFAULT COLON statement .)
    OPERATOR        reduce using rule 209 (labeled_statement -> DEFAULT COLON statement .)
    NUMBER          reduce using rule 209 (labeled_statement -> DEFAULT COLON statement .)
    STRING_L        reduce using rule 209 (labeled_statement -> DEFAULT COLON statement .)
    SCHAR           reduce using rule 209 (labeled_statement -> DEFAULT COLON statement .)
    CLASS           reduce using rule 209 (labeled_statement -> DEFAULT COLON statement .)
    STRUCT          reduce using rule 209 (labeled_statement -> DEFAULT COLON statement .)
    UNION           reduce using rule 209 (labeled_statement -> DEFAULT COLON statement .)
    ELSE            reduce using rule 209 (labeled_statement -> DEFAULT COLON statement .)


state 434

    (60) expression -> expression COMMA assignment_expression .

    SEMICOLON       reduce using rule 60 (expression -> expression COMMA assignment_expression .)
    COMMA           reduce using rule 60 (expression -> expression COMMA assignment_expression .)
    RPAREN          reduce using rule 60 (expression -> expression COMMA assignment_expression .)
    RTEMPLATE       reduce using rule 60 (expression -> expression COMMA assignment_expression .)
    COLON           reduce using rule 60 (expression -> expression COMMA assignment_expression .)
    RSPAREN         reduce using rule 60 (expression -> expression COMMA assignment_expression .)


state 435

    (197) selection_statement -> IF LPAREN expression . RPAREN statement
    (198) selection_statement -> IF LPAREN expression . RPAREN statement ELSE statement
    (60) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 494
    COMMA           shift and go to state 324


state 436

    (258) declarator -> LPAREN . declarator RPAREN
    (125) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (119) primary_expression -> LPAREN . expression RPAREN
    (253) declarator -> . name
    (254) declarator -> . unary2_operator declarator
    (255) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (256) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (257) declarator -> . declarator LSPAREN RSPAREN
    (258) declarator -> . LPAREN declarator RPAREN
    (126) type_name -> . type_specifier_list abstract_declarator
    (127) type_name -> . type_specifier_list
    (59) expression -> . assignment_expression
    (60) expression -> . expression COMMA assignment_expression
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (262) type_specifier_list -> . type_specifier type_specifier_list
    (263) type_specifier_list -> . type_specifier
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (264) operator_function_name -> . OPERATOR operator_name
    (156) type_specifier -> . simple_type_name
    (157) type_specifier -> . class_specifier
    (158) type_specifier -> . enum_specifier
    (159) type_specifier -> . elaborated_type_specifier
    (160) type_specifier -> . CONST
    (161) type_specifier -> . VOLATILE
    (26) conditional_expression -> . logical_OR_expression
    (27) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (162) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (163) class_specifier -> . class_head LCPAREN RCPAREN
    (17) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (18) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (20) enum_specifier -> . ENUM LCPAREN RCPAREN
    (322) elaborated_type_specifier -> . class_key IDENTIFIER
    (323) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (324) elaborated_type_specifier -> . ENUM enum_name
    (325) elaborated_type_specifier -> . TYPE IDENTIFIER
    (326) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (28) logical_OR_expression -> . logical_AND_expression
    (29) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (304) class_head -> . class_key base_spec
    (305) class_head -> . class_key
    (306) class_head -> . class_key IDENTIFIER base_spec
    (307) class_head -> . class_key IDENTIFIER
    (328) class_key -> . CLASS
    (329) class_key -> . STRUCT
    (330) class_key -> . UNION
    (331) class_key -> . TEMPLATE
    (30) logical_AND_expression -> . inclusive_OR_expression
    (31) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (32) inclusive_OR_expression -> . exclusive_OR_expression
    (33) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LPAREN          shift and go to state 197
    IDENTIFIER      shift and go to state 31
    BNOP            shift and go to state 327
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    OPERATOR        shift and go to state 50
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    ENUM            shift and go to state 47
    TYPE            shift and go to state 49
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    CLASS           shift and go to state 51
    STRUCT          shift and go to state 52
    UNION           shift and go to state 53
    TEMPLATE        shift and go to state 59
    THIS            shift and go to state 160
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164

    declarator                     shift and go to state 63
    type_name                      shift and go to state 248
    cast_expression                shift and go to state 143
    expression                     shift and go to state 247
    name                           shift and go to state 210
    unary2_operator                shift and go to state 326
    type_specifier_list            shift and go to state 249
    assignment_expression          shift and go to state 208
    operator_function_name         shift and go to state 32
    type_specifier                 shift and go to state 250
    conditional_expression         shift and go to state 135
    unary_expression               shift and go to state 136
    simple_type_name               shift and go to state 251
    class_specifier                shift and go to state 26
    enum_specifier                 shift and go to state 27
    elaborated_type_specifier      shift and go to state 28
    logical_OR_expression          shift and go to state 138
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    class_head                     shift and go to state 46
    class_key                      shift and go to state 48
    logical_AND_expression         shift and go to state 148
    primary_expression             shift and go to state 149
    inclusive_OR_expression        shift and go to state 158
    literal                        shift and go to state 159
    exclusive_OR_expression        shift and go to state 161
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171

state 437

    (199) selection_statement -> SWITCH LPAREN expression . RPAREN statement
    (60) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 495
    COMMA           shift and go to state 324


state 438

    (210) iteration_statement -> WHILE LPAREN expression . RPAREN statement
    (60) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 496
    COMMA           shift and go to state 324


state 439

    (211) iteration_statement -> DO statement WHILE . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 497


state 440

    (212) iteration_statement -> FOR LPAREN for_init_statement . expression SEMICOLON expression RPAREN statement
    (213) iteration_statement -> FOR LPAREN for_init_statement . SEMICOLON expression RPAREN statement
    (214) iteration_statement -> FOR LPAREN for_init_statement . expression SEMICOLON RPAREN statement
    (215) iteration_statement -> FOR LPAREN for_init_statement . SEMICOLON RPAREN statement
    (59) expression -> . assignment_expression
    (60) expression -> . expression COMMA assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (26) conditional_expression -> . logical_OR_expression
    (27) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (28) logical_OR_expression -> . logical_AND_expression
    (29) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (30) logical_AND_expression -> . inclusive_OR_expression
    (31) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (32) inclusive_OR_expression -> . exclusive_OR_expression
    (33) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (264) operator_function_name -> . OPERATOR operator_name
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMICOLON       shift and go to state 499
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    LPAREN          shift and go to state 128
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    expression                     shift and go to state 498
    assignment_expression          shift and go to state 208
    conditional_expression         shift and go to state 135
    unary_expression               shift and go to state 136
    logical_OR_expression          shift and go to state 138
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    cast_expression                shift and go to state 143
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    logical_AND_expression         shift and go to state 148
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    name                           shift and go to state 151
    inclusive_OR_expression        shift and go to state 158
    literal                        shift and go to state 159
    exclusive_OR_expression        shift and go to state 161
    operator_function_name         shift and go to state 32
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171

state 441

    (216) for_init_statement -> expression_statement .

    SEMICOLON       reduce using rule 216 (for_init_statement -> expression_statement .)
    DPLUSOP         reduce using rule 216 (for_init_statement -> expression_statement .)
    DMINUSOP        reduce using rule 216 (for_init_statement -> expression_statement .)
    SIZEOF          reduce using rule 216 (for_init_statement -> expression_statement .)
    PLUSOP          reduce using rule 216 (for_init_statement -> expression_statement .)
    MINUSOP         reduce using rule 216 (for_init_statement -> expression_statement .)
    NOTSYM          reduce using rule 216 (for_init_statement -> expression_statement .)
    BNOP            reduce using rule 216 (for_init_statement -> expression_statement .)
    MULTOP          reduce using rule 216 (for_init_statement -> expression_statement .)
    BANDOP          reduce using rule 216 (for_init_statement -> expression_statement .)
    NEW             reduce using rule 216 (for_init_statement -> expression_statement .)
    DELETE          reduce using rule 216 (for_init_statement -> expression_statement .)
    THIS            reduce using rule 216 (for_init_statement -> expression_statement .)
    LPAREN          reduce using rule 216 (for_init_statement -> expression_statement .)
    CHAR            reduce using rule 216 (for_init_statement -> expression_statement .)
    SHORT           reduce using rule 216 (for_init_statement -> expression_statement .)
    INT             reduce using rule 216 (for_init_statement -> expression_statement .)
    LONG            reduce using rule 216 (for_init_statement -> expression_statement .)
    SIGNED          reduce using rule 216 (for_init_statement -> expression_statement .)
    UNSIGNED        reduce using rule 216 (for_init_statement -> expression_statement .)
    FLOAT           reduce using rule 216 (for_init_statement -> expression_statement .)
    DOUBLE          reduce using rule 216 (for_init_statement -> expression_statement .)
    VOID            reduce using rule 216 (for_init_statement -> expression_statement .)
    STRING          reduce using rule 216 (for_init_statement -> expression_statement .)
    NUMBER          reduce using rule 216 (for_init_statement -> expression_statement .)
    STRING_L        reduce using rule 216 (for_init_statement -> expression_statement .)
    SCHAR           reduce using rule 216 (for_init_statement -> expression_statement .)
    IDENTIFIER      reduce using rule 216 (for_init_statement -> expression_statement .)
    OPERATOR        reduce using rule 216 (for_init_statement -> expression_statement .)


state 442

    (217) for_init_statement -> declaration_statement .

    SEMICOLON       reduce using rule 217 (for_init_statement -> declaration_statement .)
    DPLUSOP         reduce using rule 217 (for_init_statement -> declaration_statement .)
    DMINUSOP        reduce using rule 217 (for_init_statement -> declaration_statement .)
    SIZEOF          reduce using rule 217 (for_init_statement -> declaration_statement .)
    PLUSOP          reduce using rule 217 (for_init_statement -> declaration_statement .)
    MINUSOP         reduce using rule 217 (for_init_statement -> declaration_statement .)
    NOTSYM          reduce using rule 217 (for_init_statement -> declaration_statement .)
    BNOP            reduce using rule 217 (for_init_statement -> declaration_statement .)
    MULTOP          reduce using rule 217 (for_init_statement -> declaration_statement .)
    BANDOP          reduce using rule 217 (for_init_statement -> declaration_statement .)
    NEW             reduce using rule 217 (for_init_statement -> declaration_statement .)
    DELETE          reduce using rule 217 (for_init_statement -> declaration_statement .)
    THIS            reduce using rule 217 (for_init_statement -> declaration_statement .)
    LPAREN          reduce using rule 217 (for_init_statement -> declaration_statement .)
    CHAR            reduce using rule 217 (for_init_statement -> declaration_statement .)
    SHORT           reduce using rule 217 (for_init_statement -> declaration_statement .)
    INT             reduce using rule 217 (for_init_statement -> declaration_statement .)
    LONG            reduce using rule 217 (for_init_statement -> declaration_statement .)
    SIGNED          reduce using rule 217 (for_init_statement -> declaration_statement .)
    UNSIGNED        reduce using rule 217 (for_init_statement -> declaration_statement .)
    FLOAT           reduce using rule 217 (for_init_statement -> declaration_statement .)
    DOUBLE          reduce using rule 217 (for_init_statement -> declaration_statement .)
    VOID            reduce using rule 217 (for_init_statement -> declaration_statement .)
    STRING          reduce using rule 217 (for_init_statement -> declaration_statement .)
    NUMBER          reduce using rule 217 (for_init_statement -> declaration_statement .)
    STRING_L        reduce using rule 217 (for_init_statement -> declaration_statement .)
    SCHAR           reduce using rule 217 (for_init_statement -> declaration_statement .)
    IDENTIFIER      reduce using rule 217 (for_init_statement -> declaration_statement .)
    OPERATOR        reduce using rule 217 (for_init_statement -> declaration_statement .)


state 443

    (194) jump_statement -> RETURN expression SEMICOLON .

    RCPAREN         reduce using rule 194 (jump_statement -> RETURN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 194 (jump_statement -> RETURN expression SEMICOLON .)
    CASE            reduce using rule 194 (jump_statement -> RETURN expression SEMICOLON .)
    DEFAULT         reduce using rule 194 (jump_statement -> RETURN expression SEMICOLON .)
    SEMICOLON       reduce using rule 194 (jump_statement -> RETURN expression SEMICOLON .)
    LCPAREN         reduce using rule 194 (jump_statement -> RETURN expression SEMICOLON .)
    IF              reduce using rule 194 (jump_statement -> RETURN expression SEMICOLON .)
    SWITCH          reduce using rule 194 (jump_statement -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 194 (jump_statement -> RETURN expression SEMICOLON .)
    DO              reduce using rule 194 (jump_statement -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 194 (jump_statement -> RETURN expression SEMICOLON .)
    BREAK           reduce using rule 194 (jump_statement -> RETURN expression SEMICOLON .)
    CONTINUE        reduce using rule 194 (jump_statement -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 194 (jump_statement -> RETURN expression SEMICOLON .)
    GOTO            reduce using rule 194 (jump_statement -> RETURN expression SEMICOLON .)
    TRY             reduce using rule 194 (jump_statement -> RETURN expression SEMICOLON .)
    ASM             reduce using rule 194 (jump_statement -> RETURN expression SEMICOLON .)
    TEMPLATE        reduce using rule 194 (jump_statement -> RETURN expression SEMICOLON .)
    DPLUSOP         reduce using rule 194 (jump_statement -> RETURN expression SEMICOLON .)
    DMINUSOP        reduce using rule 194 (jump_statement -> RETURN expression SEMICOLON .)
    SIZEOF          reduce using rule 194 (jump_statement -> RETURN expression SEMICOLON .)
    TYPEDEF         reduce using rule 194 (jump_statement -> RETURN expression SEMICOLON .)
    LPAREN          reduce using rule 194 (jump_statement -> RETURN expression SEMICOLON .)
    PLUSOP          reduce using rule 194 (jump_statement -> RETURN expression SEMICOLON .)
    MINUSOP         reduce using rule 194 (jump_statement -> RETURN expression SEMICOLON .)
    NOTSYM          reduce using rule 194 (jump_statement -> RETURN expression SEMICOLON .)
    BNOP            reduce using rule 194 (jump_statement -> RETURN expression SEMICOLON .)
    MULTOP          reduce using rule 194 (jump_statement -> RETURN expression SEMICOLON .)
    BANDOP          reduce using rule 194 (jump_statement -> RETURN expression SEMICOLON .)
    NEW             reduce using rule 194 (jump_statement -> RETURN expression SEMICOLON .)
    DELETE          reduce using rule 194 (jump_statement -> RETURN expression SEMICOLON .)
    AUTO            reduce using rule 194 (jump_statement -> RETURN expression SEMICOLON .)
    STATIC          reduce using rule 194 (jump_statement -> RETURN expression SEMICOLON .)
    EXTERN          reduce using rule 194 (jump_statement -> RETURN expression SEMICOLON .)
    VIRTUAL         reduce using rule 194 (jump_statement -> RETURN expression SEMICOLON .)
    CONST           reduce using rule 194 (jump_statement -> RETURN expression SEMICOLON .)
    VOLATILE        reduce using rule 194 (jump_statement -> RETURN expression SEMICOLON .)
    THIS            reduce using rule 194 (jump_statement -> RETURN expression SEMICOLON .)
    CHAR            reduce using rule 194 (jump_statement -> RETURN expression SEMICOLON .)
    SHORT           reduce using rule 194 (jump_statement -> RETURN expression SEMICOLON .)
    INT             reduce using rule 194 (jump_statement -> RETURN expression SEMICOLON .)
    LONG            reduce using rule 194 (jump_statement -> RETURN expression SEMICOLON .)
    SIGNED          reduce using rule 194 (jump_statement -> RETURN expression SEMICOLON .)
    UNSIGNED        reduce using rule 194 (jump_statement -> RETURN expression SEMICOLON .)
    FLOAT           reduce using rule 194 (jump_statement -> RETURN expression SEMICOLON .)
    DOUBLE          reduce using rule 194 (jump_statement -> RETURN expression SEMICOLON .)
    VOID            reduce using rule 194 (jump_statement -> RETURN expression SEMICOLON .)
    STRING          reduce using rule 194 (jump_statement -> RETURN expression SEMICOLON .)
    ENUM            reduce using rule 194 (jump_statement -> RETURN expression SEMICOLON .)
    TYPE            reduce using rule 194 (jump_statement -> RETURN expression SEMICOLON .)
    OPERATOR        reduce using rule 194 (jump_statement -> RETURN expression SEMICOLON .)
    NUMBER          reduce using rule 194 (jump_statement -> RETURN expression SEMICOLON .)
    STRING_L        reduce using rule 194 (jump_statement -> RETURN expression SEMICOLON .)
    SCHAR           reduce using rule 194 (jump_statement -> RETURN expression SEMICOLON .)
    CLASS           reduce using rule 194 (jump_statement -> RETURN expression SEMICOLON .)
    STRUCT          reduce using rule 194 (jump_statement -> RETURN expression SEMICOLON .)
    UNION           reduce using rule 194 (jump_statement -> RETURN expression SEMICOLON .)
    ELSE            reduce using rule 194 (jump_statement -> RETURN expression SEMICOLON .)


state 444

    (196) jump_statement -> GOTO IDENTIFIER SEMICOLON .

    RCPAREN         reduce using rule 196 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 196 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    CASE            reduce using rule 196 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DEFAULT         reduce using rule 196 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SEMICOLON       reduce using rule 196 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    LCPAREN         reduce using rule 196 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    IF              reduce using rule 196 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SWITCH          reduce using rule 196 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 196 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DO              reduce using rule 196 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    FOR             reduce using rule 196 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    BREAK           reduce using rule 196 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    CONTINUE        reduce using rule 196 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    RETURN          reduce using rule 196 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    GOTO            reduce using rule 196 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    TRY             reduce using rule 196 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    ASM             reduce using rule 196 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    TEMPLATE        reduce using rule 196 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DPLUSOP         reduce using rule 196 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DMINUSOP        reduce using rule 196 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SIZEOF          reduce using rule 196 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    TYPEDEF         reduce using rule 196 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    LPAREN          reduce using rule 196 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    PLUSOP          reduce using rule 196 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    MINUSOP         reduce using rule 196 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    NOTSYM          reduce using rule 196 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    BNOP            reduce using rule 196 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    MULTOP          reduce using rule 196 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    BANDOP          reduce using rule 196 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    NEW             reduce using rule 196 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DELETE          reduce using rule 196 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    AUTO            reduce using rule 196 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    STATIC          reduce using rule 196 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    EXTERN          reduce using rule 196 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    VIRTUAL         reduce using rule 196 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    CONST           reduce using rule 196 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    VOLATILE        reduce using rule 196 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    THIS            reduce using rule 196 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    CHAR            reduce using rule 196 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SHORT           reduce using rule 196 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    INT             reduce using rule 196 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    LONG            reduce using rule 196 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SIGNED          reduce using rule 196 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    UNSIGNED        reduce using rule 196 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    FLOAT           reduce using rule 196 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DOUBLE          reduce using rule 196 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    VOID            reduce using rule 196 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    STRING          reduce using rule 196 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    ENUM            reduce using rule 196 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    TYPE            reduce using rule 196 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    OPERATOR        reduce using rule 196 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    NUMBER          reduce using rule 196 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    STRING_L        reduce using rule 196 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SCHAR           reduce using rule 196 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    CLASS           reduce using rule 196 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    STRUCT          reduce using rule 196 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    UNION           reduce using rule 196 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    ELSE            reduce using rule 196 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)


state 445

    (200) try_block -> TRY compound_statement handler_list .

    RCPAREN         reduce using rule 200 (try_block -> TRY compound_statement handler_list .)
    IDENTIFIER      reduce using rule 200 (try_block -> TRY compound_statement handler_list .)
    CASE            reduce using rule 200 (try_block -> TRY compound_statement handler_list .)
    DEFAULT         reduce using rule 200 (try_block -> TRY compound_statement handler_list .)
    SEMICOLON       reduce using rule 200 (try_block -> TRY compound_statement handler_list .)
    LCPAREN         reduce using rule 200 (try_block -> TRY compound_statement handler_list .)
    IF              reduce using rule 200 (try_block -> TRY compound_statement handler_list .)
    SWITCH          reduce using rule 200 (try_block -> TRY compound_statement handler_list .)
    WHILE           reduce using rule 200 (try_block -> TRY compound_statement handler_list .)
    DO              reduce using rule 200 (try_block -> TRY compound_statement handler_list .)
    FOR             reduce using rule 200 (try_block -> TRY compound_statement handler_list .)
    BREAK           reduce using rule 200 (try_block -> TRY compound_statement handler_list .)
    CONTINUE        reduce using rule 200 (try_block -> TRY compound_statement handler_list .)
    RETURN          reduce using rule 200 (try_block -> TRY compound_statement handler_list .)
    GOTO            reduce using rule 200 (try_block -> TRY compound_statement handler_list .)
    TRY             reduce using rule 200 (try_block -> TRY compound_statement handler_list .)
    ASM             reduce using rule 200 (try_block -> TRY compound_statement handler_list .)
    TEMPLATE        reduce using rule 200 (try_block -> TRY compound_statement handler_list .)
    DPLUSOP         reduce using rule 200 (try_block -> TRY compound_statement handler_list .)
    DMINUSOP        reduce using rule 200 (try_block -> TRY compound_statement handler_list .)
    SIZEOF          reduce using rule 200 (try_block -> TRY compound_statement handler_list .)
    TYPEDEF         reduce using rule 200 (try_block -> TRY compound_statement handler_list .)
    LPAREN          reduce using rule 200 (try_block -> TRY compound_statement handler_list .)
    PLUSOP          reduce using rule 200 (try_block -> TRY compound_statement handler_list .)
    MINUSOP         reduce using rule 200 (try_block -> TRY compound_statement handler_list .)
    NOTSYM          reduce using rule 200 (try_block -> TRY compound_statement handler_list .)
    BNOP            reduce using rule 200 (try_block -> TRY compound_statement handler_list .)
    MULTOP          reduce using rule 200 (try_block -> TRY compound_statement handler_list .)
    BANDOP          reduce using rule 200 (try_block -> TRY compound_statement handler_list .)
    NEW             reduce using rule 200 (try_block -> TRY compound_statement handler_list .)
    DELETE          reduce using rule 200 (try_block -> TRY compound_statement handler_list .)
    AUTO            reduce using rule 200 (try_block -> TRY compound_statement handler_list .)
    STATIC          reduce using rule 200 (try_block -> TRY compound_statement handler_list .)
    EXTERN          reduce using rule 200 (try_block -> TRY compound_statement handler_list .)
    VIRTUAL         reduce using rule 200 (try_block -> TRY compound_statement handler_list .)
    CONST           reduce using rule 200 (try_block -> TRY compound_statement handler_list .)
    VOLATILE        reduce using rule 200 (try_block -> TRY compound_statement handler_list .)
    THIS            reduce using rule 200 (try_block -> TRY compound_statement handler_list .)
    CHAR            reduce using rule 200 (try_block -> TRY compound_statement handler_list .)
    SHORT           reduce using rule 200 (try_block -> TRY compound_statement handler_list .)
    INT             reduce using rule 200 (try_block -> TRY compound_statement handler_list .)
    LONG            reduce using rule 200 (try_block -> TRY compound_statement handler_list .)
    SIGNED          reduce using rule 200 (try_block -> TRY compound_statement handler_list .)
    UNSIGNED        reduce using rule 200 (try_block -> TRY compound_statement handler_list .)
    FLOAT           reduce using rule 200 (try_block -> TRY compound_statement handler_list .)
    DOUBLE          reduce using rule 200 (try_block -> TRY compound_statement handler_list .)
    VOID            reduce using rule 200 (try_block -> TRY compound_statement handler_list .)
    STRING          reduce using rule 200 (try_block -> TRY compound_statement handler_list .)
    ENUM            reduce using rule 200 (try_block -> TRY compound_statement handler_list .)
    TYPE            reduce using rule 200 (try_block -> TRY compound_statement handler_list .)
    OPERATOR        reduce using rule 200 (try_block -> TRY compound_statement handler_list .)
    NUMBER          reduce using rule 200 (try_block -> TRY compound_statement handler_list .)
    STRING_L        reduce using rule 200 (try_block -> TRY compound_statement handler_list .)
    SCHAR           reduce using rule 200 (try_block -> TRY compound_statement handler_list .)
    CLASS           reduce using rule 200 (try_block -> TRY compound_statement handler_list .)
    STRUCT          reduce using rule 200 (try_block -> TRY compound_statement handler_list .)
    UNION           reduce using rule 200 (try_block -> TRY compound_statement handler_list .)
    ELSE            reduce using rule 200 (try_block -> TRY compound_statement handler_list .)


state 446

    (201) handler_list -> handler . handler_list
    (202) handler_list -> handler .
    (201) handler_list -> . handler handler_list
    (202) handler_list -> . handler
    (203) handler -> . CATCH LPAREN exception_declaration RPAREN compound_statement

    RCPAREN         reduce using rule 202 (handler_list -> handler .)
    IDENTIFIER      reduce using rule 202 (handler_list -> handler .)
    CASE            reduce using rule 202 (handler_list -> handler .)
    DEFAULT         reduce using rule 202 (handler_list -> handler .)
    SEMICOLON       reduce using rule 202 (handler_list -> handler .)
    LCPAREN         reduce using rule 202 (handler_list -> handler .)
    IF              reduce using rule 202 (handler_list -> handler .)
    SWITCH          reduce using rule 202 (handler_list -> handler .)
    WHILE           reduce using rule 202 (handler_list -> handler .)
    DO              reduce using rule 202 (handler_list -> handler .)
    FOR             reduce using rule 202 (handler_list -> handler .)
    BREAK           reduce using rule 202 (handler_list -> handler .)
    CONTINUE        reduce using rule 202 (handler_list -> handler .)
    RETURN          reduce using rule 202 (handler_list -> handler .)
    GOTO            reduce using rule 202 (handler_list -> handler .)
    TRY             reduce using rule 202 (handler_list -> handler .)
    ASM             reduce using rule 202 (handler_list -> handler .)
    TEMPLATE        reduce using rule 202 (handler_list -> handler .)
    DPLUSOP         reduce using rule 202 (handler_list -> handler .)
    DMINUSOP        reduce using rule 202 (handler_list -> handler .)
    SIZEOF          reduce using rule 202 (handler_list -> handler .)
    TYPEDEF         reduce using rule 202 (handler_list -> handler .)
    LPAREN          reduce using rule 202 (handler_list -> handler .)
    PLUSOP          reduce using rule 202 (handler_list -> handler .)
    MINUSOP         reduce using rule 202 (handler_list -> handler .)
    NOTSYM          reduce using rule 202 (handler_list -> handler .)
    BNOP            reduce using rule 202 (handler_list -> handler .)
    MULTOP          reduce using rule 202 (handler_list -> handler .)
    BANDOP          reduce using rule 202 (handler_list -> handler .)
    NEW             reduce using rule 202 (handler_list -> handler .)
    DELETE          reduce using rule 202 (handler_list -> handler .)
    AUTO            reduce using rule 202 (handler_list -> handler .)
    STATIC          reduce using rule 202 (handler_list -> handler .)
    EXTERN          reduce using rule 202 (handler_list -> handler .)
    VIRTUAL         reduce using rule 202 (handler_list -> handler .)
    CONST           reduce using rule 202 (handler_list -> handler .)
    VOLATILE        reduce using rule 202 (handler_list -> handler .)
    THIS            reduce using rule 202 (handler_list -> handler .)
    CHAR            reduce using rule 202 (handler_list -> handler .)
    SHORT           reduce using rule 202 (handler_list -> handler .)
    INT             reduce using rule 202 (handler_list -> handler .)
    LONG            reduce using rule 202 (handler_list -> handler .)
    SIGNED          reduce using rule 202 (handler_list -> handler .)
    UNSIGNED        reduce using rule 202 (handler_list -> handler .)
    FLOAT           reduce using rule 202 (handler_list -> handler .)
    DOUBLE          reduce using rule 202 (handler_list -> handler .)
    VOID            reduce using rule 202 (handler_list -> handler .)
    STRING          reduce using rule 202 (handler_list -> handler .)
    ENUM            reduce using rule 202 (handler_list -> handler .)
    TYPE            reduce using rule 202 (handler_list -> handler .)
    OPERATOR        reduce using rule 202 (handler_list -> handler .)
    NUMBER          reduce using rule 202 (handler_list -> handler .)
    STRING_L        reduce using rule 202 (handler_list -> handler .)
    SCHAR           reduce using rule 202 (handler_list -> handler .)
    CLASS           reduce using rule 202 (handler_list -> handler .)
    STRUCT          reduce using rule 202 (handler_list -> handler .)
    UNION           reduce using rule 202 (handler_list -> handler .)
    ELSE            reduce using rule 202 (handler_list -> handler .)
    CATCH           shift and go to state 447

    handler                        shift and go to state 446
    handler_list                   shift and go to state 500

state 447

    (203) handler -> CATCH . LPAREN exception_declaration RPAREN compound_statement

    LPAREN          shift and go to state 501


state 448

    (227) template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .

    ASM             reduce using rule 227 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    TEMPLATE        reduce using rule 227 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    TYPEDEF         reduce using rule 227 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    LPAREN          reduce using rule 227 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    AUTO            reduce using rule 227 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    STATIC          reduce using rule 227 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    EXTERN          reduce using rule 227 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    VIRTUAL         reduce using rule 227 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    CONST           reduce using rule 227 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    VOLATILE        reduce using rule 227 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    IDENTIFIER      reduce using rule 227 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    BNOP            reduce using rule 227 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    MULTOP          reduce using rule 227 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    BANDOP          reduce using rule 227 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    CHAR            reduce using rule 227 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    SHORT           reduce using rule 227 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    INT             reduce using rule 227 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    LONG            reduce using rule 227 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    SIGNED          reduce using rule 227 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    UNSIGNED        reduce using rule 227 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    FLOAT           reduce using rule 227 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    DOUBLE          reduce using rule 227 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    VOID            reduce using rule 227 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    STRING          reduce using rule 227 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    ENUM            reduce using rule 227 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    TYPE            reduce using rule 227 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    OPERATOR        reduce using rule 227 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    CLASS           reduce using rule 227 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    STRUCT          reduce using rule 227 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    UNION           reduce using rule 227 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    $end            reduce using rule 227 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    RCPAREN         reduce using rule 227 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    CASE            reduce using rule 227 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    DEFAULT         reduce using rule 227 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    SEMICOLON       reduce using rule 227 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    LCPAREN         reduce using rule 227 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    IF              reduce using rule 227 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    SWITCH          reduce using rule 227 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    WHILE           reduce using rule 227 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    DO              reduce using rule 227 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    FOR             reduce using rule 227 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    BREAK           reduce using rule 227 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    CONTINUE        reduce using rule 227 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    RETURN          reduce using rule 227 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    GOTO            reduce using rule 227 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    TRY             reduce using rule 227 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    DPLUSOP         reduce using rule 227 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    DMINUSOP        reduce using rule 227 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    SIZEOF          reduce using rule 227 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    PLUSOP          reduce using rule 227 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    MINUSOP         reduce using rule 227 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    NOTSYM          reduce using rule 227 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    NEW             reduce using rule 227 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    DELETE          reduce using rule 227 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    THIS            reduce using rule 227 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    NUMBER          reduce using rule 227 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    STRING_L        reduce using rule 227 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    SCHAR           reduce using rule 227 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    ELSE            reduce using rule 227 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)


state 449

    (229) template_argument_list -> template_argument_list COMMA argument_declaration .

    RTEMPLATE       reduce using rule 229 (template_argument_list -> template_argument_list COMMA argument_declaration .)
    COMMA           reduce using rule 229 (template_argument_list -> template_argument_list COMMA argument_declaration .)


state 450

    (167) access_list -> access_specifier COLON member_access_list .

    RCPAREN         reduce using rule 167 (access_list -> access_specifier COLON member_access_list .)
    PRIVATE         reduce using rule 167 (access_list -> access_specifier COLON member_access_list .)
    PROTECTED       reduce using rule 167 (access_list -> access_specifier COLON member_access_list .)
    PUBLIC          reduce using rule 167 (access_list -> access_specifier COLON member_access_list .)


state 451

    (171) member_declaration -> decl_specifiers member_declarator_list SEMICOLON .

    SEMICOLON       reduce using rule 171 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    TYPEDEF         reduce using rule 171 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    IDENTIFIER      reduce using rule 171 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    COLON           reduce using rule 171 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    LPAREN          reduce using rule 171 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    AUTO            reduce using rule 171 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    STATIC          reduce using rule 171 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    EXTERN          reduce using rule 171 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    VIRTUAL         reduce using rule 171 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    CONST           reduce using rule 171 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    VOLATILE        reduce using rule 171 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    BNOP            reduce using rule 171 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    MULTOP          reduce using rule 171 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    BANDOP          reduce using rule 171 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    CHAR            reduce using rule 171 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    SHORT           reduce using rule 171 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    INT             reduce using rule 171 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    LONG            reduce using rule 171 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    SIGNED          reduce using rule 171 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    UNSIGNED        reduce using rule 171 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    FLOAT           reduce using rule 171 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    DOUBLE          reduce using rule 171 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    VOID            reduce using rule 171 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    STRING          reduce using rule 171 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    ENUM            reduce using rule 171 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    TYPE            reduce using rule 171 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    OPERATOR        reduce using rule 171 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    CLASS           reduce using rule 171 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    STRUCT          reduce using rule 171 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    UNION           reduce using rule 171 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    TEMPLATE        reduce using rule 171 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    RCPAREN         reduce using rule 171 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    PRIVATE         reduce using rule 171 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    PROTECTED       reduce using rule 171 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    PUBLIC          reduce using rule 171 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)


state 452

    (248) member_declarator_list -> member_declarator_list COMMA member_declarator .

    SEMICOLON       reduce using rule 248 (member_declarator_list -> member_declarator_list COMMA member_declarator .)
    COMMA           reduce using rule 248 (member_declarator_list -> member_declarator_list COMMA member_declarator .)


state 453

    (249) member_declarator -> declarator . pure_specifier
    (250) member_declarator -> declarator .
    (255) declarator -> declarator . LPAREN argument_declaration_list RPAREN
    (256) declarator -> declarator . LSPAREN constant_expression RSPAREN
    (257) declarator -> declarator . LSPAREN RSPAREN
    (303) pure_specifier -> . EQUAL NUMBER

    SEMICOLON       reduce using rule 250 (member_declarator -> declarator .)
    COMMA           reduce using rule 250 (member_declarator -> declarator .)
    LPAREN          shift and go to state 126
    LSPAREN         shift and go to state 67
    EQUAL           shift and go to state 353

    pure_specifier                 shift and go to state 352

state 454

    (303) pure_specifier -> EQUAL NUMBER .

    SEMICOLON       reduce using rule 303 (pure_specifier -> EQUAL NUMBER .)
    COMMA           reduce using rule 303 (pure_specifier -> EQUAL NUMBER .)


state 455

    (251) member_declarator -> IDENTIFIER COLON constant_expression .

    SEMICOLON       reduce using rule 251 (member_declarator -> IDENTIFIER COLON constant_expression .)
    COMMA           reduce using rule 251 (member_declarator -> IDENTIFIER COLON constant_expression .)


state 456

    (17) enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .

    SEMICOLON       reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    TYPEDEF         reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    LPAREN          reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    AUTO            reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    STATIC          reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    EXTERN          reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    VIRTUAL         reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    CONST           reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    VOLATILE        reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    IDENTIFIER      reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    BNOP            reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    MULTOP          reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    BANDOP          reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    CHAR            reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    SHORT           reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    INT             reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    LONG            reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    SIGNED          reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    UNSIGNED        reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    FLOAT           reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    DOUBLE          reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    VOID            reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    STRING          reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    ENUM            reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    TYPE            reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    OPERATOR        reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    CLASS           reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    STRUCT          reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    UNION           reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    TEMPLATE        reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    EQUAL           reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    LSPAREN         reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    COMMA           reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    RPAREN          reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    RTEMPLATE       reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    COLON           reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    MULTEQOP        reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    DIVEQOP         reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    MODEQOP         reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    PLUSEQOP        reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    MINUSEQOP       reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    LSHIFTEQOP      reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    RSHIFTEQOP      reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    BANDEQOP        reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    BOREQOP         reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    DOTSTAR         reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    ARROWSTAR       reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    DIVOP           reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    MODOP           reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    PLUSOP          reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    MINUSOP         reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    LSHIFT          reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    RSHIFT          reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    LTCOMP          reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    GTCOMP          reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    LTECOMP         reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    GTECOMP         reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    EQCOMP          reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    NEQCOMP         reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    XOROP           reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    OROP            reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    ANDOP           reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    QUESMARK        reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    RSPAREN         reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    RCPAREN         reduce using rule 17 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)


state 457

    (22) enum_list -> enum_list COMMA enumerator .

    RCPAREN         reduce using rule 22 (enum_list -> enum_list COMMA enumerator .)
    COMMA           reduce using rule 22 (enum_list -> enum_list COMMA enumerator .)


state 458

    (24) enumerator -> IDENTIFIER EQUAL constant_expression .

    RCPAREN         reduce using rule 24 (enumerator -> IDENTIFIER EQUAL constant_expression .)
    COMMA           reduce using rule 24 (enumerator -> IDENTIFIER EQUAL constant_expression .)


state 459

    (12) template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .

    SEMICOLON       reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    TYPEDEF         reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    LPAREN          reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    AUTO            reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    STATIC          reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    EXTERN          reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    VIRTUAL         reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    CONST           reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    VOLATILE        reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    IDENTIFIER      reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    BNOP            reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    MULTOP          reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    BANDOP          reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    CHAR            reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    SHORT           reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    INT             reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    LONG            reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    SIGNED          reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    UNSIGNED        reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    FLOAT           reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    DOUBLE          reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    VOID            reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    STRING          reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    ENUM            reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    TYPE            reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    OPERATOR        reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    CLASS           reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    STRUCT          reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    UNION           reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    TEMPLATE        reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    EQUAL           reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    LSPAREN         reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    COMMA           reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    RPAREN          reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    RTEMPLATE       reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    COLON           reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    MULTEQOP        reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    DIVEQOP         reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    MODEQOP         reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    PLUSEQOP        reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    MINUSEQOP       reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    LSHIFTEQOP      reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    RSHIFTEQOP      reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    BANDEQOP        reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    BOREQOP         reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    DOTSTAR         reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    ARROWSTAR       reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    DIVOP           reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    MODOP           reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    PLUSOP          reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    MINUSOP         reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    LSHIFT          reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    RSHIFT          reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    LTCOMP          reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    GTCOMP          reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    LTECOMP         reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    GTECOMP         reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    EQCOMP          reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    NEQCOMP         reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    XOROP           reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    OROP            reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    ANDOP           reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    QUESMARK        reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    RSPAREN         reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    RCPAREN         reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    LCPAREN         reduce using rule 12 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)


state 460

    (14) template_arg_list -> template_arg_list COMMA . template_arg
    (15) template_arg -> . expression
    (16) template_arg -> . type_name
    (59) expression -> . assignment_expression
    (60) expression -> . expression COMMA assignment_expression
    (126) type_name -> . type_specifier_list abstract_declarator
    (127) type_name -> . type_specifier_list
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (262) type_specifier_list -> . type_specifier type_specifier_list
    (263) type_specifier_list -> . type_specifier
    (26) conditional_expression -> . logical_OR_expression
    (27) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (156) type_specifier -> . simple_type_name
    (157) type_specifier -> . class_specifier
    (158) type_specifier -> . enum_specifier
    (159) type_specifier -> . elaborated_type_specifier
    (160) type_specifier -> . CONST
    (161) type_specifier -> . VOLATILE
    (28) logical_OR_expression -> . logical_AND_expression
    (29) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (162) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (163) class_specifier -> . class_head LCPAREN RCPAREN
    (17) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (18) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (20) enum_specifier -> . ENUM LCPAREN RCPAREN
    (322) elaborated_type_specifier -> . class_key IDENTIFIER
    (323) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (324) elaborated_type_specifier -> . ENUM enum_name
    (325) elaborated_type_specifier -> . TYPE IDENTIFIER
    (326) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (30) logical_AND_expression -> . inclusive_OR_expression
    (31) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (304) class_head -> . class_key base_spec
    (305) class_head -> . class_key
    (306) class_head -> . class_key IDENTIFIER base_spec
    (307) class_head -> . class_key IDENTIFIER
    (328) class_key -> . CLASS
    (329) class_key -> . STRUCT
    (330) class_key -> . UNION
    (331) class_key -> . TEMPLATE
    (32) inclusive_OR_expression -> . exclusive_OR_expression
    (33) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (264) operator_function_name -> . OPERATOR operator_name
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    ENUM            shift and go to state 47
    TYPE            shift and go to state 49
    THIS            shift and go to state 160
    LPAREN          shift and go to state 128
    CLASS           shift and go to state 51
    STRUCT          shift and go to state 52
    UNION           shift and go to state 53
    TEMPLATE        shift and go to state 59
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    template_arg                   shift and go to state 502
    expression                     shift and go to state 362
    type_name                      shift and go to state 363
    assignment_expression          shift and go to state 208
    type_specifier_list            shift and go to state 249
    conditional_expression         shift and go to state 135
    unary_expression               shift and go to state 136
    type_specifier                 shift and go to state 250
    logical_OR_expression          shift and go to state 138
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    cast_expression                shift and go to state 143
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    simple_type_name               shift and go to state 251
    class_specifier                shift and go to state 26
    enum_specifier                 shift and go to state 27
    elaborated_type_specifier      shift and go to state 28
    logical_AND_expression         shift and go to state 148
    primary_expression             shift and go to state 149
    name                           shift and go to state 151
    class_head                     shift and go to state 46
    class_key                      shift and go to state 48
    inclusive_OR_expression        shift and go to state 158
    literal                        shift and go to state 159
    exclusive_OR_expression        shift and go to state 161
    operator_function_name         shift and go to state 32
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171

state 461

    (310) base_list -> base_list COMMA base_specifier .

    COMMA           reduce using rule 310 (base_list -> base_list COMMA base_specifier .)
    LCPAREN         reduce using rule 310 (base_list -> base_list COMMA base_specifier .)


state 462

    (313) base_specifier -> class_key IDENTIFIER template_class_name .

    COMMA           reduce using rule 313 (base_specifier -> class_key IDENTIFIER template_class_name .)
    LCPAREN         reduce using rule 313 (base_specifier -> class_key IDENTIFIER template_class_name .)


state 463

    (312) base_specifier -> access_specifier class_key IDENTIFIER .
    (314) base_specifier -> access_specifier class_key IDENTIFIER . template_class_name
    (12) template_class_name -> . LTEMPLATE template_arg_list RTEMPLATE

    COMMA           reduce using rule 312 (base_specifier -> access_specifier class_key IDENTIFIER .)
    LCPAREN         reduce using rule 312 (base_specifier -> access_specifier class_key IDENTIFIER .)
    LTEMPLATE       shift and go to state 237

    template_class_name            shift and go to state 503

state 464

    (318) base_specifier -> access_specifier IDENTIFIER template_class_name .

    COMMA           reduce using rule 318 (base_specifier -> access_specifier IDENTIFIER template_class_name .)
    LCPAREN         reduce using rule 318 (base_specifier -> access_specifier IDENTIFIER template_class_name .)


state 465

    (125) cast_expression -> LPAREN type_name RPAREN cast_expression .

    DOTSTAR         reduce using rule 125 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    ARROWSTAR       reduce using rule 125 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MULTOP          reduce using rule 125 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    DIVOP           reduce using rule 125 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MODOP           reduce using rule 125 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    PLUSOP          reduce using rule 125 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MINUSOP         reduce using rule 125 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LSHIFT          reduce using rule 125 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RSHIFT          reduce using rule 125 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LTCOMP          reduce using rule 125 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    GTCOMP          reduce using rule 125 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LTECOMP         reduce using rule 125 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    GTECOMP         reduce using rule 125 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    EQCOMP          reduce using rule 125 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    NEQCOMP         reduce using rule 125 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    BANDOP          reduce using rule 125 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    XOROP           reduce using rule 125 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    OROP            reduce using rule 125 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    ANDOP           reduce using rule 125 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    QUESMARK        reduce using rule 125 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RPAREN          reduce using rule 125 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    COMMA           reduce using rule 125 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RSPAREN         reduce using rule 125 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    SEMICOLON       reduce using rule 125 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    EQUAL           reduce using rule 125 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MULTEQOP        reduce using rule 125 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    DIVEQOP         reduce using rule 125 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MODEQOP         reduce using rule 125 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    PLUSEQOP        reduce using rule 125 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MINUSEQOP       reduce using rule 125 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LSHIFTEQOP      reduce using rule 125 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RSHIFTEQOP      reduce using rule 125 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    BANDEQOP        reduce using rule 125 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    BOREQOP         reduce using rule 125 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RCPAREN         reduce using rule 125 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    COLON           reduce using rule 125 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RTEMPLATE       reduce using rule 125 (cast_expression -> LPAREN type_name RPAREN cast_expression .)


state 466

    (142) argument_declaration -> decl_specifiers declarator EQUAL expression .
    (60) expression -> expression . COMMA assignment_expression

  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 142 (argument_declaration -> decl_specifiers declarator EQUAL expression .)
    RTEMPLATE       reduce using rule 142 (argument_declaration -> decl_specifiers declarator EQUAL expression .)
    COMMA           shift and go to state 324

  ! COMMA           [ reduce using rule 142 (argument_declaration -> decl_specifiers declarator EQUAL expression .) ]


state 467

    (145) argument_declaration -> decl_specifiers abstract_declarator EQUAL expression .
    (60) expression -> expression . COMMA assignment_expression

  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 145 (argument_declaration -> decl_specifiers abstract_declarator EQUAL expression .)
    RTEMPLATE       reduce using rule 145 (argument_declaration -> decl_specifiers abstract_declarator EQUAL expression .)
    COMMA           shift and go to state 324

  ! COMMA           [ reduce using rule 145 (argument_declaration -> decl_specifiers abstract_declarator EQUAL expression .) ]


state 468

    (130) abstract_declarator -> abstract_declarator LPAREN argument_declaration_list . RPAREN

    RPAREN          shift and go to state 504


state 469

    (132) abstract_declarator -> abstract_declarator LSPAREN constant_expression . RSPAREN

    RSPAREN         shift and go to state 505


state 470

    (134) abstract_declarator -> abstract_declarator LSPAREN RSPAREN .

    EQUAL           reduce using rule 134 (abstract_declarator -> abstract_declarator LSPAREN RSPAREN .)
    LPAREN          reduce using rule 134 (abstract_declarator -> abstract_declarator LSPAREN RSPAREN .)
    LSPAREN         reduce using rule 134 (abstract_declarator -> abstract_declarator LSPAREN RSPAREN .)
    COMMA           reduce using rule 134 (abstract_declarator -> abstract_declarator LSPAREN RSPAREN .)
    RPAREN          reduce using rule 134 (abstract_declarator -> abstract_declarator LSPAREN RSPAREN .)
    RTEMPLATE       reduce using rule 134 (abstract_declarator -> abstract_declarator LSPAREN RSPAREN .)


state 471

    (131) abstract_declarator -> LPAREN argument_declaration_list RPAREN .

    EQUAL           reduce using rule 131 (abstract_declarator -> LPAREN argument_declaration_list RPAREN .)
    LPAREN          reduce using rule 131 (abstract_declarator -> LPAREN argument_declaration_list RPAREN .)
    LSPAREN         reduce using rule 131 (abstract_declarator -> LPAREN argument_declaration_list RPAREN .)
    COMMA           reduce using rule 131 (abstract_declarator -> LPAREN argument_declaration_list RPAREN .)
    RPAREN          reduce using rule 131 (abstract_declarator -> LPAREN argument_declaration_list RPAREN .)
    RTEMPLATE       reduce using rule 131 (abstract_declarator -> LPAREN argument_declaration_list RPAREN .)


state 472

    (136) abstract_declarator -> LPAREN abstract_declarator RPAREN .

    EQUAL           reduce using rule 136 (abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    LPAREN          reduce using rule 136 (abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    LSPAREN         reduce using rule 136 (abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    COMMA           reduce using rule 136 (abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    RPAREN          reduce using rule 136 (abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    RTEMPLATE       reduce using rule 136 (abstract_declarator -> LPAREN abstract_declarator RPAREN .)


state 473

    (133) abstract_declarator -> LSPAREN constant_expression RSPAREN .

    EQUAL           reduce using rule 133 (abstract_declarator -> LSPAREN constant_expression RSPAREN .)
    LPAREN          reduce using rule 133 (abstract_declarator -> LSPAREN constant_expression RSPAREN .)
    LSPAREN         reduce using rule 133 (abstract_declarator -> LSPAREN constant_expression RSPAREN .)
    COMMA           reduce using rule 133 (abstract_declarator -> LSPAREN constant_expression RSPAREN .)
    RPAREN          reduce using rule 133 (abstract_declarator -> LSPAREN constant_expression RSPAREN .)
    RTEMPLATE       reduce using rule 133 (abstract_declarator -> LSPAREN constant_expression RSPAREN .)


state 474

    (27) conditional_expression -> logical_OR_expression QUESMARK expression COLON . conditional_expression
    (26) conditional_expression -> . logical_OR_expression
    (27) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (28) logical_OR_expression -> . logical_AND_expression
    (29) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (30) logical_AND_expression -> . inclusive_OR_expression
    (31) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (32) inclusive_OR_expression -> . exclusive_OR_expression
    (33) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (264) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 176
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    logical_OR_expression          shift and go to state 138
    conditional_expression         shift and go to state 506
    logical_AND_expression         shift and go to state 148
    inclusive_OR_expression        shift and go to state 158
    exclusive_OR_expression        shift and go to state 161
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171
    cast_expression                shift and go to state 143
    unary_expression               shift and go to state 175
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    name                           shift and go to state 151
    literal                        shift and go to state 159
    operator_function_name         shift and go to state 32

state 475

    (107) postfix_expression -> postfix_expression LSPAREN expression RSPAREN .

    LSPAREN         reduce using rule 107 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    LPAREN          reduce using rule 107 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    DOT             reduce using rule 107 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    ARROW           reduce using rule 107 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    DPLUSOP         reduce using rule 107 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    DMINUSOP        reduce using rule 107 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    LTEMPLATE       reduce using rule 107 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    EQUAL           reduce using rule 107 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    MULTEQOP        reduce using rule 107 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    DIVEQOP         reduce using rule 107 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    MODEQOP         reduce using rule 107 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    PLUSEQOP        reduce using rule 107 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    MINUSEQOP       reduce using rule 107 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    LSHIFTEQOP      reduce using rule 107 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    RSHIFTEQOP      reduce using rule 107 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    BANDEQOP        reduce using rule 107 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    BOREQOP         reduce using rule 107 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    DOTSTAR         reduce using rule 107 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    ARROWSTAR       reduce using rule 107 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    MULTOP          reduce using rule 107 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    DIVOP           reduce using rule 107 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    MODOP           reduce using rule 107 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    PLUSOP          reduce using rule 107 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    MINUSOP         reduce using rule 107 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    LSHIFT          reduce using rule 107 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    RSHIFT          reduce using rule 107 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    LTCOMP          reduce using rule 107 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    GTCOMP          reduce using rule 107 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    LTECOMP         reduce using rule 107 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    GTECOMP         reduce using rule 107 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    EQCOMP          reduce using rule 107 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    NEQCOMP         reduce using rule 107 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    BANDOP          reduce using rule 107 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    XOROP           reduce using rule 107 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    OROP            reduce using rule 107 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    ANDOP           reduce using rule 107 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    QUESMARK        reduce using rule 107 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    RPAREN          reduce using rule 107 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    COMMA           reduce using rule 107 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    RSPAREN         reduce using rule 107 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    SEMICOLON       reduce using rule 107 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    RCPAREN         reduce using rule 107 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    COLON           reduce using rule 107 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    RTEMPLATE       reduce using rule 107 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)


state 476

    (108) postfix_expression -> postfix_expression LPAREN expression_list RPAREN .

    LSPAREN         reduce using rule 108 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    LPAREN          reduce using rule 108 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    DOT             reduce using rule 108 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    ARROW           reduce using rule 108 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    DPLUSOP         reduce using rule 108 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    DMINUSOP        reduce using rule 108 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    LTEMPLATE       reduce using rule 108 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    EQUAL           reduce using rule 108 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    MULTEQOP        reduce using rule 108 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    DIVEQOP         reduce using rule 108 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    MODEQOP         reduce using rule 108 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    PLUSEQOP        reduce using rule 108 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    MINUSEQOP       reduce using rule 108 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    LSHIFTEQOP      reduce using rule 108 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    RSHIFTEQOP      reduce using rule 108 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    BANDEQOP        reduce using rule 108 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    BOREQOP         reduce using rule 108 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    DOTSTAR         reduce using rule 108 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    ARROWSTAR       reduce using rule 108 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    MULTOP          reduce using rule 108 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    DIVOP           reduce using rule 108 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    MODOP           reduce using rule 108 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    PLUSOP          reduce using rule 108 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    MINUSOP         reduce using rule 108 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    LSHIFT          reduce using rule 108 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    RSHIFT          reduce using rule 108 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    LTCOMP          reduce using rule 108 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    GTCOMP          reduce using rule 108 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    LTECOMP         reduce using rule 108 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    GTECOMP         reduce using rule 108 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    EQCOMP          reduce using rule 108 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    NEQCOMP         reduce using rule 108 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    BANDOP          reduce using rule 108 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    XOROP           reduce using rule 108 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    OROP            reduce using rule 108 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    ANDOP           reduce using rule 108 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    QUESMARK        reduce using rule 108 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    RPAREN          reduce using rule 108 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 108 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    RSPAREN         reduce using rule 108 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    SEMICOLON       reduce using rule 108 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    RCPAREN         reduce using rule 108 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    COLON           reduce using rule 108 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    RTEMPLATE       reduce using rule 108 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)


state 477

    (109) postfix_expression -> postfix_expression template_class_name LPAREN expression_list . RPAREN
    (246) expression_list -> expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 507
    COMMA           shift and go to state 254


state 478

    (79) unary_expression -> SIZEOF LPAREN type_name RPAREN .

    EQUAL           reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MULTEQOP        reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    DIVEQOP         reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MODEQOP         reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    PLUSEQOP        reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MINUSEQOP       reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LSHIFTEQOP      reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RSHIFTEQOP      reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    BANDEQOP        reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    BOREQOP         reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    DOTSTAR         reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    ARROWSTAR       reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MULTOP          reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    DIVOP           reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MODOP           reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    PLUSOP          reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MINUSOP         reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LSHIFT          reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RSHIFT          reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LTCOMP          reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    GTCOMP          reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LTECOMP         reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    GTECOMP         reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    EQCOMP          reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    NEQCOMP         reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    BANDOP          reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    XOROP           reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    OROP            reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    ANDOP           reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    QUESMARK        reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RPAREN          reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    COMMA           reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RSPAREN         reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    SEMICOLON       reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RCPAREN         reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    COLON           reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RTEMPLATE       reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)


state 479

    (111) postfix_expression -> simple_type_name LPAREN expression_list RPAREN .

    LSPAREN         reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    LPAREN          reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    DOT             reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    ARROW           reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    DPLUSOP         reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    DMINUSOP        reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    LTEMPLATE       reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    EQUAL           reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    MULTEQOP        reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    DIVEQOP         reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    MODEQOP         reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    PLUSEQOP        reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    MINUSEQOP       reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    LSHIFTEQOP      reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    RSHIFTEQOP      reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    BANDEQOP        reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    BOREQOP         reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    DOTSTAR         reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    ARROWSTAR       reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    MULTOP          reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    DIVOP           reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    MODOP           reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    PLUSOP          reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    MINUSOP         reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    LSHIFT          reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    RSHIFT          reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    LTCOMP          reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    GTCOMP          reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    LTECOMP         reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    GTECOMP         reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    EQCOMP          reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    NEQCOMP         reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    BANDOP          reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    XOROP           reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    OROP            reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    ANDOP           reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    QUESMARK        reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    RPAREN          reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    RSPAREN         reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    SEMICOLON       reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    RCPAREN         reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    COLON           reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    RTEMPLATE       reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)


state 480

    (83) allocation_expression -> NEW placement new_type_name new_initializer .

    EQUAL           reduce using rule 83 (allocation_expression -> NEW placement new_type_name new_initializer .)
    MULTEQOP        reduce using rule 83 (allocation_expression -> NEW placement new_type_name new_initializer .)
    DIVEQOP         reduce using rule 83 (allocation_expression -> NEW placement new_type_name new_initializer .)
    MODEQOP         reduce using rule 83 (allocation_expression -> NEW placement new_type_name new_initializer .)
    PLUSEQOP        reduce using rule 83 (allocation_expression -> NEW placement new_type_name new_initializer .)
    MINUSEQOP       reduce using rule 83 (allocation_expression -> NEW placement new_type_name new_initializer .)
    LSHIFTEQOP      reduce using rule 83 (allocation_expression -> NEW placement new_type_name new_initializer .)
    RSHIFTEQOP      reduce using rule 83 (allocation_expression -> NEW placement new_type_name new_initializer .)
    BANDEQOP        reduce using rule 83 (allocation_expression -> NEW placement new_type_name new_initializer .)
    BOREQOP         reduce using rule 83 (allocation_expression -> NEW placement new_type_name new_initializer .)
    DOTSTAR         reduce using rule 83 (allocation_expression -> NEW placement new_type_name new_initializer .)
    ARROWSTAR       reduce using rule 83 (allocation_expression -> NEW placement new_type_name new_initializer .)
    MULTOP          reduce using rule 83 (allocation_expression -> NEW placement new_type_name new_initializer .)
    DIVOP           reduce using rule 83 (allocation_expression -> NEW placement new_type_name new_initializer .)
    MODOP           reduce using rule 83 (allocation_expression -> NEW placement new_type_name new_initializer .)
    PLUSOP          reduce using rule 83 (allocation_expression -> NEW placement new_type_name new_initializer .)
    MINUSOP         reduce using rule 83 (allocation_expression -> NEW placement new_type_name new_initializer .)
    LSHIFT          reduce using rule 83 (allocation_expression -> NEW placement new_type_name new_initializer .)
    RSHIFT          reduce using rule 83 (allocation_expression -> NEW placement new_type_name new_initializer .)
    LTCOMP          reduce using rule 83 (allocation_expression -> NEW placement new_type_name new_initializer .)
    GTCOMP          reduce using rule 83 (allocation_expression -> NEW placement new_type_name new_initializer .)
    LTECOMP         reduce using rule 83 (allocation_expression -> NEW placement new_type_name new_initializer .)
    GTECOMP         reduce using rule 83 (allocation_expression -> NEW placement new_type_name new_initializer .)
    EQCOMP          reduce using rule 83 (allocation_expression -> NEW placement new_type_name new_initializer .)
    NEQCOMP         reduce using rule 83 (allocation_expression -> NEW placement new_type_name new_initializer .)
    BANDOP          reduce using rule 83 (allocation_expression -> NEW placement new_type_name new_initializer .)
    XOROP           reduce using rule 83 (allocation_expression -> NEW placement new_type_name new_initializer .)
    OROP            reduce using rule 83 (allocation_expression -> NEW placement new_type_name new_initializer .)
    ANDOP           reduce using rule 83 (allocation_expression -> NEW placement new_type_name new_initializer .)
    QUESMARK        reduce using rule 83 (allocation_expression -> NEW placement new_type_name new_initializer .)
    RPAREN          reduce using rule 83 (allocation_expression -> NEW placement new_type_name new_initializer .)
    COMMA           reduce using rule 83 (allocation_expression -> NEW placement new_type_name new_initializer .)
    RSPAREN         reduce using rule 83 (allocation_expression -> NEW placement new_type_name new_initializer .)
    SEMICOLON       reduce using rule 83 (allocation_expression -> NEW placement new_type_name new_initializer .)
    RCPAREN         reduce using rule 83 (allocation_expression -> NEW placement new_type_name new_initializer .)
    COLON           reduce using rule 83 (allocation_expression -> NEW placement new_type_name new_initializer .)
    RTEMPLATE       reduce using rule 83 (allocation_expression -> NEW placement new_type_name new_initializer .)


state 481

    (87) allocation_expression -> NEW placement LPAREN type_name . RPAREN new_initializer
    (89) allocation_expression -> NEW placement LPAREN type_name . RPAREN

    RPAREN          shift and go to state 508


state 482

    (98) new_initializer -> LPAREN initializer_list . RPAREN
    (239) initializer_list -> initializer_list . COMMA assignment_expression

    RPAREN          shift and go to state 509
    COMMA           shift and go to state 510


state 483

    (99) new_initializer -> LPAREN RPAREN .

    EQUAL           reduce using rule 99 (new_initializer -> LPAREN RPAREN .)
    MULTEQOP        reduce using rule 99 (new_initializer -> LPAREN RPAREN .)
    DIVEQOP         reduce using rule 99 (new_initializer -> LPAREN RPAREN .)
    MODEQOP         reduce using rule 99 (new_initializer -> LPAREN RPAREN .)
    PLUSEQOP        reduce using rule 99 (new_initializer -> LPAREN RPAREN .)
    MINUSEQOP       reduce using rule 99 (new_initializer -> LPAREN RPAREN .)
    LSHIFTEQOP      reduce using rule 99 (new_initializer -> LPAREN RPAREN .)
    RSHIFTEQOP      reduce using rule 99 (new_initializer -> LPAREN RPAREN .)
    BANDEQOP        reduce using rule 99 (new_initializer -> LPAREN RPAREN .)
    BOREQOP         reduce using rule 99 (new_initializer -> LPAREN RPAREN .)
    DOTSTAR         reduce using rule 99 (new_initializer -> LPAREN RPAREN .)
    ARROWSTAR       reduce using rule 99 (new_initializer -> LPAREN RPAREN .)
    MULTOP          reduce using rule 99 (new_initializer -> LPAREN RPAREN .)
    DIVOP           reduce using rule 99 (new_initializer -> LPAREN RPAREN .)
    MODOP           reduce using rule 99 (new_initializer -> LPAREN RPAREN .)
    PLUSOP          reduce using rule 99 (new_initializer -> LPAREN RPAREN .)
    MINUSOP         reduce using rule 99 (new_initializer -> LPAREN RPAREN .)
    LSHIFT          reduce using rule 99 (new_initializer -> LPAREN RPAREN .)
    RSHIFT          reduce using rule 99 (new_initializer -> LPAREN RPAREN .)
    LTCOMP          reduce using rule 99 (new_initializer -> LPAREN RPAREN .)
    GTCOMP          reduce using rule 99 (new_initializer -> LPAREN RPAREN .)
    LTECOMP         reduce using rule 99 (new_initializer -> LPAREN RPAREN .)
    GTECOMP         reduce using rule 99 (new_initializer -> LPAREN RPAREN .)
    EQCOMP          reduce using rule 99 (new_initializer -> LPAREN RPAREN .)
    NEQCOMP         reduce using rule 99 (new_initializer -> LPAREN RPAREN .)
    BANDOP          reduce using rule 99 (new_initializer -> LPAREN RPAREN .)
    XOROP           reduce using rule 99 (new_initializer -> LPAREN RPAREN .)
    OROP            reduce using rule 99 (new_initializer -> LPAREN RPAREN .)
    ANDOP           reduce using rule 99 (new_initializer -> LPAREN RPAREN .)
    QUESMARK        reduce using rule 99 (new_initializer -> LPAREN RPAREN .)
    RPAREN          reduce using rule 99 (new_initializer -> LPAREN RPAREN .)
    COMMA           reduce using rule 99 (new_initializer -> LPAREN RPAREN .)
    RSPAREN         reduce using rule 99 (new_initializer -> LPAREN RPAREN .)
    SEMICOLON       reduce using rule 99 (new_initializer -> LPAREN RPAREN .)
    RCPAREN         reduce using rule 99 (new_initializer -> LPAREN RPAREN .)
    COLON           reduce using rule 99 (new_initializer -> LPAREN RPAREN .)
    RTEMPLATE       reduce using rule 99 (new_initializer -> LPAREN RPAREN .)


state 484

    (88) allocation_expression -> NEW LPAREN type_name RPAREN . new_initializer
    (90) allocation_expression -> NEW LPAREN type_name RPAREN .
    (98) new_initializer -> . LPAREN initializer_list RPAREN
    (99) new_initializer -> . LPAREN RPAREN

    EQUAL           reduce using rule 90 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    MULTEQOP        reduce using rule 90 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    DIVEQOP         reduce using rule 90 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    MODEQOP         reduce using rule 90 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    PLUSEQOP        reduce using rule 90 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    MINUSEQOP       reduce using rule 90 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    LSHIFTEQOP      reduce using rule 90 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    RSHIFTEQOP      reduce using rule 90 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    BANDEQOP        reduce using rule 90 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    BOREQOP         reduce using rule 90 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    DOTSTAR         reduce using rule 90 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    ARROWSTAR       reduce using rule 90 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    MULTOP          reduce using rule 90 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    DIVOP           reduce using rule 90 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    MODOP           reduce using rule 90 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    PLUSOP          reduce using rule 90 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    MINUSOP         reduce using rule 90 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    LSHIFT          reduce using rule 90 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    RSHIFT          reduce using rule 90 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    LTCOMP          reduce using rule 90 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    GTCOMP          reduce using rule 90 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    LTECOMP         reduce using rule 90 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    GTECOMP         reduce using rule 90 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    EQCOMP          reduce using rule 90 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    NEQCOMP         reduce using rule 90 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    BANDOP          reduce using rule 90 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    XOROP           reduce using rule 90 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    OROP            reduce using rule 90 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    ANDOP           reduce using rule 90 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    QUESMARK        reduce using rule 90 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    RPAREN          reduce using rule 90 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    COMMA           reduce using rule 90 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    RSPAREN         reduce using rule 90 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    SEMICOLON       reduce using rule 90 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    RCPAREN         reduce using rule 90 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    COLON           reduce using rule 90 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    RTEMPLATE       reduce using rule 90 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    LPAREN          shift and go to state 404

    new_initializer                shift and go to state 511

state 485

    (97) placement -> LPAREN expression_list RPAREN .

    LPAREN          reduce using rule 97 (placement -> LPAREN expression_list RPAREN .)
    CONST           reduce using rule 97 (placement -> LPAREN expression_list RPAREN .)
    VOLATILE        reduce using rule 97 (placement -> LPAREN expression_list RPAREN .)
    CHAR            reduce using rule 97 (placement -> LPAREN expression_list RPAREN .)
    SHORT           reduce using rule 97 (placement -> LPAREN expression_list RPAREN .)
    INT             reduce using rule 97 (placement -> LPAREN expression_list RPAREN .)
    LONG            reduce using rule 97 (placement -> LPAREN expression_list RPAREN .)
    SIGNED          reduce using rule 97 (placement -> LPAREN expression_list RPAREN .)
    UNSIGNED        reduce using rule 97 (placement -> LPAREN expression_list RPAREN .)
    FLOAT           reduce using rule 97 (placement -> LPAREN expression_list RPAREN .)
    DOUBLE          reduce using rule 97 (placement -> LPAREN expression_list RPAREN .)
    VOID            reduce using rule 97 (placement -> LPAREN expression_list RPAREN .)
    STRING          reduce using rule 97 (placement -> LPAREN expression_list RPAREN .)
    ENUM            reduce using rule 97 (placement -> LPAREN expression_list RPAREN .)
    TYPE            reduce using rule 97 (placement -> LPAREN expression_list RPAREN .)
    CLASS           reduce using rule 97 (placement -> LPAREN expression_list RPAREN .)
    STRUCT          reduce using rule 97 (placement -> LPAREN expression_list RPAREN .)
    UNION           reduce using rule 97 (placement -> LPAREN expression_list RPAREN .)
    TEMPLATE        reduce using rule 97 (placement -> LPAREN expression_list RPAREN .)


state 486

    (95) new_declarator -> new_declarator LSPAREN . expression RSPAREN
    (59) expression -> . assignment_expression
    (60) expression -> . expression COMMA assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (26) conditional_expression -> . logical_OR_expression
    (27) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (28) logical_OR_expression -> . logical_AND_expression
    (29) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (30) logical_AND_expression -> . inclusive_OR_expression
    (31) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (32) inclusive_OR_expression -> . exclusive_OR_expression
    (33) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (264) operator_function_name -> . OPERATOR operator_name
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    LPAREN          shift and go to state 128
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    expression                     shift and go to state 512
    assignment_expression          shift and go to state 208
    conditional_expression         shift and go to state 135
    unary_expression               shift and go to state 136
    logical_OR_expression          shift and go to state 138
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    cast_expression                shift and go to state 143
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    logical_AND_expression         shift and go to state 148
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    name                           shift and go to state 151
    inclusive_OR_expression        shift and go to state 158
    literal                        shift and go to state 159
    exclusive_OR_expression        shift and go to state 161
    operator_function_name         shift and go to state 32
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171

state 487

    (93) new_declarator -> MULTOP new_declarator .
    (95) new_declarator -> new_declarator . LSPAREN expression RSPAREN

    LSPAREN         reduce using rule 93 (new_declarator -> MULTOP new_declarator .)
    LPAREN          reduce using rule 93 (new_declarator -> MULTOP new_declarator .)
    EQUAL           reduce using rule 93 (new_declarator -> MULTOP new_declarator .)
    MULTEQOP        reduce using rule 93 (new_declarator -> MULTOP new_declarator .)
    DIVEQOP         reduce using rule 93 (new_declarator -> MULTOP new_declarator .)
    MODEQOP         reduce using rule 93 (new_declarator -> MULTOP new_declarator .)
    PLUSEQOP        reduce using rule 93 (new_declarator -> MULTOP new_declarator .)
    MINUSEQOP       reduce using rule 93 (new_declarator -> MULTOP new_declarator .)
    LSHIFTEQOP      reduce using rule 93 (new_declarator -> MULTOP new_declarator .)
    RSHIFTEQOP      reduce using rule 93 (new_declarator -> MULTOP new_declarator .)
    BANDEQOP        reduce using rule 93 (new_declarator -> MULTOP new_declarator .)
    BOREQOP         reduce using rule 93 (new_declarator -> MULTOP new_declarator .)
    DOTSTAR         reduce using rule 93 (new_declarator -> MULTOP new_declarator .)
    ARROWSTAR       reduce using rule 93 (new_declarator -> MULTOP new_declarator .)
    MULTOP          reduce using rule 93 (new_declarator -> MULTOP new_declarator .)
    DIVOP           reduce using rule 93 (new_declarator -> MULTOP new_declarator .)
    MODOP           reduce using rule 93 (new_declarator -> MULTOP new_declarator .)
    PLUSOP          reduce using rule 93 (new_declarator -> MULTOP new_declarator .)
    MINUSOP         reduce using rule 93 (new_declarator -> MULTOP new_declarator .)
    LSHIFT          reduce using rule 93 (new_declarator -> MULTOP new_declarator .)
    RSHIFT          reduce using rule 93 (new_declarator -> MULTOP new_declarator .)
    LTCOMP          reduce using rule 93 (new_declarator -> MULTOP new_declarator .)
    GTCOMP          reduce using rule 93 (new_declarator -> MULTOP new_declarator .)
    LTECOMP         reduce using rule 93 (new_declarator -> MULTOP new_declarator .)
    GTECOMP         reduce using rule 93 (new_declarator -> MULTOP new_declarator .)
    EQCOMP          reduce using rule 93 (new_declarator -> MULTOP new_declarator .)
    NEQCOMP         reduce using rule 93 (new_declarator -> MULTOP new_declarator .)
    BANDOP          reduce using rule 93 (new_declarator -> MULTOP new_declarator .)
    XOROP           reduce using rule 93 (new_declarator -> MULTOP new_declarator .)
    OROP            reduce using rule 93 (new_declarator -> MULTOP new_declarator .)
    ANDOP           reduce using rule 93 (new_declarator -> MULTOP new_declarator .)
    QUESMARK        reduce using rule 93 (new_declarator -> MULTOP new_declarator .)
    RPAREN          reduce using rule 93 (new_declarator -> MULTOP new_declarator .)
    COMMA           reduce using rule 93 (new_declarator -> MULTOP new_declarator .)
    RSPAREN         reduce using rule 93 (new_declarator -> MULTOP new_declarator .)
    SEMICOLON       reduce using rule 93 (new_declarator -> MULTOP new_declarator .)
    RCPAREN         reduce using rule 93 (new_declarator -> MULTOP new_declarator .)
    COLON           reduce using rule 93 (new_declarator -> MULTOP new_declarator .)
    RTEMPLATE       reduce using rule 93 (new_declarator -> MULTOP new_declarator .)

  ! LSPAREN         [ shift and go to state 486 ]


state 488

    (96) new_declarator -> LSPAREN expression . RSPAREN
    (60) expression -> expression . COMMA assignment_expression

    RSPAREN         shift and go to state 513
    COMMA           shift and go to state 324


state 489

    (240) initializer_list -> LCPAREN initializer_list RCPAREN .

    RCPAREN         reduce using rule 240 (initializer_list -> LCPAREN initializer_list RCPAREN .)
    COMMA           reduce using rule 240 (initializer_list -> LCPAREN initializer_list RCPAREN .)
    RPAREN          reduce using rule 240 (initializer_list -> LCPAREN initializer_list RCPAREN .)


state 490

    (241) initializer_list -> LCPAREN initializer_list COMMA . RCPAREN
    (239) initializer_list -> initializer_list COMMA . assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (26) conditional_expression -> . logical_OR_expression
    (27) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (28) logical_OR_expression -> . logical_AND_expression
    (29) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (30) logical_AND_expression -> . inclusive_OR_expression
    (31) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (32) inclusive_OR_expression -> . exclusive_OR_expression
    (33) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (264) operator_function_name -> . OPERATOR operator_name
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RCPAREN         shift and go to state 514
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    LPAREN          shift and go to state 128
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    assignment_expression          shift and go to state 492
    conditional_expression         shift and go to state 135
    unary_expression               shift and go to state 136
    logical_OR_expression          shift and go to state 138
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    cast_expression                shift and go to state 143
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    logical_AND_expression         shift and go to state 148
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    name                           shift and go to state 151
    inclusive_OR_expression        shift and go to state 158
    literal                        shift and go to state 159
    exclusive_OR_expression        shift and go to state 161
    operator_function_name         shift and go to state 32
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171

state 491

    (236) initializer -> EQUAL LCPAREN initializer_list COMMA RCPAREN .

    SEMICOLON       reduce using rule 236 (initializer -> EQUAL LCPAREN initializer_list COMMA RCPAREN .)
    COMMA           reduce using rule 236 (initializer -> EQUAL LCPAREN initializer_list COMMA RCPAREN .)


state 492

    (239) initializer_list -> initializer_list COMMA assignment_expression .

    RCPAREN         reduce using rule 239 (initializer_list -> initializer_list COMMA assignment_expression .)
    COMMA           reduce using rule 239 (initializer_list -> initializer_list COMMA assignment_expression .)
    RPAREN          reduce using rule 239 (initializer_list -> initializer_list COMMA assignment_expression .)


state 493

    (208) labeled_statement -> CASE constant_expression COLON statement .

    RCPAREN         reduce using rule 208 (labeled_statement -> CASE constant_expression COLON statement .)
    IDENTIFIER      reduce using rule 208 (labeled_statement -> CASE constant_expression COLON statement .)
    CASE            reduce using rule 208 (labeled_statement -> CASE constant_expression COLON statement .)
    DEFAULT         reduce using rule 208 (labeled_statement -> CASE constant_expression COLON statement .)
    SEMICOLON       reduce using rule 208 (labeled_statement -> CASE constant_expression COLON statement .)
    LCPAREN         reduce using rule 208 (labeled_statement -> CASE constant_expression COLON statement .)
    IF              reduce using rule 208 (labeled_statement -> CASE constant_expression COLON statement .)
    SWITCH          reduce using rule 208 (labeled_statement -> CASE constant_expression COLON statement .)
    WHILE           reduce using rule 208 (labeled_statement -> CASE constant_expression COLON statement .)
    DO              reduce using rule 208 (labeled_statement -> CASE constant_expression COLON statement .)
    FOR             reduce using rule 208 (labeled_statement -> CASE constant_expression COLON statement .)
    BREAK           reduce using rule 208 (labeled_statement -> CASE constant_expression COLON statement .)
    CONTINUE        reduce using rule 208 (labeled_statement -> CASE constant_expression COLON statement .)
    RETURN          reduce using rule 208 (labeled_statement -> CASE constant_expression COLON statement .)
    GOTO            reduce using rule 208 (labeled_statement -> CASE constant_expression COLON statement .)
    TRY             reduce using rule 208 (labeled_statement -> CASE constant_expression COLON statement .)
    ASM             reduce using rule 208 (labeled_statement -> CASE constant_expression COLON statement .)
    TEMPLATE        reduce using rule 208 (labeled_statement -> CASE constant_expression COLON statement .)
    DPLUSOP         reduce using rule 208 (labeled_statement -> CASE constant_expression COLON statement .)
    DMINUSOP        reduce using rule 208 (labeled_statement -> CASE constant_expression COLON statement .)
    SIZEOF          reduce using rule 208 (labeled_statement -> CASE constant_expression COLON statement .)
    TYPEDEF         reduce using rule 208 (labeled_statement -> CASE constant_expression COLON statement .)
    LPAREN          reduce using rule 208 (labeled_statement -> CASE constant_expression COLON statement .)
    PLUSOP          reduce using rule 208 (labeled_statement -> CASE constant_expression COLON statement .)
    MINUSOP         reduce using rule 208 (labeled_statement -> CASE constant_expression COLON statement .)
    NOTSYM          reduce using rule 208 (labeled_statement -> CASE constant_expression COLON statement .)
    BNOP            reduce using rule 208 (labeled_statement -> CASE constant_expression COLON statement .)
    MULTOP          reduce using rule 208 (labeled_statement -> CASE constant_expression COLON statement .)
    BANDOP          reduce using rule 208 (labeled_statement -> CASE constant_expression COLON statement .)
    NEW             reduce using rule 208 (labeled_statement -> CASE constant_expression COLON statement .)
    DELETE          reduce using rule 208 (labeled_statement -> CASE constant_expression COLON statement .)
    AUTO            reduce using rule 208 (labeled_statement -> CASE constant_expression COLON statement .)
    STATIC          reduce using rule 208 (labeled_statement -> CASE constant_expression COLON statement .)
    EXTERN          reduce using rule 208 (labeled_statement -> CASE constant_expression COLON statement .)
    VIRTUAL         reduce using rule 208 (labeled_statement -> CASE constant_expression COLON statement .)
    CONST           reduce using rule 208 (labeled_statement -> CASE constant_expression COLON statement .)
    VOLATILE        reduce using rule 208 (labeled_statement -> CASE constant_expression COLON statement .)
    THIS            reduce using rule 208 (labeled_statement -> CASE constant_expression COLON statement .)
    CHAR            reduce using rule 208 (labeled_statement -> CASE constant_expression COLON statement .)
    SHORT           reduce using rule 208 (labeled_statement -> CASE constant_expression COLON statement .)
    INT             reduce using rule 208 (labeled_statement -> CASE constant_expression COLON statement .)
    LONG            reduce using rule 208 (labeled_statement -> CASE constant_expression COLON statement .)
    SIGNED          reduce using rule 208 (labeled_statement -> CASE constant_expression COLON statement .)
    UNSIGNED        reduce using rule 208 (labeled_statement -> CASE constant_expression COLON statement .)
    FLOAT           reduce using rule 208 (labeled_statement -> CASE constant_expression COLON statement .)
    DOUBLE          reduce using rule 208 (labeled_statement -> CASE constant_expression COLON statement .)
    VOID            reduce using rule 208 (labeled_statement -> CASE constant_expression COLON statement .)
    STRING          reduce using rule 208 (labeled_statement -> CASE constant_expression COLON statement .)
    ENUM            reduce using rule 208 (labeled_statement -> CASE constant_expression COLON statement .)
    TYPE            reduce using rule 208 (labeled_statement -> CASE constant_expression COLON statement .)
    OPERATOR        reduce using rule 208 (labeled_statement -> CASE constant_expression COLON statement .)
    NUMBER          reduce using rule 208 (labeled_statement -> CASE constant_expression COLON statement .)
    STRING_L        reduce using rule 208 (labeled_statement -> CASE constant_expression COLON statement .)
    SCHAR           reduce using rule 208 (labeled_statement -> CASE constant_expression COLON statement .)
    CLASS           reduce using rule 208 (labeled_statement -> CASE constant_expression COLON statement .)
    STRUCT          reduce using rule 208 (labeled_statement -> CASE constant_expression COLON statement .)
    UNION           reduce using rule 208 (labeled_statement -> CASE constant_expression COLON statement .)
    ELSE            reduce using rule 208 (labeled_statement -> CASE constant_expression COLON statement .)


state 494

    (197) selection_statement -> IF LPAREN expression RPAREN . statement
    (198) selection_statement -> IF LPAREN expression RPAREN . statement ELSE statement
    (184) statement -> . labeled_statement
    (185) statement -> . expression_statement
    (186) statement -> . compound_statement
    (187) statement -> . selection_statement
    (188) statement -> . iteration_statement
    (189) statement -> . jump_statement
    (190) statement -> . declaration_statement
    (191) statement -> . try_block
    (207) labeled_statement -> . IDENTIFIER COLON statement
    (208) labeled_statement -> . CASE constant_expression COLON statement
    (209) labeled_statement -> . DEFAULT COLON statement
    (218) expression_statement -> . expression SEMICOLON
    (219) expression_statement -> . SEMICOLON
    (180) compound_statement -> . LCPAREN statement_list RCPAREN
    (181) compound_statement -> . LCPAREN RCPAREN
    (197) selection_statement -> . IF LPAREN expression RPAREN statement
    (198) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (199) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (210) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (211) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (212) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (213) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (214) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (215) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (192) jump_statement -> . BREAK SEMICOLON
    (193) jump_statement -> . CONTINUE SEMICOLON
    (194) jump_statement -> . RETURN expression SEMICOLON
    (195) jump_statement -> . RETURN SEMICOLON
    (196) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (220) declaration_statement -> . declaration
    (200) try_block -> . TRY compound_statement handler_list
    (59) expression -> . assignment_expression
    (60) expression -> . expression COMMA assignment_expression
    (221) declaration -> . decl_specifiers declarator_list SEMICOLON
    (222) declaration -> . decl_specifiers SEMICOLON
    (223) declaration -> . declarator_list SEMICOLON
    (224) declaration -> . asm_declaration
    (225) declaration -> . function_definition
    (226) declaration -> . template_declaration
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (147) decl_specifiers -> . decl_specifiers decl_specifier
    (148) decl_specifiers -> . decl_specifier
    (230) declarator_list -> . init_declarator
    (231) declarator_list -> . declarator_list COMMA init_declarator
    (242) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (177) function_definition -> . decl_specifiers declarator fct_body
    (178) function_definition -> . declarator fct_body
    (227) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (26) conditional_expression -> . logical_OR_expression
    (27) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (149) decl_specifier -> . storage_class_specifier
    (150) decl_specifier -> . type_specifier
    (151) decl_specifier -> . TYPEDEF
    (232) init_declarator -> . declarator initializer
    (233) init_declarator -> . declarator
    (253) declarator -> . name
    (254) declarator -> . unary2_operator declarator
    (255) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (256) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (257) declarator -> . declarator LSPAREN RSPAREN
    (258) declarator -> . LPAREN declarator RPAREN
    (28) logical_OR_expression -> . logical_AND_expression
    (29) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (152) storage_class_specifier -> . AUTO
    (153) storage_class_specifier -> . STATIC
    (154) storage_class_specifier -> . EXTERN
    (155) storage_class_specifier -> . VIRTUAL
    (156) type_specifier -> . simple_type_name
    (157) type_specifier -> . class_specifier
    (158) type_specifier -> . enum_specifier
    (159) type_specifier -> . elaborated_type_specifier
    (160) type_specifier -> . CONST
    (161) type_specifier -> . VOLATILE
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (30) logical_AND_expression -> . inclusive_OR_expression
    (31) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (162) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (163) class_specifier -> . class_head LCPAREN RCPAREN
    (17) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (18) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (20) enum_specifier -> . ENUM LCPAREN RCPAREN
    (322) elaborated_type_specifier -> . class_key IDENTIFIER
    (323) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (324) elaborated_type_specifier -> . ENUM enum_name
    (325) elaborated_type_specifier -> . TYPE IDENTIFIER
    (326) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (264) operator_function_name -> . OPERATOR operator_name
    (32) inclusive_OR_expression -> . exclusive_OR_expression
    (33) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (304) class_head -> . class_key base_spec
    (305) class_head -> . class_key
    (306) class_head -> . class_key IDENTIFIER base_spec
    (307) class_head -> . class_key IDENTIFIER
    (328) class_key -> . CLASS
    (329) class_key -> . STRUCT
    (330) class_key -> . UNION
    (331) class_key -> . TEMPLATE
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 191
    CASE            shift and go to state 192
    DEFAULT         shift and go to state 193
    SEMICOLON       shift and go to state 195
    LCPAREN         shift and go to state 70
    IF              shift and go to state 196
    SWITCH          shift and go to state 198
    WHILE           shift and go to state 199
    DO              shift and go to state 200
    FOR             shift and go to state 201
    BREAK           shift and go to state 202
    CONTINUE        shift and go to state 203
    RETURN          shift and go to state 204
    GOTO            shift and go to state 205
    TRY             shift and go to state 207
    ASM             shift and go to state 12
    TEMPLATE        shift and go to state 15
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    TYPEDEF         shift and go to state 18
    LPAREN          shift and go to state 197
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    AUTO            shift and go to state 21
    STATIC          shift and go to state 22
    EXTERN          shift and go to state 23
    VIRTUAL         shift and go to state 24
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    THIS            shift and go to state 160
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    ENUM            shift and go to state 47
    TYPE            shift and go to state 49
    OPERATOR        shift and go to state 50
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    CLASS           shift and go to state 51
    STRUCT          shift and go to state 52
    UNION           shift and go to state 53

    expression                     shift and go to state 194
    statement                      shift and go to state 515
    labeled_statement              shift and go to state 183
    expression_statement           shift and go to state 184
    compound_statement             shift and go to state 185
    selection_statement            shift and go to state 186
    iteration_statement            shift and go to state 187
    jump_statement                 shift and go to state 188
    declaration_statement          shift and go to state 189
    try_block                      shift and go to state 190
    declaration                    shift and go to state 206
    assignment_expression          shift and go to state 208
    decl_specifiers                shift and go to state 5
    declarator_list                shift and go to state 6
    asm_declaration                shift and go to state 7
    function_definition            shift and go to state 8
    template_declaration           shift and go to state 9
    conditional_expression         shift and go to state 135
    unary_expression               shift and go to state 136
    decl_specifier                 shift and go to state 10
    init_declarator                shift and go to state 11
    declarator                     shift and go to state 14
    logical_OR_expression          shift and go to state 138
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    cast_expression                shift and go to state 143
    unary2_operator                shift and go to state 209
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    storage_class_specifier        shift and go to state 16
    type_specifier                 shift and go to state 17
    name                           shift and go to state 210
    logical_AND_expression         shift and go to state 148
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 150
    class_specifier                shift and go to state 26
    enum_specifier                 shift and go to state 27
    elaborated_type_specifier      shift and go to state 28
    operator_function_name         shift and go to state 32
    inclusive_OR_expression        shift and go to state 158
    literal                        shift and go to state 159
    class_head                     shift and go to state 46
    class_key                      shift and go to state 48
    exclusive_OR_expression        shift and go to state 161
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171

state 495

    (199) selection_statement -> SWITCH LPAREN expression RPAREN . statement
    (184) statement -> . labeled_statement
    (185) statement -> . expression_statement
    (186) statement -> . compound_statement
    (187) statement -> . selection_statement
    (188) statement -> . iteration_statement
    (189) statement -> . jump_statement
    (190) statement -> . declaration_statement
    (191) statement -> . try_block
    (207) labeled_statement -> . IDENTIFIER COLON statement
    (208) labeled_statement -> . CASE constant_expression COLON statement
    (209) labeled_statement -> . DEFAULT COLON statement
    (218) expression_statement -> . expression SEMICOLON
    (219) expression_statement -> . SEMICOLON
    (180) compound_statement -> . LCPAREN statement_list RCPAREN
    (181) compound_statement -> . LCPAREN RCPAREN
    (197) selection_statement -> . IF LPAREN expression RPAREN statement
    (198) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (199) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (210) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (211) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (212) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (213) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (214) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (215) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (192) jump_statement -> . BREAK SEMICOLON
    (193) jump_statement -> . CONTINUE SEMICOLON
    (194) jump_statement -> . RETURN expression SEMICOLON
    (195) jump_statement -> . RETURN SEMICOLON
    (196) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (220) declaration_statement -> . declaration
    (200) try_block -> . TRY compound_statement handler_list
    (59) expression -> . assignment_expression
    (60) expression -> . expression COMMA assignment_expression
    (221) declaration -> . decl_specifiers declarator_list SEMICOLON
    (222) declaration -> . decl_specifiers SEMICOLON
    (223) declaration -> . declarator_list SEMICOLON
    (224) declaration -> . asm_declaration
    (225) declaration -> . function_definition
    (226) declaration -> . template_declaration
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (147) decl_specifiers -> . decl_specifiers decl_specifier
    (148) decl_specifiers -> . decl_specifier
    (230) declarator_list -> . init_declarator
    (231) declarator_list -> . declarator_list COMMA init_declarator
    (242) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (177) function_definition -> . decl_specifiers declarator fct_body
    (178) function_definition -> . declarator fct_body
    (227) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (26) conditional_expression -> . logical_OR_expression
    (27) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (149) decl_specifier -> . storage_class_specifier
    (150) decl_specifier -> . type_specifier
    (151) decl_specifier -> . TYPEDEF
    (232) init_declarator -> . declarator initializer
    (233) init_declarator -> . declarator
    (253) declarator -> . name
    (254) declarator -> . unary2_operator declarator
    (255) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (256) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (257) declarator -> . declarator LSPAREN RSPAREN
    (258) declarator -> . LPAREN declarator RPAREN
    (28) logical_OR_expression -> . logical_AND_expression
    (29) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (152) storage_class_specifier -> . AUTO
    (153) storage_class_specifier -> . STATIC
    (154) storage_class_specifier -> . EXTERN
    (155) storage_class_specifier -> . VIRTUAL
    (156) type_specifier -> . simple_type_name
    (157) type_specifier -> . class_specifier
    (158) type_specifier -> . enum_specifier
    (159) type_specifier -> . elaborated_type_specifier
    (160) type_specifier -> . CONST
    (161) type_specifier -> . VOLATILE
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (30) logical_AND_expression -> . inclusive_OR_expression
    (31) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (162) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (163) class_specifier -> . class_head LCPAREN RCPAREN
    (17) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (18) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (20) enum_specifier -> . ENUM LCPAREN RCPAREN
    (322) elaborated_type_specifier -> . class_key IDENTIFIER
    (323) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (324) elaborated_type_specifier -> . ENUM enum_name
    (325) elaborated_type_specifier -> . TYPE IDENTIFIER
    (326) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (264) operator_function_name -> . OPERATOR operator_name
    (32) inclusive_OR_expression -> . exclusive_OR_expression
    (33) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (304) class_head -> . class_key base_spec
    (305) class_head -> . class_key
    (306) class_head -> . class_key IDENTIFIER base_spec
    (307) class_head -> . class_key IDENTIFIER
    (328) class_key -> . CLASS
    (329) class_key -> . STRUCT
    (330) class_key -> . UNION
    (331) class_key -> . TEMPLATE
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 191
    CASE            shift and go to state 192
    DEFAULT         shift and go to state 193
    SEMICOLON       shift and go to state 195
    LCPAREN         shift and go to state 70
    IF              shift and go to state 196
    SWITCH          shift and go to state 198
    WHILE           shift and go to state 199
    DO              shift and go to state 200
    FOR             shift and go to state 201
    BREAK           shift and go to state 202
    CONTINUE        shift and go to state 203
    RETURN          shift and go to state 204
    GOTO            shift and go to state 205
    TRY             shift and go to state 207
    ASM             shift and go to state 12
    TEMPLATE        shift and go to state 15
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    TYPEDEF         shift and go to state 18
    LPAREN          shift and go to state 197
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    AUTO            shift and go to state 21
    STATIC          shift and go to state 22
    EXTERN          shift and go to state 23
    VIRTUAL         shift and go to state 24
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    THIS            shift and go to state 160
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    ENUM            shift and go to state 47
    TYPE            shift and go to state 49
    OPERATOR        shift and go to state 50
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    CLASS           shift and go to state 51
    STRUCT          shift and go to state 52
    UNION           shift and go to state 53

    expression                     shift and go to state 194
    statement                      shift and go to state 516
    labeled_statement              shift and go to state 183
    expression_statement           shift and go to state 184
    compound_statement             shift and go to state 185
    selection_statement            shift and go to state 186
    iteration_statement            shift and go to state 187
    jump_statement                 shift and go to state 188
    declaration_statement          shift and go to state 189
    try_block                      shift and go to state 190
    declaration                    shift and go to state 206
    assignment_expression          shift and go to state 208
    decl_specifiers                shift and go to state 5
    declarator_list                shift and go to state 6
    asm_declaration                shift and go to state 7
    function_definition            shift and go to state 8
    template_declaration           shift and go to state 9
    conditional_expression         shift and go to state 135
    unary_expression               shift and go to state 136
    decl_specifier                 shift and go to state 10
    init_declarator                shift and go to state 11
    declarator                     shift and go to state 14
    logical_OR_expression          shift and go to state 138
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    cast_expression                shift and go to state 143
    unary2_operator                shift and go to state 209
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    storage_class_specifier        shift and go to state 16
    type_specifier                 shift and go to state 17
    name                           shift and go to state 210
    logical_AND_expression         shift and go to state 148
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 150
    class_specifier                shift and go to state 26
    enum_specifier                 shift and go to state 27
    elaborated_type_specifier      shift and go to state 28
    operator_function_name         shift and go to state 32
    inclusive_OR_expression        shift and go to state 158
    literal                        shift and go to state 159
    class_head                     shift and go to state 46
    class_key                      shift and go to state 48
    exclusive_OR_expression        shift and go to state 161
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171

state 496

    (210) iteration_statement -> WHILE LPAREN expression RPAREN . statement
    (184) statement -> . labeled_statement
    (185) statement -> . expression_statement
    (186) statement -> . compound_statement
    (187) statement -> . selection_statement
    (188) statement -> . iteration_statement
    (189) statement -> . jump_statement
    (190) statement -> . declaration_statement
    (191) statement -> . try_block
    (207) labeled_statement -> . IDENTIFIER COLON statement
    (208) labeled_statement -> . CASE constant_expression COLON statement
    (209) labeled_statement -> . DEFAULT COLON statement
    (218) expression_statement -> . expression SEMICOLON
    (219) expression_statement -> . SEMICOLON
    (180) compound_statement -> . LCPAREN statement_list RCPAREN
    (181) compound_statement -> . LCPAREN RCPAREN
    (197) selection_statement -> . IF LPAREN expression RPAREN statement
    (198) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (199) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (210) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (211) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (212) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (213) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (214) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (215) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (192) jump_statement -> . BREAK SEMICOLON
    (193) jump_statement -> . CONTINUE SEMICOLON
    (194) jump_statement -> . RETURN expression SEMICOLON
    (195) jump_statement -> . RETURN SEMICOLON
    (196) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (220) declaration_statement -> . declaration
    (200) try_block -> . TRY compound_statement handler_list
    (59) expression -> . assignment_expression
    (60) expression -> . expression COMMA assignment_expression
    (221) declaration -> . decl_specifiers declarator_list SEMICOLON
    (222) declaration -> . decl_specifiers SEMICOLON
    (223) declaration -> . declarator_list SEMICOLON
    (224) declaration -> . asm_declaration
    (225) declaration -> . function_definition
    (226) declaration -> . template_declaration
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (147) decl_specifiers -> . decl_specifiers decl_specifier
    (148) decl_specifiers -> . decl_specifier
    (230) declarator_list -> . init_declarator
    (231) declarator_list -> . declarator_list COMMA init_declarator
    (242) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (177) function_definition -> . decl_specifiers declarator fct_body
    (178) function_definition -> . declarator fct_body
    (227) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (26) conditional_expression -> . logical_OR_expression
    (27) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (149) decl_specifier -> . storage_class_specifier
    (150) decl_specifier -> . type_specifier
    (151) decl_specifier -> . TYPEDEF
    (232) init_declarator -> . declarator initializer
    (233) init_declarator -> . declarator
    (253) declarator -> . name
    (254) declarator -> . unary2_operator declarator
    (255) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (256) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (257) declarator -> . declarator LSPAREN RSPAREN
    (258) declarator -> . LPAREN declarator RPAREN
    (28) logical_OR_expression -> . logical_AND_expression
    (29) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (152) storage_class_specifier -> . AUTO
    (153) storage_class_specifier -> . STATIC
    (154) storage_class_specifier -> . EXTERN
    (155) storage_class_specifier -> . VIRTUAL
    (156) type_specifier -> . simple_type_name
    (157) type_specifier -> . class_specifier
    (158) type_specifier -> . enum_specifier
    (159) type_specifier -> . elaborated_type_specifier
    (160) type_specifier -> . CONST
    (161) type_specifier -> . VOLATILE
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (30) logical_AND_expression -> . inclusive_OR_expression
    (31) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (162) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (163) class_specifier -> . class_head LCPAREN RCPAREN
    (17) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (18) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (20) enum_specifier -> . ENUM LCPAREN RCPAREN
    (322) elaborated_type_specifier -> . class_key IDENTIFIER
    (323) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (324) elaborated_type_specifier -> . ENUM enum_name
    (325) elaborated_type_specifier -> . TYPE IDENTIFIER
    (326) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (264) operator_function_name -> . OPERATOR operator_name
    (32) inclusive_OR_expression -> . exclusive_OR_expression
    (33) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (304) class_head -> . class_key base_spec
    (305) class_head -> . class_key
    (306) class_head -> . class_key IDENTIFIER base_spec
    (307) class_head -> . class_key IDENTIFIER
    (328) class_key -> . CLASS
    (329) class_key -> . STRUCT
    (330) class_key -> . UNION
    (331) class_key -> . TEMPLATE
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 191
    CASE            shift and go to state 192
    DEFAULT         shift and go to state 193
    SEMICOLON       shift and go to state 195
    LCPAREN         shift and go to state 70
    IF              shift and go to state 196
    SWITCH          shift and go to state 198
    WHILE           shift and go to state 199
    DO              shift and go to state 200
    FOR             shift and go to state 201
    BREAK           shift and go to state 202
    CONTINUE        shift and go to state 203
    RETURN          shift and go to state 204
    GOTO            shift and go to state 205
    TRY             shift and go to state 207
    ASM             shift and go to state 12
    TEMPLATE        shift and go to state 15
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    TYPEDEF         shift and go to state 18
    LPAREN          shift and go to state 197
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    AUTO            shift and go to state 21
    STATIC          shift and go to state 22
    EXTERN          shift and go to state 23
    VIRTUAL         shift and go to state 24
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    THIS            shift and go to state 160
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    ENUM            shift and go to state 47
    TYPE            shift and go to state 49
    OPERATOR        shift and go to state 50
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    CLASS           shift and go to state 51
    STRUCT          shift and go to state 52
    UNION           shift and go to state 53

    expression                     shift and go to state 194
    statement                      shift and go to state 517
    labeled_statement              shift and go to state 183
    expression_statement           shift and go to state 184
    compound_statement             shift and go to state 185
    selection_statement            shift and go to state 186
    iteration_statement            shift and go to state 187
    jump_statement                 shift and go to state 188
    declaration_statement          shift and go to state 189
    try_block                      shift and go to state 190
    declaration                    shift and go to state 206
    assignment_expression          shift and go to state 208
    decl_specifiers                shift and go to state 5
    declarator_list                shift and go to state 6
    asm_declaration                shift and go to state 7
    function_definition            shift and go to state 8
    template_declaration           shift and go to state 9
    conditional_expression         shift and go to state 135
    unary_expression               shift and go to state 136
    decl_specifier                 shift and go to state 10
    init_declarator                shift and go to state 11
    declarator                     shift and go to state 14
    logical_OR_expression          shift and go to state 138
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    cast_expression                shift and go to state 143
    unary2_operator                shift and go to state 209
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    storage_class_specifier        shift and go to state 16
    type_specifier                 shift and go to state 17
    name                           shift and go to state 210
    logical_AND_expression         shift and go to state 148
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 150
    class_specifier                shift and go to state 26
    enum_specifier                 shift and go to state 27
    elaborated_type_specifier      shift and go to state 28
    operator_function_name         shift and go to state 32
    inclusive_OR_expression        shift and go to state 158
    literal                        shift and go to state 159
    class_head                     shift and go to state 46
    class_key                      shift and go to state 48
    exclusive_OR_expression        shift and go to state 161
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171

state 497

    (211) iteration_statement -> DO statement WHILE LPAREN . expression RPAREN SEMICOLON
    (59) expression -> . assignment_expression
    (60) expression -> . expression COMMA assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (26) conditional_expression -> . logical_OR_expression
    (27) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (28) logical_OR_expression -> . logical_AND_expression
    (29) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (30) logical_AND_expression -> . inclusive_OR_expression
    (31) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (32) inclusive_OR_expression -> . exclusive_OR_expression
    (33) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (264) operator_function_name -> . OPERATOR operator_name
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    LPAREN          shift and go to state 128
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    expression                     shift and go to state 518
    assignment_expression          shift and go to state 208
    conditional_expression         shift and go to state 135
    unary_expression               shift and go to state 136
    logical_OR_expression          shift and go to state 138
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    cast_expression                shift and go to state 143
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    logical_AND_expression         shift and go to state 148
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    name                           shift and go to state 151
    inclusive_OR_expression        shift and go to state 158
    literal                        shift and go to state 159
    exclusive_OR_expression        shift and go to state 161
    operator_function_name         shift and go to state 32
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171

state 498

    (212) iteration_statement -> FOR LPAREN for_init_statement expression . SEMICOLON expression RPAREN statement
    (214) iteration_statement -> FOR LPAREN for_init_statement expression . SEMICOLON RPAREN statement
    (60) expression -> expression . COMMA assignment_expression

    SEMICOLON       shift and go to state 519
    COMMA           shift and go to state 324


state 499

    (213) iteration_statement -> FOR LPAREN for_init_statement SEMICOLON . expression RPAREN statement
    (215) iteration_statement -> FOR LPAREN for_init_statement SEMICOLON . RPAREN statement
    (59) expression -> . assignment_expression
    (60) expression -> . expression COMMA assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (26) conditional_expression -> . logical_OR_expression
    (27) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (28) logical_OR_expression -> . logical_AND_expression
    (29) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (30) logical_AND_expression -> . inclusive_OR_expression
    (31) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (32) inclusive_OR_expression -> . exclusive_OR_expression
    (33) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (264) operator_function_name -> . OPERATOR operator_name
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 521
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    LPAREN          shift and go to state 128
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    expression                     shift and go to state 520
    assignment_expression          shift and go to state 208
    conditional_expression         shift and go to state 135
    unary_expression               shift and go to state 136
    logical_OR_expression          shift and go to state 138
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    cast_expression                shift and go to state 143
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    logical_AND_expression         shift and go to state 148
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    name                           shift and go to state 151
    inclusive_OR_expression        shift and go to state 158
    literal                        shift and go to state 159
    exclusive_OR_expression        shift and go to state 161
    operator_function_name         shift and go to state 32
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171

state 500

    (201) handler_list -> handler handler_list .

    RCPAREN         reduce using rule 201 (handler_list -> handler handler_list .)
    IDENTIFIER      reduce using rule 201 (handler_list -> handler handler_list .)
    CASE            reduce using rule 201 (handler_list -> handler handler_list .)
    DEFAULT         reduce using rule 201 (handler_list -> handler handler_list .)
    SEMICOLON       reduce using rule 201 (handler_list -> handler handler_list .)
    LCPAREN         reduce using rule 201 (handler_list -> handler handler_list .)
    IF              reduce using rule 201 (handler_list -> handler handler_list .)
    SWITCH          reduce using rule 201 (handler_list -> handler handler_list .)
    WHILE           reduce using rule 201 (handler_list -> handler handler_list .)
    DO              reduce using rule 201 (handler_list -> handler handler_list .)
    FOR             reduce using rule 201 (handler_list -> handler handler_list .)
    BREAK           reduce using rule 201 (handler_list -> handler handler_list .)
    CONTINUE        reduce using rule 201 (handler_list -> handler handler_list .)
    RETURN          reduce using rule 201 (handler_list -> handler handler_list .)
    GOTO            reduce using rule 201 (handler_list -> handler handler_list .)
    TRY             reduce using rule 201 (handler_list -> handler handler_list .)
    ASM             reduce using rule 201 (handler_list -> handler handler_list .)
    TEMPLATE        reduce using rule 201 (handler_list -> handler handler_list .)
    DPLUSOP         reduce using rule 201 (handler_list -> handler handler_list .)
    DMINUSOP        reduce using rule 201 (handler_list -> handler handler_list .)
    SIZEOF          reduce using rule 201 (handler_list -> handler handler_list .)
    TYPEDEF         reduce using rule 201 (handler_list -> handler handler_list .)
    LPAREN          reduce using rule 201 (handler_list -> handler handler_list .)
    PLUSOP          reduce using rule 201 (handler_list -> handler handler_list .)
    MINUSOP         reduce using rule 201 (handler_list -> handler handler_list .)
    NOTSYM          reduce using rule 201 (handler_list -> handler handler_list .)
    BNOP            reduce using rule 201 (handler_list -> handler handler_list .)
    MULTOP          reduce using rule 201 (handler_list -> handler handler_list .)
    BANDOP          reduce using rule 201 (handler_list -> handler handler_list .)
    NEW             reduce using rule 201 (handler_list -> handler handler_list .)
    DELETE          reduce using rule 201 (handler_list -> handler handler_list .)
    AUTO            reduce using rule 201 (handler_list -> handler handler_list .)
    STATIC          reduce using rule 201 (handler_list -> handler handler_list .)
    EXTERN          reduce using rule 201 (handler_list -> handler handler_list .)
    VIRTUAL         reduce using rule 201 (handler_list -> handler handler_list .)
    CONST           reduce using rule 201 (handler_list -> handler handler_list .)
    VOLATILE        reduce using rule 201 (handler_list -> handler handler_list .)
    THIS            reduce using rule 201 (handler_list -> handler handler_list .)
    CHAR            reduce using rule 201 (handler_list -> handler handler_list .)
    SHORT           reduce using rule 201 (handler_list -> handler handler_list .)
    INT             reduce using rule 201 (handler_list -> handler handler_list .)
    LONG            reduce using rule 201 (handler_list -> handler handler_list .)
    SIGNED          reduce using rule 201 (handler_list -> handler handler_list .)
    UNSIGNED        reduce using rule 201 (handler_list -> handler handler_list .)
    FLOAT           reduce using rule 201 (handler_list -> handler handler_list .)
    DOUBLE          reduce using rule 201 (handler_list -> handler handler_list .)
    VOID            reduce using rule 201 (handler_list -> handler handler_list .)
    STRING          reduce using rule 201 (handler_list -> handler handler_list .)
    ENUM            reduce using rule 201 (handler_list -> handler handler_list .)
    TYPE            reduce using rule 201 (handler_list -> handler handler_list .)
    OPERATOR        reduce using rule 201 (handler_list -> handler handler_list .)
    NUMBER          reduce using rule 201 (handler_list -> handler handler_list .)
    STRING_L        reduce using rule 201 (handler_list -> handler handler_list .)
    SCHAR           reduce using rule 201 (handler_list -> handler handler_list .)
    CLASS           reduce using rule 201 (handler_list -> handler handler_list .)
    STRUCT          reduce using rule 201 (handler_list -> handler handler_list .)
    UNION           reduce using rule 201 (handler_list -> handler handler_list .)
    ELSE            reduce using rule 201 (handler_list -> handler handler_list .)


state 501

    (203) handler -> CATCH LPAREN . exception_declaration RPAREN compound_statement
    (204) exception_declaration -> . type_specifier_list declarator
    (205) exception_declaration -> . type_specifier_list abstract_declarator
    (206) exception_declaration -> . type_specifier_list
    (262) type_specifier_list -> . type_specifier type_specifier_list
    (263) type_specifier_list -> . type_specifier
    (156) type_specifier -> . simple_type_name
    (157) type_specifier -> . class_specifier
    (158) type_specifier -> . enum_specifier
    (159) type_specifier -> . elaborated_type_specifier
    (160) type_specifier -> . CONST
    (161) type_specifier -> . VOLATILE
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (162) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (163) class_specifier -> . class_head LCPAREN RCPAREN
    (17) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (18) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (20) enum_specifier -> . ENUM LCPAREN RCPAREN
    (322) elaborated_type_specifier -> . class_key IDENTIFIER
    (323) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (324) elaborated_type_specifier -> . ENUM enum_name
    (325) elaborated_type_specifier -> . TYPE IDENTIFIER
    (326) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (304) class_head -> . class_key base_spec
    (305) class_head -> . class_key
    (306) class_head -> . class_key IDENTIFIER base_spec
    (307) class_head -> . class_key IDENTIFIER
    (328) class_key -> . CLASS
    (329) class_key -> . STRUCT
    (330) class_key -> . UNION
    (331) class_key -> . TEMPLATE

    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    ENUM            shift and go to state 47
    TYPE            shift and go to state 49
    CLASS           shift and go to state 51
    STRUCT          shift and go to state 52
    UNION           shift and go to state 53
    TEMPLATE        shift and go to state 59

    exception_declaration          shift and go to state 522
    type_specifier_list            shift and go to state 523
    type_specifier                 shift and go to state 250
    simple_type_name               shift and go to state 25
    class_specifier                shift and go to state 26
    enum_specifier                 shift and go to state 27
    elaborated_type_specifier      shift and go to state 28
    class_head                     shift and go to state 46
    class_key                      shift and go to state 48

state 502

    (14) template_arg_list -> template_arg_list COMMA template_arg .

    RTEMPLATE       reduce using rule 14 (template_arg_list -> template_arg_list COMMA template_arg .)
    COMMA           reduce using rule 14 (template_arg_list -> template_arg_list COMMA template_arg .)


state 503

    (314) base_specifier -> access_specifier class_key IDENTIFIER template_class_name .

    COMMA           reduce using rule 314 (base_specifier -> access_specifier class_key IDENTIFIER template_class_name .)
    LCPAREN         reduce using rule 314 (base_specifier -> access_specifier class_key IDENTIFIER template_class_name .)


state 504

    (130) abstract_declarator -> abstract_declarator LPAREN argument_declaration_list RPAREN .

    EQUAL           reduce using rule 130 (abstract_declarator -> abstract_declarator LPAREN argument_declaration_list RPAREN .)
    LPAREN          reduce using rule 130 (abstract_declarator -> abstract_declarator LPAREN argument_declaration_list RPAREN .)
    LSPAREN         reduce using rule 130 (abstract_declarator -> abstract_declarator LPAREN argument_declaration_list RPAREN .)
    COMMA           reduce using rule 130 (abstract_declarator -> abstract_declarator LPAREN argument_declaration_list RPAREN .)
    RPAREN          reduce using rule 130 (abstract_declarator -> abstract_declarator LPAREN argument_declaration_list RPAREN .)
    RTEMPLATE       reduce using rule 130 (abstract_declarator -> abstract_declarator LPAREN argument_declaration_list RPAREN .)


state 505

    (132) abstract_declarator -> abstract_declarator LSPAREN constant_expression RSPAREN .

    EQUAL           reduce using rule 132 (abstract_declarator -> abstract_declarator LSPAREN constant_expression RSPAREN .)
    LPAREN          reduce using rule 132 (abstract_declarator -> abstract_declarator LSPAREN constant_expression RSPAREN .)
    LSPAREN         reduce using rule 132 (abstract_declarator -> abstract_declarator LSPAREN constant_expression RSPAREN .)
    COMMA           reduce using rule 132 (abstract_declarator -> abstract_declarator LSPAREN constant_expression RSPAREN .)
    RPAREN          reduce using rule 132 (abstract_declarator -> abstract_declarator LSPAREN constant_expression RSPAREN .)
    RTEMPLATE       reduce using rule 132 (abstract_declarator -> abstract_declarator LSPAREN constant_expression RSPAREN .)


state 506

    (27) conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .

    RPAREN          reduce using rule 27 (conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .)
    COMMA           reduce using rule 27 (conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .)
    RSPAREN         reduce using rule 27 (conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .)
    SEMICOLON       reduce using rule 27 (conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .)
    RCPAREN         reduce using rule 27 (conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .)
    COLON           reduce using rule 27 (conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .)
    RTEMPLATE       reduce using rule 27 (conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .)


state 507

    (109) postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .

    LSPAREN         reduce using rule 109 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    LPAREN          reduce using rule 109 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    DOT             reduce using rule 109 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    ARROW           reduce using rule 109 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    DPLUSOP         reduce using rule 109 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    DMINUSOP        reduce using rule 109 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    LTEMPLATE       reduce using rule 109 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    EQUAL           reduce using rule 109 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    MULTEQOP        reduce using rule 109 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    DIVEQOP         reduce using rule 109 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    MODEQOP         reduce using rule 109 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    PLUSEQOP        reduce using rule 109 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    MINUSEQOP       reduce using rule 109 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    LSHIFTEQOP      reduce using rule 109 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    RSHIFTEQOP      reduce using rule 109 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    BANDEQOP        reduce using rule 109 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    BOREQOP         reduce using rule 109 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    DOTSTAR         reduce using rule 109 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    ARROWSTAR       reduce using rule 109 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    MULTOP          reduce using rule 109 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    DIVOP           reduce using rule 109 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    MODOP           reduce using rule 109 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    PLUSOP          reduce using rule 109 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    MINUSOP         reduce using rule 109 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    LSHIFT          reduce using rule 109 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    RSHIFT          reduce using rule 109 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    LTCOMP          reduce using rule 109 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    GTCOMP          reduce using rule 109 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    LTECOMP         reduce using rule 109 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    GTECOMP         reduce using rule 109 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    EQCOMP          reduce using rule 109 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    NEQCOMP         reduce using rule 109 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    BANDOP          reduce using rule 109 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    XOROP           reduce using rule 109 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    OROP            reduce using rule 109 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    ANDOP           reduce using rule 109 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    QUESMARK        reduce using rule 109 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    RPAREN          reduce using rule 109 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 109 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    RSPAREN         reduce using rule 109 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    SEMICOLON       reduce using rule 109 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    RCPAREN         reduce using rule 109 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    COLON           reduce using rule 109 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    RTEMPLATE       reduce using rule 109 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)


state 508

    (87) allocation_expression -> NEW placement LPAREN type_name RPAREN . new_initializer
    (89) allocation_expression -> NEW placement LPAREN type_name RPAREN .
    (98) new_initializer -> . LPAREN initializer_list RPAREN
    (99) new_initializer -> . LPAREN RPAREN

    EQUAL           reduce using rule 89 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    MULTEQOP        reduce using rule 89 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    DIVEQOP         reduce using rule 89 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    MODEQOP         reduce using rule 89 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    PLUSEQOP        reduce using rule 89 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    MINUSEQOP       reduce using rule 89 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    LSHIFTEQOP      reduce using rule 89 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    RSHIFTEQOP      reduce using rule 89 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    BANDEQOP        reduce using rule 89 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    BOREQOP         reduce using rule 89 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    DOTSTAR         reduce using rule 89 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    ARROWSTAR       reduce using rule 89 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    MULTOP          reduce using rule 89 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    DIVOP           reduce using rule 89 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    MODOP           reduce using rule 89 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    PLUSOP          reduce using rule 89 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    MINUSOP         reduce using rule 89 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    LSHIFT          reduce using rule 89 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    RSHIFT          reduce using rule 89 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    LTCOMP          reduce using rule 89 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    GTCOMP          reduce using rule 89 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    LTECOMP         reduce using rule 89 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    GTECOMP         reduce using rule 89 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    EQCOMP          reduce using rule 89 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    NEQCOMP         reduce using rule 89 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    BANDOP          reduce using rule 89 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    XOROP           reduce using rule 89 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    OROP            reduce using rule 89 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    ANDOP           reduce using rule 89 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    QUESMARK        reduce using rule 89 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    RPAREN          reduce using rule 89 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    COMMA           reduce using rule 89 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    RSPAREN         reduce using rule 89 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    SEMICOLON       reduce using rule 89 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    RCPAREN         reduce using rule 89 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    COLON           reduce using rule 89 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    RTEMPLATE       reduce using rule 89 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    LPAREN          shift and go to state 404

    new_initializer                shift and go to state 524

state 509

    (98) new_initializer -> LPAREN initializer_list RPAREN .

    EQUAL           reduce using rule 98 (new_initializer -> LPAREN initializer_list RPAREN .)
    MULTEQOP        reduce using rule 98 (new_initializer -> LPAREN initializer_list RPAREN .)
    DIVEQOP         reduce using rule 98 (new_initializer -> LPAREN initializer_list RPAREN .)
    MODEQOP         reduce using rule 98 (new_initializer -> LPAREN initializer_list RPAREN .)
    PLUSEQOP        reduce using rule 98 (new_initializer -> LPAREN initializer_list RPAREN .)
    MINUSEQOP       reduce using rule 98 (new_initializer -> LPAREN initializer_list RPAREN .)
    LSHIFTEQOP      reduce using rule 98 (new_initializer -> LPAREN initializer_list RPAREN .)
    RSHIFTEQOP      reduce using rule 98 (new_initializer -> LPAREN initializer_list RPAREN .)
    BANDEQOP        reduce using rule 98 (new_initializer -> LPAREN initializer_list RPAREN .)
    BOREQOP         reduce using rule 98 (new_initializer -> LPAREN initializer_list RPAREN .)
    DOTSTAR         reduce using rule 98 (new_initializer -> LPAREN initializer_list RPAREN .)
    ARROWSTAR       reduce using rule 98 (new_initializer -> LPAREN initializer_list RPAREN .)
    MULTOP          reduce using rule 98 (new_initializer -> LPAREN initializer_list RPAREN .)
    DIVOP           reduce using rule 98 (new_initializer -> LPAREN initializer_list RPAREN .)
    MODOP           reduce using rule 98 (new_initializer -> LPAREN initializer_list RPAREN .)
    PLUSOP          reduce using rule 98 (new_initializer -> LPAREN initializer_list RPAREN .)
    MINUSOP         reduce using rule 98 (new_initializer -> LPAREN initializer_list RPAREN .)
    LSHIFT          reduce using rule 98 (new_initializer -> LPAREN initializer_list RPAREN .)
    RSHIFT          reduce using rule 98 (new_initializer -> LPAREN initializer_list RPAREN .)
    LTCOMP          reduce using rule 98 (new_initializer -> LPAREN initializer_list RPAREN .)
    GTCOMP          reduce using rule 98 (new_initializer -> LPAREN initializer_list RPAREN .)
    LTECOMP         reduce using rule 98 (new_initializer -> LPAREN initializer_list RPAREN .)
    GTECOMP         reduce using rule 98 (new_initializer -> LPAREN initializer_list RPAREN .)
    EQCOMP          reduce using rule 98 (new_initializer -> LPAREN initializer_list RPAREN .)
    NEQCOMP         reduce using rule 98 (new_initializer -> LPAREN initializer_list RPAREN .)
    BANDOP          reduce using rule 98 (new_initializer -> LPAREN initializer_list RPAREN .)
    XOROP           reduce using rule 98 (new_initializer -> LPAREN initializer_list RPAREN .)
    OROP            reduce using rule 98 (new_initializer -> LPAREN initializer_list RPAREN .)
    ANDOP           reduce using rule 98 (new_initializer -> LPAREN initializer_list RPAREN .)
    QUESMARK        reduce using rule 98 (new_initializer -> LPAREN initializer_list RPAREN .)
    RPAREN          reduce using rule 98 (new_initializer -> LPAREN initializer_list RPAREN .)
    COMMA           reduce using rule 98 (new_initializer -> LPAREN initializer_list RPAREN .)
    RSPAREN         reduce using rule 98 (new_initializer -> LPAREN initializer_list RPAREN .)
    SEMICOLON       reduce using rule 98 (new_initializer -> LPAREN initializer_list RPAREN .)
    RCPAREN         reduce using rule 98 (new_initializer -> LPAREN initializer_list RPAREN .)
    COLON           reduce using rule 98 (new_initializer -> LPAREN initializer_list RPAREN .)
    RTEMPLATE       reduce using rule 98 (new_initializer -> LPAREN initializer_list RPAREN .)


state 510

    (239) initializer_list -> initializer_list COMMA . assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (26) conditional_expression -> . logical_OR_expression
    (27) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (28) logical_OR_expression -> . logical_AND_expression
    (29) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (30) logical_AND_expression -> . inclusive_OR_expression
    (31) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (32) inclusive_OR_expression -> . exclusive_OR_expression
    (33) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (264) operator_function_name -> . OPERATOR operator_name
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    LPAREN          shift and go to state 128
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    assignment_expression          shift and go to state 492
    conditional_expression         shift and go to state 135
    unary_expression               shift and go to state 136
    logical_OR_expression          shift and go to state 138
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    cast_expression                shift and go to state 143
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    logical_AND_expression         shift and go to state 148
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    name                           shift and go to state 151
    inclusive_OR_expression        shift and go to state 158
    literal                        shift and go to state 159
    exclusive_OR_expression        shift and go to state 161
    operator_function_name         shift and go to state 32
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171

state 511

    (88) allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .

    EQUAL           reduce using rule 88 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    MULTEQOP        reduce using rule 88 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    DIVEQOP         reduce using rule 88 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    MODEQOP         reduce using rule 88 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    PLUSEQOP        reduce using rule 88 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    MINUSEQOP       reduce using rule 88 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    LSHIFTEQOP      reduce using rule 88 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    RSHIFTEQOP      reduce using rule 88 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    BANDEQOP        reduce using rule 88 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    BOREQOP         reduce using rule 88 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    DOTSTAR         reduce using rule 88 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    ARROWSTAR       reduce using rule 88 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    MULTOP          reduce using rule 88 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    DIVOP           reduce using rule 88 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    MODOP           reduce using rule 88 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    PLUSOP          reduce using rule 88 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    MINUSOP         reduce using rule 88 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    LSHIFT          reduce using rule 88 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    RSHIFT          reduce using rule 88 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    LTCOMP          reduce using rule 88 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    GTCOMP          reduce using rule 88 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    LTECOMP         reduce using rule 88 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    GTECOMP         reduce using rule 88 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    EQCOMP          reduce using rule 88 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    NEQCOMP         reduce using rule 88 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    BANDOP          reduce using rule 88 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    XOROP           reduce using rule 88 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    OROP            reduce using rule 88 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    ANDOP           reduce using rule 88 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    QUESMARK        reduce using rule 88 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    RPAREN          reduce using rule 88 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    COMMA           reduce using rule 88 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    RSPAREN         reduce using rule 88 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    SEMICOLON       reduce using rule 88 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    RCPAREN         reduce using rule 88 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    COLON           reduce using rule 88 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    RTEMPLATE       reduce using rule 88 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)


state 512

    (95) new_declarator -> new_declarator LSPAREN expression . RSPAREN
    (60) expression -> expression . COMMA assignment_expression

    RSPAREN         shift and go to state 525
    COMMA           shift and go to state 324


state 513

    (96) new_declarator -> LSPAREN expression RSPAREN .

    LSPAREN         reduce using rule 96 (new_declarator -> LSPAREN expression RSPAREN .)
    LPAREN          reduce using rule 96 (new_declarator -> LSPAREN expression RSPAREN .)
    EQUAL           reduce using rule 96 (new_declarator -> LSPAREN expression RSPAREN .)
    MULTEQOP        reduce using rule 96 (new_declarator -> LSPAREN expression RSPAREN .)
    DIVEQOP         reduce using rule 96 (new_declarator -> LSPAREN expression RSPAREN .)
    MODEQOP         reduce using rule 96 (new_declarator -> LSPAREN expression RSPAREN .)
    PLUSEQOP        reduce using rule 96 (new_declarator -> LSPAREN expression RSPAREN .)
    MINUSEQOP       reduce using rule 96 (new_declarator -> LSPAREN expression RSPAREN .)
    LSHIFTEQOP      reduce using rule 96 (new_declarator -> LSPAREN expression RSPAREN .)
    RSHIFTEQOP      reduce using rule 96 (new_declarator -> LSPAREN expression RSPAREN .)
    BANDEQOP        reduce using rule 96 (new_declarator -> LSPAREN expression RSPAREN .)
    BOREQOP         reduce using rule 96 (new_declarator -> LSPAREN expression RSPAREN .)
    DOTSTAR         reduce using rule 96 (new_declarator -> LSPAREN expression RSPAREN .)
    ARROWSTAR       reduce using rule 96 (new_declarator -> LSPAREN expression RSPAREN .)
    MULTOP          reduce using rule 96 (new_declarator -> LSPAREN expression RSPAREN .)
    DIVOP           reduce using rule 96 (new_declarator -> LSPAREN expression RSPAREN .)
    MODOP           reduce using rule 96 (new_declarator -> LSPAREN expression RSPAREN .)
    PLUSOP          reduce using rule 96 (new_declarator -> LSPAREN expression RSPAREN .)
    MINUSOP         reduce using rule 96 (new_declarator -> LSPAREN expression RSPAREN .)
    LSHIFT          reduce using rule 96 (new_declarator -> LSPAREN expression RSPAREN .)
    RSHIFT          reduce using rule 96 (new_declarator -> LSPAREN expression RSPAREN .)
    LTCOMP          reduce using rule 96 (new_declarator -> LSPAREN expression RSPAREN .)
    GTCOMP          reduce using rule 96 (new_declarator -> LSPAREN expression RSPAREN .)
    LTECOMP         reduce using rule 96 (new_declarator -> LSPAREN expression RSPAREN .)
    GTECOMP         reduce using rule 96 (new_declarator -> LSPAREN expression RSPAREN .)
    EQCOMP          reduce using rule 96 (new_declarator -> LSPAREN expression RSPAREN .)
    NEQCOMP         reduce using rule 96 (new_declarator -> LSPAREN expression RSPAREN .)
    BANDOP          reduce using rule 96 (new_declarator -> LSPAREN expression RSPAREN .)
    XOROP           reduce using rule 96 (new_declarator -> LSPAREN expression RSPAREN .)
    OROP            reduce using rule 96 (new_declarator -> LSPAREN expression RSPAREN .)
    ANDOP           reduce using rule 96 (new_declarator -> LSPAREN expression RSPAREN .)
    QUESMARK        reduce using rule 96 (new_declarator -> LSPAREN expression RSPAREN .)
    RPAREN          reduce using rule 96 (new_declarator -> LSPAREN expression RSPAREN .)
    COMMA           reduce using rule 96 (new_declarator -> LSPAREN expression RSPAREN .)
    RSPAREN         reduce using rule 96 (new_declarator -> LSPAREN expression RSPAREN .)
    SEMICOLON       reduce using rule 96 (new_declarator -> LSPAREN expression RSPAREN .)
    RCPAREN         reduce using rule 96 (new_declarator -> LSPAREN expression RSPAREN .)
    COLON           reduce using rule 96 (new_declarator -> LSPAREN expression RSPAREN .)
    RTEMPLATE       reduce using rule 96 (new_declarator -> LSPAREN expression RSPAREN .)


state 514

    (241) initializer_list -> LCPAREN initializer_list COMMA RCPAREN .

    RCPAREN         reduce using rule 241 (initializer_list -> LCPAREN initializer_list COMMA RCPAREN .)
    COMMA           reduce using rule 241 (initializer_list -> LCPAREN initializer_list COMMA RCPAREN .)
    RPAREN          reduce using rule 241 (initializer_list -> LCPAREN initializer_list COMMA RCPAREN .)


state 515

    (197) selection_statement -> IF LPAREN expression RPAREN statement .
    (198) selection_statement -> IF LPAREN expression RPAREN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    RCPAREN         reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IDENTIFIER      reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CASE            reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LCPAREN         reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DO              reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement .)
    GOTO            reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TRY             reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ASM             reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TEMPLATE        reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DPLUSOP         reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DMINUSOP        reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SIZEOF          reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TYPEDEF         reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PLUSOP          reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MINUSOP         reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement .)
    NOTSYM          reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BNOP            reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MULTOP          reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BANDOP          reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement .)
    NEW             reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DELETE          reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement .)
    AUTO            reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STATIC          reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement .)
    EXTERN          reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement .)
    VIRTUAL         reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CONST           reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement .)
    VOLATILE        reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement .)
    THIS            reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SHORT           reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INT             reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LONG            reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SIGNED          reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement .)
    UNSIGNED        reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DOUBLE          reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement .)
    VOID            reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STRING          reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ENUM            reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TYPE            reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement .)
    OPERATOR        reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STRING_L        reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SCHAR           reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CLASS           reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STRUCT          reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement .)
    UNION           reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 526

  ! ELSE            [ reduce using rule 197 (selection_statement -> IF LPAREN expression RPAREN statement .) ]


state 516

    (199) selection_statement -> SWITCH LPAREN expression RPAREN statement .

    RCPAREN         reduce using rule 199 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    IDENTIFIER      reduce using rule 199 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CASE            reduce using rule 199 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 199 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 199 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LCPAREN         reduce using rule 199 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    IF              reduce using rule 199 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 199 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 199 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DO              reduce using rule 199 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    FOR             reduce using rule 199 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 199 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 199 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 199 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    GOTO            reduce using rule 199 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    TRY             reduce using rule 199 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    ASM             reduce using rule 199 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    TEMPLATE        reduce using rule 199 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DPLUSOP         reduce using rule 199 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DMINUSOP        reduce using rule 199 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SIZEOF          reduce using rule 199 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    TYPEDEF         reduce using rule 199 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 199 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    PLUSOP          reduce using rule 199 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    MINUSOP         reduce using rule 199 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    NOTSYM          reduce using rule 199 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    BNOP            reduce using rule 199 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    MULTOP          reduce using rule 199 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    BANDOP          reduce using rule 199 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    NEW             reduce using rule 199 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DELETE          reduce using rule 199 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    AUTO            reduce using rule 199 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    STATIC          reduce using rule 199 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    EXTERN          reduce using rule 199 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    VIRTUAL         reduce using rule 199 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CONST           reduce using rule 199 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    VOLATILE        reduce using rule 199 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    THIS            reduce using rule 199 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 199 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SHORT           reduce using rule 199 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    INT             reduce using rule 199 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LONG            reduce using rule 199 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SIGNED          reduce using rule 199 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    UNSIGNED        reduce using rule 199 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 199 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DOUBLE          reduce using rule 199 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    VOID            reduce using rule 199 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    STRING          reduce using rule 199 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    ENUM            reduce using rule 199 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    TYPE            reduce using rule 199 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    OPERATOR        reduce using rule 199 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 199 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    STRING_L        reduce using rule 199 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SCHAR           reduce using rule 199 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CLASS           reduce using rule 199 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    STRUCT          reduce using rule 199 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    UNION           reduce using rule 199 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 199 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)


state 517

    (210) iteration_statement -> WHILE LPAREN expression RPAREN statement .

    RCPAREN         reduce using rule 210 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    IDENTIFIER      reduce using rule 210 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CASE            reduce using rule 210 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 210 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 210 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LCPAREN         reduce using rule 210 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 210 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 210 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 210 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DO              reduce using rule 210 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 210 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 210 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 210 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 210 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    GOTO            reduce using rule 210 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TRY             reduce using rule 210 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ASM             reduce using rule 210 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TEMPLATE        reduce using rule 210 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DPLUSOP         reduce using rule 210 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DMINUSOP        reduce using rule 210 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SIZEOF          reduce using rule 210 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TYPEDEF         reduce using rule 210 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 210 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PLUSOP          reduce using rule 210 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MINUSOP         reduce using rule 210 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    NOTSYM          reduce using rule 210 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BNOP            reduce using rule 210 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MULTOP          reduce using rule 210 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BANDOP          reduce using rule 210 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    NEW             reduce using rule 210 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DELETE          reduce using rule 210 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    AUTO            reduce using rule 210 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STATIC          reduce using rule 210 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    EXTERN          reduce using rule 210 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    VIRTUAL         reduce using rule 210 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CONST           reduce using rule 210 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    VOLATILE        reduce using rule 210 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    THIS            reduce using rule 210 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 210 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SHORT           reduce using rule 210 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INT             reduce using rule 210 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LONG            reduce using rule 210 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SIGNED          reduce using rule 210 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    UNSIGNED        reduce using rule 210 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 210 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DOUBLE          reduce using rule 210 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    VOID            reduce using rule 210 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STRING          reduce using rule 210 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ENUM            reduce using rule 210 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TYPE            reduce using rule 210 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    OPERATOR        reduce using rule 210 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 210 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STRING_L        reduce using rule 210 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SCHAR           reduce using rule 210 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CLASS           reduce using rule 210 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STRUCT          reduce using rule 210 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    UNION           reduce using rule 210 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 210 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)


state 518

    (211) iteration_statement -> DO statement WHILE LPAREN expression . RPAREN SEMICOLON
    (60) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 527
    COMMA           shift and go to state 324


state 519

    (212) iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON . expression RPAREN statement
    (214) iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON . RPAREN statement
    (59) expression -> . assignment_expression
    (60) expression -> . expression COMMA assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (26) conditional_expression -> . logical_OR_expression
    (27) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (28) logical_OR_expression -> . logical_AND_expression
    (29) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (30) logical_AND_expression -> . inclusive_OR_expression
    (31) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (32) inclusive_OR_expression -> . exclusive_OR_expression
    (33) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (264) operator_function_name -> . OPERATOR operator_name
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 529
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    THIS            shift and go to state 160
    LPAREN          shift and go to state 128
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    IDENTIFIER      shift and go to state 31
    OPERATOR        shift and go to state 50

    expression                     shift and go to state 528
    assignment_expression          shift and go to state 208
    conditional_expression         shift and go to state 135
    unary_expression               shift and go to state 136
    logical_OR_expression          shift and go to state 138
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    cast_expression                shift and go to state 143
    unary2_operator                shift and go to state 144
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    logical_AND_expression         shift and go to state 148
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 177
    name                           shift and go to state 151
    inclusive_OR_expression        shift and go to state 158
    literal                        shift and go to state 159
    exclusive_OR_expression        shift and go to state 161
    operator_function_name         shift and go to state 32
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171

state 520

    (213) iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression . RPAREN statement
    (60) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 530
    COMMA           shift and go to state 324


state 521

    (215) iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN . statement
    (184) statement -> . labeled_statement
    (185) statement -> . expression_statement
    (186) statement -> . compound_statement
    (187) statement -> . selection_statement
    (188) statement -> . iteration_statement
    (189) statement -> . jump_statement
    (190) statement -> . declaration_statement
    (191) statement -> . try_block
    (207) labeled_statement -> . IDENTIFIER COLON statement
    (208) labeled_statement -> . CASE constant_expression COLON statement
    (209) labeled_statement -> . DEFAULT COLON statement
    (218) expression_statement -> . expression SEMICOLON
    (219) expression_statement -> . SEMICOLON
    (180) compound_statement -> . LCPAREN statement_list RCPAREN
    (181) compound_statement -> . LCPAREN RCPAREN
    (197) selection_statement -> . IF LPAREN expression RPAREN statement
    (198) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (199) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (210) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (211) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (212) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (213) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (214) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (215) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (192) jump_statement -> . BREAK SEMICOLON
    (193) jump_statement -> . CONTINUE SEMICOLON
    (194) jump_statement -> . RETURN expression SEMICOLON
    (195) jump_statement -> . RETURN SEMICOLON
    (196) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (220) declaration_statement -> . declaration
    (200) try_block -> . TRY compound_statement handler_list
    (59) expression -> . assignment_expression
    (60) expression -> . expression COMMA assignment_expression
    (221) declaration -> . decl_specifiers declarator_list SEMICOLON
    (222) declaration -> . decl_specifiers SEMICOLON
    (223) declaration -> . declarator_list SEMICOLON
    (224) declaration -> . asm_declaration
    (225) declaration -> . function_definition
    (226) declaration -> . template_declaration
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (147) decl_specifiers -> . decl_specifiers decl_specifier
    (148) decl_specifiers -> . decl_specifier
    (230) declarator_list -> . init_declarator
    (231) declarator_list -> . declarator_list COMMA init_declarator
    (242) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (177) function_definition -> . decl_specifiers declarator fct_body
    (178) function_definition -> . declarator fct_body
    (227) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (26) conditional_expression -> . logical_OR_expression
    (27) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (149) decl_specifier -> . storage_class_specifier
    (150) decl_specifier -> . type_specifier
    (151) decl_specifier -> . TYPEDEF
    (232) init_declarator -> . declarator initializer
    (233) init_declarator -> . declarator
    (253) declarator -> . name
    (254) declarator -> . unary2_operator declarator
    (255) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (256) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (257) declarator -> . declarator LSPAREN RSPAREN
    (258) declarator -> . LPAREN declarator RPAREN
    (28) logical_OR_expression -> . logical_AND_expression
    (29) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (152) storage_class_specifier -> . AUTO
    (153) storage_class_specifier -> . STATIC
    (154) storage_class_specifier -> . EXTERN
    (155) storage_class_specifier -> . VIRTUAL
    (156) type_specifier -> . simple_type_name
    (157) type_specifier -> . class_specifier
    (158) type_specifier -> . enum_specifier
    (159) type_specifier -> . elaborated_type_specifier
    (160) type_specifier -> . CONST
    (161) type_specifier -> . VOLATILE
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (30) logical_AND_expression -> . inclusive_OR_expression
    (31) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (162) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (163) class_specifier -> . class_head LCPAREN RCPAREN
    (17) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (18) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (20) enum_specifier -> . ENUM LCPAREN RCPAREN
    (322) elaborated_type_specifier -> . class_key IDENTIFIER
    (323) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (324) elaborated_type_specifier -> . ENUM enum_name
    (325) elaborated_type_specifier -> . TYPE IDENTIFIER
    (326) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (264) operator_function_name -> . OPERATOR operator_name
    (32) inclusive_OR_expression -> . exclusive_OR_expression
    (33) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (304) class_head -> . class_key base_spec
    (305) class_head -> . class_key
    (306) class_head -> . class_key IDENTIFIER base_spec
    (307) class_head -> . class_key IDENTIFIER
    (328) class_key -> . CLASS
    (329) class_key -> . STRUCT
    (330) class_key -> . UNION
    (331) class_key -> . TEMPLATE
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 191
    CASE            shift and go to state 192
    DEFAULT         shift and go to state 193
    SEMICOLON       shift and go to state 195
    LCPAREN         shift and go to state 70
    IF              shift and go to state 196
    SWITCH          shift and go to state 198
    WHILE           shift and go to state 199
    DO              shift and go to state 200
    FOR             shift and go to state 201
    BREAK           shift and go to state 202
    CONTINUE        shift and go to state 203
    RETURN          shift and go to state 204
    GOTO            shift and go to state 205
    TRY             shift and go to state 207
    ASM             shift and go to state 12
    TEMPLATE        shift and go to state 15
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    TYPEDEF         shift and go to state 18
    LPAREN          shift and go to state 197
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    AUTO            shift and go to state 21
    STATIC          shift and go to state 22
    EXTERN          shift and go to state 23
    VIRTUAL         shift and go to state 24
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    THIS            shift and go to state 160
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    ENUM            shift and go to state 47
    TYPE            shift and go to state 49
    OPERATOR        shift and go to state 50
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    CLASS           shift and go to state 51
    STRUCT          shift and go to state 52
    UNION           shift and go to state 53

    statement                      shift and go to state 531
    labeled_statement              shift and go to state 183
    expression_statement           shift and go to state 184
    compound_statement             shift and go to state 185
    selection_statement            shift and go to state 186
    iteration_statement            shift and go to state 187
    jump_statement                 shift and go to state 188
    declaration_statement          shift and go to state 189
    try_block                      shift and go to state 190
    expression                     shift and go to state 194
    declaration                    shift and go to state 206
    assignment_expression          shift and go to state 208
    decl_specifiers                shift and go to state 5
    declarator_list                shift and go to state 6
    asm_declaration                shift and go to state 7
    function_definition            shift and go to state 8
    template_declaration           shift and go to state 9
    conditional_expression         shift and go to state 135
    unary_expression               shift and go to state 136
    decl_specifier                 shift and go to state 10
    init_declarator                shift and go to state 11
    declarator                     shift and go to state 14
    logical_OR_expression          shift and go to state 138
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    cast_expression                shift and go to state 143
    unary2_operator                shift and go to state 209
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    storage_class_specifier        shift and go to state 16
    type_specifier                 shift and go to state 17
    name                           shift and go to state 210
    logical_AND_expression         shift and go to state 148
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 150
    class_specifier                shift and go to state 26
    enum_specifier                 shift and go to state 27
    elaborated_type_specifier      shift and go to state 28
    operator_function_name         shift and go to state 32
    inclusive_OR_expression        shift and go to state 158
    literal                        shift and go to state 159
    class_head                     shift and go to state 46
    class_key                      shift and go to state 48
    exclusive_OR_expression        shift and go to state 161
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171

state 522

    (203) handler -> CATCH LPAREN exception_declaration . RPAREN compound_statement

    RPAREN          shift and go to state 532


state 523

    (204) exception_declaration -> type_specifier_list . declarator
    (205) exception_declaration -> type_specifier_list . abstract_declarator
    (206) exception_declaration -> type_specifier_list .
    (253) declarator -> . name
    (254) declarator -> . unary2_operator declarator
    (255) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (256) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (257) declarator -> . declarator LSPAREN RSPAREN
    (258) declarator -> . LPAREN declarator RPAREN
    (128) abstract_declarator -> . unary2_operator abstract_declarator
    (129) abstract_declarator -> . unary2_operator
    (130) abstract_declarator -> . abstract_declarator LPAREN argument_declaration_list RPAREN
    (131) abstract_declarator -> . LPAREN argument_declaration_list RPAREN
    (132) abstract_declarator -> . abstract_declarator LSPAREN constant_expression RSPAREN
    (133) abstract_declarator -> . LSPAREN constant_expression RSPAREN
    (134) abstract_declarator -> . abstract_declarator LSPAREN RSPAREN
    (135) abstract_declarator -> . LSPAREN RSPAREN
    (136) abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (264) operator_function_name -> . OPERATOR operator_name

    RPAREN          reduce using rule 206 (exception_declaration -> type_specifier_list .)
    LPAREN          shift and go to state 271
    LSPAREN         shift and go to state 272
    IDENTIFIER      shift and go to state 31
    BNOP            shift and go to state 33
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    OPERATOR        shift and go to state 50

    declarator                     shift and go to state 533
    abstract_declarator            shift and go to state 534
    name                           shift and go to state 19
    unary2_operator                shift and go to state 270
    operator_function_name         shift and go to state 32

state 524

    (87) allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .

    EQUAL           reduce using rule 87 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    MULTEQOP        reduce using rule 87 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    DIVEQOP         reduce using rule 87 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    MODEQOP         reduce using rule 87 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    PLUSEQOP        reduce using rule 87 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    MINUSEQOP       reduce using rule 87 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    LSHIFTEQOP      reduce using rule 87 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    RSHIFTEQOP      reduce using rule 87 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    BANDEQOP        reduce using rule 87 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    BOREQOP         reduce using rule 87 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    DOTSTAR         reduce using rule 87 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    ARROWSTAR       reduce using rule 87 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    MULTOP          reduce using rule 87 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    DIVOP           reduce using rule 87 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    MODOP           reduce using rule 87 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    PLUSOP          reduce using rule 87 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    MINUSOP         reduce using rule 87 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    LSHIFT          reduce using rule 87 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    RSHIFT          reduce using rule 87 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    LTCOMP          reduce using rule 87 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    GTCOMP          reduce using rule 87 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    LTECOMP         reduce using rule 87 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    GTECOMP         reduce using rule 87 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    EQCOMP          reduce using rule 87 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    NEQCOMP         reduce using rule 87 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    BANDOP          reduce using rule 87 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    XOROP           reduce using rule 87 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    OROP            reduce using rule 87 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    ANDOP           reduce using rule 87 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    QUESMARK        reduce using rule 87 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    RPAREN          reduce using rule 87 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    COMMA           reduce using rule 87 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    RSPAREN         reduce using rule 87 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    SEMICOLON       reduce using rule 87 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    RCPAREN         reduce using rule 87 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    COLON           reduce using rule 87 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    RTEMPLATE       reduce using rule 87 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)


state 525

    (95) new_declarator -> new_declarator LSPAREN expression RSPAREN .

    LSPAREN         reduce using rule 95 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    LPAREN          reduce using rule 95 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    EQUAL           reduce using rule 95 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    MULTEQOP        reduce using rule 95 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    DIVEQOP         reduce using rule 95 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    MODEQOP         reduce using rule 95 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    PLUSEQOP        reduce using rule 95 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    MINUSEQOP       reduce using rule 95 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    LSHIFTEQOP      reduce using rule 95 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    RSHIFTEQOP      reduce using rule 95 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    BANDEQOP        reduce using rule 95 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    BOREQOP         reduce using rule 95 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    DOTSTAR         reduce using rule 95 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    ARROWSTAR       reduce using rule 95 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    MULTOP          reduce using rule 95 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    DIVOP           reduce using rule 95 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    MODOP           reduce using rule 95 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    PLUSOP          reduce using rule 95 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    MINUSOP         reduce using rule 95 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    LSHIFT          reduce using rule 95 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    RSHIFT          reduce using rule 95 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    LTCOMP          reduce using rule 95 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    GTCOMP          reduce using rule 95 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    LTECOMP         reduce using rule 95 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    GTECOMP         reduce using rule 95 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    EQCOMP          reduce using rule 95 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    NEQCOMP         reduce using rule 95 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    BANDOP          reduce using rule 95 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    XOROP           reduce using rule 95 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    OROP            reduce using rule 95 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    ANDOP           reduce using rule 95 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    QUESMARK        reduce using rule 95 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    RPAREN          reduce using rule 95 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    COMMA           reduce using rule 95 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    RSPAREN         reduce using rule 95 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    SEMICOLON       reduce using rule 95 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    RCPAREN         reduce using rule 95 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    COLON           reduce using rule 95 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    RTEMPLATE       reduce using rule 95 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)


state 526

    (198) selection_statement -> IF LPAREN expression RPAREN statement ELSE . statement
    (184) statement -> . labeled_statement
    (185) statement -> . expression_statement
    (186) statement -> . compound_statement
    (187) statement -> . selection_statement
    (188) statement -> . iteration_statement
    (189) statement -> . jump_statement
    (190) statement -> . declaration_statement
    (191) statement -> . try_block
    (207) labeled_statement -> . IDENTIFIER COLON statement
    (208) labeled_statement -> . CASE constant_expression COLON statement
    (209) labeled_statement -> . DEFAULT COLON statement
    (218) expression_statement -> . expression SEMICOLON
    (219) expression_statement -> . SEMICOLON
    (180) compound_statement -> . LCPAREN statement_list RCPAREN
    (181) compound_statement -> . LCPAREN RCPAREN
    (197) selection_statement -> . IF LPAREN expression RPAREN statement
    (198) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (199) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (210) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (211) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (212) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (213) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (214) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (215) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (192) jump_statement -> . BREAK SEMICOLON
    (193) jump_statement -> . CONTINUE SEMICOLON
    (194) jump_statement -> . RETURN expression SEMICOLON
    (195) jump_statement -> . RETURN SEMICOLON
    (196) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (220) declaration_statement -> . declaration
    (200) try_block -> . TRY compound_statement handler_list
    (59) expression -> . assignment_expression
    (60) expression -> . expression COMMA assignment_expression
    (221) declaration -> . decl_specifiers declarator_list SEMICOLON
    (222) declaration -> . decl_specifiers SEMICOLON
    (223) declaration -> . declarator_list SEMICOLON
    (224) declaration -> . asm_declaration
    (225) declaration -> . function_definition
    (226) declaration -> . template_declaration
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (147) decl_specifiers -> . decl_specifiers decl_specifier
    (148) decl_specifiers -> . decl_specifier
    (230) declarator_list -> . init_declarator
    (231) declarator_list -> . declarator_list COMMA init_declarator
    (242) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (177) function_definition -> . decl_specifiers declarator fct_body
    (178) function_definition -> . declarator fct_body
    (227) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (26) conditional_expression -> . logical_OR_expression
    (27) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (149) decl_specifier -> . storage_class_specifier
    (150) decl_specifier -> . type_specifier
    (151) decl_specifier -> . TYPEDEF
    (232) init_declarator -> . declarator initializer
    (233) init_declarator -> . declarator
    (253) declarator -> . name
    (254) declarator -> . unary2_operator declarator
    (255) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (256) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (257) declarator -> . declarator LSPAREN RSPAREN
    (258) declarator -> . LPAREN declarator RPAREN
    (28) logical_OR_expression -> . logical_AND_expression
    (29) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (152) storage_class_specifier -> . AUTO
    (153) storage_class_specifier -> . STATIC
    (154) storage_class_specifier -> . EXTERN
    (155) storage_class_specifier -> . VIRTUAL
    (156) type_specifier -> . simple_type_name
    (157) type_specifier -> . class_specifier
    (158) type_specifier -> . enum_specifier
    (159) type_specifier -> . elaborated_type_specifier
    (160) type_specifier -> . CONST
    (161) type_specifier -> . VOLATILE
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (30) logical_AND_expression -> . inclusive_OR_expression
    (31) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (162) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (163) class_specifier -> . class_head LCPAREN RCPAREN
    (17) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (18) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (20) enum_specifier -> . ENUM LCPAREN RCPAREN
    (322) elaborated_type_specifier -> . class_key IDENTIFIER
    (323) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (324) elaborated_type_specifier -> . ENUM enum_name
    (325) elaborated_type_specifier -> . TYPE IDENTIFIER
    (326) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (264) operator_function_name -> . OPERATOR operator_name
    (32) inclusive_OR_expression -> . exclusive_OR_expression
    (33) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (304) class_head -> . class_key base_spec
    (305) class_head -> . class_key
    (306) class_head -> . class_key IDENTIFIER base_spec
    (307) class_head -> . class_key IDENTIFIER
    (328) class_key -> . CLASS
    (329) class_key -> . STRUCT
    (330) class_key -> . UNION
    (331) class_key -> . TEMPLATE
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 191
    CASE            shift and go to state 192
    DEFAULT         shift and go to state 193
    SEMICOLON       shift and go to state 195
    LCPAREN         shift and go to state 70
    IF              shift and go to state 196
    SWITCH          shift and go to state 198
    WHILE           shift and go to state 199
    DO              shift and go to state 200
    FOR             shift and go to state 201
    BREAK           shift and go to state 202
    CONTINUE        shift and go to state 203
    RETURN          shift and go to state 204
    GOTO            shift and go to state 205
    TRY             shift and go to state 207
    ASM             shift and go to state 12
    TEMPLATE        shift and go to state 15
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    TYPEDEF         shift and go to state 18
    LPAREN          shift and go to state 197
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    AUTO            shift and go to state 21
    STATIC          shift and go to state 22
    EXTERN          shift and go to state 23
    VIRTUAL         shift and go to state 24
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    THIS            shift and go to state 160
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    ENUM            shift and go to state 47
    TYPE            shift and go to state 49
    OPERATOR        shift and go to state 50
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    CLASS           shift and go to state 51
    STRUCT          shift and go to state 52
    UNION           shift and go to state 53

    expression                     shift and go to state 194
    statement                      shift and go to state 535
    labeled_statement              shift and go to state 183
    expression_statement           shift and go to state 184
    compound_statement             shift and go to state 185
    selection_statement            shift and go to state 186
    iteration_statement            shift and go to state 187
    jump_statement                 shift and go to state 188
    declaration_statement          shift and go to state 189
    try_block                      shift and go to state 190
    declaration                    shift and go to state 206
    assignment_expression          shift and go to state 208
    decl_specifiers                shift and go to state 5
    declarator_list                shift and go to state 6
    asm_declaration                shift and go to state 7
    function_definition            shift and go to state 8
    template_declaration           shift and go to state 9
    conditional_expression         shift and go to state 135
    unary_expression               shift and go to state 136
    decl_specifier                 shift and go to state 10
    init_declarator                shift and go to state 11
    declarator                     shift and go to state 14
    logical_OR_expression          shift and go to state 138
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    cast_expression                shift and go to state 143
    unary2_operator                shift and go to state 209
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    storage_class_specifier        shift and go to state 16
    type_specifier                 shift and go to state 17
    name                           shift and go to state 210
    logical_AND_expression         shift and go to state 148
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 150
    class_specifier                shift and go to state 26
    enum_specifier                 shift and go to state 27
    elaborated_type_specifier      shift and go to state 28
    operator_function_name         shift and go to state 32
    inclusive_OR_expression        shift and go to state 158
    literal                        shift and go to state 159
    class_head                     shift and go to state 46
    class_key                      shift and go to state 48
    exclusive_OR_expression        shift and go to state 161
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171

state 527

    (211) iteration_statement -> DO statement WHILE LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 536


state 528

    (212) iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression . RPAREN statement
    (60) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 537
    COMMA           shift and go to state 324


state 529

    (214) iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN . statement
    (184) statement -> . labeled_statement
    (185) statement -> . expression_statement
    (186) statement -> . compound_statement
    (187) statement -> . selection_statement
    (188) statement -> . iteration_statement
    (189) statement -> . jump_statement
    (190) statement -> . declaration_statement
    (191) statement -> . try_block
    (207) labeled_statement -> . IDENTIFIER COLON statement
    (208) labeled_statement -> . CASE constant_expression COLON statement
    (209) labeled_statement -> . DEFAULT COLON statement
    (218) expression_statement -> . expression SEMICOLON
    (219) expression_statement -> . SEMICOLON
    (180) compound_statement -> . LCPAREN statement_list RCPAREN
    (181) compound_statement -> . LCPAREN RCPAREN
    (197) selection_statement -> . IF LPAREN expression RPAREN statement
    (198) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (199) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (210) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (211) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (212) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (213) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (214) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (215) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (192) jump_statement -> . BREAK SEMICOLON
    (193) jump_statement -> . CONTINUE SEMICOLON
    (194) jump_statement -> . RETURN expression SEMICOLON
    (195) jump_statement -> . RETURN SEMICOLON
    (196) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (220) declaration_statement -> . declaration
    (200) try_block -> . TRY compound_statement handler_list
    (59) expression -> . assignment_expression
    (60) expression -> . expression COMMA assignment_expression
    (221) declaration -> . decl_specifiers declarator_list SEMICOLON
    (222) declaration -> . decl_specifiers SEMICOLON
    (223) declaration -> . declarator_list SEMICOLON
    (224) declaration -> . asm_declaration
    (225) declaration -> . function_definition
    (226) declaration -> . template_declaration
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (147) decl_specifiers -> . decl_specifiers decl_specifier
    (148) decl_specifiers -> . decl_specifier
    (230) declarator_list -> . init_declarator
    (231) declarator_list -> . declarator_list COMMA init_declarator
    (242) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (177) function_definition -> . decl_specifiers declarator fct_body
    (178) function_definition -> . declarator fct_body
    (227) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (26) conditional_expression -> . logical_OR_expression
    (27) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (149) decl_specifier -> . storage_class_specifier
    (150) decl_specifier -> . type_specifier
    (151) decl_specifier -> . TYPEDEF
    (232) init_declarator -> . declarator initializer
    (233) init_declarator -> . declarator
    (253) declarator -> . name
    (254) declarator -> . unary2_operator declarator
    (255) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (256) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (257) declarator -> . declarator LSPAREN RSPAREN
    (258) declarator -> . LPAREN declarator RPAREN
    (28) logical_OR_expression -> . logical_AND_expression
    (29) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (152) storage_class_specifier -> . AUTO
    (153) storage_class_specifier -> . STATIC
    (154) storage_class_specifier -> . EXTERN
    (155) storage_class_specifier -> . VIRTUAL
    (156) type_specifier -> . simple_type_name
    (157) type_specifier -> . class_specifier
    (158) type_specifier -> . enum_specifier
    (159) type_specifier -> . elaborated_type_specifier
    (160) type_specifier -> . CONST
    (161) type_specifier -> . VOLATILE
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (30) logical_AND_expression -> . inclusive_OR_expression
    (31) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (162) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (163) class_specifier -> . class_head LCPAREN RCPAREN
    (17) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (18) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (20) enum_specifier -> . ENUM LCPAREN RCPAREN
    (322) elaborated_type_specifier -> . class_key IDENTIFIER
    (323) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (324) elaborated_type_specifier -> . ENUM enum_name
    (325) elaborated_type_specifier -> . TYPE IDENTIFIER
    (326) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (264) operator_function_name -> . OPERATOR operator_name
    (32) inclusive_OR_expression -> . exclusive_OR_expression
    (33) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (304) class_head -> . class_key base_spec
    (305) class_head -> . class_key
    (306) class_head -> . class_key IDENTIFIER base_spec
    (307) class_head -> . class_key IDENTIFIER
    (328) class_key -> . CLASS
    (329) class_key -> . STRUCT
    (330) class_key -> . UNION
    (331) class_key -> . TEMPLATE
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 191
    CASE            shift and go to state 192
    DEFAULT         shift and go to state 193
    SEMICOLON       shift and go to state 195
    LCPAREN         shift and go to state 70
    IF              shift and go to state 196
    SWITCH          shift and go to state 198
    WHILE           shift and go to state 199
    DO              shift and go to state 200
    FOR             shift and go to state 201
    BREAK           shift and go to state 202
    CONTINUE        shift and go to state 203
    RETURN          shift and go to state 204
    GOTO            shift and go to state 205
    TRY             shift and go to state 207
    ASM             shift and go to state 12
    TEMPLATE        shift and go to state 15
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    TYPEDEF         shift and go to state 18
    LPAREN          shift and go to state 197
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    AUTO            shift and go to state 21
    STATIC          shift and go to state 22
    EXTERN          shift and go to state 23
    VIRTUAL         shift and go to state 24
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    THIS            shift and go to state 160
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    ENUM            shift and go to state 47
    TYPE            shift and go to state 49
    OPERATOR        shift and go to state 50
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    CLASS           shift and go to state 51
    STRUCT          shift and go to state 52
    UNION           shift and go to state 53

    expression                     shift and go to state 194
    statement                      shift and go to state 538
    labeled_statement              shift and go to state 183
    expression_statement           shift and go to state 184
    compound_statement             shift and go to state 185
    selection_statement            shift and go to state 186
    iteration_statement            shift and go to state 187
    jump_statement                 shift and go to state 188
    declaration_statement          shift and go to state 189
    try_block                      shift and go to state 190
    declaration                    shift and go to state 206
    assignment_expression          shift and go to state 208
    decl_specifiers                shift and go to state 5
    declarator_list                shift and go to state 6
    asm_declaration                shift and go to state 7
    function_definition            shift and go to state 8
    template_declaration           shift and go to state 9
    conditional_expression         shift and go to state 135
    unary_expression               shift and go to state 136
    decl_specifier                 shift and go to state 10
    init_declarator                shift and go to state 11
    declarator                     shift and go to state 14
    logical_OR_expression          shift and go to state 138
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    cast_expression                shift and go to state 143
    unary2_operator                shift and go to state 209
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    storage_class_specifier        shift and go to state 16
    type_specifier                 shift and go to state 17
    name                           shift and go to state 210
    logical_AND_expression         shift and go to state 148
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 150
    class_specifier                shift and go to state 26
    enum_specifier                 shift and go to state 27
    elaborated_type_specifier      shift and go to state 28
    operator_function_name         shift and go to state 32
    inclusive_OR_expression        shift and go to state 158
    literal                        shift and go to state 159
    class_head                     shift and go to state 46
    class_key                      shift and go to state 48
    exclusive_OR_expression        shift and go to state 161
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171

state 530

    (213) iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN . statement
    (184) statement -> . labeled_statement
    (185) statement -> . expression_statement
    (186) statement -> . compound_statement
    (187) statement -> . selection_statement
    (188) statement -> . iteration_statement
    (189) statement -> . jump_statement
    (190) statement -> . declaration_statement
    (191) statement -> . try_block
    (207) labeled_statement -> . IDENTIFIER COLON statement
    (208) labeled_statement -> . CASE constant_expression COLON statement
    (209) labeled_statement -> . DEFAULT COLON statement
    (218) expression_statement -> . expression SEMICOLON
    (219) expression_statement -> . SEMICOLON
    (180) compound_statement -> . LCPAREN statement_list RCPAREN
    (181) compound_statement -> . LCPAREN RCPAREN
    (197) selection_statement -> . IF LPAREN expression RPAREN statement
    (198) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (199) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (210) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (211) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (212) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (213) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (214) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (215) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (192) jump_statement -> . BREAK SEMICOLON
    (193) jump_statement -> . CONTINUE SEMICOLON
    (194) jump_statement -> . RETURN expression SEMICOLON
    (195) jump_statement -> . RETURN SEMICOLON
    (196) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (220) declaration_statement -> . declaration
    (200) try_block -> . TRY compound_statement handler_list
    (59) expression -> . assignment_expression
    (60) expression -> . expression COMMA assignment_expression
    (221) declaration -> . decl_specifiers declarator_list SEMICOLON
    (222) declaration -> . decl_specifiers SEMICOLON
    (223) declaration -> . declarator_list SEMICOLON
    (224) declaration -> . asm_declaration
    (225) declaration -> . function_definition
    (226) declaration -> . template_declaration
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (147) decl_specifiers -> . decl_specifiers decl_specifier
    (148) decl_specifiers -> . decl_specifier
    (230) declarator_list -> . init_declarator
    (231) declarator_list -> . declarator_list COMMA init_declarator
    (242) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (177) function_definition -> . decl_specifiers declarator fct_body
    (178) function_definition -> . declarator fct_body
    (227) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (26) conditional_expression -> . logical_OR_expression
    (27) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (149) decl_specifier -> . storage_class_specifier
    (150) decl_specifier -> . type_specifier
    (151) decl_specifier -> . TYPEDEF
    (232) init_declarator -> . declarator initializer
    (233) init_declarator -> . declarator
    (253) declarator -> . name
    (254) declarator -> . unary2_operator declarator
    (255) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (256) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (257) declarator -> . declarator LSPAREN RSPAREN
    (258) declarator -> . LPAREN declarator RPAREN
    (28) logical_OR_expression -> . logical_AND_expression
    (29) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (152) storage_class_specifier -> . AUTO
    (153) storage_class_specifier -> . STATIC
    (154) storage_class_specifier -> . EXTERN
    (155) storage_class_specifier -> . VIRTUAL
    (156) type_specifier -> . simple_type_name
    (157) type_specifier -> . class_specifier
    (158) type_specifier -> . enum_specifier
    (159) type_specifier -> . elaborated_type_specifier
    (160) type_specifier -> . CONST
    (161) type_specifier -> . VOLATILE
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (30) logical_AND_expression -> . inclusive_OR_expression
    (31) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (162) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (163) class_specifier -> . class_head LCPAREN RCPAREN
    (17) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (18) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (20) enum_specifier -> . ENUM LCPAREN RCPAREN
    (322) elaborated_type_specifier -> . class_key IDENTIFIER
    (323) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (324) elaborated_type_specifier -> . ENUM enum_name
    (325) elaborated_type_specifier -> . TYPE IDENTIFIER
    (326) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (264) operator_function_name -> . OPERATOR operator_name
    (32) inclusive_OR_expression -> . exclusive_OR_expression
    (33) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (304) class_head -> . class_key base_spec
    (305) class_head -> . class_key
    (306) class_head -> . class_key IDENTIFIER base_spec
    (307) class_head -> . class_key IDENTIFIER
    (328) class_key -> . CLASS
    (329) class_key -> . STRUCT
    (330) class_key -> . UNION
    (331) class_key -> . TEMPLATE
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 191
    CASE            shift and go to state 192
    DEFAULT         shift and go to state 193
    SEMICOLON       shift and go to state 195
    LCPAREN         shift and go to state 70
    IF              shift and go to state 196
    SWITCH          shift and go to state 198
    WHILE           shift and go to state 199
    DO              shift and go to state 200
    FOR             shift and go to state 201
    BREAK           shift and go to state 202
    CONTINUE        shift and go to state 203
    RETURN          shift and go to state 204
    GOTO            shift and go to state 205
    TRY             shift and go to state 207
    ASM             shift and go to state 12
    TEMPLATE        shift and go to state 15
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    TYPEDEF         shift and go to state 18
    LPAREN          shift and go to state 197
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    AUTO            shift and go to state 21
    STATIC          shift and go to state 22
    EXTERN          shift and go to state 23
    VIRTUAL         shift and go to state 24
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    THIS            shift and go to state 160
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    ENUM            shift and go to state 47
    TYPE            shift and go to state 49
    OPERATOR        shift and go to state 50
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    CLASS           shift and go to state 51
    STRUCT          shift and go to state 52
    UNION           shift and go to state 53

    expression                     shift and go to state 194
    statement                      shift and go to state 539
    labeled_statement              shift and go to state 183
    expression_statement           shift and go to state 184
    compound_statement             shift and go to state 185
    selection_statement            shift and go to state 186
    iteration_statement            shift and go to state 187
    jump_statement                 shift and go to state 188
    declaration_statement          shift and go to state 189
    try_block                      shift and go to state 190
    declaration                    shift and go to state 206
    assignment_expression          shift and go to state 208
    decl_specifiers                shift and go to state 5
    declarator_list                shift and go to state 6
    asm_declaration                shift and go to state 7
    function_definition            shift and go to state 8
    template_declaration           shift and go to state 9
    conditional_expression         shift and go to state 135
    unary_expression               shift and go to state 136
    decl_specifier                 shift and go to state 10
    init_declarator                shift and go to state 11
    declarator                     shift and go to state 14
    logical_OR_expression          shift and go to state 138
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    cast_expression                shift and go to state 143
    unary2_operator                shift and go to state 209
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    storage_class_specifier        shift and go to state 16
    type_specifier                 shift and go to state 17
    name                           shift and go to state 210
    logical_AND_expression         shift and go to state 148
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 150
    class_specifier                shift and go to state 26
    enum_specifier                 shift and go to state 27
    elaborated_type_specifier      shift and go to state 28
    operator_function_name         shift and go to state 32
    inclusive_OR_expression        shift and go to state 158
    literal                        shift and go to state 159
    class_head                     shift and go to state 46
    class_key                      shift and go to state 48
    exclusive_OR_expression        shift and go to state 161
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171

state 531

    (215) iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .

    RCPAREN         reduce using rule 215 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    IDENTIFIER      reduce using rule 215 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    CASE            reduce using rule 215 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    DEFAULT         reduce using rule 215 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    SEMICOLON       reduce using rule 215 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    LCPAREN         reduce using rule 215 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    IF              reduce using rule 215 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    SWITCH          reduce using rule 215 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    WHILE           reduce using rule 215 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    DO              reduce using rule 215 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    FOR             reduce using rule 215 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    BREAK           reduce using rule 215 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    CONTINUE        reduce using rule 215 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    RETURN          reduce using rule 215 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    GOTO            reduce using rule 215 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    TRY             reduce using rule 215 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    ASM             reduce using rule 215 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    TEMPLATE        reduce using rule 215 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    DPLUSOP         reduce using rule 215 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    DMINUSOP        reduce using rule 215 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    SIZEOF          reduce using rule 215 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    TYPEDEF         reduce using rule 215 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    LPAREN          reduce using rule 215 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    PLUSOP          reduce using rule 215 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    MINUSOP         reduce using rule 215 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    NOTSYM          reduce using rule 215 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    BNOP            reduce using rule 215 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    MULTOP          reduce using rule 215 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    BANDOP          reduce using rule 215 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    NEW             reduce using rule 215 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    DELETE          reduce using rule 215 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    AUTO            reduce using rule 215 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    STATIC          reduce using rule 215 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    EXTERN          reduce using rule 215 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    VIRTUAL         reduce using rule 215 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    CONST           reduce using rule 215 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    VOLATILE        reduce using rule 215 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    THIS            reduce using rule 215 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    CHAR            reduce using rule 215 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    SHORT           reduce using rule 215 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    INT             reduce using rule 215 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    LONG            reduce using rule 215 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    SIGNED          reduce using rule 215 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    UNSIGNED        reduce using rule 215 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    FLOAT           reduce using rule 215 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    DOUBLE          reduce using rule 215 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    VOID            reduce using rule 215 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    STRING          reduce using rule 215 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    ENUM            reduce using rule 215 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    TYPE            reduce using rule 215 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    OPERATOR        reduce using rule 215 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    NUMBER          reduce using rule 215 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    STRING_L        reduce using rule 215 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    SCHAR           reduce using rule 215 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    CLASS           reduce using rule 215 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    STRUCT          reduce using rule 215 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    UNION           reduce using rule 215 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    ELSE            reduce using rule 215 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)


state 532

    (203) handler -> CATCH LPAREN exception_declaration RPAREN . compound_statement
    (180) compound_statement -> . LCPAREN statement_list RCPAREN
    (181) compound_statement -> . LCPAREN RCPAREN

    LCPAREN         shift and go to state 70

    compound_statement             shift and go to state 540

state 533

    (204) exception_declaration -> type_specifier_list declarator .
    (255) declarator -> declarator . LPAREN argument_declaration_list RPAREN
    (256) declarator -> declarator . LSPAREN constant_expression RSPAREN
    (257) declarator -> declarator . LSPAREN RSPAREN

    RPAREN          reduce using rule 204 (exception_declaration -> type_specifier_list declarator .)
    LPAREN          shift and go to state 126
    LSPAREN         shift and go to state 67


state 534

    (205) exception_declaration -> type_specifier_list abstract_declarator .
    (130) abstract_declarator -> abstract_declarator . LPAREN argument_declaration_list RPAREN
    (132) abstract_declarator -> abstract_declarator . LSPAREN constant_expression RSPAREN
    (134) abstract_declarator -> abstract_declarator . LSPAREN RSPAREN

    RPAREN          reduce using rule 205 (exception_declaration -> type_specifier_list abstract_declarator .)
    LPAREN          shift and go to state 382
    LSPAREN         shift and go to state 383


state 535

    (198) selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .

    RCPAREN         reduce using rule 198 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IDENTIFIER      reduce using rule 198 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CASE            reduce using rule 198 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DEFAULT         reduce using rule 198 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SEMICOLON       reduce using rule 198 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LCPAREN         reduce using rule 198 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 198 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SWITCH          reduce using rule 198 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 198 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DO              reduce using rule 198 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 198 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 198 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CONTINUE        reduce using rule 198 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 198 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    GOTO            reduce using rule 198 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TRY             reduce using rule 198 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ASM             reduce using rule 198 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TEMPLATE        reduce using rule 198 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DPLUSOP         reduce using rule 198 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DMINUSOP        reduce using rule 198 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SIZEOF          reduce using rule 198 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TYPEDEF         reduce using rule 198 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 198 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUSOP          reduce using rule 198 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUSOP         reduce using rule 198 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NOTSYM          reduce using rule 198 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BNOP            reduce using rule 198 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MULTOP          reduce using rule 198 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BANDOP          reduce using rule 198 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NEW             reduce using rule 198 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DELETE          reduce using rule 198 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    AUTO            reduce using rule 198 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STATIC          reduce using rule 198 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    EXTERN          reduce using rule 198 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    VIRTUAL         reduce using rule 198 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CONST           reduce using rule 198 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    VOLATILE        reduce using rule 198 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    THIS            reduce using rule 198 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CHAR            reduce using rule 198 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SHORT           reduce using rule 198 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INT             reduce using rule 198 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LONG            reduce using rule 198 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SIGNED          reduce using rule 198 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    UNSIGNED        reduce using rule 198 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FLOAT           reduce using rule 198 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DOUBLE          reduce using rule 198 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    VOID            reduce using rule 198 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRING          reduce using rule 198 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ENUM            reduce using rule 198 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TYPE            reduce using rule 198 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    OPERATOR        reduce using rule 198 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NUMBER          reduce using rule 198 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRING_L        reduce using rule 198 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SCHAR           reduce using rule 198 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CLASS           reduce using rule 198 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRUCT          reduce using rule 198 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    UNION           reduce using rule 198 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 198 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)


state 536

    (211) iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .

    RCPAREN         reduce using rule 211 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 211 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    CASE            reduce using rule 211 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 211 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 211 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    LCPAREN         reduce using rule 211 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    IF              reduce using rule 211 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SWITCH          reduce using rule 211 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    WHILE           reduce using rule 211 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DO              reduce using rule 211 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    FOR             reduce using rule 211 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    BREAK           reduce using rule 211 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 211 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    RETURN          reduce using rule 211 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    GOTO            reduce using rule 211 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    TRY             reduce using rule 211 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    ASM             reduce using rule 211 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    TEMPLATE        reduce using rule 211 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DPLUSOP         reduce using rule 211 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DMINUSOP        reduce using rule 211 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SIZEOF          reduce using rule 211 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    TYPEDEF         reduce using rule 211 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    LPAREN          reduce using rule 211 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    PLUSOP          reduce using rule 211 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    MINUSOP         reduce using rule 211 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    NOTSYM          reduce using rule 211 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    BNOP            reduce using rule 211 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    MULTOP          reduce using rule 211 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    BANDOP          reduce using rule 211 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    NEW             reduce using rule 211 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DELETE          reduce using rule 211 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    AUTO            reduce using rule 211 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    STATIC          reduce using rule 211 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    EXTERN          reduce using rule 211 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    VIRTUAL         reduce using rule 211 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    CONST           reduce using rule 211 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    VOLATILE        reduce using rule 211 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    THIS            reduce using rule 211 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    CHAR            reduce using rule 211 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SHORT           reduce using rule 211 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    INT             reduce using rule 211 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    LONG            reduce using rule 211 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SIGNED          reduce using rule 211 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    UNSIGNED        reduce using rule 211 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    FLOAT           reduce using rule 211 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DOUBLE          reduce using rule 211 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    VOID            reduce using rule 211 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    STRING          reduce using rule 211 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    ENUM            reduce using rule 211 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    TYPE            reduce using rule 211 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    OPERATOR        reduce using rule 211 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    NUMBER          reduce using rule 211 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    STRING_L        reduce using rule 211 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SCHAR           reduce using rule 211 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    CLASS           reduce using rule 211 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    STRUCT          reduce using rule 211 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    UNION           reduce using rule 211 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    ELSE            reduce using rule 211 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)


state 537

    (212) iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN . statement
    (184) statement -> . labeled_statement
    (185) statement -> . expression_statement
    (186) statement -> . compound_statement
    (187) statement -> . selection_statement
    (188) statement -> . iteration_statement
    (189) statement -> . jump_statement
    (190) statement -> . declaration_statement
    (191) statement -> . try_block
    (207) labeled_statement -> . IDENTIFIER COLON statement
    (208) labeled_statement -> . CASE constant_expression COLON statement
    (209) labeled_statement -> . DEFAULT COLON statement
    (218) expression_statement -> . expression SEMICOLON
    (219) expression_statement -> . SEMICOLON
    (180) compound_statement -> . LCPAREN statement_list RCPAREN
    (181) compound_statement -> . LCPAREN RCPAREN
    (197) selection_statement -> . IF LPAREN expression RPAREN statement
    (198) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (199) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (210) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (211) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (212) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (213) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (214) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (215) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (192) jump_statement -> . BREAK SEMICOLON
    (193) jump_statement -> . CONTINUE SEMICOLON
    (194) jump_statement -> . RETURN expression SEMICOLON
    (195) jump_statement -> . RETURN SEMICOLON
    (196) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (220) declaration_statement -> . declaration
    (200) try_block -> . TRY compound_statement handler_list
    (59) expression -> . assignment_expression
    (60) expression -> . expression COMMA assignment_expression
    (221) declaration -> . decl_specifiers declarator_list SEMICOLON
    (222) declaration -> . decl_specifiers SEMICOLON
    (223) declaration -> . declarator_list SEMICOLON
    (224) declaration -> . asm_declaration
    (225) declaration -> . function_definition
    (226) declaration -> . template_declaration
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (147) decl_specifiers -> . decl_specifiers decl_specifier
    (148) decl_specifiers -> . decl_specifier
    (230) declarator_list -> . init_declarator
    (231) declarator_list -> . declarator_list COMMA init_declarator
    (242) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (177) function_definition -> . decl_specifiers declarator fct_body
    (178) function_definition -> . declarator fct_body
    (227) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (26) conditional_expression -> . logical_OR_expression
    (27) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (73) unary_expression -> . postfix_expression
    (74) unary_expression -> . DPLUSOP unary_expression
    (75) unary_expression -> . DMINUSOP unary_expression
    (76) unary_expression -> . unary1_operator cast_expression
    (77) unary_expression -> . unary2_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (149) decl_specifier -> . storage_class_specifier
    (150) decl_specifier -> . type_specifier
    (151) decl_specifier -> . TYPEDEF
    (232) init_declarator -> . declarator initializer
    (233) init_declarator -> . declarator
    (253) declarator -> . name
    (254) declarator -> . unary2_operator declarator
    (255) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (256) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (257) declarator -> . declarator LSPAREN RSPAREN
    (258) declarator -> . LPAREN declarator RPAREN
    (28) logical_OR_expression -> . logical_AND_expression
    (29) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (106) postfix_expression -> . primary_expression
    (107) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (108) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (109) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (100) unary1_operator -> . PLUSOP
    (101) unary1_operator -> . MINUSOP
    (102) unary1_operator -> . NOTSYM
    (103) unary1_operator -> . BNOP
    (104) unary2_operator -> . MULTOP
    (105) unary2_operator -> . BANDOP
    (83) allocation_expression -> . NEW placement new_type_name new_initializer
    (84) allocation_expression -> . NEW new_type_name new_initializer
    (85) allocation_expression -> . NEW placement new_type_name
    (86) allocation_expression -> . NEW new_type_name
    (87) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (88) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (89) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (90) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DELETE cast_expression
    (152) storage_class_specifier -> . AUTO
    (153) storage_class_specifier -> . STATIC
    (154) storage_class_specifier -> . EXTERN
    (155) storage_class_specifier -> . VIRTUAL
    (156) type_specifier -> . simple_type_name
    (157) type_specifier -> . class_specifier
    (158) type_specifier -> . enum_specifier
    (159) type_specifier -> . elaborated_type_specifier
    (160) type_specifier -> . CONST
    (161) type_specifier -> . VOLATILE
    (259) name -> . IDENTIFIER
    (260) name -> . operator_function_name
    (261) name -> . BNOP IDENTIFIER
    (30) logical_AND_expression -> . inclusive_OR_expression
    (31) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (117) primary_expression -> . literal
    (118) primary_expression -> . THIS
    (119) primary_expression -> . LPAREN expression RPAREN
    (120) primary_expression -> . name
    (332) simple_type_name -> . CHAR
    (333) simple_type_name -> . SHORT
    (334) simple_type_name -> . INT
    (335) simple_type_name -> . LONG
    (336) simple_type_name -> . SIGNED
    (337) simple_type_name -> . UNSIGNED
    (338) simple_type_name -> . FLOAT
    (339) simple_type_name -> . DOUBLE
    (340) simple_type_name -> . VOID
    (341) simple_type_name -> . STRING
    (162) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (163) class_specifier -> . class_head LCPAREN RCPAREN
    (17) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (18) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (20) enum_specifier -> . ENUM LCPAREN RCPAREN
    (322) elaborated_type_specifier -> . class_key IDENTIFIER
    (323) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (324) elaborated_type_specifier -> . ENUM enum_name
    (325) elaborated_type_specifier -> . TYPE IDENTIFIER
    (326) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (264) operator_function_name -> . OPERATOR operator_name
    (32) inclusive_OR_expression -> . exclusive_OR_expression
    (33) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (121) literal -> . NUMBER
    (122) literal -> . STRING_L
    (123) literal -> . SCHAR
    (304) class_head -> . class_key base_spec
    (305) class_head -> . class_key
    (306) class_head -> . class_key IDENTIFIER base_spec
    (307) class_head -> . class_key IDENTIFIER
    (328) class_key -> . CLASS
    (329) class_key -> . STRUCT
    (330) class_key -> . UNION
    (331) class_key -> . TEMPLATE
    (34) exclusive_OR_expression -> . AND_expression
    (35) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (36) AND_expression -> . equality_expression
    (37) AND_expression -> . AND_expression BANDOP equality_expression
    (38) equality_expression -> . relational_expression
    (39) equality_expression -> . equality_expression EQCOMP relational_expression
    (40) equality_expression -> . equality_expression NEQCOMP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression LTCOMP shift_expression
    (43) relational_expression -> . relational_expression GTCOMP shift_expression
    (44) relational_expression -> . relational_expression LTECOMP shift_expression
    (45) relational_expression -> . relational_expression GTECOMP shift_expression
    (46) shift_expression -> . additive_expression
    (47) shift_expression -> . shift_expression LSHIFT additive_expression
    (48) shift_expression -> . shift_expression RSHIFT additive_expression
    (49) additive_expression -> . multiplicative_expression
    (50) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (51) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (52) multiplicative_expression -> . pm_expression
    (53) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (56) pm_expression -> . cast_expression
    (57) pm_expression -> . pm_expression DOTSTAR cast_expression
    (58) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (124) cast_expression -> . unary_expression
    (125) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 191
    CASE            shift and go to state 192
    DEFAULT         shift and go to state 193
    SEMICOLON       shift and go to state 195
    LCPAREN         shift and go to state 70
    IF              shift and go to state 196
    SWITCH          shift and go to state 198
    WHILE           shift and go to state 199
    DO              shift and go to state 200
    FOR             shift and go to state 201
    BREAK           shift and go to state 202
    CONTINUE        shift and go to state 203
    RETURN          shift and go to state 204
    GOTO            shift and go to state 205
    TRY             shift and go to state 207
    ASM             shift and go to state 12
    TEMPLATE        shift and go to state 15
    DPLUSOP         shift and go to state 140
    DMINUSOP        shift and go to state 141
    SIZEOF          shift and go to state 145
    TYPEDEF         shift and go to state 18
    LPAREN          shift and go to state 197
    PLUSOP          shift and go to state 152
    MINUSOP         shift and go to state 153
    NOTSYM          shift and go to state 154
    BNOP            shift and go to state 155
    MULTOP          shift and go to state 34
    BANDOP          shift and go to state 35
    NEW             shift and go to state 156
    DELETE          shift and go to state 157
    AUTO            shift and go to state 21
    STATIC          shift and go to state 22
    EXTERN          shift and go to state 23
    VIRTUAL         shift and go to state 24
    CONST           shift and go to state 29
    VOLATILE        shift and go to state 30
    THIS            shift and go to state 160
    CHAR            shift and go to state 36
    SHORT           shift and go to state 37
    INT             shift and go to state 38
    LONG            shift and go to state 39
    SIGNED          shift and go to state 40
    UNSIGNED        shift and go to state 41
    FLOAT           shift and go to state 42
    DOUBLE          shift and go to state 43
    VOID            shift and go to state 44
    STRING          shift and go to state 45
    ENUM            shift and go to state 47
    TYPE            shift and go to state 49
    OPERATOR        shift and go to state 50
    NUMBER          shift and go to state 162
    STRING_L        shift and go to state 163
    SCHAR           shift and go to state 164
    CLASS           shift and go to state 51
    STRUCT          shift and go to state 52
    UNION           shift and go to state 53

    expression                     shift and go to state 194
    statement                      shift and go to state 541
    labeled_statement              shift and go to state 183
    expression_statement           shift and go to state 184
    compound_statement             shift and go to state 185
    selection_statement            shift and go to state 186
    iteration_statement            shift and go to state 187
    jump_statement                 shift and go to state 188
    declaration_statement          shift and go to state 189
    try_block                      shift and go to state 190
    declaration                    shift and go to state 206
    assignment_expression          shift and go to state 208
    decl_specifiers                shift and go to state 5
    declarator_list                shift and go to state 6
    asm_declaration                shift and go to state 7
    function_definition            shift and go to state 8
    template_declaration           shift and go to state 9
    conditional_expression         shift and go to state 135
    unary_expression               shift and go to state 136
    decl_specifier                 shift and go to state 10
    init_declarator                shift and go to state 11
    declarator                     shift and go to state 14
    logical_OR_expression          shift and go to state 138
    postfix_expression             shift and go to state 139
    unary1_operator                shift and go to state 142
    cast_expression                shift and go to state 143
    unary2_operator                shift and go to state 209
    allocation_expression          shift and go to state 146
    deallocation_expression        shift and go to state 147
    storage_class_specifier        shift and go to state 16
    type_specifier                 shift and go to state 17
    name                           shift and go to state 210
    logical_AND_expression         shift and go to state 148
    primary_expression             shift and go to state 149
    simple_type_name               shift and go to state 150
    class_specifier                shift and go to state 26
    enum_specifier                 shift and go to state 27
    elaborated_type_specifier      shift and go to state 28
    operator_function_name         shift and go to state 32
    inclusive_OR_expression        shift and go to state 158
    literal                        shift and go to state 159
    class_head                     shift and go to state 46
    class_key                      shift and go to state 48
    exclusive_OR_expression        shift and go to state 161
    AND_expression                 shift and go to state 165
    equality_expression            shift and go to state 166
    relational_expression          shift and go to state 167
    shift_expression               shift and go to state 168
    additive_expression            shift and go to state 169
    multiplicative_expression      shift and go to state 170
    pm_expression                  shift and go to state 171

state 538

    (214) iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .

    RCPAREN         reduce using rule 214 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    IDENTIFIER      reduce using rule 214 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    CASE            reduce using rule 214 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    DEFAULT         reduce using rule 214 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    SEMICOLON       reduce using rule 214 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    LCPAREN         reduce using rule 214 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    IF              reduce using rule 214 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    SWITCH          reduce using rule 214 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    WHILE           reduce using rule 214 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    DO              reduce using rule 214 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    FOR             reduce using rule 214 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    BREAK           reduce using rule 214 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    CONTINUE        reduce using rule 214 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    RETURN          reduce using rule 214 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    GOTO            reduce using rule 214 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    TRY             reduce using rule 214 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    ASM             reduce using rule 214 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    TEMPLATE        reduce using rule 214 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    DPLUSOP         reduce using rule 214 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    DMINUSOP        reduce using rule 214 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    SIZEOF          reduce using rule 214 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    TYPEDEF         reduce using rule 214 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    LPAREN          reduce using rule 214 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    PLUSOP          reduce using rule 214 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    MINUSOP         reduce using rule 214 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    NOTSYM          reduce using rule 214 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    BNOP            reduce using rule 214 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    MULTOP          reduce using rule 214 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    BANDOP          reduce using rule 214 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    NEW             reduce using rule 214 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    DELETE          reduce using rule 214 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    AUTO            reduce using rule 214 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    STATIC          reduce using rule 214 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    EXTERN          reduce using rule 214 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    VIRTUAL         reduce using rule 214 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    CONST           reduce using rule 214 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    VOLATILE        reduce using rule 214 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    THIS            reduce using rule 214 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    CHAR            reduce using rule 214 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    SHORT           reduce using rule 214 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    INT             reduce using rule 214 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    LONG            reduce using rule 214 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    SIGNED          reduce using rule 214 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    UNSIGNED        reduce using rule 214 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    FLOAT           reduce using rule 214 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    DOUBLE          reduce using rule 214 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    VOID            reduce using rule 214 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    STRING          reduce using rule 214 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    ENUM            reduce using rule 214 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    TYPE            reduce using rule 214 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    OPERATOR        reduce using rule 214 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    NUMBER          reduce using rule 214 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    STRING_L        reduce using rule 214 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    SCHAR           reduce using rule 214 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    CLASS           reduce using rule 214 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    STRUCT          reduce using rule 214 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    UNION           reduce using rule 214 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    ELSE            reduce using rule 214 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)


state 539

    (213) iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .

    RCPAREN         reduce using rule 213 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    IDENTIFIER      reduce using rule 213 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    CASE            reduce using rule 213 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    DEFAULT         reduce using rule 213 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    SEMICOLON       reduce using rule 213 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    LCPAREN         reduce using rule 213 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    IF              reduce using rule 213 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    SWITCH          reduce using rule 213 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    WHILE           reduce using rule 213 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    DO              reduce using rule 213 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    FOR             reduce using rule 213 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    BREAK           reduce using rule 213 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    CONTINUE        reduce using rule 213 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    RETURN          reduce using rule 213 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    GOTO            reduce using rule 213 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    TRY             reduce using rule 213 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    ASM             reduce using rule 213 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    TEMPLATE        reduce using rule 213 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    DPLUSOP         reduce using rule 213 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    DMINUSOP        reduce using rule 213 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    SIZEOF          reduce using rule 213 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    TYPEDEF         reduce using rule 213 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    LPAREN          reduce using rule 213 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    PLUSOP          reduce using rule 213 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    MINUSOP         reduce using rule 213 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    NOTSYM          reduce using rule 213 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    BNOP            reduce using rule 213 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    MULTOP          reduce using rule 213 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    BANDOP          reduce using rule 213 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    NEW             reduce using rule 213 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    DELETE          reduce using rule 213 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    AUTO            reduce using rule 213 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    STATIC          reduce using rule 213 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    EXTERN          reduce using rule 213 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    VIRTUAL         reduce using rule 213 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    CONST           reduce using rule 213 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    VOLATILE        reduce using rule 213 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    THIS            reduce using rule 213 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    CHAR            reduce using rule 213 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    SHORT           reduce using rule 213 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    INT             reduce using rule 213 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    LONG            reduce using rule 213 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    SIGNED          reduce using rule 213 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    UNSIGNED        reduce using rule 213 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    FLOAT           reduce using rule 213 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    DOUBLE          reduce using rule 213 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    VOID            reduce using rule 213 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    STRING          reduce using rule 213 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    ENUM            reduce using rule 213 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    TYPE            reduce using rule 213 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    OPERATOR        reduce using rule 213 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    NUMBER          reduce using rule 213 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    STRING_L        reduce using rule 213 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    SCHAR           reduce using rule 213 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    CLASS           reduce using rule 213 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    STRUCT          reduce using rule 213 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    UNION           reduce using rule 213 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    ELSE            reduce using rule 213 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)


state 540

    (203) handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .

    CATCH           reduce using rule 203 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    RCPAREN         reduce using rule 203 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    IDENTIFIER      reduce using rule 203 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    CASE            reduce using rule 203 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    DEFAULT         reduce using rule 203 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    SEMICOLON       reduce using rule 203 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    LCPAREN         reduce using rule 203 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    IF              reduce using rule 203 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    SWITCH          reduce using rule 203 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    WHILE           reduce using rule 203 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    DO              reduce using rule 203 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    FOR             reduce using rule 203 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    BREAK           reduce using rule 203 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    CONTINUE        reduce using rule 203 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    RETURN          reduce using rule 203 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    GOTO            reduce using rule 203 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    TRY             reduce using rule 203 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    ASM             reduce using rule 203 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    TEMPLATE        reduce using rule 203 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    DPLUSOP         reduce using rule 203 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    DMINUSOP        reduce using rule 203 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    SIZEOF          reduce using rule 203 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    TYPEDEF         reduce using rule 203 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    LPAREN          reduce using rule 203 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    PLUSOP          reduce using rule 203 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    MINUSOP         reduce using rule 203 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    NOTSYM          reduce using rule 203 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    BNOP            reduce using rule 203 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    MULTOP          reduce using rule 203 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    BANDOP          reduce using rule 203 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    NEW             reduce using rule 203 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    DELETE          reduce using rule 203 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    AUTO            reduce using rule 203 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    STATIC          reduce using rule 203 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    EXTERN          reduce using rule 203 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    VIRTUAL         reduce using rule 203 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    CONST           reduce using rule 203 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    VOLATILE        reduce using rule 203 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    THIS            reduce using rule 203 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    CHAR            reduce using rule 203 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    SHORT           reduce using rule 203 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    INT             reduce using rule 203 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    LONG            reduce using rule 203 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    SIGNED          reduce using rule 203 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    UNSIGNED        reduce using rule 203 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    FLOAT           reduce using rule 203 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    DOUBLE          reduce using rule 203 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    VOID            reduce using rule 203 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    STRING          reduce using rule 203 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    ENUM            reduce using rule 203 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    TYPE            reduce using rule 203 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    OPERATOR        reduce using rule 203 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    NUMBER          reduce using rule 203 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    STRING_L        reduce using rule 203 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    SCHAR           reduce using rule 203 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    CLASS           reduce using rule 203 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    STRUCT          reduce using rule 203 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    UNION           reduce using rule 203 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    ELSE            reduce using rule 203 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)


state 541

    (212) iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .

    RCPAREN         reduce using rule 212 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    IDENTIFIER      reduce using rule 212 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    CASE            reduce using rule 212 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    DEFAULT         reduce using rule 212 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    SEMICOLON       reduce using rule 212 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    LCPAREN         reduce using rule 212 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    IF              reduce using rule 212 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    SWITCH          reduce using rule 212 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    WHILE           reduce using rule 212 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    DO              reduce using rule 212 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    FOR             reduce using rule 212 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    BREAK           reduce using rule 212 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    CONTINUE        reduce using rule 212 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    RETURN          reduce using rule 212 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    GOTO            reduce using rule 212 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    TRY             reduce using rule 212 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    ASM             reduce using rule 212 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    TEMPLATE        reduce using rule 212 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    DPLUSOP         reduce using rule 212 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    DMINUSOP        reduce using rule 212 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    SIZEOF          reduce using rule 212 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    TYPEDEF         reduce using rule 212 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    LPAREN          reduce using rule 212 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    PLUSOP          reduce using rule 212 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    MINUSOP         reduce using rule 212 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    NOTSYM          reduce using rule 212 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    BNOP            reduce using rule 212 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    MULTOP          reduce using rule 212 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    BANDOP          reduce using rule 212 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    NEW             reduce using rule 212 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    DELETE          reduce using rule 212 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    AUTO            reduce using rule 212 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    STATIC          reduce using rule 212 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    EXTERN          reduce using rule 212 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    VIRTUAL         reduce using rule 212 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    CONST           reduce using rule 212 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    VOLATILE        reduce using rule 212 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    THIS            reduce using rule 212 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    CHAR            reduce using rule 212 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    SHORT           reduce using rule 212 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    INT             reduce using rule 212 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    LONG            reduce using rule 212 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    SIGNED          reduce using rule 212 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    UNSIGNED        reduce using rule 212 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    FLOAT           reduce using rule 212 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    DOUBLE          reduce using rule 212 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    VOID            reduce using rule 212 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    STRING          reduce using rule 212 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    ENUM            reduce using rule 212 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    TYPE            reduce using rule 212 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    OPERATOR        reduce using rule 212 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    NUMBER          reduce using rule 212 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    STRING_L        reduce using rule 212 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    SCHAR           reduce using rule 212 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    CLASS           reduce using rule 212 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    STRUCT          reduce using rule 212 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    UNION           reduce using rule 212 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    ELSE            reduce using rule 212 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LPAREN in state 72 resolved as shift
WARNING: shift/reduce conflict for LSPAREN in state 72 resolved as shift
WARNING: shift/reduce conflict for COLON in state 78 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 150 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 155 resolved as shift
WARNING: shift/reduce conflict for OROP in state 158 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 223 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 251 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 270 resolved as shift
WARNING: shift/reduce conflict for LSPAREN in state 270 resolved as shift
WARNING: shift/reduce conflict for MULTOP in state 294 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 327 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 362 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 373 resolved as shift
WARNING: shift/reduce conflict for LSPAREN in state 373 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 380 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 384 resolved as shift
WARNING: shift/reduce conflict for LSPAREN in state 384 resolved as shift
WARNING: shift/reduce conflict for OROP in state 398 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 466 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 467 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 515 resolved as shift
WARNING: reduce/reduce conflict in state 210 resolved using rule (primary_expression -> name)
WARNING: rejected rule (declarator -> name) in state 210
